
cats_tele_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ccc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005d88  08005d88  00015d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e10  08005e10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e10  08005e10  00015e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e18  08005e18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005e18  08005e18  00015e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e20  08005e20  00015e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  2000000c  08005e30  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08005e30  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001738f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a48  00000000  00000000  000373c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  00039e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c0  00000000  00000000  0003b0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aca0  00000000  00000000  0003c288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a5a  00000000  00000000  00056f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa58f  00000000  00000000  0006c982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00116f11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044ac  00000000  00000000  00116f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005d70 	.word	0x08005d70

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08005d70 	.word	0x08005d70

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	1c08      	adds	r0, r1, #0
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <_Z41__static_initialization_and_destruction_0ii>:
uint32_t uidMacSeedGet(void)
{
    const uint32_t macSeed = ((uint32_t)UID[2] << 24) + ((uint32_t)UID[3] << 16) +
                             ((uint32_t)UID[4] << 8) + UID[5];
    return macSeed;
}
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d127      	bne.n	800067c <_Z41__static_initialization_and_destruction_0ii+0x60>
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	4a15      	ldr	r2, [pc, #84]	; (8000684 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d123      	bne.n	800067c <_Z41__static_initialization_and_destruction_0ii+0x60>
uint8_t MasterUID[6] = {UID[0], UID[1], UID[2], UID[3], UID[4], UID[5]}; // Special binding UID values
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000636:	781a      	ldrb	r2, [r3, #0]
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800063a:	701a      	strb	r2, [r3, #0]
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800063e:	785a      	ldrb	r2, [r3, #1]
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000642:	705a      	strb	r2, [r3, #1]
 8000644:	4b10      	ldr	r3, [pc, #64]	; (8000688 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000646:	789a      	ldrb	r2, [r3, #2]
 8000648:	4b10      	ldr	r3, [pc, #64]	; (800068c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800064a:	709a      	strb	r2, [r3, #2]
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800064e:	78da      	ldrb	r2, [r3, #3]
 8000650:	4b0e      	ldr	r3, [pc, #56]	; (800068c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000652:	70da      	strb	r2, [r3, #3]
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000656:	791a      	ldrb	r2, [r3, #4]
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800065a:	711a      	strb	r2, [r3, #4]
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800065e:	795a      	ldrb	r2, [r3, #5]
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000662:	715a      	strb	r2, [r3, #5]
uint16_t CRCInitializer = (UID[4] << 8) | UID[5];
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	021b      	lsls	r3, r3, #8
 800066a:	b21a      	sxth	r2, r3
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800066e:	795b      	ldrb	r3, [r3, #5]
 8000670:	b21b      	sxth	r3, r3
 8000672:	4313      	orrs	r3, r2
 8000674:	b21b      	sxth	r3, r3
 8000676:	b29a      	uxth	r2, r3
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800067a:	801a      	strh	r2, [r3, #0]
}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b002      	add	sp, #8
 8000682:	bd80      	pop	{r7, pc}
 8000684:	0000ffff 	.word	0x0000ffff
 8000688:	20000028 	.word	0x20000028
 800068c:	20000030 	.word	0x20000030
 8000690:	20000036 	.word	0x20000036

08000694 <_GLOBAL__sub_I_ExpressLRS_AirRateConfig>:
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <_GLOBAL__sub_I_ExpressLRS_AirRateConfig+0x14>)
 800069a:	0019      	movs	r1, r3
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff ffbd 	bl	800061c <_Z41__static_initialization_and_destruction_0ii>
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	0000ffff 	.word	0x0000ffff

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b2:	f000 fd69 	bl	8001188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b6:	f000 f841 	bl	800073c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ba:	f000 fa5f 	bl	8000b7c <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 80006be:	f000 f88d 	bl	80007dc <_ZL12MX_ADC1_Initv>
  MX_SPI1_Init();
 80006c2:	f000 f8fd 	bl	80008c0 <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 80006c6:	f000 f99d 	bl	8000a04 <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 80006ca:	f000 f9f9 	bl	8000ac0 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 80006ce:	f000 f939 	bl	8000944 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <main+0x80>)
 80006d4:	0018      	movs	r0, r3
 80006d6:	f002 ff29 	bl	800352c <HAL_TIM_Base_Start_IT>


  HAL_UART_Receive_IT(&huart1, buffer ,1);
 80006da:	4915      	ldr	r1, [pc, #84]	; (8000730 <main+0x84>)
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <main+0x88>)
 80006de:	2201      	movs	r2, #1
 80006e0:	0018      	movs	r0, r3
 80006e2:	f003 fb95 	bl	8003e10 <HAL_UART_Receive_IT>

  uint8_t buf[5];
  uint8_t in[5] = {0};
 80006e6:	003b      	movs	r3, r7
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	2200      	movs	r2, #0
 80006ee:	711a      	strb	r2, [r3, #4]

  uint16_t address = 0x0891;
 80006f0:	200e      	movs	r0, #14
 80006f2:	183b      	adds	r3, r7, r0
 80006f4:	4a10      	ldr	r2, [pc, #64]	; (8000738 <main+0x8c>)
 80006f6:	801a      	strh	r2, [r3, #0]

  buf[0] = (SX1280_RADIO_READ_REGISTER);
 80006f8:	2108      	movs	r1, #8
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2219      	movs	r2, #25
 80006fe:	701a      	strb	r2, [r3, #0]
  buf[1] = ((address & 0xFF00) >> 8);
 8000700:	183b      	adds	r3, r7, r0
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	0a1b      	lsrs	r3, r3, #8
 8000706:	b29b      	uxth	r3, r3
 8000708:	b2da      	uxtb	r2, r3
 800070a:	187b      	adds	r3, r7, r1
 800070c:	705a      	strb	r2, [r3, #1]
  buf[2] = (address & 0x00FF);
 800070e:	183b      	adds	r3, r7, r0
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	b2da      	uxtb	r2, r3
 8000714:	187b      	adds	r3, r7, r1
 8000716:	709a      	strb	r2, [r3, #2]
  buf[3] = 0x00;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2200      	movs	r2, #0
 800071c:	70da      	strb	r2, [r3, #3]
  buf[4] = 0x20;
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2220      	movs	r2, #32
 8000722:	711a      	strb	r2, [r3, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(200);
 8000724:	20c8      	movs	r0, #200	; 0xc8
 8000726:	f000 fdb5 	bl	8001294 <HAL_Delay>
 800072a:	e7fb      	b.n	8000724 <main+0x78>
 800072c:	20000104 	.word	0x20000104
 8000730:	20000270 	.word	0x20000270
 8000734:	20000150 	.word	0x20000150
 8000738:	00000891 	.word	0x00000891

0800073c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b590      	push	{r4, r7, lr}
 800073e:	b093      	sub	sp, #76	; 0x4c
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	2410      	movs	r4, #16
 8000744:	193b      	adds	r3, r7, r4
 8000746:	0018      	movs	r0, r3
 8000748:	2338      	movs	r3, #56	; 0x38
 800074a:	001a      	movs	r2, r3
 800074c:	2100      	movs	r1, #0
 800074e:	f005 fb07 	bl	8005d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000752:	003b      	movs	r3, r7
 8000754:	0018      	movs	r0, r3
 8000756:	2310      	movs	r3, #16
 8000758:	001a      	movs	r2, r3
 800075a:	2100      	movs	r1, #0
 800075c:	f005 fb00 	bl	8005d60 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000760:	2380      	movs	r3, #128	; 0x80
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	0018      	movs	r0, r3
 8000766:	f001 fde7 	bl	8002338 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800076a:	193b      	adds	r3, r7, r4
 800076c:	2202      	movs	r2, #2
 800076e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000770:	193b      	adds	r3, r7, r4
 8000772:	2280      	movs	r2, #128	; 0x80
 8000774:	0052      	lsls	r2, r2, #1
 8000776:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000778:	193b      	adds	r3, r7, r4
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077e:	193b      	adds	r3, r7, r4
 8000780:	2240      	movs	r2, #64	; 0x40
 8000782:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000784:	193b      	adds	r3, r7, r4
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078a:	193b      	adds	r3, r7, r4
 800078c:	0018      	movs	r0, r3
 800078e:	f001 fe1f 	bl	80023d0 <HAL_RCC_OscConfig>
 8000792:	0003      	movs	r3, r0
 8000794:	1e5a      	subs	r2, r3, #1
 8000796:	4193      	sbcs	r3, r2
 8000798:	b2db      	uxtb	r3, r3
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <_Z18SystemClock_Configv+0x66>
  {
    Error_Handler();
 800079e:	f000 fac5 	bl	8000d2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a2:	003b      	movs	r3, r7
 80007a4:	2207      	movs	r2, #7
 80007a6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007a8:	003b      	movs	r3, r7
 80007aa:	2200      	movs	r2, #0
 80007ac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ae:	003b      	movs	r3, r7
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b4:	003b      	movs	r3, r7
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ba:	003b      	movs	r3, r7
 80007bc:	2100      	movs	r1, #0
 80007be:	0018      	movs	r0, r3
 80007c0:	f002 f926 	bl	8002a10 <HAL_RCC_ClockConfig>
 80007c4:	0003      	movs	r3, r0
 80007c6:	1e5a      	subs	r2, r3, #1
 80007c8:	4193      	sbcs	r3, r2
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <_Z18SystemClock_Configv+0x98>
  {
    Error_Handler();
 80007d0:	f000 faac 	bl	8000d2c <Error_Handler>
  }
}
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	b013      	add	sp, #76	; 0x4c
 80007da:	bd90      	pop	{r4, r7, pc}

080007dc <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	0018      	movs	r0, r3
 80007e6:	230c      	movs	r3, #12
 80007e8:	001a      	movs	r2, r3
 80007ea:	2100      	movs	r1, #0
 80007ec:	f005 fab8 	bl	8005d60 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007f0:	4b31      	ldr	r3, [pc, #196]	; (80008b8 <_ZL12MX_ADC1_Initv+0xdc>)
 80007f2:	4a32      	ldr	r2, [pc, #200]	; (80008bc <_ZL12MX_ADC1_Initv+0xe0>)
 80007f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007f6:	4b30      	ldr	r3, [pc, #192]	; (80008b8 <_ZL12MX_ADC1_Initv+0xdc>)
 80007f8:	2280      	movs	r2, #128	; 0x80
 80007fa:	05d2      	lsls	r2, r2, #23
 80007fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007fe:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <_ZL12MX_ADC1_Initv+0xdc>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000804:	4b2c      	ldr	r3, [pc, #176]	; (80008b8 <_ZL12MX_ADC1_Initv+0xdc>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800080a:	4b2b      	ldr	r3, [pc, #172]	; (80008b8 <_ZL12MX_ADC1_Initv+0xdc>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000810:	4b29      	ldr	r3, [pc, #164]	; (80008b8 <_ZL12MX_ADC1_Initv+0xdc>)
 8000812:	2204      	movs	r2, #4
 8000814:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000816:	4b28      	ldr	r3, [pc, #160]	; (80008b8 <_ZL12MX_ADC1_Initv+0xdc>)
 8000818:	2200      	movs	r2, #0
 800081a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800081c:	4b26      	ldr	r3, [pc, #152]	; (80008b8 <_ZL12MX_ADC1_Initv+0xdc>)
 800081e:	2200      	movs	r2, #0
 8000820:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000822:	4b25      	ldr	r3, [pc, #148]	; (80008b8 <_ZL12MX_ADC1_Initv+0xdc>)
 8000824:	2200      	movs	r2, #0
 8000826:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000828:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <_ZL12MX_ADC1_Initv+0xdc>)
 800082a:	2201      	movs	r2, #1
 800082c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800082e:	4b22      	ldr	r3, [pc, #136]	; (80008b8 <_ZL12MX_ADC1_Initv+0xdc>)
 8000830:	2220      	movs	r2, #32
 8000832:	2100      	movs	r1, #0
 8000834:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <_ZL12MX_ADC1_Initv+0xdc>)
 8000838:	2200      	movs	r2, #0
 800083a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800083c:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <_ZL12MX_ADC1_Initv+0xdc>)
 800083e:	2200      	movs	r2, #0
 8000840:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000842:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <_ZL12MX_ADC1_Initv+0xdc>)
 8000844:	222c      	movs	r2, #44	; 0x2c
 8000846:	2100      	movs	r1, #0
 8000848:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800084a:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <_ZL12MX_ADC1_Initv+0xdc>)
 800084c:	2200      	movs	r2, #0
 800084e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <_ZL12MX_ADC1_Initv+0xdc>)
 8000852:	2200      	movs	r2, #0
 8000854:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <_ZL12MX_ADC1_Initv+0xdc>)
 8000858:	2200      	movs	r2, #0
 800085a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800085c:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <_ZL12MX_ADC1_Initv+0xdc>)
 800085e:	223c      	movs	r2, #60	; 0x3c
 8000860:	2100      	movs	r1, #0
 8000862:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <_ZL12MX_ADC1_Initv+0xdc>)
 8000866:	2200      	movs	r2, #0
 8000868:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <_ZL12MX_ADC1_Initv+0xdc>)
 800086c:	0018      	movs	r0, r3
 800086e:	f000 fe33 	bl	80014d8 <HAL_ADC_Init>
 8000872:	0003      	movs	r3, r0
 8000874:	1e5a      	subs	r2, r3, #1
 8000876:	4193      	sbcs	r3, r2
 8000878:	b2db      	uxtb	r3, r3
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <_ZL12MX_ADC1_Initv+0xa6>
  {
    Error_Handler();
 800087e:	f000 fa55 	bl	8000d2c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2201      	movs	r2, #1
 8000886:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000894:	1d3a      	adds	r2, r7, #4
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <_ZL12MX_ADC1_Initv+0xdc>)
 8000898:	0011      	movs	r1, r2
 800089a:	0018      	movs	r0, r3
 800089c:	f000 fffa 	bl	8001894 <HAL_ADC_ConfigChannel>
 80008a0:	0003      	movs	r3, r0
 80008a2:	1e5a      	subs	r2, r3, #1
 80008a4:	4193      	sbcs	r3, r2
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <_ZL12MX_ADC1_Initv+0xd4>
  {
    Error_Handler();
 80008ac:	f000 fa3e 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b004      	add	sp, #16
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	2000003c 	.word	0x2000003c
 80008bc:	40012400 	.word	0x40012400

080008c0 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <_ZL12MX_SPI1_Initv+0x7c>)
 80008c6:	4a1e      	ldr	r2, [pc, #120]	; (8000940 <_ZL12MX_SPI1_Initv+0x80>)
 80008c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ca:	4b1c      	ldr	r3, [pc, #112]	; (800093c <_ZL12MX_SPI1_Initv+0x7c>)
 80008cc:	2282      	movs	r2, #130	; 0x82
 80008ce:	0052      	lsls	r2, r2, #1
 80008d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	; (800093c <_ZL12MX_SPI1_Initv+0x7c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <_ZL12MX_SPI1_Initv+0x7c>)
 80008da:	22e0      	movs	r2, #224	; 0xe0
 80008dc:	00d2      	lsls	r2, r2, #3
 80008de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008e0:	4b16      	ldr	r3, [pc, #88]	; (800093c <_ZL12MX_SPI1_Initv+0x7c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <_ZL12MX_SPI1_Initv+0x7c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <_ZL12MX_SPI1_Initv+0x7c>)
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	0092      	lsls	r2, r2, #2
 80008f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <_ZL12MX_SPI1_Initv+0x7c>)
 80008f6:	2208      	movs	r2, #8
 80008f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <_ZL12MX_SPI1_Initv+0x7c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000900:	4b0e      	ldr	r3, [pc, #56]	; (800093c <_ZL12MX_SPI1_Initv+0x7c>)
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000906:	4b0d      	ldr	r3, [pc, #52]	; (800093c <_ZL12MX_SPI1_Initv+0x7c>)
 8000908:	2200      	movs	r2, #0
 800090a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800090c:	4b0b      	ldr	r3, [pc, #44]	; (800093c <_ZL12MX_SPI1_Initv+0x7c>)
 800090e:	2207      	movs	r2, #7
 8000910:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <_ZL12MX_SPI1_Initv+0x7c>)
 8000914:	2200      	movs	r2, #0
 8000916:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <_ZL12MX_SPI1_Initv+0x7c>)
 800091a:	2200      	movs	r2, #0
 800091c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800091e:	4b07      	ldr	r3, [pc, #28]	; (800093c <_ZL12MX_SPI1_Initv+0x7c>)
 8000920:	0018      	movs	r0, r3
 8000922:	f002 fbd7 	bl	80030d4 <HAL_SPI_Init>
 8000926:	0003      	movs	r3, r0
 8000928:	1e5a      	subs	r2, r3, #1
 800092a:	4193      	sbcs	r3, r2
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <_ZL12MX_SPI1_Initv+0x76>
  {
    Error_Handler();
 8000932:	f000 f9fb 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	200000a0 	.word	0x200000a0
 8000940:	40013000 	.word	0x40013000

08000944 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094a:	2310      	movs	r3, #16
 800094c:	18fb      	adds	r3, r7, r3
 800094e:	0018      	movs	r0, r3
 8000950:	2310      	movs	r3, #16
 8000952:	001a      	movs	r2, r3
 8000954:	2100      	movs	r1, #0
 8000956:	f005 fa03 	bl	8005d60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	0018      	movs	r0, r3
 800095e:	230c      	movs	r3, #12
 8000960:	001a      	movs	r2, r3
 8000962:	2100      	movs	r1, #0
 8000964:	f005 f9fc 	bl	8005d60 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000968:	4b25      	ldr	r3, [pc, #148]	; (8000a00 <_ZL12MX_TIM2_Initv+0xbc>)
 800096a:	2280      	movs	r2, #128	; 0x80
 800096c:	05d2      	lsls	r2, r2, #23
 800096e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000;
 8000970:	4b23      	ldr	r3, [pc, #140]	; (8000a00 <_ZL12MX_TIM2_Initv+0xbc>)
 8000972:	22fa      	movs	r2, #250	; 0xfa
 8000974:	0192      	lsls	r2, r2, #6
 8000976:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000978:	4b21      	ldr	r3, [pc, #132]	; (8000a00 <_ZL12MX_TIM2_Initv+0xbc>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800097e:	4b20      	ldr	r3, [pc, #128]	; (8000a00 <_ZL12MX_TIM2_Initv+0xbc>)
 8000980:	2264      	movs	r2, #100	; 0x64
 8000982:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000984:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <_ZL12MX_TIM2_Initv+0xbc>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800098a:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <_ZL12MX_TIM2_Initv+0xbc>)
 800098c:	2280      	movs	r2, #128	; 0x80
 800098e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000990:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <_ZL12MX_TIM2_Initv+0xbc>)
 8000992:	0018      	movs	r0, r3
 8000994:	f002 fd72 	bl	800347c <HAL_TIM_Base_Init>
 8000998:	0003      	movs	r3, r0
 800099a:	1e5a      	subs	r2, r3, #1
 800099c:	4193      	sbcs	r3, r2
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 80009a4:	f000 f9c2 	bl	8000d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a8:	2110      	movs	r1, #16
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	2280      	movs	r2, #128	; 0x80
 80009ae:	0152      	lsls	r2, r2, #5
 80009b0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009b2:	187a      	adds	r2, r7, r1
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <_ZL12MX_TIM2_Initv+0xbc>)
 80009b6:	0011      	movs	r1, r2
 80009b8:	0018      	movs	r0, r3
 80009ba:	f002 ff45 	bl	8003848 <HAL_TIM_ConfigClockSource>
 80009be:	0003      	movs	r3, r0
 80009c0:	1e5a      	subs	r2, r3, #1
 80009c2:	4193      	sbcs	r3, r2
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <_ZL12MX_TIM2_Initv+0x8a>
  {
    Error_Handler();
 80009ca:	f000 f9af 	bl	8000d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2220      	movs	r2, #32
 80009d2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009da:	1d3a      	adds	r2, r7, #4
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <_ZL12MX_TIM2_Initv+0xbc>)
 80009de:	0011      	movs	r1, r2
 80009e0:	0018      	movs	r0, r3
 80009e2:	f003 f939 	bl	8003c58 <HAL_TIMEx_MasterConfigSynchronization>
 80009e6:	0003      	movs	r3, r0
 80009e8:	1e5a      	subs	r2, r3, #1
 80009ea:	4193      	sbcs	r3, r2
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 80009f2:	f000 f99b 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b008      	add	sp, #32
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	20000104 	.word	0x20000104

08000a04 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a08:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000a0a:	4a2c      	ldr	r2, [pc, #176]	; (8000abc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a0e:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000a10:	2296      	movs	r2, #150	; 0x96
 8000a12:	0192      	lsls	r2, r2, #6
 8000a14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b28      	ldr	r3, [pc, #160]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a40:	4b1d      	ldr	r3, [pc, #116]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f003 f988 	bl	8003d64 <HAL_UART_Init>
 8000a54:	0003      	movs	r3, r0
 8000a56:	1e5a      	subs	r2, r3, #1
 8000a58:	4193      	sbcs	r3, r2
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <_ZL19MX_USART1_UART_Initv+0x60>
  {
    Error_Handler();
 8000a60:	f000 f964 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000a66:	2100      	movs	r1, #0
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f005 f875 	bl	8005b58 <HAL_UARTEx_SetTxFifoThreshold>
 8000a6e:	0003      	movs	r3, r0
 8000a70:	1e5a      	subs	r2, r3, #1
 8000a72:	4193      	sbcs	r3, r2
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <_ZL19MX_USART1_UART_Initv+0x7a>
  {
    Error_Handler();
 8000a7a:	f000 f957 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000a80:	2100      	movs	r1, #0
 8000a82:	0018      	movs	r0, r3
 8000a84:	f005 f8a8 	bl	8005bd8 <HAL_UARTEx_SetRxFifoThreshold>
 8000a88:	0003      	movs	r3, r0
 8000a8a:	1e5a      	subs	r2, r3, #1
 8000a8c:	4193      	sbcs	r3, r2
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <_ZL19MX_USART1_UART_Initv+0x94>
  {
    Error_Handler();
 8000a94:	f000 f94a 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f005 f822 	bl	8005ae4 <HAL_UARTEx_DisableFifoMode>
 8000aa0:	0003      	movs	r3, r0
 8000aa2:	1e5a      	subs	r2, r3, #1
 8000aa4:	4193      	sbcs	r3, r2
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <_ZL19MX_USART1_UART_Initv+0xac>
  {
    Error_Handler();
 8000aac:	f000 f93e 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	20000150 	.word	0x20000150
 8000abc:	40013800 	.word	0x40013800

08000ac0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ac4:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000ac6:	4a2c      	ldr	r2, [pc, #176]	; (8000b78 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aca:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000acc:	22e1      	movs	r2, #225	; 0xe1
 8000ace:	0252      	lsls	r2, r2, #9
 8000ad0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af6:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000afc:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b02:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b08:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f003 f92a 	bl	8003d64 <HAL_UART_Init>
 8000b10:	0003      	movs	r3, r0
 8000b12:	1e5a      	subs	r2, r3, #1
 8000b14:	4193      	sbcs	r3, r2
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <_ZL19MX_USART2_UART_Initv+0x60>
  {
    Error_Handler();
 8000b1c:	f000 f906 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000b22:	2100      	movs	r1, #0
 8000b24:	0018      	movs	r0, r3
 8000b26:	f005 f817 	bl	8005b58 <HAL_UARTEx_SetTxFifoThreshold>
 8000b2a:	0003      	movs	r3, r0
 8000b2c:	1e5a      	subs	r2, r3, #1
 8000b2e:	4193      	sbcs	r3, r2
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <_ZL19MX_USART2_UART_Initv+0x7a>
  {
    Error_Handler();
 8000b36:	f000 f8f9 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f005 f84a 	bl	8005bd8 <HAL_UARTEx_SetRxFifoThreshold>
 8000b44:	0003      	movs	r3, r0
 8000b46:	1e5a      	subs	r2, r3, #1
 8000b48:	4193      	sbcs	r3, r2
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <_ZL19MX_USART2_UART_Initv+0x94>
  {
    Error_Handler();
 8000b50:	f000 f8ec 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b54:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000b56:	0018      	movs	r0, r3
 8000b58:	f004 ffc4 	bl	8005ae4 <HAL_UARTEx_DisableFifoMode>
 8000b5c:	0003      	movs	r3, r0
 8000b5e:	1e5a      	subs	r2, r3, #1
 8000b60:	4193      	sbcs	r3, r2
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <_ZL19MX_USART2_UART_Initv+0xac>
  {
    Error_Handler();
 8000b68:	f000 f8e0 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b6c:	46c0      	nop			; (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	200001e0 	.word	0x200001e0
 8000b78:	40004400 	.word	0x40004400

08000b7c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b089      	sub	sp, #36	; 0x24
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	240c      	movs	r4, #12
 8000b84:	193b      	adds	r3, r7, r4
 8000b86:	0018      	movs	r0, r3
 8000b88:	2314      	movs	r3, #20
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	f005 f8e7 	bl	8005d60 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	4b51      	ldr	r3, [pc, #324]	; (8000cd8 <_ZL12MX_GPIO_Initv+0x15c>)
 8000b94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b96:	4b50      	ldr	r3, [pc, #320]	; (8000cd8 <_ZL12MX_GPIO_Initv+0x15c>)
 8000b98:	2101      	movs	r1, #1
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	635a      	str	r2, [r3, #52]	; 0x34
 8000b9e:	4b4e      	ldr	r3, [pc, #312]	; (8000cd8 <_ZL12MX_GPIO_Initv+0x15c>)
 8000ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	4b4b      	ldr	r3, [pc, #300]	; (8000cd8 <_ZL12MX_GPIO_Initv+0x15c>)
 8000bac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bae:	4b4a      	ldr	r3, [pc, #296]	; (8000cd8 <_ZL12MX_GPIO_Initv+0x15c>)
 8000bb0:	2102      	movs	r1, #2
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	635a      	str	r2, [r3, #52]	; 0x34
 8000bb6:	4b48      	ldr	r3, [pc, #288]	; (8000cd8 <_ZL12MX_GPIO_Initv+0x15c>)
 8000bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bba:	2202      	movs	r2, #2
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc2:	4b45      	ldr	r3, [pc, #276]	; (8000cd8 <_ZL12MX_GPIO_Initv+0x15c>)
 8000bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bc6:	4b44      	ldr	r3, [pc, #272]	; (8000cd8 <_ZL12MX_GPIO_Initv+0x15c>)
 8000bc8:	2104      	movs	r1, #4
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	635a      	str	r2, [r3, #52]	; 0x34
 8000bce:	4b42      	ldr	r3, [pc, #264]	; (8000cd8 <_ZL12MX_GPIO_Initv+0x15c>)
 8000bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd2:	2204      	movs	r2, #4
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|INT2_Pin|INT1_Pin, GPIO_PIN_RESET);
 8000bda:	2322      	movs	r3, #34	; 0x22
 8000bdc:	33ff      	adds	r3, #255	; 0xff
 8000bde:	483f      	ldr	r0, [pc, #252]	; (8000cdc <_ZL12MX_GPIO_Initv+0x160>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	0019      	movs	r1, r3
 8000be4:	f001 fb3c 	bl	8002260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FE_EN_Pin|RX_EN_Pin|LED_Pin, GPIO_PIN_RESET);
 8000be8:	2389      	movs	r3, #137	; 0x89
 8000bea:	0219      	lsls	r1, r3, #8
 8000bec:	23a0      	movs	r3, #160	; 0xa0
 8000bee:	05db      	lsls	r3, r3, #23
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f001 fb34 	bl	8002260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 8000bf8:	4b39      	ldr	r3, [pc, #228]	; (8000ce0 <_ZL12MX_GPIO_Initv+0x164>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2140      	movs	r1, #64	; 0x40
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f001 fb2e 	bl	8002260 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIO2_Pin DIO1_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin|DIO1_Pin;
 8000c04:	193b      	adds	r3, r7, r4
 8000c06:	2230      	movs	r2, #48	; 0x30
 8000c08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c0a:	193b      	adds	r3, r7, r4
 8000c0c:	2288      	movs	r2, #136	; 0x88
 8000c0e:	0352      	lsls	r2, r2, #13
 8000c10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	193b      	adds	r3, r7, r4
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	193a      	adds	r2, r7, r4
 8000c1a:	23a0      	movs	r3, #160	; 0xa0
 8000c1c:	05db      	lsls	r3, r3, #23
 8000c1e:	0011      	movs	r1, r2
 8000c20:	0018      	movs	r0, r3
 8000c22:	f001 f9b9 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin INT2_Pin INT1_Pin */
  GPIO_InitStruct.Pin = CS_Pin|INT2_Pin|INT1_Pin;
 8000c26:	0021      	movs	r1, r4
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	2222      	movs	r2, #34	; 0x22
 8000c2c:	32ff      	adds	r2, #255	; 0xff
 8000c2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	000c      	movs	r4, r1
 8000c32:	193b      	adds	r3, r7, r4
 8000c34:	2201      	movs	r2, #1
 8000c36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	193b      	adds	r3, r7, r4
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	193b      	adds	r3, r7, r4
 8000c40:	2200      	movs	r2, #0
 8000c42:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c44:	193b      	adds	r3, r7, r4
 8000c46:	4a25      	ldr	r2, [pc, #148]	; (8000cdc <_ZL12MX_GPIO_Initv+0x160>)
 8000c48:	0019      	movs	r1, r3
 8000c4a:	0010      	movs	r0, r2
 8000c4c:	f001 f9a4 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8000c50:	193b      	adds	r3, r7, r4
 8000c52:	2202      	movs	r2, #2
 8000c54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c56:	193b      	adds	r3, r7, r4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	2201      	movs	r2, #1
 8000c60:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8000c62:	193b      	adds	r3, r7, r4
 8000c64:	4a1d      	ldr	r2, [pc, #116]	; (8000cdc <_ZL12MX_GPIO_Initv+0x160>)
 8000c66:	0019      	movs	r1, r3
 8000c68:	0010      	movs	r0, r2
 8000c6a:	f001 f995 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_EN_Pin RX_EN_Pin LED_Pin */
  GPIO_InitStruct.Pin = FE_EN_Pin|RX_EN_Pin|LED_Pin;
 8000c6e:	0021      	movs	r1, r4
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	2289      	movs	r2, #137	; 0x89
 8000c74:	0212      	lsls	r2, r2, #8
 8000c76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	000c      	movs	r4, r1
 8000c7a:	193b      	adds	r3, r7, r4
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	193b      	adds	r3, r7, r4
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	193b      	adds	r3, r7, r4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8c:	193a      	adds	r2, r7, r4
 8000c8e:	23a0      	movs	r3, #160	; 0xa0
 8000c90:	05db      	lsls	r3, r3, #23
 8000c92:	0011      	movs	r1, r2
 8000c94:	0018      	movs	r0, r3
 8000c96:	f001 f97f 	bl	8001f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : TX_EN_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
 8000c9a:	0021      	movs	r1, r4
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	2240      	movs	r2, #64	; 0x40
 8000ca0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <_ZL12MX_GPIO_Initv+0x164>)
 8000cb8:	0019      	movs	r1, r3
 8000cba:	0010      	movs	r0, r2
 8000cbc:	f001 f96c 	bl	8001f98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2007      	movs	r0, #7
 8000cc6:	f001 f869 	bl	8001d9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000cca:	2007      	movs	r0, #7
 8000ccc:	f001 f87b 	bl	8001dc6 <HAL_NVIC_EnableIRQ>

}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b009      	add	sp, #36	; 0x24
 8000cd6:	bd90      	pop	{r4, r7, pc}
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	50000400 	.word	0x50000400
 8000ce0:	50000800 	.word	0x50000800

08000ce4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000cec:	2380      	movs	r3, #128	; 0x80
 8000cee:	021a      	lsls	r2, r3, #8
 8000cf0:	23a0      	movs	r3, #160	; 0xa0
 8000cf2:	05db      	lsls	r3, r3, #23
 8000cf4:	0011      	movs	r1, r2
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f001 facf 	bl	800229a <HAL_GPIO_TogglePin>
//HAL_Delay(1);
}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b002      	add	sp, #8
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <HAL_GPIO_EXTI_Rising_Callback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	0002      	movs	r2, r0
 8000d0c:	1dbb      	adds	r3, r7, #6
 8000d0e:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == DIO1_Pin){
 8000d10:	1dbb      	adds	r3, r7, #6
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	2b20      	cmp	r3, #32
 8000d16:	d102      	bne.n	8000d1e <HAL_GPIO_EXTI_Rising_Callback+0x1a>
		RadioIsrCallback();
 8000d18:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4798      	blx	r3
	}
}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b002      	add	sp, #8
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	20000038 	.word	0x20000038

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <Error_Handler+0x8>
	...

08000d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d44:	2101      	movs	r1, #1
 8000d46:	430a      	orrs	r2, r1
 8000d48:	641a      	str	r2, [r3, #64]	; 0x40
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4013      	ands	r3, r2
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d5c:	2180      	movs	r1, #128	; 0x80
 8000d5e:	0549      	lsls	r1, r1, #21
 8000d60:	430a      	orrs	r2, r1
 8000d62:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	055b      	lsls	r3, r3, #21
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8000d72:	2380      	movs	r3, #128	; 0x80
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	0018      	movs	r0, r3
 8000d78:	f000 fab0 	bl	80012dc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7c:	46c0      	nop			; (mov r8, r8)
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	b002      	add	sp, #8
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40021000 	.word	0x40021000

08000d88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d88:	b590      	push	{r4, r7, lr}
 8000d8a:	b097      	sub	sp, #92	; 0x5c
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	2344      	movs	r3, #68	; 0x44
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	0018      	movs	r0, r3
 8000d96:	2314      	movs	r3, #20
 8000d98:	001a      	movs	r2, r3
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	f004 ffe0 	bl	8005d60 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da0:	2410      	movs	r4, #16
 8000da2:	193b      	adds	r3, r7, r4
 8000da4:	0018      	movs	r0, r3
 8000da6:	2334      	movs	r3, #52	; 0x34
 8000da8:	001a      	movs	r2, r3
 8000daa:	2100      	movs	r1, #0
 8000dac:	f004 ffd8 	bl	8005d60 <memset>
  if(hadc->Instance==ADC1)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a20      	ldr	r2, [pc, #128]	; (8000e38 <HAL_ADC_MspInit+0xb0>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d139      	bne.n	8000e2e <HAL_ADC_MspInit+0xa6>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dba:	193b      	adds	r3, r7, r4
 8000dbc:	2280      	movs	r2, #128	; 0x80
 8000dbe:	01d2      	lsls	r2, r2, #7
 8000dc0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000dc2:	193b      	adds	r3, r7, r4
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc8:	193b      	adds	r3, r7, r4
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f001 ffca 	bl	8002d64 <HAL_RCCEx_PeriphCLKConfig>
 8000dd0:	1e03      	subs	r3, r0, #0
 8000dd2:	d001      	beq.n	8000dd8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000dd4:	f7ff ffaa 	bl	8000d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000dd8:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <HAL_ADC_MspInit+0xb4>)
 8000dda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ddc:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <HAL_ADC_MspInit+0xb4>)
 8000dde:	2180      	movs	r1, #128	; 0x80
 8000de0:	0349      	lsls	r1, r1, #13
 8000de2:	430a      	orrs	r2, r1
 8000de4:	641a      	str	r2, [r3, #64]	; 0x40
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <HAL_ADC_MspInit+0xb4>)
 8000de8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dea:	2380      	movs	r3, #128	; 0x80
 8000dec:	035b      	lsls	r3, r3, #13
 8000dee:	4013      	ands	r3, r2
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <HAL_ADC_MspInit+0xb4>)
 8000df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000df8:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <HAL_ADC_MspInit+0xb4>)
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	635a      	str	r2, [r3, #52]	; 0x34
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_ADC_MspInit+0xb4>)
 8000e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e04:	2201      	movs	r2, #1
 8000e06:	4013      	ands	r3, r2
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e0c:	2144      	movs	r1, #68	; 0x44
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2201      	movs	r2, #1
 8000e12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	2203      	movs	r2, #3
 8000e18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	187a      	adds	r2, r7, r1
 8000e22:	23a0      	movs	r3, #160	; 0xa0
 8000e24:	05db      	lsls	r3, r3, #23
 8000e26:	0011      	movs	r1, r2
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f001 f8b5 	bl	8001f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b017      	add	sp, #92	; 0x5c
 8000e34:	bd90      	pop	{r4, r7, pc}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	40012400 	.word	0x40012400
 8000e3c:	40021000 	.word	0x40021000

08000e40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b08b      	sub	sp, #44	; 0x2c
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	2414      	movs	r4, #20
 8000e4a:	193b      	adds	r3, r7, r4
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	2314      	movs	r3, #20
 8000e50:	001a      	movs	r2, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	f004 ff84 	bl	8005d60 <memset>
  if(hspi->Instance==SPI1)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a1f      	ldr	r2, [pc, #124]	; (8000edc <HAL_SPI_MspInit+0x9c>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d138      	bne.n	8000ed4 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e62:	4b1f      	ldr	r3, [pc, #124]	; (8000ee0 <HAL_SPI_MspInit+0xa0>)
 8000e64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e66:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <HAL_SPI_MspInit+0xa0>)
 8000e68:	2180      	movs	r1, #128	; 0x80
 8000e6a:	0149      	lsls	r1, r1, #5
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e70:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <HAL_SPI_MspInit+0xa0>)
 8000e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	015b      	lsls	r3, r3, #5
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <HAL_SPI_MspInit+0xa0>)
 8000e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e82:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <HAL_SPI_MspInit+0xa0>)
 8000e84:	2101      	movs	r1, #1
 8000e86:	430a      	orrs	r2, r1
 8000e88:	635a      	str	r2, [r3, #52]	; 0x34
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <HAL_SPI_MspInit+0xa0>)
 8000e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e8e:	2201      	movs	r2, #1
 8000e90:	4013      	ands	r3, r2
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000e96:	0021      	movs	r1, r4
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	22c2      	movs	r2, #194	; 0xc2
 8000e9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	2200      	movs	r2, #0
 8000eae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb6:	187a      	adds	r2, r7, r1
 8000eb8:	23a0      	movs	r3, #160	; 0xa0
 8000eba:	05db      	lsls	r3, r3, #23
 8000ebc:	0011      	movs	r1, r2
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f001 f86a 	bl	8001f98 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2019      	movs	r0, #25
 8000eca:	f000 ff67 	bl	8001d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000ece:	2019      	movs	r0, #25
 8000ed0:	f000 ff79 	bl	8001dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b00b      	add	sp, #44	; 0x2c
 8000eda:	bd90      	pop	{r4, r7, pc}
 8000edc:	40013000 	.word	0x40013000
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	05db      	lsls	r3, r3, #23
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d113      	bne.n	8000f20 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <HAL_TIM_Base_MspInit+0x44>)
 8000efa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_TIM_Base_MspInit+0x44>)
 8000efe:	2101      	movs	r1, #1
 8000f00:	430a      	orrs	r2, r1
 8000f02:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <HAL_TIM_Base_MspInit+0x44>)
 8000f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2102      	movs	r1, #2
 8000f14:	200f      	movs	r0, #15
 8000f16:	f000 ff41 	bl	8001d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f1a:	200f      	movs	r0, #15
 8000f1c:	f000 ff53 	bl	8001dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b004      	add	sp, #16
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40021000 	.word	0x40021000

08000f2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b099      	sub	sp, #100	; 0x64
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	234c      	movs	r3, #76	; 0x4c
 8000f36:	18fb      	adds	r3, r7, r3
 8000f38:	0018      	movs	r0, r3
 8000f3a:	2314      	movs	r3, #20
 8000f3c:	001a      	movs	r2, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	f004 ff0e 	bl	8005d60 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f44:	2418      	movs	r4, #24
 8000f46:	193b      	adds	r3, r7, r4
 8000f48:	0018      	movs	r0, r3
 8000f4a:	2334      	movs	r3, #52	; 0x34
 8000f4c:	001a      	movs	r2, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	f004 ff06 	bl	8005d60 <memset>
  if(huart->Instance==USART1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a49      	ldr	r2, [pc, #292]	; (8001080 <HAL_UART_MspInit+0x154>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d146      	bne.n	8000fec <HAL_UART_MspInit+0xc0>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f5e:	193b      	adds	r3, r7, r4
 8000f60:	2201      	movs	r2, #1
 8000f62:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000f64:	193b      	adds	r3, r7, r4
 8000f66:	2200      	movs	r2, #0
 8000f68:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f6a:	193b      	adds	r3, r7, r4
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f001 fef9 	bl	8002d64 <HAL_RCCEx_PeriphCLKConfig>
 8000f72:	1e03      	subs	r3, r0, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f76:	f7ff fed9 	bl	8000d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f7a:	4b42      	ldr	r3, [pc, #264]	; (8001084 <HAL_UART_MspInit+0x158>)
 8000f7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f7e:	4b41      	ldr	r3, [pc, #260]	; (8001084 <HAL_UART_MspInit+0x158>)
 8000f80:	2180      	movs	r1, #128	; 0x80
 8000f82:	01c9      	lsls	r1, r1, #7
 8000f84:	430a      	orrs	r2, r1
 8000f86:	641a      	str	r2, [r3, #64]	; 0x40
 8000f88:	4b3e      	ldr	r3, [pc, #248]	; (8001084 <HAL_UART_MspInit+0x158>)
 8000f8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f8c:	2380      	movs	r3, #128	; 0x80
 8000f8e:	01db      	lsls	r3, r3, #7
 8000f90:	4013      	ands	r3, r2
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	4b3b      	ldr	r3, [pc, #236]	; (8001084 <HAL_UART_MspInit+0x158>)
 8000f98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f9a:	4b3a      	ldr	r3, [pc, #232]	; (8001084 <HAL_UART_MspInit+0x158>)
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	635a      	str	r2, [r3, #52]	; 0x34
 8000fa2:	4b38      	ldr	r3, [pc, #224]	; (8001084 <HAL_UART_MspInit+0x158>)
 8000fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fae:	214c      	movs	r1, #76	; 0x4c
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	22c0      	movs	r2, #192	; 0xc0
 8000fb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	2202      	movs	r2, #2
 8000fba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	187b      	adds	r3, r7, r1
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	4a2d      	ldr	r2, [pc, #180]	; (8001088 <HAL_UART_MspInit+0x15c>)
 8000fd2:	0019      	movs	r1, r3
 8000fd4:	0010      	movs	r0, r2
 8000fd6:	f000 ffdf 	bl	8001f98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2103      	movs	r1, #3
 8000fde:	201b      	movs	r0, #27
 8000fe0:	f000 fedc 	bl	8001d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fe4:	201b      	movs	r0, #27
 8000fe6:	f000 feee 	bl	8001dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fea:	e044      	b.n	8001076 <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART2)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a26      	ldr	r2, [pc, #152]	; (800108c <HAL_UART_MspInit+0x160>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d13f      	bne.n	8001076 <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ff6:	2118      	movs	r1, #24
 8000ff8:	187b      	adds	r3, r7, r1
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001004:	187b      	adds	r3, r7, r1
 8001006:	0018      	movs	r0, r3
 8001008:	f001 feac 	bl	8002d64 <HAL_RCCEx_PeriphCLKConfig>
 800100c:	1e03      	subs	r3, r0, #0
 800100e:	d001      	beq.n	8001014 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8001010:	f7ff fe8c 	bl	8000d2c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <HAL_UART_MspInit+0x158>)
 8001016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001018:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <HAL_UART_MspInit+0x158>)
 800101a:	2180      	movs	r1, #128	; 0x80
 800101c:	0289      	lsls	r1, r1, #10
 800101e:	430a      	orrs	r2, r1
 8001020:	63da      	str	r2, [r3, #60]	; 0x3c
 8001022:	4b18      	ldr	r3, [pc, #96]	; (8001084 <HAL_UART_MspInit+0x158>)
 8001024:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001026:	2380      	movs	r3, #128	; 0x80
 8001028:	029b      	lsls	r3, r3, #10
 800102a:	4013      	ands	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <HAL_UART_MspInit+0x158>)
 8001032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001034:	4b13      	ldr	r3, [pc, #76]	; (8001084 <HAL_UART_MspInit+0x158>)
 8001036:	2101      	movs	r1, #1
 8001038:	430a      	orrs	r2, r1
 800103a:	635a      	str	r2, [r3, #52]	; 0x34
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <HAL_UART_MspInit+0x158>)
 800103e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001040:	2201      	movs	r2, #1
 8001042:	4013      	ands	r3, r2
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001048:	214c      	movs	r1, #76	; 0x4c
 800104a:	187b      	adds	r3, r7, r1
 800104c:	220c      	movs	r2, #12
 800104e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	187b      	adds	r3, r7, r1
 8001052:	2202      	movs	r2, #2
 8001054:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	187b      	adds	r3, r7, r1
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	187b      	adds	r3, r7, r1
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001062:	187b      	adds	r3, r7, r1
 8001064:	2201      	movs	r2, #1
 8001066:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001068:	187a      	adds	r2, r7, r1
 800106a:	23a0      	movs	r3, #160	; 0xa0
 800106c:	05db      	lsls	r3, r3, #23
 800106e:	0011      	movs	r1, r2
 8001070:	0018      	movs	r0, r3
 8001072:	f000 ff91 	bl	8001f98 <HAL_GPIO_Init>
}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	46bd      	mov	sp, r7
 800107a:	b019      	add	sp, #100	; 0x64
 800107c:	bd90      	pop	{r4, r7, pc}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	40013800 	.word	0x40013800
 8001084:	40021000 	.word	0x40021000
 8001088:	50000400 	.word	0x50000400
 800108c:	40004400 	.word	0x40004400

08001090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <NMI_Handler+0x4>

08001096 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109a:	e7fe      	b.n	800109a <HardFault_Handler+0x4>

0800109c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010a0:	46c0      	nop			; (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b4:	f000 f8d2 	bl	800125c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO2_Pin);
 80010c2:	2010      	movs	r0, #16
 80010c4:	f001 f904 	bl	80022d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 80010c8:	2020      	movs	r0, #32
 80010ca:	f001 f901 	bl	80022d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010d8:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <TIM2_IRQHandler+0x14>)
 80010da:	0018      	movs	r0, r3
 80010dc:	f002 fa82 	bl	80035e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010e0:	46c0      	nop			; (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	20000104 	.word	0x20000104

080010ec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80010f0:	4b03      	ldr	r3, [pc, #12]	; (8001100 <SPI1_IRQHandler+0x14>)
 80010f2:	0018      	movs	r0, r3
 80010f4:	f002 f8a6 	bl	8003244 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80010f8:	46c0      	nop			; (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	200000a0 	.word	0x200000a0

08001104 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <USART1_IRQHandler+0x14>)
 800110a:	0018      	movs	r0, r3
 800110c:	f002 feea 	bl	8003ee4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001110:	46c0      	nop			; (mov r8, r8)
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	20000150 	.word	0x20000150

0800111c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <SystemInit+0x14>)
 8001122:	2280      	movs	r2, #128	; 0x80
 8001124:	0512      	lsls	r2, r2, #20
 8001126:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001128:	46c0      	nop			; (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001134:	480d      	ldr	r0, [pc, #52]	; (800116c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001136:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001138:	f7ff fff0 	bl	800111c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800113c:	480c      	ldr	r0, [pc, #48]	; (8001170 <LoopForever+0x6>)
  ldr r1, =_edata
 800113e:	490d      	ldr	r1, [pc, #52]	; (8001174 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001140:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <LoopForever+0xe>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001144:	e002      	b.n	800114c <LoopCopyDataInit>

08001146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114a:	3304      	adds	r3, #4

0800114c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800114c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001150:	d3f9      	bcc.n	8001146 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001152:	4a0a      	ldr	r2, [pc, #40]	; (800117c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001154:	4c0a      	ldr	r4, [pc, #40]	; (8001180 <LoopForever+0x16>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001158:	e001      	b.n	800115e <LoopFillZerobss>

0800115a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800115c:	3204      	adds	r2, #4

0800115e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001160:	d3fb      	bcc.n	800115a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001162:	f004 fdd9 	bl	8005d18 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001166:	f7ff faa1 	bl	80006ac <main>

0800116a <LoopForever>:

LoopForever:
  b LoopForever
 800116a:	e7fe      	b.n	800116a <LoopForever>
  ldr   r0, =_estack
 800116c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001174:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001178:	08005e24 	.word	0x08005e24
  ldr r2, =_sbss
 800117c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001180:	20000280 	.word	0x20000280

08001184 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC1_COMP_IRQHandler>
	...

08001188 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <HAL_Init+0x3c>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_Init+0x3c>)
 800119a:	2180      	movs	r1, #128	; 0x80
 800119c:	0049      	lsls	r1, r1, #1
 800119e:	430a      	orrs	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011a2:	2001      	movs	r0, #1
 80011a4:	f000 f810 	bl	80011c8 <HAL_InitTick>
 80011a8:	1e03      	subs	r3, r0, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80011ac:	1dfb      	adds	r3, r7, #7
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
 80011b2:	e001      	b.n	80011b8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80011b4:	f7ff fdc0 	bl	8000d38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011b8:	1dfb      	adds	r3, r7, #7
 80011ba:	781b      	ldrb	r3, [r3, #0]
}
 80011bc:	0018      	movs	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	b002      	add	sp, #8
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40022000 	.word	0x40022000

080011c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b590      	push	{r4, r7, lr}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011d0:	230f      	movs	r3, #15
 80011d2:	18fb      	adds	r3, r7, r3
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80011d8:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <HAL_InitTick+0x88>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d02b      	beq.n	8001238 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80011e0:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <HAL_InitTick+0x8c>)
 80011e2:	681c      	ldr	r4, [r3, #0]
 80011e4:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <HAL_InitTick+0x88>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	0019      	movs	r1, r3
 80011ea:	23fa      	movs	r3, #250	; 0xfa
 80011ec:	0098      	lsls	r0, r3, #2
 80011ee:	f7fe ff89 	bl	8000104 <__udivsi3>
 80011f2:	0003      	movs	r3, r0
 80011f4:	0019      	movs	r1, r3
 80011f6:	0020      	movs	r0, r4
 80011f8:	f7fe ff84 	bl	8000104 <__udivsi3>
 80011fc:	0003      	movs	r3, r0
 80011fe:	0018      	movs	r0, r3
 8001200:	f000 fdf1 	bl	8001de6 <HAL_SYSTICK_Config>
 8001204:	1e03      	subs	r3, r0, #0
 8001206:	d112      	bne.n	800122e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b03      	cmp	r3, #3
 800120c:	d80a      	bhi.n	8001224 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	2301      	movs	r3, #1
 8001212:	425b      	negs	r3, r3
 8001214:	2200      	movs	r2, #0
 8001216:	0018      	movs	r0, r3
 8001218:	f000 fdc0 	bl	8001d9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_InitTick+0x90>)
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	e00d      	b.n	8001240 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001224:	230f      	movs	r3, #15
 8001226:	18fb      	adds	r3, r7, r3
 8001228:	2201      	movs	r2, #1
 800122a:	701a      	strb	r2, [r3, #0]
 800122c:	e008      	b.n	8001240 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800122e:	230f      	movs	r3, #15
 8001230:	18fb      	adds	r3, r7, r3
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
 8001236:	e003      	b.n	8001240 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001238:	230f      	movs	r3, #15
 800123a:	18fb      	adds	r3, r7, r3
 800123c:	2201      	movs	r2, #1
 800123e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001240:	230f      	movs	r3, #15
 8001242:	18fb      	adds	r3, r7, r3
 8001244:	781b      	ldrb	r3, [r3, #0]
}
 8001246:	0018      	movs	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	b005      	add	sp, #20
 800124c:	bd90      	pop	{r4, r7, pc}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	20000008 	.word	0x20000008
 8001254:	20000000 	.word	0x20000000
 8001258:	20000004 	.word	0x20000004

0800125c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <HAL_IncTick+0x1c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	001a      	movs	r2, r3
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <HAL_IncTick+0x20>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	18d2      	adds	r2, r2, r3
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <HAL_IncTick+0x20>)
 800126e:	601a      	str	r2, [r3, #0]
}
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	20000008 	.word	0x20000008
 800127c:	2000027c 	.word	0x2000027c

08001280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  return uwTick;
 8001284:	4b02      	ldr	r3, [pc, #8]	; (8001290 <HAL_GetTick+0x10>)
 8001286:	681b      	ldr	r3, [r3, #0]
}
 8001288:	0018      	movs	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	2000027c 	.word	0x2000027c

08001294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff fff0 	bl	8001280 <HAL_GetTick>
 80012a0:	0003      	movs	r3, r0
 80012a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	3301      	adds	r3, #1
 80012ac:	d005      	beq.n	80012ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_Delay+0x44>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	001a      	movs	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	189b      	adds	r3, r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	f7ff ffe0 	bl	8001280 <HAL_GetTick>
 80012c0:	0002      	movs	r2, r0
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d8f7      	bhi.n	80012bc <HAL_Delay+0x28>
  {
  }
}
 80012cc:	46c0      	nop			; (mov r8, r8)
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b004      	add	sp, #16
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	20000008 	.word	0x20000008

080012dc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a06      	ldr	r2, [pc, #24]	; (8001304 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80012ea:	4013      	ands	r3, r2
 80012ec:	0019      	movs	r1, r3
 80012ee:	4b04      	ldr	r3, [pc, #16]	; (8001300 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	601a      	str	r2, [r3, #0]
}
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	46bd      	mov	sp, r7
 80012fa:	b002      	add	sp, #8
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	40010000 	.word	0x40010000
 8001304:	fffff9ff 	.word	0xfffff9ff

08001308 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a05      	ldr	r2, [pc, #20]	; (800132c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001318:	401a      	ands	r2, r3
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	431a      	orrs	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	601a      	str	r2, [r3, #0]
}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	46bd      	mov	sp, r7
 8001326:	b002      	add	sp, #8
 8001328:	bd80      	pop	{r7, pc}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	fe3fffff 	.word	0xfe3fffff

08001330 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	23e0      	movs	r3, #224	; 0xe0
 800133e:	045b      	lsls	r3, r3, #17
 8001340:	4013      	ands	r3, r2
}
 8001342:	0018      	movs	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	b002      	add	sp, #8
 8001348:	bd80      	pop	{r7, pc}

0800134a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b084      	sub	sp, #16
 800134e:	af00      	add	r7, sp, #0
 8001350:	60f8      	str	r0, [r7, #12]
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	2104      	movs	r1, #4
 800135e:	400a      	ands	r2, r1
 8001360:	2107      	movs	r1, #7
 8001362:	4091      	lsls	r1, r2
 8001364:	000a      	movs	r2, r1
 8001366:	43d2      	mvns	r2, r2
 8001368:	401a      	ands	r2, r3
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	2104      	movs	r1, #4
 800136e:	400b      	ands	r3, r1
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	4099      	lsls	r1, r3
 8001374:	000b      	movs	r3, r1
 8001376:	431a      	orrs	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800137c:	46c0      	nop			; (mov r8, r8)
 800137e:	46bd      	mov	sp, r7
 8001380:	b004      	add	sp, #16
 8001382:	bd80      	pop	{r7, pc}

08001384 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	211f      	movs	r1, #31
 8001398:	400a      	ands	r2, r1
 800139a:	210f      	movs	r1, #15
 800139c:	4091      	lsls	r1, r2
 800139e:	000a      	movs	r2, r1
 80013a0:	43d2      	mvns	r2, r2
 80013a2:	401a      	ands	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	0e9b      	lsrs	r3, r3, #26
 80013a8:	210f      	movs	r1, #15
 80013aa:	4019      	ands	r1, r3
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	201f      	movs	r0, #31
 80013b0:	4003      	ands	r3, r0
 80013b2:	4099      	lsls	r1, r3
 80013b4:	000b      	movs	r3, r1
 80013b6:	431a      	orrs	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013bc:	46c0      	nop			; (mov r8, r8)
 80013be:	46bd      	mov	sp, r7
 80013c0:	b004      	add	sp, #16
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	035b      	lsls	r3, r3, #13
 80013d6:	0b5b      	lsrs	r3, r3, #13
 80013d8:	431a      	orrs	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b002      	add	sp, #8
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	0352      	lsls	r2, r2, #13
 80013f8:	0b52      	lsrs	r2, r2, #13
 80013fa:	43d2      	mvns	r2, r2
 80013fc:	401a      	ands	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	46bd      	mov	sp, r7
 8001406:	b002      	add	sp, #8
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	0212      	lsls	r2, r2, #8
 8001420:	43d2      	mvns	r2, r2
 8001422:	401a      	ands	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	021b      	lsls	r3, r3, #8
 8001428:	6879      	ldr	r1, [r7, #4]
 800142a:	400b      	ands	r3, r1
 800142c:	4904      	ldr	r1, [pc, #16]	; (8001440 <LL_ADC_SetChannelSamplingTime+0x34>)
 800142e:	400b      	ands	r3, r1
 8001430:	431a      	orrs	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	46bd      	mov	sp, r7
 800143a:	b004      	add	sp, #16
 800143c:	bd80      	pop	{r7, pc}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	07ffff00 	.word	0x07ffff00

08001444 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	4a05      	ldr	r2, [pc, #20]	; (8001468 <LL_ADC_EnableInternalRegulator+0x24>)
 8001452:	4013      	ands	r3, r2
 8001454:	2280      	movs	r2, #128	; 0x80
 8001456:	0552      	lsls	r2, r2, #21
 8001458:	431a      	orrs	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	46bd      	mov	sp, r7
 8001462:	b002      	add	sp, #8
 8001464:	bd80      	pop	{r7, pc}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	6fffffe8 	.word	0x6fffffe8

0800146c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	055b      	lsls	r3, r3, #21
 800147c:	401a      	ands	r2, r3
 800147e:	2380      	movs	r3, #128	; 0x80
 8001480:	055b      	lsls	r3, r3, #21
 8001482:	429a      	cmp	r2, r3
 8001484:	d101      	bne.n	800148a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001486:	2301      	movs	r3, #1
 8001488:	e000      	b.n	800148c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800148a:	2300      	movs	r3, #0
}
 800148c:	0018      	movs	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	b002      	add	sp, #8
 8001492:	bd80      	pop	{r7, pc}

08001494 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	2201      	movs	r2, #1
 80014a2:	4013      	ands	r3, r2
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d101      	bne.n	80014ac <LL_ADC_IsEnabled+0x18>
 80014a8:	2301      	movs	r3, #1
 80014aa:	e000      	b.n	80014ae <LL_ADC_IsEnabled+0x1a>
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	0018      	movs	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b002      	add	sp, #8
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2204      	movs	r2, #4
 80014c4:	4013      	ands	r3, r2
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	d101      	bne.n	80014ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	0018      	movs	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b002      	add	sp, #8
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e0:	231f      	movs	r3, #31
 80014e2:	18fb      	adds	r3, r7, r3
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e1b1      	b.n	8001862 <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10a      	bne.n	800151c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	0018      	movs	r0, r3
 800150a:	f7ff fc3d 	bl	8000d88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2254      	movs	r2, #84	; 0x54
 8001518:	2100      	movs	r1, #0
 800151a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	0018      	movs	r0, r3
 8001522:	f7ff ffa3 	bl	800146c <LL_ADC_IsInternalRegulatorEnabled>
 8001526:	1e03      	subs	r3, r0, #0
 8001528:	d115      	bne.n	8001556 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	0018      	movs	r0, r3
 8001530:	f7ff ff88 	bl	8001444 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001534:	4bcd      	ldr	r3, [pc, #820]	; (800186c <HAL_ADC_Init+0x394>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	49cd      	ldr	r1, [pc, #820]	; (8001870 <HAL_ADC_Init+0x398>)
 800153a:	0018      	movs	r0, r3
 800153c:	f7fe fde2 	bl	8000104 <__udivsi3>
 8001540:	0003      	movs	r3, r0
 8001542:	3301      	adds	r3, #1
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001548:	e002      	b.n	8001550 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	3b01      	subs	r3, #1
 800154e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f9      	bne.n	800154a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	0018      	movs	r0, r3
 800155c:	f7ff ff86 	bl	800146c <LL_ADC_IsInternalRegulatorEnabled>
 8001560:	1e03      	subs	r3, r0, #0
 8001562:	d10f      	bne.n	8001584 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001568:	2210      	movs	r2, #16
 800156a:	431a      	orrs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001574:	2201      	movs	r2, #1
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800157c:	231f      	movs	r3, #31
 800157e:	18fb      	adds	r3, r7, r3
 8001580:	2201      	movs	r2, #1
 8001582:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	0018      	movs	r0, r3
 800158a:	f7ff ff94 	bl	80014b6 <LL_ADC_REG_IsConversionOngoing>
 800158e:	0003      	movs	r3, r0
 8001590:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001596:	2210      	movs	r2, #16
 8001598:	4013      	ands	r3, r2
 800159a:	d000      	beq.n	800159e <HAL_ADC_Init+0xc6>
 800159c:	e154      	b.n	8001848 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d000      	beq.n	80015a6 <HAL_ADC_Init+0xce>
 80015a4:	e150      	b.n	8001848 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015aa:	4ab2      	ldr	r2, [pc, #712]	; (8001874 <HAL_ADC_Init+0x39c>)
 80015ac:	4013      	ands	r3, r2
 80015ae:	2202      	movs	r2, #2
 80015b0:	431a      	orrs	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	0018      	movs	r0, r3
 80015bc:	f7ff ff6a 	bl	8001494 <LL_ADC_IsEnabled>
 80015c0:	1e03      	subs	r3, r0, #0
 80015c2:	d156      	bne.n	8001672 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	2218      	movs	r2, #24
 80015cc:	4393      	bics	r3, r2
 80015ce:	0019      	movs	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	430a      	orrs	r2, r1
 80015da:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	0f9b      	lsrs	r3, r3, #30
 80015e2:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80015e8:	4313      	orrs	r3, r2
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	223c      	movs	r2, #60	; 0x3c
 80015f4:	5c9b      	ldrb	r3, [r3, r2]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d111      	bne.n	800161e <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	0f9b      	lsrs	r3, r3, #30
 8001600:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001606:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800160c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001612:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	4313      	orrs	r3, r2
 8001618:	2201      	movs	r2, #1
 800161a:	4313      	orrs	r3, r2
 800161c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	4a94      	ldr	r2, [pc, #592]	; (8001878 <HAL_ADC_Init+0x3a0>)
 8001626:	4013      	ands	r3, r2
 8001628:	0019      	movs	r1, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	430a      	orrs	r2, r1
 8001632:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	23c0      	movs	r3, #192	; 0xc0
 800163a:	061b      	lsls	r3, r3, #24
 800163c:	429a      	cmp	r2, r3
 800163e:	d018      	beq.n	8001672 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	05db      	lsls	r3, r3, #23
 8001648:	429a      	cmp	r2, r3
 800164a:	d012      	beq.n	8001672 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	061b      	lsls	r3, r3, #24
 8001654:	429a      	cmp	r2, r3
 8001656:	d00c      	beq.n	8001672 <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001658:	4b88      	ldr	r3, [pc, #544]	; (800187c <HAL_ADC_Init+0x3a4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a88      	ldr	r2, [pc, #544]	; (8001880 <HAL_ADC_Init+0x3a8>)
 800165e:	4013      	ands	r3, r2
 8001660:	0019      	movs	r1, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	23f0      	movs	r3, #240	; 0xf0
 8001668:	039b      	lsls	r3, r3, #14
 800166a:	401a      	ands	r2, r3
 800166c:	4b83      	ldr	r3, [pc, #524]	; (800187c <HAL_ADC_Init+0x3a4>)
 800166e:	430a      	orrs	r2, r1
 8001670:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	7e1b      	ldrb	r3, [r3, #24]
 8001676:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	7e5b      	ldrb	r3, [r3, #25]
 800167c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800167e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7e9b      	ldrb	r3, [r3, #26]
 8001684:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001686:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	2b00      	cmp	r3, #0
 800168e:	d002      	beq.n	8001696 <HAL_ADC_Init+0x1be>
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	015b      	lsls	r3, r3, #5
 8001694:	e000      	b.n	8001698 <HAL_ADC_Init+0x1c0>
 8001696:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001698:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800169e:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	da04      	bge.n	80016b2 <HAL_ADC_Init+0x1da>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	085b      	lsrs	r3, r3, #1
 80016b0:	e001      	b.n	80016b6 <HAL_ADC_Init+0x1de>
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 80016b6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	212c      	movs	r1, #44	; 0x2c
 80016bc:	5c5b      	ldrb	r3, [r3, r1]
 80016be:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80016c0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2220      	movs	r2, #32
 80016cc:	5c9b      	ldrb	r3, [r3, r2]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d115      	bne.n	80016fe <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	7e9b      	ldrb	r3, [r3, #26]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d105      	bne.n	80016e6 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	2280      	movs	r2, #128	; 0x80
 80016de:	0252      	lsls	r2, r2, #9
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
 80016e4:	e00b      	b.n	80016fe <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ea:	2220      	movs	r2, #32
 80016ec:	431a      	orrs	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f6:	2201      	movs	r2, #1
 80016f8:	431a      	orrs	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00a      	beq.n	800171c <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800170a:	23e0      	movs	r3, #224	; 0xe0
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001714:	4313      	orrs	r3, r2
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4313      	orrs	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	4a58      	ldr	r2, [pc, #352]	; (8001884 <HAL_ADC_Init+0x3ac>)
 8001724:	4013      	ands	r3, r2
 8001726:	0019      	movs	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	430a      	orrs	r2, r1
 8001730:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	4a53      	ldr	r2, [pc, #332]	; (8001888 <HAL_ADC_Init+0x3b0>)
 800173a:	4013      	ands	r3, r2
 800173c:	0019      	movs	r1, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	430a      	orrs	r2, r1
 8001746:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6818      	ldr	r0, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001750:	001a      	movs	r2, r3
 8001752:	2100      	movs	r1, #0
 8001754:	f7ff fdf9 	bl	800134a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6818      	ldr	r0, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001760:	494a      	ldr	r1, [pc, #296]	; (800188c <HAL_ADC_Init+0x3b4>)
 8001762:	001a      	movs	r2, r3
 8001764:	f7ff fdf1 	bl	800134a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d109      	bne.n	8001784 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2110      	movs	r1, #16
 800177c:	4249      	negs	r1, r1
 800177e:	430a      	orrs	r2, r1
 8001780:	629a      	str	r2, [r3, #40]	; 0x28
 8001782:	e03a      	b.n	80017fa <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691a      	ldr	r2, [r3, #16]
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	039b      	lsls	r3, r3, #14
 800178c:	429a      	cmp	r2, r3
 800178e:	d134      	bne.n	80017fa <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001790:	2300      	movs	r3, #0
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	e00c      	b.n	80017b0 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	40da      	lsrs	r2, r3
 80017a0:	0013      	movs	r3, r2
 80017a2:	220f      	movs	r2, #15
 80017a4:	4013      	ands	r3, r2
 80017a6:	2b0f      	cmp	r3, #15
 80017a8:	d006      	beq.n	80017b8 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	3301      	adds	r3, #1
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	2b07      	cmp	r3, #7
 80017b4:	d9ef      	bls.n	8001796 <HAL_ADC_Init+0x2be>
 80017b6:	e000      	b.n	80017ba <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 80017b8:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d109      	bne.n	80017d4 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2110      	movs	r1, #16
 80017cc:	4249      	negs	r1, r1
 80017ce:	430a      	orrs	r2, r1
 80017d0:	629a      	str	r2, [r3, #40]	; 0x28
 80017d2:	e012      	b.n	80017fa <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	3b01      	subs	r3, #1
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	221c      	movs	r2, #28
 80017e4:	4013      	ands	r3, r2
 80017e6:	2210      	movs	r2, #16
 80017e8:	4252      	negs	r2, r2
 80017ea:	409a      	lsls	r2, r3
 80017ec:	0011      	movs	r1, r2
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	4a23      	ldr	r2, [pc, #140]	; (8001890 <HAL_ADC_Init+0x3b8>)
 8001802:	4013      	ands	r3, r2
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	429a      	cmp	r2, r3
 8001808:	d10b      	bne.n	8001822 <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001814:	2203      	movs	r2, #3
 8001816:	4393      	bics	r3, r2
 8001818:	2201      	movs	r2, #1
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001820:	e01c      	b.n	800185c <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001826:	2212      	movs	r2, #18
 8001828:	4393      	bics	r3, r2
 800182a:	2210      	movs	r2, #16
 800182c:	431a      	orrs	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001836:	2201      	movs	r2, #1
 8001838:	431a      	orrs	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800183e:	231f      	movs	r3, #31
 8001840:	18fb      	adds	r3, r7, r3
 8001842:	2201      	movs	r2, #1
 8001844:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001846:	e009      	b.n	800185c <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184c:	2210      	movs	r2, #16
 800184e:	431a      	orrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001854:	231f      	movs	r3, #31
 8001856:	18fb      	adds	r3, r7, r3
 8001858:	2201      	movs	r2, #1
 800185a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800185c:	231f      	movs	r3, #31
 800185e:	18fb      	adds	r3, r7, r3
 8001860:	781b      	ldrb	r3, [r3, #0]
}
 8001862:	0018      	movs	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	b008      	add	sp, #32
 8001868:	bd80      	pop	{r7, pc}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	20000000 	.word	0x20000000
 8001870:	00030d40 	.word	0x00030d40
 8001874:	fffffefd 	.word	0xfffffefd
 8001878:	1ffffc02 	.word	0x1ffffc02
 800187c:	40012708 	.word	0x40012708
 8001880:	ffc3ffff 	.word	0xffc3ffff
 8001884:	fffe0219 	.word	0xfffe0219
 8001888:	dffffc02 	.word	0xdffffc02
 800188c:	07ffff04 	.word	0x07ffff04
 8001890:	833fffe7 	.word	0x833fffe7

08001894 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800189e:	2317      	movs	r3, #23
 80018a0:	18fb      	adds	r3, r7, r3
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2254      	movs	r2, #84	; 0x54
 80018ae:	5c9b      	ldrb	r3, [r3, r2]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d101      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x24>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e1c0      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x3a6>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2254      	movs	r2, #84	; 0x54
 80018bc:	2101      	movs	r1, #1
 80018be:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	0018      	movs	r0, r3
 80018c6:	f7ff fdf6 	bl	80014b6 <LL_ADC_REG_IsConversionOngoing>
 80018ca:	1e03      	subs	r3, r0, #0
 80018cc:	d000      	beq.n	80018d0 <HAL_ADC_ConfigChannel+0x3c>
 80018ce:	e1a3      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d100      	bne.n	80018da <HAL_ADC_ConfigChannel+0x46>
 80018d8:	e143      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691a      	ldr	r2, [r3, #16]
 80018de:	2380      	movs	r3, #128	; 0x80
 80018e0:	061b      	lsls	r3, r3, #24
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d004      	beq.n	80018f0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80018ea:	4ac1      	ldr	r2, [pc, #772]	; (8001bf0 <HAL_ADC_ConfigChannel+0x35c>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d108      	bne.n	8001902 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	0019      	movs	r1, r3
 80018fa:	0010      	movs	r0, r2
 80018fc:	f7ff fd62 	bl	80013c4 <LL_ADC_REG_SetSequencerChAdd>
 8001900:	e0c9      	b.n	8001a96 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	211f      	movs	r1, #31
 800190c:	400b      	ands	r3, r1
 800190e:	210f      	movs	r1, #15
 8001910:	4099      	lsls	r1, r3
 8001912:	000b      	movs	r3, r1
 8001914:	43db      	mvns	r3, r3
 8001916:	4013      	ands	r3, r2
 8001918:	0019      	movs	r1, r3
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	035b      	lsls	r3, r3, #13
 8001920:	0b5b      	lsrs	r3, r3, #13
 8001922:	d105      	bne.n	8001930 <HAL_ADC_ConfigChannel+0x9c>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	0e9b      	lsrs	r3, r3, #26
 800192a:	221f      	movs	r2, #31
 800192c:	4013      	ands	r3, r2
 800192e:	e098      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x1ce>
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2201      	movs	r2, #1
 8001936:	4013      	ands	r3, r2
 8001938:	d000      	beq.n	800193c <HAL_ADC_ConfigChannel+0xa8>
 800193a:	e091      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x1cc>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2202      	movs	r2, #2
 8001942:	4013      	ands	r3, r2
 8001944:	d000      	beq.n	8001948 <HAL_ADC_ConfigChannel+0xb4>
 8001946:	e089      	b.n	8001a5c <HAL_ADC_ConfigChannel+0x1c8>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2204      	movs	r2, #4
 800194e:	4013      	ands	r3, r2
 8001950:	d000      	beq.n	8001954 <HAL_ADC_ConfigChannel+0xc0>
 8001952:	e081      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x1c4>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2208      	movs	r2, #8
 800195a:	4013      	ands	r3, r2
 800195c:	d000      	beq.n	8001960 <HAL_ADC_ConfigChannel+0xcc>
 800195e:	e079      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x1c0>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2210      	movs	r2, #16
 8001966:	4013      	ands	r3, r2
 8001968:	d000      	beq.n	800196c <HAL_ADC_ConfigChannel+0xd8>
 800196a:	e071      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x1bc>
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2220      	movs	r2, #32
 8001972:	4013      	ands	r3, r2
 8001974:	d000      	beq.n	8001978 <HAL_ADC_ConfigChannel+0xe4>
 8001976:	e069      	b.n	8001a4c <HAL_ADC_ConfigChannel+0x1b8>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2240      	movs	r2, #64	; 0x40
 800197e:	4013      	ands	r3, r2
 8001980:	d000      	beq.n	8001984 <HAL_ADC_ConfigChannel+0xf0>
 8001982:	e061      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x1b4>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2280      	movs	r2, #128	; 0x80
 800198a:	4013      	ands	r3, r2
 800198c:	d000      	beq.n	8001990 <HAL_ADC_ConfigChannel+0xfc>
 800198e:	e059      	b.n	8001a44 <HAL_ADC_ConfigChannel+0x1b0>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4013      	ands	r3, r2
 800199a:	d151      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x1ac>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4013      	ands	r3, r2
 80019a6:	d149      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x1a8>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4013      	ands	r3, r2
 80019b2:	d141      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x1a4>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	011b      	lsls	r3, r3, #4
 80019bc:	4013      	ands	r3, r2
 80019be:	d139      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x1a0>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	015b      	lsls	r3, r3, #5
 80019c8:	4013      	ands	r3, r2
 80019ca:	d131      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x19c>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	019b      	lsls	r3, r3, #6
 80019d4:	4013      	ands	r3, r2
 80019d6:	d129      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x198>
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	01db      	lsls	r3, r3, #7
 80019e0:	4013      	ands	r3, r2
 80019e2:	d121      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x194>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	021b      	lsls	r3, r3, #8
 80019ec:	4013      	ands	r3, r2
 80019ee:	d119      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x190>
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	025b      	lsls	r3, r3, #9
 80019f8:	4013      	ands	r3, r2
 80019fa:	d111      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x18c>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	029b      	lsls	r3, r3, #10
 8001a04:	4013      	ands	r3, r2
 8001a06:	d109      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x188>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	02db      	lsls	r3, r3, #11
 8001a10:	4013      	ands	r3, r2
 8001a12:	d001      	beq.n	8001a18 <HAL_ADC_ConfigChannel+0x184>
 8001a14:	2312      	movs	r3, #18
 8001a16:	e024      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x1ce>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	e022      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x1ce>
 8001a1c:	2311      	movs	r3, #17
 8001a1e:	e020      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x1ce>
 8001a20:	2310      	movs	r3, #16
 8001a22:	e01e      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x1ce>
 8001a24:	230f      	movs	r3, #15
 8001a26:	e01c      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x1ce>
 8001a28:	230e      	movs	r3, #14
 8001a2a:	e01a      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x1ce>
 8001a2c:	230d      	movs	r3, #13
 8001a2e:	e018      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x1ce>
 8001a30:	230c      	movs	r3, #12
 8001a32:	e016      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x1ce>
 8001a34:	230b      	movs	r3, #11
 8001a36:	e014      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x1ce>
 8001a38:	230a      	movs	r3, #10
 8001a3a:	e012      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x1ce>
 8001a3c:	2309      	movs	r3, #9
 8001a3e:	e010      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x1ce>
 8001a40:	2308      	movs	r3, #8
 8001a42:	e00e      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x1ce>
 8001a44:	2307      	movs	r3, #7
 8001a46:	e00c      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x1ce>
 8001a48:	2306      	movs	r3, #6
 8001a4a:	e00a      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x1ce>
 8001a4c:	2305      	movs	r3, #5
 8001a4e:	e008      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x1ce>
 8001a50:	2304      	movs	r3, #4
 8001a52:	e006      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x1ce>
 8001a54:	2303      	movs	r3, #3
 8001a56:	e004      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x1ce>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e002      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x1ce>
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e000      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x1ce>
 8001a60:	2300      	movs	r3, #0
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	6852      	ldr	r2, [r2, #4]
 8001a66:	201f      	movs	r0, #31
 8001a68:	4002      	ands	r2, r0
 8001a6a:	4093      	lsls	r3, r2
 8001a6c:	000a      	movs	r2, r1
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	089b      	lsrs	r3, r3, #2
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d808      	bhi.n	8001a96 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6818      	ldr	r0, [r3, #0]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	6859      	ldr	r1, [r3, #4]
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	001a      	movs	r2, r3
 8001a92:	f7ff fc77 	bl	8001384 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6818      	ldr	r0, [r3, #0]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	6819      	ldr	r1, [r3, #0]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	001a      	movs	r2, r3
 8001aa4:	f7ff fcb2 	bl	800140c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	db00      	blt.n	8001ab2 <HAL_ADC_ConfigChannel+0x21e>
 8001ab0:	e0bc      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ab2:	4b50      	ldr	r3, [pc, #320]	; (8001bf4 <HAL_ADC_ConfigChannel+0x360>)
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7ff fc3b 	bl	8001330 <LL_ADC_GetCommonPathInternalCh>
 8001aba:	0003      	movs	r3, r0
 8001abc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a4d      	ldr	r2, [pc, #308]	; (8001bf8 <HAL_ADC_ConfigChannel+0x364>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d122      	bne.n	8001b0e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	041b      	lsls	r3, r3, #16
 8001ace:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ad0:	d11d      	bne.n	8001b0e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	2280      	movs	r2, #128	; 0x80
 8001ad6:	0412      	lsls	r2, r2, #16
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	4a46      	ldr	r2, [pc, #280]	; (8001bf4 <HAL_ADC_ConfigChannel+0x360>)
 8001adc:	0019      	movs	r1, r3
 8001ade:	0010      	movs	r0, r2
 8001ae0:	f7ff fc12 	bl	8001308 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ae4:	4b45      	ldr	r3, [pc, #276]	; (8001bfc <HAL_ADC_ConfigChannel+0x368>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4945      	ldr	r1, [pc, #276]	; (8001c00 <HAL_ADC_ConfigChannel+0x36c>)
 8001aea:	0018      	movs	r0, r3
 8001aec:	f7fe fb0a 	bl	8000104 <__udivsi3>
 8001af0:	0003      	movs	r3, r0
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	0013      	movs	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	189b      	adds	r3, r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001afe:	e002      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1f9      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b0c:	e08e      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a3c      	ldr	r2, [pc, #240]	; (8001c04 <HAL_ADC_ConfigChannel+0x370>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d10e      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x2a2>
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	2380      	movs	r3, #128	; 0x80
 8001b1c:	045b      	lsls	r3, r3, #17
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d109      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	2280      	movs	r2, #128	; 0x80
 8001b26:	0452      	lsls	r2, r2, #17
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	4a32      	ldr	r2, [pc, #200]	; (8001bf4 <HAL_ADC_ConfigChannel+0x360>)
 8001b2c:	0019      	movs	r1, r3
 8001b2e:	0010      	movs	r0, r2
 8001b30:	f7ff fbea 	bl	8001308 <LL_ADC_SetCommonPathInternalCh>
 8001b34:	e07a      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a33      	ldr	r2, [pc, #204]	; (8001c08 <HAL_ADC_ConfigChannel+0x374>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d000      	beq.n	8001b42 <HAL_ADC_ConfigChannel+0x2ae>
 8001b40:	e074      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	03db      	lsls	r3, r3, #15
 8001b48:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001b4a:	d000      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0x2ba>
 8001b4c:	e06e      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	2280      	movs	r2, #128	; 0x80
 8001b52:	03d2      	lsls	r2, r2, #15
 8001b54:	4313      	orrs	r3, r2
 8001b56:	4a27      	ldr	r2, [pc, #156]	; (8001bf4 <HAL_ADC_ConfigChannel+0x360>)
 8001b58:	0019      	movs	r1, r3
 8001b5a:	0010      	movs	r0, r2
 8001b5c:	f7ff fbd4 	bl	8001308 <LL_ADC_SetCommonPathInternalCh>
 8001b60:	e064      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691a      	ldr	r2, [r3, #16]
 8001b66:	2380      	movs	r3, #128	; 0x80
 8001b68:	061b      	lsls	r3, r3, #24
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d004      	beq.n	8001b78 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b72:	4a1f      	ldr	r2, [pc, #124]	; (8001bf0 <HAL_ADC_ConfigChannel+0x35c>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d107      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	0019      	movs	r1, r3
 8001b82:	0010      	movs	r0, r2
 8001b84:	f7ff fc2f 	bl	80013e6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	da4d      	bge.n	8001c2c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b90:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <HAL_ADC_ConfigChannel+0x360>)
 8001b92:	0018      	movs	r0, r3
 8001b94:	f7ff fbcc 	bl	8001330 <LL_ADC_GetCommonPathInternalCh>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <HAL_ADC_ConfigChannel+0x364>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d108      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	4a18      	ldr	r2, [pc, #96]	; (8001c0c <HAL_ADC_ConfigChannel+0x378>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	4a11      	ldr	r2, [pc, #68]	; (8001bf4 <HAL_ADC_ConfigChannel+0x360>)
 8001bae:	0019      	movs	r1, r3
 8001bb0:	0010      	movs	r0, r2
 8001bb2:	f7ff fba9 	bl	8001308 <LL_ADC_SetCommonPathInternalCh>
 8001bb6:	e039      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a11      	ldr	r2, [pc, #68]	; (8001c04 <HAL_ADC_ConfigChannel+0x370>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d108      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <HAL_ADC_ConfigChannel+0x37c>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <HAL_ADC_ConfigChannel+0x360>)
 8001bca:	0019      	movs	r1, r3
 8001bcc:	0010      	movs	r0, r2
 8001bce:	f7ff fb9b 	bl	8001308 <LL_ADC_SetCommonPathInternalCh>
 8001bd2:	e02b      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a0b      	ldr	r2, [pc, #44]	; (8001c08 <HAL_ADC_ConfigChannel+0x374>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d126      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	4a0c      	ldr	r2, [pc, #48]	; (8001c14 <HAL_ADC_ConfigChannel+0x380>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	4a03      	ldr	r2, [pc, #12]	; (8001bf4 <HAL_ADC_ConfigChannel+0x360>)
 8001be6:	0019      	movs	r1, r3
 8001be8:	0010      	movs	r0, r2
 8001bea:	f7ff fb8d 	bl	8001308 <LL_ADC_SetCommonPathInternalCh>
 8001bee:	e01d      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x398>
 8001bf0:	80000004 	.word	0x80000004
 8001bf4:	40012708 	.word	0x40012708
 8001bf8:	b0001000 	.word	0xb0001000
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	00030d40 	.word	0x00030d40
 8001c04:	b8004000 	.word	0xb8004000
 8001c08:	b4002000 	.word	0xb4002000
 8001c0c:	ff7fffff 	.word	0xff7fffff
 8001c10:	feffffff 	.word	0xfeffffff
 8001c14:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c24:	2317      	movs	r3, #23
 8001c26:	18fb      	adds	r3, r7, r3
 8001c28:	2201      	movs	r2, #1
 8001c2a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2254      	movs	r2, #84	; 0x54
 8001c30:	2100      	movs	r1, #0
 8001c32:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001c34:	2317      	movs	r3, #23
 8001c36:	18fb      	adds	r3, r7, r3
 8001c38:	781b      	ldrb	r3, [r3, #0]
}
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b006      	add	sp, #24
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	46c0      	nop			; (mov r8, r8)

08001c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	0002      	movs	r2, r0
 8001c4c:	1dfb      	adds	r3, r7, #7
 8001c4e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c50:	1dfb      	adds	r3, r7, #7
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b7f      	cmp	r3, #127	; 0x7f
 8001c56:	d809      	bhi.n	8001c6c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c58:	1dfb      	adds	r3, r7, #7
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	001a      	movs	r2, r3
 8001c5e:	231f      	movs	r3, #31
 8001c60:	401a      	ands	r2, r3
 8001c62:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <__NVIC_EnableIRQ+0x30>)
 8001c64:	2101      	movs	r1, #1
 8001c66:	4091      	lsls	r1, r2
 8001c68:	000a      	movs	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001c6c:	46c0      	nop			; (mov r8, r8)
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b002      	add	sp, #8
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	e000e100 	.word	0xe000e100

08001c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	0002      	movs	r2, r0
 8001c80:	6039      	str	r1, [r7, #0]
 8001c82:	1dfb      	adds	r3, r7, #7
 8001c84:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c86:	1dfb      	adds	r3, r7, #7
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b7f      	cmp	r3, #127	; 0x7f
 8001c8c:	d828      	bhi.n	8001ce0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c8e:	4a2f      	ldr	r2, [pc, #188]	; (8001d4c <__NVIC_SetPriority+0xd4>)
 8001c90:	1dfb      	adds	r3, r7, #7
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	b25b      	sxtb	r3, r3
 8001c96:	089b      	lsrs	r3, r3, #2
 8001c98:	33c0      	adds	r3, #192	; 0xc0
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	589b      	ldr	r3, [r3, r2]
 8001c9e:	1dfa      	adds	r2, r7, #7
 8001ca0:	7812      	ldrb	r2, [r2, #0]
 8001ca2:	0011      	movs	r1, r2
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	400a      	ands	r2, r1
 8001ca8:	00d2      	lsls	r2, r2, #3
 8001caa:	21ff      	movs	r1, #255	; 0xff
 8001cac:	4091      	lsls	r1, r2
 8001cae:	000a      	movs	r2, r1
 8001cb0:	43d2      	mvns	r2, r2
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	019b      	lsls	r3, r3, #6
 8001cba:	22ff      	movs	r2, #255	; 0xff
 8001cbc:	401a      	ands	r2, r3
 8001cbe:	1dfb      	adds	r3, r7, #7
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	4003      	ands	r3, r0
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ccc:	481f      	ldr	r0, [pc, #124]	; (8001d4c <__NVIC_SetPriority+0xd4>)
 8001cce:	1dfb      	adds	r3, r7, #7
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	b25b      	sxtb	r3, r3
 8001cd4:	089b      	lsrs	r3, r3, #2
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	33c0      	adds	r3, #192	; 0xc0
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001cde:	e031      	b.n	8001d44 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ce0:	4a1b      	ldr	r2, [pc, #108]	; (8001d50 <__NVIC_SetPriority+0xd8>)
 8001ce2:	1dfb      	adds	r3, r7, #7
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	0019      	movs	r1, r3
 8001ce8:	230f      	movs	r3, #15
 8001cea:	400b      	ands	r3, r1
 8001cec:	3b08      	subs	r3, #8
 8001cee:	089b      	lsrs	r3, r3, #2
 8001cf0:	3306      	adds	r3, #6
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	18d3      	adds	r3, r2, r3
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	1dfa      	adds	r2, r7, #7
 8001cfc:	7812      	ldrb	r2, [r2, #0]
 8001cfe:	0011      	movs	r1, r2
 8001d00:	2203      	movs	r2, #3
 8001d02:	400a      	ands	r2, r1
 8001d04:	00d2      	lsls	r2, r2, #3
 8001d06:	21ff      	movs	r1, #255	; 0xff
 8001d08:	4091      	lsls	r1, r2
 8001d0a:	000a      	movs	r2, r1
 8001d0c:	43d2      	mvns	r2, r2
 8001d0e:	401a      	ands	r2, r3
 8001d10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	019b      	lsls	r3, r3, #6
 8001d16:	22ff      	movs	r2, #255	; 0xff
 8001d18:	401a      	ands	r2, r3
 8001d1a:	1dfb      	adds	r3, r7, #7
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	0018      	movs	r0, r3
 8001d20:	2303      	movs	r3, #3
 8001d22:	4003      	ands	r3, r0
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d28:	4809      	ldr	r0, [pc, #36]	; (8001d50 <__NVIC_SetPriority+0xd8>)
 8001d2a:	1dfb      	adds	r3, r7, #7
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	001c      	movs	r4, r3
 8001d30:	230f      	movs	r3, #15
 8001d32:	4023      	ands	r3, r4
 8001d34:	3b08      	subs	r3, #8
 8001d36:	089b      	lsrs	r3, r3, #2
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	3306      	adds	r3, #6
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	18c3      	adds	r3, r0, r3
 8001d40:	3304      	adds	r3, #4
 8001d42:	601a      	str	r2, [r3, #0]
}
 8001d44:	46c0      	nop			; (mov r8, r8)
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b003      	add	sp, #12
 8001d4a:	bd90      	pop	{r4, r7, pc}
 8001d4c:	e000e100 	.word	0xe000e100
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	1e5a      	subs	r2, r3, #1
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	045b      	lsls	r3, r3, #17
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d301      	bcc.n	8001d6c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e010      	b.n	8001d8e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <SysTick_Config+0x44>)
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	3a01      	subs	r2, #1
 8001d72:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d74:	2301      	movs	r3, #1
 8001d76:	425b      	negs	r3, r3
 8001d78:	2103      	movs	r1, #3
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f7ff ff7c 	bl	8001c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <SysTick_Config+0x44>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d86:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <SysTick_Config+0x44>)
 8001d88:	2207      	movs	r2, #7
 8001d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	0018      	movs	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b002      	add	sp, #8
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	46c0      	nop			; (mov r8, r8)
 8001d98:	e000e010 	.word	0xe000e010

08001d9c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
 8001da6:	210f      	movs	r1, #15
 8001da8:	187b      	adds	r3, r7, r1
 8001daa:	1c02      	adds	r2, r0, #0
 8001dac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	187b      	adds	r3, r7, r1
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	b25b      	sxtb	r3, r3
 8001db6:	0011      	movs	r1, r2
 8001db8:	0018      	movs	r0, r3
 8001dba:	f7ff ff5d 	bl	8001c78 <__NVIC_SetPriority>
}
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	b004      	add	sp, #16
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	0002      	movs	r2, r0
 8001dce:	1dfb      	adds	r3, r7, #7
 8001dd0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd2:	1dfb      	adds	r3, r7, #7
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	b25b      	sxtb	r3, r3
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f7ff ff33 	bl	8001c44 <__NVIC_EnableIRQ>
}
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	46bd      	mov	sp, r7
 8001de2:	b002      	add	sp, #8
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	0018      	movs	r0, r3
 8001df2:	f7ff ffaf 	bl	8001d54 <SysTick_Config>
 8001df6:	0003      	movs	r3, r0
}
 8001df8:	0018      	movs	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	b002      	add	sp, #8
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e050      	b.n	8001eb4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2225      	movs	r2, #37	; 0x25
 8001e16:	5c9b      	ldrb	r3, [r3, r2]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d008      	beq.n	8001e30 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2204      	movs	r2, #4
 8001e22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2224      	movs	r2, #36	; 0x24
 8001e28:	2100      	movs	r1, #0
 8001e2a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e041      	b.n	8001eb4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	210e      	movs	r1, #14
 8001e3c:	438a      	bics	r2, r1
 8001e3e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	491c      	ldr	r1, [pc, #112]	; (8001ebc <HAL_DMA_Abort+0xbc>)
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	438a      	bics	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001e60:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <HAL_DMA_Abort+0xc0>)
 8001e62:	6859      	ldr	r1, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	221c      	movs	r2, #28
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	409a      	lsls	r2, r3
 8001e70:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <HAL_DMA_Abort+0xc0>)
 8001e72:	430a      	orrs	r2, r1
 8001e74:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e7e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00c      	beq.n	8001ea2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e92:	490a      	ldr	r1, [pc, #40]	; (8001ebc <HAL_DMA_Abort+0xbc>)
 8001e94:	400a      	ands	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001ea0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2225      	movs	r2, #37	; 0x25
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2224      	movs	r2, #36	; 0x24
 8001eae:	2100      	movs	r1, #0
 8001eb0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	b002      	add	sp, #8
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	fffffeff 	.word	0xfffffeff
 8001ec0:	40020000 	.word	0x40020000

08001ec4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ecc:	210f      	movs	r1, #15
 8001ece:	187b      	adds	r3, r7, r1
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2225      	movs	r2, #37	; 0x25
 8001ed8:	5c9b      	ldrb	r3, [r3, r2]
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d006      	beq.n	8001eee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2204      	movs	r2, #4
 8001ee4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001ee6:	187b      	adds	r3, r7, r1
 8001ee8:	2201      	movs	r2, #1
 8001eea:	701a      	strb	r2, [r3, #0]
 8001eec:	e049      	b.n	8001f82 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	210e      	movs	r1, #14
 8001efa:	438a      	bics	r2, r1
 8001efc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2101      	movs	r1, #1
 8001f0a:	438a      	bics	r2, r1
 8001f0c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f18:	491d      	ldr	r1, [pc, #116]	; (8001f90 <HAL_DMA_Abort_IT+0xcc>)
 8001f1a:	400a      	ands	r2, r1
 8001f1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001f1e:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <HAL_DMA_Abort_IT+0xd0>)
 8001f20:	6859      	ldr	r1, [r3, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	221c      	movs	r2, #28
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	409a      	lsls	r2, r3
 8001f2e:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <HAL_DMA_Abort_IT+0xd0>)
 8001f30:	430a      	orrs	r2, r1
 8001f32:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f3c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00c      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f50:	490f      	ldr	r1, [pc, #60]	; (8001f90 <HAL_DMA_Abort_IT+0xcc>)
 8001f52:	400a      	ands	r2, r1
 8001f54:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001f5e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2225      	movs	r2, #37	; 0x25
 8001f64:	2101      	movs	r1, #1
 8001f66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2224      	movs	r2, #36	; 0x24
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d004      	beq.n	8001f82 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	0010      	movs	r0, r2
 8001f80:	4798      	blx	r3
    }
  }
  return status;
 8001f82:	230f      	movs	r3, #15
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	781b      	ldrb	r3, [r3, #0]
}
 8001f88:	0018      	movs	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b004      	add	sp, #16
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	fffffeff 	.word	0xfffffeff
 8001f94:	40020000 	.word	0x40020000

08001f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa6:	e147      	b.n	8002238 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2101      	movs	r1, #1
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	4091      	lsls	r1, r2
 8001fb2:	000a      	movs	r2, r1
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d100      	bne.n	8001fc0 <HAL_GPIO_Init+0x28>
 8001fbe:	e138      	b.n	8002232 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d005      	beq.n	8001fd8 <HAL_GPIO_Init+0x40>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d130      	bne.n	800203a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	0013      	movs	r3, r2
 8001fe8:	43da      	mvns	r2, r3
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	0013      	movs	r3, r2
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800200e:	2201      	movs	r2, #1
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	409a      	lsls	r2, r3
 8002014:	0013      	movs	r3, r2
 8002016:	43da      	mvns	r2, r3
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4013      	ands	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	091b      	lsrs	r3, r3, #4
 8002024:	2201      	movs	r2, #1
 8002026:	401a      	ands	r2, r3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	409a      	lsls	r2, r3
 800202c:	0013      	movs	r3, r2
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2203      	movs	r2, #3
 8002040:	4013      	ands	r3, r2
 8002042:	2b03      	cmp	r3, #3
 8002044:	d017      	beq.n	8002076 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	2203      	movs	r2, #3
 8002052:	409a      	lsls	r2, r3
 8002054:	0013      	movs	r3, r2
 8002056:	43da      	mvns	r2, r3
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4013      	ands	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	409a      	lsls	r2, r3
 8002068:	0013      	movs	r3, r2
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2203      	movs	r2, #3
 800207c:	4013      	ands	r3, r2
 800207e:	2b02      	cmp	r3, #2
 8002080:	d123      	bne.n	80020ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	08da      	lsrs	r2, r3, #3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3208      	adds	r2, #8
 800208a:	0092      	lsls	r2, r2, #2
 800208c:	58d3      	ldr	r3, [r2, r3]
 800208e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	2207      	movs	r2, #7
 8002094:	4013      	ands	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	220f      	movs	r2, #15
 800209a:	409a      	lsls	r2, r3
 800209c:	0013      	movs	r3, r2
 800209e:	43da      	mvns	r2, r3
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4013      	ands	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	691a      	ldr	r2, [r3, #16]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2107      	movs	r1, #7
 80020ae:	400b      	ands	r3, r1
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	409a      	lsls	r2, r3
 80020b4:	0013      	movs	r3, r2
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	08da      	lsrs	r2, r3, #3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3208      	adds	r2, #8
 80020c4:	0092      	lsls	r2, r2, #2
 80020c6:	6939      	ldr	r1, [r7, #16]
 80020c8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	2203      	movs	r2, #3
 80020d6:	409a      	lsls	r2, r3
 80020d8:	0013      	movs	r3, r2
 80020da:	43da      	mvns	r2, r3
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4013      	ands	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2203      	movs	r2, #3
 80020e8:	401a      	ands	r2, r3
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	409a      	lsls	r2, r3
 80020f0:	0013      	movs	r3, r2
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	23c0      	movs	r3, #192	; 0xc0
 8002104:	029b      	lsls	r3, r3, #10
 8002106:	4013      	ands	r3, r2
 8002108:	d100      	bne.n	800210c <HAL_GPIO_Init+0x174>
 800210a:	e092      	b.n	8002232 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800210c:	4a50      	ldr	r2, [pc, #320]	; (8002250 <HAL_GPIO_Init+0x2b8>)
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	089b      	lsrs	r3, r3, #2
 8002112:	3318      	adds	r3, #24
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	589b      	ldr	r3, [r3, r2]
 8002118:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	2203      	movs	r2, #3
 800211e:	4013      	ands	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	220f      	movs	r2, #15
 8002124:	409a      	lsls	r2, r3
 8002126:	0013      	movs	r3, r2
 8002128:	43da      	mvns	r2, r3
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	23a0      	movs	r3, #160	; 0xa0
 8002134:	05db      	lsls	r3, r3, #23
 8002136:	429a      	cmp	r2, r3
 8002138:	d013      	beq.n	8002162 <HAL_GPIO_Init+0x1ca>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a45      	ldr	r2, [pc, #276]	; (8002254 <HAL_GPIO_Init+0x2bc>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d00d      	beq.n	800215e <HAL_GPIO_Init+0x1c6>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a44      	ldr	r2, [pc, #272]	; (8002258 <HAL_GPIO_Init+0x2c0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d007      	beq.n	800215a <HAL_GPIO_Init+0x1c2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a43      	ldr	r2, [pc, #268]	; (800225c <HAL_GPIO_Init+0x2c4>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d101      	bne.n	8002156 <HAL_GPIO_Init+0x1be>
 8002152:	2303      	movs	r3, #3
 8002154:	e006      	b.n	8002164 <HAL_GPIO_Init+0x1cc>
 8002156:	2305      	movs	r3, #5
 8002158:	e004      	b.n	8002164 <HAL_GPIO_Init+0x1cc>
 800215a:	2302      	movs	r3, #2
 800215c:	e002      	b.n	8002164 <HAL_GPIO_Init+0x1cc>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <HAL_GPIO_Init+0x1cc>
 8002162:	2300      	movs	r3, #0
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	2103      	movs	r1, #3
 8002168:	400a      	ands	r2, r1
 800216a:	00d2      	lsls	r2, r2, #3
 800216c:	4093      	lsls	r3, r2
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002174:	4936      	ldr	r1, [pc, #216]	; (8002250 <HAL_GPIO_Init+0x2b8>)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	3318      	adds	r3, #24
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002182:	4a33      	ldr	r2, [pc, #204]	; (8002250 <HAL_GPIO_Init+0x2b8>)
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	58d3      	ldr	r3, [r2, r3]
 8002188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	43da      	mvns	r2, r3
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	025b      	lsls	r3, r3, #9
 800219c:	4013      	ands	r3, r2
 800219e:	d003      	beq.n	80021a8 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021a8:	4929      	ldr	r1, [pc, #164]	; (8002250 <HAL_GPIO_Init+0x2b8>)
 80021aa:	2280      	movs	r2, #128	; 0x80
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80021b0:	4a27      	ldr	r2, [pc, #156]	; (8002250 <HAL_GPIO_Init+0x2b8>)
 80021b2:	2384      	movs	r3, #132	; 0x84
 80021b4:	58d3      	ldr	r3, [r2, r3]
 80021b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	43da      	mvns	r2, r3
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4013      	ands	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	029b      	lsls	r3, r3, #10
 80021ca:	4013      	ands	r3, r2
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021d6:	491e      	ldr	r1, [pc, #120]	; (8002250 <HAL_GPIO_Init+0x2b8>)
 80021d8:	2284      	movs	r2, #132	; 0x84
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021de:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <HAL_GPIO_Init+0x2b8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	43da      	mvns	r2, r3
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4013      	ands	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	2380      	movs	r3, #128	; 0x80
 80021f4:	035b      	lsls	r3, r3, #13
 80021f6:	4013      	ands	r3, r2
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4313      	orrs	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002202:	4b13      	ldr	r3, [pc, #76]	; (8002250 <HAL_GPIO_Init+0x2b8>)
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <HAL_GPIO_Init+0x2b8>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	43da      	mvns	r2, r3
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	2380      	movs	r3, #128	; 0x80
 800221e:	039b      	lsls	r3, r3, #14
 8002220:	4013      	ands	r3, r2
 8002222:	d003      	beq.n	800222c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4313      	orrs	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <HAL_GPIO_Init+0x2b8>)
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	3301      	adds	r3, #1
 8002236:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	40da      	lsrs	r2, r3
 8002240:	1e13      	subs	r3, r2, #0
 8002242:	d000      	beq.n	8002246 <HAL_GPIO_Init+0x2ae>
 8002244:	e6b0      	b.n	8001fa8 <HAL_GPIO_Init+0x10>
  }
}
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	46c0      	nop			; (mov r8, r8)
 800224a:	46bd      	mov	sp, r7
 800224c:	b006      	add	sp, #24
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40021800 	.word	0x40021800
 8002254:	50000400 	.word	0x50000400
 8002258:	50000800 	.word	0x50000800
 800225c:	50000c00 	.word	0x50000c00

08002260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	0008      	movs	r0, r1
 800226a:	0011      	movs	r1, r2
 800226c:	1cbb      	adds	r3, r7, #2
 800226e:	1c02      	adds	r2, r0, #0
 8002270:	801a      	strh	r2, [r3, #0]
 8002272:	1c7b      	adds	r3, r7, #1
 8002274:	1c0a      	adds	r2, r1, #0
 8002276:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002278:	1c7b      	adds	r3, r7, #1
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d004      	beq.n	800228a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002280:	1cbb      	adds	r3, r7, #2
 8002282:	881a      	ldrh	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002288:	e003      	b.n	8002292 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800228a:	1cbb      	adds	r3, r7, #2
 800228c:	881a      	ldrh	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	46bd      	mov	sp, r7
 8002296:	b002      	add	sp, #8
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b084      	sub	sp, #16
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	000a      	movs	r2, r1
 80022a4:	1cbb      	adds	r3, r7, #2
 80022a6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022ae:	1cbb      	adds	r3, r7, #2
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4013      	ands	r3, r2
 80022b6:	041a      	lsls	r2, r3, #16
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	43db      	mvns	r3, r3
 80022bc:	1cb9      	adds	r1, r7, #2
 80022be:	8809      	ldrh	r1, [r1, #0]
 80022c0:	400b      	ands	r3, r1
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	619a      	str	r2, [r3, #24]
}
 80022c8:	46c0      	nop			; (mov r8, r8)
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b004      	add	sp, #16
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	0002      	movs	r2, r0
 80022d8:	1dbb      	adds	r3, r7, #6
 80022da:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80022dc:	4b10      	ldr	r3, [pc, #64]	; (8002320 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	1dba      	adds	r2, r7, #6
 80022e2:	8812      	ldrh	r2, [r2, #0]
 80022e4:	4013      	ands	r3, r2
 80022e6:	d008      	beq.n	80022fa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80022e8:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80022ea:	1dba      	adds	r2, r7, #6
 80022ec:	8812      	ldrh	r2, [r2, #0]
 80022ee:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80022f0:	1dbb      	adds	r3, r7, #6
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	0018      	movs	r0, r3
 80022f6:	f7fe fd05 	bl	8000d04 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	1dba      	adds	r2, r7, #6
 8002300:	8812      	ldrh	r2, [r2, #0]
 8002302:	4013      	ands	r3, r2
 8002304:	d008      	beq.n	8002318 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002308:	1dba      	adds	r2, r7, #6
 800230a:	8812      	ldrh	r2, [r2, #0]
 800230c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800230e:	1dbb      	adds	r3, r7, #6
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	0018      	movs	r0, r3
 8002314:	f000 f806 	bl	8002324 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002318:	46c0      	nop			; (mov r8, r8)
 800231a:	46bd      	mov	sp, r7
 800231c:	b002      	add	sp, #8
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021800 	.word	0x40021800

08002324 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	0002      	movs	r2, r0
 800232c:	1dbb      	adds	r3, r7, #6
 800232e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002330:	46c0      	nop			; (mov r8, r8)
 8002332:	46bd      	mov	sp, r7
 8002334:	b002      	add	sp, #8
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002340:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a19      	ldr	r2, [pc, #100]	; (80023ac <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002346:	4013      	ands	r3, r2
 8002348:	0019      	movs	r1, r3
 800234a:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	430a      	orrs	r2, r1
 8002350:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	429a      	cmp	r2, r3
 800235a:	d11f      	bne.n	800239c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800235c:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	0013      	movs	r3, r2
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	189b      	adds	r3, r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4912      	ldr	r1, [pc, #72]	; (80023b4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800236a:	0018      	movs	r0, r3
 800236c:	f7fd feca 	bl	8000104 <__udivsi3>
 8002370:	0003      	movs	r3, r0
 8002372:	3301      	adds	r3, #1
 8002374:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002376:	e008      	b.n	800238a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	3b01      	subs	r3, #1
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	e001      	b.n	800238a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e009      	b.n	800239e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800238a:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	401a      	ands	r2, r3
 8002394:	2380      	movs	r3, #128	; 0x80
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	429a      	cmp	r2, r3
 800239a:	d0ed      	beq.n	8002378 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	0018      	movs	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b004      	add	sp, #16
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	40007000 	.word	0x40007000
 80023ac:	fffff9ff 	.word	0xfffff9ff
 80023b0:	20000000 	.word	0x20000000
 80023b4:	000f4240 	.word	0x000f4240

080023b8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80023bc:	4b03      	ldr	r3, [pc, #12]	; (80023cc <LL_RCC_GetAPB1Prescaler+0x14>)
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	23e0      	movs	r3, #224	; 0xe0
 80023c2:	01db      	lsls	r3, r3, #7
 80023c4:	4013      	ands	r3, r2
}
 80023c6:	0018      	movs	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40021000 	.word	0x40021000

080023d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e304      	b.n	80029ec <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2201      	movs	r2, #1
 80023e8:	4013      	ands	r3, r2
 80023ea:	d100      	bne.n	80023ee <HAL_RCC_OscConfig+0x1e>
 80023ec:	e07c      	b.n	80024e8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ee:	4bc3      	ldr	r3, [pc, #780]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2238      	movs	r2, #56	; 0x38
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023f8:	4bc0      	ldr	r3, [pc, #768]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	2203      	movs	r2, #3
 80023fe:	4013      	ands	r3, r2
 8002400:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	2b10      	cmp	r3, #16
 8002406:	d102      	bne.n	800240e <HAL_RCC_OscConfig+0x3e>
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	2b03      	cmp	r3, #3
 800240c:	d002      	beq.n	8002414 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	2b08      	cmp	r3, #8
 8002412:	d10b      	bne.n	800242c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002414:	4bb9      	ldr	r3, [pc, #740]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	029b      	lsls	r3, r3, #10
 800241c:	4013      	ands	r3, r2
 800241e:	d062      	beq.n	80024e6 <HAL_RCC_OscConfig+0x116>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d15e      	bne.n	80024e6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e2df      	b.n	80029ec <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	025b      	lsls	r3, r3, #9
 8002434:	429a      	cmp	r2, r3
 8002436:	d107      	bne.n	8002448 <HAL_RCC_OscConfig+0x78>
 8002438:	4bb0      	ldr	r3, [pc, #704]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4baf      	ldr	r3, [pc, #700]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 800243e:	2180      	movs	r1, #128	; 0x80
 8002440:	0249      	lsls	r1, r1, #9
 8002442:	430a      	orrs	r2, r1
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	e020      	b.n	800248a <HAL_RCC_OscConfig+0xba>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	23a0      	movs	r3, #160	; 0xa0
 800244e:	02db      	lsls	r3, r3, #11
 8002450:	429a      	cmp	r2, r3
 8002452:	d10e      	bne.n	8002472 <HAL_RCC_OscConfig+0xa2>
 8002454:	4ba9      	ldr	r3, [pc, #676]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4ba8      	ldr	r3, [pc, #672]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 800245a:	2180      	movs	r1, #128	; 0x80
 800245c:	02c9      	lsls	r1, r1, #11
 800245e:	430a      	orrs	r2, r1
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	4ba6      	ldr	r3, [pc, #664]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4ba5      	ldr	r3, [pc, #660]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 8002468:	2180      	movs	r1, #128	; 0x80
 800246a:	0249      	lsls	r1, r1, #9
 800246c:	430a      	orrs	r2, r1
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	e00b      	b.n	800248a <HAL_RCC_OscConfig+0xba>
 8002472:	4ba2      	ldr	r3, [pc, #648]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	4ba1      	ldr	r3, [pc, #644]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 8002478:	49a1      	ldr	r1, [pc, #644]	; (8002700 <HAL_RCC_OscConfig+0x330>)
 800247a:	400a      	ands	r2, r1
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	4b9f      	ldr	r3, [pc, #636]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	4b9e      	ldr	r3, [pc, #632]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 8002484:	499f      	ldr	r1, [pc, #636]	; (8002704 <HAL_RCC_OscConfig+0x334>)
 8002486:	400a      	ands	r2, r1
 8002488:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d014      	beq.n	80024bc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe fef5 	bl	8001280 <HAL_GetTick>
 8002496:	0003      	movs	r3, r0
 8002498:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800249c:	f7fe fef0 	bl	8001280 <HAL_GetTick>
 80024a0:	0002      	movs	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b64      	cmp	r3, #100	; 0x64
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e29e      	b.n	80029ec <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ae:	4b93      	ldr	r3, [pc, #588]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	029b      	lsls	r3, r3, #10
 80024b6:	4013      	ands	r3, r2
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0xcc>
 80024ba:	e015      	b.n	80024e8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024bc:	f7fe fee0 	bl	8001280 <HAL_GetTick>
 80024c0:	0003      	movs	r3, r0
 80024c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c6:	f7fe fedb 	bl	8001280 <HAL_GetTick>
 80024ca:	0002      	movs	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b64      	cmp	r3, #100	; 0x64
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e289      	b.n	80029ec <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024d8:	4b88      	ldr	r3, [pc, #544]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	029b      	lsls	r3, r3, #10
 80024e0:	4013      	ands	r3, r2
 80024e2:	d1f0      	bne.n	80024c6 <HAL_RCC_OscConfig+0xf6>
 80024e4:	e000      	b.n	80024e8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2202      	movs	r2, #2
 80024ee:	4013      	ands	r3, r2
 80024f0:	d100      	bne.n	80024f4 <HAL_RCC_OscConfig+0x124>
 80024f2:	e099      	b.n	8002628 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f4:	4b81      	ldr	r3, [pc, #516]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2238      	movs	r2, #56	; 0x38
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024fe:	4b7f      	ldr	r3, [pc, #508]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	2203      	movs	r2, #3
 8002504:	4013      	ands	r3, r2
 8002506:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	2b10      	cmp	r3, #16
 800250c:	d102      	bne.n	8002514 <HAL_RCC_OscConfig+0x144>
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d002      	beq.n	800251a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d135      	bne.n	8002586 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800251a:	4b78      	ldr	r3, [pc, #480]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4013      	ands	r3, r2
 8002524:	d005      	beq.n	8002532 <HAL_RCC_OscConfig+0x162>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e25c      	b.n	80029ec <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002532:	4b72      	ldr	r3, [pc, #456]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	4a74      	ldr	r2, [pc, #464]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 8002538:	4013      	ands	r3, r2
 800253a:	0019      	movs	r1, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	021a      	lsls	r2, r3, #8
 8002542:	4b6e      	ldr	r3, [pc, #440]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 8002544:	430a      	orrs	r2, r1
 8002546:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d112      	bne.n	8002574 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800254e:	4b6b      	ldr	r3, [pc, #428]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a6e      	ldr	r2, [pc, #440]	; (800270c <HAL_RCC_OscConfig+0x33c>)
 8002554:	4013      	ands	r3, r2
 8002556:	0019      	movs	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	4b67      	ldr	r3, [pc, #412]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 800255e:	430a      	orrs	r2, r1
 8002560:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002562:	4b66      	ldr	r3, [pc, #408]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	0adb      	lsrs	r3, r3, #11
 8002568:	2207      	movs	r2, #7
 800256a:	4013      	ands	r3, r2
 800256c:	4a68      	ldr	r2, [pc, #416]	; (8002710 <HAL_RCC_OscConfig+0x340>)
 800256e:	40da      	lsrs	r2, r3
 8002570:	4b68      	ldr	r3, [pc, #416]	; (8002714 <HAL_RCC_OscConfig+0x344>)
 8002572:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002574:	4b68      	ldr	r3, [pc, #416]	; (8002718 <HAL_RCC_OscConfig+0x348>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	0018      	movs	r0, r3
 800257a:	f7fe fe25 	bl	80011c8 <HAL_InitTick>
 800257e:	1e03      	subs	r3, r0, #0
 8002580:	d051      	beq.n	8002626 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e232      	b.n	80029ec <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d030      	beq.n	80025f0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800258e:	4b5b      	ldr	r3, [pc, #364]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a5e      	ldr	r2, [pc, #376]	; (800270c <HAL_RCC_OscConfig+0x33c>)
 8002594:	4013      	ands	r3, r2
 8002596:	0019      	movs	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	4b57      	ldr	r3, [pc, #348]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 800259e:	430a      	orrs	r2, r1
 80025a0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80025a2:	4b56      	ldr	r3, [pc, #344]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	4b55      	ldr	r3, [pc, #340]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 80025a8:	2180      	movs	r1, #128	; 0x80
 80025aa:	0049      	lsls	r1, r1, #1
 80025ac:	430a      	orrs	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7fe fe66 	bl	8001280 <HAL_GetTick>
 80025b4:	0003      	movs	r3, r0
 80025b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ba:	f7fe fe61 	bl	8001280 <HAL_GetTick>
 80025be:	0002      	movs	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e20f      	b.n	80029ec <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025cc:	4b4b      	ldr	r3, [pc, #300]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	2380      	movs	r3, #128	; 0x80
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4013      	ands	r3, r2
 80025d6:	d0f0      	beq.n	80025ba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d8:	4b48      	ldr	r3, [pc, #288]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	4a4a      	ldr	r2, [pc, #296]	; (8002708 <HAL_RCC_OscConfig+0x338>)
 80025de:	4013      	ands	r3, r2
 80025e0:	0019      	movs	r1, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	021a      	lsls	r2, r3, #8
 80025e8:	4b44      	ldr	r3, [pc, #272]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 80025ea:	430a      	orrs	r2, r1
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	e01b      	b.n	8002628 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80025f0:	4b42      	ldr	r3, [pc, #264]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	4b41      	ldr	r3, [pc, #260]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 80025f6:	4949      	ldr	r1, [pc, #292]	; (800271c <HAL_RCC_OscConfig+0x34c>)
 80025f8:	400a      	ands	r2, r1
 80025fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fc:	f7fe fe40 	bl	8001280 <HAL_GetTick>
 8002600:	0003      	movs	r3, r0
 8002602:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002606:	f7fe fe3b 	bl	8001280 <HAL_GetTick>
 800260a:	0002      	movs	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e1e9      	b.n	80029ec <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002618:	4b38      	ldr	r3, [pc, #224]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4013      	ands	r3, r2
 8002622:	d1f0      	bne.n	8002606 <HAL_RCC_OscConfig+0x236>
 8002624:	e000      	b.n	8002628 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002626:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2208      	movs	r2, #8
 800262e:	4013      	ands	r3, r2
 8002630:	d047      	beq.n	80026c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002632:	4b32      	ldr	r3, [pc, #200]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2238      	movs	r2, #56	; 0x38
 8002638:	4013      	ands	r3, r2
 800263a:	2b18      	cmp	r3, #24
 800263c:	d10a      	bne.n	8002654 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800263e:	4b2f      	ldr	r3, [pc, #188]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 8002640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002642:	2202      	movs	r2, #2
 8002644:	4013      	ands	r3, r2
 8002646:	d03c      	beq.n	80026c2 <HAL_RCC_OscConfig+0x2f2>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d138      	bne.n	80026c2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e1cb      	b.n	80029ec <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d019      	beq.n	8002690 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800265c:	4b27      	ldr	r3, [pc, #156]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 800265e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002660:	4b26      	ldr	r3, [pc, #152]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 8002662:	2101      	movs	r1, #1
 8002664:	430a      	orrs	r2, r1
 8002666:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7fe fe0a 	bl	8001280 <HAL_GetTick>
 800266c:	0003      	movs	r3, r0
 800266e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002672:	f7fe fe05 	bl	8001280 <HAL_GetTick>
 8002676:	0002      	movs	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e1b3      	b.n	80029ec <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002684:	4b1d      	ldr	r3, [pc, #116]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 8002686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002688:	2202      	movs	r2, #2
 800268a:	4013      	ands	r3, r2
 800268c:	d0f1      	beq.n	8002672 <HAL_RCC_OscConfig+0x2a2>
 800268e:	e018      	b.n	80026c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002690:	4b1a      	ldr	r3, [pc, #104]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 8002692:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002694:	4b19      	ldr	r3, [pc, #100]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 8002696:	2101      	movs	r1, #1
 8002698:	438a      	bics	r2, r1
 800269a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269c:	f7fe fdf0 	bl	8001280 <HAL_GetTick>
 80026a0:	0003      	movs	r3, r0
 80026a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a6:	f7fe fdeb 	bl	8001280 <HAL_GetTick>
 80026aa:	0002      	movs	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e199      	b.n	80029ec <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026b8:	4b10      	ldr	r3, [pc, #64]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 80026ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026bc:	2202      	movs	r2, #2
 80026be:	4013      	ands	r3, r2
 80026c0:	d1f1      	bne.n	80026a6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2204      	movs	r2, #4
 80026c8:	4013      	ands	r3, r2
 80026ca:	d100      	bne.n	80026ce <HAL_RCC_OscConfig+0x2fe>
 80026cc:	e0c6      	b.n	800285c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ce:	231f      	movs	r3, #31
 80026d0:	18fb      	adds	r3, r7, r3
 80026d2:	2200      	movs	r2, #0
 80026d4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2238      	movs	r2, #56	; 0x38
 80026dc:	4013      	ands	r3, r2
 80026de:	2b20      	cmp	r3, #32
 80026e0:	d11e      	bne.n	8002720 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80026e2:	4b06      	ldr	r3, [pc, #24]	; (80026fc <HAL_RCC_OscConfig+0x32c>)
 80026e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e6:	2202      	movs	r2, #2
 80026e8:	4013      	ands	r3, r2
 80026ea:	d100      	bne.n	80026ee <HAL_RCC_OscConfig+0x31e>
 80026ec:	e0b6      	b.n	800285c <HAL_RCC_OscConfig+0x48c>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d000      	beq.n	80026f8 <HAL_RCC_OscConfig+0x328>
 80026f6:	e0b1      	b.n	800285c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e177      	b.n	80029ec <HAL_RCC_OscConfig+0x61c>
 80026fc:	40021000 	.word	0x40021000
 8002700:	fffeffff 	.word	0xfffeffff
 8002704:	fffbffff 	.word	0xfffbffff
 8002708:	ffff80ff 	.word	0xffff80ff
 800270c:	ffffc7ff 	.word	0xffffc7ff
 8002710:	00f42400 	.word	0x00f42400
 8002714:	20000000 	.word	0x20000000
 8002718:	20000004 	.word	0x20000004
 800271c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002720:	4bb4      	ldr	r3, [pc, #720]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 8002722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002724:	2380      	movs	r3, #128	; 0x80
 8002726:	055b      	lsls	r3, r3, #21
 8002728:	4013      	ands	r3, r2
 800272a:	d101      	bne.n	8002730 <HAL_RCC_OscConfig+0x360>
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <HAL_RCC_OscConfig+0x362>
 8002730:	2300      	movs	r3, #0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d011      	beq.n	800275a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002736:	4baf      	ldr	r3, [pc, #700]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 8002738:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800273a:	4bae      	ldr	r3, [pc, #696]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 800273c:	2180      	movs	r1, #128	; 0x80
 800273e:	0549      	lsls	r1, r1, #21
 8002740:	430a      	orrs	r2, r1
 8002742:	63da      	str	r2, [r3, #60]	; 0x3c
 8002744:	4bab      	ldr	r3, [pc, #684]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 8002746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002748:	2380      	movs	r3, #128	; 0x80
 800274a:	055b      	lsls	r3, r3, #21
 800274c:	4013      	ands	r3, r2
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002752:	231f      	movs	r3, #31
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	2201      	movs	r2, #1
 8002758:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800275a:	4ba7      	ldr	r3, [pc, #668]	; (80029f8 <HAL_RCC_OscConfig+0x628>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4013      	ands	r3, r2
 8002764:	d11a      	bne.n	800279c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002766:	4ba4      	ldr	r3, [pc, #656]	; (80029f8 <HAL_RCC_OscConfig+0x628>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	4ba3      	ldr	r3, [pc, #652]	; (80029f8 <HAL_RCC_OscConfig+0x628>)
 800276c:	2180      	movs	r1, #128	; 0x80
 800276e:	0049      	lsls	r1, r1, #1
 8002770:	430a      	orrs	r2, r1
 8002772:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002774:	f7fe fd84 	bl	8001280 <HAL_GetTick>
 8002778:	0003      	movs	r3, r0
 800277a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277e:	f7fe fd7f 	bl	8001280 <HAL_GetTick>
 8002782:	0002      	movs	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e12d      	b.n	80029ec <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002790:	4b99      	ldr	r3, [pc, #612]	; (80029f8 <HAL_RCC_OscConfig+0x628>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	4013      	ands	r3, r2
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d106      	bne.n	80027b2 <HAL_RCC_OscConfig+0x3e2>
 80027a4:	4b93      	ldr	r3, [pc, #588]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 80027a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027a8:	4b92      	ldr	r3, [pc, #584]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 80027aa:	2101      	movs	r1, #1
 80027ac:	430a      	orrs	r2, r1
 80027ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80027b0:	e01c      	b.n	80027ec <HAL_RCC_OscConfig+0x41c>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b05      	cmp	r3, #5
 80027b8:	d10c      	bne.n	80027d4 <HAL_RCC_OscConfig+0x404>
 80027ba:	4b8e      	ldr	r3, [pc, #568]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 80027bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027be:	4b8d      	ldr	r3, [pc, #564]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 80027c0:	2104      	movs	r1, #4
 80027c2:	430a      	orrs	r2, r1
 80027c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80027c6:	4b8b      	ldr	r3, [pc, #556]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 80027c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027ca:	4b8a      	ldr	r3, [pc, #552]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 80027cc:	2101      	movs	r1, #1
 80027ce:	430a      	orrs	r2, r1
 80027d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80027d2:	e00b      	b.n	80027ec <HAL_RCC_OscConfig+0x41c>
 80027d4:	4b87      	ldr	r3, [pc, #540]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 80027d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027d8:	4b86      	ldr	r3, [pc, #536]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 80027da:	2101      	movs	r1, #1
 80027dc:	438a      	bics	r2, r1
 80027de:	65da      	str	r2, [r3, #92]	; 0x5c
 80027e0:	4b84      	ldr	r3, [pc, #528]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 80027e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027e4:	4b83      	ldr	r3, [pc, #524]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 80027e6:	2104      	movs	r1, #4
 80027e8:	438a      	bics	r2, r1
 80027ea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d014      	beq.n	800281e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7fe fd44 	bl	8001280 <HAL_GetTick>
 80027f8:	0003      	movs	r3, r0
 80027fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027fc:	e009      	b.n	8002812 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fe:	f7fe fd3f 	bl	8001280 <HAL_GetTick>
 8002802:	0002      	movs	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	4a7c      	ldr	r2, [pc, #496]	; (80029fc <HAL_RCC_OscConfig+0x62c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e0ec      	b.n	80029ec <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002812:	4b78      	ldr	r3, [pc, #480]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 8002814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002816:	2202      	movs	r2, #2
 8002818:	4013      	ands	r3, r2
 800281a:	d0f0      	beq.n	80027fe <HAL_RCC_OscConfig+0x42e>
 800281c:	e013      	b.n	8002846 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281e:	f7fe fd2f 	bl	8001280 <HAL_GetTick>
 8002822:	0003      	movs	r3, r0
 8002824:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002826:	e009      	b.n	800283c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002828:	f7fe fd2a 	bl	8001280 <HAL_GetTick>
 800282c:	0002      	movs	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	4a72      	ldr	r2, [pc, #456]	; (80029fc <HAL_RCC_OscConfig+0x62c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e0d7      	b.n	80029ec <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800283c:	4b6d      	ldr	r3, [pc, #436]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 800283e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002840:	2202      	movs	r2, #2
 8002842:	4013      	ands	r3, r2
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002846:	231f      	movs	r3, #31
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d105      	bne.n	800285c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002850:	4b68      	ldr	r3, [pc, #416]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 8002852:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002854:	4b67      	ldr	r3, [pc, #412]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 8002856:	496a      	ldr	r1, [pc, #424]	; (8002a00 <HAL_RCC_OscConfig+0x630>)
 8002858:	400a      	ands	r2, r1
 800285a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d100      	bne.n	8002866 <HAL_RCC_OscConfig+0x496>
 8002864:	e0c1      	b.n	80029ea <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002866:	4b63      	ldr	r3, [pc, #396]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2238      	movs	r2, #56	; 0x38
 800286c:	4013      	ands	r3, r2
 800286e:	2b10      	cmp	r3, #16
 8002870:	d100      	bne.n	8002874 <HAL_RCC_OscConfig+0x4a4>
 8002872:	e081      	b.n	8002978 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	2b02      	cmp	r3, #2
 800287a:	d156      	bne.n	800292a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287c:	4b5d      	ldr	r3, [pc, #372]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b5c      	ldr	r3, [pc, #368]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 8002882:	4960      	ldr	r1, [pc, #384]	; (8002a04 <HAL_RCC_OscConfig+0x634>)
 8002884:	400a      	ands	r2, r1
 8002886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002888:	f7fe fcfa 	bl	8001280 <HAL_GetTick>
 800288c:	0003      	movs	r3, r0
 800288e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002892:	f7fe fcf5 	bl	8001280 <HAL_GetTick>
 8002896:	0002      	movs	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e0a3      	b.n	80029ec <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a4:	4b53      	ldr	r3, [pc, #332]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	2380      	movs	r3, #128	; 0x80
 80028aa:	049b      	lsls	r3, r3, #18
 80028ac:	4013      	ands	r3, r2
 80028ae:	d1f0      	bne.n	8002892 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028b0:	4b50      	ldr	r3, [pc, #320]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4a54      	ldr	r2, [pc, #336]	; (8002a08 <HAL_RCC_OscConfig+0x638>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	0019      	movs	r1, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1a      	ldr	r2, [r3, #32]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028dc:	431a      	orrs	r2, r3
 80028de:	4b45      	ldr	r3, [pc, #276]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 80028e0:	430a      	orrs	r2, r1
 80028e2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e4:	4b43      	ldr	r3, [pc, #268]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b42      	ldr	r3, [pc, #264]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 80028ea:	2180      	movs	r1, #128	; 0x80
 80028ec:	0449      	lsls	r1, r1, #17
 80028ee:	430a      	orrs	r2, r1
 80028f0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80028f2:	4b40      	ldr	r3, [pc, #256]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	4b3f      	ldr	r3, [pc, #252]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 80028f8:	2180      	movs	r1, #128	; 0x80
 80028fa:	0549      	lsls	r1, r1, #21
 80028fc:	430a      	orrs	r2, r1
 80028fe:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7fe fcbe 	bl	8001280 <HAL_GetTick>
 8002904:	0003      	movs	r3, r0
 8002906:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290a:	f7fe fcb9 	bl	8001280 <HAL_GetTick>
 800290e:	0002      	movs	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e067      	b.n	80029ec <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291c:	4b35      	ldr	r3, [pc, #212]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	049b      	lsls	r3, r3, #18
 8002924:	4013      	ands	r3, r2
 8002926:	d0f0      	beq.n	800290a <HAL_RCC_OscConfig+0x53a>
 8002928:	e05f      	b.n	80029ea <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800292a:	4b32      	ldr	r3, [pc, #200]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	4b31      	ldr	r3, [pc, #196]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 8002930:	4934      	ldr	r1, [pc, #208]	; (8002a04 <HAL_RCC_OscConfig+0x634>)
 8002932:	400a      	ands	r2, r1
 8002934:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002936:	4b2f      	ldr	r3, [pc, #188]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	4b2e      	ldr	r3, [pc, #184]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 800293c:	2103      	movs	r1, #3
 800293e:	438a      	bics	r2, r1
 8002940:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002942:	4b2c      	ldr	r3, [pc, #176]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	4b2b      	ldr	r3, [pc, #172]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 8002948:	4930      	ldr	r1, [pc, #192]	; (8002a0c <HAL_RCC_OscConfig+0x63c>)
 800294a:	400a      	ands	r2, r1
 800294c:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294e:	f7fe fc97 	bl	8001280 <HAL_GetTick>
 8002952:	0003      	movs	r3, r0
 8002954:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002958:	f7fe fc92 	bl	8001280 <HAL_GetTick>
 800295c:	0002      	movs	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e040      	b.n	80029ec <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800296a:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	2380      	movs	r3, #128	; 0x80
 8002970:	049b      	lsls	r3, r3, #18
 8002972:	4013      	ands	r3, r2
 8002974:	d1f0      	bne.n	8002958 <HAL_RCC_OscConfig+0x588>
 8002976:	e038      	b.n	80029ea <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e033      	b.n	80029ec <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002984:	4b1b      	ldr	r3, [pc, #108]	; (80029f4 <HAL_RCC_OscConfig+0x624>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	2203      	movs	r2, #3
 800298e:	401a      	ands	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	429a      	cmp	r2, r3
 8002996:	d126      	bne.n	80029e6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	2270      	movs	r2, #112	; 0x70
 800299c:	401a      	ands	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d11f      	bne.n	80029e6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	23fe      	movs	r3, #254	; 0xfe
 80029aa:	01db      	lsls	r3, r3, #7
 80029ac:	401a      	ands	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d116      	bne.n	80029e6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	23f8      	movs	r3, #248	; 0xf8
 80029bc:	039b      	lsls	r3, r3, #14
 80029be:	401a      	ands	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d10e      	bne.n	80029e6 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	23e0      	movs	r3, #224	; 0xe0
 80029cc:	051b      	lsls	r3, r3, #20
 80029ce:	401a      	ands	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d106      	bne.n	80029e6 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	0f5b      	lsrs	r3, r3, #29
 80029dc:	075a      	lsls	r2, r3, #29
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d001      	beq.n	80029ea <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	0018      	movs	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b008      	add	sp, #32
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40021000 	.word	0x40021000
 80029f8:	40007000 	.word	0x40007000
 80029fc:	00001388 	.word	0x00001388
 8002a00:	efffffff 	.word	0xefffffff
 8002a04:	feffffff 	.word	0xfeffffff
 8002a08:	11c1808c 	.word	0x11c1808c
 8002a0c:	eefeffff 	.word	0xeefeffff

08002a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e0e9      	b.n	8002bf8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a24:	4b76      	ldr	r3, [pc, #472]	; (8002c00 <HAL_RCC_ClockConfig+0x1f0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2207      	movs	r2, #7
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d91e      	bls.n	8002a70 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a32:	4b73      	ldr	r3, [pc, #460]	; (8002c00 <HAL_RCC_ClockConfig+0x1f0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2207      	movs	r2, #7
 8002a38:	4393      	bics	r3, r2
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	4b70      	ldr	r3, [pc, #448]	; (8002c00 <HAL_RCC_ClockConfig+0x1f0>)
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a44:	f7fe fc1c 	bl	8001280 <HAL_GetTick>
 8002a48:	0003      	movs	r3, r0
 8002a4a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a4c:	e009      	b.n	8002a62 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a4e:	f7fe fc17 	bl	8001280 <HAL_GetTick>
 8002a52:	0002      	movs	r2, r0
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	4a6a      	ldr	r2, [pc, #424]	; (8002c04 <HAL_RCC_ClockConfig+0x1f4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e0ca      	b.n	8002bf8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a62:	4b67      	ldr	r3, [pc, #412]	; (8002c00 <HAL_RCC_ClockConfig+0x1f0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2207      	movs	r2, #7
 8002a68:	4013      	ands	r3, r2
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d1ee      	bne.n	8002a4e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2202      	movs	r2, #2
 8002a76:	4013      	ands	r3, r2
 8002a78:	d015      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2204      	movs	r2, #4
 8002a80:	4013      	ands	r3, r2
 8002a82:	d006      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a84:	4b60      	ldr	r3, [pc, #384]	; (8002c08 <HAL_RCC_ClockConfig+0x1f8>)
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	4b5f      	ldr	r3, [pc, #380]	; (8002c08 <HAL_RCC_ClockConfig+0x1f8>)
 8002a8a:	21e0      	movs	r1, #224	; 0xe0
 8002a8c:	01c9      	lsls	r1, r1, #7
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a92:	4b5d      	ldr	r3, [pc, #372]	; (8002c08 <HAL_RCC_ClockConfig+0x1f8>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	4a5d      	ldr	r2, [pc, #372]	; (8002c0c <HAL_RCC_ClockConfig+0x1fc>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	0019      	movs	r1, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	4b59      	ldr	r3, [pc, #356]	; (8002c08 <HAL_RCC_ClockConfig+0x1f8>)
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	4013      	ands	r3, r2
 8002aae:	d057      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d107      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ab8:	4b53      	ldr	r3, [pc, #332]	; (8002c08 <HAL_RCC_ClockConfig+0x1f8>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	2380      	movs	r3, #128	; 0x80
 8002abe:	029b      	lsls	r3, r3, #10
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d12b      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e097      	b.n	8002bf8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d107      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad0:	4b4d      	ldr	r3, [pc, #308]	; (8002c08 <HAL_RCC_ClockConfig+0x1f8>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	2380      	movs	r3, #128	; 0x80
 8002ad6:	049b      	lsls	r3, r3, #18
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d11f      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e08b      	b.n	8002bf8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d107      	bne.n	8002af8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ae8:	4b47      	ldr	r3, [pc, #284]	; (8002c08 <HAL_RCC_ClockConfig+0x1f8>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	2380      	movs	r3, #128	; 0x80
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	4013      	ands	r3, r2
 8002af2:	d113      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e07f      	b.n	8002bf8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d106      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b00:	4b41      	ldr	r3, [pc, #260]	; (8002c08 <HAL_RCC_ClockConfig+0x1f8>)
 8002b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b04:	2202      	movs	r2, #2
 8002b06:	4013      	ands	r3, r2
 8002b08:	d108      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e074      	b.n	8002bf8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b0e:	4b3e      	ldr	r3, [pc, #248]	; (8002c08 <HAL_RCC_ClockConfig+0x1f8>)
 8002b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b12:	2202      	movs	r2, #2
 8002b14:	4013      	ands	r3, r2
 8002b16:	d101      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e06d      	b.n	8002bf8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b1c:	4b3a      	ldr	r3, [pc, #232]	; (8002c08 <HAL_RCC_ClockConfig+0x1f8>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2207      	movs	r2, #7
 8002b22:	4393      	bics	r3, r2
 8002b24:	0019      	movs	r1, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	4b37      	ldr	r3, [pc, #220]	; (8002c08 <HAL_RCC_ClockConfig+0x1f8>)
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b30:	f7fe fba6 	bl	8001280 <HAL_GetTick>
 8002b34:	0003      	movs	r3, r0
 8002b36:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b38:	e009      	b.n	8002b4e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b3a:	f7fe fba1 	bl	8001280 <HAL_GetTick>
 8002b3e:	0002      	movs	r2, r0
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	4a2f      	ldr	r2, [pc, #188]	; (8002c04 <HAL_RCC_ClockConfig+0x1f4>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e054      	b.n	8002bf8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4e:	4b2e      	ldr	r3, [pc, #184]	; (8002c08 <HAL_RCC_ClockConfig+0x1f8>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2238      	movs	r2, #56	; 0x38
 8002b54:	401a      	ands	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d1ec      	bne.n	8002b3a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b60:	4b27      	ldr	r3, [pc, #156]	; (8002c00 <HAL_RCC_ClockConfig+0x1f0>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2207      	movs	r2, #7
 8002b66:	4013      	ands	r3, r2
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d21e      	bcs.n	8002bac <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6e:	4b24      	ldr	r3, [pc, #144]	; (8002c00 <HAL_RCC_ClockConfig+0x1f0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2207      	movs	r2, #7
 8002b74:	4393      	bics	r3, r2
 8002b76:	0019      	movs	r1, r3
 8002b78:	4b21      	ldr	r3, [pc, #132]	; (8002c00 <HAL_RCC_ClockConfig+0x1f0>)
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b80:	f7fe fb7e 	bl	8001280 <HAL_GetTick>
 8002b84:	0003      	movs	r3, r0
 8002b86:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b88:	e009      	b.n	8002b9e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8a:	f7fe fb79 	bl	8001280 <HAL_GetTick>
 8002b8e:	0002      	movs	r2, r0
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	4a1b      	ldr	r2, [pc, #108]	; (8002c04 <HAL_RCC_ClockConfig+0x1f4>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e02c      	b.n	8002bf8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b9e:	4b18      	ldr	r3, [pc, #96]	; (8002c00 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2207      	movs	r2, #7
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d1ee      	bne.n	8002b8a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2204      	movs	r2, #4
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	d009      	beq.n	8002bca <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb6:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <HAL_RCC_ClockConfig+0x1f8>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	4a15      	ldr	r2, [pc, #84]	; (8002c10 <HAL_RCC_ClockConfig+0x200>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	0019      	movs	r1, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <HAL_RCC_ClockConfig+0x1f8>)
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002bca:	f000 f829 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8002bce:	0001      	movs	r1, r0
 8002bd0:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <HAL_RCC_ClockConfig+0x1f8>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	0a1b      	lsrs	r3, r3, #8
 8002bd6:	220f      	movs	r2, #15
 8002bd8:	401a      	ands	r2, r3
 8002bda:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <HAL_RCC_ClockConfig+0x204>)
 8002bdc:	0092      	lsls	r2, r2, #2
 8002bde:	58d3      	ldr	r3, [r2, r3]
 8002be0:	221f      	movs	r2, #31
 8002be2:	4013      	ands	r3, r2
 8002be4:	000a      	movs	r2, r1
 8002be6:	40da      	lsrs	r2, r3
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <HAL_RCC_ClockConfig+0x208>)
 8002bea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <HAL_RCC_ClockConfig+0x20c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f7fe fae9 	bl	80011c8 <HAL_InitTick>
 8002bf6:	0003      	movs	r3, r0
}
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b004      	add	sp, #16
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40022000 	.word	0x40022000
 8002c04:	00001388 	.word	0x00001388
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	fffff0ff 	.word	0xfffff0ff
 8002c10:	ffff8fff 	.word	0xffff8fff
 8002c14:	08005d88 	.word	0x08005d88
 8002c18:	20000000 	.word	0x20000000
 8002c1c:	20000004 	.word	0x20000004

08002c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c26:	4b3c      	ldr	r3, [pc, #240]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2238      	movs	r2, #56	; 0x38
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d10f      	bne.n	8002c50 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002c30:	4b39      	ldr	r3, [pc, #228]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	0adb      	lsrs	r3, r3, #11
 8002c36:	2207      	movs	r2, #7
 8002c38:	4013      	ands	r3, r2
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	409a      	lsls	r2, r3
 8002c3e:	0013      	movs	r3, r2
 8002c40:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002c42:	6839      	ldr	r1, [r7, #0]
 8002c44:	4835      	ldr	r0, [pc, #212]	; (8002d1c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c46:	f7fd fa5d 	bl	8000104 <__udivsi3>
 8002c4a:	0003      	movs	r3, r0
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	e05d      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c50:	4b31      	ldr	r3, [pc, #196]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2238      	movs	r2, #56	; 0x38
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d102      	bne.n	8002c62 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c5c:	4b30      	ldr	r3, [pc, #192]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x100>)
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	e054      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c62:	4b2d      	ldr	r3, [pc, #180]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2238      	movs	r2, #56	; 0x38
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b10      	cmp	r3, #16
 8002c6c:	d138      	bne.n	8002ce0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002c6e:	4b2a      	ldr	r3, [pc, #168]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	2203      	movs	r2, #3
 8002c74:	4013      	ands	r3, r2
 8002c76:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c78:	4b27      	ldr	r3, [pc, #156]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	2207      	movs	r2, #7
 8002c80:	4013      	ands	r3, r2
 8002c82:	3301      	adds	r3, #1
 8002c84:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d10d      	bne.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c8c:	68b9      	ldr	r1, [r7, #8]
 8002c8e:	4824      	ldr	r0, [pc, #144]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x100>)
 8002c90:	f7fd fa38 	bl	8000104 <__udivsi3>
 8002c94:	0003      	movs	r3, r0
 8002c96:	0019      	movs	r1, r3
 8002c98:	4b1f      	ldr	r3, [pc, #124]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	0a1b      	lsrs	r3, r3, #8
 8002c9e:	227f      	movs	r2, #127	; 0x7f
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	434b      	muls	r3, r1
 8002ca4:	617b      	str	r3, [r7, #20]
        break;
 8002ca6:	e00d      	b.n	8002cc4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	481c      	ldr	r0, [pc, #112]	; (8002d1c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002cac:	f7fd fa2a 	bl	8000104 <__udivsi3>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	0019      	movs	r1, r3
 8002cb4:	4b18      	ldr	r3, [pc, #96]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	0a1b      	lsrs	r3, r3, #8
 8002cba:	227f      	movs	r2, #127	; 0x7f
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	434b      	muls	r3, r1
 8002cc0:	617b      	str	r3, [r7, #20]
        break;
 8002cc2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002cc4:	4b14      	ldr	r3, [pc, #80]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	0f5b      	lsrs	r3, r3, #29
 8002cca:	2207      	movs	r2, #7
 8002ccc:	4013      	ands	r3, r2
 8002cce:	3301      	adds	r3, #1
 8002cd0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	6978      	ldr	r0, [r7, #20]
 8002cd6:	f7fd fa15 	bl	8000104 <__udivsi3>
 8002cda:	0003      	movs	r3, r0
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	e015      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002ce0:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2238      	movs	r2, #56	; 0x38
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b20      	cmp	r3, #32
 8002cea:	d103      	bne.n	8002cf4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002cec:	2380      	movs	r3, #128	; 0x80
 8002cee:	021b      	lsls	r3, r3, #8
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	e00b      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2238      	movs	r2, #56	; 0x38
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b18      	cmp	r3, #24
 8002cfe:	d103      	bne.n	8002d08 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002d00:	23fa      	movs	r3, #250	; 0xfa
 8002d02:	01db      	lsls	r3, r3, #7
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	e001      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d0c:	693b      	ldr	r3, [r7, #16]
}
 8002d0e:	0018      	movs	r0, r3
 8002d10:	46bd      	mov	sp, r7
 8002d12:	b006      	add	sp, #24
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	00f42400 	.word	0x00f42400
 8002d20:	007a1200 	.word	0x007a1200

08002d24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d28:	4b02      	ldr	r3, [pc, #8]	; (8002d34 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
}
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	20000000 	.word	0x20000000

08002d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d38:	b5b0      	push	{r4, r5, r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002d3c:	f7ff fff2 	bl	8002d24 <HAL_RCC_GetHCLKFreq>
 8002d40:	0004      	movs	r4, r0
 8002d42:	f7ff fb39 	bl	80023b8 <LL_RCC_GetAPB1Prescaler>
 8002d46:	0003      	movs	r3, r0
 8002d48:	0b1a      	lsrs	r2, r3, #12
 8002d4a:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d4c:	0092      	lsls	r2, r2, #2
 8002d4e:	58d3      	ldr	r3, [r2, r3]
 8002d50:	221f      	movs	r2, #31
 8002d52:	4013      	ands	r3, r2
 8002d54:	40dc      	lsrs	r4, r3
 8002d56:	0023      	movs	r3, r4
}
 8002d58:	0018      	movs	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	08005dc8 	.word	0x08005dc8

08002d64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002d6c:	2313      	movs	r3, #19
 8002d6e:	18fb      	adds	r3, r7, r3
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d74:	2312      	movs	r3, #18
 8002d76:	18fb      	adds	r3, r7, r3
 8002d78:	2200      	movs	r2, #0
 8002d7a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	2380      	movs	r3, #128	; 0x80
 8002d82:	029b      	lsls	r3, r3, #10
 8002d84:	4013      	ands	r3, r2
 8002d86:	d100      	bne.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002d88:	e0a3      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d8a:	2011      	movs	r0, #17
 8002d8c:	183b      	adds	r3, r7, r0
 8002d8e:	2200      	movs	r2, #0
 8002d90:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d92:	4bc3      	ldr	r3, [pc, #780]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d96:	2380      	movs	r3, #128	; 0x80
 8002d98:	055b      	lsls	r3, r3, #21
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d110      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d9e:	4bc0      	ldr	r3, [pc, #768]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002da0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002da2:	4bbf      	ldr	r3, [pc, #764]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002da4:	2180      	movs	r1, #128	; 0x80
 8002da6:	0549      	lsls	r1, r1, #21
 8002da8:	430a      	orrs	r2, r1
 8002daa:	63da      	str	r2, [r3, #60]	; 0x3c
 8002dac:	4bbc      	ldr	r3, [pc, #752]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002db0:	2380      	movs	r3, #128	; 0x80
 8002db2:	055b      	lsls	r3, r3, #21
 8002db4:	4013      	ands	r3, r2
 8002db6:	60bb      	str	r3, [r7, #8]
 8002db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dba:	183b      	adds	r3, r7, r0
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dc0:	4bb8      	ldr	r3, [pc, #736]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	4bb7      	ldr	r3, [pc, #732]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002dc6:	2180      	movs	r1, #128	; 0x80
 8002dc8:	0049      	lsls	r1, r1, #1
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dce:	f7fe fa57 	bl	8001280 <HAL_GetTick>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dd6:	e00b      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd8:	f7fe fa52 	bl	8001280 <HAL_GetTick>
 8002ddc:	0002      	movs	r2, r0
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d904      	bls.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002de6:	2313      	movs	r3, #19
 8002de8:	18fb      	adds	r3, r7, r3
 8002dea:	2203      	movs	r2, #3
 8002dec:	701a      	strb	r2, [r3, #0]
        break;
 8002dee:	e005      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002df0:	4bac      	ldr	r3, [pc, #688]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d0ed      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002dfc:	2313      	movs	r3, #19
 8002dfe:	18fb      	adds	r3, r7, r3
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d154      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e06:	4ba6      	ldr	r3, [pc, #664]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e0a:	23c0      	movs	r3, #192	; 0xc0
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4013      	ands	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d019      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d014      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e22:	4b9f      	ldr	r3, [pc, #636]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e26:	4aa0      	ldr	r2, [pc, #640]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e2c:	4b9c      	ldr	r3, [pc, #624]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e30:	4b9b      	ldr	r3, [pc, #620]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e32:	2180      	movs	r1, #128	; 0x80
 8002e34:	0249      	lsls	r1, r1, #9
 8002e36:	430a      	orrs	r2, r1
 8002e38:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e3a:	4b99      	ldr	r3, [pc, #612]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e3e:	4b98      	ldr	r3, [pc, #608]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e40:	499a      	ldr	r1, [pc, #616]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002e42:	400a      	ands	r2, r1
 8002e44:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e46:	4b96      	ldr	r3, [pc, #600]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	4013      	ands	r3, r2
 8002e52:	d016      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e54:	f7fe fa14 	bl	8001280 <HAL_GetTick>
 8002e58:	0003      	movs	r3, r0
 8002e5a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e5c:	e00c      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5e:	f7fe fa0f 	bl	8001280 <HAL_GetTick>
 8002e62:	0002      	movs	r2, r0
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	4a91      	ldr	r2, [pc, #580]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d904      	bls.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002e6e:	2313      	movs	r3, #19
 8002e70:	18fb      	adds	r3, r7, r3
 8002e72:	2203      	movs	r2, #3
 8002e74:	701a      	strb	r2, [r3, #0]
            break;
 8002e76:	e004      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e78:	4b89      	ldr	r3, [pc, #548]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d0ed      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002e82:	2313      	movs	r3, #19
 8002e84:	18fb      	adds	r3, r7, r3
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10a      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e8c:	4b84      	ldr	r3, [pc, #528]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e90:	4a85      	ldr	r2, [pc, #532]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	0019      	movs	r1, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e9a:	4b81      	ldr	r3, [pc, #516]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ea0:	e00c      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ea2:	2312      	movs	r3, #18
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	2213      	movs	r2, #19
 8002ea8:	18ba      	adds	r2, r7, r2
 8002eaa:	7812      	ldrb	r2, [r2, #0]
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	e005      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb0:	2312      	movs	r3, #18
 8002eb2:	18fb      	adds	r3, r7, r3
 8002eb4:	2213      	movs	r2, #19
 8002eb6:	18ba      	adds	r2, r7, r2
 8002eb8:	7812      	ldrb	r2, [r2, #0]
 8002eba:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ebc:	2311      	movs	r3, #17
 8002ebe:	18fb      	adds	r3, r7, r3
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d105      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec6:	4b76      	ldr	r3, [pc, #472]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ec8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002eca:	4b75      	ldr	r3, [pc, #468]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ecc:	4979      	ldr	r1, [pc, #484]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002ece:	400a      	ands	r2, r1
 8002ed0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d009      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002edc:	4b70      	ldr	r3, [pc, #448]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	4393      	bics	r3, r2
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	4b6d      	ldr	r3, [pc, #436]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eec:	430a      	orrs	r2, r1
 8002eee:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d009      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002efa:	4b69      	ldr	r3, [pc, #420]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efe:	220c      	movs	r2, #12
 8002f00:	4393      	bics	r3, r2
 8002f02:	0019      	movs	r1, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	4b65      	ldr	r3, [pc, #404]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2210      	movs	r2, #16
 8002f14:	4013      	ands	r3, r2
 8002f16:	d009      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f18:	4b61      	ldr	r3, [pc, #388]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1c:	4a66      	ldr	r2, [pc, #408]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002f1e:	4013      	ands	r3, r2
 8002f20:	0019      	movs	r1, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	4b5e      	ldr	r3, [pc, #376]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	2380      	movs	r3, #128	; 0x80
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4013      	ands	r3, r2
 8002f36:	d009      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f38:	4b59      	ldr	r3, [pc, #356]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3c:	4a5f      	ldr	r2, [pc, #380]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f3e:	4013      	ands	r3, r2
 8002f40:	0019      	movs	r1, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699a      	ldr	r2, [r3, #24]
 8002f46:	4b56      	ldr	r3, [pc, #344]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	2380      	movs	r3, #128	; 0x80
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4013      	ands	r3, r2
 8002f56:	d009      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f58:	4b51      	ldr	r3, [pc, #324]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5c:	4a58      	ldr	r2, [pc, #352]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f5e:	4013      	ands	r3, r2
 8002f60:	0019      	movs	r1, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69da      	ldr	r2, [r3, #28]
 8002f66:	4b4e      	ldr	r3, [pc, #312]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2220      	movs	r2, #32
 8002f72:	4013      	ands	r3, r2
 8002f74:	d009      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f76:	4b4a      	ldr	r3, [pc, #296]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7a:	4a52      	ldr	r2, [pc, #328]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	0019      	movs	r1, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	4b46      	ldr	r3, [pc, #280]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f86:	430a      	orrs	r2, r1
 8002f88:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	2380      	movs	r3, #128	; 0x80
 8002f90:	01db      	lsls	r3, r3, #7
 8002f92:	4013      	ands	r3, r2
 8002f94:	d015      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f96:	4b42      	ldr	r3, [pc, #264]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	0899      	lsrs	r1, r3, #2
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1a      	ldr	r2, [r3, #32]
 8002fa2:	4b3f      	ldr	r3, [pc, #252]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1a      	ldr	r2, [r3, #32]
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	05db      	lsls	r3, r3, #23
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d106      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002fb4:	4b3a      	ldr	r3, [pc, #232]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fb6:	68da      	ldr	r2, [r3, #12]
 8002fb8:	4b39      	ldr	r3, [pc, #228]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fba:	2180      	movs	r1, #128	; 0x80
 8002fbc:	0249      	lsls	r1, r1, #9
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	2380      	movs	r3, #128	; 0x80
 8002fc8:	031b      	lsls	r3, r3, #12
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d009      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fce:	4b34      	ldr	r3, [pc, #208]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd2:	2240      	movs	r2, #64	; 0x40
 8002fd4:	4393      	bics	r3, r2
 8002fd6:	0019      	movs	r1, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fdc:	4b30      	ldr	r3, [pc, #192]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	2380      	movs	r3, #128	; 0x80
 8002fe8:	039b      	lsls	r3, r3, #14
 8002fea:	4013      	ands	r3, r2
 8002fec:	d016      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002fee:	4b2c      	ldr	r3, [pc, #176]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff2:	4a35      	ldr	r2, [pc, #212]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	0019      	movs	r1, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ffc:	4b28      	ldr	r3, [pc, #160]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ffe:	430a      	orrs	r2, r1
 8003000:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003006:	2380      	movs	r3, #128	; 0x80
 8003008:	03db      	lsls	r3, r3, #15
 800300a:	429a      	cmp	r2, r3
 800300c:	d106      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800300e:	4b24      	ldr	r3, [pc, #144]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	4b23      	ldr	r3, [pc, #140]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003014:	2180      	movs	r1, #128	; 0x80
 8003016:	0449      	lsls	r1, r1, #17
 8003018:	430a      	orrs	r2, r1
 800301a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	2380      	movs	r3, #128	; 0x80
 8003022:	03db      	lsls	r3, r3, #15
 8003024:	4013      	ands	r3, r2
 8003026:	d016      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003028:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800302a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302c:	4a27      	ldr	r2, [pc, #156]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800302e:	4013      	ands	r3, r2
 8003030:	0019      	movs	r1, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003036:	4b1a      	ldr	r3, [pc, #104]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003038:	430a      	orrs	r2, r1
 800303a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003040:	2380      	movs	r3, #128	; 0x80
 8003042:	045b      	lsls	r3, r3, #17
 8003044:	429a      	cmp	r2, r3
 8003046:	d106      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003048:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800304e:	2180      	movs	r1, #128	; 0x80
 8003050:	0449      	lsls	r1, r1, #17
 8003052:	430a      	orrs	r2, r1
 8003054:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	2380      	movs	r3, #128	; 0x80
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	4013      	ands	r3, r2
 8003060:	d016      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003062:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003066:	4a1a      	ldr	r2, [pc, #104]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003068:	4013      	ands	r3, r2
 800306a:	0019      	movs	r1, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	695a      	ldr	r2, [r3, #20]
 8003070:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003072:	430a      	orrs	r2, r1
 8003074:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695a      	ldr	r2, [r3, #20]
 800307a:	2380      	movs	r3, #128	; 0x80
 800307c:	01db      	lsls	r3, r3, #7
 800307e:	429a      	cmp	r2, r3
 8003080:	d106      	bne.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003082:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003088:	2180      	movs	r1, #128	; 0x80
 800308a:	0249      	lsls	r1, r1, #9
 800308c:	430a      	orrs	r2, r1
 800308e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003090:	2312      	movs	r3, #18
 8003092:	18fb      	adds	r3, r7, r3
 8003094:	781b      	ldrb	r3, [r3, #0]
}
 8003096:	0018      	movs	r0, r3
 8003098:	46bd      	mov	sp, r7
 800309a:	b006      	add	sp, #24
 800309c:	bd80      	pop	{r7, pc}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40007000 	.word	0x40007000
 80030a8:	fffffcff 	.word	0xfffffcff
 80030ac:	fffeffff 	.word	0xfffeffff
 80030b0:	00001388 	.word	0x00001388
 80030b4:	efffffff 	.word	0xefffffff
 80030b8:	fffff3ff 	.word	0xfffff3ff
 80030bc:	fff3ffff 	.word	0xfff3ffff
 80030c0:	ffcfffff 	.word	0xffcfffff
 80030c4:	ffffcfff 	.word	0xffffcfff
 80030c8:	ffbfffff 	.word	0xffbfffff
 80030cc:	feffffff 	.word	0xfeffffff
 80030d0:	ffff3fff 	.word	0xffff3fff

080030d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e0a8      	b.n	8003238 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	2382      	movs	r3, #130	; 0x82
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d009      	beq.n	800310e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	61da      	str	r2, [r3, #28]
 8003100:	e005      	b.n	800310e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	225d      	movs	r2, #93	; 0x5d
 8003118:	5c9b      	ldrb	r3, [r3, r2]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d107      	bne.n	8003130 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	225c      	movs	r2, #92	; 0x5c
 8003124:	2100      	movs	r1, #0
 8003126:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	0018      	movs	r0, r3
 800312c:	f7fd fe88 	bl	8000e40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	225d      	movs	r2, #93	; 0x5d
 8003134:	2102      	movs	r1, #2
 8003136:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2140      	movs	r1, #64	; 0x40
 8003144:	438a      	bics	r2, r1
 8003146:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	23e0      	movs	r3, #224	; 0xe0
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	429a      	cmp	r2, r3
 8003152:	d902      	bls.n	800315a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	e002      	b.n	8003160 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800315a:	2380      	movs	r3, #128	; 0x80
 800315c:	015b      	lsls	r3, r3, #5
 800315e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	23f0      	movs	r3, #240	; 0xf0
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	429a      	cmp	r2, r3
 800316a:	d008      	beq.n	800317e <HAL_SPI_Init+0xaa>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	23e0      	movs	r3, #224	; 0xe0
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	429a      	cmp	r2, r3
 8003176:	d002      	beq.n	800317e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	2382      	movs	r3, #130	; 0x82
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	401a      	ands	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6899      	ldr	r1, [r3, #8]
 800318c:	2384      	movs	r3, #132	; 0x84
 800318e:	021b      	lsls	r3, r3, #8
 8003190:	400b      	ands	r3, r1
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	2102      	movs	r1, #2
 800319a:	400b      	ands	r3, r1
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	2101      	movs	r1, #1
 80031a4:	400b      	ands	r3, r1
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6999      	ldr	r1, [r3, #24]
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	400b      	ands	r3, r1
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	2138      	movs	r1, #56	; 0x38
 80031ba:	400b      	ands	r3, r1
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	2180      	movs	r1, #128	; 0x80
 80031c4:	400b      	ands	r3, r1
 80031c6:	431a      	orrs	r2, r3
 80031c8:	0011      	movs	r1, r2
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ce:	2380      	movs	r3, #128	; 0x80
 80031d0:	019b      	lsls	r3, r3, #6
 80031d2:	401a      	ands	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	0c1b      	lsrs	r3, r3, #16
 80031e2:	2204      	movs	r2, #4
 80031e4:	401a      	ands	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	2110      	movs	r1, #16
 80031ec:	400b      	ands	r3, r1
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f4:	2108      	movs	r1, #8
 80031f6:	400b      	ands	r3, r1
 80031f8:	431a      	orrs	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68d9      	ldr	r1, [r3, #12]
 80031fe:	23f0      	movs	r3, #240	; 0xf0
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	400b      	ands	r3, r1
 8003204:	431a      	orrs	r2, r3
 8003206:	0011      	movs	r1, r2
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	2380      	movs	r3, #128	; 0x80
 800320c:	015b      	lsls	r3, r3, #5
 800320e:	401a      	ands	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	69da      	ldr	r2, [r3, #28]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4907      	ldr	r1, [pc, #28]	; (8003240 <HAL_SPI_Init+0x16c>)
 8003224:	400a      	ands	r2, r1
 8003226:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	225d      	movs	r2, #93	; 0x5d
 8003232:	2101      	movs	r1, #1
 8003234:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	0018      	movs	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	b004      	add	sp, #16
 800323e:	bd80      	pop	{r7, pc}
 8003240:	fffff7ff 	.word	0xfffff7ff

08003244 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	099b      	lsrs	r3, r3, #6
 8003260:	001a      	movs	r2, r3
 8003262:	2301      	movs	r3, #1
 8003264:	4013      	ands	r3, r2
 8003266:	d10f      	bne.n	8003288 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	2201      	movs	r2, #1
 800326c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800326e:	d00b      	beq.n	8003288 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	099b      	lsrs	r3, r3, #6
 8003274:	001a      	movs	r2, r3
 8003276:	2301      	movs	r3, #1
 8003278:	4013      	ands	r3, r2
 800327a:	d005      	beq.n	8003288 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	0010      	movs	r0, r2
 8003284:	4798      	blx	r3
    return;
 8003286:	e0d5      	b.n	8003434 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	085b      	lsrs	r3, r3, #1
 800328c:	001a      	movs	r2, r3
 800328e:	2301      	movs	r3, #1
 8003290:	4013      	ands	r3, r2
 8003292:	d00b      	beq.n	80032ac <HAL_SPI_IRQHandler+0x68>
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	09db      	lsrs	r3, r3, #7
 8003298:	001a      	movs	r2, r3
 800329a:	2301      	movs	r3, #1
 800329c:	4013      	ands	r3, r2
 800329e:	d005      	beq.n	80032ac <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	0010      	movs	r0, r2
 80032a8:	4798      	blx	r3
    return;
 80032aa:	e0c3      	b.n	8003434 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	001a      	movs	r2, r3
 80032b2:	2301      	movs	r3, #1
 80032b4:	4013      	ands	r3, r2
 80032b6:	d10c      	bne.n	80032d2 <HAL_SPI_IRQHandler+0x8e>
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	099b      	lsrs	r3, r3, #6
 80032bc:	001a      	movs	r2, r3
 80032be:	2301      	movs	r3, #1
 80032c0:	4013      	ands	r3, r2
 80032c2:	d106      	bne.n	80032d2 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	0a1b      	lsrs	r3, r3, #8
 80032c8:	001a      	movs	r2, r3
 80032ca:	2301      	movs	r3, #1
 80032cc:	4013      	ands	r3, r2
 80032ce:	d100      	bne.n	80032d2 <HAL_SPI_IRQHandler+0x8e>
 80032d0:	e0b0      	b.n	8003434 <HAL_SPI_IRQHandler+0x1f0>
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	095b      	lsrs	r3, r3, #5
 80032d6:	001a      	movs	r2, r3
 80032d8:	2301      	movs	r3, #1
 80032da:	4013      	ands	r3, r2
 80032dc:	d100      	bne.n	80032e0 <HAL_SPI_IRQHandler+0x9c>
 80032de:	e0a9      	b.n	8003434 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	099b      	lsrs	r3, r3, #6
 80032e4:	001a      	movs	r2, r3
 80032e6:	2301      	movs	r3, #1
 80032e8:	4013      	ands	r3, r2
 80032ea:	d023      	beq.n	8003334 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	225d      	movs	r2, #93	; 0x5d
 80032f0:	5c9b      	ldrb	r3, [r3, r2]
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b03      	cmp	r3, #3
 80032f6:	d011      	beq.n	800331c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032fc:	2204      	movs	r2, #4
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	e00b      	b.n	8003334 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800331c:	2300      	movs	r3, #0
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	613b      	str	r3, [r7, #16]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	693b      	ldr	r3, [r7, #16]
        return;
 8003332:	e07f      	b.n	8003434 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	001a      	movs	r2, r3
 800333a:	2301      	movs	r3, #1
 800333c:	4013      	ands	r3, r2
 800333e:	d014      	beq.n	800336a <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003344:	2201      	movs	r2, #1
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2140      	movs	r1, #64	; 0x40
 8003364:	438a      	bics	r2, r1
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	0a1b      	lsrs	r3, r3, #8
 800336e:	001a      	movs	r2, r3
 8003370:	2301      	movs	r3, #1
 8003372:	4013      	ands	r3, r2
 8003374:	d00c      	beq.n	8003390 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800337a:	2208      	movs	r2, #8
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003382:	2300      	movs	r3, #0
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003394:	2b00      	cmp	r3, #0
 8003396:	d04c      	beq.n	8003432 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	21e0      	movs	r1, #224	; 0xe0
 80033a4:	438a      	bics	r2, r1
 80033a6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	225d      	movs	r2, #93	; 0x5d
 80033ac:	2101      	movs	r1, #1
 80033ae:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	2202      	movs	r2, #2
 80033b4:	4013      	ands	r3, r2
 80033b6:	d103      	bne.n	80033c0 <HAL_SPI_IRQHandler+0x17c>
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	2201      	movs	r2, #1
 80033bc:	4013      	ands	r3, r2
 80033be:	d032      	beq.n	8003426 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2103      	movs	r1, #3
 80033cc:	438a      	bics	r2, r1
 80033ce:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d010      	beq.n	80033fa <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033dc:	4a17      	ldr	r2, [pc, #92]	; (800343c <HAL_SPI_IRQHandler+0x1f8>)
 80033de:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e4:	0018      	movs	r0, r3
 80033e6:	f7fe fd6d 	bl	8001ec4 <HAL_DMA_Abort_IT>
 80033ea:	1e03      	subs	r3, r0, #0
 80033ec:	d005      	beq.n	80033fa <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f2:	2240      	movs	r2, #64	; 0x40
 80033f4:	431a      	orrs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d016      	beq.n	8003430 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003406:	4a0d      	ldr	r2, [pc, #52]	; (800343c <HAL_SPI_IRQHandler+0x1f8>)
 8003408:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340e:	0018      	movs	r0, r3
 8003410:	f7fe fd58 	bl	8001ec4 <HAL_DMA_Abort_IT>
 8003414:	1e03      	subs	r3, r0, #0
 8003416:	d00b      	beq.n	8003430 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800341c:	2240      	movs	r2, #64	; 0x40
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003424:	e004      	b.n	8003430 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	0018      	movs	r0, r3
 800342a:	f000 f809 	bl	8003440 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800342e:	e000      	b.n	8003432 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8003430:	46c0      	nop			; (mov r8, r8)
    return;
 8003432:	46c0      	nop			; (mov r8, r8)
  }
}
 8003434:	46bd      	mov	sp, r7
 8003436:	b008      	add	sp, #32
 8003438:	bd80      	pop	{r7, pc}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	08003451 	.word	0x08003451

08003440 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003448:	46c0      	nop			; (mov r8, r8)
 800344a:	46bd      	mov	sp, r7
 800344c:	b002      	add	sp, #8
 800344e:	bd80      	pop	{r7, pc}

08003450 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2246      	movs	r2, #70	; 0x46
 8003462:	2100      	movs	r1, #0
 8003464:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	0018      	movs	r0, r3
 8003470:	f7ff ffe6 	bl	8003440 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003474:	46c0      	nop			; (mov r8, r8)
 8003476:	46bd      	mov	sp, r7
 8003478:	b004      	add	sp, #16
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e04a      	b.n	8003524 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	223d      	movs	r2, #61	; 0x3d
 8003492:	5c9b      	ldrb	r3, [r3, r2]
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d107      	bne.n	80034aa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	223c      	movs	r2, #60	; 0x3c
 800349e:	2100      	movs	r1, #0
 80034a0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	0018      	movs	r0, r3
 80034a6:	f7fd fd1d 	bl	8000ee4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	223d      	movs	r2, #61	; 0x3d
 80034ae:	2102      	movs	r1, #2
 80034b0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3304      	adds	r3, #4
 80034ba:	0019      	movs	r1, r3
 80034bc:	0010      	movs	r0, r2
 80034be:	f000 faaf 	bl	8003a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2248      	movs	r2, #72	; 0x48
 80034c6:	2101      	movs	r1, #1
 80034c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	223e      	movs	r2, #62	; 0x3e
 80034ce:	2101      	movs	r1, #1
 80034d0:	5499      	strb	r1, [r3, r2]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	223f      	movs	r2, #63	; 0x3f
 80034d6:	2101      	movs	r1, #1
 80034d8:	5499      	strb	r1, [r3, r2]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2240      	movs	r2, #64	; 0x40
 80034de:	2101      	movs	r1, #1
 80034e0:	5499      	strb	r1, [r3, r2]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2241      	movs	r2, #65	; 0x41
 80034e6:	2101      	movs	r1, #1
 80034e8:	5499      	strb	r1, [r3, r2]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2242      	movs	r2, #66	; 0x42
 80034ee:	2101      	movs	r1, #1
 80034f0:	5499      	strb	r1, [r3, r2]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2243      	movs	r2, #67	; 0x43
 80034f6:	2101      	movs	r1, #1
 80034f8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2244      	movs	r2, #68	; 0x44
 80034fe:	2101      	movs	r1, #1
 8003500:	5499      	strb	r1, [r3, r2]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2245      	movs	r2, #69	; 0x45
 8003506:	2101      	movs	r1, #1
 8003508:	5499      	strb	r1, [r3, r2]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2246      	movs	r2, #70	; 0x46
 800350e:	2101      	movs	r1, #1
 8003510:	5499      	strb	r1, [r3, r2]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2247      	movs	r2, #71	; 0x47
 8003516:	2101      	movs	r1, #1
 8003518:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	223d      	movs	r2, #61	; 0x3d
 800351e:	2101      	movs	r1, #1
 8003520:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	0018      	movs	r0, r3
 8003526:	46bd      	mov	sp, r7
 8003528:	b002      	add	sp, #8
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	223d      	movs	r2, #61	; 0x3d
 8003538:	5c9b      	ldrb	r3, [r3, r2]
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b01      	cmp	r3, #1
 800353e:	d001      	beq.n	8003544 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e042      	b.n	80035ca <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	223d      	movs	r2, #61	; 0x3d
 8003548:	2102      	movs	r1, #2
 800354a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2101      	movs	r1, #1
 8003558:	430a      	orrs	r2, r1
 800355a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a1c      	ldr	r2, [pc, #112]	; (80035d4 <HAL_TIM_Base_Start_IT+0xa8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00f      	beq.n	8003586 <HAL_TIM_Base_Start_IT+0x5a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	2380      	movs	r3, #128	; 0x80
 800356c:	05db      	lsls	r3, r3, #23
 800356e:	429a      	cmp	r2, r3
 8003570:	d009      	beq.n	8003586 <HAL_TIM_Base_Start_IT+0x5a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a18      	ldr	r2, [pc, #96]	; (80035d8 <HAL_TIM_Base_Start_IT+0xac>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d004      	beq.n	8003586 <HAL_TIM_Base_Start_IT+0x5a>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a16      	ldr	r2, [pc, #88]	; (80035dc <HAL_TIM_Base_Start_IT+0xb0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d116      	bne.n	80035b4 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	4a14      	ldr	r2, [pc, #80]	; (80035e0 <HAL_TIM_Base_Start_IT+0xb4>)
 800358e:	4013      	ands	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2b06      	cmp	r3, #6
 8003596:	d016      	beq.n	80035c6 <HAL_TIM_Base_Start_IT+0x9a>
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	2380      	movs	r3, #128	; 0x80
 800359c:	025b      	lsls	r3, r3, #9
 800359e:	429a      	cmp	r2, r3
 80035a0:	d011      	beq.n	80035c6 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2101      	movs	r1, #1
 80035ae:	430a      	orrs	r2, r1
 80035b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b2:	e008      	b.n	80035c6 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2101      	movs	r1, #1
 80035c0:	430a      	orrs	r2, r1
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	e000      	b.n	80035c8 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	0018      	movs	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b004      	add	sp, #16
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	40012c00 	.word	0x40012c00
 80035d8:	40000400 	.word	0x40000400
 80035dc:	40014000 	.word	0x40014000
 80035e0:	00010007 	.word	0x00010007

080035e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	2202      	movs	r2, #2
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d124      	bne.n	8003644 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	2202      	movs	r2, #2
 8003602:	4013      	ands	r3, r2
 8003604:	2b02      	cmp	r3, #2
 8003606:	d11d      	bne.n	8003644 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2203      	movs	r2, #3
 800360e:	4252      	negs	r2, r2
 8003610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	2203      	movs	r2, #3
 8003620:	4013      	ands	r3, r2
 8003622:	d004      	beq.n	800362e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	0018      	movs	r0, r3
 8003628:	f000 f9e2 	bl	80039f0 <HAL_TIM_IC_CaptureCallback>
 800362c:	e007      	b.n	800363e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	0018      	movs	r0, r3
 8003632:	f000 f9d5 	bl	80039e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	0018      	movs	r0, r3
 800363a:	f000 f9e1 	bl	8003a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2204      	movs	r2, #4
 800364c:	4013      	ands	r3, r2
 800364e:	2b04      	cmp	r3, #4
 8003650:	d125      	bne.n	800369e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	2204      	movs	r2, #4
 800365a:	4013      	ands	r3, r2
 800365c:	2b04      	cmp	r3, #4
 800365e:	d11e      	bne.n	800369e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2205      	movs	r2, #5
 8003666:	4252      	negs	r2, r2
 8003668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2202      	movs	r2, #2
 800366e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699a      	ldr	r2, [r3, #24]
 8003676:	23c0      	movs	r3, #192	; 0xc0
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4013      	ands	r3, r2
 800367c:	d004      	beq.n	8003688 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	0018      	movs	r0, r3
 8003682:	f000 f9b5 	bl	80039f0 <HAL_TIM_IC_CaptureCallback>
 8003686:	e007      	b.n	8003698 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	0018      	movs	r0, r3
 800368c:	f000 f9a8 	bl	80039e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	0018      	movs	r0, r3
 8003694:	f000 f9b4 	bl	8003a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	2208      	movs	r2, #8
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d124      	bne.n	80036f6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	2208      	movs	r2, #8
 80036b4:	4013      	ands	r3, r2
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d11d      	bne.n	80036f6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2209      	movs	r2, #9
 80036c0:	4252      	negs	r2, r2
 80036c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2204      	movs	r2, #4
 80036c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	2203      	movs	r2, #3
 80036d2:	4013      	ands	r3, r2
 80036d4:	d004      	beq.n	80036e0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	0018      	movs	r0, r3
 80036da:	f000 f989 	bl	80039f0 <HAL_TIM_IC_CaptureCallback>
 80036de:	e007      	b.n	80036f0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	0018      	movs	r0, r3
 80036e4:	f000 f97c 	bl	80039e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f000 f988 	bl	8003a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	2210      	movs	r2, #16
 80036fe:	4013      	ands	r3, r2
 8003700:	2b10      	cmp	r3, #16
 8003702:	d125      	bne.n	8003750 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	2210      	movs	r2, #16
 800370c:	4013      	ands	r3, r2
 800370e:	2b10      	cmp	r3, #16
 8003710:	d11e      	bne.n	8003750 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2211      	movs	r2, #17
 8003718:	4252      	negs	r2, r2
 800371a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2208      	movs	r2, #8
 8003720:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	69da      	ldr	r2, [r3, #28]
 8003728:	23c0      	movs	r3, #192	; 0xc0
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4013      	ands	r3, r2
 800372e:	d004      	beq.n	800373a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	0018      	movs	r0, r3
 8003734:	f000 f95c 	bl	80039f0 <HAL_TIM_IC_CaptureCallback>
 8003738:	e007      	b.n	800374a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	0018      	movs	r0, r3
 800373e:	f000 f94f 	bl	80039e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	0018      	movs	r0, r3
 8003746:	f000 f95b 	bl	8003a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	2201      	movs	r2, #1
 8003758:	4013      	ands	r3, r2
 800375a:	2b01      	cmp	r3, #1
 800375c:	d10f      	bne.n	800377e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	2201      	movs	r2, #1
 8003766:	4013      	ands	r3, r2
 8003768:	2b01      	cmp	r3, #1
 800376a:	d108      	bne.n	800377e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2202      	movs	r2, #2
 8003772:	4252      	negs	r2, r2
 8003774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	0018      	movs	r0, r3
 800377a:	f7fd fab3 	bl	8000ce4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	2280      	movs	r2, #128	; 0x80
 8003786:	4013      	ands	r3, r2
 8003788:	2b80      	cmp	r3, #128	; 0x80
 800378a:	d10f      	bne.n	80037ac <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	2280      	movs	r2, #128	; 0x80
 8003794:	4013      	ands	r3, r2
 8003796:	2b80      	cmp	r3, #128	; 0x80
 8003798:	d108      	bne.n	80037ac <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2281      	movs	r2, #129	; 0x81
 80037a0:	4252      	negs	r2, r2
 80037a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	0018      	movs	r0, r3
 80037a8:	f000 facc 	bl	8003d44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	2380      	movs	r3, #128	; 0x80
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	401a      	ands	r2, r3
 80037b8:	2380      	movs	r3, #128	; 0x80
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	429a      	cmp	r2, r3
 80037be:	d10e      	bne.n	80037de <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2280      	movs	r2, #128	; 0x80
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b80      	cmp	r3, #128	; 0x80
 80037cc:	d107      	bne.n	80037de <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a1c      	ldr	r2, [pc, #112]	; (8003844 <HAL_TIM_IRQHandler+0x260>)
 80037d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	0018      	movs	r0, r3
 80037da:	f000 fabb 	bl	8003d54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	2240      	movs	r2, #64	; 0x40
 80037e6:	4013      	ands	r3, r2
 80037e8:	2b40      	cmp	r3, #64	; 0x40
 80037ea:	d10f      	bne.n	800380c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	2240      	movs	r2, #64	; 0x40
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b40      	cmp	r3, #64	; 0x40
 80037f8:	d108      	bne.n	800380c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2241      	movs	r2, #65	; 0x41
 8003800:	4252      	negs	r2, r2
 8003802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	0018      	movs	r0, r3
 8003808:	f000 f902 	bl	8003a10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	2220      	movs	r2, #32
 8003814:	4013      	ands	r3, r2
 8003816:	2b20      	cmp	r3, #32
 8003818:	d10f      	bne.n	800383a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	2220      	movs	r2, #32
 8003822:	4013      	ands	r3, r2
 8003824:	2b20      	cmp	r3, #32
 8003826:	d108      	bne.n	800383a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2221      	movs	r2, #33	; 0x21
 800382e:	4252      	negs	r2, r2
 8003830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	0018      	movs	r0, r3
 8003836:	f000 fa7d 	bl	8003d34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	46bd      	mov	sp, r7
 800383e:	b002      	add	sp, #8
 8003840:	bd80      	pop	{r7, pc}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	fffffeff 	.word	0xfffffeff

08003848 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	223c      	movs	r2, #60	; 0x3c
 8003856:	5c9b      	ldrb	r3, [r3, r2]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <HAL_TIM_ConfigClockSource+0x18>
 800385c:	2302      	movs	r3, #2
 800385e:	e0b7      	b.n	80039d0 <HAL_TIM_ConfigClockSource+0x188>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	223c      	movs	r2, #60	; 0x3c
 8003864:	2101      	movs	r1, #1
 8003866:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	223d      	movs	r2, #61	; 0x3d
 800386c:	2102      	movs	r1, #2
 800386e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4a57      	ldr	r2, [pc, #348]	; (80039d8 <HAL_TIM_ConfigClockSource+0x190>)
 800387c:	4013      	ands	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4a56      	ldr	r2, [pc, #344]	; (80039dc <HAL_TIM_ConfigClockSource+0x194>)
 8003884:	4013      	ands	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2280      	movs	r2, #128	; 0x80
 8003896:	0192      	lsls	r2, r2, #6
 8003898:	4293      	cmp	r3, r2
 800389a:	d040      	beq.n	800391e <HAL_TIM_ConfigClockSource+0xd6>
 800389c:	2280      	movs	r2, #128	; 0x80
 800389e:	0192      	lsls	r2, r2, #6
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d900      	bls.n	80038a6 <HAL_TIM_ConfigClockSource+0x5e>
 80038a4:	e088      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x170>
 80038a6:	2280      	movs	r2, #128	; 0x80
 80038a8:	0152      	lsls	r2, r2, #5
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d100      	bne.n	80038b0 <HAL_TIM_ConfigClockSource+0x68>
 80038ae:	e085      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>
 80038b0:	2280      	movs	r2, #128	; 0x80
 80038b2:	0152      	lsls	r2, r2, #5
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d900      	bls.n	80038ba <HAL_TIM_ConfigClockSource+0x72>
 80038b8:	e07e      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x170>
 80038ba:	2b70      	cmp	r3, #112	; 0x70
 80038bc:	d018      	beq.n	80038f0 <HAL_TIM_ConfigClockSource+0xa8>
 80038be:	d900      	bls.n	80038c2 <HAL_TIM_ConfigClockSource+0x7a>
 80038c0:	e07a      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x170>
 80038c2:	2b60      	cmp	r3, #96	; 0x60
 80038c4:	d04f      	beq.n	8003966 <HAL_TIM_ConfigClockSource+0x11e>
 80038c6:	d900      	bls.n	80038ca <HAL_TIM_ConfigClockSource+0x82>
 80038c8:	e076      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x170>
 80038ca:	2b50      	cmp	r3, #80	; 0x50
 80038cc:	d03b      	beq.n	8003946 <HAL_TIM_ConfigClockSource+0xfe>
 80038ce:	d900      	bls.n	80038d2 <HAL_TIM_ConfigClockSource+0x8a>
 80038d0:	e072      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x170>
 80038d2:	2b40      	cmp	r3, #64	; 0x40
 80038d4:	d057      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x13e>
 80038d6:	d900      	bls.n	80038da <HAL_TIM_ConfigClockSource+0x92>
 80038d8:	e06e      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x170>
 80038da:	2b30      	cmp	r3, #48	; 0x30
 80038dc:	d063      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0x15e>
 80038de:	d86b      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x170>
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	d060      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0x15e>
 80038e4:	d868      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x170>
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d05d      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0x15e>
 80038ea:	2b10      	cmp	r3, #16
 80038ec:	d05b      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80038ee:	e063      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	6899      	ldr	r1, [r3, #8]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f000 f98a 	bl	8003c18 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2277      	movs	r2, #119	; 0x77
 8003910:	4313      	orrs	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	609a      	str	r2, [r3, #8]
      break;
 800391c:	e04f      	b.n	80039be <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6818      	ldr	r0, [r3, #0]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	6899      	ldr	r1, [r3, #8]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f000 f973 	bl	8003c18 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2180      	movs	r1, #128	; 0x80
 800393e:	01c9      	lsls	r1, r1, #7
 8003940:	430a      	orrs	r2, r1
 8003942:	609a      	str	r2, [r3, #8]
      break;
 8003944:	e03b      	b.n	80039be <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6818      	ldr	r0, [r3, #0]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	6859      	ldr	r1, [r3, #4]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	001a      	movs	r2, r3
 8003954:	f000 f8e4 	bl	8003b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2150      	movs	r1, #80	; 0x50
 800395e:	0018      	movs	r0, r3
 8003960:	f000 f93e 	bl	8003be0 <TIM_ITRx_SetConfig>
      break;
 8003964:	e02b      	b.n	80039be <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6818      	ldr	r0, [r3, #0]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	6859      	ldr	r1, [r3, #4]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	001a      	movs	r2, r3
 8003974:	f000 f902 	bl	8003b7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2160      	movs	r1, #96	; 0x60
 800397e:	0018      	movs	r0, r3
 8003980:	f000 f92e 	bl	8003be0 <TIM_ITRx_SetConfig>
      break;
 8003984:	e01b      	b.n	80039be <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	6859      	ldr	r1, [r3, #4]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	001a      	movs	r2, r3
 8003994:	f000 f8c4 	bl	8003b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2140      	movs	r1, #64	; 0x40
 800399e:	0018      	movs	r0, r3
 80039a0:	f000 f91e 	bl	8003be0 <TIM_ITRx_SetConfig>
      break;
 80039a4:	e00b      	b.n	80039be <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	0019      	movs	r1, r3
 80039b0:	0010      	movs	r0, r2
 80039b2:	f000 f915 	bl	8003be0 <TIM_ITRx_SetConfig>
        break;
 80039b6:	e002      	b.n	80039be <HAL_TIM_ConfigClockSource+0x176>
      break;
 80039b8:	46c0      	nop			; (mov r8, r8)
 80039ba:	e000      	b.n	80039be <HAL_TIM_ConfigClockSource+0x176>
      break;
 80039bc:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	223d      	movs	r2, #61	; 0x3d
 80039c2:	2101      	movs	r1, #1
 80039c4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	223c      	movs	r2, #60	; 0x3c
 80039ca:	2100      	movs	r1, #0
 80039cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	0018      	movs	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	b004      	add	sp, #16
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	ffceff88 	.word	0xffceff88
 80039dc:	ffff00ff 	.word	0xffff00ff

080039e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039e8:	46c0      	nop			; (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b002      	add	sp, #8
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039f8:	46c0      	nop			; (mov r8, r8)
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b002      	add	sp, #8
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a08:	46c0      	nop			; (mov r8, r8)
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b002      	add	sp, #8
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a18:	46c0      	nop			; (mov r8, r8)
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	b002      	add	sp, #8
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a34      	ldr	r2, [pc, #208]	; (8003b04 <TIM_Base_SetConfig+0xe4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d008      	beq.n	8003a4a <TIM_Base_SetConfig+0x2a>
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	2380      	movs	r3, #128	; 0x80
 8003a3c:	05db      	lsls	r3, r3, #23
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d003      	beq.n	8003a4a <TIM_Base_SetConfig+0x2a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a30      	ldr	r2, [pc, #192]	; (8003b08 <TIM_Base_SetConfig+0xe8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d108      	bne.n	8003a5c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2270      	movs	r2, #112	; 0x70
 8003a4e:	4393      	bics	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a29      	ldr	r2, [pc, #164]	; (8003b04 <TIM_Base_SetConfig+0xe4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d018      	beq.n	8003a96 <TIM_Base_SetConfig+0x76>
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	2380      	movs	r3, #128	; 0x80
 8003a68:	05db      	lsls	r3, r3, #23
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d013      	beq.n	8003a96 <TIM_Base_SetConfig+0x76>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a25      	ldr	r2, [pc, #148]	; (8003b08 <TIM_Base_SetConfig+0xe8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00f      	beq.n	8003a96 <TIM_Base_SetConfig+0x76>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a24      	ldr	r2, [pc, #144]	; (8003b0c <TIM_Base_SetConfig+0xec>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00b      	beq.n	8003a96 <TIM_Base_SetConfig+0x76>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a23      	ldr	r2, [pc, #140]	; (8003b10 <TIM_Base_SetConfig+0xf0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d007      	beq.n	8003a96 <TIM_Base_SetConfig+0x76>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a22      	ldr	r2, [pc, #136]	; (8003b14 <TIM_Base_SetConfig+0xf4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d003      	beq.n	8003a96 <TIM_Base_SetConfig+0x76>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a21      	ldr	r2, [pc, #132]	; (8003b18 <TIM_Base_SetConfig+0xf8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d108      	bne.n	8003aa8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4a20      	ldr	r2, [pc, #128]	; (8003b1c <TIM_Base_SetConfig+0xfc>)
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2280      	movs	r2, #128	; 0x80
 8003aac:	4393      	bics	r3, r2
 8003aae:	001a      	movs	r2, r3
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a0c      	ldr	r2, [pc, #48]	; (8003b04 <TIM_Base_SetConfig+0xe4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d00b      	beq.n	8003aee <TIM_Base_SetConfig+0xce>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a0d      	ldr	r2, [pc, #52]	; (8003b10 <TIM_Base_SetConfig+0xf0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d007      	beq.n	8003aee <TIM_Base_SetConfig+0xce>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a0c      	ldr	r2, [pc, #48]	; (8003b14 <TIM_Base_SetConfig+0xf4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d003      	beq.n	8003aee <TIM_Base_SetConfig+0xce>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a0b      	ldr	r2, [pc, #44]	; (8003b18 <TIM_Base_SetConfig+0xf8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d103      	bne.n	8003af6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	691a      	ldr	r2, [r3, #16]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	615a      	str	r2, [r3, #20]
}
 8003afc:	46c0      	nop			; (mov r8, r8)
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b004      	add	sp, #16
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40012c00 	.word	0x40012c00
 8003b08:	40000400 	.word	0x40000400
 8003b0c:	40002000 	.word	0x40002000
 8003b10:	40014000 	.word	0x40014000
 8003b14:	40014400 	.word	0x40014400
 8003b18:	40014800 	.word	0x40014800
 8003b1c:	fffffcff 	.word	0xfffffcff

08003b20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	2201      	movs	r2, #1
 8003b38:	4393      	bics	r3, r2
 8003b3a:	001a      	movs	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	22f0      	movs	r2, #240	; 0xf0
 8003b4a:	4393      	bics	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	220a      	movs	r2, #10
 8003b5c:	4393      	bics	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	621a      	str	r2, [r3, #32]
}
 8003b74:	46c0      	nop			; (mov r8, r8)
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b006      	add	sp, #24
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	2210      	movs	r2, #16
 8003b8e:	4393      	bics	r3, r2
 8003b90:	001a      	movs	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	4a0d      	ldr	r2, [pc, #52]	; (8003bdc <TIM_TI2_ConfigInputStage+0x60>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	031b      	lsls	r3, r3, #12
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	22a0      	movs	r2, #160	; 0xa0
 8003bb8:	4393      	bics	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	621a      	str	r2, [r3, #32]
}
 8003bd2:	46c0      	nop			; (mov r8, r8)
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	b006      	add	sp, #24
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	ffff0fff 	.word	0xffff0fff

08003be0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4a08      	ldr	r2, [pc, #32]	; (8003c14 <TIM_ITRx_SetConfig+0x34>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	2207      	movs	r2, #7
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	609a      	str	r2, [r3, #8]
}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	b004      	add	sp, #16
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	ffcfff8f 	.word	0xffcfff8f

08003c18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	4a09      	ldr	r2, [pc, #36]	; (8003c54 <TIM_ETR_SetConfig+0x3c>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	021a      	lsls	r2, r3, #8
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	609a      	str	r2, [r3, #8]
}
 8003c4c:	46c0      	nop			; (mov r8, r8)
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	b006      	add	sp, #24
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	ffff00ff 	.word	0xffff00ff

08003c58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	223c      	movs	r2, #60	; 0x3c
 8003c66:	5c9b      	ldrb	r3, [r3, r2]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e055      	b.n	8003d1c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	223c      	movs	r2, #60	; 0x3c
 8003c74:	2101      	movs	r1, #1
 8003c76:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	223d      	movs	r2, #61	; 0x3d
 8003c7c:	2102      	movs	r1, #2
 8003c7e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a23      	ldr	r2, [pc, #140]	; (8003d24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d108      	bne.n	8003cac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4a22      	ldr	r2, [pc, #136]	; (8003d28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2270      	movs	r2, #112	; 0x70
 8003cb0:	4393      	bics	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a16      	ldr	r2, [pc, #88]	; (8003d24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00f      	beq.n	8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	2380      	movs	r3, #128	; 0x80
 8003cd6:	05db      	lsls	r3, r3, #23
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d009      	beq.n	8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a12      	ldr	r2, [pc, #72]	; (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d004      	beq.n	8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a11      	ldr	r2, [pc, #68]	; (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d10c      	bne.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2280      	movs	r2, #128	; 0x80
 8003cf4:	4393      	bics	r3, r2
 8003cf6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	223d      	movs	r2, #61	; 0x3d
 8003d0e:	2101      	movs	r1, #1
 8003d10:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	223c      	movs	r2, #60	; 0x3c
 8003d16:	2100      	movs	r1, #0
 8003d18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	b004      	add	sp, #16
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40012c00 	.word	0x40012c00
 8003d28:	ff0fffff 	.word	0xff0fffff
 8003d2c:	40000400 	.word	0x40000400
 8003d30:	40014000 	.word	0x40014000

08003d34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d3c:	46c0      	nop			; (mov r8, r8)
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	b002      	add	sp, #8
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d4c:	46c0      	nop			; (mov r8, r8)
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	b002      	add	sp, #8
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d5c:	46c0      	nop			; (mov r8, r8)
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	b002      	add	sp, #8
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e046      	b.n	8003e04 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2284      	movs	r2, #132	; 0x84
 8003d7a:	589b      	ldr	r3, [r3, r2]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d107      	bne.n	8003d90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2280      	movs	r2, #128	; 0x80
 8003d84:	2100      	movs	r1, #0
 8003d86:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f7fd f8ce 	bl	8000f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2284      	movs	r2, #132	; 0x84
 8003d94:	2124      	movs	r1, #36	; 0x24
 8003d96:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2101      	movs	r1, #1
 8003da4:	438a      	bics	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	0018      	movs	r0, r3
 8003dac:	f000 fbd8 	bl	8004560 <UART_SetConfig>
 8003db0:	0003      	movs	r3, r0
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d101      	bne.n	8003dba <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e024      	b.n	8003e04 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f000 fea9 	bl	8004b1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	490d      	ldr	r1, [pc, #52]	; (8003e0c <HAL_UART_Init+0xa8>)
 8003dd6:	400a      	ands	r2, r1
 8003dd8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	212a      	movs	r1, #42	; 0x2a
 8003de6:	438a      	bics	r2, r1
 8003de8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2101      	movs	r1, #1
 8003df6:	430a      	orrs	r2, r1
 8003df8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	f000 ff41 	bl	8004c84 <UART_CheckIdleState>
 8003e02:	0003      	movs	r3, r0
}
 8003e04:	0018      	movs	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b002      	add	sp, #8
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	ffffb7ff 	.word	0xffffb7ff

08003e10 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	1dbb      	adds	r3, r7, #6
 8003e1c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2288      	movs	r2, #136	; 0x88
 8003e22:	589b      	ldr	r3, [r3, r2]
 8003e24:	2b20      	cmp	r3, #32
 8003e26:	d155      	bne.n	8003ed4 <HAL_UART_Receive_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_UART_Receive_IT+0x26>
 8003e2e:	1dbb      	adds	r3, r7, #6
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e04d      	b.n	8003ed6 <HAL_UART_Receive_IT+0xc6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	2380      	movs	r3, #128	; 0x80
 8003e40:	015b      	lsls	r3, r3, #5
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d109      	bne.n	8003e5a <HAL_UART_Receive_IT+0x4a>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d105      	bne.n	8003e5a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2201      	movs	r2, #1
 8003e52:	4013      	ands	r3, r2
 8003e54:	d001      	beq.n	8003e5a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e03d      	b.n	8003ed6 <HAL_UART_Receive_IT+0xc6>
      }
    }

    __HAL_LOCK(huart);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2280      	movs	r2, #128	; 0x80
 8003e5e:	5c9b      	ldrb	r3, [r3, r2]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_UART_Receive_IT+0x58>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e036      	b.n	8003ed6 <HAL_UART_Receive_IT+0xc6>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2280      	movs	r2, #128	; 0x80
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a19      	ldr	r2, [pc, #100]	; (8003ee0 <HAL_UART_Receive_IT+0xd0>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d020      	beq.n	8003ec2 <HAL_UART_Receive_IT+0xb2>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	2380      	movs	r3, #128	; 0x80
 8003e88:	041b      	lsls	r3, r3, #16
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	d019      	beq.n	8003ec2 <HAL_UART_Receive_IT+0xb2>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e92:	613b      	str	r3, [r7, #16]
  return(result);
 8003e94:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e96:	61fb      	str	r3, [r7, #28]
 8003e98:	2301      	movs	r3, #1
 8003e9a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f383 8810 	msr	PRIMASK, r3
}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2180      	movs	r1, #128	; 0x80
 8003eb0:	04c9      	lsls	r1, r1, #19
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	f383 8810 	msr	PRIMASK, r3
}
 8003ec0:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ec2:	1dbb      	adds	r3, r7, #6
 8003ec4:	881a      	ldrh	r2, [r3, #0]
 8003ec6:	68b9      	ldr	r1, [r7, #8]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	0018      	movs	r0, r3
 8003ecc:	f000 ffec 	bl	8004ea8 <UART_Start_Receive_IT>
 8003ed0:	0003      	movs	r3, r0
 8003ed2:	e000      	b.n	8003ed6 <HAL_UART_Receive_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003ed4:	2302      	movs	r3, #2
  }
}
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	b008      	add	sp, #32
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	40008000 	.word	0x40008000

08003ee4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ee4:	b5b0      	push	{r4, r5, r7, lr}
 8003ee6:	b0aa      	sub	sp, #168	; 0xa8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	22a4      	movs	r2, #164	; 0xa4
 8003ef4:	18b9      	adds	r1, r7, r2
 8003ef6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	20a0      	movs	r0, #160	; 0xa0
 8003f00:	1839      	adds	r1, r7, r0
 8003f02:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	249c      	movs	r4, #156	; 0x9c
 8003f0c:	1939      	adds	r1, r7, r4
 8003f0e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f10:	0011      	movs	r1, r2
 8003f12:	18bb      	adds	r3, r7, r2
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4aa0      	ldr	r2, [pc, #640]	; (8004198 <HAL_UART_IRQHandler+0x2b4>)
 8003f18:	4013      	ands	r3, r2
 8003f1a:	2298      	movs	r2, #152	; 0x98
 8003f1c:	18bd      	adds	r5, r7, r2
 8003f1e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003f20:	18bb      	adds	r3, r7, r2
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d11a      	bne.n	8003f5e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003f28:	187b      	adds	r3, r7, r1
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	4013      	ands	r3, r2
 8003f30:	d015      	beq.n	8003f5e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003f32:	183b      	adds	r3, r7, r0
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2220      	movs	r2, #32
 8003f38:	4013      	ands	r3, r2
 8003f3a:	d105      	bne.n	8003f48 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003f3c:	193b      	adds	r3, r7, r4
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	2380      	movs	r3, #128	; 0x80
 8003f42:	055b      	lsls	r3, r3, #21
 8003f44:	4013      	ands	r3, r2
 8003f46:	d00a      	beq.n	8003f5e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d100      	bne.n	8003f52 <HAL_UART_IRQHandler+0x6e>
 8003f50:	e2cf      	b.n	80044f2 <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	0010      	movs	r0, r2
 8003f5a:	4798      	blx	r3
      }
      return;
 8003f5c:	e2c9      	b.n	80044f2 <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003f5e:	2398      	movs	r3, #152	; 0x98
 8003f60:	18fb      	adds	r3, r7, r3
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d100      	bne.n	8003f6a <HAL_UART_IRQHandler+0x86>
 8003f68:	e11e      	b.n	80041a8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003f6a:	239c      	movs	r3, #156	; 0x9c
 8003f6c:	18fb      	adds	r3, r7, r3
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a8a      	ldr	r2, [pc, #552]	; (800419c <HAL_UART_IRQHandler+0x2b8>)
 8003f72:	4013      	ands	r3, r2
 8003f74:	d106      	bne.n	8003f84 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003f76:	23a0      	movs	r3, #160	; 0xa0
 8003f78:	18fb      	adds	r3, r7, r3
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a88      	ldr	r2, [pc, #544]	; (80041a0 <HAL_UART_IRQHandler+0x2bc>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	d100      	bne.n	8003f84 <HAL_UART_IRQHandler+0xa0>
 8003f82:	e111      	b.n	80041a8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f84:	23a4      	movs	r3, #164	; 0xa4
 8003f86:	18fb      	adds	r3, r7, r3
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	d012      	beq.n	8003fb6 <HAL_UART_IRQHandler+0xd2>
 8003f90:	23a0      	movs	r3, #160	; 0xa0
 8003f92:	18fb      	adds	r3, r7, r3
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	2380      	movs	r3, #128	; 0x80
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	d00b      	beq.n	8003fb6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	228c      	movs	r2, #140	; 0x8c
 8003faa:	589b      	ldr	r3, [r3, r2]
 8003fac:	2201      	movs	r2, #1
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	218c      	movs	r1, #140	; 0x8c
 8003fb4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fb6:	23a4      	movs	r3, #164	; 0xa4
 8003fb8:	18fb      	adds	r3, r7, r3
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	d011      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x102>
 8003fc2:	239c      	movs	r3, #156	; 0x9c
 8003fc4:	18fb      	adds	r3, r7, r3
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	4013      	ands	r3, r2
 8003fcc:	d00b      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	228c      	movs	r2, #140	; 0x8c
 8003fda:	589b      	ldr	r3, [r3, r2]
 8003fdc:	2204      	movs	r2, #4
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	218c      	movs	r1, #140	; 0x8c
 8003fe4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fe6:	23a4      	movs	r3, #164	; 0xa4
 8003fe8:	18fb      	adds	r3, r7, r3
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2204      	movs	r2, #4
 8003fee:	4013      	ands	r3, r2
 8003ff0:	d011      	beq.n	8004016 <HAL_UART_IRQHandler+0x132>
 8003ff2:	239c      	movs	r3, #156	; 0x9c
 8003ff4:	18fb      	adds	r3, r7, r3
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	d00b      	beq.n	8004016 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2204      	movs	r2, #4
 8004004:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	228c      	movs	r2, #140	; 0x8c
 800400a:	589b      	ldr	r3, [r3, r2]
 800400c:	2202      	movs	r2, #2
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	218c      	movs	r1, #140	; 0x8c
 8004014:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004016:	23a4      	movs	r3, #164	; 0xa4
 8004018:	18fb      	adds	r3, r7, r3
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2208      	movs	r2, #8
 800401e:	4013      	ands	r3, r2
 8004020:	d017      	beq.n	8004052 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004022:	23a0      	movs	r3, #160	; 0xa0
 8004024:	18fb      	adds	r3, r7, r3
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2220      	movs	r2, #32
 800402a:	4013      	ands	r3, r2
 800402c:	d105      	bne.n	800403a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800402e:	239c      	movs	r3, #156	; 0x9c
 8004030:	18fb      	adds	r3, r7, r3
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a59      	ldr	r2, [pc, #356]	; (800419c <HAL_UART_IRQHandler+0x2b8>)
 8004036:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004038:	d00b      	beq.n	8004052 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2208      	movs	r2, #8
 8004040:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	228c      	movs	r2, #140	; 0x8c
 8004046:	589b      	ldr	r3, [r3, r2]
 8004048:	2208      	movs	r2, #8
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	218c      	movs	r1, #140	; 0x8c
 8004050:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004052:	23a4      	movs	r3, #164	; 0xa4
 8004054:	18fb      	adds	r3, r7, r3
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	2380      	movs	r3, #128	; 0x80
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	4013      	ands	r3, r2
 800405e:	d013      	beq.n	8004088 <HAL_UART_IRQHandler+0x1a4>
 8004060:	23a0      	movs	r3, #160	; 0xa0
 8004062:	18fb      	adds	r3, r7, r3
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	2380      	movs	r3, #128	; 0x80
 8004068:	04db      	lsls	r3, r3, #19
 800406a:	4013      	ands	r3, r2
 800406c:	d00c      	beq.n	8004088 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2280      	movs	r2, #128	; 0x80
 8004074:	0112      	lsls	r2, r2, #4
 8004076:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	228c      	movs	r2, #140	; 0x8c
 800407c:	589b      	ldr	r3, [r3, r2]
 800407e:	2220      	movs	r2, #32
 8004080:	431a      	orrs	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	218c      	movs	r1, #140	; 0x8c
 8004086:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	228c      	movs	r2, #140	; 0x8c
 800408c:	589b      	ldr	r3, [r3, r2]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d100      	bne.n	8004094 <HAL_UART_IRQHandler+0x1b0>
 8004092:	e230      	b.n	80044f6 <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004094:	23a4      	movs	r3, #164	; 0xa4
 8004096:	18fb      	adds	r3, r7, r3
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2220      	movs	r2, #32
 800409c:	4013      	ands	r3, r2
 800409e:	d015      	beq.n	80040cc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80040a0:	23a0      	movs	r3, #160	; 0xa0
 80040a2:	18fb      	adds	r3, r7, r3
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2220      	movs	r2, #32
 80040a8:	4013      	ands	r3, r2
 80040aa:	d106      	bne.n	80040ba <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80040ac:	239c      	movs	r3, #156	; 0x9c
 80040ae:	18fb      	adds	r3, r7, r3
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	2380      	movs	r3, #128	; 0x80
 80040b4:	055b      	lsls	r3, r3, #21
 80040b6:	4013      	ands	r3, r2
 80040b8:	d008      	beq.n	80040cc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d004      	beq.n	80040cc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	0010      	movs	r0, r2
 80040ca:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	228c      	movs	r2, #140	; 0x8c
 80040d0:	589b      	ldr	r3, [r3, r2]
 80040d2:	2194      	movs	r1, #148	; 0x94
 80040d4:	187a      	adds	r2, r7, r1
 80040d6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2240      	movs	r2, #64	; 0x40
 80040e0:	4013      	ands	r3, r2
 80040e2:	2b40      	cmp	r3, #64	; 0x40
 80040e4:	d004      	beq.n	80040f0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80040e6:	187b      	adds	r3, r7, r1
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2228      	movs	r2, #40	; 0x28
 80040ec:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040ee:	d047      	beq.n	8004180 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	0018      	movs	r0, r3
 80040f4:	f000 ffe4 	bl	80050c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	2240      	movs	r2, #64	; 0x40
 8004100:	4013      	ands	r3, r2
 8004102:	2b40      	cmp	r3, #64	; 0x40
 8004104:	d137      	bne.n	8004176 <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004106:	f3ef 8310 	mrs	r3, PRIMASK
 800410a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800410c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800410e:	2090      	movs	r0, #144	; 0x90
 8004110:	183a      	adds	r2, r7, r0
 8004112:	6013      	str	r3, [r2, #0]
 8004114:	2301      	movs	r3, #1
 8004116:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004118:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800411a:	f383 8810 	msr	PRIMASK, r3
}
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2140      	movs	r1, #64	; 0x40
 800412c:	438a      	bics	r2, r1
 800412e:	609a      	str	r2, [r3, #8]
 8004130:	183b      	adds	r3, r7, r0
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004136:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004138:	f383 8810 	msr	PRIMASK, r3
}
 800413c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004142:	2b00      	cmp	r3, #0
 8004144:	d012      	beq.n	800416c <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800414a:	4a16      	ldr	r2, [pc, #88]	; (80041a4 <HAL_UART_IRQHandler+0x2c0>)
 800414c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004152:	0018      	movs	r0, r3
 8004154:	f7fd feb6 	bl	8001ec4 <HAL_DMA_Abort_IT>
 8004158:	1e03      	subs	r3, r0, #0
 800415a:	d01a      	beq.n	8004192 <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004166:	0018      	movs	r0, r3
 8004168:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800416a:	e012      	b.n	8004192 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	0018      	movs	r0, r3
 8004170:	f000 f9e2 	bl	8004538 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004174:	e00d      	b.n	8004192 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	0018      	movs	r0, r3
 800417a:	f000 f9dd 	bl	8004538 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800417e:	e008      	b.n	8004192 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	0018      	movs	r0, r3
 8004184:	f000 f9d8 	bl	8004538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	228c      	movs	r2, #140	; 0x8c
 800418c:	2100      	movs	r1, #0
 800418e:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004190:	e1b1      	b.n	80044f6 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004192:	46c0      	nop			; (mov r8, r8)
    return;
 8004194:	e1af      	b.n	80044f6 <HAL_UART_IRQHandler+0x612>
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	0000080f 	.word	0x0000080f
 800419c:	10000001 	.word	0x10000001
 80041a0:	04000120 	.word	0x04000120
 80041a4:	0800518d 	.word	0x0800518d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d000      	beq.n	80041b2 <HAL_UART_IRQHandler+0x2ce>
 80041b0:	e135      	b.n	800441e <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80041b2:	23a4      	movs	r3, #164	; 0xa4
 80041b4:	18fb      	adds	r3, r7, r3
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2210      	movs	r2, #16
 80041ba:	4013      	ands	r3, r2
 80041bc:	d100      	bne.n	80041c0 <HAL_UART_IRQHandler+0x2dc>
 80041be:	e12e      	b.n	800441e <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80041c0:	23a0      	movs	r3, #160	; 0xa0
 80041c2:	18fb      	adds	r3, r7, r3
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2210      	movs	r2, #16
 80041c8:	4013      	ands	r3, r2
 80041ca:	d100      	bne.n	80041ce <HAL_UART_IRQHandler+0x2ea>
 80041cc:	e127      	b.n	800441e <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2210      	movs	r2, #16
 80041d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2240      	movs	r2, #64	; 0x40
 80041de:	4013      	ands	r3, r2
 80041e0:	2b40      	cmp	r3, #64	; 0x40
 80041e2:	d000      	beq.n	80041e6 <HAL_UART_IRQHandler+0x302>
 80041e4:	e09e      	b.n	8004324 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	217e      	movs	r1, #126	; 0x7e
 80041f0:	187b      	adds	r3, r7, r1
 80041f2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80041f4:	187b      	adds	r3, r7, r1
 80041f6:	881b      	ldrh	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d100      	bne.n	80041fe <HAL_UART_IRQHandler+0x31a>
 80041fc:	e17d      	b.n	80044fa <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	225c      	movs	r2, #92	; 0x5c
 8004202:	5a9b      	ldrh	r3, [r3, r2]
 8004204:	187a      	adds	r2, r7, r1
 8004206:	8812      	ldrh	r2, [r2, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d300      	bcc.n	800420e <HAL_UART_IRQHandler+0x32a>
 800420c:	e175      	b.n	80044fa <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	187a      	adds	r2, r7, r1
 8004212:	215e      	movs	r1, #94	; 0x5e
 8004214:	8812      	ldrh	r2, [r2, #0]
 8004216:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2220      	movs	r2, #32
 8004222:	4013      	ands	r3, r2
 8004224:	d16f      	bne.n	8004306 <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004226:	f3ef 8310 	mrs	r3, PRIMASK
 800422a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800422c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800422e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004230:	2301      	movs	r3, #1
 8004232:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004236:	f383 8810 	msr	PRIMASK, r3
}
 800423a:	46c0      	nop			; (mov r8, r8)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	49b1      	ldr	r1, [pc, #708]	; (800450c <HAL_UART_IRQHandler+0x628>)
 8004248:	400a      	ands	r2, r1
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800424e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004252:	f383 8810 	msr	PRIMASK, r3
}
 8004256:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004258:	f3ef 8310 	mrs	r3, PRIMASK
 800425c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800425e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004260:	677b      	str	r3, [r7, #116]	; 0x74
 8004262:	2301      	movs	r3, #1
 8004264:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004268:	f383 8810 	msr	PRIMASK, r3
}
 800426c:	46c0      	nop			; (mov r8, r8)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2101      	movs	r1, #1
 800427a:	438a      	bics	r2, r1
 800427c:	609a      	str	r2, [r3, #8]
 800427e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004280:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004284:	f383 8810 	msr	PRIMASK, r3
}
 8004288:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800428a:	f3ef 8310 	mrs	r3, PRIMASK
 800428e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004290:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004292:	673b      	str	r3, [r7, #112]	; 0x70
 8004294:	2301      	movs	r3, #1
 8004296:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800429a:	f383 8810 	msr	PRIMASK, r3
}
 800429e:	46c0      	nop			; (mov r8, r8)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2140      	movs	r1, #64	; 0x40
 80042ac:	438a      	bics	r2, r1
 80042ae:	609a      	str	r2, [r3, #8]
 80042b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042b2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042b6:	f383 8810 	msr	PRIMASK, r3
}
 80042ba:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2288      	movs	r2, #136	; 0x88
 80042c0:	2120      	movs	r1, #32
 80042c2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ca:	f3ef 8310 	mrs	r3, PRIMASK
 80042ce:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80042d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042d4:	2301      	movs	r3, #1
 80042d6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042da:	f383 8810 	msr	PRIMASK, r3
}
 80042de:	46c0      	nop			; (mov r8, r8)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2110      	movs	r1, #16
 80042ec:	438a      	bics	r2, r1
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042f6:	f383 8810 	msr	PRIMASK, r3
}
 80042fa:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004300:	0018      	movs	r0, r3
 8004302:	f7fd fd7d 	bl	8001e00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	225c      	movs	r2, #92	; 0x5c
 800430a:	5a9a      	ldrh	r2, [r3, r2]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	215e      	movs	r1, #94	; 0x5e
 8004310:	5a5b      	ldrh	r3, [r3, r1]
 8004312:	b29b      	uxth	r3, r3
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	b29a      	uxth	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	0011      	movs	r1, r2
 800431c:	0018      	movs	r0, r3
 800431e:	f000 f913 	bl	8004548 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004322:	e0ea      	b.n	80044fa <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	225c      	movs	r2, #92	; 0x5c
 8004328:	5a99      	ldrh	r1, [r3, r2]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	225e      	movs	r2, #94	; 0x5e
 800432e:	5a9b      	ldrh	r3, [r3, r2]
 8004330:	b29a      	uxth	r2, r3
 8004332:	208e      	movs	r0, #142	; 0x8e
 8004334:	183b      	adds	r3, r7, r0
 8004336:	1a8a      	subs	r2, r1, r2
 8004338:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	225e      	movs	r2, #94	; 0x5e
 800433e:	5a9b      	ldrh	r3, [r3, r2]
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d100      	bne.n	8004348 <HAL_UART_IRQHandler+0x464>
 8004346:	e0da      	b.n	80044fe <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8004348:	183b      	adds	r3, r7, r0
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d100      	bne.n	8004352 <HAL_UART_IRQHandler+0x46e>
 8004350:	e0d5      	b.n	80044fe <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004352:	f3ef 8310 	mrs	r3, PRIMASK
 8004356:	60fb      	str	r3, [r7, #12]
  return(result);
 8004358:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800435a:	2488      	movs	r4, #136	; 0x88
 800435c:	193a      	adds	r2, r7, r4
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	2301      	movs	r3, #1
 8004362:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f383 8810 	msr	PRIMASK, r3
}
 800436a:	46c0      	nop			; (mov r8, r8)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4966      	ldr	r1, [pc, #408]	; (8004510 <HAL_UART_IRQHandler+0x62c>)
 8004378:	400a      	ands	r2, r1
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	193b      	adds	r3, r7, r4
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f383 8810 	msr	PRIMASK, r3
}
 8004388:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800438a:	f3ef 8310 	mrs	r3, PRIMASK
 800438e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004390:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004392:	2484      	movs	r4, #132	; 0x84
 8004394:	193a      	adds	r2, r7, r4
 8004396:	6013      	str	r3, [r2, #0]
 8004398:	2301      	movs	r3, #1
 800439a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f383 8810 	msr	PRIMASK, r3
}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4959      	ldr	r1, [pc, #356]	; (8004514 <HAL_UART_IRQHandler+0x630>)
 80043b0:	400a      	ands	r2, r1
 80043b2:	609a      	str	r2, [r3, #8]
 80043b4:	193b      	adds	r3, r7, r4
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	f383 8810 	msr	PRIMASK, r3
}
 80043c0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2288      	movs	r2, #136	; 0x88
 80043c6:	2120      	movs	r1, #32
 80043c8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043d6:	f3ef 8310 	mrs	r3, PRIMASK
 80043da:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043de:	2480      	movs	r4, #128	; 0x80
 80043e0:	193a      	adds	r2, r7, r4
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	2301      	movs	r3, #1
 80043e6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ea:	f383 8810 	msr	PRIMASK, r3
}
 80043ee:	46c0      	nop			; (mov r8, r8)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2110      	movs	r1, #16
 80043fc:	438a      	bics	r2, r1
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	193b      	adds	r3, r7, r4
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004408:	f383 8810 	msr	PRIMASK, r3
}
 800440c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800440e:	183b      	adds	r3, r7, r0
 8004410:	881a      	ldrh	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	0011      	movs	r1, r2
 8004416:	0018      	movs	r0, r3
 8004418:	f000 f896 	bl	8004548 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800441c:	e06f      	b.n	80044fe <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800441e:	23a4      	movs	r3, #164	; 0xa4
 8004420:	18fb      	adds	r3, r7, r3
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	2380      	movs	r3, #128	; 0x80
 8004426:	035b      	lsls	r3, r3, #13
 8004428:	4013      	ands	r3, r2
 800442a:	d010      	beq.n	800444e <HAL_UART_IRQHandler+0x56a>
 800442c:	239c      	movs	r3, #156	; 0x9c
 800442e:	18fb      	adds	r3, r7, r3
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	2380      	movs	r3, #128	; 0x80
 8004434:	03db      	lsls	r3, r3, #15
 8004436:	4013      	ands	r3, r2
 8004438:	d009      	beq.n	800444e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2280      	movs	r2, #128	; 0x80
 8004440:	0352      	lsls	r2, r2, #13
 8004442:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	0018      	movs	r0, r3
 8004448:	f001 fb34 	bl	8005ab4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800444c:	e05a      	b.n	8004504 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800444e:	23a4      	movs	r3, #164	; 0xa4
 8004450:	18fb      	adds	r3, r7, r3
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2280      	movs	r2, #128	; 0x80
 8004456:	4013      	ands	r3, r2
 8004458:	d016      	beq.n	8004488 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800445a:	23a0      	movs	r3, #160	; 0xa0
 800445c:	18fb      	adds	r3, r7, r3
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2280      	movs	r2, #128	; 0x80
 8004462:	4013      	ands	r3, r2
 8004464:	d106      	bne.n	8004474 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004466:	239c      	movs	r3, #156	; 0x9c
 8004468:	18fb      	adds	r3, r7, r3
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	2380      	movs	r3, #128	; 0x80
 800446e:	041b      	lsls	r3, r3, #16
 8004470:	4013      	ands	r3, r2
 8004472:	d009      	beq.n	8004488 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004478:	2b00      	cmp	r3, #0
 800447a:	d042      	beq.n	8004502 <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	0010      	movs	r0, r2
 8004484:	4798      	blx	r3
    }
    return;
 8004486:	e03c      	b.n	8004502 <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004488:	23a4      	movs	r3, #164	; 0xa4
 800448a:	18fb      	adds	r3, r7, r3
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2240      	movs	r2, #64	; 0x40
 8004490:	4013      	ands	r3, r2
 8004492:	d00a      	beq.n	80044aa <HAL_UART_IRQHandler+0x5c6>
 8004494:	23a0      	movs	r3, #160	; 0xa0
 8004496:	18fb      	adds	r3, r7, r3
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2240      	movs	r2, #64	; 0x40
 800449c:	4013      	ands	r3, r2
 800449e:	d004      	beq.n	80044aa <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	0018      	movs	r0, r3
 80044a4:	f000 fe89 	bl	80051ba <UART_EndTransmit_IT>
    return;
 80044a8:	e02c      	b.n	8004504 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80044aa:	23a4      	movs	r3, #164	; 0xa4
 80044ac:	18fb      	adds	r3, r7, r3
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	2380      	movs	r3, #128	; 0x80
 80044b2:	041b      	lsls	r3, r3, #16
 80044b4:	4013      	ands	r3, r2
 80044b6:	d00b      	beq.n	80044d0 <HAL_UART_IRQHandler+0x5ec>
 80044b8:	23a0      	movs	r3, #160	; 0xa0
 80044ba:	18fb      	adds	r3, r7, r3
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	2380      	movs	r3, #128	; 0x80
 80044c0:	05db      	lsls	r3, r3, #23
 80044c2:	4013      	ands	r3, r2
 80044c4:	d004      	beq.n	80044d0 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	0018      	movs	r0, r3
 80044ca:	f001 fb03 	bl	8005ad4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80044ce:	e019      	b.n	8004504 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80044d0:	23a4      	movs	r3, #164	; 0xa4
 80044d2:	18fb      	adds	r3, r7, r3
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	2380      	movs	r3, #128	; 0x80
 80044d8:	045b      	lsls	r3, r3, #17
 80044da:	4013      	ands	r3, r2
 80044dc:	d012      	beq.n	8004504 <HAL_UART_IRQHandler+0x620>
 80044de:	23a0      	movs	r3, #160	; 0xa0
 80044e0:	18fb      	adds	r3, r7, r3
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	da0d      	bge.n	8004504 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	0018      	movs	r0, r3
 80044ec:	f001 faea 	bl	8005ac4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80044f0:	e008      	b.n	8004504 <HAL_UART_IRQHandler+0x620>
      return;
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	e006      	b.n	8004504 <HAL_UART_IRQHandler+0x620>
    return;
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	e004      	b.n	8004504 <HAL_UART_IRQHandler+0x620>
      return;
 80044fa:	46c0      	nop			; (mov r8, r8)
 80044fc:	e002      	b.n	8004504 <HAL_UART_IRQHandler+0x620>
      return;
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	e000      	b.n	8004504 <HAL_UART_IRQHandler+0x620>
    return;
 8004502:	46c0      	nop			; (mov r8, r8)
  }
}
 8004504:	46bd      	mov	sp, r7
 8004506:	b02a      	add	sp, #168	; 0xa8
 8004508:	bdb0      	pop	{r4, r5, r7, pc}
 800450a:	46c0      	nop			; (mov r8, r8)
 800450c:	fffffeff 	.word	0xfffffeff
 8004510:	fffffedf 	.word	0xfffffedf
 8004514:	effffffe 	.word	0xeffffffe

08004518 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004520:	46c0      	nop			; (mov r8, r8)
 8004522:	46bd      	mov	sp, r7
 8004524:	b002      	add	sp, #8
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004530:	46c0      	nop			; (mov r8, r8)
 8004532:	46bd      	mov	sp, r7
 8004534:	b002      	add	sp, #8
 8004536:	bd80      	pop	{r7, pc}

08004538 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004540:	46c0      	nop			; (mov r8, r8)
 8004542:	46bd      	mov	sp, r7
 8004544:	b002      	add	sp, #8
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	000a      	movs	r2, r1
 8004552:	1cbb      	adds	r3, r7, #2
 8004554:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004556:	46c0      	nop			; (mov r8, r8)
 8004558:	46bd      	mov	sp, r7
 800455a:	b002      	add	sp, #8
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004560:	b5b0      	push	{r4, r5, r7, lr}
 8004562:	b090      	sub	sp, #64	; 0x40
 8004564:	af00      	add	r7, sp, #0
 8004566:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004568:	231a      	movs	r3, #26
 800456a:	2220      	movs	r2, #32
 800456c:	4694      	mov	ip, r2
 800456e:	44bc      	add	ip, r7
 8004570:	4463      	add	r3, ip
 8004572:	2200      	movs	r2, #0
 8004574:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	689a      	ldr	r2, [r3, #8]
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	431a      	orrs	r2, r3
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	431a      	orrs	r2, r3
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	4313      	orrs	r3, r2
 800458c:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4ab9      	ldr	r2, [pc, #740]	; (800487c <UART_SetConfig+0x31c>)
 8004596:	4013      	ands	r3, r2
 8004598:	0019      	movs	r1, r3
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045a0:	430b      	orrs	r3, r1
 80045a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	4ab5      	ldr	r2, [pc, #724]	; (8004880 <UART_SetConfig+0x320>)
 80045ac:	4013      	ands	r3, r2
 80045ae:	0018      	movs	r0, r3
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	68d9      	ldr	r1, [r3, #12]
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	0003      	movs	r3, r0
 80045ba:	430b      	orrs	r3, r1
 80045bc:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4aae      	ldr	r2, [pc, #696]	; (8004884 <UART_SetConfig+0x324>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d004      	beq.n	80045d8 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045d4:	4313      	orrs	r3, r2
 80045d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	4aaa      	ldr	r2, [pc, #680]	; (8004888 <UART_SetConfig+0x328>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	0019      	movs	r1, r3
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ea:	430b      	orrs	r3, r1
 80045ec:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f4:	220f      	movs	r2, #15
 80045f6:	4393      	bics	r3, r2
 80045f8:	0018      	movs	r0, r3
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	0003      	movs	r3, r0
 8004604:	430b      	orrs	r3, r1
 8004606:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a9f      	ldr	r2, [pc, #636]	; (800488c <UART_SetConfig+0x32c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d136      	bne.n	8004680 <UART_SetConfig+0x120>
 8004612:	4b9f      	ldr	r3, [pc, #636]	; (8004890 <UART_SetConfig+0x330>)
 8004614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004616:	2203      	movs	r2, #3
 8004618:	4013      	ands	r3, r2
 800461a:	2b03      	cmp	r3, #3
 800461c:	d020      	beq.n	8004660 <UART_SetConfig+0x100>
 800461e:	d827      	bhi.n	8004670 <UART_SetConfig+0x110>
 8004620:	2b02      	cmp	r3, #2
 8004622:	d00d      	beq.n	8004640 <UART_SetConfig+0xe0>
 8004624:	d824      	bhi.n	8004670 <UART_SetConfig+0x110>
 8004626:	2b00      	cmp	r3, #0
 8004628:	d002      	beq.n	8004630 <UART_SetConfig+0xd0>
 800462a:	2b01      	cmp	r3, #1
 800462c:	d010      	beq.n	8004650 <UART_SetConfig+0xf0>
 800462e:	e01f      	b.n	8004670 <UART_SetConfig+0x110>
 8004630:	231b      	movs	r3, #27
 8004632:	2220      	movs	r2, #32
 8004634:	4694      	mov	ip, r2
 8004636:	44bc      	add	ip, r7
 8004638:	4463      	add	r3, ip
 800463a:	2200      	movs	r2, #0
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	e0c5      	b.n	80047cc <UART_SetConfig+0x26c>
 8004640:	231b      	movs	r3, #27
 8004642:	2220      	movs	r2, #32
 8004644:	4694      	mov	ip, r2
 8004646:	44bc      	add	ip, r7
 8004648:	4463      	add	r3, ip
 800464a:	2202      	movs	r2, #2
 800464c:	701a      	strb	r2, [r3, #0]
 800464e:	e0bd      	b.n	80047cc <UART_SetConfig+0x26c>
 8004650:	231b      	movs	r3, #27
 8004652:	2220      	movs	r2, #32
 8004654:	4694      	mov	ip, r2
 8004656:	44bc      	add	ip, r7
 8004658:	4463      	add	r3, ip
 800465a:	2204      	movs	r2, #4
 800465c:	701a      	strb	r2, [r3, #0]
 800465e:	e0b5      	b.n	80047cc <UART_SetConfig+0x26c>
 8004660:	231b      	movs	r3, #27
 8004662:	2220      	movs	r2, #32
 8004664:	4694      	mov	ip, r2
 8004666:	44bc      	add	ip, r7
 8004668:	4463      	add	r3, ip
 800466a:	2208      	movs	r2, #8
 800466c:	701a      	strb	r2, [r3, #0]
 800466e:	e0ad      	b.n	80047cc <UART_SetConfig+0x26c>
 8004670:	231b      	movs	r3, #27
 8004672:	2220      	movs	r2, #32
 8004674:	4694      	mov	ip, r2
 8004676:	44bc      	add	ip, r7
 8004678:	4463      	add	r3, ip
 800467a:	2210      	movs	r2, #16
 800467c:	701a      	strb	r2, [r3, #0]
 800467e:	e0a5      	b.n	80047cc <UART_SetConfig+0x26c>
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a83      	ldr	r2, [pc, #524]	; (8004894 <UART_SetConfig+0x334>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d136      	bne.n	80046f8 <UART_SetConfig+0x198>
 800468a:	4b81      	ldr	r3, [pc, #516]	; (8004890 <UART_SetConfig+0x330>)
 800468c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468e:	220c      	movs	r2, #12
 8004690:	4013      	ands	r3, r2
 8004692:	2b0c      	cmp	r3, #12
 8004694:	d020      	beq.n	80046d8 <UART_SetConfig+0x178>
 8004696:	d827      	bhi.n	80046e8 <UART_SetConfig+0x188>
 8004698:	2b08      	cmp	r3, #8
 800469a:	d00d      	beq.n	80046b8 <UART_SetConfig+0x158>
 800469c:	d824      	bhi.n	80046e8 <UART_SetConfig+0x188>
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <UART_SetConfig+0x148>
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d010      	beq.n	80046c8 <UART_SetConfig+0x168>
 80046a6:	e01f      	b.n	80046e8 <UART_SetConfig+0x188>
 80046a8:	231b      	movs	r3, #27
 80046aa:	2220      	movs	r2, #32
 80046ac:	4694      	mov	ip, r2
 80046ae:	44bc      	add	ip, r7
 80046b0:	4463      	add	r3, ip
 80046b2:	2200      	movs	r2, #0
 80046b4:	701a      	strb	r2, [r3, #0]
 80046b6:	e089      	b.n	80047cc <UART_SetConfig+0x26c>
 80046b8:	231b      	movs	r3, #27
 80046ba:	2220      	movs	r2, #32
 80046bc:	4694      	mov	ip, r2
 80046be:	44bc      	add	ip, r7
 80046c0:	4463      	add	r3, ip
 80046c2:	2202      	movs	r2, #2
 80046c4:	701a      	strb	r2, [r3, #0]
 80046c6:	e081      	b.n	80047cc <UART_SetConfig+0x26c>
 80046c8:	231b      	movs	r3, #27
 80046ca:	2220      	movs	r2, #32
 80046cc:	4694      	mov	ip, r2
 80046ce:	44bc      	add	ip, r7
 80046d0:	4463      	add	r3, ip
 80046d2:	2204      	movs	r2, #4
 80046d4:	701a      	strb	r2, [r3, #0]
 80046d6:	e079      	b.n	80047cc <UART_SetConfig+0x26c>
 80046d8:	231b      	movs	r3, #27
 80046da:	2220      	movs	r2, #32
 80046dc:	4694      	mov	ip, r2
 80046de:	44bc      	add	ip, r7
 80046e0:	4463      	add	r3, ip
 80046e2:	2208      	movs	r2, #8
 80046e4:	701a      	strb	r2, [r3, #0]
 80046e6:	e071      	b.n	80047cc <UART_SetConfig+0x26c>
 80046e8:	231b      	movs	r3, #27
 80046ea:	2220      	movs	r2, #32
 80046ec:	4694      	mov	ip, r2
 80046ee:	44bc      	add	ip, r7
 80046f0:	4463      	add	r3, ip
 80046f2:	2210      	movs	r2, #16
 80046f4:	701a      	strb	r2, [r3, #0]
 80046f6:	e069      	b.n	80047cc <UART_SetConfig+0x26c>
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a66      	ldr	r2, [pc, #408]	; (8004898 <UART_SetConfig+0x338>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d107      	bne.n	8004712 <UART_SetConfig+0x1b2>
 8004702:	231b      	movs	r3, #27
 8004704:	2220      	movs	r2, #32
 8004706:	4694      	mov	ip, r2
 8004708:	44bc      	add	ip, r7
 800470a:	4463      	add	r3, ip
 800470c:	2200      	movs	r2, #0
 800470e:	701a      	strb	r2, [r3, #0]
 8004710:	e05c      	b.n	80047cc <UART_SetConfig+0x26c>
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a61      	ldr	r2, [pc, #388]	; (800489c <UART_SetConfig+0x33c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d107      	bne.n	800472c <UART_SetConfig+0x1cc>
 800471c:	231b      	movs	r3, #27
 800471e:	2220      	movs	r2, #32
 8004720:	4694      	mov	ip, r2
 8004722:	44bc      	add	ip, r7
 8004724:	4463      	add	r3, ip
 8004726:	2200      	movs	r2, #0
 8004728:	701a      	strb	r2, [r3, #0]
 800472a:	e04f      	b.n	80047cc <UART_SetConfig+0x26c>
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a54      	ldr	r2, [pc, #336]	; (8004884 <UART_SetConfig+0x324>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d143      	bne.n	80047be <UART_SetConfig+0x25e>
 8004736:	4b56      	ldr	r3, [pc, #344]	; (8004890 <UART_SetConfig+0x330>)
 8004738:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800473a:	23c0      	movs	r3, #192	; 0xc0
 800473c:	011b      	lsls	r3, r3, #4
 800473e:	4013      	ands	r3, r2
 8004740:	22c0      	movs	r2, #192	; 0xc0
 8004742:	0112      	lsls	r2, r2, #4
 8004744:	4293      	cmp	r3, r2
 8004746:	d02a      	beq.n	800479e <UART_SetConfig+0x23e>
 8004748:	22c0      	movs	r2, #192	; 0xc0
 800474a:	0112      	lsls	r2, r2, #4
 800474c:	4293      	cmp	r3, r2
 800474e:	d82e      	bhi.n	80047ae <UART_SetConfig+0x24e>
 8004750:	2280      	movs	r2, #128	; 0x80
 8004752:	0112      	lsls	r2, r2, #4
 8004754:	4293      	cmp	r3, r2
 8004756:	d012      	beq.n	800477e <UART_SetConfig+0x21e>
 8004758:	2280      	movs	r2, #128	; 0x80
 800475a:	0112      	lsls	r2, r2, #4
 800475c:	4293      	cmp	r3, r2
 800475e:	d826      	bhi.n	80047ae <UART_SetConfig+0x24e>
 8004760:	2b00      	cmp	r3, #0
 8004762:	d004      	beq.n	800476e <UART_SetConfig+0x20e>
 8004764:	2280      	movs	r2, #128	; 0x80
 8004766:	00d2      	lsls	r2, r2, #3
 8004768:	4293      	cmp	r3, r2
 800476a:	d010      	beq.n	800478e <UART_SetConfig+0x22e>
 800476c:	e01f      	b.n	80047ae <UART_SetConfig+0x24e>
 800476e:	231b      	movs	r3, #27
 8004770:	2220      	movs	r2, #32
 8004772:	4694      	mov	ip, r2
 8004774:	44bc      	add	ip, r7
 8004776:	4463      	add	r3, ip
 8004778:	2200      	movs	r2, #0
 800477a:	701a      	strb	r2, [r3, #0]
 800477c:	e026      	b.n	80047cc <UART_SetConfig+0x26c>
 800477e:	231b      	movs	r3, #27
 8004780:	2220      	movs	r2, #32
 8004782:	4694      	mov	ip, r2
 8004784:	44bc      	add	ip, r7
 8004786:	4463      	add	r3, ip
 8004788:	2202      	movs	r2, #2
 800478a:	701a      	strb	r2, [r3, #0]
 800478c:	e01e      	b.n	80047cc <UART_SetConfig+0x26c>
 800478e:	231b      	movs	r3, #27
 8004790:	2220      	movs	r2, #32
 8004792:	4694      	mov	ip, r2
 8004794:	44bc      	add	ip, r7
 8004796:	4463      	add	r3, ip
 8004798:	2204      	movs	r2, #4
 800479a:	701a      	strb	r2, [r3, #0]
 800479c:	e016      	b.n	80047cc <UART_SetConfig+0x26c>
 800479e:	231b      	movs	r3, #27
 80047a0:	2220      	movs	r2, #32
 80047a2:	4694      	mov	ip, r2
 80047a4:	44bc      	add	ip, r7
 80047a6:	4463      	add	r3, ip
 80047a8:	2208      	movs	r2, #8
 80047aa:	701a      	strb	r2, [r3, #0]
 80047ac:	e00e      	b.n	80047cc <UART_SetConfig+0x26c>
 80047ae:	231b      	movs	r3, #27
 80047b0:	2220      	movs	r2, #32
 80047b2:	4694      	mov	ip, r2
 80047b4:	44bc      	add	ip, r7
 80047b6:	4463      	add	r3, ip
 80047b8:	2210      	movs	r2, #16
 80047ba:	701a      	strb	r2, [r3, #0]
 80047bc:	e006      	b.n	80047cc <UART_SetConfig+0x26c>
 80047be:	231b      	movs	r3, #27
 80047c0:	2220      	movs	r2, #32
 80047c2:	4694      	mov	ip, r2
 80047c4:	44bc      	add	ip, r7
 80047c6:	4463      	add	r3, ip
 80047c8:	2210      	movs	r2, #16
 80047ca:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a2c      	ldr	r2, [pc, #176]	; (8004884 <UART_SetConfig+0x324>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d000      	beq.n	80047d8 <UART_SetConfig+0x278>
 80047d6:	e0ad      	b.n	8004934 <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047d8:	231b      	movs	r3, #27
 80047da:	2220      	movs	r2, #32
 80047dc:	4694      	mov	ip, r2
 80047de:	44bc      	add	ip, r7
 80047e0:	4463      	add	r3, ip
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d015      	beq.n	8004814 <UART_SetConfig+0x2b4>
 80047e8:	dc18      	bgt.n	800481c <UART_SetConfig+0x2bc>
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d00d      	beq.n	800480a <UART_SetConfig+0x2aa>
 80047ee:	dc15      	bgt.n	800481c <UART_SetConfig+0x2bc>
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <UART_SetConfig+0x29a>
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d005      	beq.n	8004804 <UART_SetConfig+0x2a4>
 80047f8:	e010      	b.n	800481c <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047fa:	f7fe fa9d 	bl	8002d38 <HAL_RCC_GetPCLK1Freq>
 80047fe:	0003      	movs	r3, r0
 8004800:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004802:	e015      	b.n	8004830 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004804:	4b26      	ldr	r3, [pc, #152]	; (80048a0 <UART_SetConfig+0x340>)
 8004806:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004808:	e012      	b.n	8004830 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800480a:	f7fe fa09 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 800480e:	0003      	movs	r3, r0
 8004810:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004812:	e00d      	b.n	8004830 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004814:	2380      	movs	r3, #128	; 0x80
 8004816:	021b      	lsls	r3, r3, #8
 8004818:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800481a:	e009      	b.n	8004830 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004820:	231a      	movs	r3, #26
 8004822:	2220      	movs	r2, #32
 8004824:	4694      	mov	ip, r2
 8004826:	44bc      	add	ip, r7
 8004828:	4463      	add	r3, ip
 800482a:	2201      	movs	r2, #1
 800482c:	701a      	strb	r2, [r3, #0]
        break;
 800482e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004832:	2b00      	cmp	r3, #0
 8004834:	d100      	bne.n	8004838 <UART_SetConfig+0x2d8>
 8004836:	e154      	b.n	8004ae2 <UART_SetConfig+0x582>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800483c:	4b19      	ldr	r3, [pc, #100]	; (80048a4 <UART_SetConfig+0x344>)
 800483e:	0052      	lsls	r2, r2, #1
 8004840:	5ad3      	ldrh	r3, [r2, r3]
 8004842:	0019      	movs	r1, r3
 8004844:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004846:	f7fb fc5d 	bl	8000104 <__udivsi3>
 800484a:	0003      	movs	r3, r0
 800484c:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	0013      	movs	r3, r2
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	189b      	adds	r3, r3, r2
 8004858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800485a:	429a      	cmp	r2, r3
 800485c:	d305      	bcc.n	800486a <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004866:	429a      	cmp	r2, r3
 8004868:	d91e      	bls.n	80048a8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800486a:	231a      	movs	r3, #26
 800486c:	2220      	movs	r2, #32
 800486e:	4694      	mov	ip, r2
 8004870:	44bc      	add	ip, r7
 8004872:	4463      	add	r3, ip
 8004874:	2201      	movs	r2, #1
 8004876:	701a      	strb	r2, [r3, #0]
 8004878:	e133      	b.n	8004ae2 <UART_SetConfig+0x582>
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	cfff69f3 	.word	0xcfff69f3
 8004880:	ffffcfff 	.word	0xffffcfff
 8004884:	40008000 	.word	0x40008000
 8004888:	11fff4ff 	.word	0x11fff4ff
 800488c:	40013800 	.word	0x40013800
 8004890:	40021000 	.word	0x40021000
 8004894:	40004400 	.word	0x40004400
 8004898:	40004800 	.word	0x40004800
 800489c:	40004c00 	.word	0x40004c00
 80048a0:	00f42400 	.word	0x00f42400
 80048a4:	08005de8 	.word	0x08005de8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048aa:	61bb      	str	r3, [r7, #24]
 80048ac:	2300      	movs	r3, #0
 80048ae:	61fb      	str	r3, [r7, #28]
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048b4:	4b97      	ldr	r3, [pc, #604]	; (8004b14 <UART_SetConfig+0x5b4>)
 80048b6:	0052      	lsls	r2, r2, #1
 80048b8:	5ad3      	ldrh	r3, [r2, r3]
 80048ba:	613b      	str	r3, [r7, #16]
 80048bc:	2300      	movs	r3, #0
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	69b8      	ldr	r0, [r7, #24]
 80048c6:	69f9      	ldr	r1, [r7, #28]
 80048c8:	f7fb fd92 	bl	80003f0 <__aeabi_uldivmod>
 80048cc:	0002      	movs	r2, r0
 80048ce:	000b      	movs	r3, r1
 80048d0:	0e11      	lsrs	r1, r2, #24
 80048d2:	021d      	lsls	r5, r3, #8
 80048d4:	430d      	orrs	r5, r1
 80048d6:	0214      	lsls	r4, r2, #8
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	085b      	lsrs	r3, r3, #1
 80048de:	60bb      	str	r3, [r7, #8]
 80048e0:	2300      	movs	r3, #0
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	68b8      	ldr	r0, [r7, #8]
 80048e6:	68f9      	ldr	r1, [r7, #12]
 80048e8:	1900      	adds	r0, r0, r4
 80048ea:	4169      	adcs	r1, r5
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	603b      	str	r3, [r7, #0]
 80048f2:	2300      	movs	r3, #0
 80048f4:	607b      	str	r3, [r7, #4]
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f7fb fd79 	bl	80003f0 <__aeabi_uldivmod>
 80048fe:	0002      	movs	r2, r0
 8004900:	000b      	movs	r3, r1
 8004902:	0013      	movs	r3, r2
 8004904:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004908:	23c0      	movs	r3, #192	; 0xc0
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	429a      	cmp	r2, r3
 800490e:	d309      	bcc.n	8004924 <UART_SetConfig+0x3c4>
 8004910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004912:	2380      	movs	r3, #128	; 0x80
 8004914:	035b      	lsls	r3, r3, #13
 8004916:	429a      	cmp	r2, r3
 8004918:	d204      	bcs.n	8004924 <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004920:	60da      	str	r2, [r3, #12]
 8004922:	e0de      	b.n	8004ae2 <UART_SetConfig+0x582>
        }
        else
        {
          ret = HAL_ERROR;
 8004924:	231a      	movs	r3, #26
 8004926:	2220      	movs	r2, #32
 8004928:	4694      	mov	ip, r2
 800492a:	44bc      	add	ip, r7
 800492c:	4463      	add	r3, ip
 800492e:	2201      	movs	r2, #1
 8004930:	701a      	strb	r2, [r3, #0]
 8004932:	e0d6      	b.n	8004ae2 <UART_SetConfig+0x582>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	69da      	ldr	r2, [r3, #28]
 8004938:	2380      	movs	r3, #128	; 0x80
 800493a:	021b      	lsls	r3, r3, #8
 800493c:	429a      	cmp	r2, r3
 800493e:	d000      	beq.n	8004942 <UART_SetConfig+0x3e2>
 8004940:	e074      	b.n	8004a2c <UART_SetConfig+0x4cc>
  {
    switch (clocksource)
 8004942:	231b      	movs	r3, #27
 8004944:	2220      	movs	r2, #32
 8004946:	4694      	mov	ip, r2
 8004948:	44bc      	add	ip, r7
 800494a:	4463      	add	r3, ip
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	2b08      	cmp	r3, #8
 8004950:	d015      	beq.n	800497e <UART_SetConfig+0x41e>
 8004952:	dc18      	bgt.n	8004986 <UART_SetConfig+0x426>
 8004954:	2b04      	cmp	r3, #4
 8004956:	d00d      	beq.n	8004974 <UART_SetConfig+0x414>
 8004958:	dc15      	bgt.n	8004986 <UART_SetConfig+0x426>
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <UART_SetConfig+0x404>
 800495e:	2b02      	cmp	r3, #2
 8004960:	d005      	beq.n	800496e <UART_SetConfig+0x40e>
 8004962:	e010      	b.n	8004986 <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004964:	f7fe f9e8 	bl	8002d38 <HAL_RCC_GetPCLK1Freq>
 8004968:	0003      	movs	r3, r0
 800496a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800496c:	e015      	b.n	800499a <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800496e:	4b6a      	ldr	r3, [pc, #424]	; (8004b18 <UART_SetConfig+0x5b8>)
 8004970:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004972:	e012      	b.n	800499a <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004974:	f7fe f954 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8004978:	0003      	movs	r3, r0
 800497a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800497c:	e00d      	b.n	800499a <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800497e:	2380      	movs	r3, #128	; 0x80
 8004980:	021b      	lsls	r3, r3, #8
 8004982:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004984:	e009      	b.n	800499a <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800498a:	231a      	movs	r3, #26
 800498c:	2220      	movs	r2, #32
 800498e:	4694      	mov	ip, r2
 8004990:	44bc      	add	ip, r7
 8004992:	4463      	add	r3, ip
 8004994:	2201      	movs	r2, #1
 8004996:	701a      	strb	r2, [r3, #0]
        break;
 8004998:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800499a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800499c:	2b00      	cmp	r3, #0
 800499e:	d100      	bne.n	80049a2 <UART_SetConfig+0x442>
 80049a0:	e09f      	b.n	8004ae2 <UART_SetConfig+0x582>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049a6:	4b5b      	ldr	r3, [pc, #364]	; (8004b14 <UART_SetConfig+0x5b4>)
 80049a8:	0052      	lsls	r2, r2, #1
 80049aa:	5ad3      	ldrh	r3, [r2, r3]
 80049ac:	0019      	movs	r1, r3
 80049ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80049b0:	f7fb fba8 	bl	8000104 <__udivsi3>
 80049b4:	0003      	movs	r3, r0
 80049b6:	005a      	lsls	r2, r3, #1
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	085b      	lsrs	r3, r3, #1
 80049be:	18d2      	adds	r2, r2, r3
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	0019      	movs	r1, r3
 80049c6:	0010      	movs	r0, r2
 80049c8:	f7fb fb9c 	bl	8000104 <__udivsi3>
 80049cc:	0003      	movs	r3, r0
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	2b0f      	cmp	r3, #15
 80049d6:	d921      	bls.n	8004a1c <UART_SetConfig+0x4bc>
 80049d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049da:	2380      	movs	r3, #128	; 0x80
 80049dc:	025b      	lsls	r3, r3, #9
 80049de:	429a      	cmp	r2, r3
 80049e0:	d21c      	bcs.n	8004a1c <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	200e      	movs	r0, #14
 80049e8:	2420      	movs	r4, #32
 80049ea:	193b      	adds	r3, r7, r4
 80049ec:	181b      	adds	r3, r3, r0
 80049ee:	210f      	movs	r1, #15
 80049f0:	438a      	bics	r2, r1
 80049f2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f6:	085b      	lsrs	r3, r3, #1
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	2207      	movs	r2, #7
 80049fc:	4013      	ands	r3, r2
 80049fe:	b299      	uxth	r1, r3
 8004a00:	193b      	adds	r3, r7, r4
 8004a02:	181b      	adds	r3, r3, r0
 8004a04:	193a      	adds	r2, r7, r4
 8004a06:	1812      	adds	r2, r2, r0
 8004a08:	8812      	ldrh	r2, [r2, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	193a      	adds	r2, r7, r4
 8004a14:	1812      	adds	r2, r2, r0
 8004a16:	8812      	ldrh	r2, [r2, #0]
 8004a18:	60da      	str	r2, [r3, #12]
 8004a1a:	e062      	b.n	8004ae2 <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 8004a1c:	231a      	movs	r3, #26
 8004a1e:	2220      	movs	r2, #32
 8004a20:	4694      	mov	ip, r2
 8004a22:	44bc      	add	ip, r7
 8004a24:	4463      	add	r3, ip
 8004a26:	2201      	movs	r2, #1
 8004a28:	701a      	strb	r2, [r3, #0]
 8004a2a:	e05a      	b.n	8004ae2 <UART_SetConfig+0x582>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a2c:	231b      	movs	r3, #27
 8004a2e:	2220      	movs	r2, #32
 8004a30:	4694      	mov	ip, r2
 8004a32:	44bc      	add	ip, r7
 8004a34:	4463      	add	r3, ip
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d015      	beq.n	8004a68 <UART_SetConfig+0x508>
 8004a3c:	dc18      	bgt.n	8004a70 <UART_SetConfig+0x510>
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d00d      	beq.n	8004a5e <UART_SetConfig+0x4fe>
 8004a42:	dc15      	bgt.n	8004a70 <UART_SetConfig+0x510>
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d002      	beq.n	8004a4e <UART_SetConfig+0x4ee>
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d005      	beq.n	8004a58 <UART_SetConfig+0x4f8>
 8004a4c:	e010      	b.n	8004a70 <UART_SetConfig+0x510>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a4e:	f7fe f973 	bl	8002d38 <HAL_RCC_GetPCLK1Freq>
 8004a52:	0003      	movs	r3, r0
 8004a54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a56:	e015      	b.n	8004a84 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a58:	4b2f      	ldr	r3, [pc, #188]	; (8004b18 <UART_SetConfig+0x5b8>)
 8004a5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a5c:	e012      	b.n	8004a84 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a5e:	f7fe f8df 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8004a62:	0003      	movs	r3, r0
 8004a64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a66:	e00d      	b.n	8004a84 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a68:	2380      	movs	r3, #128	; 0x80
 8004a6a:	021b      	lsls	r3, r3, #8
 8004a6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a6e:	e009      	b.n	8004a84 <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004a74:	231a      	movs	r3, #26
 8004a76:	2220      	movs	r2, #32
 8004a78:	4694      	mov	ip, r2
 8004a7a:	44bc      	add	ip, r7
 8004a7c:	4463      	add	r3, ip
 8004a7e:	2201      	movs	r2, #1
 8004a80:	701a      	strb	r2, [r3, #0]
        break;
 8004a82:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d02b      	beq.n	8004ae2 <UART_SetConfig+0x582>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a8e:	4b21      	ldr	r3, [pc, #132]	; (8004b14 <UART_SetConfig+0x5b4>)
 8004a90:	0052      	lsls	r2, r2, #1
 8004a92:	5ad3      	ldrh	r3, [r2, r3]
 8004a94:	0019      	movs	r1, r3
 8004a96:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004a98:	f7fb fb34 	bl	8000104 <__udivsi3>
 8004a9c:	0003      	movs	r3, r0
 8004a9e:	001a      	movs	r2, r3
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	085b      	lsrs	r3, r3, #1
 8004aa6:	18d2      	adds	r2, r2, r3
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	0019      	movs	r1, r3
 8004aae:	0010      	movs	r0, r2
 8004ab0:	f7fb fb28 	bl	8000104 <__udivsi3>
 8004ab4:	0003      	movs	r3, r0
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abc:	2b0f      	cmp	r3, #15
 8004abe:	d909      	bls.n	8004ad4 <UART_SetConfig+0x574>
 8004ac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ac2:	2380      	movs	r3, #128	; 0x80
 8004ac4:	025b      	lsls	r3, r3, #9
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d204      	bcs.n	8004ad4 <UART_SetConfig+0x574>
      {
        huart->Instance->BRR = usartdiv;
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad0:	60da      	str	r2, [r3, #12]
 8004ad2:	e006      	b.n	8004ae2 <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 8004ad4:	231a      	movs	r3, #26
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	4694      	mov	ip, r2
 8004ada:	44bc      	add	ip, r7
 8004adc:	4463      	add	r3, ip
 8004ade:	2201      	movs	r2, #1
 8004ae0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	226a      	movs	r2, #106	; 0x6a
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	2268      	movs	r2, #104	; 0x68
 8004aee:	2101      	movs	r1, #1
 8004af0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	2200      	movs	r2, #0
 8004af6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	2200      	movs	r2, #0
 8004afc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004afe:	231a      	movs	r3, #26
 8004b00:	2220      	movs	r2, #32
 8004b02:	4694      	mov	ip, r2
 8004b04:	44bc      	add	ip, r7
 8004b06:	4463      	add	r3, ip
 8004b08:	781b      	ldrb	r3, [r3, #0]
}
 8004b0a:	0018      	movs	r0, r3
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	b010      	add	sp, #64	; 0x40
 8004b10:	bdb0      	pop	{r4, r5, r7, pc}
 8004b12:	46c0      	nop			; (mov r8, r8)
 8004b14:	08005de8 	.word	0x08005de8
 8004b18:	00f42400 	.word	0x00f42400

08004b1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b28:	2201      	movs	r2, #1
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	d00b      	beq.n	8004b46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	4a4a      	ldr	r2, [pc, #296]	; (8004c60 <UART_AdvFeatureConfig+0x144>)
 8004b36:	4013      	ands	r3, r2
 8004b38:	0019      	movs	r1, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	d00b      	beq.n	8004b68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	4a43      	ldr	r2, [pc, #268]	; (8004c64 <UART_AdvFeatureConfig+0x148>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	0019      	movs	r1, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6c:	2204      	movs	r2, #4
 8004b6e:	4013      	ands	r3, r2
 8004b70:	d00b      	beq.n	8004b8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	4a3b      	ldr	r2, [pc, #236]	; (8004c68 <UART_AdvFeatureConfig+0x14c>)
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	0019      	movs	r1, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8e:	2208      	movs	r2, #8
 8004b90:	4013      	ands	r3, r2
 8004b92:	d00b      	beq.n	8004bac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	4a34      	ldr	r2, [pc, #208]	; (8004c6c <UART_AdvFeatureConfig+0x150>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	0019      	movs	r1, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb0:	2210      	movs	r2, #16
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	d00b      	beq.n	8004bce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	4a2c      	ldr	r2, [pc, #176]	; (8004c70 <UART_AdvFeatureConfig+0x154>)
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	0019      	movs	r1, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	d00b      	beq.n	8004bf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	4a25      	ldr	r2, [pc, #148]	; (8004c74 <UART_AdvFeatureConfig+0x158>)
 8004be0:	4013      	ands	r3, r2
 8004be2:	0019      	movs	r1, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf4:	2240      	movs	r2, #64	; 0x40
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	d01d      	beq.n	8004c36 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	4a1d      	ldr	r2, [pc, #116]	; (8004c78 <UART_AdvFeatureConfig+0x15c>)
 8004c02:	4013      	ands	r3, r2
 8004c04:	0019      	movs	r1, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c16:	2380      	movs	r3, #128	; 0x80
 8004c18:	035b      	lsls	r3, r3, #13
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d10b      	bne.n	8004c36 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	4a15      	ldr	r2, [pc, #84]	; (8004c7c <UART_AdvFeatureConfig+0x160>)
 8004c26:	4013      	ands	r3, r2
 8004c28:	0019      	movs	r1, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3a:	2280      	movs	r2, #128	; 0x80
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d00b      	beq.n	8004c58 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	4a0e      	ldr	r2, [pc, #56]	; (8004c80 <UART_AdvFeatureConfig+0x164>)
 8004c48:	4013      	ands	r3, r2
 8004c4a:	0019      	movs	r1, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	605a      	str	r2, [r3, #4]
  }
}
 8004c58:	46c0      	nop			; (mov r8, r8)
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	b002      	add	sp, #8
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	fffdffff 	.word	0xfffdffff
 8004c64:	fffeffff 	.word	0xfffeffff
 8004c68:	fffbffff 	.word	0xfffbffff
 8004c6c:	ffff7fff 	.word	0xffff7fff
 8004c70:	ffffefff 	.word	0xffffefff
 8004c74:	ffffdfff 	.word	0xffffdfff
 8004c78:	ffefffff 	.word	0xffefffff
 8004c7c:	ff9fffff 	.word	0xff9fffff
 8004c80:	fff7ffff 	.word	0xfff7ffff

08004c84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af02      	add	r7, sp, #8
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	228c      	movs	r2, #140	; 0x8c
 8004c90:	2100      	movs	r1, #0
 8004c92:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c94:	f7fc faf4 	bl	8001280 <HAL_GetTick>
 8004c98:	0003      	movs	r3, r0
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2208      	movs	r2, #8
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	2b08      	cmp	r3, #8
 8004ca8:	d10c      	bne.n	8004cc4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2280      	movs	r2, #128	; 0x80
 8004cae:	0391      	lsls	r1, r2, #14
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	4a18      	ldr	r2, [pc, #96]	; (8004d14 <UART_CheckIdleState+0x90>)
 8004cb4:	9200      	str	r2, [sp, #0]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f000 f82e 	bl	8004d18 <UART_WaitOnFlagUntilTimeout>
 8004cbc:	1e03      	subs	r3, r0, #0
 8004cbe:	d001      	beq.n	8004cc4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e023      	b.n	8004d0c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2204      	movs	r2, #4
 8004ccc:	4013      	ands	r3, r2
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d10c      	bne.n	8004cec <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2280      	movs	r2, #128	; 0x80
 8004cd6:	03d1      	lsls	r1, r2, #15
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	4a0e      	ldr	r2, [pc, #56]	; (8004d14 <UART_CheckIdleState+0x90>)
 8004cdc:	9200      	str	r2, [sp, #0]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f000 f81a 	bl	8004d18 <UART_WaitOnFlagUntilTimeout>
 8004ce4:	1e03      	subs	r3, r0, #0
 8004ce6:	d001      	beq.n	8004cec <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e00f      	b.n	8004d0c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2284      	movs	r2, #132	; 0x84
 8004cf0:	2120      	movs	r1, #32
 8004cf2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2288      	movs	r2, #136	; 0x88
 8004cf8:	2120      	movs	r1, #32
 8004cfa:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2280      	movs	r2, #128	; 0x80
 8004d06:	2100      	movs	r1, #0
 8004d08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	b004      	add	sp, #16
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	01ffffff 	.word	0x01ffffff

08004d18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b094      	sub	sp, #80	; 0x50
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	1dfb      	adds	r3, r7, #7
 8004d26:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d28:	e0a7      	b.n	8004e7a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	d100      	bne.n	8004d32 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004d30:	e0a3      	b.n	8004e7a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d32:	f7fc faa5 	bl	8001280 <HAL_GetTick>
 8004d36:	0002      	movs	r2, r0
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d302      	bcc.n	8004d48 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d13f      	bne.n	8004dc8 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d48:	f3ef 8310 	mrs	r3, PRIMASK
 8004d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d50:	647b      	str	r3, [r7, #68]	; 0x44
 8004d52:	2301      	movs	r3, #1
 8004d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d58:	f383 8810 	msr	PRIMASK, r3
}
 8004d5c:	46c0      	nop			; (mov r8, r8)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	494e      	ldr	r1, [pc, #312]	; (8004ea4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004d6a:	400a      	ands	r2, r1
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d70:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	f383 8810 	msr	PRIMASK, r3
}
 8004d78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d7e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d82:	643b      	str	r3, [r7, #64]	; 0x40
 8004d84:	2301      	movs	r3, #1
 8004d86:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8a:	f383 8810 	msr	PRIMASK, r3
}
 8004d8e:	46c0      	nop			; (mov r8, r8)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689a      	ldr	r2, [r3, #8]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	438a      	bics	r2, r1
 8004d9e:	609a      	str	r2, [r3, #8]
 8004da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004da6:	f383 8810 	msr	PRIMASK, r3
}
 8004daa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2284      	movs	r2, #132	; 0x84
 8004db0:	2120      	movs	r1, #32
 8004db2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2288      	movs	r2, #136	; 0x88
 8004db8:	2120      	movs	r1, #32
 8004dba:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2280      	movs	r2, #128	; 0x80
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e069      	b.n	8004e9c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2204      	movs	r2, #4
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	d052      	beq.n	8004e7a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	69da      	ldr	r2, [r3, #28]
 8004dda:	2380      	movs	r3, #128	; 0x80
 8004ddc:	011b      	lsls	r3, r3, #4
 8004dde:	401a      	ands	r2, r3
 8004de0:	2380      	movs	r3, #128	; 0x80
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d148      	bne.n	8004e7a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2280      	movs	r2, #128	; 0x80
 8004dee:	0112      	lsls	r2, r2, #4
 8004df0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004df2:	f3ef 8310 	mrs	r3, PRIMASK
 8004df6:	613b      	str	r3, [r7, #16]
  return(result);
 8004df8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f383 8810 	msr	PRIMASK, r3
}
 8004e06:	46c0      	nop			; (mov r8, r8)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4924      	ldr	r1, [pc, #144]	; (8004ea4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004e14:	400a      	ands	r2, r1
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e1a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	f383 8810 	msr	PRIMASK, r3
}
 8004e22:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e24:	f3ef 8310 	mrs	r3, PRIMASK
 8004e28:	61fb      	str	r3, [r7, #28]
  return(result);
 8004e2a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e2e:	2301      	movs	r3, #1
 8004e30:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	f383 8810 	msr	PRIMASK, r3
}
 8004e38:	46c0      	nop			; (mov r8, r8)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2101      	movs	r1, #1
 8004e46:	438a      	bics	r2, r1
 8004e48:	609a      	str	r2, [r3, #8]
 8004e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	f383 8810 	msr	PRIMASK, r3
}
 8004e54:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2284      	movs	r2, #132	; 0x84
 8004e5a:	2120      	movs	r1, #32
 8004e5c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2288      	movs	r2, #136	; 0x88
 8004e62:	2120      	movs	r1, #32
 8004e64:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	228c      	movs	r2, #140	; 0x8c
 8004e6a:	2120      	movs	r1, #32
 8004e6c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2280      	movs	r2, #128	; 0x80
 8004e72:	2100      	movs	r1, #0
 8004e74:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e010      	b.n	8004e9c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	4013      	ands	r3, r2
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	425a      	negs	r2, r3
 8004e8a:	4153      	adcs	r3, r2
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	001a      	movs	r2, r3
 8004e90:	1dfb      	adds	r3, r7, #7
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d100      	bne.n	8004e9a <UART_WaitOnFlagUntilTimeout+0x182>
 8004e98:	e747      	b.n	8004d2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	b014      	add	sp, #80	; 0x50
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	fffffe5f 	.word	0xfffffe5f

08004ea8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b094      	sub	sp, #80	; 0x50
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	1dbb      	adds	r3, r7, #6
 8004eb4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	1dba      	adds	r2, r7, #6
 8004ec0:	215c      	movs	r1, #92	; 0x5c
 8004ec2:	8812      	ldrh	r2, [r2, #0]
 8004ec4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	1dba      	adds	r2, r7, #6
 8004eca:	215e      	movs	r1, #94	; 0x5e
 8004ecc:	8812      	ldrh	r2, [r2, #0]
 8004ece:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	2380      	movs	r3, #128	; 0x80
 8004edc:	015b      	lsls	r3, r3, #5
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d10d      	bne.n	8004efe <UART_Start_Receive_IT+0x56>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d104      	bne.n	8004ef4 <UART_Start_Receive_IT+0x4c>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2260      	movs	r2, #96	; 0x60
 8004eee:	496f      	ldr	r1, [pc, #444]	; (80050ac <UART_Start_Receive_IT+0x204>)
 8004ef0:	5299      	strh	r1, [r3, r2]
 8004ef2:	e02e      	b.n	8004f52 <UART_Start_Receive_IT+0xaa>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2260      	movs	r2, #96	; 0x60
 8004ef8:	21ff      	movs	r1, #255	; 0xff
 8004efa:	5299      	strh	r1, [r3, r2]
 8004efc:	e029      	b.n	8004f52 <UART_Start_Receive_IT+0xaa>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10d      	bne.n	8004f22 <UART_Start_Receive_IT+0x7a>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d104      	bne.n	8004f18 <UART_Start_Receive_IT+0x70>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2260      	movs	r2, #96	; 0x60
 8004f12:	21ff      	movs	r1, #255	; 0xff
 8004f14:	5299      	strh	r1, [r3, r2]
 8004f16:	e01c      	b.n	8004f52 <UART_Start_Receive_IT+0xaa>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2260      	movs	r2, #96	; 0x60
 8004f1c:	217f      	movs	r1, #127	; 0x7f
 8004f1e:	5299      	strh	r1, [r3, r2]
 8004f20:	e017      	b.n	8004f52 <UART_Start_Receive_IT+0xaa>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	689a      	ldr	r2, [r3, #8]
 8004f26:	2380      	movs	r3, #128	; 0x80
 8004f28:	055b      	lsls	r3, r3, #21
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d10d      	bne.n	8004f4a <UART_Start_Receive_IT+0xa2>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d104      	bne.n	8004f40 <UART_Start_Receive_IT+0x98>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2260      	movs	r2, #96	; 0x60
 8004f3a:	217f      	movs	r1, #127	; 0x7f
 8004f3c:	5299      	strh	r1, [r3, r2]
 8004f3e:	e008      	b.n	8004f52 <UART_Start_Receive_IT+0xaa>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2260      	movs	r2, #96	; 0x60
 8004f44:	213f      	movs	r1, #63	; 0x3f
 8004f46:	5299      	strh	r1, [r3, r2]
 8004f48:	e003      	b.n	8004f52 <UART_Start_Receive_IT+0xaa>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2260      	movs	r2, #96	; 0x60
 8004f4e:	2100      	movs	r1, #0
 8004f50:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	228c      	movs	r2, #140	; 0x8c
 8004f56:	2100      	movs	r1, #0
 8004f58:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2288      	movs	r2, #136	; 0x88
 8004f5e:	2122      	movs	r1, #34	; 0x22
 8004f60:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f62:	f3ef 8310 	mrs	r3, PRIMASK
 8004f66:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f72:	f383 8810 	msr	PRIMASK, r3
}
 8004f76:	46c0      	nop			; (mov r8, r8)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689a      	ldr	r2, [r3, #8]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2101      	movs	r1, #1
 8004f84:	430a      	orrs	r2, r1
 8004f86:	609a      	str	r2, [r3, #8]
 8004f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f8e:	f383 8810 	msr	PRIMASK, r3
}
 8004f92:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004f98:	2380      	movs	r3, #128	; 0x80
 8004f9a:	059b      	lsls	r3, r3, #22
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d150      	bne.n	8005042 <UART_Start_Receive_IT+0x19a>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2268      	movs	r2, #104	; 0x68
 8004fa4:	5a9b      	ldrh	r3, [r3, r2]
 8004fa6:	1dba      	adds	r2, r7, #6
 8004fa8:	8812      	ldrh	r2, [r2, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d349      	bcc.n	8005042 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	2380      	movs	r3, #128	; 0x80
 8004fb4:	015b      	lsls	r3, r3, #5
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d107      	bne.n	8004fca <UART_Start_Receive_IT+0x122>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d103      	bne.n	8004fca <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4a3a      	ldr	r2, [pc, #232]	; (80050b0 <UART_Start_Receive_IT+0x208>)
 8004fc6:	671a      	str	r2, [r3, #112]	; 0x70
 8004fc8:	e002      	b.n	8004fd0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4a39      	ldr	r2, [pc, #228]	; (80050b4 <UART_Start_Receive_IT+0x20c>)
 8004fce:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2280      	movs	r2, #128	; 0x80
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8004fdc:	61fb      	str	r3, [r7, #28]
  return(result);
 8004fde:	69fb      	ldr	r3, [r7, #28]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fe0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	f383 8810 	msr	PRIMASK, r3
}
 8004fec:	46c0      	nop			; (mov r8, r8)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2180      	movs	r1, #128	; 0x80
 8004ffa:	0049      	lsls	r1, r1, #1
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005002:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	f383 8810 	msr	PRIMASK, r3
}
 800500a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800500c:	f3ef 8310 	mrs	r3, PRIMASK
 8005010:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005012:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005014:	647b      	str	r3, [r7, #68]	; 0x44
 8005016:	2301      	movs	r3, #1
 8005018:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800501a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501c:	f383 8810 	msr	PRIMASK, r3
}
 8005020:	46c0      	nop			; (mov r8, r8)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2180      	movs	r1, #128	; 0x80
 800502e:	0549      	lsls	r1, r1, #21
 8005030:	430a      	orrs	r2, r1
 8005032:	609a      	str	r2, [r3, #8]
 8005034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005036:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503a:	f383 8810 	msr	PRIMASK, r3
}
 800503e:	46c0      	nop			; (mov r8, r8)
 8005040:	e02e      	b.n	80050a0 <UART_Start_Receive_IT+0x1f8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	689a      	ldr	r2, [r3, #8]
 8005046:	2380      	movs	r3, #128	; 0x80
 8005048:	015b      	lsls	r3, r3, #5
 800504a:	429a      	cmp	r2, r3
 800504c:	d107      	bne.n	800505e <UART_Start_Receive_IT+0x1b6>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d103      	bne.n	800505e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	4a17      	ldr	r2, [pc, #92]	; (80050b8 <UART_Start_Receive_IT+0x210>)
 800505a:	671a      	str	r2, [r3, #112]	; 0x70
 800505c:	e002      	b.n	8005064 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4a16      	ldr	r2, [pc, #88]	; (80050bc <UART_Start_Receive_IT+0x214>)
 8005062:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2280      	movs	r2, #128	; 0x80
 8005068:	2100      	movs	r1, #0
 800506a:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800506c:	f3ef 8310 	mrs	r3, PRIMASK
 8005070:	613b      	str	r3, [r7, #16]
  return(result);
 8005072:	693b      	ldr	r3, [r7, #16]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005074:	643b      	str	r3, [r7, #64]	; 0x40
 8005076:	2301      	movs	r3, #1
 8005078:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f383 8810 	msr	PRIMASK, r3
}
 8005080:	46c0      	nop			; (mov r8, r8)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2190      	movs	r1, #144	; 0x90
 800508e:	0049      	lsls	r1, r1, #1
 8005090:	430a      	orrs	r2, r1
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005096:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	f383 8810 	msr	PRIMASK, r3
}
 800509e:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	0018      	movs	r0, r3
 80050a4:	46bd      	mov	sp, r7
 80050a6:	b014      	add	sp, #80	; 0x50
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	46c0      	nop			; (mov r8, r8)
 80050ac:	000001ff 	.word	0x000001ff
 80050b0:	080057d1 	.word	0x080057d1
 80050b4:	080054ed 	.word	0x080054ed
 80050b8:	08005381 	.word	0x08005381
 80050bc:	08005215 	.word	0x08005215

080050c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08e      	sub	sp, #56	; 0x38
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050c8:	f3ef 8310 	mrs	r3, PRIMASK
 80050cc:	617b      	str	r3, [r7, #20]
  return(result);
 80050ce:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050d0:	637b      	str	r3, [r7, #52]	; 0x34
 80050d2:	2301      	movs	r3, #1
 80050d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	f383 8810 	msr	PRIMASK, r3
}
 80050dc:	46c0      	nop			; (mov r8, r8)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4926      	ldr	r1, [pc, #152]	; (8005184 <UART_EndRxTransfer+0xc4>)
 80050ea:	400a      	ands	r2, r1
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	f383 8810 	msr	PRIMASK, r3
}
 80050f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050fa:	f3ef 8310 	mrs	r3, PRIMASK
 80050fe:	623b      	str	r3, [r7, #32]
  return(result);
 8005100:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005102:	633b      	str	r3, [r7, #48]	; 0x30
 8005104:	2301      	movs	r3, #1
 8005106:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	f383 8810 	msr	PRIMASK, r3
}
 800510e:	46c0      	nop			; (mov r8, r8)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689a      	ldr	r2, [r3, #8]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	491b      	ldr	r1, [pc, #108]	; (8005188 <UART_EndRxTransfer+0xc8>)
 800511c:	400a      	ands	r2, r1
 800511e:	609a      	str	r2, [r3, #8]
 8005120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005122:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005126:	f383 8810 	msr	PRIMASK, r3
}
 800512a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005130:	2b01      	cmp	r3, #1
 8005132:	d118      	bne.n	8005166 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005134:	f3ef 8310 	mrs	r3, PRIMASK
 8005138:	60bb      	str	r3, [r7, #8]
  return(result);
 800513a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800513c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800513e:	2301      	movs	r3, #1
 8005140:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f383 8810 	msr	PRIMASK, r3
}
 8005148:	46c0      	nop			; (mov r8, r8)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2110      	movs	r1, #16
 8005156:	438a      	bics	r2, r1
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f383 8810 	msr	PRIMASK, r3
}
 8005164:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2288      	movs	r2, #136	; 0x88
 800516a:	2120      	movs	r1, #32
 800516c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	671a      	str	r2, [r3, #112]	; 0x70
}
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	46bd      	mov	sp, r7
 800517e:	b00e      	add	sp, #56	; 0x38
 8005180:	bd80      	pop	{r7, pc}
 8005182:	46c0      	nop			; (mov r8, r8)
 8005184:	fffffedf 	.word	0xfffffedf
 8005188:	effffffe 	.word	0xeffffffe

0800518c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005198:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	225e      	movs	r2, #94	; 0x5e
 800519e:	2100      	movs	r1, #0
 80051a0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2256      	movs	r2, #86	; 0x56
 80051a6:	2100      	movs	r1, #0
 80051a8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	0018      	movs	r0, r3
 80051ae:	f7ff f9c3 	bl	8004538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051b2:	46c0      	nop			; (mov r8, r8)
 80051b4:	46bd      	mov	sp, r7
 80051b6:	b004      	add	sp, #16
 80051b8:	bd80      	pop	{r7, pc}

080051ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b086      	sub	sp, #24
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051c2:	f3ef 8310 	mrs	r3, PRIMASK
 80051c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80051c8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	2301      	movs	r3, #1
 80051ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f383 8810 	msr	PRIMASK, r3
}
 80051d6:	46c0      	nop			; (mov r8, r8)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2140      	movs	r1, #64	; 0x40
 80051e4:	438a      	bics	r2, r1
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f383 8810 	msr	PRIMASK, r3
}
 80051f2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2284      	movs	r2, #132	; 0x84
 80051f8:	2120      	movs	r1, #32
 80051fa:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	0018      	movs	r0, r3
 8005206:	f7ff f987 	bl	8004518 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800520a:	46c0      	nop			; (mov r8, r8)
 800520c:	46bd      	mov	sp, r7
 800520e:	b006      	add	sp, #24
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b090      	sub	sp, #64	; 0x40
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800521c:	203e      	movs	r0, #62	; 0x3e
 800521e:	183b      	adds	r3, r7, r0
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	2160      	movs	r1, #96	; 0x60
 8005224:	5a52      	ldrh	r2, [r2, r1]
 8005226:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2288      	movs	r2, #136	; 0x88
 800522c:	589b      	ldr	r3, [r3, r2]
 800522e:	2b22      	cmp	r3, #34	; 0x22
 8005230:	d000      	beq.n	8005234 <UART_RxISR_8BIT+0x20>
 8005232:	e097      	b.n	8005364 <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800523a:	213c      	movs	r1, #60	; 0x3c
 800523c:	187b      	adds	r3, r7, r1
 800523e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005240:	187b      	adds	r3, r7, r1
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	b2da      	uxtb	r2, r3
 8005246:	183b      	adds	r3, r7, r0
 8005248:	881b      	ldrh	r3, [r3, #0]
 800524a:	b2d9      	uxtb	r1, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005250:	400a      	ands	r2, r1
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	225e      	movs	r2, #94	; 0x5e
 8005264:	5a9b      	ldrh	r3, [r3, r2]
 8005266:	b29b      	uxth	r3, r3
 8005268:	3b01      	subs	r3, #1
 800526a:	b299      	uxth	r1, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	225e      	movs	r2, #94	; 0x5e
 8005270:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	225e      	movs	r2, #94	; 0x5e
 8005276:	5a9b      	ldrh	r3, [r3, r2]
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d000      	beq.n	8005280 <UART_RxISR_8BIT+0x6c>
 800527e:	e079      	b.n	8005374 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005280:	f3ef 8310 	mrs	r3, PRIMASK
 8005284:	61bb      	str	r3, [r7, #24]
  return(result);
 8005286:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005288:	63bb      	str	r3, [r7, #56]	; 0x38
 800528a:	2301      	movs	r3, #1
 800528c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	f383 8810 	msr	PRIMASK, r3
}
 8005294:	46c0      	nop			; (mov r8, r8)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4936      	ldr	r1, [pc, #216]	; (800537c <UART_RxISR_8BIT+0x168>)
 80052a2:	400a      	ands	r2, r1
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	f383 8810 	msr	PRIMASK, r3
}
 80052b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052b2:	f3ef 8310 	mrs	r3, PRIMASK
 80052b6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ba:	637b      	str	r3, [r7, #52]	; 0x34
 80052bc:	2301      	movs	r3, #1
 80052be:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c2:	f383 8810 	msr	PRIMASK, r3
}
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2101      	movs	r1, #1
 80052d4:	438a      	bics	r2, r1
 80052d6:	609a      	str	r2, [r3, #8]
 80052d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052da:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052de:	f383 8810 	msr	PRIMASK, r3
}
 80052e2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2288      	movs	r2, #136	; 0x88
 80052e8:	2120      	movs	r1, #32
 80052ea:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d12f      	bne.n	800535a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005300:	f3ef 8310 	mrs	r3, PRIMASK
 8005304:	60fb      	str	r3, [r7, #12]
  return(result);
 8005306:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005308:	633b      	str	r3, [r7, #48]	; 0x30
 800530a:	2301      	movs	r3, #1
 800530c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f383 8810 	msr	PRIMASK, r3
}
 8005314:	46c0      	nop			; (mov r8, r8)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2110      	movs	r1, #16
 8005322:	438a      	bics	r2, r1
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005328:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f383 8810 	msr	PRIMASK, r3
}
 8005330:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	2210      	movs	r2, #16
 800533a:	4013      	ands	r3, r2
 800533c:	2b10      	cmp	r3, #16
 800533e:	d103      	bne.n	8005348 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2210      	movs	r2, #16
 8005346:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	225c      	movs	r2, #92	; 0x5c
 800534c:	5a9a      	ldrh	r2, [r3, r2]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	0011      	movs	r1, r2
 8005352:	0018      	movs	r0, r3
 8005354:	f7ff f8f8 	bl	8004548 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005358:	e00c      	b.n	8005374 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	0018      	movs	r0, r3
 800535e:	f7ff f8e3 	bl	8004528 <HAL_UART_RxCpltCallback>
}
 8005362:	e007      	b.n	8005374 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699a      	ldr	r2, [r3, #24]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2108      	movs	r1, #8
 8005370:	430a      	orrs	r2, r1
 8005372:	619a      	str	r2, [r3, #24]
}
 8005374:	46c0      	nop			; (mov r8, r8)
 8005376:	46bd      	mov	sp, r7
 8005378:	b010      	add	sp, #64	; 0x40
 800537a:	bd80      	pop	{r7, pc}
 800537c:	fffffedf 	.word	0xfffffedf

08005380 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b090      	sub	sp, #64	; 0x40
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005388:	203e      	movs	r0, #62	; 0x3e
 800538a:	183b      	adds	r3, r7, r0
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	2160      	movs	r1, #96	; 0x60
 8005390:	5a52      	ldrh	r2, [r2, r1]
 8005392:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2288      	movs	r2, #136	; 0x88
 8005398:	589b      	ldr	r3, [r3, r2]
 800539a:	2b22      	cmp	r3, #34	; 0x22
 800539c:	d000      	beq.n	80053a0 <UART_RxISR_16BIT+0x20>
 800539e:	e097      	b.n	80054d0 <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053a6:	213c      	movs	r1, #60	; 0x3c
 80053a8:	187b      	adds	r3, r7, r1
 80053aa:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b0:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80053b2:	187b      	adds	r3, r7, r1
 80053b4:	183a      	adds	r2, r7, r0
 80053b6:	881b      	ldrh	r3, [r3, #0]
 80053b8:	8812      	ldrh	r2, [r2, #0]
 80053ba:	4013      	ands	r3, r2
 80053bc:	b29a      	uxth	r2, r3
 80053be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c6:	1c9a      	adds	r2, r3, #2
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	225e      	movs	r2, #94	; 0x5e
 80053d0:	5a9b      	ldrh	r3, [r3, r2]
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b299      	uxth	r1, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	225e      	movs	r2, #94	; 0x5e
 80053dc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	225e      	movs	r2, #94	; 0x5e
 80053e2:	5a9b      	ldrh	r3, [r3, r2]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d000      	beq.n	80053ec <UART_RxISR_16BIT+0x6c>
 80053ea:	e079      	b.n	80054e0 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ec:	f3ef 8310 	mrs	r3, PRIMASK
 80053f0:	617b      	str	r3, [r7, #20]
  return(result);
 80053f2:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053f4:	637b      	str	r3, [r7, #52]	; 0x34
 80053f6:	2301      	movs	r3, #1
 80053f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	f383 8810 	msr	PRIMASK, r3
}
 8005400:	46c0      	nop			; (mov r8, r8)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4936      	ldr	r1, [pc, #216]	; (80054e8 <UART_RxISR_16BIT+0x168>)
 800540e:	400a      	ands	r2, r1
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005414:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	f383 8810 	msr	PRIMASK, r3
}
 800541c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800541e:	f3ef 8310 	mrs	r3, PRIMASK
 8005422:	623b      	str	r3, [r7, #32]
  return(result);
 8005424:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005426:	633b      	str	r3, [r7, #48]	; 0x30
 8005428:	2301      	movs	r3, #1
 800542a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	f383 8810 	msr	PRIMASK, r3
}
 8005432:	46c0      	nop			; (mov r8, r8)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2101      	movs	r1, #1
 8005440:	438a      	bics	r2, r1
 8005442:	609a      	str	r2, [r3, #8]
 8005444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005446:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544a:	f383 8810 	msr	PRIMASK, r3
}
 800544e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2288      	movs	r2, #136	; 0x88
 8005454:	2120      	movs	r1, #32
 8005456:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005462:	2b01      	cmp	r3, #1
 8005464:	d12f      	bne.n	80054c6 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800546c:	f3ef 8310 	mrs	r3, PRIMASK
 8005470:	60bb      	str	r3, [r7, #8]
  return(result);
 8005472:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005474:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005476:	2301      	movs	r3, #1
 8005478:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f383 8810 	msr	PRIMASK, r3
}
 8005480:	46c0      	nop			; (mov r8, r8)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2110      	movs	r1, #16
 800548e:	438a      	bics	r2, r1
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005494:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f383 8810 	msr	PRIMASK, r3
}
 800549c:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	69db      	ldr	r3, [r3, #28]
 80054a4:	2210      	movs	r2, #16
 80054a6:	4013      	ands	r3, r2
 80054a8:	2b10      	cmp	r3, #16
 80054aa:	d103      	bne.n	80054b4 <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2210      	movs	r2, #16
 80054b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	225c      	movs	r2, #92	; 0x5c
 80054b8:	5a9a      	ldrh	r2, [r3, r2]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	0011      	movs	r1, r2
 80054be:	0018      	movs	r0, r3
 80054c0:	f7ff f842 	bl	8004548 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054c4:	e00c      	b.n	80054e0 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	0018      	movs	r0, r3
 80054ca:	f7ff f82d 	bl	8004528 <HAL_UART_RxCpltCallback>
}
 80054ce:	e007      	b.n	80054e0 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699a      	ldr	r2, [r3, #24]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2108      	movs	r1, #8
 80054dc:	430a      	orrs	r2, r1
 80054de:	619a      	str	r2, [r3, #24]
}
 80054e0:	46c0      	nop			; (mov r8, r8)
 80054e2:	46bd      	mov	sp, r7
 80054e4:	b010      	add	sp, #64	; 0x40
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	fffffedf 	.word	0xfffffedf

080054ec <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b09c      	sub	sp, #112	; 0x70
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80054f4:	236a      	movs	r3, #106	; 0x6a
 80054f6:	18fb      	adds	r3, r7, r3
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	2160      	movs	r1, #96	; 0x60
 80054fc:	5a52      	ldrh	r2, [r2, r1]
 80054fe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2288      	movs	r2, #136	; 0x88
 800551c:	589b      	ldr	r3, [r3, r2]
 800551e:	2b22      	cmp	r3, #34	; 0x22
 8005520:	d000      	beq.n	8005524 <UART_RxISR_8BIT_FIFOEN+0x38>
 8005522:	e141      	b.n	80057a8 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005524:	235e      	movs	r3, #94	; 0x5e
 8005526:	18fb      	adds	r3, r7, r3
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	2168      	movs	r1, #104	; 0x68
 800552c:	5a52      	ldrh	r2, [r2, r1]
 800552e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005530:	e0e8      	b.n	8005704 <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005538:	215c      	movs	r1, #92	; 0x5c
 800553a:	187b      	adds	r3, r7, r1
 800553c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800553e:	187b      	adds	r3, r7, r1
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	b2da      	uxtb	r2, r3
 8005544:	236a      	movs	r3, #106	; 0x6a
 8005546:	18fb      	adds	r3, r7, r3
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	b2d9      	uxtb	r1, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005550:	400a      	ands	r2, r1
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800555a:	1c5a      	adds	r2, r3, #1
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	225e      	movs	r2, #94	; 0x5e
 8005564:	5a9b      	ldrh	r3, [r3, r2]
 8005566:	b29b      	uxth	r3, r3
 8005568:	3b01      	subs	r3, #1
 800556a:	b299      	uxth	r1, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	225e      	movs	r2, #94	; 0x5e
 8005570:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800557a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800557c:	2207      	movs	r2, #7
 800557e:	4013      	ands	r3, r2
 8005580:	d049      	beq.n	8005616 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005584:	2201      	movs	r2, #1
 8005586:	4013      	ands	r3, r2
 8005588:	d010      	beq.n	80055ac <UART_RxISR_8BIT_FIFOEN+0xc0>
 800558a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800558c:	2380      	movs	r3, #128	; 0x80
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	4013      	ands	r3, r2
 8005592:	d00b      	beq.n	80055ac <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2201      	movs	r2, #1
 800559a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	228c      	movs	r2, #140	; 0x8c
 80055a0:	589b      	ldr	r3, [r3, r2]
 80055a2:	2201      	movs	r2, #1
 80055a4:	431a      	orrs	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	218c      	movs	r1, #140	; 0x8c
 80055aa:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ae:	2202      	movs	r2, #2
 80055b0:	4013      	ands	r3, r2
 80055b2:	d00f      	beq.n	80055d4 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80055b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055b6:	2201      	movs	r2, #1
 80055b8:	4013      	ands	r3, r2
 80055ba:	d00b      	beq.n	80055d4 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2202      	movs	r2, #2
 80055c2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	228c      	movs	r2, #140	; 0x8c
 80055c8:	589b      	ldr	r3, [r3, r2]
 80055ca:	2204      	movs	r2, #4
 80055cc:	431a      	orrs	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	218c      	movs	r1, #140	; 0x8c
 80055d2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d6:	2204      	movs	r2, #4
 80055d8:	4013      	ands	r3, r2
 80055da:	d00f      	beq.n	80055fc <UART_RxISR_8BIT_FIFOEN+0x110>
 80055dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055de:	2201      	movs	r2, #1
 80055e0:	4013      	ands	r3, r2
 80055e2:	d00b      	beq.n	80055fc <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2204      	movs	r2, #4
 80055ea:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	228c      	movs	r2, #140	; 0x8c
 80055f0:	589b      	ldr	r3, [r3, r2]
 80055f2:	2202      	movs	r2, #2
 80055f4:	431a      	orrs	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	218c      	movs	r1, #140	; 0x8c
 80055fa:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	228c      	movs	r2, #140	; 0x8c
 8005600:	589b      	ldr	r3, [r3, r2]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d007      	beq.n	8005616 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	0018      	movs	r0, r3
 800560a:	f7fe ff95 	bl	8004538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	228c      	movs	r2, #140	; 0x8c
 8005612:	2100      	movs	r1, #0
 8005614:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	225e      	movs	r2, #94	; 0x5e
 800561a:	5a9b      	ldrh	r3, [r3, r2]
 800561c:	b29b      	uxth	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d170      	bne.n	8005704 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005622:	f3ef 8310 	mrs	r3, PRIMASK
 8005626:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800562a:	65bb      	str	r3, [r7, #88]	; 0x58
 800562c:	2301      	movs	r3, #1
 800562e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005632:	f383 8810 	msr	PRIMASK, r3
}
 8005636:	46c0      	nop			; (mov r8, r8)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	495f      	ldr	r1, [pc, #380]	; (80057c0 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 8005644:	400a      	ands	r2, r1
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800564a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800564c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564e:	f383 8810 	msr	PRIMASK, r3
}
 8005652:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005654:	f3ef 8310 	mrs	r3, PRIMASK
 8005658:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800565a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800565c:	657b      	str	r3, [r7, #84]	; 0x54
 800565e:	2301      	movs	r3, #1
 8005660:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005664:	f383 8810 	msr	PRIMASK, r3
}
 8005668:	46c0      	nop			; (mov r8, r8)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689a      	ldr	r2, [r3, #8]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4953      	ldr	r1, [pc, #332]	; (80057c4 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 8005676:	400a      	ands	r2, r1
 8005678:	609a      	str	r2, [r3, #8]
 800567a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800567c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800567e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005680:	f383 8810 	msr	PRIMASK, r3
}
 8005684:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2288      	movs	r2, #136	; 0x88
 800568a:	2120      	movs	r1, #32
 800568c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005698:	2b01      	cmp	r3, #1
 800569a:	d12f      	bne.n	80056fc <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056a2:	f3ef 8310 	mrs	r3, PRIMASK
 80056a6:	623b      	str	r3, [r7, #32]
  return(result);
 80056a8:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056aa:	653b      	str	r3, [r7, #80]	; 0x50
 80056ac:	2301      	movs	r3, #1
 80056ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	f383 8810 	msr	PRIMASK, r3
}
 80056b6:	46c0      	nop			; (mov r8, r8)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2110      	movs	r1, #16
 80056c4:	438a      	bics	r2, r1
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056ca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ce:	f383 8810 	msr	PRIMASK, r3
}
 80056d2:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	2210      	movs	r2, #16
 80056dc:	4013      	ands	r3, r2
 80056de:	2b10      	cmp	r3, #16
 80056e0:	d103      	bne.n	80056ea <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2210      	movs	r2, #16
 80056e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	225c      	movs	r2, #92	; 0x5c
 80056ee:	5a9a      	ldrh	r2, [r3, r2]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	0011      	movs	r1, r2
 80056f4:	0018      	movs	r0, r3
 80056f6:	f7fe ff27 	bl	8004548 <HAL_UARTEx_RxEventCallback>
 80056fa:	e003      	b.n	8005704 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	0018      	movs	r0, r3
 8005700:	f7fe ff12 	bl	8004528 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005704:	235e      	movs	r3, #94	; 0x5e
 8005706:	18fb      	adds	r3, r7, r3
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d004      	beq.n	8005718 <UART_RxISR_8BIT_FIFOEN+0x22c>
 800570e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005710:	2220      	movs	r2, #32
 8005712:	4013      	ands	r3, r2
 8005714:	d000      	beq.n	8005718 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8005716:	e70c      	b.n	8005532 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005718:	204e      	movs	r0, #78	; 0x4e
 800571a:	183b      	adds	r3, r7, r0
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	215e      	movs	r1, #94	; 0x5e
 8005720:	5a52      	ldrh	r2, [r2, r1]
 8005722:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005724:	0001      	movs	r1, r0
 8005726:	187b      	adds	r3, r7, r1
 8005728:	881b      	ldrh	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d044      	beq.n	80057b8 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2268      	movs	r2, #104	; 0x68
 8005732:	5a9b      	ldrh	r3, [r3, r2]
 8005734:	187a      	adds	r2, r7, r1
 8005736:	8812      	ldrh	r2, [r2, #0]
 8005738:	429a      	cmp	r2, r3
 800573a:	d23d      	bcs.n	80057b8 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800573c:	f3ef 8310 	mrs	r3, PRIMASK
 8005740:	60bb      	str	r3, [r7, #8]
  return(result);
 8005742:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005744:	64bb      	str	r3, [r7, #72]	; 0x48
 8005746:	2301      	movs	r3, #1
 8005748:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f383 8810 	msr	PRIMASK, r3
}
 8005750:	46c0      	nop			; (mov r8, r8)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	491a      	ldr	r1, [pc, #104]	; (80057c8 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 800575e:	400a      	ands	r2, r1
 8005760:	609a      	str	r2, [r3, #8]
 8005762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005764:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f383 8810 	msr	PRIMASK, r3
}
 800576c:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a16      	ldr	r2, [pc, #88]	; (80057cc <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8005772:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005774:	f3ef 8310 	mrs	r3, PRIMASK
 8005778:	617b      	str	r3, [r7, #20]
  return(result);
 800577a:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800577c:	647b      	str	r3, [r7, #68]	; 0x44
 800577e:	2301      	movs	r3, #1
 8005780:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	f383 8810 	msr	PRIMASK, r3
}
 8005788:	46c0      	nop			; (mov r8, r8)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2120      	movs	r1, #32
 8005796:	430a      	orrs	r2, r1
 8005798:	601a      	str	r2, [r3, #0]
 800579a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800579c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	f383 8810 	msr	PRIMASK, r3
}
 80057a4:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057a6:	e007      	b.n	80057b8 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	699a      	ldr	r2, [r3, #24]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2108      	movs	r1, #8
 80057b4:	430a      	orrs	r2, r1
 80057b6:	619a      	str	r2, [r3, #24]
}
 80057b8:	46c0      	nop			; (mov r8, r8)
 80057ba:	46bd      	mov	sp, r7
 80057bc:	b01c      	add	sp, #112	; 0x70
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	fffffeff 	.word	0xfffffeff
 80057c4:	effffffe 	.word	0xeffffffe
 80057c8:	efffffff 	.word	0xefffffff
 80057cc:	08005215 	.word	0x08005215

080057d0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b09e      	sub	sp, #120	; 0x78
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80057d8:	2372      	movs	r3, #114	; 0x72
 80057da:	18fb      	adds	r3, r7, r3
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	2160      	movs	r1, #96	; 0x60
 80057e0:	5a52      	ldrh	r2, [r2, r1]
 80057e2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2288      	movs	r2, #136	; 0x88
 8005800:	589b      	ldr	r3, [r3, r2]
 8005802:	2b22      	cmp	r3, #34	; 0x22
 8005804:	d000      	beq.n	8005808 <UART_RxISR_16BIT_FIFOEN+0x38>
 8005806:	e141      	b.n	8005a8c <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005808:	2366      	movs	r3, #102	; 0x66
 800580a:	18fb      	adds	r3, r7, r3
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	2168      	movs	r1, #104	; 0x68
 8005810:	5a52      	ldrh	r2, [r2, r1]
 8005812:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005814:	e0e8      	b.n	80059e8 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800581c:	2164      	movs	r1, #100	; 0x64
 800581e:	187b      	adds	r3, r7, r1
 8005820:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005826:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8005828:	187b      	adds	r3, r7, r1
 800582a:	2272      	movs	r2, #114	; 0x72
 800582c:	18ba      	adds	r2, r7, r2
 800582e:	881b      	ldrh	r3, [r3, #0]
 8005830:	8812      	ldrh	r2, [r2, #0]
 8005832:	4013      	ands	r3, r2
 8005834:	b29a      	uxth	r2, r3
 8005836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005838:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800583e:	1c9a      	adds	r2, r3, #2
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	225e      	movs	r2, #94	; 0x5e
 8005848:	5a9b      	ldrh	r3, [r3, r2]
 800584a:	b29b      	uxth	r3, r3
 800584c:	3b01      	subs	r3, #1
 800584e:	b299      	uxth	r1, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	225e      	movs	r2, #94	; 0x5e
 8005854:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	69db      	ldr	r3, [r3, #28]
 800585c:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800585e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005860:	2207      	movs	r2, #7
 8005862:	4013      	ands	r3, r2
 8005864:	d049      	beq.n	80058fa <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005868:	2201      	movs	r2, #1
 800586a:	4013      	ands	r3, r2
 800586c:	d010      	beq.n	8005890 <UART_RxISR_16BIT_FIFOEN+0xc0>
 800586e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005870:	2380      	movs	r3, #128	; 0x80
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	4013      	ands	r3, r2
 8005876:	d00b      	beq.n	8005890 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2201      	movs	r2, #1
 800587e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	228c      	movs	r2, #140	; 0x8c
 8005884:	589b      	ldr	r3, [r3, r2]
 8005886:	2201      	movs	r2, #1
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	218c      	movs	r1, #140	; 0x8c
 800588e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005892:	2202      	movs	r2, #2
 8005894:	4013      	ands	r3, r2
 8005896:	d00f      	beq.n	80058b8 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8005898:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800589a:	2201      	movs	r2, #1
 800589c:	4013      	ands	r3, r2
 800589e:	d00b      	beq.n	80058b8 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2202      	movs	r2, #2
 80058a6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	228c      	movs	r2, #140	; 0x8c
 80058ac:	589b      	ldr	r3, [r3, r2]
 80058ae:	2204      	movs	r2, #4
 80058b0:	431a      	orrs	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	218c      	movs	r1, #140	; 0x8c
 80058b6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058ba:	2204      	movs	r2, #4
 80058bc:	4013      	ands	r3, r2
 80058be:	d00f      	beq.n	80058e0 <UART_RxISR_16BIT_FIFOEN+0x110>
 80058c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058c2:	2201      	movs	r2, #1
 80058c4:	4013      	ands	r3, r2
 80058c6:	d00b      	beq.n	80058e0 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2204      	movs	r2, #4
 80058ce:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	228c      	movs	r2, #140	; 0x8c
 80058d4:	589b      	ldr	r3, [r3, r2]
 80058d6:	2202      	movs	r2, #2
 80058d8:	431a      	orrs	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	218c      	movs	r1, #140	; 0x8c
 80058de:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	228c      	movs	r2, #140	; 0x8c
 80058e4:	589b      	ldr	r3, [r3, r2]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d007      	beq.n	80058fa <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	0018      	movs	r0, r3
 80058ee:	f7fe fe23 	bl	8004538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	228c      	movs	r2, #140	; 0x8c
 80058f6:	2100      	movs	r1, #0
 80058f8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	225e      	movs	r2, #94	; 0x5e
 80058fe:	5a9b      	ldrh	r3, [r3, r2]
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d170      	bne.n	80059e8 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005906:	f3ef 8310 	mrs	r3, PRIMASK
 800590a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800590c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800590e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005910:	2301      	movs	r3, #1
 8005912:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005916:	f383 8810 	msr	PRIMASK, r3
}
 800591a:	46c0      	nop			; (mov r8, r8)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	495f      	ldr	r1, [pc, #380]	; (8005aa4 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8005928:	400a      	ands	r2, r1
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800592e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005932:	f383 8810 	msr	PRIMASK, r3
}
 8005936:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005938:	f3ef 8310 	mrs	r3, PRIMASK
 800593c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800593e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005940:	65bb      	str	r3, [r7, #88]	; 0x58
 8005942:	2301      	movs	r3, #1
 8005944:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005948:	f383 8810 	msr	PRIMASK, r3
}
 800594c:	46c0      	nop			; (mov r8, r8)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4953      	ldr	r1, [pc, #332]	; (8005aa8 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 800595a:	400a      	ands	r2, r1
 800595c:	609a      	str	r2, [r3, #8]
 800595e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005960:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005964:	f383 8810 	msr	PRIMASK, r3
}
 8005968:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2288      	movs	r2, #136	; 0x88
 800596e:	2120      	movs	r1, #32
 8005970:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800597c:	2b01      	cmp	r3, #1
 800597e:	d12f      	bne.n	80059e0 <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005986:	f3ef 8310 	mrs	r3, PRIMASK
 800598a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800598e:	657b      	str	r3, [r7, #84]	; 0x54
 8005990:	2301      	movs	r3, #1
 8005992:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005996:	f383 8810 	msr	PRIMASK, r3
}
 800599a:	46c0      	nop			; (mov r8, r8)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2110      	movs	r1, #16
 80059a8:	438a      	bics	r2, r1
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b2:	f383 8810 	msr	PRIMASK, r3
}
 80059b6:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	2210      	movs	r2, #16
 80059c0:	4013      	ands	r3, r2
 80059c2:	2b10      	cmp	r3, #16
 80059c4:	d103      	bne.n	80059ce <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2210      	movs	r2, #16
 80059cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	225c      	movs	r2, #92	; 0x5c
 80059d2:	5a9a      	ldrh	r2, [r3, r2]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	0011      	movs	r1, r2
 80059d8:	0018      	movs	r0, r3
 80059da:	f7fe fdb5 	bl	8004548 <HAL_UARTEx_RxEventCallback>
 80059de:	e003      	b.n	80059e8 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	0018      	movs	r0, r3
 80059e4:	f7fe fda0 	bl	8004528 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80059e8:	2366      	movs	r3, #102	; 0x66
 80059ea:	18fb      	adds	r3, r7, r3
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d004      	beq.n	80059fc <UART_RxISR_16BIT_FIFOEN+0x22c>
 80059f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059f4:	2220      	movs	r2, #32
 80059f6:	4013      	ands	r3, r2
 80059f8:	d000      	beq.n	80059fc <UART_RxISR_16BIT_FIFOEN+0x22c>
 80059fa:	e70c      	b.n	8005816 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80059fc:	2052      	movs	r0, #82	; 0x52
 80059fe:	183b      	adds	r3, r7, r0
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	215e      	movs	r1, #94	; 0x5e
 8005a04:	5a52      	ldrh	r2, [r2, r1]
 8005a06:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005a08:	0001      	movs	r1, r0
 8005a0a:	187b      	adds	r3, r7, r1
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d044      	beq.n	8005a9c <UART_RxISR_16BIT_FIFOEN+0x2cc>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2268      	movs	r2, #104	; 0x68
 8005a16:	5a9b      	ldrh	r3, [r3, r2]
 8005a18:	187a      	adds	r2, r7, r1
 8005a1a:	8812      	ldrh	r2, [r2, #0]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d23d      	bcs.n	8005a9c <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a20:	f3ef 8310 	mrs	r3, PRIMASK
 8005a24:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a26:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005a28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f383 8810 	msr	PRIMASK, r3
}
 8005a34:	46c0      	nop			; (mov r8, r8)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	491a      	ldr	r1, [pc, #104]	; (8005aac <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8005a42:	400a      	ands	r2, r1
 8005a44:	609a      	str	r2, [r3, #8]
 8005a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f383 8810 	msr	PRIMASK, r3
}
 8005a50:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a16      	ldr	r2, [pc, #88]	; (8005ab0 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8005a56:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a58:	f3ef 8310 	mrs	r3, PRIMASK
 8005a5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a5e:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005a60:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a62:	2301      	movs	r3, #1
 8005a64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	f383 8810 	msr	PRIMASK, r3
}
 8005a6c:	46c0      	nop			; (mov r8, r8)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2120      	movs	r1, #32
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a80:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	f383 8810 	msr	PRIMASK, r3
}
 8005a88:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a8a:	e007      	b.n	8005a9c <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699a      	ldr	r2, [r3, #24]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2108      	movs	r1, #8
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	619a      	str	r2, [r3, #24]
}
 8005a9c:	46c0      	nop			; (mov r8, r8)
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	b01e      	add	sp, #120	; 0x78
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	fffffeff 	.word	0xfffffeff
 8005aa8:	effffffe 	.word	0xeffffffe
 8005aac:	efffffff 	.word	0xefffffff
 8005ab0:	08005381 	.word	0x08005381

08005ab4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005abc:	46c0      	nop			; (mov r8, r8)
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	b002      	add	sp, #8
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005acc:	46c0      	nop			; (mov r8, r8)
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	b002      	add	sp, #8
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005adc:	46c0      	nop			; (mov r8, r8)
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	b002      	add	sp, #8
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2280      	movs	r2, #128	; 0x80
 8005af0:	5c9b      	ldrb	r3, [r3, r2]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d101      	bne.n	8005afa <HAL_UARTEx_DisableFifoMode+0x16>
 8005af6:	2302      	movs	r3, #2
 8005af8:	e027      	b.n	8005b4a <HAL_UARTEx_DisableFifoMode+0x66>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2280      	movs	r2, #128	; 0x80
 8005afe:	2101      	movs	r1, #1
 8005b00:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2284      	movs	r2, #132	; 0x84
 8005b06:	2124      	movs	r1, #36	; 0x24
 8005b08:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	438a      	bics	r2, r1
 8005b20:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	4a0b      	ldr	r2, [pc, #44]	; (8005b54 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005b26:	4013      	ands	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2284      	movs	r2, #132	; 0x84
 8005b3c:	2120      	movs	r1, #32
 8005b3e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2280      	movs	r2, #128	; 0x80
 8005b44:	2100      	movs	r1, #0
 8005b46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	0018      	movs	r0, r3
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	b004      	add	sp, #16
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	46c0      	nop			; (mov r8, r8)
 8005b54:	dfffffff 	.word	0xdfffffff

08005b58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2280      	movs	r2, #128	; 0x80
 8005b66:	5c9b      	ldrb	r3, [r3, r2]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d101      	bne.n	8005b70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	e02e      	b.n	8005bce <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2280      	movs	r2, #128	; 0x80
 8005b74:	2101      	movs	r1, #1
 8005b76:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2284      	movs	r2, #132	; 0x84
 8005b7c:	2124      	movs	r1, #36	; 0x24
 8005b7e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2101      	movs	r1, #1
 8005b94:	438a      	bics	r2, r1
 8005b96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	08d9      	lsrs	r1, r3, #3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	0018      	movs	r0, r3
 8005bb0:	f000 f854 	bl	8005c5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2284      	movs	r2, #132	; 0x84
 8005bc0:	2120      	movs	r1, #32
 8005bc2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2280      	movs	r2, #128	; 0x80
 8005bc8:	2100      	movs	r1, #0
 8005bca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	0018      	movs	r0, r3
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	b004      	add	sp, #16
 8005bd4:	bd80      	pop	{r7, pc}
	...

08005bd8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2280      	movs	r2, #128	; 0x80
 8005be6:	5c9b      	ldrb	r3, [r3, r2]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d101      	bne.n	8005bf0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005bec:	2302      	movs	r3, #2
 8005bee:	e02f      	b.n	8005c50 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2280      	movs	r2, #128	; 0x80
 8005bf4:	2101      	movs	r1, #1
 8005bf6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2284      	movs	r2, #132	; 0x84
 8005bfc:	2124      	movs	r1, #36	; 0x24
 8005bfe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2101      	movs	r1, #1
 8005c14:	438a      	bics	r2, r1
 8005c16:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	4a0e      	ldr	r2, [pc, #56]	; (8005c58 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005c20:	4013      	ands	r3, r2
 8005c22:	0019      	movs	r1, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	0018      	movs	r0, r3
 8005c32:	f000 f813 	bl	8005c5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2284      	movs	r2, #132	; 0x84
 8005c42:	2120      	movs	r1, #32
 8005c44:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2280      	movs	r2, #128	; 0x80
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	0018      	movs	r0, r3
 8005c52:	46bd      	mov	sp, r7
 8005c54:	b004      	add	sp, #16
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	f1ffffff 	.word	0xf1ffffff

08005c5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d108      	bne.n	8005c7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	226a      	movs	r2, #106	; 0x6a
 8005c70:	2101      	movs	r1, #1
 8005c72:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2268      	movs	r2, #104	; 0x68
 8005c78:	2101      	movs	r1, #1
 8005c7a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c7c:	e043      	b.n	8005d06 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c7e:	260f      	movs	r6, #15
 8005c80:	19bb      	adds	r3, r7, r6
 8005c82:	2208      	movs	r2, #8
 8005c84:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c86:	200e      	movs	r0, #14
 8005c88:	183b      	adds	r3, r7, r0
 8005c8a:	2208      	movs	r2, #8
 8005c8c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	0e5b      	lsrs	r3, r3, #25
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	240d      	movs	r4, #13
 8005c9a:	193b      	adds	r3, r7, r4
 8005c9c:	2107      	movs	r1, #7
 8005c9e:	400a      	ands	r2, r1
 8005ca0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	0f5b      	lsrs	r3, r3, #29
 8005caa:	b2da      	uxtb	r2, r3
 8005cac:	250c      	movs	r5, #12
 8005cae:	197b      	adds	r3, r7, r5
 8005cb0:	2107      	movs	r1, #7
 8005cb2:	400a      	ands	r2, r1
 8005cb4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cb6:	183b      	adds	r3, r7, r0
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	197a      	adds	r2, r7, r5
 8005cbc:	7812      	ldrb	r2, [r2, #0]
 8005cbe:	4914      	ldr	r1, [pc, #80]	; (8005d10 <UARTEx_SetNbDataToProcess+0xb4>)
 8005cc0:	5c8a      	ldrb	r2, [r1, r2]
 8005cc2:	435a      	muls	r2, r3
 8005cc4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005cc6:	197b      	adds	r3, r7, r5
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	4a12      	ldr	r2, [pc, #72]	; (8005d14 <UARTEx_SetNbDataToProcess+0xb8>)
 8005ccc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cce:	0019      	movs	r1, r3
 8005cd0:	f7fa faa2 	bl	8000218 <__divsi3>
 8005cd4:	0003      	movs	r3, r0
 8005cd6:	b299      	uxth	r1, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	226a      	movs	r2, #106	; 0x6a
 8005cdc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cde:	19bb      	adds	r3, r7, r6
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	193a      	adds	r2, r7, r4
 8005ce4:	7812      	ldrb	r2, [r2, #0]
 8005ce6:	490a      	ldr	r1, [pc, #40]	; (8005d10 <UARTEx_SetNbDataToProcess+0xb4>)
 8005ce8:	5c8a      	ldrb	r2, [r1, r2]
 8005cea:	435a      	muls	r2, r3
 8005cec:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005cee:	193b      	adds	r3, r7, r4
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	4a08      	ldr	r2, [pc, #32]	; (8005d14 <UARTEx_SetNbDataToProcess+0xb8>)
 8005cf4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cf6:	0019      	movs	r1, r3
 8005cf8:	f7fa fa8e 	bl	8000218 <__divsi3>
 8005cfc:	0003      	movs	r3, r0
 8005cfe:	b299      	uxth	r1, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2268      	movs	r2, #104	; 0x68
 8005d04:	5299      	strh	r1, [r3, r2]
}
 8005d06:	46c0      	nop			; (mov r8, r8)
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	b005      	add	sp, #20
 8005d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d0e:	46c0      	nop			; (mov r8, r8)
 8005d10:	08005e00 	.word	0x08005e00
 8005d14:	08005e08 	.word	0x08005e08

08005d18 <__libc_init_array>:
 8005d18:	b570      	push	{r4, r5, r6, lr}
 8005d1a:	2600      	movs	r6, #0
 8005d1c:	4d0c      	ldr	r5, [pc, #48]	; (8005d50 <__libc_init_array+0x38>)
 8005d1e:	4c0d      	ldr	r4, [pc, #52]	; (8005d54 <__libc_init_array+0x3c>)
 8005d20:	1b64      	subs	r4, r4, r5
 8005d22:	10a4      	asrs	r4, r4, #2
 8005d24:	42a6      	cmp	r6, r4
 8005d26:	d109      	bne.n	8005d3c <__libc_init_array+0x24>
 8005d28:	2600      	movs	r6, #0
 8005d2a:	f000 f821 	bl	8005d70 <_init>
 8005d2e:	4d0a      	ldr	r5, [pc, #40]	; (8005d58 <__libc_init_array+0x40>)
 8005d30:	4c0a      	ldr	r4, [pc, #40]	; (8005d5c <__libc_init_array+0x44>)
 8005d32:	1b64      	subs	r4, r4, r5
 8005d34:	10a4      	asrs	r4, r4, #2
 8005d36:	42a6      	cmp	r6, r4
 8005d38:	d105      	bne.n	8005d46 <__libc_init_array+0x2e>
 8005d3a:	bd70      	pop	{r4, r5, r6, pc}
 8005d3c:	00b3      	lsls	r3, r6, #2
 8005d3e:	58eb      	ldr	r3, [r5, r3]
 8005d40:	4798      	blx	r3
 8005d42:	3601      	adds	r6, #1
 8005d44:	e7ee      	b.n	8005d24 <__libc_init_array+0xc>
 8005d46:	00b3      	lsls	r3, r6, #2
 8005d48:	58eb      	ldr	r3, [r5, r3]
 8005d4a:	4798      	blx	r3
 8005d4c:	3601      	adds	r6, #1
 8005d4e:	e7f2      	b.n	8005d36 <__libc_init_array+0x1e>
 8005d50:	08005e18 	.word	0x08005e18
 8005d54:	08005e18 	.word	0x08005e18
 8005d58:	08005e18 	.word	0x08005e18
 8005d5c:	08005e20 	.word	0x08005e20

08005d60 <memset>:
 8005d60:	0003      	movs	r3, r0
 8005d62:	1882      	adds	r2, r0, r2
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d100      	bne.n	8005d6a <memset+0xa>
 8005d68:	4770      	bx	lr
 8005d6a:	7019      	strb	r1, [r3, #0]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	e7f9      	b.n	8005d64 <memset+0x4>

08005d70 <_init>:
 8005d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d72:	46c0      	nop			; (mov r8, r8)
 8005d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d76:	bc08      	pop	{r3}
 8005d78:	469e      	mov	lr, r3
 8005d7a:	4770      	bx	lr

08005d7c <_fini>:
 8005d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7e:	46c0      	nop			; (mov r8, r8)
 8005d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d82:	bc08      	pop	{r3}
 8005d84:	469e      	mov	lr, r3
 8005d86:	4770      	bx	lr
