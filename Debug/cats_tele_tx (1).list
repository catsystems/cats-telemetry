
cats_tele_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c74  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005d30  08005d30  00015d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005db8  08005db8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005db8  08005db8  00015db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dc0  08005dc0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005dc0  08005dc0  00015dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dc8  08005dc8  00015dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  2000000c  08005dd8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08005dd8  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001711e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029fa  00000000  00000000  00037152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  00039b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b8  00000000  00000000  0003ae00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aca0  00000000  00000000  0003bfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a21  00000000  00000000  00056c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa321  00000000  00000000  0006c679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011699a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004488  00000000  00000000  001169f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005d18 	.word	0x08005d18

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08005d18 	.word	0x08005d18

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	1c08      	adds	r0, r1, #0
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <_Z41__static_initialization_and_destruction_0ii>:
uint32_t uidMacSeedGet(void)
{
    const uint32_t macSeed = ((uint32_t)UID[2] << 24) + ((uint32_t)UID[3] << 16) +
                             ((uint32_t)UID[4] << 8) + UID[5];
    return macSeed;
}
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d127      	bne.n	800067c <_Z41__static_initialization_and_destruction_0ii+0x60>
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	4a15      	ldr	r2, [pc, #84]	; (8000684 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d123      	bne.n	800067c <_Z41__static_initialization_and_destruction_0ii+0x60>
uint8_t MasterUID[6] = {UID[0], UID[1], UID[2], UID[3], UID[4], UID[5]}; // Special binding UID values
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000636:	781a      	ldrb	r2, [r3, #0]
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800063a:	701a      	strb	r2, [r3, #0]
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800063e:	785a      	ldrb	r2, [r3, #1]
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000642:	705a      	strb	r2, [r3, #1]
 8000644:	4b10      	ldr	r3, [pc, #64]	; (8000688 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000646:	789a      	ldrb	r2, [r3, #2]
 8000648:	4b10      	ldr	r3, [pc, #64]	; (800068c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800064a:	709a      	strb	r2, [r3, #2]
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800064e:	78da      	ldrb	r2, [r3, #3]
 8000650:	4b0e      	ldr	r3, [pc, #56]	; (800068c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000652:	70da      	strb	r2, [r3, #3]
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000656:	791a      	ldrb	r2, [r3, #4]
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800065a:	711a      	strb	r2, [r3, #4]
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800065e:	795a      	ldrb	r2, [r3, #5]
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000662:	715a      	strb	r2, [r3, #5]
uint16_t CRCInitializer = (UID[4] << 8) | UID[5];
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	021b      	lsls	r3, r3, #8
 800066a:	b21a      	sxth	r2, r3
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800066e:	795b      	ldrb	r3, [r3, #5]
 8000670:	b21b      	sxth	r3, r3
 8000672:	4313      	orrs	r3, r2
 8000674:	b21b      	sxth	r3, r3
 8000676:	b29a      	uxth	r2, r3
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800067a:	801a      	strh	r2, [r3, #0]
}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b002      	add	sp, #8
 8000682:	bd80      	pop	{r7, pc}
 8000684:	0000ffff 	.word	0x0000ffff
 8000688:	20000028 	.word	0x20000028
 800068c:	20000030 	.word	0x20000030
 8000690:	20000036 	.word	0x20000036

08000694 <_GLOBAL__sub_I_ExpressLRS_AirRateConfig>:
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <_GLOBAL__sub_I_ExpressLRS_AirRateConfig+0x14>)
 800069a:	0019      	movs	r1, r3
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff ffbd 	bl	800061c <_Z41__static_initialization_and_destruction_0ii>
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	0000ffff 	.word	0x0000ffff

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b0:	f000 fd34 	bl	800111c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b4:	f000 f820 	bl	80006f8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b8:	f000 fa3e 	bl	8000b38 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 80006bc:	f000 f86c 	bl	8000798 <_ZL12MX_ADC1_Initv>
  MX_SPI1_Init();
 80006c0:	f000 f8dc 	bl	800087c <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 80006c4:	f000 f97c 	bl	80009c0 <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 80006c8:	f000 f9d8 	bl	8000a7c <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 80006cc:	f000 f918 	bl	8000900 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <main+0x40>)
 80006d2:	0018      	movs	r0, r3
 80006d4:	f002 fefe 	bl	80034d4 <HAL_TIM_Base_Start_IT>


  HAL_UART_Receive_IT(&huart1, buffer ,1);
 80006d8:	4905      	ldr	r1, [pc, #20]	; (80006f0 <main+0x44>)
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <main+0x48>)
 80006dc:	2201      	movs	r2, #1
 80006de:	0018      	movs	r0, r3
 80006e0:	f003 fb6a 	bl	8003db8 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(200);
 80006e4:	20c8      	movs	r0, #200	; 0xc8
 80006e6:	f000 fd9f 	bl	8001228 <HAL_Delay>
 80006ea:	e7fb      	b.n	80006e4 <main+0x38>
 80006ec:	20000100 	.word	0x20000100
 80006f0:	2000026c 	.word	0x2000026c
 80006f4:	2000014c 	.word	0x2000014c

080006f8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b093      	sub	sp, #76	; 0x4c
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	2410      	movs	r4, #16
 8000700:	193b      	adds	r3, r7, r4
 8000702:	0018      	movs	r0, r3
 8000704:	2338      	movs	r3, #56	; 0x38
 8000706:	001a      	movs	r2, r3
 8000708:	2100      	movs	r1, #0
 800070a:	f005 fafd 	bl	8005d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070e:	003b      	movs	r3, r7
 8000710:	0018      	movs	r0, r3
 8000712:	2310      	movs	r3, #16
 8000714:	001a      	movs	r2, r3
 8000716:	2100      	movs	r1, #0
 8000718:	f005 faf6 	bl	8005d08 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071c:	2380      	movs	r3, #128	; 0x80
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	0018      	movs	r0, r3
 8000722:	f001 fddd 	bl	80022e0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000726:	193b      	adds	r3, r7, r4
 8000728:	2202      	movs	r2, #2
 800072a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	193b      	adds	r3, r7, r4
 800072e:	2280      	movs	r2, #128	; 0x80
 8000730:	0052      	lsls	r2, r2, #1
 8000732:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073a:	193b      	adds	r3, r7, r4
 800073c:	2240      	movs	r2, #64	; 0x40
 800073e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000740:	193b      	adds	r3, r7, r4
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000746:	193b      	adds	r3, r7, r4
 8000748:	0018      	movs	r0, r3
 800074a:	f001 fe15 	bl	8002378 <HAL_RCC_OscConfig>
 800074e:	0003      	movs	r3, r0
 8000750:	1e5a      	subs	r2, r3, #1
 8000752:	4193      	sbcs	r3, r2
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <_Z18SystemClock_Configv+0x66>
  {
    Error_Handler();
 800075a:	f000 fab1 	bl	8000cc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075e:	003b      	movs	r3, r7
 8000760:	2207      	movs	r2, #7
 8000762:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000764:	003b      	movs	r3, r7
 8000766:	2200      	movs	r2, #0
 8000768:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	003b      	movs	r3, r7
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000770:	003b      	movs	r3, r7
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000776:	003b      	movs	r3, r7
 8000778:	2100      	movs	r1, #0
 800077a:	0018      	movs	r0, r3
 800077c:	f002 f91c 	bl	80029b8 <HAL_RCC_ClockConfig>
 8000780:	0003      	movs	r3, r0
 8000782:	1e5a      	subs	r2, r3, #1
 8000784:	4193      	sbcs	r3, r2
 8000786:	b2db      	uxtb	r3, r3
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <_Z18SystemClock_Configv+0x98>
  {
    Error_Handler();
 800078c:	f000 fa98 	bl	8000cc0 <Error_Handler>
  }
}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	b013      	add	sp, #76	; 0x4c
 8000796:	bd90      	pop	{r4, r7, pc}

08000798 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	0018      	movs	r0, r3
 80007a2:	230c      	movs	r3, #12
 80007a4:	001a      	movs	r2, r3
 80007a6:	2100      	movs	r1, #0
 80007a8:	f005 faae 	bl	8005d08 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007ac:	4b31      	ldr	r3, [pc, #196]	; (8000874 <_ZL12MX_ADC1_Initv+0xdc>)
 80007ae:	4a32      	ldr	r2, [pc, #200]	; (8000878 <_ZL12MX_ADC1_Initv+0xe0>)
 80007b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007b2:	4b30      	ldr	r3, [pc, #192]	; (8000874 <_ZL12MX_ADC1_Initv+0xdc>)
 80007b4:	2280      	movs	r2, #128	; 0x80
 80007b6:	05d2      	lsls	r2, r2, #23
 80007b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ba:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <_ZL12MX_ADC1_Initv+0xdc>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007c0:	4b2c      	ldr	r3, [pc, #176]	; (8000874 <_ZL12MX_ADC1_Initv+0xdc>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007c6:	4b2b      	ldr	r3, [pc, #172]	; (8000874 <_ZL12MX_ADC1_Initv+0xdc>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007cc:	4b29      	ldr	r3, [pc, #164]	; (8000874 <_ZL12MX_ADC1_Initv+0xdc>)
 80007ce:	2204      	movs	r2, #4
 80007d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007d2:	4b28      	ldr	r3, [pc, #160]	; (8000874 <_ZL12MX_ADC1_Initv+0xdc>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80007d8:	4b26      	ldr	r3, [pc, #152]	; (8000874 <_ZL12MX_ADC1_Initv+0xdc>)
 80007da:	2200      	movs	r2, #0
 80007dc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007de:	4b25      	ldr	r3, [pc, #148]	; (8000874 <_ZL12MX_ADC1_Initv+0xdc>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80007e4:	4b23      	ldr	r3, [pc, #140]	; (8000874 <_ZL12MX_ADC1_Initv+0xdc>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ea:	4b22      	ldr	r3, [pc, #136]	; (8000874 <_ZL12MX_ADC1_Initv+0xdc>)
 80007ec:	2220      	movs	r2, #32
 80007ee:	2100      	movs	r1, #0
 80007f0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f2:	4b20      	ldr	r3, [pc, #128]	; (8000874 <_ZL12MX_ADC1_Initv+0xdc>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007f8:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <_ZL12MX_ADC1_Initv+0xdc>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007fe:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <_ZL12MX_ADC1_Initv+0xdc>)
 8000800:	222c      	movs	r2, #44	; 0x2c
 8000802:	2100      	movs	r1, #0
 8000804:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000806:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <_ZL12MX_ADC1_Initv+0xdc>)
 8000808:	2200      	movs	r2, #0
 800080a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800080c:	4b19      	ldr	r3, [pc, #100]	; (8000874 <_ZL12MX_ADC1_Initv+0xdc>)
 800080e:	2200      	movs	r2, #0
 8000810:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000812:	4b18      	ldr	r3, [pc, #96]	; (8000874 <_ZL12MX_ADC1_Initv+0xdc>)
 8000814:	2200      	movs	r2, #0
 8000816:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000818:	4b16      	ldr	r3, [pc, #88]	; (8000874 <_ZL12MX_ADC1_Initv+0xdc>)
 800081a:	223c      	movs	r2, #60	; 0x3c
 800081c:	2100      	movs	r1, #0
 800081e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <_ZL12MX_ADC1_Initv+0xdc>)
 8000822:	2200      	movs	r2, #0
 8000824:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <_ZL12MX_ADC1_Initv+0xdc>)
 8000828:	0018      	movs	r0, r3
 800082a:	f000 fe1f 	bl	800146c <HAL_ADC_Init>
 800082e:	0003      	movs	r3, r0
 8000830:	1e5a      	subs	r2, r3, #1
 8000832:	4193      	sbcs	r3, r2
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <_ZL12MX_ADC1_Initv+0xa6>
  {
    Error_Handler();
 800083a:	f000 fa41 	bl	8000cc0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2201      	movs	r2, #1
 8000842:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2200      	movs	r2, #0
 8000848:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000850:	1d3a      	adds	r2, r7, #4
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <_ZL12MX_ADC1_Initv+0xdc>)
 8000854:	0011      	movs	r1, r2
 8000856:	0018      	movs	r0, r3
 8000858:	f000 ffe6 	bl	8001828 <HAL_ADC_ConfigChannel>
 800085c:	0003      	movs	r3, r0
 800085e:	1e5a      	subs	r2, r3, #1
 8000860:	4193      	sbcs	r3, r2
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <_ZL12MX_ADC1_Initv+0xd4>
  {
    Error_Handler();
 8000868:	f000 fa2a 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	b004      	add	sp, #16
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000038 	.word	0x20000038
 8000878:	40012400 	.word	0x40012400

0800087c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <_ZL12MX_SPI1_Initv+0x7c>)
 8000882:	4a1e      	ldr	r2, [pc, #120]	; (80008fc <_ZL12MX_SPI1_Initv+0x80>)
 8000884:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000886:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <_ZL12MX_SPI1_Initv+0x7c>)
 8000888:	2282      	movs	r2, #130	; 0x82
 800088a:	0052      	lsls	r2, r2, #1
 800088c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <_ZL12MX_SPI1_Initv+0x7c>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000894:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <_ZL12MX_SPI1_Initv+0x7c>)
 8000896:	22e0      	movs	r2, #224	; 0xe0
 8000898:	00d2      	lsls	r2, r2, #3
 800089a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <_ZL12MX_SPI1_Initv+0x7c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <_ZL12MX_SPI1_Initv+0x7c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <_ZL12MX_SPI1_Initv+0x7c>)
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	0092      	lsls	r2, r2, #2
 80008ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <_ZL12MX_SPI1_Initv+0x7c>)
 80008b2:	2208      	movs	r2, #8
 80008b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <_ZL12MX_SPI1_Initv+0x7c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008bc:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <_ZL12MX_SPI1_Initv+0x7c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <_ZL12MX_SPI1_Initv+0x7c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008c8:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <_ZL12MX_SPI1_Initv+0x7c>)
 80008ca:	2207      	movs	r2, #7
 80008cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <_ZL12MX_SPI1_Initv+0x7c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <_ZL12MX_SPI1_Initv+0x7c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <_ZL12MX_SPI1_Initv+0x7c>)
 80008dc:	0018      	movs	r0, r3
 80008de:	f002 fbcd 	bl	800307c <HAL_SPI_Init>
 80008e2:	0003      	movs	r3, r0
 80008e4:	1e5a      	subs	r2, r3, #1
 80008e6:	4193      	sbcs	r3, r2
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <_ZL12MX_SPI1_Initv+0x76>
  {
    Error_Handler();
 80008ee:	f000 f9e7 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	2000009c 	.word	0x2000009c
 80008fc:	40013000 	.word	0x40013000

08000900 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000906:	2310      	movs	r3, #16
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	0018      	movs	r0, r3
 800090c:	2310      	movs	r3, #16
 800090e:	001a      	movs	r2, r3
 8000910:	2100      	movs	r1, #0
 8000912:	f005 f9f9 	bl	8005d08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	0018      	movs	r0, r3
 800091a:	230c      	movs	r3, #12
 800091c:	001a      	movs	r2, r3
 800091e:	2100      	movs	r1, #0
 8000920:	f005 f9f2 	bl	8005d08 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000924:	4b25      	ldr	r3, [pc, #148]	; (80009bc <_ZL12MX_TIM2_Initv+0xbc>)
 8000926:	2280      	movs	r2, #128	; 0x80
 8000928:	05d2      	lsls	r2, r2, #23
 800092a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000;
 800092c:	4b23      	ldr	r3, [pc, #140]	; (80009bc <_ZL12MX_TIM2_Initv+0xbc>)
 800092e:	22fa      	movs	r2, #250	; 0xfa
 8000930:	0192      	lsls	r2, r2, #6
 8000932:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000934:	4b21      	ldr	r3, [pc, #132]	; (80009bc <_ZL12MX_TIM2_Initv+0xbc>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800093a:	4b20      	ldr	r3, [pc, #128]	; (80009bc <_ZL12MX_TIM2_Initv+0xbc>)
 800093c:	2264      	movs	r2, #100	; 0x64
 800093e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <_ZL12MX_TIM2_Initv+0xbc>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000946:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <_ZL12MX_TIM2_Initv+0xbc>)
 8000948:	2280      	movs	r2, #128	; 0x80
 800094a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <_ZL12MX_TIM2_Initv+0xbc>)
 800094e:	0018      	movs	r0, r3
 8000950:	f002 fd68 	bl	8003424 <HAL_TIM_Base_Init>
 8000954:	0003      	movs	r3, r0
 8000956:	1e5a      	subs	r2, r3, #1
 8000958:	4193      	sbcs	r3, r2
 800095a:	b2db      	uxtb	r3, r3
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 8000960:	f000 f9ae 	bl	8000cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000964:	2110      	movs	r1, #16
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2280      	movs	r2, #128	; 0x80
 800096a:	0152      	lsls	r2, r2, #5
 800096c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800096e:	187a      	adds	r2, r7, r1
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <_ZL12MX_TIM2_Initv+0xbc>)
 8000972:	0011      	movs	r1, r2
 8000974:	0018      	movs	r0, r3
 8000976:	f002 ff3b 	bl	80037f0 <HAL_TIM_ConfigClockSource>
 800097a:	0003      	movs	r3, r0
 800097c:	1e5a      	subs	r2, r3, #1
 800097e:	4193      	sbcs	r3, r2
 8000980:	b2db      	uxtb	r3, r3
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <_ZL12MX_TIM2_Initv+0x8a>
  {
    Error_Handler();
 8000986:	f000 f99b 	bl	8000cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2220      	movs	r2, #32
 800098e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000996:	1d3a      	adds	r2, r7, #4
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <_ZL12MX_TIM2_Initv+0xbc>)
 800099a:	0011      	movs	r1, r2
 800099c:	0018      	movs	r0, r3
 800099e:	f003 f92f 	bl	8003c00 <HAL_TIMEx_MasterConfigSynchronization>
 80009a2:	0003      	movs	r3, r0
 80009a4:	1e5a      	subs	r2, r3, #1
 80009a6:	4193      	sbcs	r3, r2
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 80009ae:	f000 f987 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b008      	add	sp, #32
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	20000100 	.word	0x20000100

080009c0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009c4:	4b2b      	ldr	r3, [pc, #172]	; (8000a74 <_ZL19MX_USART1_UART_Initv+0xb4>)
 80009c6:	4a2c      	ldr	r2, [pc, #176]	; (8000a78 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80009c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80009ca:	4b2a      	ldr	r3, [pc, #168]	; (8000a74 <_ZL19MX_USART1_UART_Initv+0xb4>)
 80009cc:	2296      	movs	r2, #150	; 0x96
 80009ce:	0192      	lsls	r2, r2, #6
 80009d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009d2:	4b28      	ldr	r3, [pc, #160]	; (8000a74 <_ZL19MX_USART1_UART_Initv+0xb4>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009d8:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <_ZL19MX_USART1_UART_Initv+0xb4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009de:	4b25      	ldr	r3, [pc, #148]	; (8000a74 <_ZL19MX_USART1_UART_Initv+0xb4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009e4:	4b23      	ldr	r3, [pc, #140]	; (8000a74 <_ZL19MX_USART1_UART_Initv+0xb4>)
 80009e6:	220c      	movs	r2, #12
 80009e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ea:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <_ZL19MX_USART1_UART_Initv+0xb4>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f0:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <_ZL19MX_USART1_UART_Initv+0xb4>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f6:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <_ZL19MX_USART1_UART_Initv+0xb4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009fc:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <_ZL19MX_USART1_UART_Initv+0xb4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a02:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a08:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f003 f97e 	bl	8003d0c <HAL_UART_Init>
 8000a10:	0003      	movs	r3, r0
 8000a12:	1e5a      	subs	r2, r3, #1
 8000a14:	4193      	sbcs	r3, r2
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <_ZL19MX_USART1_UART_Initv+0x60>
  {
    Error_Handler();
 8000a1c:	f000 f950 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000a22:	2100      	movs	r1, #0
 8000a24:	0018      	movs	r0, r3
 8000a26:	f005 f86b 	bl	8005b00 <HAL_UARTEx_SetTxFifoThreshold>
 8000a2a:	0003      	movs	r3, r0
 8000a2c:	1e5a      	subs	r2, r3, #1
 8000a2e:	4193      	sbcs	r3, r2
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <_ZL19MX_USART1_UART_Initv+0x7a>
  {
    Error_Handler();
 8000a36:	f000 f943 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f005 f89e 	bl	8005b80 <HAL_UARTEx_SetRxFifoThreshold>
 8000a44:	0003      	movs	r3, r0
 8000a46:	1e5a      	subs	r2, r3, #1
 8000a48:	4193      	sbcs	r3, r2
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <_ZL19MX_USART1_UART_Initv+0x94>
  {
    Error_Handler();
 8000a50:	f000 f936 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000a56:	0018      	movs	r0, r3
 8000a58:	f005 f818 	bl	8005a8c <HAL_UARTEx_DisableFifoMode>
 8000a5c:	0003      	movs	r3, r0
 8000a5e:	1e5a      	subs	r2, r3, #1
 8000a60:	4193      	sbcs	r3, r2
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <_ZL19MX_USART1_UART_Initv+0xac>
  {
    Error_Handler();
 8000a68:	f000 f92a 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	2000014c 	.word	0x2000014c
 8000a78:	40013800 	.word	0x40013800

08000a7c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a80:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000a82:	4a2c      	ldr	r2, [pc, #176]	; (8000b34 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a86:	4b2a      	ldr	r3, [pc, #168]	; (8000b30 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000a88:	22e1      	movs	r2, #225	; 0xe1
 8000a8a:	0252      	lsls	r2, r2, #9
 8000a8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b25      	ldr	r3, [pc, #148]	; (8000b30 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab2:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f003 f920 	bl	8003d0c <HAL_UART_Init>
 8000acc:	0003      	movs	r3, r0
 8000ace:	1e5a      	subs	r2, r3, #1
 8000ad0:	4193      	sbcs	r3, r2
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <_ZL19MX_USART2_UART_Initv+0x60>
  {
    Error_Handler();
 8000ad8:	f000 f8f2 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000adc:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f005 f80d 	bl	8005b00 <HAL_UARTEx_SetTxFifoThreshold>
 8000ae6:	0003      	movs	r3, r0
 8000ae8:	1e5a      	subs	r2, r3, #1
 8000aea:	4193      	sbcs	r3, r2
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <_ZL19MX_USART2_UART_Initv+0x7a>
  {
    Error_Handler();
 8000af2:	f000 f8e5 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000af8:	2100      	movs	r1, #0
 8000afa:	0018      	movs	r0, r3
 8000afc:	f005 f840 	bl	8005b80 <HAL_UARTEx_SetRxFifoThreshold>
 8000b00:	0003      	movs	r3, r0
 8000b02:	1e5a      	subs	r2, r3, #1
 8000b04:	4193      	sbcs	r3, r2
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <_ZL19MX_USART2_UART_Initv+0x94>
  {
    Error_Handler();
 8000b0c:	f000 f8d8 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000b12:	0018      	movs	r0, r3
 8000b14:	f004 ffba 	bl	8005a8c <HAL_UARTEx_DisableFifoMode>
 8000b18:	0003      	movs	r3, r0
 8000b1a:	1e5a      	subs	r2, r3, #1
 8000b1c:	4193      	sbcs	r3, r2
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <_ZL19MX_USART2_UART_Initv+0xac>
  {
    Error_Handler();
 8000b24:	f000 f8cc 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	200001dc 	.word	0x200001dc
 8000b34:	40004400 	.word	0x40004400

08000b38 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b089      	sub	sp, #36	; 0x24
 8000b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	240c      	movs	r4, #12
 8000b40:	193b      	adds	r3, r7, r4
 8000b42:	0018      	movs	r0, r3
 8000b44:	2314      	movs	r3, #20
 8000b46:	001a      	movs	r2, r3
 8000b48:	2100      	movs	r1, #0
 8000b4a:	f005 f8dd 	bl	8005d08 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b51      	ldr	r3, [pc, #324]	; (8000c94 <_ZL12MX_GPIO_Initv+0x15c>)
 8000b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b52:	4b50      	ldr	r3, [pc, #320]	; (8000c94 <_ZL12MX_GPIO_Initv+0x15c>)
 8000b54:	2101      	movs	r1, #1
 8000b56:	430a      	orrs	r2, r1
 8000b58:	635a      	str	r2, [r3, #52]	; 0x34
 8000b5a:	4b4e      	ldr	r3, [pc, #312]	; (8000c94 <_ZL12MX_GPIO_Initv+0x15c>)
 8000b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4013      	ands	r3, r2
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	4b4b      	ldr	r3, [pc, #300]	; (8000c94 <_ZL12MX_GPIO_Initv+0x15c>)
 8000b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b6a:	4b4a      	ldr	r3, [pc, #296]	; (8000c94 <_ZL12MX_GPIO_Initv+0x15c>)
 8000b6c:	2102      	movs	r1, #2
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	635a      	str	r2, [r3, #52]	; 0x34
 8000b72:	4b48      	ldr	r3, [pc, #288]	; (8000c94 <_ZL12MX_GPIO_Initv+0x15c>)
 8000b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b76:	2202      	movs	r2, #2
 8000b78:	4013      	ands	r3, r2
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7e:	4b45      	ldr	r3, [pc, #276]	; (8000c94 <_ZL12MX_GPIO_Initv+0x15c>)
 8000b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b82:	4b44      	ldr	r3, [pc, #272]	; (8000c94 <_ZL12MX_GPIO_Initv+0x15c>)
 8000b84:	2104      	movs	r1, #4
 8000b86:	430a      	orrs	r2, r1
 8000b88:	635a      	str	r2, [r3, #52]	; 0x34
 8000b8a:	4b42      	ldr	r3, [pc, #264]	; (8000c94 <_ZL12MX_GPIO_Initv+0x15c>)
 8000b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b8e:	2204      	movs	r2, #4
 8000b90:	4013      	ands	r3, r2
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|INT2_Pin|INT1_Pin, GPIO_PIN_RESET);
 8000b96:	2322      	movs	r3, #34	; 0x22
 8000b98:	33ff      	adds	r3, #255	; 0xff
 8000b9a:	483f      	ldr	r0, [pc, #252]	; (8000c98 <_ZL12MX_GPIO_Initv+0x160>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	0019      	movs	r1, r3
 8000ba0:	f001 fb28 	bl	80021f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FE_EN_Pin|RX_EN_Pin|LED_Pin, GPIO_PIN_RESET);
 8000ba4:	2389      	movs	r3, #137	; 0x89
 8000ba6:	0219      	lsls	r1, r3, #8
 8000ba8:	23a0      	movs	r3, #160	; 0xa0
 8000baa:	05db      	lsls	r3, r3, #23
 8000bac:	2200      	movs	r2, #0
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f001 fb20 	bl	80021f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 8000bb4:	4b39      	ldr	r3, [pc, #228]	; (8000c9c <_ZL12MX_GPIO_Initv+0x164>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2140      	movs	r1, #64	; 0x40
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f001 fb1a 	bl	80021f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIO2_Pin DIO1_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin|DIO1_Pin;
 8000bc0:	193b      	adds	r3, r7, r4
 8000bc2:	2230      	movs	r2, #48	; 0x30
 8000bc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc6:	193b      	adds	r3, r7, r4
 8000bc8:	2288      	movs	r2, #136	; 0x88
 8000bca:	0352      	lsls	r2, r2, #13
 8000bcc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd4:	193a      	adds	r2, r7, r4
 8000bd6:	23a0      	movs	r3, #160	; 0xa0
 8000bd8:	05db      	lsls	r3, r3, #23
 8000bda:	0011      	movs	r1, r2
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f001 f9a5 	bl	8001f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin INT2_Pin INT1_Pin */
  GPIO_InitStruct.Pin = CS_Pin|INT2_Pin|INT1_Pin;
 8000be2:	0021      	movs	r1, r4
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	2222      	movs	r2, #34	; 0x22
 8000be8:	32ff      	adds	r2, #255	; 0xff
 8000bea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bec:	000c      	movs	r4, r1
 8000bee:	193b      	adds	r3, r7, r4
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	193b      	adds	r3, r7, r4
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	193b      	adds	r3, r7, r4
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c00:	193b      	adds	r3, r7, r4
 8000c02:	4a25      	ldr	r2, [pc, #148]	; (8000c98 <_ZL12MX_GPIO_Initv+0x160>)
 8000c04:	0019      	movs	r1, r3
 8000c06:	0010      	movs	r0, r2
 8000c08:	f001 f990 	bl	8001f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8000c0c:	193b      	adds	r3, r7, r4
 8000c0e:	2202      	movs	r2, #2
 8000c10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c12:	193b      	adds	r3, r7, r4
 8000c14:	2200      	movs	r2, #0
 8000c16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c18:	193b      	adds	r3, r7, r4
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	193b      	adds	r3, r7, r4
 8000c20:	4a1d      	ldr	r2, [pc, #116]	; (8000c98 <_ZL12MX_GPIO_Initv+0x160>)
 8000c22:	0019      	movs	r1, r3
 8000c24:	0010      	movs	r0, r2
 8000c26:	f001 f981 	bl	8001f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_EN_Pin RX_EN_Pin LED_Pin */
  GPIO_InitStruct.Pin = FE_EN_Pin|RX_EN_Pin|LED_Pin;
 8000c2a:	0021      	movs	r1, r4
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	2289      	movs	r2, #137	; 0x89
 8000c30:	0212      	lsls	r2, r2, #8
 8000c32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	000c      	movs	r4, r1
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	2201      	movs	r2, #1
 8000c3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c48:	193a      	adds	r2, r7, r4
 8000c4a:	23a0      	movs	r3, #160	; 0xa0
 8000c4c:	05db      	lsls	r3, r3, #23
 8000c4e:	0011      	movs	r1, r2
 8000c50:	0018      	movs	r0, r3
 8000c52:	f001 f96b 	bl	8001f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : TX_EN_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
 8000c56:	0021      	movs	r1, r4
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2240      	movs	r2, #64	; 0x40
 8000c5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	2201      	movs	r2, #1
 8000c62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <_ZL12MX_GPIO_Initv+0x164>)
 8000c74:	0019      	movs	r1, r3
 8000c76:	0010      	movs	r0, r2
 8000c78:	f001 f958 	bl	8001f2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2007      	movs	r0, #7
 8000c82:	f001 f855 	bl	8001d30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000c86:	2007      	movs	r0, #7
 8000c88:	f001 f867 	bl	8001d5a <HAL_NVIC_EnableIRQ>

}
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b009      	add	sp, #36	; 0x24
 8000c92:	bd90      	pop	{r4, r7, pc}
 8000c94:	40021000 	.word	0x40021000
 8000c98:	50000400 	.word	0x50000400
 8000c9c:	50000800 	.word	0x50000800

08000ca0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	021a      	lsls	r2, r3, #8
 8000cac:	23a0      	movs	r3, #160	; 0xa0
 8000cae:	05db      	lsls	r3, r3, #23
 8000cb0:	0011      	movs	r1, r2
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f001 fabb 	bl	800222e <HAL_GPIO_TogglePin>
//HAL_Delay(1);
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b002      	add	sp, #8
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc4:	b672      	cpsid	i
}
 8000cc6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <Error_Handler+0x8>
	...

08000ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cd8:	2101      	movs	r1, #1
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	641a      	str	r2, [r3, #64]	; 0x40
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <HAL_MspInit+0x4c>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cf0:	2180      	movs	r1, #128	; 0x80
 8000cf2:	0549      	lsls	r1, r1, #21
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	055b      	lsls	r3, r3, #21
 8000d00:	4013      	ands	r3, r2
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8000d06:	2380      	movs	r3, #128	; 0x80
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f000 fab0 	bl	8001270 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b002      	add	sp, #8
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40021000 	.word	0x40021000

08000d1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	b097      	sub	sp, #92	; 0x5c
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	2344      	movs	r3, #68	; 0x44
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	0018      	movs	r0, r3
 8000d2a:	2314      	movs	r3, #20
 8000d2c:	001a      	movs	r2, r3
 8000d2e:	2100      	movs	r1, #0
 8000d30:	f004 ffea 	bl	8005d08 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d34:	2410      	movs	r4, #16
 8000d36:	193b      	adds	r3, r7, r4
 8000d38:	0018      	movs	r0, r3
 8000d3a:	2334      	movs	r3, #52	; 0x34
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	2100      	movs	r1, #0
 8000d40:	f004 ffe2 	bl	8005d08 <memset>
  if(hadc->Instance==ADC1)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a20      	ldr	r2, [pc, #128]	; (8000dcc <HAL_ADC_MspInit+0xb0>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d139      	bne.n	8000dc2 <HAL_ADC_MspInit+0xa6>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d4e:	193b      	adds	r3, r7, r4
 8000d50:	2280      	movs	r2, #128	; 0x80
 8000d52:	01d2      	lsls	r2, r2, #7
 8000d54:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000d56:	193b      	adds	r3, r7, r4
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d5c:	193b      	adds	r3, r7, r4
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f001 ffd4 	bl	8002d0c <HAL_RCCEx_PeriphCLKConfig>
 8000d64:	1e03      	subs	r3, r0, #0
 8000d66:	d001      	beq.n	8000d6c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000d68:	f7ff ffaa 	bl	8000cc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_ADC_MspInit+0xb4>)
 8000d6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <HAL_ADC_MspInit+0xb4>)
 8000d72:	2180      	movs	r1, #128	; 0x80
 8000d74:	0349      	lsls	r1, r1, #13
 8000d76:	430a      	orrs	r2, r1
 8000d78:	641a      	str	r2, [r3, #64]	; 0x40
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <HAL_ADC_MspInit+0xb4>)
 8000d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d7e:	2380      	movs	r3, #128	; 0x80
 8000d80:	035b      	lsls	r3, r3, #13
 8000d82:	4013      	ands	r3, r2
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HAL_ADC_MspInit+0xb4>)
 8000d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d8c:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <HAL_ADC_MspInit+0xb4>)
 8000d8e:	2101      	movs	r1, #1
 8000d90:	430a      	orrs	r2, r1
 8000d92:	635a      	str	r2, [r3, #52]	; 0x34
 8000d94:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <HAL_ADC_MspInit+0xb4>)
 8000d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000da0:	2144      	movs	r1, #68	; 0x44
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2201      	movs	r2, #1
 8000da6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2203      	movs	r2, #3
 8000dac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	187a      	adds	r2, r7, r1
 8000db6:	23a0      	movs	r3, #160	; 0xa0
 8000db8:	05db      	lsls	r3, r3, #23
 8000dba:	0011      	movs	r1, r2
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f001 f8b5 	bl	8001f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b017      	add	sp, #92	; 0x5c
 8000dc8:	bd90      	pop	{r4, r7, pc}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	40012400 	.word	0x40012400
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b08b      	sub	sp, #44	; 0x2c
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	2414      	movs	r4, #20
 8000dde:	193b      	adds	r3, r7, r4
 8000de0:	0018      	movs	r0, r3
 8000de2:	2314      	movs	r3, #20
 8000de4:	001a      	movs	r2, r3
 8000de6:	2100      	movs	r1, #0
 8000de8:	f004 ff8e 	bl	8005d08 <memset>
  if(hspi->Instance==SPI1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a1f      	ldr	r2, [pc, #124]	; (8000e70 <HAL_SPI_MspInit+0x9c>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d138      	bne.n	8000e68 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000df6:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <HAL_SPI_MspInit+0xa0>)
 8000df8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dfa:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <HAL_SPI_MspInit+0xa0>)
 8000dfc:	2180      	movs	r1, #128	; 0x80
 8000dfe:	0149      	lsls	r1, r1, #5
 8000e00:	430a      	orrs	r2, r1
 8000e02:	641a      	str	r2, [r3, #64]	; 0x40
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <HAL_SPI_MspInit+0xa0>)
 8000e06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e08:	2380      	movs	r3, #128	; 0x80
 8000e0a:	015b      	lsls	r3, r3, #5
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <HAL_SPI_MspInit+0xa0>)
 8000e14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e16:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <HAL_SPI_MspInit+0xa0>)
 8000e18:	2101      	movs	r1, #1
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <HAL_SPI_MspInit+0xa0>)
 8000e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e22:	2201      	movs	r2, #1
 8000e24:	4013      	ands	r3, r2
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000e2a:	0021      	movs	r1, r4
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	22c2      	movs	r2, #194	; 0xc2
 8000e30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	2202      	movs	r2, #2
 8000e36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2200      	movs	r2, #0
 8000e42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	187a      	adds	r2, r7, r1
 8000e4c:	23a0      	movs	r3, #160	; 0xa0
 8000e4e:	05db      	lsls	r3, r3, #23
 8000e50:	0011      	movs	r1, r2
 8000e52:	0018      	movs	r0, r3
 8000e54:	f001 f86a 	bl	8001f2c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2019      	movs	r0, #25
 8000e5e:	f000 ff67 	bl	8001d30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000e62:	2019      	movs	r0, #25
 8000e64:	f000 ff79 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e68:	46c0      	nop			; (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b00b      	add	sp, #44	; 0x2c
 8000e6e:	bd90      	pop	{r4, r7, pc}
 8000e70:	40013000 	.word	0x40013000
 8000e74:	40021000 	.word	0x40021000

08000e78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	05db      	lsls	r3, r3, #23
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d113      	bne.n	8000eb4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <HAL_TIM_Base_MspInit+0x44>)
 8000e8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e90:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <HAL_TIM_Base_MspInit+0x44>)
 8000e92:	2101      	movs	r1, #1
 8000e94:	430a      	orrs	r2, r1
 8000e96:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <HAL_TIM_Base_MspInit+0x44>)
 8000e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2102      	movs	r1, #2
 8000ea8:	200f      	movs	r0, #15
 8000eaa:	f000 ff41 	bl	8001d30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000eae:	200f      	movs	r0, #15
 8000eb0:	f000 ff53 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b004      	add	sp, #16
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b099      	sub	sp, #100	; 0x64
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	234c      	movs	r3, #76	; 0x4c
 8000eca:	18fb      	adds	r3, r7, r3
 8000ecc:	0018      	movs	r0, r3
 8000ece:	2314      	movs	r3, #20
 8000ed0:	001a      	movs	r2, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	f004 ff18 	bl	8005d08 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed8:	2418      	movs	r4, #24
 8000eda:	193b      	adds	r3, r7, r4
 8000edc:	0018      	movs	r0, r3
 8000ede:	2334      	movs	r3, #52	; 0x34
 8000ee0:	001a      	movs	r2, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	f004 ff10 	bl	8005d08 <memset>
  if(huart->Instance==USART1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a49      	ldr	r2, [pc, #292]	; (8001014 <HAL_UART_MspInit+0x154>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d146      	bne.n	8000f80 <HAL_UART_MspInit+0xc0>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ef2:	193b      	adds	r3, r7, r4
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000ef8:	193b      	adds	r3, r7, r4
 8000efa:	2200      	movs	r2, #0
 8000efc:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000efe:	193b      	adds	r3, r7, r4
 8000f00:	0018      	movs	r0, r3
 8000f02:	f001 ff03 	bl	8002d0c <HAL_RCCEx_PeriphCLKConfig>
 8000f06:	1e03      	subs	r3, r0, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f0a:	f7ff fed9 	bl	8000cc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f0e:	4b42      	ldr	r3, [pc, #264]	; (8001018 <HAL_UART_MspInit+0x158>)
 8000f10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f12:	4b41      	ldr	r3, [pc, #260]	; (8001018 <HAL_UART_MspInit+0x158>)
 8000f14:	2180      	movs	r1, #128	; 0x80
 8000f16:	01c9      	lsls	r1, r1, #7
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	641a      	str	r2, [r3, #64]	; 0x40
 8000f1c:	4b3e      	ldr	r3, [pc, #248]	; (8001018 <HAL_UART_MspInit+0x158>)
 8000f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	01db      	lsls	r3, r3, #7
 8000f24:	4013      	ands	r3, r2
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2a:	4b3b      	ldr	r3, [pc, #236]	; (8001018 <HAL_UART_MspInit+0x158>)
 8000f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f2e:	4b3a      	ldr	r3, [pc, #232]	; (8001018 <HAL_UART_MspInit+0x158>)
 8000f30:	2102      	movs	r1, #2
 8000f32:	430a      	orrs	r2, r1
 8000f34:	635a      	str	r2, [r3, #52]	; 0x34
 8000f36:	4b38      	ldr	r3, [pc, #224]	; (8001018 <HAL_UART_MspInit+0x158>)
 8000f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f42:	214c      	movs	r1, #76	; 0x4c
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	22c0      	movs	r2, #192	; 0xc0
 8000f48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	187b      	adds	r3, r7, r1
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2200      	movs	r2, #0
 8000f5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	4a2d      	ldr	r2, [pc, #180]	; (800101c <HAL_UART_MspInit+0x15c>)
 8000f66:	0019      	movs	r1, r3
 8000f68:	0010      	movs	r0, r2
 8000f6a:	f000 ffdf 	bl	8001f2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2103      	movs	r1, #3
 8000f72:	201b      	movs	r0, #27
 8000f74:	f000 fedc 	bl	8001d30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f78:	201b      	movs	r0, #27
 8000f7a:	f000 feee 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f7e:	e044      	b.n	800100a <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART2)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a26      	ldr	r2, [pc, #152]	; (8001020 <HAL_UART_MspInit+0x160>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d13f      	bne.n	800100a <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f8a:	2118      	movs	r1, #24
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	2202      	movs	r2, #2
 8000f90:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f001 feb6 	bl	8002d0c <HAL_RCCEx_PeriphCLKConfig>
 8000fa0:	1e03      	subs	r3, r0, #0
 8000fa2:	d001      	beq.n	8000fa8 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8000fa4:	f7ff fe8c 	bl	8000cc0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <HAL_UART_MspInit+0x158>)
 8000faa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fac:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <HAL_UART_MspInit+0x158>)
 8000fae:	2180      	movs	r1, #128	; 0x80
 8000fb0:	0289      	lsls	r1, r1, #10
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <HAL_UART_MspInit+0x158>)
 8000fb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fba:	2380      	movs	r3, #128	; 0x80
 8000fbc:	029b      	lsls	r3, r3, #10
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <HAL_UART_MspInit+0x158>)
 8000fc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <HAL_UART_MspInit+0x158>)
 8000fca:	2101      	movs	r1, #1
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	635a      	str	r2, [r3, #52]	; 0x34
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HAL_UART_MspInit+0x158>)
 8000fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fdc:	214c      	movs	r1, #76	; 0x4c
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	220c      	movs	r2, #12
 8000fe2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	187b      	adds	r3, r7, r1
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	187b      	adds	r3, r7, r1
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ff6:	187b      	adds	r3, r7, r1
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	187a      	adds	r2, r7, r1
 8000ffe:	23a0      	movs	r3, #160	; 0xa0
 8001000:	05db      	lsls	r3, r3, #23
 8001002:	0011      	movs	r1, r2
 8001004:	0018      	movs	r0, r3
 8001006:	f000 ff91 	bl	8001f2c <HAL_GPIO_Init>
}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	b019      	add	sp, #100	; 0x64
 8001010:	bd90      	pop	{r4, r7, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	40013800 	.word	0x40013800
 8001018:	40021000 	.word	0x40021000
 800101c:	50000400 	.word	0x50000400
 8001020:	40004400 	.word	0x40004400

08001024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <NMI_Handler+0x4>

0800102a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102e:	e7fe      	b.n	800102e <HardFault_Handler+0x4>

08001030 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001048:	f000 f8d2 	bl	80011f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800104c:	46c0      	nop			; (mov r8, r8)
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO2_Pin);
 8001056:	2010      	movs	r0, #16
 8001058:	f001 f904 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 800105c:	2020      	movs	r0, #32
 800105e:	f001 f901 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <TIM2_IRQHandler+0x14>)
 800106e:	0018      	movs	r0, r3
 8001070:	f002 fa8c 	bl	800358c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001074:	46c0      	nop			; (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	20000100 	.word	0x20000100

08001080 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <SPI1_IRQHandler+0x14>)
 8001086:	0018      	movs	r0, r3
 8001088:	f002 f8b0 	bl	80031ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800108c:	46c0      	nop			; (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	2000009c 	.word	0x2000009c

08001098 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <USART1_IRQHandler+0x14>)
 800109e:	0018      	movs	r0, r3
 80010a0:	f002 fef4 	bl	8003e8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	2000014c 	.word	0x2000014c

080010b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
 80010b4:	4b03      	ldr	r3, [pc, #12]	; (80010c4 <SystemInit+0x14>)
 80010b6:	2280      	movs	r2, #128	; 0x80
 80010b8:	0512      	lsls	r2, r2, #20
 80010ba:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010bc:	46c0      	nop			; (mov r8, r8)
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010c8:	480d      	ldr	r0, [pc, #52]	; (8001100 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010cc:	f7ff fff0 	bl	80010b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d0:	480c      	ldr	r0, [pc, #48]	; (8001104 <LoopForever+0x6>)
  ldr r1, =_edata
 80010d2:	490d      	ldr	r1, [pc, #52]	; (8001108 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010d4:	4a0d      	ldr	r2, [pc, #52]	; (800110c <LoopForever+0xe>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d8:	e002      	b.n	80010e0 <LoopCopyDataInit>

080010da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010de:	3304      	adds	r3, #4

080010e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e4:	d3f9      	bcc.n	80010da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010e8:	4c0a      	ldr	r4, [pc, #40]	; (8001114 <LoopForever+0x16>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ec:	e001      	b.n	80010f2 <LoopFillZerobss>

080010ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f0:	3204      	adds	r2, #4

080010f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f4:	d3fb      	bcc.n	80010ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010f6:	f004 fde3 	bl	8005cc0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80010fa:	f7ff fad7 	bl	80006ac <main>

080010fe <LoopForever>:

LoopForever:
  b LoopForever
 80010fe:	e7fe      	b.n	80010fe <LoopForever>
  ldr   r0, =_estack
 8001100:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001108:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800110c:	08005dcc 	.word	0x08005dcc
  ldr r2, =_sbss
 8001110:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001114:	2000027c 	.word	0x2000027c

08001118 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001118:	e7fe      	b.n	8001118 <ADC1_COMP_IRQHandler>
	...

0800111c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001122:	1dfb      	adds	r3, r7, #7
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <HAL_Init+0x3c>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <HAL_Init+0x3c>)
 800112e:	2180      	movs	r1, #128	; 0x80
 8001130:	0049      	lsls	r1, r1, #1
 8001132:	430a      	orrs	r2, r1
 8001134:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001136:	2001      	movs	r0, #1
 8001138:	f000 f810 	bl	800115c <HAL_InitTick>
 800113c:	1e03      	subs	r3, r0, #0
 800113e:	d003      	beq.n	8001148 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001140:	1dfb      	adds	r3, r7, #7
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
 8001146:	e001      	b.n	800114c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001148:	f7ff fdc0 	bl	8000ccc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800114c:	1dfb      	adds	r3, r7, #7
 800114e:	781b      	ldrb	r3, [r3, #0]
}
 8001150:	0018      	movs	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	b002      	add	sp, #8
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40022000 	.word	0x40022000

0800115c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001164:	230f      	movs	r3, #15
 8001166:	18fb      	adds	r3, r7, r3
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <HAL_InitTick+0x88>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d02b      	beq.n	80011cc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001174:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <HAL_InitTick+0x8c>)
 8001176:	681c      	ldr	r4, [r3, #0]
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <HAL_InitTick+0x88>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	0019      	movs	r1, r3
 800117e:	23fa      	movs	r3, #250	; 0xfa
 8001180:	0098      	lsls	r0, r3, #2
 8001182:	f7fe ffbf 	bl	8000104 <__udivsi3>
 8001186:	0003      	movs	r3, r0
 8001188:	0019      	movs	r1, r3
 800118a:	0020      	movs	r0, r4
 800118c:	f7fe ffba 	bl	8000104 <__udivsi3>
 8001190:	0003      	movs	r3, r0
 8001192:	0018      	movs	r0, r3
 8001194:	f000 fdf1 	bl	8001d7a <HAL_SYSTICK_Config>
 8001198:	1e03      	subs	r3, r0, #0
 800119a:	d112      	bne.n	80011c2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d80a      	bhi.n	80011b8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	2301      	movs	r3, #1
 80011a6:	425b      	negs	r3, r3
 80011a8:	2200      	movs	r2, #0
 80011aa:	0018      	movs	r0, r3
 80011ac:	f000 fdc0 	bl	8001d30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <HAL_InitTick+0x90>)
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	e00d      	b.n	80011d4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011b8:	230f      	movs	r3, #15
 80011ba:	18fb      	adds	r3, r7, r3
 80011bc:	2201      	movs	r2, #1
 80011be:	701a      	strb	r2, [r3, #0]
 80011c0:	e008      	b.n	80011d4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011c2:	230f      	movs	r3, #15
 80011c4:	18fb      	adds	r3, r7, r3
 80011c6:	2201      	movs	r2, #1
 80011c8:	701a      	strb	r2, [r3, #0]
 80011ca:	e003      	b.n	80011d4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011cc:	230f      	movs	r3, #15
 80011ce:	18fb      	adds	r3, r7, r3
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011d4:	230f      	movs	r3, #15
 80011d6:	18fb      	adds	r3, r7, r3
 80011d8:	781b      	ldrb	r3, [r3, #0]
}
 80011da:	0018      	movs	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	b005      	add	sp, #20
 80011e0:	bd90      	pop	{r4, r7, pc}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	20000008 	.word	0x20000008
 80011e8:	20000000 	.word	0x20000000
 80011ec:	20000004 	.word	0x20000004

080011f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <HAL_IncTick+0x1c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	001a      	movs	r2, r3
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_IncTick+0x20>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	18d2      	adds	r2, r2, r3
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <HAL_IncTick+0x20>)
 8001202:	601a      	str	r2, [r3, #0]
}
 8001204:	46c0      	nop			; (mov r8, r8)
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	20000008 	.word	0x20000008
 8001210:	20000278 	.word	0x20000278

08001214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  return uwTick;
 8001218:	4b02      	ldr	r3, [pc, #8]	; (8001224 <HAL_GetTick+0x10>)
 800121a:	681b      	ldr	r3, [r3, #0]
}
 800121c:	0018      	movs	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	20000278 	.word	0x20000278

08001228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001230:	f7ff fff0 	bl	8001214 <HAL_GetTick>
 8001234:	0003      	movs	r3, r0
 8001236:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	3301      	adds	r3, #1
 8001240:	d005      	beq.n	800124e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <HAL_Delay+0x44>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	001a      	movs	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	189b      	adds	r3, r3, r2
 800124c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	f7ff ffe0 	bl	8001214 <HAL_GetTick>
 8001254:	0002      	movs	r2, r0
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	429a      	cmp	r2, r3
 800125e:	d8f7      	bhi.n	8001250 <HAL_Delay+0x28>
  {
  }
}
 8001260:	46c0      	nop			; (mov r8, r8)
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	46bd      	mov	sp, r7
 8001266:	b004      	add	sp, #16
 8001268:	bd80      	pop	{r7, pc}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	20000008 	.word	0x20000008

08001270 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a06      	ldr	r2, [pc, #24]	; (8001298 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800127e:	4013      	ands	r3, r2
 8001280:	0019      	movs	r1, r3
 8001282:	4b04      	ldr	r3, [pc, #16]	; (8001294 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	430a      	orrs	r2, r1
 8001288:	601a      	str	r2, [r3, #0]
}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	46bd      	mov	sp, r7
 800128e:	b002      	add	sp, #8
 8001290:	bd80      	pop	{r7, pc}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	40010000 	.word	0x40010000
 8001298:	fffff9ff 	.word	0xfffff9ff

0800129c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80012ac:	401a      	ands	r2, r3
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	431a      	orrs	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	601a      	str	r2, [r3, #0]
}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b002      	add	sp, #8
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	fe3fffff 	.word	0xfe3fffff

080012c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	23e0      	movs	r3, #224	; 0xe0
 80012d2:	045b      	lsls	r3, r3, #17
 80012d4:	4013      	ands	r3, r2
}
 80012d6:	0018      	movs	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	b002      	add	sp, #8
 80012dc:	bd80      	pop	{r7, pc}

080012de <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b084      	sub	sp, #16
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	60f8      	str	r0, [r7, #12]
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	2104      	movs	r1, #4
 80012f2:	400a      	ands	r2, r1
 80012f4:	2107      	movs	r1, #7
 80012f6:	4091      	lsls	r1, r2
 80012f8:	000a      	movs	r2, r1
 80012fa:	43d2      	mvns	r2, r2
 80012fc:	401a      	ands	r2, r3
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	2104      	movs	r1, #4
 8001302:	400b      	ands	r3, r1
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	4099      	lsls	r1, r3
 8001308:	000b      	movs	r3, r1
 800130a:	431a      	orrs	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001310:	46c0      	nop			; (mov r8, r8)
 8001312:	46bd      	mov	sp, r7
 8001314:	b004      	add	sp, #16
 8001316:	bd80      	pop	{r7, pc}

08001318 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001328:	68ba      	ldr	r2, [r7, #8]
 800132a:	211f      	movs	r1, #31
 800132c:	400a      	ands	r2, r1
 800132e:	210f      	movs	r1, #15
 8001330:	4091      	lsls	r1, r2
 8001332:	000a      	movs	r2, r1
 8001334:	43d2      	mvns	r2, r2
 8001336:	401a      	ands	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	0e9b      	lsrs	r3, r3, #26
 800133c:	210f      	movs	r1, #15
 800133e:	4019      	ands	r1, r3
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	201f      	movs	r0, #31
 8001344:	4003      	ands	r3, r0
 8001346:	4099      	lsls	r1, r3
 8001348:	000b      	movs	r3, r1
 800134a:	431a      	orrs	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001350:	46c0      	nop			; (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	b004      	add	sp, #16
 8001356:	bd80      	pop	{r7, pc}

08001358 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	035b      	lsls	r3, r3, #13
 800136a:	0b5b      	lsrs	r3, r3, #13
 800136c:	431a      	orrs	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	46bd      	mov	sp, r7
 8001376:	b002      	add	sp, #8
 8001378:	bd80      	pop	{r7, pc}

0800137a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	0352      	lsls	r2, r2, #13
 800138c:	0b52      	lsrs	r2, r2, #13
 800138e:	43d2      	mvns	r2, r2
 8001390:	401a      	ands	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	46bd      	mov	sp, r7
 800139a:	b002      	add	sp, #8
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	68ba      	ldr	r2, [r7, #8]
 80013b2:	0212      	lsls	r2, r2, #8
 80013b4:	43d2      	mvns	r2, r2
 80013b6:	401a      	ands	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	400b      	ands	r3, r1
 80013c0:	4904      	ldr	r1, [pc, #16]	; (80013d4 <LL_ADC_SetChannelSamplingTime+0x34>)
 80013c2:	400b      	ands	r3, r1
 80013c4:	431a      	orrs	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	46bd      	mov	sp, r7
 80013ce:	b004      	add	sp, #16
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	07ffff00 	.word	0x07ffff00

080013d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	4a05      	ldr	r2, [pc, #20]	; (80013fc <LL_ADC_EnableInternalRegulator+0x24>)
 80013e6:	4013      	ands	r3, r2
 80013e8:	2280      	movs	r2, #128	; 0x80
 80013ea:	0552      	lsls	r2, r2, #21
 80013ec:	431a      	orrs	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b002      	add	sp, #8
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	6fffffe8 	.word	0x6fffffe8

08001400 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	2380      	movs	r3, #128	; 0x80
 800140e:	055b      	lsls	r3, r3, #21
 8001410:	401a      	ands	r2, r3
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	055b      	lsls	r3, r3, #21
 8001416:	429a      	cmp	r2, r3
 8001418:	d101      	bne.n	800141e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800141e:	2300      	movs	r3, #0
}
 8001420:	0018      	movs	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	b002      	add	sp, #8
 8001426:	bd80      	pop	{r7, pc}

08001428 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	2201      	movs	r2, #1
 8001436:	4013      	ands	r3, r2
 8001438:	2b01      	cmp	r3, #1
 800143a:	d101      	bne.n	8001440 <LL_ADC_IsEnabled+0x18>
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <LL_ADC_IsEnabled+0x1a>
 8001440:	2300      	movs	r3, #0
}
 8001442:	0018      	movs	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	b002      	add	sp, #8
 8001448:	bd80      	pop	{r7, pc}

0800144a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2204      	movs	r2, #4
 8001458:	4013      	ands	r3, r2
 800145a:	2b04      	cmp	r3, #4
 800145c:	d101      	bne.n	8001462 <LL_ADC_REG_IsConversionOngoing+0x18>
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001462:	2300      	movs	r3, #0
}
 8001464:	0018      	movs	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	b002      	add	sp, #8
 800146a:	bd80      	pop	{r7, pc}

0800146c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001474:	231f      	movs	r3, #31
 8001476:	18fb      	adds	r3, r7, r3
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 800147c:	2300      	movs	r3, #0
 800147e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001484:	2300      	movs	r3, #0
 8001486:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e1b1      	b.n	80017f6 <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10a      	bne.n	80014b0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	0018      	movs	r0, r3
 800149e:	f7ff fc3d 	bl	8000d1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2254      	movs	r2, #84	; 0x54
 80014ac:	2100      	movs	r1, #0
 80014ae:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	0018      	movs	r0, r3
 80014b6:	f7ff ffa3 	bl	8001400 <LL_ADC_IsInternalRegulatorEnabled>
 80014ba:	1e03      	subs	r3, r0, #0
 80014bc:	d115      	bne.n	80014ea <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	0018      	movs	r0, r3
 80014c4:	f7ff ff88 	bl	80013d8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014c8:	4bcd      	ldr	r3, [pc, #820]	; (8001800 <HAL_ADC_Init+0x394>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	49cd      	ldr	r1, [pc, #820]	; (8001804 <HAL_ADC_Init+0x398>)
 80014ce:	0018      	movs	r0, r3
 80014d0:	f7fe fe18 	bl	8000104 <__udivsi3>
 80014d4:	0003      	movs	r3, r0
 80014d6:	3301      	adds	r3, #1
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014dc:	e002      	b.n	80014e4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	3b01      	subs	r3, #1
 80014e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f9      	bne.n	80014de <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	0018      	movs	r0, r3
 80014f0:	f7ff ff86 	bl	8001400 <LL_ADC_IsInternalRegulatorEnabled>
 80014f4:	1e03      	subs	r3, r0, #0
 80014f6:	d10f      	bne.n	8001518 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fc:	2210      	movs	r2, #16
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001508:	2201      	movs	r2, #1
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001510:	231f      	movs	r3, #31
 8001512:	18fb      	adds	r3, r7, r3
 8001514:	2201      	movs	r2, #1
 8001516:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	0018      	movs	r0, r3
 800151e:	f7ff ff94 	bl	800144a <LL_ADC_REG_IsConversionOngoing>
 8001522:	0003      	movs	r3, r0
 8001524:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152a:	2210      	movs	r2, #16
 800152c:	4013      	ands	r3, r2
 800152e:	d000      	beq.n	8001532 <HAL_ADC_Init+0xc6>
 8001530:	e154      	b.n	80017dc <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d000      	beq.n	800153a <HAL_ADC_Init+0xce>
 8001538:	e150      	b.n	80017dc <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153e:	4ab2      	ldr	r2, [pc, #712]	; (8001808 <HAL_ADC_Init+0x39c>)
 8001540:	4013      	ands	r3, r2
 8001542:	2202      	movs	r2, #2
 8001544:	431a      	orrs	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	0018      	movs	r0, r3
 8001550:	f7ff ff6a 	bl	8001428 <LL_ADC_IsEnabled>
 8001554:	1e03      	subs	r3, r0, #0
 8001556:	d156      	bne.n	8001606 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	2218      	movs	r2, #24
 8001560:	4393      	bics	r3, r2
 8001562:	0019      	movs	r1, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	0f9b      	lsrs	r3, r3, #30
 8001576:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800157c:	4313      	orrs	r3, r2
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	4313      	orrs	r3, r2
 8001582:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	223c      	movs	r2, #60	; 0x3c
 8001588:	5c9b      	ldrb	r3, [r3, r2]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d111      	bne.n	80015b2 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	0f9b      	lsrs	r3, r3, #30
 8001594:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800159a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80015a0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80015a6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	2201      	movs	r2, #1
 80015ae:	4313      	orrs	r3, r2
 80015b0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	4a94      	ldr	r2, [pc, #592]	; (800180c <HAL_ADC_Init+0x3a0>)
 80015ba:	4013      	ands	r3, r2
 80015bc:	0019      	movs	r1, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	23c0      	movs	r3, #192	; 0xc0
 80015ce:	061b      	lsls	r3, r3, #24
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d018      	beq.n	8001606 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	05db      	lsls	r3, r3, #23
 80015dc:	429a      	cmp	r2, r3
 80015de:	d012      	beq.n	8001606 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	061b      	lsls	r3, r3, #24
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d00c      	beq.n	8001606 <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80015ec:	4b88      	ldr	r3, [pc, #544]	; (8001810 <HAL_ADC_Init+0x3a4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a88      	ldr	r2, [pc, #544]	; (8001814 <HAL_ADC_Init+0x3a8>)
 80015f2:	4013      	ands	r3, r2
 80015f4:	0019      	movs	r1, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	23f0      	movs	r3, #240	; 0xf0
 80015fc:	039b      	lsls	r3, r3, #14
 80015fe:	401a      	ands	r2, r3
 8001600:	4b83      	ldr	r3, [pc, #524]	; (8001810 <HAL_ADC_Init+0x3a4>)
 8001602:	430a      	orrs	r2, r1
 8001604:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	7e1b      	ldrb	r3, [r3, #24]
 800160a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	7e5b      	ldrb	r3, [r3, #25]
 8001610:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001612:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7e9b      	ldrb	r3, [r3, #26]
 8001618:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800161a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001620:	2b00      	cmp	r3, #0
 8001622:	d002      	beq.n	800162a <HAL_ADC_Init+0x1be>
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	015b      	lsls	r3, r3, #5
 8001628:	e000      	b.n	800162c <HAL_ADC_Init+0x1c0>
 800162a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800162c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001632:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	2b00      	cmp	r3, #0
 800163a:	da04      	bge.n	8001646 <HAL_ADC_Init+0x1da>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	085b      	lsrs	r3, r3, #1
 8001644:	e001      	b.n	800164a <HAL_ADC_Init+0x1de>
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 800164a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	212c      	movs	r1, #44	; 0x2c
 8001650:	5c5b      	ldrb	r3, [r3, r1]
 8001652:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001654:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2220      	movs	r2, #32
 8001660:	5c9b      	ldrb	r3, [r3, r2]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d115      	bne.n	8001692 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	7e9b      	ldrb	r3, [r3, #26]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d105      	bne.n	800167a <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	2280      	movs	r2, #128	; 0x80
 8001672:	0252      	lsls	r2, r2, #9
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
 8001678:	e00b      	b.n	8001692 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167e:	2220      	movs	r2, #32
 8001680:	431a      	orrs	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168a:	2201      	movs	r2, #1
 800168c:	431a      	orrs	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00a      	beq.n	80016b0 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800169e:	23e0      	movs	r3, #224	; 0xe0
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80016a8:	4313      	orrs	r3, r2
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	4a58      	ldr	r2, [pc, #352]	; (8001818 <HAL_ADC_Init+0x3ac>)
 80016b8:	4013      	ands	r3, r2
 80016ba:	0019      	movs	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	4a53      	ldr	r2, [pc, #332]	; (800181c <HAL_ADC_Init+0x3b0>)
 80016ce:	4013      	ands	r3, r2
 80016d0:	0019      	movs	r1, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	430a      	orrs	r2, r1
 80016da:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6818      	ldr	r0, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e4:	001a      	movs	r2, r3
 80016e6:	2100      	movs	r1, #0
 80016e8:	f7ff fdf9 	bl	80012de <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6818      	ldr	r0, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f4:	494a      	ldr	r1, [pc, #296]	; (8001820 <HAL_ADC_Init+0x3b4>)
 80016f6:	001a      	movs	r2, r3
 80016f8:	f7ff fdf1 	bl	80012de <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d109      	bne.n	8001718 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2110      	movs	r1, #16
 8001710:	4249      	negs	r1, r1
 8001712:	430a      	orrs	r2, r1
 8001714:	629a      	str	r2, [r3, #40]	; 0x28
 8001716:	e03a      	b.n	800178e <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691a      	ldr	r2, [r3, #16]
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	039b      	lsls	r3, r3, #14
 8001720:	429a      	cmp	r2, r3
 8001722:	d134      	bne.n	800178e <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001724:	2300      	movs	r3, #0
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	e00c      	b.n	8001744 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	40da      	lsrs	r2, r3
 8001734:	0013      	movs	r3, r2
 8001736:	220f      	movs	r2, #15
 8001738:	4013      	ands	r3, r2
 800173a:	2b0f      	cmp	r3, #15
 800173c:	d006      	beq.n	800174c <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	3301      	adds	r3, #1
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	2b07      	cmp	r3, #7
 8001748:	d9ef      	bls.n	800172a <HAL_ADC_Init+0x2be>
 800174a:	e000      	b.n	800174e <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 800174c:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d109      	bne.n	8001768 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2110      	movs	r1, #16
 8001760:	4249      	negs	r1, r1
 8001762:	430a      	orrs	r2, r1
 8001764:	629a      	str	r2, [r3, #40]	; 0x28
 8001766:	e012      	b.n	800178e <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	3b01      	subs	r3, #1
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	221c      	movs	r2, #28
 8001778:	4013      	ands	r3, r2
 800177a:	2210      	movs	r2, #16
 800177c:	4252      	negs	r2, r2
 800177e:	409a      	lsls	r2, r3
 8001780:	0011      	movs	r1, r2
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	4a23      	ldr	r2, [pc, #140]	; (8001824 <HAL_ADC_Init+0x3b8>)
 8001796:	4013      	ands	r3, r2
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	429a      	cmp	r2, r3
 800179c:	d10b      	bne.n	80017b6 <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a8:	2203      	movs	r2, #3
 80017aa:	4393      	bics	r3, r2
 80017ac:	2201      	movs	r2, #1
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80017b4:	e01c      	b.n	80017f0 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ba:	2212      	movs	r2, #18
 80017bc:	4393      	bics	r3, r2
 80017be:	2210      	movs	r2, #16
 80017c0:	431a      	orrs	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ca:	2201      	movs	r2, #1
 80017cc:	431a      	orrs	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80017d2:	231f      	movs	r3, #31
 80017d4:	18fb      	adds	r3, r7, r3
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80017da:	e009      	b.n	80017f0 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e0:	2210      	movs	r2, #16
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80017e8:	231f      	movs	r3, #31
 80017ea:	18fb      	adds	r3, r7, r3
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80017f0:	231f      	movs	r3, #31
 80017f2:	18fb      	adds	r3, r7, r3
 80017f4:	781b      	ldrb	r3, [r3, #0]
}
 80017f6:	0018      	movs	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b008      	add	sp, #32
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	20000000 	.word	0x20000000
 8001804:	00030d40 	.word	0x00030d40
 8001808:	fffffefd 	.word	0xfffffefd
 800180c:	1ffffc02 	.word	0x1ffffc02
 8001810:	40012708 	.word	0x40012708
 8001814:	ffc3ffff 	.word	0xffc3ffff
 8001818:	fffe0219 	.word	0xfffe0219
 800181c:	dffffc02 	.word	0xdffffc02
 8001820:	07ffff04 	.word	0x07ffff04
 8001824:	833fffe7 	.word	0x833fffe7

08001828 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001832:	2317      	movs	r3, #23
 8001834:	18fb      	adds	r3, r7, r3
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2254      	movs	r2, #84	; 0x54
 8001842:	5c9b      	ldrb	r3, [r3, r2]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d101      	bne.n	800184c <HAL_ADC_ConfigChannel+0x24>
 8001848:	2302      	movs	r3, #2
 800184a:	e1c0      	b.n	8001bce <HAL_ADC_ConfigChannel+0x3a6>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2254      	movs	r2, #84	; 0x54
 8001850:	2101      	movs	r1, #1
 8001852:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	0018      	movs	r0, r3
 800185a:	f7ff fdf6 	bl	800144a <LL_ADC_REG_IsConversionOngoing>
 800185e:	1e03      	subs	r3, r0, #0
 8001860:	d000      	beq.n	8001864 <HAL_ADC_ConfigChannel+0x3c>
 8001862:	e1a3      	b.n	8001bac <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b02      	cmp	r3, #2
 800186a:	d100      	bne.n	800186e <HAL_ADC_ConfigChannel+0x46>
 800186c:	e143      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691a      	ldr	r2, [r3, #16]
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	061b      	lsls	r3, r3, #24
 8001876:	429a      	cmp	r2, r3
 8001878:	d004      	beq.n	8001884 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800187e:	4ac1      	ldr	r2, [pc, #772]	; (8001b84 <HAL_ADC_ConfigChannel+0x35c>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d108      	bne.n	8001896 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	0019      	movs	r1, r3
 800188e:	0010      	movs	r0, r2
 8001890:	f7ff fd62 	bl	8001358 <LL_ADC_REG_SetSequencerChAdd>
 8001894:	e0c9      	b.n	8001a2a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	211f      	movs	r1, #31
 80018a0:	400b      	ands	r3, r1
 80018a2:	210f      	movs	r1, #15
 80018a4:	4099      	lsls	r1, r3
 80018a6:	000b      	movs	r3, r1
 80018a8:	43db      	mvns	r3, r3
 80018aa:	4013      	ands	r3, r2
 80018ac:	0019      	movs	r1, r3
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	035b      	lsls	r3, r3, #13
 80018b4:	0b5b      	lsrs	r3, r3, #13
 80018b6:	d105      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x9c>
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	0e9b      	lsrs	r3, r3, #26
 80018be:	221f      	movs	r2, #31
 80018c0:	4013      	ands	r3, r2
 80018c2:	e098      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x1ce>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2201      	movs	r2, #1
 80018ca:	4013      	ands	r3, r2
 80018cc:	d000      	beq.n	80018d0 <HAL_ADC_ConfigChannel+0xa8>
 80018ce:	e091      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x1cc>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2202      	movs	r2, #2
 80018d6:	4013      	ands	r3, r2
 80018d8:	d000      	beq.n	80018dc <HAL_ADC_ConfigChannel+0xb4>
 80018da:	e089      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x1c8>
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2204      	movs	r2, #4
 80018e2:	4013      	ands	r3, r2
 80018e4:	d000      	beq.n	80018e8 <HAL_ADC_ConfigChannel+0xc0>
 80018e6:	e081      	b.n	80019ec <HAL_ADC_ConfigChannel+0x1c4>
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2208      	movs	r2, #8
 80018ee:	4013      	ands	r3, r2
 80018f0:	d000      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0xcc>
 80018f2:	e079      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x1c0>
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2210      	movs	r2, #16
 80018fa:	4013      	ands	r3, r2
 80018fc:	d000      	beq.n	8001900 <HAL_ADC_ConfigChannel+0xd8>
 80018fe:	e071      	b.n	80019e4 <HAL_ADC_ConfigChannel+0x1bc>
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2220      	movs	r2, #32
 8001906:	4013      	ands	r3, r2
 8001908:	d000      	beq.n	800190c <HAL_ADC_ConfigChannel+0xe4>
 800190a:	e069      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x1b8>
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2240      	movs	r2, #64	; 0x40
 8001912:	4013      	ands	r3, r2
 8001914:	d000      	beq.n	8001918 <HAL_ADC_ConfigChannel+0xf0>
 8001916:	e061      	b.n	80019dc <HAL_ADC_ConfigChannel+0x1b4>
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2280      	movs	r2, #128	; 0x80
 800191e:	4013      	ands	r3, r2
 8001920:	d000      	beq.n	8001924 <HAL_ADC_ConfigChannel+0xfc>
 8001922:	e059      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x1b0>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4013      	ands	r3, r2
 800192e:	d151      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x1ac>
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4013      	ands	r3, r2
 800193a:	d149      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x1a8>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	4013      	ands	r3, r2
 8001946:	d141      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x1a4>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	011b      	lsls	r3, r3, #4
 8001950:	4013      	ands	r3, r2
 8001952:	d139      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x1a0>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	015b      	lsls	r3, r3, #5
 800195c:	4013      	ands	r3, r2
 800195e:	d131      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x19c>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	019b      	lsls	r3, r3, #6
 8001968:	4013      	ands	r3, r2
 800196a:	d129      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x198>
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	01db      	lsls	r3, r3, #7
 8001974:	4013      	ands	r3, r2
 8001976:	d121      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x194>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	4013      	ands	r3, r2
 8001982:	d119      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x190>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	025b      	lsls	r3, r3, #9
 800198c:	4013      	ands	r3, r2
 800198e:	d111      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x18c>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	029b      	lsls	r3, r3, #10
 8001998:	4013      	ands	r3, r2
 800199a:	d109      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x188>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	02db      	lsls	r3, r3, #11
 80019a4:	4013      	ands	r3, r2
 80019a6:	d001      	beq.n	80019ac <HAL_ADC_ConfigChannel+0x184>
 80019a8:	2312      	movs	r3, #18
 80019aa:	e024      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x1ce>
 80019ac:	2300      	movs	r3, #0
 80019ae:	e022      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x1ce>
 80019b0:	2311      	movs	r3, #17
 80019b2:	e020      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x1ce>
 80019b4:	2310      	movs	r3, #16
 80019b6:	e01e      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x1ce>
 80019b8:	230f      	movs	r3, #15
 80019ba:	e01c      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x1ce>
 80019bc:	230e      	movs	r3, #14
 80019be:	e01a      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x1ce>
 80019c0:	230d      	movs	r3, #13
 80019c2:	e018      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x1ce>
 80019c4:	230c      	movs	r3, #12
 80019c6:	e016      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x1ce>
 80019c8:	230b      	movs	r3, #11
 80019ca:	e014      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x1ce>
 80019cc:	230a      	movs	r3, #10
 80019ce:	e012      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x1ce>
 80019d0:	2309      	movs	r3, #9
 80019d2:	e010      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x1ce>
 80019d4:	2308      	movs	r3, #8
 80019d6:	e00e      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x1ce>
 80019d8:	2307      	movs	r3, #7
 80019da:	e00c      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x1ce>
 80019dc:	2306      	movs	r3, #6
 80019de:	e00a      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x1ce>
 80019e0:	2305      	movs	r3, #5
 80019e2:	e008      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x1ce>
 80019e4:	2304      	movs	r3, #4
 80019e6:	e006      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x1ce>
 80019e8:	2303      	movs	r3, #3
 80019ea:	e004      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x1ce>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e002      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x1ce>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x1ce>
 80019f4:	2300      	movs	r3, #0
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	6852      	ldr	r2, [r2, #4]
 80019fa:	201f      	movs	r0, #31
 80019fc:	4002      	ands	r2, r0
 80019fe:	4093      	lsls	r3, r2
 8001a00:	000a      	movs	r2, r1
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	089b      	lsrs	r3, r3, #2
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d808      	bhi.n	8001a2a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6818      	ldr	r0, [r3, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	6859      	ldr	r1, [r3, #4]
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	001a      	movs	r2, r3
 8001a26:	f7ff fc77 	bl	8001318 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6818      	ldr	r0, [r3, #0]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	6819      	ldr	r1, [r3, #0]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	001a      	movs	r2, r3
 8001a38:	f7ff fcb2 	bl	80013a0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	db00      	blt.n	8001a46 <HAL_ADC_ConfigChannel+0x21e>
 8001a44:	e0bc      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a46:	4b50      	ldr	r3, [pc, #320]	; (8001b88 <HAL_ADC_ConfigChannel+0x360>)
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f7ff fc3b 	bl	80012c4 <LL_ADC_GetCommonPathInternalCh>
 8001a4e:	0003      	movs	r3, r0
 8001a50:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a4d      	ldr	r2, [pc, #308]	; (8001b8c <HAL_ADC_ConfigChannel+0x364>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d122      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	041b      	lsls	r3, r3, #16
 8001a62:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a64:	d11d      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	2280      	movs	r2, #128	; 0x80
 8001a6a:	0412      	lsls	r2, r2, #16
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	4a46      	ldr	r2, [pc, #280]	; (8001b88 <HAL_ADC_ConfigChannel+0x360>)
 8001a70:	0019      	movs	r1, r3
 8001a72:	0010      	movs	r0, r2
 8001a74:	f7ff fc12 	bl	800129c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a78:	4b45      	ldr	r3, [pc, #276]	; (8001b90 <HAL_ADC_ConfigChannel+0x368>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4945      	ldr	r1, [pc, #276]	; (8001b94 <HAL_ADC_ConfigChannel+0x36c>)
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f7fe fb40 	bl	8000104 <__udivsi3>
 8001a84:	0003      	movs	r3, r0
 8001a86:	1c5a      	adds	r2, r3, #1
 8001a88:	0013      	movs	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	189b      	adds	r3, r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a92:	e002      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f9      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001aa0:	e08e      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a3c      	ldr	r2, [pc, #240]	; (8001b98 <HAL_ADC_ConfigChannel+0x370>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d10e      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x2a2>
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	045b      	lsls	r3, r3, #17
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d109      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	2280      	movs	r2, #128	; 0x80
 8001aba:	0452      	lsls	r2, r2, #17
 8001abc:	4313      	orrs	r3, r2
 8001abe:	4a32      	ldr	r2, [pc, #200]	; (8001b88 <HAL_ADC_ConfigChannel+0x360>)
 8001ac0:	0019      	movs	r1, r3
 8001ac2:	0010      	movs	r0, r2
 8001ac4:	f7ff fbea 	bl	800129c <LL_ADC_SetCommonPathInternalCh>
 8001ac8:	e07a      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a33      	ldr	r2, [pc, #204]	; (8001b9c <HAL_ADC_ConfigChannel+0x374>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d000      	beq.n	8001ad6 <HAL_ADC_ConfigChannel+0x2ae>
 8001ad4:	e074      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	03db      	lsls	r3, r3, #15
 8001adc:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001ade:	d000      	beq.n	8001ae2 <HAL_ADC_ConfigChannel+0x2ba>
 8001ae0:	e06e      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	2280      	movs	r2, #128	; 0x80
 8001ae6:	03d2      	lsls	r2, r2, #15
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	4a27      	ldr	r2, [pc, #156]	; (8001b88 <HAL_ADC_ConfigChannel+0x360>)
 8001aec:	0019      	movs	r1, r3
 8001aee:	0010      	movs	r0, r2
 8001af0:	f7ff fbd4 	bl	800129c <LL_ADC_SetCommonPathInternalCh>
 8001af4:	e064      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691a      	ldr	r2, [r3, #16]
 8001afa:	2380      	movs	r3, #128	; 0x80
 8001afc:	061b      	lsls	r3, r3, #24
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d004      	beq.n	8001b0c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b06:	4a1f      	ldr	r2, [pc, #124]	; (8001b84 <HAL_ADC_ConfigChannel+0x35c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d107      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	0019      	movs	r1, r3
 8001b16:	0010      	movs	r0, r2
 8001b18:	f7ff fc2f 	bl	800137a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	da4d      	bge.n	8001bc0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b24:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <HAL_ADC_ConfigChannel+0x360>)
 8001b26:	0018      	movs	r0, r3
 8001b28:	f7ff fbcc 	bl	80012c4 <LL_ADC_GetCommonPathInternalCh>
 8001b2c:	0003      	movs	r3, r0
 8001b2e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a15      	ldr	r2, [pc, #84]	; (8001b8c <HAL_ADC_ConfigChannel+0x364>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d108      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4a18      	ldr	r2, [pc, #96]	; (8001ba0 <HAL_ADC_ConfigChannel+0x378>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	4a11      	ldr	r2, [pc, #68]	; (8001b88 <HAL_ADC_ConfigChannel+0x360>)
 8001b42:	0019      	movs	r1, r3
 8001b44:	0010      	movs	r0, r2
 8001b46:	f7ff fba9 	bl	800129c <LL_ADC_SetCommonPathInternalCh>
 8001b4a:	e039      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a11      	ldr	r2, [pc, #68]	; (8001b98 <HAL_ADC_ConfigChannel+0x370>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d108      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <HAL_ADC_ConfigChannel+0x37c>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <HAL_ADC_ConfigChannel+0x360>)
 8001b5e:	0019      	movs	r1, r3
 8001b60:	0010      	movs	r0, r2
 8001b62:	f7ff fb9b 	bl	800129c <LL_ADC_SetCommonPathInternalCh>
 8001b66:	e02b      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <HAL_ADC_ConfigChannel+0x374>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d126      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	4a0c      	ldr	r2, [pc, #48]	; (8001ba8 <HAL_ADC_ConfigChannel+0x380>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	4a03      	ldr	r2, [pc, #12]	; (8001b88 <HAL_ADC_ConfigChannel+0x360>)
 8001b7a:	0019      	movs	r1, r3
 8001b7c:	0010      	movs	r0, r2
 8001b7e:	f7ff fb8d 	bl	800129c <LL_ADC_SetCommonPathInternalCh>
 8001b82:	e01d      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x398>
 8001b84:	80000004 	.word	0x80000004
 8001b88:	40012708 	.word	0x40012708
 8001b8c:	b0001000 	.word	0xb0001000
 8001b90:	20000000 	.word	0x20000000
 8001b94:	00030d40 	.word	0x00030d40
 8001b98:	b8004000 	.word	0xb8004000
 8001b9c:	b4002000 	.word	0xb4002000
 8001ba0:	ff7fffff 	.word	0xff7fffff
 8001ba4:	feffffff 	.word	0xfeffffff
 8001ba8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001bb8:	2317      	movs	r3, #23
 8001bba:	18fb      	adds	r3, r7, r3
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2254      	movs	r2, #84	; 0x54
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001bc8:	2317      	movs	r3, #23
 8001bca:	18fb      	adds	r3, r7, r3
 8001bcc:	781b      	ldrb	r3, [r3, #0]
}
 8001bce:	0018      	movs	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	b006      	add	sp, #24
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	46c0      	nop			; (mov r8, r8)

08001bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	0002      	movs	r2, r0
 8001be0:	1dfb      	adds	r3, r7, #7
 8001be2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001be4:	1dfb      	adds	r3, r7, #7
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b7f      	cmp	r3, #127	; 0x7f
 8001bea:	d809      	bhi.n	8001c00 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bec:	1dfb      	adds	r3, r7, #7
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	001a      	movs	r2, r3
 8001bf2:	231f      	movs	r3, #31
 8001bf4:	401a      	ands	r2, r3
 8001bf6:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <__NVIC_EnableIRQ+0x30>)
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	4091      	lsls	r1, r2
 8001bfc:	000a      	movs	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001c00:	46c0      	nop			; (mov r8, r8)
 8001c02:	46bd      	mov	sp, r7
 8001c04:	b002      	add	sp, #8
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	e000e100 	.word	0xe000e100

08001c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c0c:	b590      	push	{r4, r7, lr}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	0002      	movs	r2, r0
 8001c14:	6039      	str	r1, [r7, #0]
 8001c16:	1dfb      	adds	r3, r7, #7
 8001c18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c1a:	1dfb      	adds	r3, r7, #7
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b7f      	cmp	r3, #127	; 0x7f
 8001c20:	d828      	bhi.n	8001c74 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c22:	4a2f      	ldr	r2, [pc, #188]	; (8001ce0 <__NVIC_SetPriority+0xd4>)
 8001c24:	1dfb      	adds	r3, r7, #7
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	b25b      	sxtb	r3, r3
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	33c0      	adds	r3, #192	; 0xc0
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	589b      	ldr	r3, [r3, r2]
 8001c32:	1dfa      	adds	r2, r7, #7
 8001c34:	7812      	ldrb	r2, [r2, #0]
 8001c36:	0011      	movs	r1, r2
 8001c38:	2203      	movs	r2, #3
 8001c3a:	400a      	ands	r2, r1
 8001c3c:	00d2      	lsls	r2, r2, #3
 8001c3e:	21ff      	movs	r1, #255	; 0xff
 8001c40:	4091      	lsls	r1, r2
 8001c42:	000a      	movs	r2, r1
 8001c44:	43d2      	mvns	r2, r2
 8001c46:	401a      	ands	r2, r3
 8001c48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	019b      	lsls	r3, r3, #6
 8001c4e:	22ff      	movs	r2, #255	; 0xff
 8001c50:	401a      	ands	r2, r3
 8001c52:	1dfb      	adds	r3, r7, #7
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	0018      	movs	r0, r3
 8001c58:	2303      	movs	r3, #3
 8001c5a:	4003      	ands	r3, r0
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c60:	481f      	ldr	r0, [pc, #124]	; (8001ce0 <__NVIC_SetPriority+0xd4>)
 8001c62:	1dfb      	adds	r3, r7, #7
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	b25b      	sxtb	r3, r3
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	33c0      	adds	r3, #192	; 0xc0
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c72:	e031      	b.n	8001cd8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c74:	4a1b      	ldr	r2, [pc, #108]	; (8001ce4 <__NVIC_SetPriority+0xd8>)
 8001c76:	1dfb      	adds	r3, r7, #7
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	230f      	movs	r3, #15
 8001c7e:	400b      	ands	r3, r1
 8001c80:	3b08      	subs	r3, #8
 8001c82:	089b      	lsrs	r3, r3, #2
 8001c84:	3306      	adds	r3, #6
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	18d3      	adds	r3, r2, r3
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	1dfa      	adds	r2, r7, #7
 8001c90:	7812      	ldrb	r2, [r2, #0]
 8001c92:	0011      	movs	r1, r2
 8001c94:	2203      	movs	r2, #3
 8001c96:	400a      	ands	r2, r1
 8001c98:	00d2      	lsls	r2, r2, #3
 8001c9a:	21ff      	movs	r1, #255	; 0xff
 8001c9c:	4091      	lsls	r1, r2
 8001c9e:	000a      	movs	r2, r1
 8001ca0:	43d2      	mvns	r2, r2
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	019b      	lsls	r3, r3, #6
 8001caa:	22ff      	movs	r2, #255	; 0xff
 8001cac:	401a      	ands	r2, r3
 8001cae:	1dfb      	adds	r3, r7, #7
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	4003      	ands	r3, r0
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cbc:	4809      	ldr	r0, [pc, #36]	; (8001ce4 <__NVIC_SetPriority+0xd8>)
 8001cbe:	1dfb      	adds	r3, r7, #7
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	001c      	movs	r4, r3
 8001cc4:	230f      	movs	r3, #15
 8001cc6:	4023      	ands	r3, r4
 8001cc8:	3b08      	subs	r3, #8
 8001cca:	089b      	lsrs	r3, r3, #2
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	3306      	adds	r3, #6
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	18c3      	adds	r3, r0, r3
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	601a      	str	r2, [r3, #0]
}
 8001cd8:	46c0      	nop			; (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b003      	add	sp, #12
 8001cde:	bd90      	pop	{r4, r7, pc}
 8001ce0:	e000e100 	.word	0xe000e100
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	1e5a      	subs	r2, r3, #1
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	045b      	lsls	r3, r3, #17
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d301      	bcc.n	8001d00 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e010      	b.n	8001d22 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d00:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <SysTick_Config+0x44>)
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	3a01      	subs	r2, #1
 8001d06:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d08:	2301      	movs	r3, #1
 8001d0a:	425b      	negs	r3, r3
 8001d0c:	2103      	movs	r1, #3
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f7ff ff7c 	bl	8001c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <SysTick_Config+0x44>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1a:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <SysTick_Config+0x44>)
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	0018      	movs	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	b002      	add	sp, #8
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	e000e010 	.word	0xe000e010

08001d30 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	210f      	movs	r1, #15
 8001d3c:	187b      	adds	r3, r7, r1
 8001d3e:	1c02      	adds	r2, r0, #0
 8001d40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	187b      	adds	r3, r7, r1
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b25b      	sxtb	r3, r3
 8001d4a:	0011      	movs	r1, r2
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f7ff ff5d 	bl	8001c0c <__NVIC_SetPriority>
}
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	46bd      	mov	sp, r7
 8001d56:	b004      	add	sp, #16
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	0002      	movs	r2, r0
 8001d62:	1dfb      	adds	r3, r7, #7
 8001d64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d66:	1dfb      	adds	r3, r7, #7
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	b25b      	sxtb	r3, r3
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f7ff ff33 	bl	8001bd8 <__NVIC_EnableIRQ>
}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	46bd      	mov	sp, r7
 8001d76:	b002      	add	sp, #8
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	0018      	movs	r0, r3
 8001d86:	f7ff ffaf 	bl	8001ce8 <SysTick_Config>
 8001d8a:	0003      	movs	r3, r0
}
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	b002      	add	sp, #8
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e050      	b.n	8001e48 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2225      	movs	r2, #37	; 0x25
 8001daa:	5c9b      	ldrb	r3, [r3, r2]
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d008      	beq.n	8001dc4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2204      	movs	r2, #4
 8001db6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2224      	movs	r2, #36	; 0x24
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e041      	b.n	8001e48 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	210e      	movs	r1, #14
 8001dd0:	438a      	bics	r2, r1
 8001dd2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	491c      	ldr	r1, [pc, #112]	; (8001e50 <HAL_DMA_Abort+0xbc>)
 8001de0:	400a      	ands	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2101      	movs	r1, #1
 8001df0:	438a      	bics	r2, r1
 8001df2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001df4:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <HAL_DMA_Abort+0xc0>)
 8001df6:	6859      	ldr	r1, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	221c      	movs	r2, #28
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2201      	movs	r2, #1
 8001e02:	409a      	lsls	r2, r3
 8001e04:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <HAL_DMA_Abort+0xc0>)
 8001e06:	430a      	orrs	r2, r1
 8001e08:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e12:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00c      	beq.n	8001e36 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e26:	490a      	ldr	r1, [pc, #40]	; (8001e50 <HAL_DMA_Abort+0xbc>)
 8001e28:	400a      	ands	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001e34:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2225      	movs	r2, #37	; 0x25
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2224      	movs	r2, #36	; 0x24
 8001e42:	2100      	movs	r1, #0
 8001e44:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b002      	add	sp, #8
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	fffffeff 	.word	0xfffffeff
 8001e54:	40020000 	.word	0x40020000

08001e58 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e60:	210f      	movs	r1, #15
 8001e62:	187b      	adds	r3, r7, r1
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2225      	movs	r2, #37	; 0x25
 8001e6c:	5c9b      	ldrb	r3, [r3, r2]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d006      	beq.n	8001e82 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2204      	movs	r2, #4
 8001e78:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001e7a:	187b      	adds	r3, r7, r1
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
 8001e80:	e049      	b.n	8001f16 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	210e      	movs	r1, #14
 8001e8e:	438a      	bics	r2, r1
 8001e90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	438a      	bics	r2, r1
 8001ea0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eac:	491d      	ldr	r1, [pc, #116]	; (8001f24 <HAL_DMA_Abort_IT+0xcc>)
 8001eae:	400a      	ands	r2, r1
 8001eb0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001eb2:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <HAL_DMA_Abort_IT+0xd0>)
 8001eb4:	6859      	ldr	r1, [r3, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	221c      	movs	r2, #28
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <HAL_DMA_Abort_IT+0xd0>)
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ed0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00c      	beq.n	8001ef4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ee4:	490f      	ldr	r1, [pc, #60]	; (8001f24 <HAL_DMA_Abort_IT+0xcc>)
 8001ee6:	400a      	ands	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001ef2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2225      	movs	r2, #37	; 0x25
 8001ef8:	2101      	movs	r1, #1
 8001efa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2224      	movs	r2, #36	; 0x24
 8001f00:	2100      	movs	r1, #0
 8001f02:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d004      	beq.n	8001f16 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	0010      	movs	r0, r2
 8001f14:	4798      	blx	r3
    }
  }
  return status;
 8001f16:	230f      	movs	r3, #15
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	781b      	ldrb	r3, [r3, #0]
}
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	b004      	add	sp, #16
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	fffffeff 	.word	0xfffffeff
 8001f28:	40020000 	.word	0x40020000

08001f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f3a:	e147      	b.n	80021cc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2101      	movs	r1, #1
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	4091      	lsls	r1, r2
 8001f46:	000a      	movs	r2, r1
 8001f48:	4013      	ands	r3, r2
 8001f4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d100      	bne.n	8001f54 <HAL_GPIO_Init+0x28>
 8001f52:	e138      	b.n	80021c6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2203      	movs	r2, #3
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d005      	beq.n	8001f6c <HAL_GPIO_Init+0x40>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2203      	movs	r2, #3
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d130      	bne.n	8001fce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	2203      	movs	r2, #3
 8001f78:	409a      	lsls	r2, r3
 8001f7a:	0013      	movs	r3, r2
 8001f7c:	43da      	mvns	r2, r3
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	409a      	lsls	r2, r3
 8001f8e:	0013      	movs	r3, r2
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	0013      	movs	r3, r2
 8001faa:	43da      	mvns	r2, r3
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	091b      	lsrs	r3, r3, #4
 8001fb8:	2201      	movs	r2, #1
 8001fba:	401a      	ands	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	409a      	lsls	r2, r3
 8001fc0:	0013      	movs	r3, r2
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	d017      	beq.n	800200a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	0013      	movs	r3, r2
 8001fea:	43da      	mvns	r2, r3
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	0013      	movs	r3, r2
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2203      	movs	r2, #3
 8002010:	4013      	ands	r3, r2
 8002012:	2b02      	cmp	r3, #2
 8002014:	d123      	bne.n	800205e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	08da      	lsrs	r2, r3, #3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3208      	adds	r2, #8
 800201e:	0092      	lsls	r2, r2, #2
 8002020:	58d3      	ldr	r3, [r2, r3]
 8002022:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	2207      	movs	r2, #7
 8002028:	4013      	ands	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	220f      	movs	r2, #15
 800202e:	409a      	lsls	r2, r3
 8002030:	0013      	movs	r3, r2
 8002032:	43da      	mvns	r2, r3
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4013      	ands	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	691a      	ldr	r2, [r3, #16]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	2107      	movs	r1, #7
 8002042:	400b      	ands	r3, r1
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	409a      	lsls	r2, r3
 8002048:	0013      	movs	r3, r2
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	08da      	lsrs	r2, r3, #3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3208      	adds	r2, #8
 8002058:	0092      	lsls	r2, r2, #2
 800205a:	6939      	ldr	r1, [r7, #16]
 800205c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	2203      	movs	r2, #3
 800206a:	409a      	lsls	r2, r3
 800206c:	0013      	movs	r3, r2
 800206e:	43da      	mvns	r2, r3
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2203      	movs	r2, #3
 800207c:	401a      	ands	r2, r3
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	409a      	lsls	r2, r3
 8002084:	0013      	movs	r3, r2
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	23c0      	movs	r3, #192	; 0xc0
 8002098:	029b      	lsls	r3, r3, #10
 800209a:	4013      	ands	r3, r2
 800209c:	d100      	bne.n	80020a0 <HAL_GPIO_Init+0x174>
 800209e:	e092      	b.n	80021c6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80020a0:	4a50      	ldr	r2, [pc, #320]	; (80021e4 <HAL_GPIO_Init+0x2b8>)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	3318      	adds	r3, #24
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	589b      	ldr	r3, [r3, r2]
 80020ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	2203      	movs	r2, #3
 80020b2:	4013      	ands	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	220f      	movs	r2, #15
 80020b8:	409a      	lsls	r2, r3
 80020ba:	0013      	movs	r3, r2
 80020bc:	43da      	mvns	r2, r3
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4013      	ands	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	23a0      	movs	r3, #160	; 0xa0
 80020c8:	05db      	lsls	r3, r3, #23
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d013      	beq.n	80020f6 <HAL_GPIO_Init+0x1ca>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a45      	ldr	r2, [pc, #276]	; (80021e8 <HAL_GPIO_Init+0x2bc>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00d      	beq.n	80020f2 <HAL_GPIO_Init+0x1c6>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a44      	ldr	r2, [pc, #272]	; (80021ec <HAL_GPIO_Init+0x2c0>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d007      	beq.n	80020ee <HAL_GPIO_Init+0x1c2>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a43      	ldr	r2, [pc, #268]	; (80021f0 <HAL_GPIO_Init+0x2c4>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d101      	bne.n	80020ea <HAL_GPIO_Init+0x1be>
 80020e6:	2303      	movs	r3, #3
 80020e8:	e006      	b.n	80020f8 <HAL_GPIO_Init+0x1cc>
 80020ea:	2305      	movs	r3, #5
 80020ec:	e004      	b.n	80020f8 <HAL_GPIO_Init+0x1cc>
 80020ee:	2302      	movs	r3, #2
 80020f0:	e002      	b.n	80020f8 <HAL_GPIO_Init+0x1cc>
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <HAL_GPIO_Init+0x1cc>
 80020f6:	2300      	movs	r3, #0
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	2103      	movs	r1, #3
 80020fc:	400a      	ands	r2, r1
 80020fe:	00d2      	lsls	r2, r2, #3
 8002100:	4093      	lsls	r3, r2
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002108:	4936      	ldr	r1, [pc, #216]	; (80021e4 <HAL_GPIO_Init+0x2b8>)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	089b      	lsrs	r3, r3, #2
 800210e:	3318      	adds	r3, #24
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002116:	4a33      	ldr	r2, [pc, #204]	; (80021e4 <HAL_GPIO_Init+0x2b8>)
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	58d3      	ldr	r3, [r2, r3]
 800211c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	43da      	mvns	r2, r3
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4013      	ands	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	025b      	lsls	r3, r3, #9
 8002130:	4013      	ands	r3, r2
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4313      	orrs	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800213c:	4929      	ldr	r1, [pc, #164]	; (80021e4 <HAL_GPIO_Init+0x2b8>)
 800213e:	2280      	movs	r2, #128	; 0x80
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8002144:	4a27      	ldr	r2, [pc, #156]	; (80021e4 <HAL_GPIO_Init+0x2b8>)
 8002146:	2384      	movs	r3, #132	; 0x84
 8002148:	58d3      	ldr	r3, [r2, r3]
 800214a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	43da      	mvns	r2, r3
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4013      	ands	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	2380      	movs	r3, #128	; 0x80
 800215c:	029b      	lsls	r3, r3, #10
 800215e:	4013      	ands	r3, r2
 8002160:	d003      	beq.n	800216a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4313      	orrs	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800216a:	491e      	ldr	r1, [pc, #120]	; (80021e4 <HAL_GPIO_Init+0x2b8>)
 800216c:	2284      	movs	r2, #132	; 0x84
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002172:	4b1c      	ldr	r3, [pc, #112]	; (80021e4 <HAL_GPIO_Init+0x2b8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	43da      	mvns	r2, r3
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4013      	ands	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	2380      	movs	r3, #128	; 0x80
 8002188:	035b      	lsls	r3, r3, #13
 800218a:	4013      	ands	r3, r2
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4313      	orrs	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002196:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <HAL_GPIO_Init+0x2b8>)
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800219c:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <HAL_GPIO_Init+0x2b8>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	43da      	mvns	r2, r3
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4013      	ands	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	2380      	movs	r3, #128	; 0x80
 80021b2:	039b      	lsls	r3, r3, #14
 80021b4:	4013      	ands	r3, r2
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4313      	orrs	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021c0:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <HAL_GPIO_Init+0x2b8>)
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	3301      	adds	r3, #1
 80021ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	40da      	lsrs	r2, r3
 80021d4:	1e13      	subs	r3, r2, #0
 80021d6:	d000      	beq.n	80021da <HAL_GPIO_Init+0x2ae>
 80021d8:	e6b0      	b.n	8001f3c <HAL_GPIO_Init+0x10>
  }
}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	46c0      	nop			; (mov r8, r8)
 80021de:	46bd      	mov	sp, r7
 80021e0:	b006      	add	sp, #24
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40021800 	.word	0x40021800
 80021e8:	50000400 	.word	0x50000400
 80021ec:	50000800 	.word	0x50000800
 80021f0:	50000c00 	.word	0x50000c00

080021f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	0008      	movs	r0, r1
 80021fe:	0011      	movs	r1, r2
 8002200:	1cbb      	adds	r3, r7, #2
 8002202:	1c02      	adds	r2, r0, #0
 8002204:	801a      	strh	r2, [r3, #0]
 8002206:	1c7b      	adds	r3, r7, #1
 8002208:	1c0a      	adds	r2, r1, #0
 800220a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800220c:	1c7b      	adds	r3, r7, #1
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d004      	beq.n	800221e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002214:	1cbb      	adds	r3, r7, #2
 8002216:	881a      	ldrh	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800221c:	e003      	b.n	8002226 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800221e:	1cbb      	adds	r3, r7, #2
 8002220:	881a      	ldrh	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	46bd      	mov	sp, r7
 800222a:	b002      	add	sp, #8
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	000a      	movs	r2, r1
 8002238:	1cbb      	adds	r3, r7, #2
 800223a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002242:	1cbb      	adds	r3, r7, #2
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4013      	ands	r3, r2
 800224a:	041a      	lsls	r2, r3, #16
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	43db      	mvns	r3, r3
 8002250:	1cb9      	adds	r1, r7, #2
 8002252:	8809      	ldrh	r1, [r1, #0]
 8002254:	400b      	ands	r3, r1
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	619a      	str	r2, [r3, #24]
}
 800225c:	46c0      	nop			; (mov r8, r8)
 800225e:	46bd      	mov	sp, r7
 8002260:	b004      	add	sp, #16
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	0002      	movs	r2, r0
 800226c:	1dbb      	adds	r3, r7, #6
 800226e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002270:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	1dba      	adds	r2, r7, #6
 8002276:	8812      	ldrh	r2, [r2, #0]
 8002278:	4013      	ands	r3, r2
 800227a:	d008      	beq.n	800228e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800227c:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800227e:	1dba      	adds	r2, r7, #6
 8002280:	8812      	ldrh	r2, [r2, #0]
 8002282:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002284:	1dbb      	adds	r3, r7, #6
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	0018      	movs	r0, r3
 800228a:	f000 f815 	bl	80022b8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	1dba      	adds	r2, r7, #6
 8002294:	8812      	ldrh	r2, [r2, #0]
 8002296:	4013      	ands	r3, r2
 8002298:	d008      	beq.n	80022ac <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800229c:	1dba      	adds	r2, r7, #6
 800229e:	8812      	ldrh	r2, [r2, #0]
 80022a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80022a2:	1dbb      	adds	r3, r7, #6
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	0018      	movs	r0, r3
 80022a8:	f000 f810 	bl	80022cc <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80022ac:	46c0      	nop			; (mov r8, r8)
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b002      	add	sp, #8
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40021800 	.word	0x40021800

080022b8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	0002      	movs	r2, r0
 80022c0:	1dbb      	adds	r3, r7, #6
 80022c2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80022c4:	46c0      	nop			; (mov r8, r8)
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b002      	add	sp, #8
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	0002      	movs	r2, r0
 80022d4:	1dbb      	adds	r3, r7, #6
 80022d6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80022d8:	46c0      	nop			; (mov r8, r8)
 80022da:	46bd      	mov	sp, r7
 80022dc:	b002      	add	sp, #8
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80022e8:	4b19      	ldr	r3, [pc, #100]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a19      	ldr	r2, [pc, #100]	; (8002354 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	0019      	movs	r1, r3
 80022f2:	4b17      	ldr	r3, [pc, #92]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	429a      	cmp	r2, r3
 8002302:	d11f      	bne.n	8002344 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002304:	4b14      	ldr	r3, [pc, #80]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	0013      	movs	r3, r2
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	189b      	adds	r3, r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	4912      	ldr	r1, [pc, #72]	; (800235c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002312:	0018      	movs	r0, r3
 8002314:	f7fd fef6 	bl	8000104 <__udivsi3>
 8002318:	0003      	movs	r3, r0
 800231a:	3301      	adds	r3, #1
 800231c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800231e:	e008      	b.n	8002332 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	3b01      	subs	r3, #1
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	e001      	b.n	8002332 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e009      	b.n	8002346 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002332:	4b07      	ldr	r3, [pc, #28]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002334:	695a      	ldr	r2, [r3, #20]
 8002336:	2380      	movs	r3, #128	; 0x80
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	401a      	ands	r2, r3
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	429a      	cmp	r2, r3
 8002342:	d0ed      	beq.n	8002320 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	0018      	movs	r0, r3
 8002348:	46bd      	mov	sp, r7
 800234a:	b004      	add	sp, #16
 800234c:	bd80      	pop	{r7, pc}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	40007000 	.word	0x40007000
 8002354:	fffff9ff 	.word	0xfffff9ff
 8002358:	20000000 	.word	0x20000000
 800235c:	000f4240 	.word	0x000f4240

08002360 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002364:	4b03      	ldr	r3, [pc, #12]	; (8002374 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	23e0      	movs	r3, #224	; 0xe0
 800236a:	01db      	lsls	r3, r3, #7
 800236c:	4013      	ands	r3, r2
}
 800236e:	0018      	movs	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40021000 	.word	0x40021000

08002378 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e304      	b.n	8002994 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2201      	movs	r2, #1
 8002390:	4013      	ands	r3, r2
 8002392:	d100      	bne.n	8002396 <HAL_RCC_OscConfig+0x1e>
 8002394:	e07c      	b.n	8002490 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002396:	4bc3      	ldr	r3, [pc, #780]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2238      	movs	r2, #56	; 0x38
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023a0:	4bc0      	ldr	r3, [pc, #768]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	2203      	movs	r2, #3
 80023a6:	4013      	ands	r3, r2
 80023a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	2b10      	cmp	r3, #16
 80023ae:	d102      	bne.n	80023b6 <HAL_RCC_OscConfig+0x3e>
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d002      	beq.n	80023bc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d10b      	bne.n	80023d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023bc:	4bb9      	ldr	r3, [pc, #740]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	029b      	lsls	r3, r3, #10
 80023c4:	4013      	ands	r3, r2
 80023c6:	d062      	beq.n	800248e <HAL_RCC_OscConfig+0x116>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d15e      	bne.n	800248e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e2df      	b.n	8002994 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	025b      	lsls	r3, r3, #9
 80023dc:	429a      	cmp	r2, r3
 80023de:	d107      	bne.n	80023f0 <HAL_RCC_OscConfig+0x78>
 80023e0:	4bb0      	ldr	r3, [pc, #704]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4baf      	ldr	r3, [pc, #700]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 80023e6:	2180      	movs	r1, #128	; 0x80
 80023e8:	0249      	lsls	r1, r1, #9
 80023ea:	430a      	orrs	r2, r1
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	e020      	b.n	8002432 <HAL_RCC_OscConfig+0xba>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	23a0      	movs	r3, #160	; 0xa0
 80023f6:	02db      	lsls	r3, r3, #11
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d10e      	bne.n	800241a <HAL_RCC_OscConfig+0xa2>
 80023fc:	4ba9      	ldr	r3, [pc, #676]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	4ba8      	ldr	r3, [pc, #672]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 8002402:	2180      	movs	r1, #128	; 0x80
 8002404:	02c9      	lsls	r1, r1, #11
 8002406:	430a      	orrs	r2, r1
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	4ba6      	ldr	r3, [pc, #664]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4ba5      	ldr	r3, [pc, #660]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 8002410:	2180      	movs	r1, #128	; 0x80
 8002412:	0249      	lsls	r1, r1, #9
 8002414:	430a      	orrs	r2, r1
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	e00b      	b.n	8002432 <HAL_RCC_OscConfig+0xba>
 800241a:	4ba2      	ldr	r3, [pc, #648]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	4ba1      	ldr	r3, [pc, #644]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 8002420:	49a1      	ldr	r1, [pc, #644]	; (80026a8 <HAL_RCC_OscConfig+0x330>)
 8002422:	400a      	ands	r2, r1
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	4b9f      	ldr	r3, [pc, #636]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	4b9e      	ldr	r3, [pc, #632]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 800242c:	499f      	ldr	r1, [pc, #636]	; (80026ac <HAL_RCC_OscConfig+0x334>)
 800242e:	400a      	ands	r2, r1
 8002430:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d014      	beq.n	8002464 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243a:	f7fe feeb 	bl	8001214 <HAL_GetTick>
 800243e:	0003      	movs	r3, r0
 8002440:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002444:	f7fe fee6 	bl	8001214 <HAL_GetTick>
 8002448:	0002      	movs	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b64      	cmp	r3, #100	; 0x64
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e29e      	b.n	8002994 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002456:	4b93      	ldr	r3, [pc, #588]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	029b      	lsls	r3, r3, #10
 800245e:	4013      	ands	r3, r2
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0xcc>
 8002462:	e015      	b.n	8002490 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7fe fed6 	bl	8001214 <HAL_GetTick>
 8002468:	0003      	movs	r3, r0
 800246a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800246e:	f7fe fed1 	bl	8001214 <HAL_GetTick>
 8002472:	0002      	movs	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b64      	cmp	r3, #100	; 0x64
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e289      	b.n	8002994 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002480:	4b88      	ldr	r3, [pc, #544]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	2380      	movs	r3, #128	; 0x80
 8002486:	029b      	lsls	r3, r3, #10
 8002488:	4013      	ands	r3, r2
 800248a:	d1f0      	bne.n	800246e <HAL_RCC_OscConfig+0xf6>
 800248c:	e000      	b.n	8002490 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800248e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2202      	movs	r2, #2
 8002496:	4013      	ands	r3, r2
 8002498:	d100      	bne.n	800249c <HAL_RCC_OscConfig+0x124>
 800249a:	e099      	b.n	80025d0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800249c:	4b81      	ldr	r3, [pc, #516]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2238      	movs	r2, #56	; 0x38
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024a6:	4b7f      	ldr	r3, [pc, #508]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	2203      	movs	r2, #3
 80024ac:	4013      	ands	r3, r2
 80024ae:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	2b10      	cmp	r3, #16
 80024b4:	d102      	bne.n	80024bc <HAL_RCC_OscConfig+0x144>
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d002      	beq.n	80024c2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d135      	bne.n	800252e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024c2:	4b78      	ldr	r3, [pc, #480]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4013      	ands	r3, r2
 80024cc:	d005      	beq.n	80024da <HAL_RCC_OscConfig+0x162>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e25c      	b.n	8002994 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024da:	4b72      	ldr	r3, [pc, #456]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	4a74      	ldr	r2, [pc, #464]	; (80026b0 <HAL_RCC_OscConfig+0x338>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	0019      	movs	r1, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	021a      	lsls	r2, r3, #8
 80024ea:	4b6e      	ldr	r3, [pc, #440]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 80024ec:	430a      	orrs	r2, r1
 80024ee:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d112      	bne.n	800251c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80024f6:	4b6b      	ldr	r3, [pc, #428]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a6e      	ldr	r2, [pc, #440]	; (80026b4 <HAL_RCC_OscConfig+0x33c>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	0019      	movs	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691a      	ldr	r2, [r3, #16]
 8002504:	4b67      	ldr	r3, [pc, #412]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 8002506:	430a      	orrs	r2, r1
 8002508:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800250a:	4b66      	ldr	r3, [pc, #408]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	0adb      	lsrs	r3, r3, #11
 8002510:	2207      	movs	r2, #7
 8002512:	4013      	ands	r3, r2
 8002514:	4a68      	ldr	r2, [pc, #416]	; (80026b8 <HAL_RCC_OscConfig+0x340>)
 8002516:	40da      	lsrs	r2, r3
 8002518:	4b68      	ldr	r3, [pc, #416]	; (80026bc <HAL_RCC_OscConfig+0x344>)
 800251a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800251c:	4b68      	ldr	r3, [pc, #416]	; (80026c0 <HAL_RCC_OscConfig+0x348>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	0018      	movs	r0, r3
 8002522:	f7fe fe1b 	bl	800115c <HAL_InitTick>
 8002526:	1e03      	subs	r3, r0, #0
 8002528:	d051      	beq.n	80025ce <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e232      	b.n	8002994 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d030      	beq.n	8002598 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002536:	4b5b      	ldr	r3, [pc, #364]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a5e      	ldr	r2, [pc, #376]	; (80026b4 <HAL_RCC_OscConfig+0x33c>)
 800253c:	4013      	ands	r3, r2
 800253e:	0019      	movs	r1, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	4b57      	ldr	r3, [pc, #348]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 8002546:	430a      	orrs	r2, r1
 8002548:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800254a:	4b56      	ldr	r3, [pc, #344]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	4b55      	ldr	r3, [pc, #340]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 8002550:	2180      	movs	r1, #128	; 0x80
 8002552:	0049      	lsls	r1, r1, #1
 8002554:	430a      	orrs	r2, r1
 8002556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002558:	f7fe fe5c 	bl	8001214 <HAL_GetTick>
 800255c:	0003      	movs	r3, r0
 800255e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002562:	f7fe fe57 	bl	8001214 <HAL_GetTick>
 8002566:	0002      	movs	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e20f      	b.n	8002994 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002574:	4b4b      	ldr	r3, [pc, #300]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	2380      	movs	r3, #128	; 0x80
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4013      	ands	r3, r2
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002580:	4b48      	ldr	r3, [pc, #288]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4a4a      	ldr	r2, [pc, #296]	; (80026b0 <HAL_RCC_OscConfig+0x338>)
 8002586:	4013      	ands	r3, r2
 8002588:	0019      	movs	r1, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	021a      	lsls	r2, r3, #8
 8002590:	4b44      	ldr	r3, [pc, #272]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 8002592:	430a      	orrs	r2, r1
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	e01b      	b.n	80025d0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002598:	4b42      	ldr	r3, [pc, #264]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4b41      	ldr	r3, [pc, #260]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 800259e:	4949      	ldr	r1, [pc, #292]	; (80026c4 <HAL_RCC_OscConfig+0x34c>)
 80025a0:	400a      	ands	r2, r1
 80025a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7fe fe36 	bl	8001214 <HAL_GetTick>
 80025a8:	0003      	movs	r3, r0
 80025aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ae:	f7fe fe31 	bl	8001214 <HAL_GetTick>
 80025b2:	0002      	movs	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e1e9      	b.n	8002994 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025c0:	4b38      	ldr	r3, [pc, #224]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4013      	ands	r3, r2
 80025ca:	d1f0      	bne.n	80025ae <HAL_RCC_OscConfig+0x236>
 80025cc:	e000      	b.n	80025d0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025ce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2208      	movs	r2, #8
 80025d6:	4013      	ands	r3, r2
 80025d8:	d047      	beq.n	800266a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80025da:	4b32      	ldr	r3, [pc, #200]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2238      	movs	r2, #56	; 0x38
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b18      	cmp	r3, #24
 80025e4:	d10a      	bne.n	80025fc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80025e6:	4b2f      	ldr	r3, [pc, #188]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 80025e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ea:	2202      	movs	r2, #2
 80025ec:	4013      	ands	r3, r2
 80025ee:	d03c      	beq.n	800266a <HAL_RCC_OscConfig+0x2f2>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d138      	bne.n	800266a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e1cb      	b.n	8002994 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d019      	beq.n	8002638 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002604:	4b27      	ldr	r3, [pc, #156]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 8002606:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002608:	4b26      	ldr	r3, [pc, #152]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 800260a:	2101      	movs	r1, #1
 800260c:	430a      	orrs	r2, r1
 800260e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002610:	f7fe fe00 	bl	8001214 <HAL_GetTick>
 8002614:	0003      	movs	r3, r0
 8002616:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261a:	f7fe fdfb 	bl	8001214 <HAL_GetTick>
 800261e:	0002      	movs	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e1b3      	b.n	8002994 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800262c:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 800262e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002630:	2202      	movs	r2, #2
 8002632:	4013      	ands	r3, r2
 8002634:	d0f1      	beq.n	800261a <HAL_RCC_OscConfig+0x2a2>
 8002636:	e018      	b.n	800266a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002638:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 800263a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800263c:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 800263e:	2101      	movs	r1, #1
 8002640:	438a      	bics	r2, r1
 8002642:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002644:	f7fe fde6 	bl	8001214 <HAL_GetTick>
 8002648:	0003      	movs	r3, r0
 800264a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800264e:	f7fe fde1 	bl	8001214 <HAL_GetTick>
 8002652:	0002      	movs	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e199      	b.n	8002994 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002660:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 8002662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002664:	2202      	movs	r2, #2
 8002666:	4013      	ands	r3, r2
 8002668:	d1f1      	bne.n	800264e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2204      	movs	r2, #4
 8002670:	4013      	ands	r3, r2
 8002672:	d100      	bne.n	8002676 <HAL_RCC_OscConfig+0x2fe>
 8002674:	e0c6      	b.n	8002804 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002676:	231f      	movs	r3, #31
 8002678:	18fb      	adds	r3, r7, r3
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800267e:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2238      	movs	r2, #56	; 0x38
 8002684:	4013      	ands	r3, r2
 8002686:	2b20      	cmp	r3, #32
 8002688:	d11e      	bne.n	80026c8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_RCC_OscConfig+0x32c>)
 800268c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268e:	2202      	movs	r2, #2
 8002690:	4013      	ands	r3, r2
 8002692:	d100      	bne.n	8002696 <HAL_RCC_OscConfig+0x31e>
 8002694:	e0b6      	b.n	8002804 <HAL_RCC_OscConfig+0x48c>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d000      	beq.n	80026a0 <HAL_RCC_OscConfig+0x328>
 800269e:	e0b1      	b.n	8002804 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e177      	b.n	8002994 <HAL_RCC_OscConfig+0x61c>
 80026a4:	40021000 	.word	0x40021000
 80026a8:	fffeffff 	.word	0xfffeffff
 80026ac:	fffbffff 	.word	0xfffbffff
 80026b0:	ffff80ff 	.word	0xffff80ff
 80026b4:	ffffc7ff 	.word	0xffffc7ff
 80026b8:	00f42400 	.word	0x00f42400
 80026bc:	20000000 	.word	0x20000000
 80026c0:	20000004 	.word	0x20000004
 80026c4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026c8:	4bb4      	ldr	r3, [pc, #720]	; (800299c <HAL_RCC_OscConfig+0x624>)
 80026ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026cc:	2380      	movs	r3, #128	; 0x80
 80026ce:	055b      	lsls	r3, r3, #21
 80026d0:	4013      	ands	r3, r2
 80026d2:	d101      	bne.n	80026d8 <HAL_RCC_OscConfig+0x360>
 80026d4:	2301      	movs	r3, #1
 80026d6:	e000      	b.n	80026da <HAL_RCC_OscConfig+0x362>
 80026d8:	2300      	movs	r3, #0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d011      	beq.n	8002702 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80026de:	4baf      	ldr	r3, [pc, #700]	; (800299c <HAL_RCC_OscConfig+0x624>)
 80026e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026e2:	4bae      	ldr	r3, [pc, #696]	; (800299c <HAL_RCC_OscConfig+0x624>)
 80026e4:	2180      	movs	r1, #128	; 0x80
 80026e6:	0549      	lsls	r1, r1, #21
 80026e8:	430a      	orrs	r2, r1
 80026ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80026ec:	4bab      	ldr	r3, [pc, #684]	; (800299c <HAL_RCC_OscConfig+0x624>)
 80026ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026f0:	2380      	movs	r3, #128	; 0x80
 80026f2:	055b      	lsls	r3, r3, #21
 80026f4:	4013      	ands	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80026fa:	231f      	movs	r3, #31
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	2201      	movs	r2, #1
 8002700:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002702:	4ba7      	ldr	r3, [pc, #668]	; (80029a0 <HAL_RCC_OscConfig+0x628>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	2380      	movs	r3, #128	; 0x80
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	4013      	ands	r3, r2
 800270c:	d11a      	bne.n	8002744 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800270e:	4ba4      	ldr	r3, [pc, #656]	; (80029a0 <HAL_RCC_OscConfig+0x628>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	4ba3      	ldr	r3, [pc, #652]	; (80029a0 <HAL_RCC_OscConfig+0x628>)
 8002714:	2180      	movs	r1, #128	; 0x80
 8002716:	0049      	lsls	r1, r1, #1
 8002718:	430a      	orrs	r2, r1
 800271a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800271c:	f7fe fd7a 	bl	8001214 <HAL_GetTick>
 8002720:	0003      	movs	r3, r0
 8002722:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002726:	f7fe fd75 	bl	8001214 <HAL_GetTick>
 800272a:	0002      	movs	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e12d      	b.n	8002994 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002738:	4b99      	ldr	r3, [pc, #612]	; (80029a0 <HAL_RCC_OscConfig+0x628>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4013      	ands	r3, r2
 8002742:	d0f0      	beq.n	8002726 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d106      	bne.n	800275a <HAL_RCC_OscConfig+0x3e2>
 800274c:	4b93      	ldr	r3, [pc, #588]	; (800299c <HAL_RCC_OscConfig+0x624>)
 800274e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002750:	4b92      	ldr	r3, [pc, #584]	; (800299c <HAL_RCC_OscConfig+0x624>)
 8002752:	2101      	movs	r1, #1
 8002754:	430a      	orrs	r2, r1
 8002756:	65da      	str	r2, [r3, #92]	; 0x5c
 8002758:	e01c      	b.n	8002794 <HAL_RCC_OscConfig+0x41c>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b05      	cmp	r3, #5
 8002760:	d10c      	bne.n	800277c <HAL_RCC_OscConfig+0x404>
 8002762:	4b8e      	ldr	r3, [pc, #568]	; (800299c <HAL_RCC_OscConfig+0x624>)
 8002764:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002766:	4b8d      	ldr	r3, [pc, #564]	; (800299c <HAL_RCC_OscConfig+0x624>)
 8002768:	2104      	movs	r1, #4
 800276a:	430a      	orrs	r2, r1
 800276c:	65da      	str	r2, [r3, #92]	; 0x5c
 800276e:	4b8b      	ldr	r3, [pc, #556]	; (800299c <HAL_RCC_OscConfig+0x624>)
 8002770:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002772:	4b8a      	ldr	r3, [pc, #552]	; (800299c <HAL_RCC_OscConfig+0x624>)
 8002774:	2101      	movs	r1, #1
 8002776:	430a      	orrs	r2, r1
 8002778:	65da      	str	r2, [r3, #92]	; 0x5c
 800277a:	e00b      	b.n	8002794 <HAL_RCC_OscConfig+0x41c>
 800277c:	4b87      	ldr	r3, [pc, #540]	; (800299c <HAL_RCC_OscConfig+0x624>)
 800277e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002780:	4b86      	ldr	r3, [pc, #536]	; (800299c <HAL_RCC_OscConfig+0x624>)
 8002782:	2101      	movs	r1, #1
 8002784:	438a      	bics	r2, r1
 8002786:	65da      	str	r2, [r3, #92]	; 0x5c
 8002788:	4b84      	ldr	r3, [pc, #528]	; (800299c <HAL_RCC_OscConfig+0x624>)
 800278a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800278c:	4b83      	ldr	r3, [pc, #524]	; (800299c <HAL_RCC_OscConfig+0x624>)
 800278e:	2104      	movs	r1, #4
 8002790:	438a      	bics	r2, r1
 8002792:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d014      	beq.n	80027c6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279c:	f7fe fd3a 	bl	8001214 <HAL_GetTick>
 80027a0:	0003      	movs	r3, r0
 80027a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027a4:	e009      	b.n	80027ba <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a6:	f7fe fd35 	bl	8001214 <HAL_GetTick>
 80027aa:	0002      	movs	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	4a7c      	ldr	r2, [pc, #496]	; (80029a4 <HAL_RCC_OscConfig+0x62c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e0ec      	b.n	8002994 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ba:	4b78      	ldr	r3, [pc, #480]	; (800299c <HAL_RCC_OscConfig+0x624>)
 80027bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027be:	2202      	movs	r2, #2
 80027c0:	4013      	ands	r3, r2
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCC_OscConfig+0x42e>
 80027c4:	e013      	b.n	80027ee <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c6:	f7fe fd25 	bl	8001214 <HAL_GetTick>
 80027ca:	0003      	movs	r3, r0
 80027cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027ce:	e009      	b.n	80027e4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d0:	f7fe fd20 	bl	8001214 <HAL_GetTick>
 80027d4:	0002      	movs	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	4a72      	ldr	r2, [pc, #456]	; (80029a4 <HAL_RCC_OscConfig+0x62c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e0d7      	b.n	8002994 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027e4:	4b6d      	ldr	r3, [pc, #436]	; (800299c <HAL_RCC_OscConfig+0x624>)
 80027e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e8:	2202      	movs	r2, #2
 80027ea:	4013      	ands	r3, r2
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80027ee:	231f      	movs	r3, #31
 80027f0:	18fb      	adds	r3, r7, r3
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d105      	bne.n	8002804 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80027f8:	4b68      	ldr	r3, [pc, #416]	; (800299c <HAL_RCC_OscConfig+0x624>)
 80027fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027fc:	4b67      	ldr	r3, [pc, #412]	; (800299c <HAL_RCC_OscConfig+0x624>)
 80027fe:	496a      	ldr	r1, [pc, #424]	; (80029a8 <HAL_RCC_OscConfig+0x630>)
 8002800:	400a      	ands	r2, r1
 8002802:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d100      	bne.n	800280e <HAL_RCC_OscConfig+0x496>
 800280c:	e0c1      	b.n	8002992 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800280e:	4b63      	ldr	r3, [pc, #396]	; (800299c <HAL_RCC_OscConfig+0x624>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2238      	movs	r2, #56	; 0x38
 8002814:	4013      	ands	r3, r2
 8002816:	2b10      	cmp	r3, #16
 8002818:	d100      	bne.n	800281c <HAL_RCC_OscConfig+0x4a4>
 800281a:	e081      	b.n	8002920 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	2b02      	cmp	r3, #2
 8002822:	d156      	bne.n	80028d2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002824:	4b5d      	ldr	r3, [pc, #372]	; (800299c <HAL_RCC_OscConfig+0x624>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4b5c      	ldr	r3, [pc, #368]	; (800299c <HAL_RCC_OscConfig+0x624>)
 800282a:	4960      	ldr	r1, [pc, #384]	; (80029ac <HAL_RCC_OscConfig+0x634>)
 800282c:	400a      	ands	r2, r1
 800282e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002830:	f7fe fcf0 	bl	8001214 <HAL_GetTick>
 8002834:	0003      	movs	r3, r0
 8002836:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283a:	f7fe fceb 	bl	8001214 <HAL_GetTick>
 800283e:	0002      	movs	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e0a3      	b.n	8002994 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800284c:	4b53      	ldr	r3, [pc, #332]	; (800299c <HAL_RCC_OscConfig+0x624>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	049b      	lsls	r3, r3, #18
 8002854:	4013      	ands	r3, r2
 8002856:	d1f0      	bne.n	800283a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002858:	4b50      	ldr	r3, [pc, #320]	; (800299c <HAL_RCC_OscConfig+0x624>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	4a54      	ldr	r2, [pc, #336]	; (80029b0 <HAL_RCC_OscConfig+0x638>)
 800285e:	4013      	ands	r3, r2
 8002860:	0019      	movs	r1, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1a      	ldr	r2, [r3, #32]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002870:	021b      	lsls	r3, r3, #8
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002878:	431a      	orrs	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002884:	431a      	orrs	r2, r3
 8002886:	4b45      	ldr	r3, [pc, #276]	; (800299c <HAL_RCC_OscConfig+0x624>)
 8002888:	430a      	orrs	r2, r1
 800288a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800288c:	4b43      	ldr	r3, [pc, #268]	; (800299c <HAL_RCC_OscConfig+0x624>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4b42      	ldr	r3, [pc, #264]	; (800299c <HAL_RCC_OscConfig+0x624>)
 8002892:	2180      	movs	r1, #128	; 0x80
 8002894:	0449      	lsls	r1, r1, #17
 8002896:	430a      	orrs	r2, r1
 8002898:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800289a:	4b40      	ldr	r3, [pc, #256]	; (800299c <HAL_RCC_OscConfig+0x624>)
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	4b3f      	ldr	r3, [pc, #252]	; (800299c <HAL_RCC_OscConfig+0x624>)
 80028a0:	2180      	movs	r1, #128	; 0x80
 80028a2:	0549      	lsls	r1, r1, #21
 80028a4:	430a      	orrs	r2, r1
 80028a6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a8:	f7fe fcb4 	bl	8001214 <HAL_GetTick>
 80028ac:	0003      	movs	r3, r0
 80028ae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b2:	f7fe fcaf 	bl	8001214 <HAL_GetTick>
 80028b6:	0002      	movs	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e067      	b.n	8002994 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028c4:	4b35      	ldr	r3, [pc, #212]	; (800299c <HAL_RCC_OscConfig+0x624>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	2380      	movs	r3, #128	; 0x80
 80028ca:	049b      	lsls	r3, r3, #18
 80028cc:	4013      	ands	r3, r2
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x53a>
 80028d0:	e05f      	b.n	8002992 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d2:	4b32      	ldr	r3, [pc, #200]	; (800299c <HAL_RCC_OscConfig+0x624>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	4b31      	ldr	r3, [pc, #196]	; (800299c <HAL_RCC_OscConfig+0x624>)
 80028d8:	4934      	ldr	r1, [pc, #208]	; (80029ac <HAL_RCC_OscConfig+0x634>)
 80028da:	400a      	ands	r2, r1
 80028dc:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80028de:	4b2f      	ldr	r3, [pc, #188]	; (800299c <HAL_RCC_OscConfig+0x624>)
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	4b2e      	ldr	r3, [pc, #184]	; (800299c <HAL_RCC_OscConfig+0x624>)
 80028e4:	2103      	movs	r1, #3
 80028e6:	438a      	bics	r2, r1
 80028e8:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80028ea:	4b2c      	ldr	r3, [pc, #176]	; (800299c <HAL_RCC_OscConfig+0x624>)
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	4b2b      	ldr	r3, [pc, #172]	; (800299c <HAL_RCC_OscConfig+0x624>)
 80028f0:	4930      	ldr	r1, [pc, #192]	; (80029b4 <HAL_RCC_OscConfig+0x63c>)
 80028f2:	400a      	ands	r2, r1
 80028f4:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f6:	f7fe fc8d 	bl	8001214 <HAL_GetTick>
 80028fa:	0003      	movs	r3, r0
 80028fc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002900:	f7fe fc88 	bl	8001214 <HAL_GetTick>
 8002904:	0002      	movs	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e040      	b.n	8002994 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002912:	4b22      	ldr	r3, [pc, #136]	; (800299c <HAL_RCC_OscConfig+0x624>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	2380      	movs	r3, #128	; 0x80
 8002918:	049b      	lsls	r3, r3, #18
 800291a:	4013      	ands	r3, r2
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x588>
 800291e:	e038      	b.n	8002992 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e033      	b.n	8002994 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800292c:	4b1b      	ldr	r3, [pc, #108]	; (800299c <HAL_RCC_OscConfig+0x624>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2203      	movs	r2, #3
 8002936:	401a      	ands	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	429a      	cmp	r2, r3
 800293e:	d126      	bne.n	800298e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2270      	movs	r2, #112	; 0x70
 8002944:	401a      	ands	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294a:	429a      	cmp	r2, r3
 800294c:	d11f      	bne.n	800298e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	23fe      	movs	r3, #254	; 0xfe
 8002952:	01db      	lsls	r3, r3, #7
 8002954:	401a      	ands	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d116      	bne.n	800298e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	23f8      	movs	r3, #248	; 0xf8
 8002964:	039b      	lsls	r3, r3, #14
 8002966:	401a      	ands	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800296c:	429a      	cmp	r2, r3
 800296e:	d10e      	bne.n	800298e <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	23e0      	movs	r3, #224	; 0xe0
 8002974:	051b      	lsls	r3, r3, #20
 8002976:	401a      	ands	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800297c:	429a      	cmp	r2, r3
 800297e:	d106      	bne.n	800298e <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	0f5b      	lsrs	r3, r3, #29
 8002984:	075a      	lsls	r2, r3, #29
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800298a:	429a      	cmp	r2, r3
 800298c:	d001      	beq.n	8002992 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	0018      	movs	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	b008      	add	sp, #32
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40021000 	.word	0x40021000
 80029a0:	40007000 	.word	0x40007000
 80029a4:	00001388 	.word	0x00001388
 80029a8:	efffffff 	.word	0xefffffff
 80029ac:	feffffff 	.word	0xfeffffff
 80029b0:	11c1808c 	.word	0x11c1808c
 80029b4:	eefeffff 	.word	0xeefeffff

080029b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0e9      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029cc:	4b76      	ldr	r3, [pc, #472]	; (8002ba8 <HAL_RCC_ClockConfig+0x1f0>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2207      	movs	r2, #7
 80029d2:	4013      	ands	r3, r2
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d91e      	bls.n	8002a18 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029da:	4b73      	ldr	r3, [pc, #460]	; (8002ba8 <HAL_RCC_ClockConfig+0x1f0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2207      	movs	r2, #7
 80029e0:	4393      	bics	r3, r2
 80029e2:	0019      	movs	r1, r3
 80029e4:	4b70      	ldr	r3, [pc, #448]	; (8002ba8 <HAL_RCC_ClockConfig+0x1f0>)
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029ec:	f7fe fc12 	bl	8001214 <HAL_GetTick>
 80029f0:	0003      	movs	r3, r0
 80029f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029f4:	e009      	b.n	8002a0a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f6:	f7fe fc0d 	bl	8001214 <HAL_GetTick>
 80029fa:	0002      	movs	r2, r0
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	4a6a      	ldr	r2, [pc, #424]	; (8002bac <HAL_RCC_ClockConfig+0x1f4>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e0ca      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a0a:	4b67      	ldr	r3, [pc, #412]	; (8002ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2207      	movs	r2, #7
 8002a10:	4013      	ands	r3, r2
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d1ee      	bne.n	80029f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d015      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2204      	movs	r2, #4
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d006      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a2c:	4b60      	ldr	r3, [pc, #384]	; (8002bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	4b5f      	ldr	r3, [pc, #380]	; (8002bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a32:	21e0      	movs	r1, #224	; 0xe0
 8002a34:	01c9      	lsls	r1, r1, #7
 8002a36:	430a      	orrs	r2, r1
 8002a38:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a3a:	4b5d      	ldr	r3, [pc, #372]	; (8002bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	4a5d      	ldr	r2, [pc, #372]	; (8002bb4 <HAL_RCC_ClockConfig+0x1fc>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	0019      	movs	r1, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	4b59      	ldr	r3, [pc, #356]	; (8002bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2201      	movs	r2, #1
 8002a54:	4013      	ands	r3, r2
 8002a56:	d057      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d107      	bne.n	8002a70 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a60:	4b53      	ldr	r3, [pc, #332]	; (8002bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	2380      	movs	r3, #128	; 0x80
 8002a66:	029b      	lsls	r3, r3, #10
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d12b      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e097      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d107      	bne.n	8002a88 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a78:	4b4d      	ldr	r3, [pc, #308]	; (8002bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	049b      	lsls	r3, r3, #18
 8002a80:	4013      	ands	r3, r2
 8002a82:	d11f      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e08b      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d107      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a90:	4b47      	ldr	r3, [pc, #284]	; (8002bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	2380      	movs	r3, #128	; 0x80
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d113      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e07f      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d106      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aa8:	4b41      	ldr	r3, [pc, #260]	; (8002bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aac:	2202      	movs	r2, #2
 8002aae:	4013      	ands	r3, r2
 8002ab0:	d108      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e074      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ab6:	4b3e      	ldr	r3, [pc, #248]	; (8002bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aba:	2202      	movs	r2, #2
 8002abc:	4013      	ands	r3, r2
 8002abe:	d101      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e06d      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ac4:	4b3a      	ldr	r3, [pc, #232]	; (8002bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2207      	movs	r2, #7
 8002aca:	4393      	bics	r3, r2
 8002acc:	0019      	movs	r1, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	4b37      	ldr	r3, [pc, #220]	; (8002bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ad8:	f7fe fb9c 	bl	8001214 <HAL_GetTick>
 8002adc:	0003      	movs	r3, r0
 8002ade:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae0:	e009      	b.n	8002af6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae2:	f7fe fb97 	bl	8001214 <HAL_GetTick>
 8002ae6:	0002      	movs	r2, r0
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	4a2f      	ldr	r2, [pc, #188]	; (8002bac <HAL_RCC_ClockConfig+0x1f4>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e054      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af6:	4b2e      	ldr	r3, [pc, #184]	; (8002bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2238      	movs	r2, #56	; 0x38
 8002afc:	401a      	ands	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d1ec      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b08:	4b27      	ldr	r3, [pc, #156]	; (8002ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2207      	movs	r2, #7
 8002b0e:	4013      	ands	r3, r2
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d21e      	bcs.n	8002b54 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b16:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2207      	movs	r2, #7
 8002b1c:	4393      	bics	r3, r2
 8002b1e:	0019      	movs	r1, r3
 8002b20:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b28:	f7fe fb74 	bl	8001214 <HAL_GetTick>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b30:	e009      	b.n	8002b46 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b32:	f7fe fb6f 	bl	8001214 <HAL_GetTick>
 8002b36:	0002      	movs	r2, r0
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	4a1b      	ldr	r2, [pc, #108]	; (8002bac <HAL_RCC_ClockConfig+0x1f4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e02c      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b46:	4b18      	ldr	r3, [pc, #96]	; (8002ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2207      	movs	r2, #7
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d1ee      	bne.n	8002b32 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2204      	movs	r2, #4
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d009      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b5e:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	4a15      	ldr	r2, [pc, #84]	; (8002bb8 <HAL_RCC_ClockConfig+0x200>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	0019      	movs	r1, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002b72:	f000 f829 	bl	8002bc8 <HAL_RCC_GetSysClockFreq>
 8002b76:	0001      	movs	r1, r0
 8002b78:	4b0d      	ldr	r3, [pc, #52]	; (8002bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	0a1b      	lsrs	r3, r3, #8
 8002b7e:	220f      	movs	r2, #15
 8002b80:	401a      	ands	r2, r3
 8002b82:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <HAL_RCC_ClockConfig+0x204>)
 8002b84:	0092      	lsls	r2, r2, #2
 8002b86:	58d3      	ldr	r3, [r2, r3]
 8002b88:	221f      	movs	r2, #31
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	000a      	movs	r2, r1
 8002b8e:	40da      	lsrs	r2, r3
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_RCC_ClockConfig+0x208>)
 8002b92:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002b94:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <HAL_RCC_ClockConfig+0x20c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f7fe fadf 	bl	800115c <HAL_InitTick>
 8002b9e:	0003      	movs	r3, r0
}
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b004      	add	sp, #16
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40022000 	.word	0x40022000
 8002bac:	00001388 	.word	0x00001388
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	fffff0ff 	.word	0xfffff0ff
 8002bb8:	ffff8fff 	.word	0xffff8fff
 8002bbc:	08005d30 	.word	0x08005d30
 8002bc0:	20000000 	.word	0x20000000
 8002bc4:	20000004 	.word	0x20000004

08002bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bce:	4b3c      	ldr	r3, [pc, #240]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2238      	movs	r2, #56	; 0x38
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	d10f      	bne.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002bd8:	4b39      	ldr	r3, [pc, #228]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	0adb      	lsrs	r3, r3, #11
 8002bde:	2207      	movs	r2, #7
 8002be0:	4013      	ands	r3, r2
 8002be2:	2201      	movs	r2, #1
 8002be4:	409a      	lsls	r2, r3
 8002be6:	0013      	movs	r3, r2
 8002be8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002bea:	6839      	ldr	r1, [r7, #0]
 8002bec:	4835      	ldr	r0, [pc, #212]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002bee:	f7fd fa89 	bl	8000104 <__udivsi3>
 8002bf2:	0003      	movs	r3, r0
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	e05d      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bf8:	4b31      	ldr	r3, [pc, #196]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2238      	movs	r2, #56	; 0x38
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d102      	bne.n	8002c0a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c04:	4b30      	ldr	r3, [pc, #192]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	e054      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c0a:	4b2d      	ldr	r3, [pc, #180]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2238      	movs	r2, #56	; 0x38
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b10      	cmp	r3, #16
 8002c14:	d138      	bne.n	8002c88 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002c16:	4b2a      	ldr	r3, [pc, #168]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c20:	4b27      	ldr	r3, [pc, #156]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	2207      	movs	r2, #7
 8002c28:	4013      	ands	r3, r2
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d10d      	bne.n	8002c50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c34:	68b9      	ldr	r1, [r7, #8]
 8002c36:	4824      	ldr	r0, [pc, #144]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002c38:	f7fd fa64 	bl	8000104 <__udivsi3>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	0019      	movs	r1, r3
 8002c40:	4b1f      	ldr	r3, [pc, #124]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	0a1b      	lsrs	r3, r3, #8
 8002c46:	227f      	movs	r2, #127	; 0x7f
 8002c48:	4013      	ands	r3, r2
 8002c4a:	434b      	muls	r3, r1
 8002c4c:	617b      	str	r3, [r7, #20]
        break;
 8002c4e:	e00d      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002c50:	68b9      	ldr	r1, [r7, #8]
 8002c52:	481c      	ldr	r0, [pc, #112]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c54:	f7fd fa56 	bl	8000104 <__udivsi3>
 8002c58:	0003      	movs	r3, r0
 8002c5a:	0019      	movs	r1, r3
 8002c5c:	4b18      	ldr	r3, [pc, #96]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	0a1b      	lsrs	r3, r3, #8
 8002c62:	227f      	movs	r2, #127	; 0x7f
 8002c64:	4013      	ands	r3, r2
 8002c66:	434b      	muls	r3, r1
 8002c68:	617b      	str	r3, [r7, #20]
        break;
 8002c6a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002c6c:	4b14      	ldr	r3, [pc, #80]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	0f5b      	lsrs	r3, r3, #29
 8002c72:	2207      	movs	r2, #7
 8002c74:	4013      	ands	r3, r2
 8002c76:	3301      	adds	r3, #1
 8002c78:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	6978      	ldr	r0, [r7, #20]
 8002c7e:	f7fd fa41 	bl	8000104 <__udivsi3>
 8002c82:	0003      	movs	r3, r0
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	e015      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002c88:	4b0d      	ldr	r3, [pc, #52]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	2238      	movs	r2, #56	; 0x38
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b20      	cmp	r3, #32
 8002c92:	d103      	bne.n	8002c9c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	021b      	lsls	r3, r3, #8
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	e00b      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002c9c:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2238      	movs	r2, #56	; 0x38
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b18      	cmp	r3, #24
 8002ca6:	d103      	bne.n	8002cb0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002ca8:	23fa      	movs	r3, #250	; 0xfa
 8002caa:	01db      	lsls	r3, r3, #7
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	e001      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002cb4:	693b      	ldr	r3, [r7, #16]
}
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	b006      	add	sp, #24
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	00f42400 	.word	0x00f42400
 8002cc8:	007a1200 	.word	0x007a1200

08002ccc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cd0:	4b02      	ldr	r3, [pc, #8]	; (8002cdc <HAL_RCC_GetHCLKFreq+0x10>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
}
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	20000000 	.word	0x20000000

08002ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce0:	b5b0      	push	{r4, r5, r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002ce4:	f7ff fff2 	bl	8002ccc <HAL_RCC_GetHCLKFreq>
 8002ce8:	0004      	movs	r4, r0
 8002cea:	f7ff fb39 	bl	8002360 <LL_RCC_GetAPB1Prescaler>
 8002cee:	0003      	movs	r3, r0
 8002cf0:	0b1a      	lsrs	r2, r3, #12
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cf4:	0092      	lsls	r2, r2, #2
 8002cf6:	58d3      	ldr	r3, [r2, r3]
 8002cf8:	221f      	movs	r2, #31
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	40dc      	lsrs	r4, r3
 8002cfe:	0023      	movs	r3, r4
}
 8002d00:	0018      	movs	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bdb0      	pop	{r4, r5, r7, pc}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	08005d70 	.word	0x08005d70

08002d0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002d14:	2313      	movs	r3, #19
 8002d16:	18fb      	adds	r3, r7, r3
 8002d18:	2200      	movs	r2, #0
 8002d1a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d1c:	2312      	movs	r3, #18
 8002d1e:	18fb      	adds	r3, r7, r3
 8002d20:	2200      	movs	r2, #0
 8002d22:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	2380      	movs	r3, #128	; 0x80
 8002d2a:	029b      	lsls	r3, r3, #10
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d100      	bne.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002d30:	e0a3      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d32:	2011      	movs	r0, #17
 8002d34:	183b      	adds	r3, r7, r0
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d3a:	4bc3      	ldr	r3, [pc, #780]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d3e:	2380      	movs	r3, #128	; 0x80
 8002d40:	055b      	lsls	r3, r3, #21
 8002d42:	4013      	ands	r3, r2
 8002d44:	d110      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d46:	4bc0      	ldr	r3, [pc, #768]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d4a:	4bbf      	ldr	r3, [pc, #764]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d4c:	2180      	movs	r1, #128	; 0x80
 8002d4e:	0549      	lsls	r1, r1, #21
 8002d50:	430a      	orrs	r2, r1
 8002d52:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d54:	4bbc      	ldr	r3, [pc, #752]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d58:	2380      	movs	r3, #128	; 0x80
 8002d5a:	055b      	lsls	r3, r3, #21
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	60bb      	str	r3, [r7, #8]
 8002d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d62:	183b      	adds	r3, r7, r0
 8002d64:	2201      	movs	r2, #1
 8002d66:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d68:	4bb8      	ldr	r3, [pc, #736]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4bb7      	ldr	r3, [pc, #732]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002d6e:	2180      	movs	r1, #128	; 0x80
 8002d70:	0049      	lsls	r1, r1, #1
 8002d72:	430a      	orrs	r2, r1
 8002d74:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d76:	f7fe fa4d 	bl	8001214 <HAL_GetTick>
 8002d7a:	0003      	movs	r3, r0
 8002d7c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d7e:	e00b      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d80:	f7fe fa48 	bl	8001214 <HAL_GetTick>
 8002d84:	0002      	movs	r2, r0
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d904      	bls.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002d8e:	2313      	movs	r3, #19
 8002d90:	18fb      	adds	r3, r7, r3
 8002d92:	2203      	movs	r2, #3
 8002d94:	701a      	strb	r2, [r3, #0]
        break;
 8002d96:	e005      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d98:	4bac      	ldr	r3, [pc, #688]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	2380      	movs	r3, #128	; 0x80
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	4013      	ands	r3, r2
 8002da2:	d0ed      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002da4:	2313      	movs	r3, #19
 8002da6:	18fb      	adds	r3, r7, r3
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d154      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dae:	4ba6      	ldr	r3, [pc, #664]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002db0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002db2:	23c0      	movs	r3, #192	; 0xc0
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4013      	ands	r3, r2
 8002db8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d019      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d014      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dca:	4b9f      	ldr	r3, [pc, #636]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dce:	4aa0      	ldr	r2, [pc, #640]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dd4:	4b9c      	ldr	r3, [pc, #624]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dd8:	4b9b      	ldr	r3, [pc, #620]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dda:	2180      	movs	r1, #128	; 0x80
 8002ddc:	0249      	lsls	r1, r1, #9
 8002dde:	430a      	orrs	r2, r1
 8002de0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002de2:	4b99      	ldr	r3, [pc, #612]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002de4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002de6:	4b98      	ldr	r3, [pc, #608]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002de8:	499a      	ldr	r1, [pc, #616]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002dea:	400a      	ands	r2, r1
 8002dec:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002dee:	4b96      	ldr	r3, [pc, #600]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	2201      	movs	r2, #1
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d016      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7fe fa0a 	bl	8001214 <HAL_GetTick>
 8002e00:	0003      	movs	r3, r0
 8002e02:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e04:	e00c      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e06:	f7fe fa05 	bl	8001214 <HAL_GetTick>
 8002e0a:	0002      	movs	r2, r0
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	4a91      	ldr	r2, [pc, #580]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d904      	bls.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002e16:	2313      	movs	r3, #19
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	701a      	strb	r2, [r3, #0]
            break;
 8002e1e:	e004      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e20:	4b89      	ldr	r3, [pc, #548]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e24:	2202      	movs	r2, #2
 8002e26:	4013      	ands	r3, r2
 8002e28:	d0ed      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002e2a:	2313      	movs	r3, #19
 8002e2c:	18fb      	adds	r3, r7, r3
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10a      	bne.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e34:	4b84      	ldr	r3, [pc, #528]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e38:	4a85      	ldr	r2, [pc, #532]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	0019      	movs	r1, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e42:	4b81      	ldr	r3, [pc, #516]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e44:	430a      	orrs	r2, r1
 8002e46:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e48:	e00c      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e4a:	2312      	movs	r3, #18
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	2213      	movs	r2, #19
 8002e50:	18ba      	adds	r2, r7, r2
 8002e52:	7812      	ldrb	r2, [r2, #0]
 8002e54:	701a      	strb	r2, [r3, #0]
 8002e56:	e005      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e58:	2312      	movs	r3, #18
 8002e5a:	18fb      	adds	r3, r7, r3
 8002e5c:	2213      	movs	r2, #19
 8002e5e:	18ba      	adds	r2, r7, r2
 8002e60:	7812      	ldrb	r2, [r2, #0]
 8002e62:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e64:	2311      	movs	r3, #17
 8002e66:	18fb      	adds	r3, r7, r3
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d105      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e6e:	4b76      	ldr	r3, [pc, #472]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e72:	4b75      	ldr	r3, [pc, #468]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e74:	4979      	ldr	r1, [pc, #484]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002e76:	400a      	ands	r2, r1
 8002e78:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	4013      	ands	r3, r2
 8002e82:	d009      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e84:	4b70      	ldr	r3, [pc, #448]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e88:	2203      	movs	r2, #3
 8002e8a:	4393      	bics	r3, r2
 8002e8c:	0019      	movs	r1, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	4b6d      	ldr	r3, [pc, #436]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e94:	430a      	orrs	r2, r1
 8002e96:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d009      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ea2:	4b69      	ldr	r3, [pc, #420]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea6:	220c      	movs	r2, #12
 8002ea8:	4393      	bics	r3, r2
 8002eaa:	0019      	movs	r1, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	4b65      	ldr	r3, [pc, #404]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2210      	movs	r2, #16
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d009      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ec0:	4b61      	ldr	r3, [pc, #388]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec4:	4a66      	ldr	r2, [pc, #408]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	0019      	movs	r1, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	4b5e      	ldr	r3, [pc, #376]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	2380      	movs	r3, #128	; 0x80
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4013      	ands	r3, r2
 8002ede:	d009      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ee0:	4b59      	ldr	r3, [pc, #356]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee4:	4a5f      	ldr	r2, [pc, #380]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	0019      	movs	r1, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699a      	ldr	r2, [r3, #24]
 8002eee:	4b56      	ldr	r3, [pc, #344]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	2380      	movs	r3, #128	; 0x80
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4013      	ands	r3, r2
 8002efe:	d009      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f00:	4b51      	ldr	r3, [pc, #324]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f04:	4a58      	ldr	r2, [pc, #352]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	0019      	movs	r1, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69da      	ldr	r2, [r3, #28]
 8002f0e:	4b4e      	ldr	r3, [pc, #312]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f10:	430a      	orrs	r2, r1
 8002f12:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	d009      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f1e:	4b4a      	ldr	r3, [pc, #296]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f22:	4a52      	ldr	r2, [pc, #328]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	0019      	movs	r1, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	4b46      	ldr	r3, [pc, #280]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	2380      	movs	r3, #128	; 0x80
 8002f38:	01db      	lsls	r3, r3, #7
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	d015      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f3e:	4b42      	ldr	r3, [pc, #264]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	0899      	lsrs	r1, r3, #2
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1a      	ldr	r2, [r3, #32]
 8002f4a:	4b3f      	ldr	r3, [pc, #252]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1a      	ldr	r2, [r3, #32]
 8002f54:	2380      	movs	r3, #128	; 0x80
 8002f56:	05db      	lsls	r3, r3, #23
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d106      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f5c:	4b3a      	ldr	r3, [pc, #232]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	4b39      	ldr	r3, [pc, #228]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f62:	2180      	movs	r1, #128	; 0x80
 8002f64:	0249      	lsls	r1, r1, #9
 8002f66:	430a      	orrs	r2, r1
 8002f68:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	031b      	lsls	r3, r3, #12
 8002f72:	4013      	ands	r3, r2
 8002f74:	d009      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f76:	4b34      	ldr	r3, [pc, #208]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7a:	2240      	movs	r2, #64	; 0x40
 8002f7c:	4393      	bics	r3, r2
 8002f7e:	0019      	movs	r1, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f84:	4b30      	ldr	r3, [pc, #192]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f86:	430a      	orrs	r2, r1
 8002f88:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	2380      	movs	r3, #128	; 0x80
 8002f90:	039b      	lsls	r3, r3, #14
 8002f92:	4013      	ands	r3, r2
 8002f94:	d016      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f96:	4b2c      	ldr	r3, [pc, #176]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9a:	4a35      	ldr	r2, [pc, #212]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	0019      	movs	r1, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fa4:	4b28      	ldr	r3, [pc, #160]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fae:	2380      	movs	r3, #128	; 0x80
 8002fb0:	03db      	lsls	r3, r3, #15
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d106      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002fb6:	4b24      	ldr	r3, [pc, #144]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	4b23      	ldr	r3, [pc, #140]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fbc:	2180      	movs	r1, #128	; 0x80
 8002fbe:	0449      	lsls	r1, r1, #17
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	03db      	lsls	r3, r3, #15
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d016      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd4:	4a27      	ldr	r2, [pc, #156]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	0019      	movs	r1, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fde:	4b1a      	ldr	r3, [pc, #104]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe8:	2380      	movs	r3, #128	; 0x80
 8002fea:	045b      	lsls	r3, r3, #17
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d106      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002ff0:	4b15      	ldr	r3, [pc, #84]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	4b14      	ldr	r3, [pc, #80]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ff6:	2180      	movs	r1, #128	; 0x80
 8002ff8:	0449      	lsls	r1, r1, #17
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	2380      	movs	r3, #128	; 0x80
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	4013      	ands	r3, r2
 8003008:	d016      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800300a:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800300c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300e:	4a1a      	ldr	r2, [pc, #104]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003010:	4013      	ands	r3, r2
 8003012:	0019      	movs	r1, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	695a      	ldr	r2, [r3, #20]
 8003018:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800301a:	430a      	orrs	r2, r1
 800301c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	695a      	ldr	r2, [r3, #20]
 8003022:	2380      	movs	r3, #128	; 0x80
 8003024:	01db      	lsls	r3, r3, #7
 8003026:	429a      	cmp	r2, r3
 8003028:	d106      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800302a:	4b07      	ldr	r3, [pc, #28]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	4b06      	ldr	r3, [pc, #24]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003030:	2180      	movs	r1, #128	; 0x80
 8003032:	0249      	lsls	r1, r1, #9
 8003034:	430a      	orrs	r2, r1
 8003036:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003038:	2312      	movs	r3, #18
 800303a:	18fb      	adds	r3, r7, r3
 800303c:	781b      	ldrb	r3, [r3, #0]
}
 800303e:	0018      	movs	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	b006      	add	sp, #24
 8003044:	bd80      	pop	{r7, pc}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	40021000 	.word	0x40021000
 800304c:	40007000 	.word	0x40007000
 8003050:	fffffcff 	.word	0xfffffcff
 8003054:	fffeffff 	.word	0xfffeffff
 8003058:	00001388 	.word	0x00001388
 800305c:	efffffff 	.word	0xefffffff
 8003060:	fffff3ff 	.word	0xfffff3ff
 8003064:	fff3ffff 	.word	0xfff3ffff
 8003068:	ffcfffff 	.word	0xffcfffff
 800306c:	ffffcfff 	.word	0xffffcfff
 8003070:	ffbfffff 	.word	0xffbfffff
 8003074:	feffffff 	.word	0xfeffffff
 8003078:	ffff3fff 	.word	0xffff3fff

0800307c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e0a8      	b.n	80031e0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	2b00      	cmp	r3, #0
 8003094:	d109      	bne.n	80030aa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	2382      	movs	r3, #130	; 0x82
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	429a      	cmp	r2, r3
 80030a0:	d009      	beq.n	80030b6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	61da      	str	r2, [r3, #28]
 80030a8:	e005      	b.n	80030b6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	225d      	movs	r2, #93	; 0x5d
 80030c0:	5c9b      	ldrb	r3, [r3, r2]
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d107      	bne.n	80030d8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	225c      	movs	r2, #92	; 0x5c
 80030cc:	2100      	movs	r1, #0
 80030ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	0018      	movs	r0, r3
 80030d4:	f7fd fe7e 	bl	8000dd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	225d      	movs	r2, #93	; 0x5d
 80030dc:	2102      	movs	r1, #2
 80030de:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2140      	movs	r1, #64	; 0x40
 80030ec:	438a      	bics	r2, r1
 80030ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	23e0      	movs	r3, #224	; 0xe0
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d902      	bls.n	8003102 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030fc:	2300      	movs	r3, #0
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	e002      	b.n	8003108 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003102:	2380      	movs	r3, #128	; 0x80
 8003104:	015b      	lsls	r3, r3, #5
 8003106:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	23f0      	movs	r3, #240	; 0xf0
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	429a      	cmp	r2, r3
 8003112:	d008      	beq.n	8003126 <HAL_SPI_Init+0xaa>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68da      	ldr	r2, [r3, #12]
 8003118:	23e0      	movs	r3, #224	; 0xe0
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	429a      	cmp	r2, r3
 800311e:	d002      	beq.n	8003126 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	2382      	movs	r3, #130	; 0x82
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	401a      	ands	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6899      	ldr	r1, [r3, #8]
 8003134:	2384      	movs	r3, #132	; 0x84
 8003136:	021b      	lsls	r3, r3, #8
 8003138:	400b      	ands	r3, r1
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	2102      	movs	r1, #2
 8003142:	400b      	ands	r3, r1
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	2101      	movs	r1, #1
 800314c:	400b      	ands	r3, r1
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6999      	ldr	r1, [r3, #24]
 8003154:	2380      	movs	r3, #128	; 0x80
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	400b      	ands	r3, r1
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	2138      	movs	r1, #56	; 0x38
 8003162:	400b      	ands	r3, r1
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	2180      	movs	r1, #128	; 0x80
 800316c:	400b      	ands	r3, r1
 800316e:	431a      	orrs	r2, r3
 8003170:	0011      	movs	r1, r2
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003176:	2380      	movs	r3, #128	; 0x80
 8003178:	019b      	lsls	r3, r3, #6
 800317a:	401a      	ands	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	0c1b      	lsrs	r3, r3, #16
 800318a:	2204      	movs	r2, #4
 800318c:	401a      	ands	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	2110      	movs	r1, #16
 8003194:	400b      	ands	r3, r1
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319c:	2108      	movs	r1, #8
 800319e:	400b      	ands	r3, r1
 80031a0:	431a      	orrs	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68d9      	ldr	r1, [r3, #12]
 80031a6:	23f0      	movs	r3, #240	; 0xf0
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	400b      	ands	r3, r1
 80031ac:	431a      	orrs	r2, r3
 80031ae:	0011      	movs	r1, r2
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	015b      	lsls	r3, r3, #5
 80031b6:	401a      	ands	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	69da      	ldr	r2, [r3, #28]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4907      	ldr	r1, [pc, #28]	; (80031e8 <HAL_SPI_Init+0x16c>)
 80031cc:	400a      	ands	r2, r1
 80031ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	225d      	movs	r2, #93	; 0x5d
 80031da:	2101      	movs	r1, #1
 80031dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	0018      	movs	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b004      	add	sp, #16
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	fffff7ff 	.word	0xfffff7ff

080031ec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	099b      	lsrs	r3, r3, #6
 8003208:	001a      	movs	r2, r3
 800320a:	2301      	movs	r3, #1
 800320c:	4013      	ands	r3, r2
 800320e:	d10f      	bne.n	8003230 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	2201      	movs	r2, #1
 8003214:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003216:	d00b      	beq.n	8003230 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	099b      	lsrs	r3, r3, #6
 800321c:	001a      	movs	r2, r3
 800321e:	2301      	movs	r3, #1
 8003220:	4013      	ands	r3, r2
 8003222:	d005      	beq.n	8003230 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	0010      	movs	r0, r2
 800322c:	4798      	blx	r3
    return;
 800322e:	e0d5      	b.n	80033dc <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	085b      	lsrs	r3, r3, #1
 8003234:	001a      	movs	r2, r3
 8003236:	2301      	movs	r3, #1
 8003238:	4013      	ands	r3, r2
 800323a:	d00b      	beq.n	8003254 <HAL_SPI_IRQHandler+0x68>
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	09db      	lsrs	r3, r3, #7
 8003240:	001a      	movs	r2, r3
 8003242:	2301      	movs	r3, #1
 8003244:	4013      	ands	r3, r2
 8003246:	d005      	beq.n	8003254 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	0010      	movs	r0, r2
 8003250:	4798      	blx	r3
    return;
 8003252:	e0c3      	b.n	80033dc <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	001a      	movs	r2, r3
 800325a:	2301      	movs	r3, #1
 800325c:	4013      	ands	r3, r2
 800325e:	d10c      	bne.n	800327a <HAL_SPI_IRQHandler+0x8e>
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	099b      	lsrs	r3, r3, #6
 8003264:	001a      	movs	r2, r3
 8003266:	2301      	movs	r3, #1
 8003268:	4013      	ands	r3, r2
 800326a:	d106      	bne.n	800327a <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	0a1b      	lsrs	r3, r3, #8
 8003270:	001a      	movs	r2, r3
 8003272:	2301      	movs	r3, #1
 8003274:	4013      	ands	r3, r2
 8003276:	d100      	bne.n	800327a <HAL_SPI_IRQHandler+0x8e>
 8003278:	e0b0      	b.n	80033dc <HAL_SPI_IRQHandler+0x1f0>
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	095b      	lsrs	r3, r3, #5
 800327e:	001a      	movs	r2, r3
 8003280:	2301      	movs	r3, #1
 8003282:	4013      	ands	r3, r2
 8003284:	d100      	bne.n	8003288 <HAL_SPI_IRQHandler+0x9c>
 8003286:	e0a9      	b.n	80033dc <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	099b      	lsrs	r3, r3, #6
 800328c:	001a      	movs	r2, r3
 800328e:	2301      	movs	r3, #1
 8003290:	4013      	ands	r3, r2
 8003292:	d023      	beq.n	80032dc <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	225d      	movs	r2, #93	; 0x5d
 8003298:	5c9b      	ldrb	r3, [r3, r2]
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b03      	cmp	r3, #3
 800329e:	d011      	beq.n	80032c4 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a4:	2204      	movs	r2, #4
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	e00b      	b.n	80032dc <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032c4:	2300      	movs	r3, #0
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	613b      	str	r3, [r7, #16]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	613b      	str	r3, [r7, #16]
 80032d8:	693b      	ldr	r3, [r7, #16]
        return;
 80032da:	e07f      	b.n	80033dc <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	001a      	movs	r2, r3
 80032e2:	2301      	movs	r3, #1
 80032e4:	4013      	ands	r3, r2
 80032e6:	d014      	beq.n	8003312 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ec:	2201      	movs	r2, #1
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80032f4:	2300      	movs	r3, #0
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2140      	movs	r1, #64	; 0x40
 800330c:	438a      	bics	r2, r1
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	0a1b      	lsrs	r3, r3, #8
 8003316:	001a      	movs	r2, r3
 8003318:	2301      	movs	r3, #1
 800331a:	4013      	ands	r3, r2
 800331c:	d00c      	beq.n	8003338 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003322:	2208      	movs	r2, #8
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800332a:	2300      	movs	r3, #0
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	60bb      	str	r3, [r7, #8]
 8003336:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800333c:	2b00      	cmp	r3, #0
 800333e:	d04c      	beq.n	80033da <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	21e0      	movs	r1, #224	; 0xe0
 800334c:	438a      	bics	r2, r1
 800334e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	225d      	movs	r2, #93	; 0x5d
 8003354:	2101      	movs	r1, #1
 8003356:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	2202      	movs	r2, #2
 800335c:	4013      	ands	r3, r2
 800335e:	d103      	bne.n	8003368 <HAL_SPI_IRQHandler+0x17c>
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	2201      	movs	r2, #1
 8003364:	4013      	ands	r3, r2
 8003366:	d032      	beq.n	80033ce <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2103      	movs	r1, #3
 8003374:	438a      	bics	r2, r1
 8003376:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337c:	2b00      	cmp	r3, #0
 800337e:	d010      	beq.n	80033a2 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003384:	4a17      	ldr	r2, [pc, #92]	; (80033e4 <HAL_SPI_IRQHandler+0x1f8>)
 8003386:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338c:	0018      	movs	r0, r3
 800338e:	f7fe fd63 	bl	8001e58 <HAL_DMA_Abort_IT>
 8003392:	1e03      	subs	r3, r0, #0
 8003394:	d005      	beq.n	80033a2 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800339a:	2240      	movs	r2, #64	; 0x40
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d016      	beq.n	80033d8 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ae:	4a0d      	ldr	r2, [pc, #52]	; (80033e4 <HAL_SPI_IRQHandler+0x1f8>)
 80033b0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b6:	0018      	movs	r0, r3
 80033b8:	f7fe fd4e 	bl	8001e58 <HAL_DMA_Abort_IT>
 80033bc:	1e03      	subs	r3, r0, #0
 80033be:	d00b      	beq.n	80033d8 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c4:	2240      	movs	r2, #64	; 0x40
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80033cc:	e004      	b.n	80033d8 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	0018      	movs	r0, r3
 80033d2:	f000 f809 	bl	80033e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80033d6:	e000      	b.n	80033da <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 80033d8:	46c0      	nop			; (mov r8, r8)
    return;
 80033da:	46c0      	nop			; (mov r8, r8)
  }
}
 80033dc:	46bd      	mov	sp, r7
 80033de:	b008      	add	sp, #32
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	080033f9 	.word	0x080033f9

080033e8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80033f0:	46c0      	nop			; (mov r8, r8)
 80033f2:	46bd      	mov	sp, r7
 80033f4:	b002      	add	sp, #8
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2246      	movs	r2, #70	; 0x46
 800340a:	2100      	movs	r1, #0
 800340c:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	0018      	movs	r0, r3
 8003418:	f7ff ffe6 	bl	80033e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800341c:	46c0      	nop			; (mov r8, r8)
 800341e:	46bd      	mov	sp, r7
 8003420:	b004      	add	sp, #16
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e04a      	b.n	80034cc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	223d      	movs	r2, #61	; 0x3d
 800343a:	5c9b      	ldrb	r3, [r3, r2]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d107      	bne.n	8003452 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	223c      	movs	r2, #60	; 0x3c
 8003446:	2100      	movs	r1, #0
 8003448:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	0018      	movs	r0, r3
 800344e:	f7fd fd13 	bl	8000e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	223d      	movs	r2, #61	; 0x3d
 8003456:	2102      	movs	r1, #2
 8003458:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	3304      	adds	r3, #4
 8003462:	0019      	movs	r1, r3
 8003464:	0010      	movs	r0, r2
 8003466:	f000 faaf 	bl	80039c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2248      	movs	r2, #72	; 0x48
 800346e:	2101      	movs	r1, #1
 8003470:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	223e      	movs	r2, #62	; 0x3e
 8003476:	2101      	movs	r1, #1
 8003478:	5499      	strb	r1, [r3, r2]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	223f      	movs	r2, #63	; 0x3f
 800347e:	2101      	movs	r1, #1
 8003480:	5499      	strb	r1, [r3, r2]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2240      	movs	r2, #64	; 0x40
 8003486:	2101      	movs	r1, #1
 8003488:	5499      	strb	r1, [r3, r2]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2241      	movs	r2, #65	; 0x41
 800348e:	2101      	movs	r1, #1
 8003490:	5499      	strb	r1, [r3, r2]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2242      	movs	r2, #66	; 0x42
 8003496:	2101      	movs	r1, #1
 8003498:	5499      	strb	r1, [r3, r2]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2243      	movs	r2, #67	; 0x43
 800349e:	2101      	movs	r1, #1
 80034a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2244      	movs	r2, #68	; 0x44
 80034a6:	2101      	movs	r1, #1
 80034a8:	5499      	strb	r1, [r3, r2]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2245      	movs	r2, #69	; 0x45
 80034ae:	2101      	movs	r1, #1
 80034b0:	5499      	strb	r1, [r3, r2]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2246      	movs	r2, #70	; 0x46
 80034b6:	2101      	movs	r1, #1
 80034b8:	5499      	strb	r1, [r3, r2]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2247      	movs	r2, #71	; 0x47
 80034be:	2101      	movs	r1, #1
 80034c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	223d      	movs	r2, #61	; 0x3d
 80034c6:	2101      	movs	r1, #1
 80034c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	0018      	movs	r0, r3
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b002      	add	sp, #8
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	223d      	movs	r2, #61	; 0x3d
 80034e0:	5c9b      	ldrb	r3, [r3, r2]
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d001      	beq.n	80034ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e042      	b.n	8003572 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	223d      	movs	r2, #61	; 0x3d
 80034f0:	2102      	movs	r1, #2
 80034f2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2101      	movs	r1, #1
 8003500:	430a      	orrs	r2, r1
 8003502:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a1c      	ldr	r2, [pc, #112]	; (800357c <HAL_TIM_Base_Start_IT+0xa8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d00f      	beq.n	800352e <HAL_TIM_Base_Start_IT+0x5a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	2380      	movs	r3, #128	; 0x80
 8003514:	05db      	lsls	r3, r3, #23
 8003516:	429a      	cmp	r2, r3
 8003518:	d009      	beq.n	800352e <HAL_TIM_Base_Start_IT+0x5a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a18      	ldr	r2, [pc, #96]	; (8003580 <HAL_TIM_Base_Start_IT+0xac>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d004      	beq.n	800352e <HAL_TIM_Base_Start_IT+0x5a>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a16      	ldr	r2, [pc, #88]	; (8003584 <HAL_TIM_Base_Start_IT+0xb0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d116      	bne.n	800355c <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	4a14      	ldr	r2, [pc, #80]	; (8003588 <HAL_TIM_Base_Start_IT+0xb4>)
 8003536:	4013      	ands	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b06      	cmp	r3, #6
 800353e:	d016      	beq.n	800356e <HAL_TIM_Base_Start_IT+0x9a>
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	2380      	movs	r3, #128	; 0x80
 8003544:	025b      	lsls	r3, r3, #9
 8003546:	429a      	cmp	r2, r3
 8003548:	d011      	beq.n	800356e <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2101      	movs	r1, #1
 8003556:	430a      	orrs	r2, r1
 8003558:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800355a:	e008      	b.n	800356e <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2101      	movs	r1, #1
 8003568:	430a      	orrs	r2, r1
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	e000      	b.n	8003570 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	0018      	movs	r0, r3
 8003574:	46bd      	mov	sp, r7
 8003576:	b004      	add	sp, #16
 8003578:	bd80      	pop	{r7, pc}
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	40012c00 	.word	0x40012c00
 8003580:	40000400 	.word	0x40000400
 8003584:	40014000 	.word	0x40014000
 8003588:	00010007 	.word	0x00010007

0800358c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	2202      	movs	r2, #2
 800359c:	4013      	ands	r3, r2
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d124      	bne.n	80035ec <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	2202      	movs	r2, #2
 80035aa:	4013      	ands	r3, r2
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d11d      	bne.n	80035ec <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2203      	movs	r2, #3
 80035b6:	4252      	negs	r2, r2
 80035b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	2203      	movs	r2, #3
 80035c8:	4013      	ands	r3, r2
 80035ca:	d004      	beq.n	80035d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	0018      	movs	r0, r3
 80035d0:	f000 f9e2 	bl	8003998 <HAL_TIM_IC_CaptureCallback>
 80035d4:	e007      	b.n	80035e6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	0018      	movs	r0, r3
 80035da:	f000 f9d5 	bl	8003988 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	0018      	movs	r0, r3
 80035e2:	f000 f9e1 	bl	80039a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	2204      	movs	r2, #4
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d125      	bne.n	8003646 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	2204      	movs	r2, #4
 8003602:	4013      	ands	r3, r2
 8003604:	2b04      	cmp	r3, #4
 8003606:	d11e      	bne.n	8003646 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2205      	movs	r2, #5
 800360e:	4252      	negs	r2, r2
 8003610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2202      	movs	r2, #2
 8003616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699a      	ldr	r2, [r3, #24]
 800361e:	23c0      	movs	r3, #192	; 0xc0
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4013      	ands	r3, r2
 8003624:	d004      	beq.n	8003630 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	0018      	movs	r0, r3
 800362a:	f000 f9b5 	bl	8003998 <HAL_TIM_IC_CaptureCallback>
 800362e:	e007      	b.n	8003640 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	0018      	movs	r0, r3
 8003634:	f000 f9a8 	bl	8003988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	0018      	movs	r0, r3
 800363c:	f000 f9b4 	bl	80039a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	2208      	movs	r2, #8
 800364e:	4013      	ands	r3, r2
 8003650:	2b08      	cmp	r3, #8
 8003652:	d124      	bne.n	800369e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	2208      	movs	r2, #8
 800365c:	4013      	ands	r3, r2
 800365e:	2b08      	cmp	r3, #8
 8003660:	d11d      	bne.n	800369e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2209      	movs	r2, #9
 8003668:	4252      	negs	r2, r2
 800366a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2204      	movs	r2, #4
 8003670:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	2203      	movs	r2, #3
 800367a:	4013      	ands	r3, r2
 800367c:	d004      	beq.n	8003688 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	0018      	movs	r0, r3
 8003682:	f000 f989 	bl	8003998 <HAL_TIM_IC_CaptureCallback>
 8003686:	e007      	b.n	8003698 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	0018      	movs	r0, r3
 800368c:	f000 f97c 	bl	8003988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	0018      	movs	r0, r3
 8003694:	f000 f988 	bl	80039a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	2210      	movs	r2, #16
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b10      	cmp	r3, #16
 80036aa:	d125      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	2210      	movs	r2, #16
 80036b4:	4013      	ands	r3, r2
 80036b6:	2b10      	cmp	r3, #16
 80036b8:	d11e      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2211      	movs	r2, #17
 80036c0:	4252      	negs	r2, r2
 80036c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2208      	movs	r2, #8
 80036c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69da      	ldr	r2, [r3, #28]
 80036d0:	23c0      	movs	r3, #192	; 0xc0
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4013      	ands	r3, r2
 80036d6:	d004      	beq.n	80036e2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	0018      	movs	r0, r3
 80036dc:	f000 f95c 	bl	8003998 <HAL_TIM_IC_CaptureCallback>
 80036e0:	e007      	b.n	80036f2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	0018      	movs	r0, r3
 80036e6:	f000 f94f 	bl	8003988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	0018      	movs	r0, r3
 80036ee:	f000 f95b 	bl	80039a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	2201      	movs	r2, #1
 8003700:	4013      	ands	r3, r2
 8003702:	2b01      	cmp	r3, #1
 8003704:	d10f      	bne.n	8003726 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	2201      	movs	r2, #1
 800370e:	4013      	ands	r3, r2
 8003710:	2b01      	cmp	r3, #1
 8003712:	d108      	bne.n	8003726 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2202      	movs	r2, #2
 800371a:	4252      	negs	r2, r2
 800371c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	0018      	movs	r0, r3
 8003722:	f7fd fabd 	bl	8000ca0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	2280      	movs	r2, #128	; 0x80
 800372e:	4013      	ands	r3, r2
 8003730:	2b80      	cmp	r3, #128	; 0x80
 8003732:	d10f      	bne.n	8003754 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	2280      	movs	r2, #128	; 0x80
 800373c:	4013      	ands	r3, r2
 800373e:	2b80      	cmp	r3, #128	; 0x80
 8003740:	d108      	bne.n	8003754 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2281      	movs	r2, #129	; 0x81
 8003748:	4252      	negs	r2, r2
 800374a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	0018      	movs	r0, r3
 8003750:	f000 facc 	bl	8003cec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	2380      	movs	r3, #128	; 0x80
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	401a      	ands	r2, r3
 8003760:	2380      	movs	r3, #128	; 0x80
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	429a      	cmp	r2, r3
 8003766:	d10e      	bne.n	8003786 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	2280      	movs	r2, #128	; 0x80
 8003770:	4013      	ands	r3, r2
 8003772:	2b80      	cmp	r3, #128	; 0x80
 8003774:	d107      	bne.n	8003786 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a1c      	ldr	r2, [pc, #112]	; (80037ec <HAL_TIM_IRQHandler+0x260>)
 800377c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	0018      	movs	r0, r3
 8003782:	f000 fabb 	bl	8003cfc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	2240      	movs	r2, #64	; 0x40
 800378e:	4013      	ands	r3, r2
 8003790:	2b40      	cmp	r3, #64	; 0x40
 8003792:	d10f      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	2240      	movs	r2, #64	; 0x40
 800379c:	4013      	ands	r3, r2
 800379e:	2b40      	cmp	r3, #64	; 0x40
 80037a0:	d108      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2241      	movs	r2, #65	; 0x41
 80037a8:	4252      	negs	r2, r2
 80037aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	0018      	movs	r0, r3
 80037b0:	f000 f902 	bl	80039b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2220      	movs	r2, #32
 80037bc:	4013      	ands	r3, r2
 80037be:	2b20      	cmp	r3, #32
 80037c0:	d10f      	bne.n	80037e2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	2220      	movs	r2, #32
 80037ca:	4013      	ands	r3, r2
 80037cc:	2b20      	cmp	r3, #32
 80037ce:	d108      	bne.n	80037e2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2221      	movs	r2, #33	; 0x21
 80037d6:	4252      	negs	r2, r2
 80037d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	0018      	movs	r0, r3
 80037de:	f000 fa7d 	bl	8003cdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b002      	add	sp, #8
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	fffffeff 	.word	0xfffffeff

080037f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	223c      	movs	r2, #60	; 0x3c
 80037fe:	5c9b      	ldrb	r3, [r3, r2]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_TIM_ConfigClockSource+0x18>
 8003804:	2302      	movs	r3, #2
 8003806:	e0b7      	b.n	8003978 <HAL_TIM_ConfigClockSource+0x188>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	223c      	movs	r2, #60	; 0x3c
 800380c:	2101      	movs	r1, #1
 800380e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	223d      	movs	r2, #61	; 0x3d
 8003814:	2102      	movs	r1, #2
 8003816:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4a57      	ldr	r2, [pc, #348]	; (8003980 <HAL_TIM_ConfigClockSource+0x190>)
 8003824:	4013      	ands	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4a56      	ldr	r2, [pc, #344]	; (8003984 <HAL_TIM_ConfigClockSource+0x194>)
 800382c:	4013      	ands	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2280      	movs	r2, #128	; 0x80
 800383e:	0192      	lsls	r2, r2, #6
 8003840:	4293      	cmp	r3, r2
 8003842:	d040      	beq.n	80038c6 <HAL_TIM_ConfigClockSource+0xd6>
 8003844:	2280      	movs	r2, #128	; 0x80
 8003846:	0192      	lsls	r2, r2, #6
 8003848:	4293      	cmp	r3, r2
 800384a:	d900      	bls.n	800384e <HAL_TIM_ConfigClockSource+0x5e>
 800384c:	e088      	b.n	8003960 <HAL_TIM_ConfigClockSource+0x170>
 800384e:	2280      	movs	r2, #128	; 0x80
 8003850:	0152      	lsls	r2, r2, #5
 8003852:	4293      	cmp	r3, r2
 8003854:	d100      	bne.n	8003858 <HAL_TIM_ConfigClockSource+0x68>
 8003856:	e085      	b.n	8003964 <HAL_TIM_ConfigClockSource+0x174>
 8003858:	2280      	movs	r2, #128	; 0x80
 800385a:	0152      	lsls	r2, r2, #5
 800385c:	4293      	cmp	r3, r2
 800385e:	d900      	bls.n	8003862 <HAL_TIM_ConfigClockSource+0x72>
 8003860:	e07e      	b.n	8003960 <HAL_TIM_ConfigClockSource+0x170>
 8003862:	2b70      	cmp	r3, #112	; 0x70
 8003864:	d018      	beq.n	8003898 <HAL_TIM_ConfigClockSource+0xa8>
 8003866:	d900      	bls.n	800386a <HAL_TIM_ConfigClockSource+0x7a>
 8003868:	e07a      	b.n	8003960 <HAL_TIM_ConfigClockSource+0x170>
 800386a:	2b60      	cmp	r3, #96	; 0x60
 800386c:	d04f      	beq.n	800390e <HAL_TIM_ConfigClockSource+0x11e>
 800386e:	d900      	bls.n	8003872 <HAL_TIM_ConfigClockSource+0x82>
 8003870:	e076      	b.n	8003960 <HAL_TIM_ConfigClockSource+0x170>
 8003872:	2b50      	cmp	r3, #80	; 0x50
 8003874:	d03b      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0xfe>
 8003876:	d900      	bls.n	800387a <HAL_TIM_ConfigClockSource+0x8a>
 8003878:	e072      	b.n	8003960 <HAL_TIM_ConfigClockSource+0x170>
 800387a:	2b40      	cmp	r3, #64	; 0x40
 800387c:	d057      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x13e>
 800387e:	d900      	bls.n	8003882 <HAL_TIM_ConfigClockSource+0x92>
 8003880:	e06e      	b.n	8003960 <HAL_TIM_ConfigClockSource+0x170>
 8003882:	2b30      	cmp	r3, #48	; 0x30
 8003884:	d063      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x15e>
 8003886:	d86b      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x170>
 8003888:	2b20      	cmp	r3, #32
 800388a:	d060      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x15e>
 800388c:	d868      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x170>
 800388e:	2b00      	cmp	r3, #0
 8003890:	d05d      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x15e>
 8003892:	2b10      	cmp	r3, #16
 8003894:	d05b      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003896:	e063      	b.n	8003960 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	6899      	ldr	r1, [r3, #8]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f000 f98a 	bl	8003bc0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2277      	movs	r2, #119	; 0x77
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	609a      	str	r2, [r3, #8]
      break;
 80038c4:	e04f      	b.n	8003966 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6818      	ldr	r0, [r3, #0]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	6899      	ldr	r1, [r3, #8]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f000 f973 	bl	8003bc0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2180      	movs	r1, #128	; 0x80
 80038e6:	01c9      	lsls	r1, r1, #7
 80038e8:	430a      	orrs	r2, r1
 80038ea:	609a      	str	r2, [r3, #8]
      break;
 80038ec:	e03b      	b.n	8003966 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6859      	ldr	r1, [r3, #4]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	001a      	movs	r2, r3
 80038fc:	f000 f8e4 	bl	8003ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2150      	movs	r1, #80	; 0x50
 8003906:	0018      	movs	r0, r3
 8003908:	f000 f93e 	bl	8003b88 <TIM_ITRx_SetConfig>
      break;
 800390c:	e02b      	b.n	8003966 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6818      	ldr	r0, [r3, #0]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	6859      	ldr	r1, [r3, #4]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	001a      	movs	r2, r3
 800391c:	f000 f902 	bl	8003b24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2160      	movs	r1, #96	; 0x60
 8003926:	0018      	movs	r0, r3
 8003928:	f000 f92e 	bl	8003b88 <TIM_ITRx_SetConfig>
      break;
 800392c:	e01b      	b.n	8003966 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	6859      	ldr	r1, [r3, #4]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	001a      	movs	r2, r3
 800393c:	f000 f8c4 	bl	8003ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2140      	movs	r1, #64	; 0x40
 8003946:	0018      	movs	r0, r3
 8003948:	f000 f91e 	bl	8003b88 <TIM_ITRx_SetConfig>
      break;
 800394c:	e00b      	b.n	8003966 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	0019      	movs	r1, r3
 8003958:	0010      	movs	r0, r2
 800395a:	f000 f915 	bl	8003b88 <TIM_ITRx_SetConfig>
        break;
 800395e:	e002      	b.n	8003966 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003960:	46c0      	nop			; (mov r8, r8)
 8003962:	e000      	b.n	8003966 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003964:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	223d      	movs	r2, #61	; 0x3d
 800396a:	2101      	movs	r1, #1
 800396c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	223c      	movs	r2, #60	; 0x3c
 8003972:	2100      	movs	r1, #0
 8003974:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	0018      	movs	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	b004      	add	sp, #16
 800397e:	bd80      	pop	{r7, pc}
 8003980:	ffceff88 	.word	0xffceff88
 8003984:	ffff00ff 	.word	0xffff00ff

08003988 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003990:	46c0      	nop			; (mov r8, r8)
 8003992:	46bd      	mov	sp, r7
 8003994:	b002      	add	sp, #8
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039a0:	46c0      	nop			; (mov r8, r8)
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b002      	add	sp, #8
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039b0:	46c0      	nop			; (mov r8, r8)
 80039b2:	46bd      	mov	sp, r7
 80039b4:	b002      	add	sp, #8
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039c0:	46c0      	nop			; (mov r8, r8)
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b002      	add	sp, #8
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a34      	ldr	r2, [pc, #208]	; (8003aac <TIM_Base_SetConfig+0xe4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d008      	beq.n	80039f2 <TIM_Base_SetConfig+0x2a>
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	2380      	movs	r3, #128	; 0x80
 80039e4:	05db      	lsls	r3, r3, #23
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d003      	beq.n	80039f2 <TIM_Base_SetConfig+0x2a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a30      	ldr	r2, [pc, #192]	; (8003ab0 <TIM_Base_SetConfig+0xe8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d108      	bne.n	8003a04 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2270      	movs	r2, #112	; 0x70
 80039f6:	4393      	bics	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a29      	ldr	r2, [pc, #164]	; (8003aac <TIM_Base_SetConfig+0xe4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d018      	beq.n	8003a3e <TIM_Base_SetConfig+0x76>
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	2380      	movs	r3, #128	; 0x80
 8003a10:	05db      	lsls	r3, r3, #23
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d013      	beq.n	8003a3e <TIM_Base_SetConfig+0x76>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a25      	ldr	r2, [pc, #148]	; (8003ab0 <TIM_Base_SetConfig+0xe8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00f      	beq.n	8003a3e <TIM_Base_SetConfig+0x76>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a24      	ldr	r2, [pc, #144]	; (8003ab4 <TIM_Base_SetConfig+0xec>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00b      	beq.n	8003a3e <TIM_Base_SetConfig+0x76>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a23      	ldr	r2, [pc, #140]	; (8003ab8 <TIM_Base_SetConfig+0xf0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d007      	beq.n	8003a3e <TIM_Base_SetConfig+0x76>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a22      	ldr	r2, [pc, #136]	; (8003abc <TIM_Base_SetConfig+0xf4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d003      	beq.n	8003a3e <TIM_Base_SetConfig+0x76>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a21      	ldr	r2, [pc, #132]	; (8003ac0 <TIM_Base_SetConfig+0xf8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d108      	bne.n	8003a50 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4a20      	ldr	r2, [pc, #128]	; (8003ac4 <TIM_Base_SetConfig+0xfc>)
 8003a42:	4013      	ands	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2280      	movs	r2, #128	; 0x80
 8003a54:	4393      	bics	r3, r2
 8003a56:	001a      	movs	r2, r3
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a0c      	ldr	r2, [pc, #48]	; (8003aac <TIM_Base_SetConfig+0xe4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00b      	beq.n	8003a96 <TIM_Base_SetConfig+0xce>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a0d      	ldr	r2, [pc, #52]	; (8003ab8 <TIM_Base_SetConfig+0xf0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d007      	beq.n	8003a96 <TIM_Base_SetConfig+0xce>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a0c      	ldr	r2, [pc, #48]	; (8003abc <TIM_Base_SetConfig+0xf4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d003      	beq.n	8003a96 <TIM_Base_SetConfig+0xce>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a0b      	ldr	r2, [pc, #44]	; (8003ac0 <TIM_Base_SetConfig+0xf8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d103      	bne.n	8003a9e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	691a      	ldr	r2, [r3, #16]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	615a      	str	r2, [r3, #20]
}
 8003aa4:	46c0      	nop			; (mov r8, r8)
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	b004      	add	sp, #16
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40012c00 	.word	0x40012c00
 8003ab0:	40000400 	.word	0x40000400
 8003ab4:	40002000 	.word	0x40002000
 8003ab8:	40014000 	.word	0x40014000
 8003abc:	40014400 	.word	0x40014400
 8003ac0:	40014800 	.word	0x40014800
 8003ac4:	fffffcff 	.word	0xfffffcff

08003ac8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	4393      	bics	r3, r2
 8003ae2:	001a      	movs	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	22f0      	movs	r2, #240	; 0xf0
 8003af2:	4393      	bics	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	220a      	movs	r2, #10
 8003b04:	4393      	bics	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	621a      	str	r2, [r3, #32]
}
 8003b1c:	46c0      	nop			; (mov r8, r8)
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	b006      	add	sp, #24
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	2210      	movs	r2, #16
 8003b36:	4393      	bics	r3, r2
 8003b38:	001a      	movs	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	4a0d      	ldr	r2, [pc, #52]	; (8003b84 <TIM_TI2_ConfigInputStage+0x60>)
 8003b4e:	4013      	ands	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	031b      	lsls	r3, r3, #12
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	22a0      	movs	r2, #160	; 0xa0
 8003b60:	4393      	bics	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	621a      	str	r2, [r3, #32]
}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	b006      	add	sp, #24
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	ffff0fff 	.word	0xffff0fff

08003b88 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4a08      	ldr	r2, [pc, #32]	; (8003bbc <TIM_ITRx_SetConfig+0x34>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	2207      	movs	r2, #7
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	609a      	str	r2, [r3, #8]
}
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	b004      	add	sp, #16
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	ffcfff8f 	.word	0xffcfff8f

08003bc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
 8003bcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	4a09      	ldr	r2, [pc, #36]	; (8003bfc <TIM_ETR_SetConfig+0x3c>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	021a      	lsls	r2, r3, #8
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	609a      	str	r2, [r3, #8]
}
 8003bf4:	46c0      	nop			; (mov r8, r8)
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	b006      	add	sp, #24
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	ffff00ff 	.word	0xffff00ff

08003c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	223c      	movs	r2, #60	; 0x3c
 8003c0e:	5c9b      	ldrb	r3, [r3, r2]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e055      	b.n	8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	223c      	movs	r2, #60	; 0x3c
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	223d      	movs	r2, #61	; 0x3d
 8003c24:	2102      	movs	r1, #2
 8003c26:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a23      	ldr	r2, [pc, #140]	; (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d108      	bne.n	8003c54 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4a22      	ldr	r2, [pc, #136]	; (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2270      	movs	r2, #112	; 0x70
 8003c58:	4393      	bics	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a16      	ldr	r2, [pc, #88]	; (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d00f      	beq.n	8003c98 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	2380      	movs	r3, #128	; 0x80
 8003c7e:	05db      	lsls	r3, r3, #23
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d009      	beq.n	8003c98 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a12      	ldr	r2, [pc, #72]	; (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d004      	beq.n	8003c98 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a11      	ldr	r2, [pc, #68]	; (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d10c      	bne.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2280      	movs	r2, #128	; 0x80
 8003c9c:	4393      	bics	r3, r2
 8003c9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	223d      	movs	r2, #61	; 0x3d
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	223c      	movs	r2, #60	; 0x3c
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	b004      	add	sp, #16
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40012c00 	.word	0x40012c00
 8003cd0:	ff0fffff 	.word	0xff0fffff
 8003cd4:	40000400 	.word	0x40000400
 8003cd8:	40014000 	.word	0x40014000

08003cdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ce4:	46c0      	nop			; (mov r8, r8)
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	b002      	add	sp, #8
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cf4:	46c0      	nop			; (mov r8, r8)
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	b002      	add	sp, #8
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d04:	46c0      	nop			; (mov r8, r8)
 8003d06:	46bd      	mov	sp, r7
 8003d08:	b002      	add	sp, #8
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e046      	b.n	8003dac <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2284      	movs	r2, #132	; 0x84
 8003d22:	589b      	ldr	r3, [r3, r2]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d107      	bne.n	8003d38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2280      	movs	r2, #128	; 0x80
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	0018      	movs	r0, r3
 8003d34:	f7fd f8c4 	bl	8000ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2284      	movs	r2, #132	; 0x84
 8003d3c:	2124      	movs	r1, #36	; 0x24
 8003d3e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	438a      	bics	r2, r1
 8003d4e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	0018      	movs	r0, r3
 8003d54:	f000 fbd8 	bl	8004508 <UART_SetConfig>
 8003d58:	0003      	movs	r3, r0
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d101      	bne.n	8003d62 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e024      	b.n	8003dac <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f000 fea9 	bl	8004ac4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	490d      	ldr	r1, [pc, #52]	; (8003db4 <HAL_UART_Init+0xa8>)
 8003d7e:	400a      	ands	r2, r1
 8003d80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	212a      	movs	r1, #42	; 0x2a
 8003d8e:	438a      	bics	r2, r1
 8003d90:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	0018      	movs	r0, r3
 8003da6:	f000 ff41 	bl	8004c2c <UART_CheckIdleState>
 8003daa:	0003      	movs	r3, r0
}
 8003dac:	0018      	movs	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b002      	add	sp, #8
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	ffffb7ff 	.word	0xffffb7ff

08003db8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	1dbb      	adds	r3, r7, #6
 8003dc4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2288      	movs	r2, #136	; 0x88
 8003dca:	589b      	ldr	r3, [r3, r2]
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d155      	bne.n	8003e7c <HAL_UART_Receive_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_UART_Receive_IT+0x26>
 8003dd6:	1dbb      	adds	r3, r7, #6
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e04d      	b.n	8003e7e <HAL_UART_Receive_IT+0xc6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	2380      	movs	r3, #128	; 0x80
 8003de8:	015b      	lsls	r3, r3, #5
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d109      	bne.n	8003e02 <HAL_UART_Receive_IT+0x4a>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d105      	bne.n	8003e02 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d001      	beq.n	8003e02 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e03d      	b.n	8003e7e <HAL_UART_Receive_IT+0xc6>
      }
    }

    __HAL_LOCK(huart);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2280      	movs	r2, #128	; 0x80
 8003e06:	5c9b      	ldrb	r3, [r3, r2]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <HAL_UART_Receive_IT+0x58>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e036      	b.n	8003e7e <HAL_UART_Receive_IT+0xc6>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2280      	movs	r2, #128	; 0x80
 8003e14:	2101      	movs	r1, #1
 8003e16:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a19      	ldr	r2, [pc, #100]	; (8003e88 <HAL_UART_Receive_IT+0xd0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d020      	beq.n	8003e6a <HAL_UART_Receive_IT+0xb2>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	2380      	movs	r3, #128	; 0x80
 8003e30:	041b      	lsls	r3, r3, #16
 8003e32:	4013      	ands	r3, r2
 8003e34:	d019      	beq.n	8003e6a <HAL_UART_Receive_IT+0xb2>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e36:	f3ef 8310 	mrs	r3, PRIMASK
 8003e3a:	613b      	str	r3, [r7, #16]
  return(result);
 8003e3c:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e3e:	61fb      	str	r3, [r7, #28]
 8003e40:	2301      	movs	r3, #1
 8003e42:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f383 8810 	msr	PRIMASK, r3
}
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2180      	movs	r1, #128	; 0x80
 8003e58:	04c9      	lsls	r1, r1, #19
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	f383 8810 	msr	PRIMASK, r3
}
 8003e68:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e6a:	1dbb      	adds	r3, r7, #6
 8003e6c:	881a      	ldrh	r2, [r3, #0]
 8003e6e:	68b9      	ldr	r1, [r7, #8]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	0018      	movs	r0, r3
 8003e74:	f000 ffec 	bl	8004e50 <UART_Start_Receive_IT>
 8003e78:	0003      	movs	r3, r0
 8003e7a:	e000      	b.n	8003e7e <HAL_UART_Receive_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003e7c:	2302      	movs	r3, #2
  }
}
 8003e7e:	0018      	movs	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b008      	add	sp, #32
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	40008000 	.word	0x40008000

08003e8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e8c:	b5b0      	push	{r4, r5, r7, lr}
 8003e8e:	b0aa      	sub	sp, #168	; 0xa8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	22a4      	movs	r2, #164	; 0xa4
 8003e9c:	18b9      	adds	r1, r7, r2
 8003e9e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	20a0      	movs	r0, #160	; 0xa0
 8003ea8:	1839      	adds	r1, r7, r0
 8003eaa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	249c      	movs	r4, #156	; 0x9c
 8003eb4:	1939      	adds	r1, r7, r4
 8003eb6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003eb8:	0011      	movs	r1, r2
 8003eba:	18bb      	adds	r3, r7, r2
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4aa0      	ldr	r2, [pc, #640]	; (8004140 <HAL_UART_IRQHandler+0x2b4>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	2298      	movs	r2, #152	; 0x98
 8003ec4:	18bd      	adds	r5, r7, r2
 8003ec6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003ec8:	18bb      	adds	r3, r7, r2
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d11a      	bne.n	8003f06 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003ed0:	187b      	adds	r3, r7, r1
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	d015      	beq.n	8003f06 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003eda:	183b      	adds	r3, r7, r0
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	d105      	bne.n	8003ef0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003ee4:	193b      	adds	r3, r7, r4
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	2380      	movs	r3, #128	; 0x80
 8003eea:	055b      	lsls	r3, r3, #21
 8003eec:	4013      	ands	r3, r2
 8003eee:	d00a      	beq.n	8003f06 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d100      	bne.n	8003efa <HAL_UART_IRQHandler+0x6e>
 8003ef8:	e2cf      	b.n	800449a <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	0010      	movs	r0, r2
 8003f02:	4798      	blx	r3
      }
      return;
 8003f04:	e2c9      	b.n	800449a <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003f06:	2398      	movs	r3, #152	; 0x98
 8003f08:	18fb      	adds	r3, r7, r3
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d100      	bne.n	8003f12 <HAL_UART_IRQHandler+0x86>
 8003f10:	e11e      	b.n	8004150 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003f12:	239c      	movs	r3, #156	; 0x9c
 8003f14:	18fb      	adds	r3, r7, r3
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a8a      	ldr	r2, [pc, #552]	; (8004144 <HAL_UART_IRQHandler+0x2b8>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	d106      	bne.n	8003f2c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003f1e:	23a0      	movs	r3, #160	; 0xa0
 8003f20:	18fb      	adds	r3, r7, r3
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a88      	ldr	r2, [pc, #544]	; (8004148 <HAL_UART_IRQHandler+0x2bc>)
 8003f26:	4013      	ands	r3, r2
 8003f28:	d100      	bne.n	8003f2c <HAL_UART_IRQHandler+0xa0>
 8003f2a:	e111      	b.n	8004150 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f2c:	23a4      	movs	r3, #164	; 0xa4
 8003f2e:	18fb      	adds	r3, r7, r3
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2201      	movs	r2, #1
 8003f34:	4013      	ands	r3, r2
 8003f36:	d012      	beq.n	8003f5e <HAL_UART_IRQHandler+0xd2>
 8003f38:	23a0      	movs	r3, #160	; 0xa0
 8003f3a:	18fb      	adds	r3, r7, r3
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	2380      	movs	r3, #128	; 0x80
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	4013      	ands	r3, r2
 8003f44:	d00b      	beq.n	8003f5e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	228c      	movs	r2, #140	; 0x8c
 8003f52:	589b      	ldr	r3, [r3, r2]
 8003f54:	2201      	movs	r2, #1
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	218c      	movs	r1, #140	; 0x8c
 8003f5c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f5e:	23a4      	movs	r3, #164	; 0xa4
 8003f60:	18fb      	adds	r3, r7, r3
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2202      	movs	r2, #2
 8003f66:	4013      	ands	r3, r2
 8003f68:	d011      	beq.n	8003f8e <HAL_UART_IRQHandler+0x102>
 8003f6a:	239c      	movs	r3, #156	; 0x9c
 8003f6c:	18fb      	adds	r3, r7, r3
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2201      	movs	r2, #1
 8003f72:	4013      	ands	r3, r2
 8003f74:	d00b      	beq.n	8003f8e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	228c      	movs	r2, #140	; 0x8c
 8003f82:	589b      	ldr	r3, [r3, r2]
 8003f84:	2204      	movs	r2, #4
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	218c      	movs	r1, #140	; 0x8c
 8003f8c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f8e:	23a4      	movs	r3, #164	; 0xa4
 8003f90:	18fb      	adds	r3, r7, r3
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2204      	movs	r2, #4
 8003f96:	4013      	ands	r3, r2
 8003f98:	d011      	beq.n	8003fbe <HAL_UART_IRQHandler+0x132>
 8003f9a:	239c      	movs	r3, #156	; 0x9c
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d00b      	beq.n	8003fbe <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2204      	movs	r2, #4
 8003fac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	228c      	movs	r2, #140	; 0x8c
 8003fb2:	589b      	ldr	r3, [r3, r2]
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	218c      	movs	r1, #140	; 0x8c
 8003fbc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003fbe:	23a4      	movs	r3, #164	; 0xa4
 8003fc0:	18fb      	adds	r3, r7, r3
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2208      	movs	r2, #8
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d017      	beq.n	8003ffa <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003fca:	23a0      	movs	r3, #160	; 0xa0
 8003fcc:	18fb      	adds	r3, r7, r3
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d105      	bne.n	8003fe2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003fd6:	239c      	movs	r3, #156	; 0x9c
 8003fd8:	18fb      	adds	r3, r7, r3
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a59      	ldr	r2, [pc, #356]	; (8004144 <HAL_UART_IRQHandler+0x2b8>)
 8003fde:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003fe0:	d00b      	beq.n	8003ffa <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2208      	movs	r2, #8
 8003fe8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	228c      	movs	r2, #140	; 0x8c
 8003fee:	589b      	ldr	r3, [r3, r2]
 8003ff0:	2208      	movs	r2, #8
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	218c      	movs	r1, #140	; 0x8c
 8003ff8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ffa:	23a4      	movs	r3, #164	; 0xa4
 8003ffc:	18fb      	adds	r3, r7, r3
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	2380      	movs	r3, #128	; 0x80
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	4013      	ands	r3, r2
 8004006:	d013      	beq.n	8004030 <HAL_UART_IRQHandler+0x1a4>
 8004008:	23a0      	movs	r3, #160	; 0xa0
 800400a:	18fb      	adds	r3, r7, r3
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	2380      	movs	r3, #128	; 0x80
 8004010:	04db      	lsls	r3, r3, #19
 8004012:	4013      	ands	r3, r2
 8004014:	d00c      	beq.n	8004030 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2280      	movs	r2, #128	; 0x80
 800401c:	0112      	lsls	r2, r2, #4
 800401e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	228c      	movs	r2, #140	; 0x8c
 8004024:	589b      	ldr	r3, [r3, r2]
 8004026:	2220      	movs	r2, #32
 8004028:	431a      	orrs	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	218c      	movs	r1, #140	; 0x8c
 800402e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	228c      	movs	r2, #140	; 0x8c
 8004034:	589b      	ldr	r3, [r3, r2]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d100      	bne.n	800403c <HAL_UART_IRQHandler+0x1b0>
 800403a:	e230      	b.n	800449e <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800403c:	23a4      	movs	r3, #164	; 0xa4
 800403e:	18fb      	adds	r3, r7, r3
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2220      	movs	r2, #32
 8004044:	4013      	ands	r3, r2
 8004046:	d015      	beq.n	8004074 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004048:	23a0      	movs	r3, #160	; 0xa0
 800404a:	18fb      	adds	r3, r7, r3
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2220      	movs	r2, #32
 8004050:	4013      	ands	r3, r2
 8004052:	d106      	bne.n	8004062 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004054:	239c      	movs	r3, #156	; 0x9c
 8004056:	18fb      	adds	r3, r7, r3
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	2380      	movs	r3, #128	; 0x80
 800405c:	055b      	lsls	r3, r3, #21
 800405e:	4013      	ands	r3, r2
 8004060:	d008      	beq.n	8004074 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004066:	2b00      	cmp	r3, #0
 8004068:	d004      	beq.n	8004074 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	0010      	movs	r0, r2
 8004072:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	228c      	movs	r2, #140	; 0x8c
 8004078:	589b      	ldr	r3, [r3, r2]
 800407a:	2194      	movs	r1, #148	; 0x94
 800407c:	187a      	adds	r2, r7, r1
 800407e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2240      	movs	r2, #64	; 0x40
 8004088:	4013      	ands	r3, r2
 800408a:	2b40      	cmp	r3, #64	; 0x40
 800408c:	d004      	beq.n	8004098 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800408e:	187b      	adds	r3, r7, r1
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2228      	movs	r2, #40	; 0x28
 8004094:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004096:	d047      	beq.n	8004128 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	0018      	movs	r0, r3
 800409c:	f000 ffe4 	bl	8005068 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2240      	movs	r2, #64	; 0x40
 80040a8:	4013      	ands	r3, r2
 80040aa:	2b40      	cmp	r3, #64	; 0x40
 80040ac:	d137      	bne.n	800411e <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ae:	f3ef 8310 	mrs	r3, PRIMASK
 80040b2:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80040b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040b6:	2090      	movs	r0, #144	; 0x90
 80040b8:	183a      	adds	r2, r7, r0
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	2301      	movs	r3, #1
 80040be:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040c2:	f383 8810 	msr	PRIMASK, r3
}
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2140      	movs	r1, #64	; 0x40
 80040d4:	438a      	bics	r2, r1
 80040d6:	609a      	str	r2, [r3, #8]
 80040d8:	183b      	adds	r3, r7, r0
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040e0:	f383 8810 	msr	PRIMASK, r3
}
 80040e4:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d012      	beq.n	8004114 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040f2:	4a16      	ldr	r2, [pc, #88]	; (800414c <HAL_UART_IRQHandler+0x2c0>)
 80040f4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040fa:	0018      	movs	r0, r3
 80040fc:	f7fd feac 	bl	8001e58 <HAL_DMA_Abort_IT>
 8004100:	1e03      	subs	r3, r0, #0
 8004102:	d01a      	beq.n	800413a <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800410e:	0018      	movs	r0, r3
 8004110:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004112:	e012      	b.n	800413a <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	0018      	movs	r0, r3
 8004118:	f000 f9e2 	bl	80044e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800411c:	e00d      	b.n	800413a <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	0018      	movs	r0, r3
 8004122:	f000 f9dd 	bl	80044e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004126:	e008      	b.n	800413a <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	0018      	movs	r0, r3
 800412c:	f000 f9d8 	bl	80044e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	228c      	movs	r2, #140	; 0x8c
 8004134:	2100      	movs	r1, #0
 8004136:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004138:	e1b1      	b.n	800449e <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800413a:	46c0      	nop			; (mov r8, r8)
    return;
 800413c:	e1af      	b.n	800449e <HAL_UART_IRQHandler+0x612>
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	0000080f 	.word	0x0000080f
 8004144:	10000001 	.word	0x10000001
 8004148:	04000120 	.word	0x04000120
 800414c:	08005135 	.word	0x08005135

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004154:	2b01      	cmp	r3, #1
 8004156:	d000      	beq.n	800415a <HAL_UART_IRQHandler+0x2ce>
 8004158:	e135      	b.n	80043c6 <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800415a:	23a4      	movs	r3, #164	; 0xa4
 800415c:	18fb      	adds	r3, r7, r3
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2210      	movs	r2, #16
 8004162:	4013      	ands	r3, r2
 8004164:	d100      	bne.n	8004168 <HAL_UART_IRQHandler+0x2dc>
 8004166:	e12e      	b.n	80043c6 <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004168:	23a0      	movs	r3, #160	; 0xa0
 800416a:	18fb      	adds	r3, r7, r3
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2210      	movs	r2, #16
 8004170:	4013      	ands	r3, r2
 8004172:	d100      	bne.n	8004176 <HAL_UART_IRQHandler+0x2ea>
 8004174:	e127      	b.n	80043c6 <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2210      	movs	r2, #16
 800417c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	2240      	movs	r2, #64	; 0x40
 8004186:	4013      	ands	r3, r2
 8004188:	2b40      	cmp	r3, #64	; 0x40
 800418a:	d000      	beq.n	800418e <HAL_UART_IRQHandler+0x302>
 800418c:	e09e      	b.n	80042cc <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	217e      	movs	r1, #126	; 0x7e
 8004198:	187b      	adds	r3, r7, r1
 800419a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800419c:	187b      	adds	r3, r7, r1
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d100      	bne.n	80041a6 <HAL_UART_IRQHandler+0x31a>
 80041a4:	e17d      	b.n	80044a2 <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	225c      	movs	r2, #92	; 0x5c
 80041aa:	5a9b      	ldrh	r3, [r3, r2]
 80041ac:	187a      	adds	r2, r7, r1
 80041ae:	8812      	ldrh	r2, [r2, #0]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d300      	bcc.n	80041b6 <HAL_UART_IRQHandler+0x32a>
 80041b4:	e175      	b.n	80044a2 <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	187a      	adds	r2, r7, r1
 80041ba:	215e      	movs	r1, #94	; 0x5e
 80041bc:	8812      	ldrh	r2, [r2, #0]
 80041be:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2220      	movs	r2, #32
 80041ca:	4013      	ands	r3, r2
 80041cc:	d16f      	bne.n	80042ae <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ce:	f3ef 8310 	mrs	r3, PRIMASK
 80041d2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80041d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80041d8:	2301      	movs	r3, #1
 80041da:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041de:	f383 8810 	msr	PRIMASK, r3
}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	49b1      	ldr	r1, [pc, #708]	; (80044b4 <HAL_UART_IRQHandler+0x628>)
 80041f0:	400a      	ands	r2, r1
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fa:	f383 8810 	msr	PRIMASK, r3
}
 80041fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004200:	f3ef 8310 	mrs	r3, PRIMASK
 8004204:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004208:	677b      	str	r3, [r7, #116]	; 0x74
 800420a:	2301      	movs	r3, #1
 800420c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800420e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004210:	f383 8810 	msr	PRIMASK, r3
}
 8004214:	46c0      	nop			; (mov r8, r8)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2101      	movs	r1, #1
 8004222:	438a      	bics	r2, r1
 8004224:	609a      	str	r2, [r3, #8]
 8004226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004228:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800422a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800422c:	f383 8810 	msr	PRIMASK, r3
}
 8004230:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004232:	f3ef 8310 	mrs	r3, PRIMASK
 8004236:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004238:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800423a:	673b      	str	r3, [r7, #112]	; 0x70
 800423c:	2301      	movs	r3, #1
 800423e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004242:	f383 8810 	msr	PRIMASK, r3
}
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2140      	movs	r1, #64	; 0x40
 8004254:	438a      	bics	r2, r1
 8004256:	609a      	str	r2, [r3, #8]
 8004258:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800425a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800425c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800425e:	f383 8810 	msr	PRIMASK, r3
}
 8004262:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2288      	movs	r2, #136	; 0x88
 8004268:	2120      	movs	r1, #32
 800426a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004272:	f3ef 8310 	mrs	r3, PRIMASK
 8004276:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004278:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800427a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800427c:	2301      	movs	r3, #1
 800427e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004280:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004282:	f383 8810 	msr	PRIMASK, r3
}
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2110      	movs	r1, #16
 8004294:	438a      	bics	r2, r1
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800429c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800429e:	f383 8810 	msr	PRIMASK, r3
}
 80042a2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042a8:	0018      	movs	r0, r3
 80042aa:	f7fd fd73 	bl	8001d94 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	225c      	movs	r2, #92	; 0x5c
 80042b2:	5a9a      	ldrh	r2, [r3, r2]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	215e      	movs	r1, #94	; 0x5e
 80042b8:	5a5b      	ldrh	r3, [r3, r1]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	b29a      	uxth	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	0011      	movs	r1, r2
 80042c4:	0018      	movs	r0, r3
 80042c6:	f000 f913 	bl	80044f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80042ca:	e0ea      	b.n	80044a2 <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	225c      	movs	r2, #92	; 0x5c
 80042d0:	5a99      	ldrh	r1, [r3, r2]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	225e      	movs	r2, #94	; 0x5e
 80042d6:	5a9b      	ldrh	r3, [r3, r2]
 80042d8:	b29a      	uxth	r2, r3
 80042da:	208e      	movs	r0, #142	; 0x8e
 80042dc:	183b      	adds	r3, r7, r0
 80042de:	1a8a      	subs	r2, r1, r2
 80042e0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	225e      	movs	r2, #94	; 0x5e
 80042e6:	5a9b      	ldrh	r3, [r3, r2]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d100      	bne.n	80042f0 <HAL_UART_IRQHandler+0x464>
 80042ee:	e0da      	b.n	80044a6 <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 80042f0:	183b      	adds	r3, r7, r0
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d100      	bne.n	80042fa <HAL_UART_IRQHandler+0x46e>
 80042f8:	e0d5      	b.n	80044a6 <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042fa:	f3ef 8310 	mrs	r3, PRIMASK
 80042fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8004300:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004302:	2488      	movs	r4, #136	; 0x88
 8004304:	193a      	adds	r2, r7, r4
 8004306:	6013      	str	r3, [r2, #0]
 8004308:	2301      	movs	r3, #1
 800430a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f383 8810 	msr	PRIMASK, r3
}
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4966      	ldr	r1, [pc, #408]	; (80044b8 <HAL_UART_IRQHandler+0x62c>)
 8004320:	400a      	ands	r2, r1
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	193b      	adds	r3, r7, r4
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f383 8810 	msr	PRIMASK, r3
}
 8004330:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004332:	f3ef 8310 	mrs	r3, PRIMASK
 8004336:	61bb      	str	r3, [r7, #24]
  return(result);
 8004338:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800433a:	2484      	movs	r4, #132	; 0x84
 800433c:	193a      	adds	r2, r7, r4
 800433e:	6013      	str	r3, [r2, #0]
 8004340:	2301      	movs	r3, #1
 8004342:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f383 8810 	msr	PRIMASK, r3
}
 800434a:	46c0      	nop			; (mov r8, r8)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4959      	ldr	r1, [pc, #356]	; (80044bc <HAL_UART_IRQHandler+0x630>)
 8004358:	400a      	ands	r2, r1
 800435a:	609a      	str	r2, [r3, #8]
 800435c:	193b      	adds	r3, r7, r4
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	f383 8810 	msr	PRIMASK, r3
}
 8004368:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2288      	movs	r2, #136	; 0x88
 800436e:	2120      	movs	r1, #32
 8004370:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800437e:	f3ef 8310 	mrs	r3, PRIMASK
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004386:	2480      	movs	r4, #128	; 0x80
 8004388:	193a      	adds	r2, r7, r4
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	2301      	movs	r3, #1
 800438e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004392:	f383 8810 	msr	PRIMASK, r3
}
 8004396:	46c0      	nop			; (mov r8, r8)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2110      	movs	r1, #16
 80043a4:	438a      	bics	r2, r1
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	193b      	adds	r3, r7, r4
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b0:	f383 8810 	msr	PRIMASK, r3
}
 80043b4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043b6:	183b      	adds	r3, r7, r0
 80043b8:	881a      	ldrh	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	0011      	movs	r1, r2
 80043be:	0018      	movs	r0, r3
 80043c0:	f000 f896 	bl	80044f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80043c4:	e06f      	b.n	80044a6 <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80043c6:	23a4      	movs	r3, #164	; 0xa4
 80043c8:	18fb      	adds	r3, r7, r3
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	2380      	movs	r3, #128	; 0x80
 80043ce:	035b      	lsls	r3, r3, #13
 80043d0:	4013      	ands	r3, r2
 80043d2:	d010      	beq.n	80043f6 <HAL_UART_IRQHandler+0x56a>
 80043d4:	239c      	movs	r3, #156	; 0x9c
 80043d6:	18fb      	adds	r3, r7, r3
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	2380      	movs	r3, #128	; 0x80
 80043dc:	03db      	lsls	r3, r3, #15
 80043de:	4013      	ands	r3, r2
 80043e0:	d009      	beq.n	80043f6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2280      	movs	r2, #128	; 0x80
 80043e8:	0352      	lsls	r2, r2, #13
 80043ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	0018      	movs	r0, r3
 80043f0:	f001 fb34 	bl	8005a5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043f4:	e05a      	b.n	80044ac <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80043f6:	23a4      	movs	r3, #164	; 0xa4
 80043f8:	18fb      	adds	r3, r7, r3
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2280      	movs	r2, #128	; 0x80
 80043fe:	4013      	ands	r3, r2
 8004400:	d016      	beq.n	8004430 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004402:	23a0      	movs	r3, #160	; 0xa0
 8004404:	18fb      	adds	r3, r7, r3
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2280      	movs	r2, #128	; 0x80
 800440a:	4013      	ands	r3, r2
 800440c:	d106      	bne.n	800441c <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800440e:	239c      	movs	r3, #156	; 0x9c
 8004410:	18fb      	adds	r3, r7, r3
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	2380      	movs	r3, #128	; 0x80
 8004416:	041b      	lsls	r3, r3, #16
 8004418:	4013      	ands	r3, r2
 800441a:	d009      	beq.n	8004430 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004420:	2b00      	cmp	r3, #0
 8004422:	d042      	beq.n	80044aa <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	0010      	movs	r0, r2
 800442c:	4798      	blx	r3
    }
    return;
 800442e:	e03c      	b.n	80044aa <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004430:	23a4      	movs	r3, #164	; 0xa4
 8004432:	18fb      	adds	r3, r7, r3
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2240      	movs	r2, #64	; 0x40
 8004438:	4013      	ands	r3, r2
 800443a:	d00a      	beq.n	8004452 <HAL_UART_IRQHandler+0x5c6>
 800443c:	23a0      	movs	r3, #160	; 0xa0
 800443e:	18fb      	adds	r3, r7, r3
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2240      	movs	r2, #64	; 0x40
 8004444:	4013      	ands	r3, r2
 8004446:	d004      	beq.n	8004452 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	0018      	movs	r0, r3
 800444c:	f000 fe89 	bl	8005162 <UART_EndTransmit_IT>
    return;
 8004450:	e02c      	b.n	80044ac <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004452:	23a4      	movs	r3, #164	; 0xa4
 8004454:	18fb      	adds	r3, r7, r3
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	2380      	movs	r3, #128	; 0x80
 800445a:	041b      	lsls	r3, r3, #16
 800445c:	4013      	ands	r3, r2
 800445e:	d00b      	beq.n	8004478 <HAL_UART_IRQHandler+0x5ec>
 8004460:	23a0      	movs	r3, #160	; 0xa0
 8004462:	18fb      	adds	r3, r7, r3
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	2380      	movs	r3, #128	; 0x80
 8004468:	05db      	lsls	r3, r3, #23
 800446a:	4013      	ands	r3, r2
 800446c:	d004      	beq.n	8004478 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	0018      	movs	r0, r3
 8004472:	f001 fb03 	bl	8005a7c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004476:	e019      	b.n	80044ac <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004478:	23a4      	movs	r3, #164	; 0xa4
 800447a:	18fb      	adds	r3, r7, r3
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	2380      	movs	r3, #128	; 0x80
 8004480:	045b      	lsls	r3, r3, #17
 8004482:	4013      	ands	r3, r2
 8004484:	d012      	beq.n	80044ac <HAL_UART_IRQHandler+0x620>
 8004486:	23a0      	movs	r3, #160	; 0xa0
 8004488:	18fb      	adds	r3, r7, r3
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	da0d      	bge.n	80044ac <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	0018      	movs	r0, r3
 8004494:	f001 faea 	bl	8005a6c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004498:	e008      	b.n	80044ac <HAL_UART_IRQHandler+0x620>
      return;
 800449a:	46c0      	nop			; (mov r8, r8)
 800449c:	e006      	b.n	80044ac <HAL_UART_IRQHandler+0x620>
    return;
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	e004      	b.n	80044ac <HAL_UART_IRQHandler+0x620>
      return;
 80044a2:	46c0      	nop			; (mov r8, r8)
 80044a4:	e002      	b.n	80044ac <HAL_UART_IRQHandler+0x620>
      return;
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	e000      	b.n	80044ac <HAL_UART_IRQHandler+0x620>
    return;
 80044aa:	46c0      	nop			; (mov r8, r8)
  }
}
 80044ac:	46bd      	mov	sp, r7
 80044ae:	b02a      	add	sp, #168	; 0xa8
 80044b0:	bdb0      	pop	{r4, r5, r7, pc}
 80044b2:	46c0      	nop			; (mov r8, r8)
 80044b4:	fffffeff 	.word	0xfffffeff
 80044b8:	fffffedf 	.word	0xfffffedf
 80044bc:	effffffe 	.word	0xeffffffe

080044c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80044c8:	46c0      	nop			; (mov r8, r8)
 80044ca:	46bd      	mov	sp, r7
 80044cc:	b002      	add	sp, #8
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80044d8:	46c0      	nop			; (mov r8, r8)
 80044da:	46bd      	mov	sp, r7
 80044dc:	b002      	add	sp, #8
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80044e8:	46c0      	nop			; (mov r8, r8)
 80044ea:	46bd      	mov	sp, r7
 80044ec:	b002      	add	sp, #8
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	000a      	movs	r2, r1
 80044fa:	1cbb      	adds	r3, r7, #2
 80044fc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	46bd      	mov	sp, r7
 8004502:	b002      	add	sp, #8
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004508:	b5b0      	push	{r4, r5, r7, lr}
 800450a:	b090      	sub	sp, #64	; 0x40
 800450c:	af00      	add	r7, sp, #0
 800450e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004510:	231a      	movs	r3, #26
 8004512:	2220      	movs	r2, #32
 8004514:	4694      	mov	ip, r2
 8004516:	44bc      	add	ip, r7
 8004518:	4463      	add	r3, ip
 800451a:	2200      	movs	r2, #0
 800451c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	689a      	ldr	r2, [r3, #8]
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	431a      	orrs	r2, r3
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	431a      	orrs	r2, r3
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	4313      	orrs	r3, r2
 8004534:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4ab9      	ldr	r2, [pc, #740]	; (8004824 <UART_SetConfig+0x31c>)
 800453e:	4013      	ands	r3, r2
 8004540:	0019      	movs	r1, r3
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004548:	430b      	orrs	r3, r1
 800454a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	4ab5      	ldr	r2, [pc, #724]	; (8004828 <UART_SetConfig+0x320>)
 8004554:	4013      	ands	r3, r2
 8004556:	0018      	movs	r0, r3
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	68d9      	ldr	r1, [r3, #12]
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	0003      	movs	r3, r0
 8004562:	430b      	orrs	r3, r1
 8004564:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4aae      	ldr	r2, [pc, #696]	; (800482c <UART_SetConfig+0x324>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d004      	beq.n	8004580 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800457c:	4313      	orrs	r3, r2
 800457e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	4aaa      	ldr	r2, [pc, #680]	; (8004830 <UART_SetConfig+0x328>)
 8004588:	4013      	ands	r3, r2
 800458a:	0019      	movs	r1, r3
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004592:	430b      	orrs	r3, r1
 8004594:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	220f      	movs	r2, #15
 800459e:	4393      	bics	r3, r2
 80045a0:	0018      	movs	r0, r3
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	0003      	movs	r3, r0
 80045ac:	430b      	orrs	r3, r1
 80045ae:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a9f      	ldr	r2, [pc, #636]	; (8004834 <UART_SetConfig+0x32c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d136      	bne.n	8004628 <UART_SetConfig+0x120>
 80045ba:	4b9f      	ldr	r3, [pc, #636]	; (8004838 <UART_SetConfig+0x330>)
 80045bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045be:	2203      	movs	r2, #3
 80045c0:	4013      	ands	r3, r2
 80045c2:	2b03      	cmp	r3, #3
 80045c4:	d020      	beq.n	8004608 <UART_SetConfig+0x100>
 80045c6:	d827      	bhi.n	8004618 <UART_SetConfig+0x110>
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d00d      	beq.n	80045e8 <UART_SetConfig+0xe0>
 80045cc:	d824      	bhi.n	8004618 <UART_SetConfig+0x110>
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <UART_SetConfig+0xd0>
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d010      	beq.n	80045f8 <UART_SetConfig+0xf0>
 80045d6:	e01f      	b.n	8004618 <UART_SetConfig+0x110>
 80045d8:	231b      	movs	r3, #27
 80045da:	2220      	movs	r2, #32
 80045dc:	4694      	mov	ip, r2
 80045de:	44bc      	add	ip, r7
 80045e0:	4463      	add	r3, ip
 80045e2:	2200      	movs	r2, #0
 80045e4:	701a      	strb	r2, [r3, #0]
 80045e6:	e0c5      	b.n	8004774 <UART_SetConfig+0x26c>
 80045e8:	231b      	movs	r3, #27
 80045ea:	2220      	movs	r2, #32
 80045ec:	4694      	mov	ip, r2
 80045ee:	44bc      	add	ip, r7
 80045f0:	4463      	add	r3, ip
 80045f2:	2202      	movs	r2, #2
 80045f4:	701a      	strb	r2, [r3, #0]
 80045f6:	e0bd      	b.n	8004774 <UART_SetConfig+0x26c>
 80045f8:	231b      	movs	r3, #27
 80045fa:	2220      	movs	r2, #32
 80045fc:	4694      	mov	ip, r2
 80045fe:	44bc      	add	ip, r7
 8004600:	4463      	add	r3, ip
 8004602:	2204      	movs	r2, #4
 8004604:	701a      	strb	r2, [r3, #0]
 8004606:	e0b5      	b.n	8004774 <UART_SetConfig+0x26c>
 8004608:	231b      	movs	r3, #27
 800460a:	2220      	movs	r2, #32
 800460c:	4694      	mov	ip, r2
 800460e:	44bc      	add	ip, r7
 8004610:	4463      	add	r3, ip
 8004612:	2208      	movs	r2, #8
 8004614:	701a      	strb	r2, [r3, #0]
 8004616:	e0ad      	b.n	8004774 <UART_SetConfig+0x26c>
 8004618:	231b      	movs	r3, #27
 800461a:	2220      	movs	r2, #32
 800461c:	4694      	mov	ip, r2
 800461e:	44bc      	add	ip, r7
 8004620:	4463      	add	r3, ip
 8004622:	2210      	movs	r2, #16
 8004624:	701a      	strb	r2, [r3, #0]
 8004626:	e0a5      	b.n	8004774 <UART_SetConfig+0x26c>
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a83      	ldr	r2, [pc, #524]	; (800483c <UART_SetConfig+0x334>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d136      	bne.n	80046a0 <UART_SetConfig+0x198>
 8004632:	4b81      	ldr	r3, [pc, #516]	; (8004838 <UART_SetConfig+0x330>)
 8004634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004636:	220c      	movs	r2, #12
 8004638:	4013      	ands	r3, r2
 800463a:	2b0c      	cmp	r3, #12
 800463c:	d020      	beq.n	8004680 <UART_SetConfig+0x178>
 800463e:	d827      	bhi.n	8004690 <UART_SetConfig+0x188>
 8004640:	2b08      	cmp	r3, #8
 8004642:	d00d      	beq.n	8004660 <UART_SetConfig+0x158>
 8004644:	d824      	bhi.n	8004690 <UART_SetConfig+0x188>
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <UART_SetConfig+0x148>
 800464a:	2b04      	cmp	r3, #4
 800464c:	d010      	beq.n	8004670 <UART_SetConfig+0x168>
 800464e:	e01f      	b.n	8004690 <UART_SetConfig+0x188>
 8004650:	231b      	movs	r3, #27
 8004652:	2220      	movs	r2, #32
 8004654:	4694      	mov	ip, r2
 8004656:	44bc      	add	ip, r7
 8004658:	4463      	add	r3, ip
 800465a:	2200      	movs	r2, #0
 800465c:	701a      	strb	r2, [r3, #0]
 800465e:	e089      	b.n	8004774 <UART_SetConfig+0x26c>
 8004660:	231b      	movs	r3, #27
 8004662:	2220      	movs	r2, #32
 8004664:	4694      	mov	ip, r2
 8004666:	44bc      	add	ip, r7
 8004668:	4463      	add	r3, ip
 800466a:	2202      	movs	r2, #2
 800466c:	701a      	strb	r2, [r3, #0]
 800466e:	e081      	b.n	8004774 <UART_SetConfig+0x26c>
 8004670:	231b      	movs	r3, #27
 8004672:	2220      	movs	r2, #32
 8004674:	4694      	mov	ip, r2
 8004676:	44bc      	add	ip, r7
 8004678:	4463      	add	r3, ip
 800467a:	2204      	movs	r2, #4
 800467c:	701a      	strb	r2, [r3, #0]
 800467e:	e079      	b.n	8004774 <UART_SetConfig+0x26c>
 8004680:	231b      	movs	r3, #27
 8004682:	2220      	movs	r2, #32
 8004684:	4694      	mov	ip, r2
 8004686:	44bc      	add	ip, r7
 8004688:	4463      	add	r3, ip
 800468a:	2208      	movs	r2, #8
 800468c:	701a      	strb	r2, [r3, #0]
 800468e:	e071      	b.n	8004774 <UART_SetConfig+0x26c>
 8004690:	231b      	movs	r3, #27
 8004692:	2220      	movs	r2, #32
 8004694:	4694      	mov	ip, r2
 8004696:	44bc      	add	ip, r7
 8004698:	4463      	add	r3, ip
 800469a:	2210      	movs	r2, #16
 800469c:	701a      	strb	r2, [r3, #0]
 800469e:	e069      	b.n	8004774 <UART_SetConfig+0x26c>
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a66      	ldr	r2, [pc, #408]	; (8004840 <UART_SetConfig+0x338>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d107      	bne.n	80046ba <UART_SetConfig+0x1b2>
 80046aa:	231b      	movs	r3, #27
 80046ac:	2220      	movs	r2, #32
 80046ae:	4694      	mov	ip, r2
 80046b0:	44bc      	add	ip, r7
 80046b2:	4463      	add	r3, ip
 80046b4:	2200      	movs	r2, #0
 80046b6:	701a      	strb	r2, [r3, #0]
 80046b8:	e05c      	b.n	8004774 <UART_SetConfig+0x26c>
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a61      	ldr	r2, [pc, #388]	; (8004844 <UART_SetConfig+0x33c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d107      	bne.n	80046d4 <UART_SetConfig+0x1cc>
 80046c4:	231b      	movs	r3, #27
 80046c6:	2220      	movs	r2, #32
 80046c8:	4694      	mov	ip, r2
 80046ca:	44bc      	add	ip, r7
 80046cc:	4463      	add	r3, ip
 80046ce:	2200      	movs	r2, #0
 80046d0:	701a      	strb	r2, [r3, #0]
 80046d2:	e04f      	b.n	8004774 <UART_SetConfig+0x26c>
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a54      	ldr	r2, [pc, #336]	; (800482c <UART_SetConfig+0x324>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d143      	bne.n	8004766 <UART_SetConfig+0x25e>
 80046de:	4b56      	ldr	r3, [pc, #344]	; (8004838 <UART_SetConfig+0x330>)
 80046e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046e2:	23c0      	movs	r3, #192	; 0xc0
 80046e4:	011b      	lsls	r3, r3, #4
 80046e6:	4013      	ands	r3, r2
 80046e8:	22c0      	movs	r2, #192	; 0xc0
 80046ea:	0112      	lsls	r2, r2, #4
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d02a      	beq.n	8004746 <UART_SetConfig+0x23e>
 80046f0:	22c0      	movs	r2, #192	; 0xc0
 80046f2:	0112      	lsls	r2, r2, #4
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d82e      	bhi.n	8004756 <UART_SetConfig+0x24e>
 80046f8:	2280      	movs	r2, #128	; 0x80
 80046fa:	0112      	lsls	r2, r2, #4
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d012      	beq.n	8004726 <UART_SetConfig+0x21e>
 8004700:	2280      	movs	r2, #128	; 0x80
 8004702:	0112      	lsls	r2, r2, #4
 8004704:	4293      	cmp	r3, r2
 8004706:	d826      	bhi.n	8004756 <UART_SetConfig+0x24e>
 8004708:	2b00      	cmp	r3, #0
 800470a:	d004      	beq.n	8004716 <UART_SetConfig+0x20e>
 800470c:	2280      	movs	r2, #128	; 0x80
 800470e:	00d2      	lsls	r2, r2, #3
 8004710:	4293      	cmp	r3, r2
 8004712:	d010      	beq.n	8004736 <UART_SetConfig+0x22e>
 8004714:	e01f      	b.n	8004756 <UART_SetConfig+0x24e>
 8004716:	231b      	movs	r3, #27
 8004718:	2220      	movs	r2, #32
 800471a:	4694      	mov	ip, r2
 800471c:	44bc      	add	ip, r7
 800471e:	4463      	add	r3, ip
 8004720:	2200      	movs	r2, #0
 8004722:	701a      	strb	r2, [r3, #0]
 8004724:	e026      	b.n	8004774 <UART_SetConfig+0x26c>
 8004726:	231b      	movs	r3, #27
 8004728:	2220      	movs	r2, #32
 800472a:	4694      	mov	ip, r2
 800472c:	44bc      	add	ip, r7
 800472e:	4463      	add	r3, ip
 8004730:	2202      	movs	r2, #2
 8004732:	701a      	strb	r2, [r3, #0]
 8004734:	e01e      	b.n	8004774 <UART_SetConfig+0x26c>
 8004736:	231b      	movs	r3, #27
 8004738:	2220      	movs	r2, #32
 800473a:	4694      	mov	ip, r2
 800473c:	44bc      	add	ip, r7
 800473e:	4463      	add	r3, ip
 8004740:	2204      	movs	r2, #4
 8004742:	701a      	strb	r2, [r3, #0]
 8004744:	e016      	b.n	8004774 <UART_SetConfig+0x26c>
 8004746:	231b      	movs	r3, #27
 8004748:	2220      	movs	r2, #32
 800474a:	4694      	mov	ip, r2
 800474c:	44bc      	add	ip, r7
 800474e:	4463      	add	r3, ip
 8004750:	2208      	movs	r2, #8
 8004752:	701a      	strb	r2, [r3, #0]
 8004754:	e00e      	b.n	8004774 <UART_SetConfig+0x26c>
 8004756:	231b      	movs	r3, #27
 8004758:	2220      	movs	r2, #32
 800475a:	4694      	mov	ip, r2
 800475c:	44bc      	add	ip, r7
 800475e:	4463      	add	r3, ip
 8004760:	2210      	movs	r2, #16
 8004762:	701a      	strb	r2, [r3, #0]
 8004764:	e006      	b.n	8004774 <UART_SetConfig+0x26c>
 8004766:	231b      	movs	r3, #27
 8004768:	2220      	movs	r2, #32
 800476a:	4694      	mov	ip, r2
 800476c:	44bc      	add	ip, r7
 800476e:	4463      	add	r3, ip
 8004770:	2210      	movs	r2, #16
 8004772:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a2c      	ldr	r2, [pc, #176]	; (800482c <UART_SetConfig+0x324>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d000      	beq.n	8004780 <UART_SetConfig+0x278>
 800477e:	e0ad      	b.n	80048dc <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004780:	231b      	movs	r3, #27
 8004782:	2220      	movs	r2, #32
 8004784:	4694      	mov	ip, r2
 8004786:	44bc      	add	ip, r7
 8004788:	4463      	add	r3, ip
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b08      	cmp	r3, #8
 800478e:	d015      	beq.n	80047bc <UART_SetConfig+0x2b4>
 8004790:	dc18      	bgt.n	80047c4 <UART_SetConfig+0x2bc>
 8004792:	2b04      	cmp	r3, #4
 8004794:	d00d      	beq.n	80047b2 <UART_SetConfig+0x2aa>
 8004796:	dc15      	bgt.n	80047c4 <UART_SetConfig+0x2bc>
 8004798:	2b00      	cmp	r3, #0
 800479a:	d002      	beq.n	80047a2 <UART_SetConfig+0x29a>
 800479c:	2b02      	cmp	r3, #2
 800479e:	d005      	beq.n	80047ac <UART_SetConfig+0x2a4>
 80047a0:	e010      	b.n	80047c4 <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047a2:	f7fe fa9d 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 80047a6:	0003      	movs	r3, r0
 80047a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047aa:	e015      	b.n	80047d8 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047ac:	4b26      	ldr	r3, [pc, #152]	; (8004848 <UART_SetConfig+0x340>)
 80047ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047b0:	e012      	b.n	80047d8 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047b2:	f7fe fa09 	bl	8002bc8 <HAL_RCC_GetSysClockFreq>
 80047b6:	0003      	movs	r3, r0
 80047b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047ba:	e00d      	b.n	80047d8 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047bc:	2380      	movs	r3, #128	; 0x80
 80047be:	021b      	lsls	r3, r3, #8
 80047c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047c2:	e009      	b.n	80047d8 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80047c8:	231a      	movs	r3, #26
 80047ca:	2220      	movs	r2, #32
 80047cc:	4694      	mov	ip, r2
 80047ce:	44bc      	add	ip, r7
 80047d0:	4463      	add	r3, ip
 80047d2:	2201      	movs	r2, #1
 80047d4:	701a      	strb	r2, [r3, #0]
        break;
 80047d6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d100      	bne.n	80047e0 <UART_SetConfig+0x2d8>
 80047de:	e154      	b.n	8004a8a <UART_SetConfig+0x582>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047e4:	4b19      	ldr	r3, [pc, #100]	; (800484c <UART_SetConfig+0x344>)
 80047e6:	0052      	lsls	r2, r2, #1
 80047e8:	5ad3      	ldrh	r3, [r2, r3]
 80047ea:	0019      	movs	r1, r3
 80047ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80047ee:	f7fb fc89 	bl	8000104 <__udivsi3>
 80047f2:	0003      	movs	r3, r0
 80047f4:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	0013      	movs	r3, r2
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	189b      	adds	r3, r3, r2
 8004800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004802:	429a      	cmp	r2, r3
 8004804:	d305      	bcc.n	8004812 <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800480c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800480e:	429a      	cmp	r2, r3
 8004810:	d91e      	bls.n	8004850 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004812:	231a      	movs	r3, #26
 8004814:	2220      	movs	r2, #32
 8004816:	4694      	mov	ip, r2
 8004818:	44bc      	add	ip, r7
 800481a:	4463      	add	r3, ip
 800481c:	2201      	movs	r2, #1
 800481e:	701a      	strb	r2, [r3, #0]
 8004820:	e133      	b.n	8004a8a <UART_SetConfig+0x582>
 8004822:	46c0      	nop			; (mov r8, r8)
 8004824:	cfff69f3 	.word	0xcfff69f3
 8004828:	ffffcfff 	.word	0xffffcfff
 800482c:	40008000 	.word	0x40008000
 8004830:	11fff4ff 	.word	0x11fff4ff
 8004834:	40013800 	.word	0x40013800
 8004838:	40021000 	.word	0x40021000
 800483c:	40004400 	.word	0x40004400
 8004840:	40004800 	.word	0x40004800
 8004844:	40004c00 	.word	0x40004c00
 8004848:	00f42400 	.word	0x00f42400
 800484c:	08005d90 	.word	0x08005d90
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004852:	61bb      	str	r3, [r7, #24]
 8004854:	2300      	movs	r3, #0
 8004856:	61fb      	str	r3, [r7, #28]
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800485c:	4b97      	ldr	r3, [pc, #604]	; (8004abc <UART_SetConfig+0x5b4>)
 800485e:	0052      	lsls	r2, r2, #1
 8004860:	5ad3      	ldrh	r3, [r2, r3]
 8004862:	613b      	str	r3, [r7, #16]
 8004864:	2300      	movs	r3, #0
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	69b8      	ldr	r0, [r7, #24]
 800486e:	69f9      	ldr	r1, [r7, #28]
 8004870:	f7fb fdbe 	bl	80003f0 <__aeabi_uldivmod>
 8004874:	0002      	movs	r2, r0
 8004876:	000b      	movs	r3, r1
 8004878:	0e11      	lsrs	r1, r2, #24
 800487a:	021d      	lsls	r5, r3, #8
 800487c:	430d      	orrs	r5, r1
 800487e:	0214      	lsls	r4, r2, #8
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	085b      	lsrs	r3, r3, #1
 8004886:	60bb      	str	r3, [r7, #8]
 8004888:	2300      	movs	r3, #0
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	68b8      	ldr	r0, [r7, #8]
 800488e:	68f9      	ldr	r1, [r7, #12]
 8004890:	1900      	adds	r0, r0, r4
 8004892:	4169      	adcs	r1, r5
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	603b      	str	r3, [r7, #0]
 800489a:	2300      	movs	r3, #0
 800489c:	607b      	str	r3, [r7, #4]
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f7fb fda5 	bl	80003f0 <__aeabi_uldivmod>
 80048a6:	0002      	movs	r2, r0
 80048a8:	000b      	movs	r3, r1
 80048aa:	0013      	movs	r3, r2
 80048ac:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048b0:	23c0      	movs	r3, #192	; 0xc0
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d309      	bcc.n	80048cc <UART_SetConfig+0x3c4>
 80048b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ba:	2380      	movs	r3, #128	; 0x80
 80048bc:	035b      	lsls	r3, r3, #13
 80048be:	429a      	cmp	r2, r3
 80048c0:	d204      	bcs.n	80048cc <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048c8:	60da      	str	r2, [r3, #12]
 80048ca:	e0de      	b.n	8004a8a <UART_SetConfig+0x582>
        }
        else
        {
          ret = HAL_ERROR;
 80048cc:	231a      	movs	r3, #26
 80048ce:	2220      	movs	r2, #32
 80048d0:	4694      	mov	ip, r2
 80048d2:	44bc      	add	ip, r7
 80048d4:	4463      	add	r3, ip
 80048d6:	2201      	movs	r2, #1
 80048d8:	701a      	strb	r2, [r3, #0]
 80048da:	e0d6      	b.n	8004a8a <UART_SetConfig+0x582>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	69da      	ldr	r2, [r3, #28]
 80048e0:	2380      	movs	r3, #128	; 0x80
 80048e2:	021b      	lsls	r3, r3, #8
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d000      	beq.n	80048ea <UART_SetConfig+0x3e2>
 80048e8:	e074      	b.n	80049d4 <UART_SetConfig+0x4cc>
  {
    switch (clocksource)
 80048ea:	231b      	movs	r3, #27
 80048ec:	2220      	movs	r2, #32
 80048ee:	4694      	mov	ip, r2
 80048f0:	44bc      	add	ip, r7
 80048f2:	4463      	add	r3, ip
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	2b08      	cmp	r3, #8
 80048f8:	d015      	beq.n	8004926 <UART_SetConfig+0x41e>
 80048fa:	dc18      	bgt.n	800492e <UART_SetConfig+0x426>
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d00d      	beq.n	800491c <UART_SetConfig+0x414>
 8004900:	dc15      	bgt.n	800492e <UART_SetConfig+0x426>
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <UART_SetConfig+0x404>
 8004906:	2b02      	cmp	r3, #2
 8004908:	d005      	beq.n	8004916 <UART_SetConfig+0x40e>
 800490a:	e010      	b.n	800492e <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800490c:	f7fe f9e8 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 8004910:	0003      	movs	r3, r0
 8004912:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004914:	e015      	b.n	8004942 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004916:	4b6a      	ldr	r3, [pc, #424]	; (8004ac0 <UART_SetConfig+0x5b8>)
 8004918:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800491a:	e012      	b.n	8004942 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800491c:	f7fe f954 	bl	8002bc8 <HAL_RCC_GetSysClockFreq>
 8004920:	0003      	movs	r3, r0
 8004922:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004924:	e00d      	b.n	8004942 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004926:	2380      	movs	r3, #128	; 0x80
 8004928:	021b      	lsls	r3, r3, #8
 800492a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800492c:	e009      	b.n	8004942 <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 800492e:	2300      	movs	r3, #0
 8004930:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004932:	231a      	movs	r3, #26
 8004934:	2220      	movs	r2, #32
 8004936:	4694      	mov	ip, r2
 8004938:	44bc      	add	ip, r7
 800493a:	4463      	add	r3, ip
 800493c:	2201      	movs	r2, #1
 800493e:	701a      	strb	r2, [r3, #0]
        break;
 8004940:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004944:	2b00      	cmp	r3, #0
 8004946:	d100      	bne.n	800494a <UART_SetConfig+0x442>
 8004948:	e09f      	b.n	8004a8a <UART_SetConfig+0x582>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800494e:	4b5b      	ldr	r3, [pc, #364]	; (8004abc <UART_SetConfig+0x5b4>)
 8004950:	0052      	lsls	r2, r2, #1
 8004952:	5ad3      	ldrh	r3, [r2, r3]
 8004954:	0019      	movs	r1, r3
 8004956:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004958:	f7fb fbd4 	bl	8000104 <__udivsi3>
 800495c:	0003      	movs	r3, r0
 800495e:	005a      	lsls	r2, r3, #1
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	085b      	lsrs	r3, r3, #1
 8004966:	18d2      	adds	r2, r2, r3
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	0019      	movs	r1, r3
 800496e:	0010      	movs	r0, r2
 8004970:	f7fb fbc8 	bl	8000104 <__udivsi3>
 8004974:	0003      	movs	r3, r0
 8004976:	b29b      	uxth	r3, r3
 8004978:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800497a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497c:	2b0f      	cmp	r3, #15
 800497e:	d921      	bls.n	80049c4 <UART_SetConfig+0x4bc>
 8004980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004982:	2380      	movs	r3, #128	; 0x80
 8004984:	025b      	lsls	r3, r3, #9
 8004986:	429a      	cmp	r2, r3
 8004988:	d21c      	bcs.n	80049c4 <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800498a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498c:	b29a      	uxth	r2, r3
 800498e:	200e      	movs	r0, #14
 8004990:	2420      	movs	r4, #32
 8004992:	193b      	adds	r3, r7, r4
 8004994:	181b      	adds	r3, r3, r0
 8004996:	210f      	movs	r1, #15
 8004998:	438a      	bics	r2, r1
 800499a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800499c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499e:	085b      	lsrs	r3, r3, #1
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	2207      	movs	r2, #7
 80049a4:	4013      	ands	r3, r2
 80049a6:	b299      	uxth	r1, r3
 80049a8:	193b      	adds	r3, r7, r4
 80049aa:	181b      	adds	r3, r3, r0
 80049ac:	193a      	adds	r2, r7, r4
 80049ae:	1812      	adds	r2, r2, r0
 80049b0:	8812      	ldrh	r2, [r2, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	193a      	adds	r2, r7, r4
 80049bc:	1812      	adds	r2, r2, r0
 80049be:	8812      	ldrh	r2, [r2, #0]
 80049c0:	60da      	str	r2, [r3, #12]
 80049c2:	e062      	b.n	8004a8a <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 80049c4:	231a      	movs	r3, #26
 80049c6:	2220      	movs	r2, #32
 80049c8:	4694      	mov	ip, r2
 80049ca:	44bc      	add	ip, r7
 80049cc:	4463      	add	r3, ip
 80049ce:	2201      	movs	r2, #1
 80049d0:	701a      	strb	r2, [r3, #0]
 80049d2:	e05a      	b.n	8004a8a <UART_SetConfig+0x582>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049d4:	231b      	movs	r3, #27
 80049d6:	2220      	movs	r2, #32
 80049d8:	4694      	mov	ip, r2
 80049da:	44bc      	add	ip, r7
 80049dc:	4463      	add	r3, ip
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d015      	beq.n	8004a10 <UART_SetConfig+0x508>
 80049e4:	dc18      	bgt.n	8004a18 <UART_SetConfig+0x510>
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d00d      	beq.n	8004a06 <UART_SetConfig+0x4fe>
 80049ea:	dc15      	bgt.n	8004a18 <UART_SetConfig+0x510>
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d002      	beq.n	80049f6 <UART_SetConfig+0x4ee>
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d005      	beq.n	8004a00 <UART_SetConfig+0x4f8>
 80049f4:	e010      	b.n	8004a18 <UART_SetConfig+0x510>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049f6:	f7fe f973 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 80049fa:	0003      	movs	r3, r0
 80049fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80049fe:	e015      	b.n	8004a2c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a00:	4b2f      	ldr	r3, [pc, #188]	; (8004ac0 <UART_SetConfig+0x5b8>)
 8004a02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a04:	e012      	b.n	8004a2c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a06:	f7fe f8df 	bl	8002bc8 <HAL_RCC_GetSysClockFreq>
 8004a0a:	0003      	movs	r3, r0
 8004a0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a0e:	e00d      	b.n	8004a2c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a10:	2380      	movs	r3, #128	; 0x80
 8004a12:	021b      	lsls	r3, r3, #8
 8004a14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a16:	e009      	b.n	8004a2c <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004a1c:	231a      	movs	r3, #26
 8004a1e:	2220      	movs	r2, #32
 8004a20:	4694      	mov	ip, r2
 8004a22:	44bc      	add	ip, r7
 8004a24:	4463      	add	r3, ip
 8004a26:	2201      	movs	r2, #1
 8004a28:	701a      	strb	r2, [r3, #0]
        break;
 8004a2a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d02b      	beq.n	8004a8a <UART_SetConfig+0x582>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a36:	4b21      	ldr	r3, [pc, #132]	; (8004abc <UART_SetConfig+0x5b4>)
 8004a38:	0052      	lsls	r2, r2, #1
 8004a3a:	5ad3      	ldrh	r3, [r2, r3]
 8004a3c:	0019      	movs	r1, r3
 8004a3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004a40:	f7fb fb60 	bl	8000104 <__udivsi3>
 8004a44:	0003      	movs	r3, r0
 8004a46:	001a      	movs	r2, r3
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	085b      	lsrs	r3, r3, #1
 8004a4e:	18d2      	adds	r2, r2, r3
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	0019      	movs	r1, r3
 8004a56:	0010      	movs	r0, r2
 8004a58:	f7fb fb54 	bl	8000104 <__udivsi3>
 8004a5c:	0003      	movs	r3, r0
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a64:	2b0f      	cmp	r3, #15
 8004a66:	d909      	bls.n	8004a7c <UART_SetConfig+0x574>
 8004a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a6a:	2380      	movs	r3, #128	; 0x80
 8004a6c:	025b      	lsls	r3, r3, #9
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d204      	bcs.n	8004a7c <UART_SetConfig+0x574>
      {
        huart->Instance->BRR = usartdiv;
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a78:	60da      	str	r2, [r3, #12]
 8004a7a:	e006      	b.n	8004a8a <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 8004a7c:	231a      	movs	r3, #26
 8004a7e:	2220      	movs	r2, #32
 8004a80:	4694      	mov	ip, r2
 8004a82:	44bc      	add	ip, r7
 8004a84:	4463      	add	r3, ip
 8004a86:	2201      	movs	r2, #1
 8004a88:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	226a      	movs	r2, #106	; 0x6a
 8004a8e:	2101      	movs	r1, #1
 8004a90:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	2268      	movs	r2, #104	; 0x68
 8004a96:	2101      	movs	r1, #1
 8004a98:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004aa6:	231a      	movs	r3, #26
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	4694      	mov	ip, r2
 8004aac:	44bc      	add	ip, r7
 8004aae:	4463      	add	r3, ip
 8004ab0:	781b      	ldrb	r3, [r3, #0]
}
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	b010      	add	sp, #64	; 0x40
 8004ab8:	bdb0      	pop	{r4, r5, r7, pc}
 8004aba:	46c0      	nop			; (mov r8, r8)
 8004abc:	08005d90 	.word	0x08005d90
 8004ac0:	00f42400 	.word	0x00f42400

08004ac4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	d00b      	beq.n	8004aee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	4a4a      	ldr	r2, [pc, #296]	; (8004c08 <UART_AdvFeatureConfig+0x144>)
 8004ade:	4013      	ands	r3, r2
 8004ae0:	0019      	movs	r1, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af2:	2202      	movs	r2, #2
 8004af4:	4013      	ands	r3, r2
 8004af6:	d00b      	beq.n	8004b10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	4a43      	ldr	r2, [pc, #268]	; (8004c0c <UART_AdvFeatureConfig+0x148>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	0019      	movs	r1, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b14:	2204      	movs	r2, #4
 8004b16:	4013      	ands	r3, r2
 8004b18:	d00b      	beq.n	8004b32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	4a3b      	ldr	r2, [pc, #236]	; (8004c10 <UART_AdvFeatureConfig+0x14c>)
 8004b22:	4013      	ands	r3, r2
 8004b24:	0019      	movs	r1, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b36:	2208      	movs	r2, #8
 8004b38:	4013      	ands	r3, r2
 8004b3a:	d00b      	beq.n	8004b54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	4a34      	ldr	r2, [pc, #208]	; (8004c14 <UART_AdvFeatureConfig+0x150>)
 8004b44:	4013      	ands	r3, r2
 8004b46:	0019      	movs	r1, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b58:	2210      	movs	r2, #16
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d00b      	beq.n	8004b76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	4a2c      	ldr	r2, [pc, #176]	; (8004c18 <UART_AdvFeatureConfig+0x154>)
 8004b66:	4013      	ands	r3, r2
 8004b68:	0019      	movs	r1, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	d00b      	beq.n	8004b98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	4a25      	ldr	r2, [pc, #148]	; (8004c1c <UART_AdvFeatureConfig+0x158>)
 8004b88:	4013      	ands	r3, r2
 8004b8a:	0019      	movs	r1, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9c:	2240      	movs	r2, #64	; 0x40
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	d01d      	beq.n	8004bde <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	4a1d      	ldr	r2, [pc, #116]	; (8004c20 <UART_AdvFeatureConfig+0x15c>)
 8004baa:	4013      	ands	r3, r2
 8004bac:	0019      	movs	r1, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bbe:	2380      	movs	r3, #128	; 0x80
 8004bc0:	035b      	lsls	r3, r3, #13
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d10b      	bne.n	8004bde <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	4a15      	ldr	r2, [pc, #84]	; (8004c24 <UART_AdvFeatureConfig+0x160>)
 8004bce:	4013      	ands	r3, r2
 8004bd0:	0019      	movs	r1, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be2:	2280      	movs	r2, #128	; 0x80
 8004be4:	4013      	ands	r3, r2
 8004be6:	d00b      	beq.n	8004c00 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	4a0e      	ldr	r2, [pc, #56]	; (8004c28 <UART_AdvFeatureConfig+0x164>)
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	0019      	movs	r1, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	605a      	str	r2, [r3, #4]
  }
}
 8004c00:	46c0      	nop			; (mov r8, r8)
 8004c02:	46bd      	mov	sp, r7
 8004c04:	b002      	add	sp, #8
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	fffdffff 	.word	0xfffdffff
 8004c0c:	fffeffff 	.word	0xfffeffff
 8004c10:	fffbffff 	.word	0xfffbffff
 8004c14:	ffff7fff 	.word	0xffff7fff
 8004c18:	ffffefff 	.word	0xffffefff
 8004c1c:	ffffdfff 	.word	0xffffdfff
 8004c20:	ffefffff 	.word	0xffefffff
 8004c24:	ff9fffff 	.word	0xff9fffff
 8004c28:	fff7ffff 	.word	0xfff7ffff

08004c2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	228c      	movs	r2, #140	; 0x8c
 8004c38:	2100      	movs	r1, #0
 8004c3a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c3c:	f7fc faea 	bl	8001214 <HAL_GetTick>
 8004c40:	0003      	movs	r3, r0
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2208      	movs	r2, #8
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	2b08      	cmp	r3, #8
 8004c50:	d10c      	bne.n	8004c6c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2280      	movs	r2, #128	; 0x80
 8004c56:	0391      	lsls	r1, r2, #14
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	4a18      	ldr	r2, [pc, #96]	; (8004cbc <UART_CheckIdleState+0x90>)
 8004c5c:	9200      	str	r2, [sp, #0]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f000 f82e 	bl	8004cc0 <UART_WaitOnFlagUntilTimeout>
 8004c64:	1e03      	subs	r3, r0, #0
 8004c66:	d001      	beq.n	8004c6c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e023      	b.n	8004cb4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2204      	movs	r2, #4
 8004c74:	4013      	ands	r3, r2
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d10c      	bne.n	8004c94 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2280      	movs	r2, #128	; 0x80
 8004c7e:	03d1      	lsls	r1, r2, #15
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	4a0e      	ldr	r2, [pc, #56]	; (8004cbc <UART_CheckIdleState+0x90>)
 8004c84:	9200      	str	r2, [sp, #0]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f000 f81a 	bl	8004cc0 <UART_WaitOnFlagUntilTimeout>
 8004c8c:	1e03      	subs	r3, r0, #0
 8004c8e:	d001      	beq.n	8004c94 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e00f      	b.n	8004cb4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2284      	movs	r2, #132	; 0x84
 8004c98:	2120      	movs	r1, #32
 8004c9a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2288      	movs	r2, #136	; 0x88
 8004ca0:	2120      	movs	r1, #32
 8004ca2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2280      	movs	r2, #128	; 0x80
 8004cae:	2100      	movs	r1, #0
 8004cb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	b004      	add	sp, #16
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	01ffffff 	.word	0x01ffffff

08004cc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b094      	sub	sp, #80	; 0x50
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	1dfb      	adds	r3, r7, #7
 8004cce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cd0:	e0a7      	b.n	8004e22 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	d100      	bne.n	8004cda <UART_WaitOnFlagUntilTimeout+0x1a>
 8004cd8:	e0a3      	b.n	8004e22 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cda:	f7fc fa9b 	bl	8001214 <HAL_GetTick>
 8004cde:	0002      	movs	r2, r0
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d302      	bcc.n	8004cf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d13f      	bne.n	8004d70 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004cf8:	647b      	str	r3, [r7, #68]	; 0x44
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d00:	f383 8810 	msr	PRIMASK, r3
}
 8004d04:	46c0      	nop			; (mov r8, r8)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	494e      	ldr	r1, [pc, #312]	; (8004e4c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004d12:	400a      	ands	r2, r1
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d18:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1c:	f383 8810 	msr	PRIMASK, r3
}
 8004d20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d22:	f3ef 8310 	mrs	r3, PRIMASK
 8004d26:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2a:	643b      	str	r3, [r7, #64]	; 0x40
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d32:	f383 8810 	msr	PRIMASK, r3
}
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2101      	movs	r1, #1
 8004d44:	438a      	bics	r2, r1
 8004d46:	609a      	str	r2, [r3, #8]
 8004d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d4e:	f383 8810 	msr	PRIMASK, r3
}
 8004d52:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2284      	movs	r2, #132	; 0x84
 8004d58:	2120      	movs	r1, #32
 8004d5a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2288      	movs	r2, #136	; 0x88
 8004d60:	2120      	movs	r1, #32
 8004d62:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2280      	movs	r2, #128	; 0x80
 8004d68:	2100      	movs	r1, #0
 8004d6a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e069      	b.n	8004e44 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2204      	movs	r2, #4
 8004d78:	4013      	ands	r3, r2
 8004d7a:	d052      	beq.n	8004e22 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	69da      	ldr	r2, [r3, #28]
 8004d82:	2380      	movs	r3, #128	; 0x80
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	401a      	ands	r2, r3
 8004d88:	2380      	movs	r3, #128	; 0x80
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d148      	bne.n	8004e22 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2280      	movs	r2, #128	; 0x80
 8004d96:	0112      	lsls	r2, r2, #4
 8004d98:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d9e:	613b      	str	r3, [r7, #16]
  return(result);
 8004da0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004da2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004da4:	2301      	movs	r3, #1
 8004da6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f383 8810 	msr	PRIMASK, r3
}
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4924      	ldr	r1, [pc, #144]	; (8004e4c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004dbc:	400a      	ands	r2, r1
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dc2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	f383 8810 	msr	PRIMASK, r3
}
 8004dca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8004dd0:	61fb      	str	r3, [r7, #28]
  return(result);
 8004dd2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	f383 8810 	msr	PRIMASK, r3
}
 8004de0:	46c0      	nop			; (mov r8, r8)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2101      	movs	r1, #1
 8004dee:	438a      	bics	r2, r1
 8004df0:	609a      	str	r2, [r3, #8]
 8004df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	f383 8810 	msr	PRIMASK, r3
}
 8004dfc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2284      	movs	r2, #132	; 0x84
 8004e02:	2120      	movs	r1, #32
 8004e04:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2288      	movs	r2, #136	; 0x88
 8004e0a:	2120      	movs	r1, #32
 8004e0c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	228c      	movs	r2, #140	; 0x8c
 8004e12:	2120      	movs	r1, #32
 8004e14:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2280      	movs	r2, #128	; 0x80
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e010      	b.n	8004e44 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	425a      	negs	r2, r3
 8004e32:	4153      	adcs	r3, r2
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	001a      	movs	r2, r3
 8004e38:	1dfb      	adds	r3, r7, #7
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d100      	bne.n	8004e42 <UART_WaitOnFlagUntilTimeout+0x182>
 8004e40:	e747      	b.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	0018      	movs	r0, r3
 8004e46:	46bd      	mov	sp, r7
 8004e48:	b014      	add	sp, #80	; 0x50
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	fffffe5f 	.word	0xfffffe5f

08004e50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b094      	sub	sp, #80	; 0x50
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	1dbb      	adds	r3, r7, #6
 8004e5c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	1dba      	adds	r2, r7, #6
 8004e68:	215c      	movs	r1, #92	; 0x5c
 8004e6a:	8812      	ldrh	r2, [r2, #0]
 8004e6c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	1dba      	adds	r2, r7, #6
 8004e72:	215e      	movs	r1, #94	; 0x5e
 8004e74:	8812      	ldrh	r2, [r2, #0]
 8004e76:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	2380      	movs	r3, #128	; 0x80
 8004e84:	015b      	lsls	r3, r3, #5
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d10d      	bne.n	8004ea6 <UART_Start_Receive_IT+0x56>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d104      	bne.n	8004e9c <UART_Start_Receive_IT+0x4c>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2260      	movs	r2, #96	; 0x60
 8004e96:	496f      	ldr	r1, [pc, #444]	; (8005054 <UART_Start_Receive_IT+0x204>)
 8004e98:	5299      	strh	r1, [r3, r2]
 8004e9a:	e02e      	b.n	8004efa <UART_Start_Receive_IT+0xaa>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2260      	movs	r2, #96	; 0x60
 8004ea0:	21ff      	movs	r1, #255	; 0xff
 8004ea2:	5299      	strh	r1, [r3, r2]
 8004ea4:	e029      	b.n	8004efa <UART_Start_Receive_IT+0xaa>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10d      	bne.n	8004eca <UART_Start_Receive_IT+0x7a>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d104      	bne.n	8004ec0 <UART_Start_Receive_IT+0x70>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2260      	movs	r2, #96	; 0x60
 8004eba:	21ff      	movs	r1, #255	; 0xff
 8004ebc:	5299      	strh	r1, [r3, r2]
 8004ebe:	e01c      	b.n	8004efa <UART_Start_Receive_IT+0xaa>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2260      	movs	r2, #96	; 0x60
 8004ec4:	217f      	movs	r1, #127	; 0x7f
 8004ec6:	5299      	strh	r1, [r3, r2]
 8004ec8:	e017      	b.n	8004efa <UART_Start_Receive_IT+0xaa>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	2380      	movs	r3, #128	; 0x80
 8004ed0:	055b      	lsls	r3, r3, #21
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d10d      	bne.n	8004ef2 <UART_Start_Receive_IT+0xa2>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d104      	bne.n	8004ee8 <UART_Start_Receive_IT+0x98>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2260      	movs	r2, #96	; 0x60
 8004ee2:	217f      	movs	r1, #127	; 0x7f
 8004ee4:	5299      	strh	r1, [r3, r2]
 8004ee6:	e008      	b.n	8004efa <UART_Start_Receive_IT+0xaa>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2260      	movs	r2, #96	; 0x60
 8004eec:	213f      	movs	r1, #63	; 0x3f
 8004eee:	5299      	strh	r1, [r3, r2]
 8004ef0:	e003      	b.n	8004efa <UART_Start_Receive_IT+0xaa>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2260      	movs	r2, #96	; 0x60
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	228c      	movs	r2, #140	; 0x8c
 8004efe:	2100      	movs	r1, #0
 8004f00:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2288      	movs	r2, #136	; 0x88
 8004f06:	2122      	movs	r1, #34	; 0x22
 8004f08:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f0e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f14:	2301      	movs	r3, #1
 8004f16:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1a:	f383 8810 	msr	PRIMASK, r3
}
 8004f1e:	46c0      	nop			; (mov r8, r8)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689a      	ldr	r2, [r3, #8]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	609a      	str	r2, [r3, #8]
 8004f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f32:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f36:	f383 8810 	msr	PRIMASK, r3
}
 8004f3a:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004f40:	2380      	movs	r3, #128	; 0x80
 8004f42:	059b      	lsls	r3, r3, #22
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d150      	bne.n	8004fea <UART_Start_Receive_IT+0x19a>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2268      	movs	r2, #104	; 0x68
 8004f4c:	5a9b      	ldrh	r3, [r3, r2]
 8004f4e:	1dba      	adds	r2, r7, #6
 8004f50:	8812      	ldrh	r2, [r2, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d349      	bcc.n	8004fea <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	689a      	ldr	r2, [r3, #8]
 8004f5a:	2380      	movs	r3, #128	; 0x80
 8004f5c:	015b      	lsls	r3, r3, #5
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d107      	bne.n	8004f72 <UART_Start_Receive_IT+0x122>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d103      	bne.n	8004f72 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	4a3a      	ldr	r2, [pc, #232]	; (8005058 <UART_Start_Receive_IT+0x208>)
 8004f6e:	671a      	str	r2, [r3, #112]	; 0x70
 8004f70:	e002      	b.n	8004f78 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4a39      	ldr	r2, [pc, #228]	; (800505c <UART_Start_Receive_IT+0x20c>)
 8004f76:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2280      	movs	r2, #128	; 0x80
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f80:	f3ef 8310 	mrs	r3, PRIMASK
 8004f84:	61fb      	str	r3, [r7, #28]
  return(result);
 8004f86:	69fb      	ldr	r3, [r7, #28]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f88:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	f383 8810 	msr	PRIMASK, r3
}
 8004f94:	46c0      	nop			; (mov r8, r8)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2180      	movs	r1, #128	; 0x80
 8004fa2:	0049      	lsls	r1, r1, #1
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004faa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	f383 8810 	msr	PRIMASK, r3
}
 8004fb2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8004fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004fbc:	647b      	str	r3, [r7, #68]	; 0x44
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc4:	f383 8810 	msr	PRIMASK, r3
}
 8004fc8:	46c0      	nop			; (mov r8, r8)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2180      	movs	r1, #128	; 0x80
 8004fd6:	0549      	lsls	r1, r1, #21
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	609a      	str	r2, [r3, #8]
 8004fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fde:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe2:	f383 8810 	msr	PRIMASK, r3
}
 8004fe6:	46c0      	nop			; (mov r8, r8)
 8004fe8:	e02e      	b.n	8005048 <UART_Start_Receive_IT+0x1f8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	689a      	ldr	r2, [r3, #8]
 8004fee:	2380      	movs	r3, #128	; 0x80
 8004ff0:	015b      	lsls	r3, r3, #5
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d107      	bne.n	8005006 <UART_Start_Receive_IT+0x1b6>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d103      	bne.n	8005006 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	4a17      	ldr	r2, [pc, #92]	; (8005060 <UART_Start_Receive_IT+0x210>)
 8005002:	671a      	str	r2, [r3, #112]	; 0x70
 8005004:	e002      	b.n	800500c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4a16      	ldr	r2, [pc, #88]	; (8005064 <UART_Start_Receive_IT+0x214>)
 800500a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2280      	movs	r2, #128	; 0x80
 8005010:	2100      	movs	r1, #0
 8005012:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005014:	f3ef 8310 	mrs	r3, PRIMASK
 8005018:	613b      	str	r3, [r7, #16]
  return(result);
 800501a:	693b      	ldr	r3, [r7, #16]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800501c:	643b      	str	r3, [r7, #64]	; 0x40
 800501e:	2301      	movs	r3, #1
 8005020:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f383 8810 	msr	PRIMASK, r3
}
 8005028:	46c0      	nop			; (mov r8, r8)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2190      	movs	r1, #144	; 0x90
 8005036:	0049      	lsls	r1, r1, #1
 8005038:	430a      	orrs	r2, r1
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800503e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	f383 8810 	msr	PRIMASK, r3
}
 8005046:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	0018      	movs	r0, r3
 800504c:	46bd      	mov	sp, r7
 800504e:	b014      	add	sp, #80	; 0x50
 8005050:	bd80      	pop	{r7, pc}
 8005052:	46c0      	nop			; (mov r8, r8)
 8005054:	000001ff 	.word	0x000001ff
 8005058:	08005779 	.word	0x08005779
 800505c:	08005495 	.word	0x08005495
 8005060:	08005329 	.word	0x08005329
 8005064:	080051bd 	.word	0x080051bd

08005068 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08e      	sub	sp, #56	; 0x38
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005070:	f3ef 8310 	mrs	r3, PRIMASK
 8005074:	617b      	str	r3, [r7, #20]
  return(result);
 8005076:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005078:	637b      	str	r3, [r7, #52]	; 0x34
 800507a:	2301      	movs	r3, #1
 800507c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	f383 8810 	msr	PRIMASK, r3
}
 8005084:	46c0      	nop			; (mov r8, r8)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4926      	ldr	r1, [pc, #152]	; (800512c <UART_EndRxTransfer+0xc4>)
 8005092:	400a      	ands	r2, r1
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005098:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	f383 8810 	msr	PRIMASK, r3
}
 80050a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050a2:	f3ef 8310 	mrs	r3, PRIMASK
 80050a6:	623b      	str	r3, [r7, #32]
  return(result);
 80050a8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050aa:	633b      	str	r3, [r7, #48]	; 0x30
 80050ac:	2301      	movs	r3, #1
 80050ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	f383 8810 	msr	PRIMASK, r3
}
 80050b6:	46c0      	nop			; (mov r8, r8)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689a      	ldr	r2, [r3, #8]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	491b      	ldr	r1, [pc, #108]	; (8005130 <UART_EndRxTransfer+0xc8>)
 80050c4:	400a      	ands	r2, r1
 80050c6:	609a      	str	r2, [r3, #8]
 80050c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ce:	f383 8810 	msr	PRIMASK, r3
}
 80050d2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d118      	bne.n	800510e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050dc:	f3ef 8310 	mrs	r3, PRIMASK
 80050e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80050e2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050e6:	2301      	movs	r3, #1
 80050e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f383 8810 	msr	PRIMASK, r3
}
 80050f0:	46c0      	nop			; (mov r8, r8)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2110      	movs	r1, #16
 80050fe:	438a      	bics	r2, r1
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005104:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f383 8810 	msr	PRIMASK, r3
}
 800510c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2288      	movs	r2, #136	; 0x88
 8005112:	2120      	movs	r1, #32
 8005114:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005122:	46c0      	nop			; (mov r8, r8)
 8005124:	46bd      	mov	sp, r7
 8005126:	b00e      	add	sp, #56	; 0x38
 8005128:	bd80      	pop	{r7, pc}
 800512a:	46c0      	nop			; (mov r8, r8)
 800512c:	fffffedf 	.word	0xfffffedf
 8005130:	effffffe 	.word	0xeffffffe

08005134 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005140:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	225e      	movs	r2, #94	; 0x5e
 8005146:	2100      	movs	r1, #0
 8005148:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2256      	movs	r2, #86	; 0x56
 800514e:	2100      	movs	r1, #0
 8005150:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	0018      	movs	r0, r3
 8005156:	f7ff f9c3 	bl	80044e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800515a:	46c0      	nop			; (mov r8, r8)
 800515c:	46bd      	mov	sp, r7
 800515e:	b004      	add	sp, #16
 8005160:	bd80      	pop	{r7, pc}

08005162 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b086      	sub	sp, #24
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800516a:	f3ef 8310 	mrs	r3, PRIMASK
 800516e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005170:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	2301      	movs	r3, #1
 8005176:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f383 8810 	msr	PRIMASK, r3
}
 800517e:	46c0      	nop			; (mov r8, r8)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2140      	movs	r1, #64	; 0x40
 800518c:	438a      	bics	r2, r1
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f383 8810 	msr	PRIMASK, r3
}
 800519a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2284      	movs	r2, #132	; 0x84
 80051a0:	2120      	movs	r1, #32
 80051a2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	0018      	movs	r0, r3
 80051ae:	f7ff f987 	bl	80044c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051b2:	46c0      	nop			; (mov r8, r8)
 80051b4:	46bd      	mov	sp, r7
 80051b6:	b006      	add	sp, #24
 80051b8:	bd80      	pop	{r7, pc}
	...

080051bc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b090      	sub	sp, #64	; 0x40
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80051c4:	203e      	movs	r0, #62	; 0x3e
 80051c6:	183b      	adds	r3, r7, r0
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	2160      	movs	r1, #96	; 0x60
 80051cc:	5a52      	ldrh	r2, [r2, r1]
 80051ce:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2288      	movs	r2, #136	; 0x88
 80051d4:	589b      	ldr	r3, [r3, r2]
 80051d6:	2b22      	cmp	r3, #34	; 0x22
 80051d8:	d000      	beq.n	80051dc <UART_RxISR_8BIT+0x20>
 80051da:	e097      	b.n	800530c <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051e2:	213c      	movs	r1, #60	; 0x3c
 80051e4:	187b      	adds	r3, r7, r1
 80051e6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051e8:	187b      	adds	r3, r7, r1
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	183b      	adds	r3, r7, r0
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	b2d9      	uxtb	r1, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f8:	400a      	ands	r2, r1
 80051fa:	b2d2      	uxtb	r2, r2
 80051fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	225e      	movs	r2, #94	; 0x5e
 800520c:	5a9b      	ldrh	r3, [r3, r2]
 800520e:	b29b      	uxth	r3, r3
 8005210:	3b01      	subs	r3, #1
 8005212:	b299      	uxth	r1, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	225e      	movs	r2, #94	; 0x5e
 8005218:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	225e      	movs	r2, #94	; 0x5e
 800521e:	5a9b      	ldrh	r3, [r3, r2]
 8005220:	b29b      	uxth	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d000      	beq.n	8005228 <UART_RxISR_8BIT+0x6c>
 8005226:	e079      	b.n	800531c <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005228:	f3ef 8310 	mrs	r3, PRIMASK
 800522c:	61bb      	str	r3, [r7, #24]
  return(result);
 800522e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005230:	63bb      	str	r3, [r7, #56]	; 0x38
 8005232:	2301      	movs	r3, #1
 8005234:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	f383 8810 	msr	PRIMASK, r3
}
 800523c:	46c0      	nop			; (mov r8, r8)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4936      	ldr	r1, [pc, #216]	; (8005324 <UART_RxISR_8BIT+0x168>)
 800524a:	400a      	ands	r2, r1
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005250:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	f383 8810 	msr	PRIMASK, r3
}
 8005258:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800525a:	f3ef 8310 	mrs	r3, PRIMASK
 800525e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005262:	637b      	str	r3, [r7, #52]	; 0x34
 8005264:	2301      	movs	r3, #1
 8005266:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526a:	f383 8810 	msr	PRIMASK, r3
}
 800526e:	46c0      	nop			; (mov r8, r8)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2101      	movs	r1, #1
 800527c:	438a      	bics	r2, r1
 800527e:	609a      	str	r2, [r3, #8]
 8005280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005282:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005286:	f383 8810 	msr	PRIMASK, r3
}
 800528a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2288      	movs	r2, #136	; 0x88
 8005290:	2120      	movs	r1, #32
 8005292:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d12f      	bne.n	8005302 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052a8:	f3ef 8310 	mrs	r3, PRIMASK
 80052ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80052ae:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052b0:	633b      	str	r3, [r7, #48]	; 0x30
 80052b2:	2301      	movs	r3, #1
 80052b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f383 8810 	msr	PRIMASK, r3
}
 80052bc:	46c0      	nop			; (mov r8, r8)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2110      	movs	r1, #16
 80052ca:	438a      	bics	r2, r1
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f383 8810 	msr	PRIMASK, r3
}
 80052d8:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	2210      	movs	r2, #16
 80052e2:	4013      	ands	r3, r2
 80052e4:	2b10      	cmp	r3, #16
 80052e6:	d103      	bne.n	80052f0 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2210      	movs	r2, #16
 80052ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	225c      	movs	r2, #92	; 0x5c
 80052f4:	5a9a      	ldrh	r2, [r3, r2]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	0011      	movs	r1, r2
 80052fa:	0018      	movs	r0, r3
 80052fc:	f7ff f8f8 	bl	80044f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005300:	e00c      	b.n	800531c <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	0018      	movs	r0, r3
 8005306:	f7ff f8e3 	bl	80044d0 <HAL_UART_RxCpltCallback>
}
 800530a:	e007      	b.n	800531c <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	699a      	ldr	r2, [r3, #24]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2108      	movs	r1, #8
 8005318:	430a      	orrs	r2, r1
 800531a:	619a      	str	r2, [r3, #24]
}
 800531c:	46c0      	nop			; (mov r8, r8)
 800531e:	46bd      	mov	sp, r7
 8005320:	b010      	add	sp, #64	; 0x40
 8005322:	bd80      	pop	{r7, pc}
 8005324:	fffffedf 	.word	0xfffffedf

08005328 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b090      	sub	sp, #64	; 0x40
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005330:	203e      	movs	r0, #62	; 0x3e
 8005332:	183b      	adds	r3, r7, r0
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	2160      	movs	r1, #96	; 0x60
 8005338:	5a52      	ldrh	r2, [r2, r1]
 800533a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2288      	movs	r2, #136	; 0x88
 8005340:	589b      	ldr	r3, [r3, r2]
 8005342:	2b22      	cmp	r3, #34	; 0x22
 8005344:	d000      	beq.n	8005348 <UART_RxISR_16BIT+0x20>
 8005346:	e097      	b.n	8005478 <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800534e:	213c      	movs	r1, #60	; 0x3c
 8005350:	187b      	adds	r3, r7, r1
 8005352:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005358:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800535a:	187b      	adds	r3, r7, r1
 800535c:	183a      	adds	r2, r7, r0
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	8812      	ldrh	r2, [r2, #0]
 8005362:	4013      	ands	r3, r2
 8005364:	b29a      	uxth	r2, r3
 8005366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005368:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536e:	1c9a      	adds	r2, r3, #2
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	225e      	movs	r2, #94	; 0x5e
 8005378:	5a9b      	ldrh	r3, [r3, r2]
 800537a:	b29b      	uxth	r3, r3
 800537c:	3b01      	subs	r3, #1
 800537e:	b299      	uxth	r1, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	225e      	movs	r2, #94	; 0x5e
 8005384:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	225e      	movs	r2, #94	; 0x5e
 800538a:	5a9b      	ldrh	r3, [r3, r2]
 800538c:	b29b      	uxth	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d000      	beq.n	8005394 <UART_RxISR_16BIT+0x6c>
 8005392:	e079      	b.n	8005488 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005394:	f3ef 8310 	mrs	r3, PRIMASK
 8005398:	617b      	str	r3, [r7, #20]
  return(result);
 800539a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800539c:	637b      	str	r3, [r7, #52]	; 0x34
 800539e:	2301      	movs	r3, #1
 80053a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	f383 8810 	msr	PRIMASK, r3
}
 80053a8:	46c0      	nop			; (mov r8, r8)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4936      	ldr	r1, [pc, #216]	; (8005490 <UART_RxISR_16BIT+0x168>)
 80053b6:	400a      	ands	r2, r1
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	f383 8810 	msr	PRIMASK, r3
}
 80053c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053c6:	f3ef 8310 	mrs	r3, PRIMASK
 80053ca:	623b      	str	r3, [r7, #32]
  return(result);
 80053cc:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ce:	633b      	str	r3, [r7, #48]	; 0x30
 80053d0:	2301      	movs	r3, #1
 80053d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	f383 8810 	msr	PRIMASK, r3
}
 80053da:	46c0      	nop			; (mov r8, r8)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2101      	movs	r1, #1
 80053e8:	438a      	bics	r2, r1
 80053ea:	609a      	str	r2, [r3, #8]
 80053ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f2:	f383 8810 	msr	PRIMASK, r3
}
 80053f6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2288      	movs	r2, #136	; 0x88
 80053fc:	2120      	movs	r1, #32
 80053fe:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800540a:	2b01      	cmp	r3, #1
 800540c:	d12f      	bne.n	800546e <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005414:	f3ef 8310 	mrs	r3, PRIMASK
 8005418:	60bb      	str	r3, [r7, #8]
  return(result);
 800541a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800541c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800541e:	2301      	movs	r3, #1
 8005420:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f383 8810 	msr	PRIMASK, r3
}
 8005428:	46c0      	nop			; (mov r8, r8)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2110      	movs	r1, #16
 8005436:	438a      	bics	r2, r1
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	f383 8810 	msr	PRIMASK, r3
}
 8005444:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	2210      	movs	r2, #16
 800544e:	4013      	ands	r3, r2
 8005450:	2b10      	cmp	r3, #16
 8005452:	d103      	bne.n	800545c <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2210      	movs	r2, #16
 800545a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	225c      	movs	r2, #92	; 0x5c
 8005460:	5a9a      	ldrh	r2, [r3, r2]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	0011      	movs	r1, r2
 8005466:	0018      	movs	r0, r3
 8005468:	f7ff f842 	bl	80044f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800546c:	e00c      	b.n	8005488 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	0018      	movs	r0, r3
 8005472:	f7ff f82d 	bl	80044d0 <HAL_UART_RxCpltCallback>
}
 8005476:	e007      	b.n	8005488 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699a      	ldr	r2, [r3, #24]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2108      	movs	r1, #8
 8005484:	430a      	orrs	r2, r1
 8005486:	619a      	str	r2, [r3, #24]
}
 8005488:	46c0      	nop			; (mov r8, r8)
 800548a:	46bd      	mov	sp, r7
 800548c:	b010      	add	sp, #64	; 0x40
 800548e:	bd80      	pop	{r7, pc}
 8005490:	fffffedf 	.word	0xfffffedf

08005494 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b09c      	sub	sp, #112	; 0x70
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800549c:	236a      	movs	r3, #106	; 0x6a
 800549e:	18fb      	adds	r3, r7, r3
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	2160      	movs	r1, #96	; 0x60
 80054a4:	5a52      	ldrh	r2, [r2, r1]
 80054a6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2288      	movs	r2, #136	; 0x88
 80054c4:	589b      	ldr	r3, [r3, r2]
 80054c6:	2b22      	cmp	r3, #34	; 0x22
 80054c8:	d000      	beq.n	80054cc <UART_RxISR_8BIT_FIFOEN+0x38>
 80054ca:	e141      	b.n	8005750 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80054cc:	235e      	movs	r3, #94	; 0x5e
 80054ce:	18fb      	adds	r3, r7, r3
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	2168      	movs	r1, #104	; 0x68
 80054d4:	5a52      	ldrh	r2, [r2, r1]
 80054d6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80054d8:	e0e8      	b.n	80056ac <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054e0:	215c      	movs	r1, #92	; 0x5c
 80054e2:	187b      	adds	r3, r7, r1
 80054e4:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80054e6:	187b      	adds	r3, r7, r1
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	236a      	movs	r3, #106	; 0x6a
 80054ee:	18fb      	adds	r3, r7, r3
 80054f0:	881b      	ldrh	r3, [r3, #0]
 80054f2:	b2d9      	uxtb	r1, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f8:	400a      	ands	r2, r1
 80054fa:	b2d2      	uxtb	r2, r2
 80054fc:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005502:	1c5a      	adds	r2, r3, #1
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	225e      	movs	r2, #94	; 0x5e
 800550c:	5a9b      	ldrh	r3, [r3, r2]
 800550e:	b29b      	uxth	r3, r3
 8005510:	3b01      	subs	r3, #1
 8005512:	b299      	uxth	r1, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	225e      	movs	r2, #94	; 0x5e
 8005518:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	69db      	ldr	r3, [r3, #28]
 8005520:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005524:	2207      	movs	r2, #7
 8005526:	4013      	ands	r3, r2
 8005528:	d049      	beq.n	80055be <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800552a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800552c:	2201      	movs	r2, #1
 800552e:	4013      	ands	r3, r2
 8005530:	d010      	beq.n	8005554 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8005532:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005534:	2380      	movs	r3, #128	; 0x80
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	4013      	ands	r3, r2
 800553a:	d00b      	beq.n	8005554 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2201      	movs	r2, #1
 8005542:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	228c      	movs	r2, #140	; 0x8c
 8005548:	589b      	ldr	r3, [r3, r2]
 800554a:	2201      	movs	r2, #1
 800554c:	431a      	orrs	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	218c      	movs	r1, #140	; 0x8c
 8005552:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005556:	2202      	movs	r2, #2
 8005558:	4013      	ands	r3, r2
 800555a:	d00f      	beq.n	800557c <UART_RxISR_8BIT_FIFOEN+0xe8>
 800555c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800555e:	2201      	movs	r2, #1
 8005560:	4013      	ands	r3, r2
 8005562:	d00b      	beq.n	800557c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2202      	movs	r2, #2
 800556a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	228c      	movs	r2, #140	; 0x8c
 8005570:	589b      	ldr	r3, [r3, r2]
 8005572:	2204      	movs	r2, #4
 8005574:	431a      	orrs	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	218c      	movs	r1, #140	; 0x8c
 800557a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800557c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800557e:	2204      	movs	r2, #4
 8005580:	4013      	ands	r3, r2
 8005582:	d00f      	beq.n	80055a4 <UART_RxISR_8BIT_FIFOEN+0x110>
 8005584:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005586:	2201      	movs	r2, #1
 8005588:	4013      	ands	r3, r2
 800558a:	d00b      	beq.n	80055a4 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2204      	movs	r2, #4
 8005592:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	228c      	movs	r2, #140	; 0x8c
 8005598:	589b      	ldr	r3, [r3, r2]
 800559a:	2202      	movs	r2, #2
 800559c:	431a      	orrs	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	218c      	movs	r1, #140	; 0x8c
 80055a2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	228c      	movs	r2, #140	; 0x8c
 80055a8:	589b      	ldr	r3, [r3, r2]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d007      	beq.n	80055be <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	0018      	movs	r0, r3
 80055b2:	f7fe ff95 	bl	80044e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	228c      	movs	r2, #140	; 0x8c
 80055ba:	2100      	movs	r1, #0
 80055bc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	225e      	movs	r2, #94	; 0x5e
 80055c2:	5a9b      	ldrh	r3, [r3, r2]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d170      	bne.n	80056ac <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ca:	f3ef 8310 	mrs	r3, PRIMASK
 80055ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80055d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80055d4:	2301      	movs	r3, #1
 80055d6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055da:	f383 8810 	msr	PRIMASK, r3
}
 80055de:	46c0      	nop			; (mov r8, r8)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	495f      	ldr	r1, [pc, #380]	; (8005768 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 80055ec:	400a      	ands	r2, r1
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055f2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f6:	f383 8810 	msr	PRIMASK, r3
}
 80055fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005600:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8005602:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005604:	657b      	str	r3, [r7, #84]	; 0x54
 8005606:	2301      	movs	r3, #1
 8005608:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800560a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800560c:	f383 8810 	msr	PRIMASK, r3
}
 8005610:	46c0      	nop			; (mov r8, r8)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4953      	ldr	r1, [pc, #332]	; (800576c <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 800561e:	400a      	ands	r2, r1
 8005620:	609a      	str	r2, [r3, #8]
 8005622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005624:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005628:	f383 8810 	msr	PRIMASK, r3
}
 800562c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2288      	movs	r2, #136	; 0x88
 8005632:	2120      	movs	r1, #32
 8005634:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005640:	2b01      	cmp	r3, #1
 8005642:	d12f      	bne.n	80056a4 <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800564a:	f3ef 8310 	mrs	r3, PRIMASK
 800564e:	623b      	str	r3, [r7, #32]
  return(result);
 8005650:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005652:	653b      	str	r3, [r7, #80]	; 0x50
 8005654:	2301      	movs	r3, #1
 8005656:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	f383 8810 	msr	PRIMASK, r3
}
 800565e:	46c0      	nop			; (mov r8, r8)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2110      	movs	r1, #16
 800566c:	438a      	bics	r2, r1
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005672:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005676:	f383 8810 	msr	PRIMASK, r3
}
 800567a:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	2210      	movs	r2, #16
 8005684:	4013      	ands	r3, r2
 8005686:	2b10      	cmp	r3, #16
 8005688:	d103      	bne.n	8005692 <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2210      	movs	r2, #16
 8005690:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	225c      	movs	r2, #92	; 0x5c
 8005696:	5a9a      	ldrh	r2, [r3, r2]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	0011      	movs	r1, r2
 800569c:	0018      	movs	r0, r3
 800569e:	f7fe ff27 	bl	80044f0 <HAL_UARTEx_RxEventCallback>
 80056a2:	e003      	b.n	80056ac <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	0018      	movs	r0, r3
 80056a8:	f7fe ff12 	bl	80044d0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80056ac:	235e      	movs	r3, #94	; 0x5e
 80056ae:	18fb      	adds	r3, r7, r3
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d004      	beq.n	80056c0 <UART_RxISR_8BIT_FIFOEN+0x22c>
 80056b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b8:	2220      	movs	r2, #32
 80056ba:	4013      	ands	r3, r2
 80056bc:	d000      	beq.n	80056c0 <UART_RxISR_8BIT_FIFOEN+0x22c>
 80056be:	e70c      	b.n	80054da <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80056c0:	204e      	movs	r0, #78	; 0x4e
 80056c2:	183b      	adds	r3, r7, r0
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	215e      	movs	r1, #94	; 0x5e
 80056c8:	5a52      	ldrh	r2, [r2, r1]
 80056ca:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80056cc:	0001      	movs	r1, r0
 80056ce:	187b      	adds	r3, r7, r1
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d044      	beq.n	8005760 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2268      	movs	r2, #104	; 0x68
 80056da:	5a9b      	ldrh	r3, [r3, r2]
 80056dc:	187a      	adds	r2, r7, r1
 80056de:	8812      	ldrh	r2, [r2, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d23d      	bcs.n	8005760 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056e4:	f3ef 8310 	mrs	r3, PRIMASK
 80056e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80056ea:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80056ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80056ee:	2301      	movs	r3, #1
 80056f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f383 8810 	msr	PRIMASK, r3
}
 80056f8:	46c0      	nop			; (mov r8, r8)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	491a      	ldr	r1, [pc, #104]	; (8005770 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8005706:	400a      	ands	r2, r1
 8005708:	609a      	str	r2, [r3, #8]
 800570a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800570c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f383 8810 	msr	PRIMASK, r3
}
 8005714:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a16      	ldr	r2, [pc, #88]	; (8005774 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800571a:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800571c:	f3ef 8310 	mrs	r3, PRIMASK
 8005720:	617b      	str	r3, [r7, #20]
  return(result);
 8005722:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005724:	647b      	str	r3, [r7, #68]	; 0x44
 8005726:	2301      	movs	r3, #1
 8005728:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	f383 8810 	msr	PRIMASK, r3
}
 8005730:	46c0      	nop			; (mov r8, r8)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2120      	movs	r1, #32
 800573e:	430a      	orrs	r2, r1
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005744:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	f383 8810 	msr	PRIMASK, r3
}
 800574c:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800574e:	e007      	b.n	8005760 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699a      	ldr	r2, [r3, #24]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2108      	movs	r1, #8
 800575c:	430a      	orrs	r2, r1
 800575e:	619a      	str	r2, [r3, #24]
}
 8005760:	46c0      	nop			; (mov r8, r8)
 8005762:	46bd      	mov	sp, r7
 8005764:	b01c      	add	sp, #112	; 0x70
 8005766:	bd80      	pop	{r7, pc}
 8005768:	fffffeff 	.word	0xfffffeff
 800576c:	effffffe 	.word	0xeffffffe
 8005770:	efffffff 	.word	0xefffffff
 8005774:	080051bd 	.word	0x080051bd

08005778 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b09e      	sub	sp, #120	; 0x78
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005780:	2372      	movs	r3, #114	; 0x72
 8005782:	18fb      	adds	r3, r7, r3
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	2160      	movs	r1, #96	; 0x60
 8005788:	5a52      	ldrh	r2, [r2, r1]
 800578a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2288      	movs	r2, #136	; 0x88
 80057a8:	589b      	ldr	r3, [r3, r2]
 80057aa:	2b22      	cmp	r3, #34	; 0x22
 80057ac:	d000      	beq.n	80057b0 <UART_RxISR_16BIT_FIFOEN+0x38>
 80057ae:	e141      	b.n	8005a34 <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80057b0:	2366      	movs	r3, #102	; 0x66
 80057b2:	18fb      	adds	r3, r7, r3
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	2168      	movs	r1, #104	; 0x68
 80057b8:	5a52      	ldrh	r2, [r2, r1]
 80057ba:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80057bc:	e0e8      	b.n	8005990 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057c4:	2164      	movs	r1, #100	; 0x64
 80057c6:	187b      	adds	r3, r7, r1
 80057c8:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ce:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 80057d0:	187b      	adds	r3, r7, r1
 80057d2:	2272      	movs	r2, #114	; 0x72
 80057d4:	18ba      	adds	r2, r7, r2
 80057d6:	881b      	ldrh	r3, [r3, #0]
 80057d8:	8812      	ldrh	r2, [r2, #0]
 80057da:	4013      	ands	r3, r2
 80057dc:	b29a      	uxth	r2, r3
 80057de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e6:	1c9a      	adds	r2, r3, #2
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	225e      	movs	r2, #94	; 0x5e
 80057f0:	5a9b      	ldrh	r3, [r3, r2]
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	3b01      	subs	r3, #1
 80057f6:	b299      	uxth	r1, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	225e      	movs	r2, #94	; 0x5e
 80057fc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005806:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005808:	2207      	movs	r2, #7
 800580a:	4013      	ands	r3, r2
 800580c:	d049      	beq.n	80058a2 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800580e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005810:	2201      	movs	r2, #1
 8005812:	4013      	ands	r3, r2
 8005814:	d010      	beq.n	8005838 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8005816:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005818:	2380      	movs	r3, #128	; 0x80
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	4013      	ands	r3, r2
 800581e:	d00b      	beq.n	8005838 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2201      	movs	r2, #1
 8005826:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	228c      	movs	r2, #140	; 0x8c
 800582c:	589b      	ldr	r3, [r3, r2]
 800582e:	2201      	movs	r2, #1
 8005830:	431a      	orrs	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	218c      	movs	r1, #140	; 0x8c
 8005836:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005838:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800583a:	2202      	movs	r2, #2
 800583c:	4013      	ands	r3, r2
 800583e:	d00f      	beq.n	8005860 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8005840:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005842:	2201      	movs	r2, #1
 8005844:	4013      	ands	r3, r2
 8005846:	d00b      	beq.n	8005860 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2202      	movs	r2, #2
 800584e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	228c      	movs	r2, #140	; 0x8c
 8005854:	589b      	ldr	r3, [r3, r2]
 8005856:	2204      	movs	r2, #4
 8005858:	431a      	orrs	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	218c      	movs	r1, #140	; 0x8c
 800585e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005860:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005862:	2204      	movs	r2, #4
 8005864:	4013      	ands	r3, r2
 8005866:	d00f      	beq.n	8005888 <UART_RxISR_16BIT_FIFOEN+0x110>
 8005868:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800586a:	2201      	movs	r2, #1
 800586c:	4013      	ands	r3, r2
 800586e:	d00b      	beq.n	8005888 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2204      	movs	r2, #4
 8005876:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	228c      	movs	r2, #140	; 0x8c
 800587c:	589b      	ldr	r3, [r3, r2]
 800587e:	2202      	movs	r2, #2
 8005880:	431a      	orrs	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	218c      	movs	r1, #140	; 0x8c
 8005886:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	228c      	movs	r2, #140	; 0x8c
 800588c:	589b      	ldr	r3, [r3, r2]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d007      	beq.n	80058a2 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	0018      	movs	r0, r3
 8005896:	f7fe fe23 	bl	80044e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	228c      	movs	r2, #140	; 0x8c
 800589e:	2100      	movs	r1, #0
 80058a0:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	225e      	movs	r2, #94	; 0x5e
 80058a6:	5a9b      	ldrh	r3, [r3, r2]
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d170      	bne.n	8005990 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ae:	f3ef 8310 	mrs	r3, PRIMASK
 80058b2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80058b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058b8:	2301      	movs	r3, #1
 80058ba:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058be:	f383 8810 	msr	PRIMASK, r3
}
 80058c2:	46c0      	nop			; (mov r8, r8)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	495f      	ldr	r1, [pc, #380]	; (8005a4c <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 80058d0:	400a      	ands	r2, r1
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058d6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058da:	f383 8810 	msr	PRIMASK, r3
}
 80058de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058e0:	f3ef 8310 	mrs	r3, PRIMASK
 80058e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80058e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80058ea:	2301      	movs	r3, #1
 80058ec:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058f0:	f383 8810 	msr	PRIMASK, r3
}
 80058f4:	46c0      	nop			; (mov r8, r8)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4953      	ldr	r1, [pc, #332]	; (8005a50 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 8005902:	400a      	ands	r2, r1
 8005904:	609a      	str	r2, [r3, #8]
 8005906:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005908:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800590a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800590c:	f383 8810 	msr	PRIMASK, r3
}
 8005910:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2288      	movs	r2, #136	; 0x88
 8005916:	2120      	movs	r1, #32
 8005918:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005924:	2b01      	cmp	r3, #1
 8005926:	d12f      	bne.n	8005988 <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800592e:	f3ef 8310 	mrs	r3, PRIMASK
 8005932:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005936:	657b      	str	r3, [r7, #84]	; 0x54
 8005938:	2301      	movs	r3, #1
 800593a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800593c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593e:	f383 8810 	msr	PRIMASK, r3
}
 8005942:	46c0      	nop			; (mov r8, r8)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2110      	movs	r1, #16
 8005950:	438a      	bics	r2, r1
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005956:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595a:	f383 8810 	msr	PRIMASK, r3
}
 800595e:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	2210      	movs	r2, #16
 8005968:	4013      	ands	r3, r2
 800596a:	2b10      	cmp	r3, #16
 800596c:	d103      	bne.n	8005976 <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2210      	movs	r2, #16
 8005974:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	225c      	movs	r2, #92	; 0x5c
 800597a:	5a9a      	ldrh	r2, [r3, r2]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	0011      	movs	r1, r2
 8005980:	0018      	movs	r0, r3
 8005982:	f7fe fdb5 	bl	80044f0 <HAL_UARTEx_RxEventCallback>
 8005986:	e003      	b.n	8005990 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	0018      	movs	r0, r3
 800598c:	f7fe fda0 	bl	80044d0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005990:	2366      	movs	r3, #102	; 0x66
 8005992:	18fb      	adds	r3, r7, r3
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d004      	beq.n	80059a4 <UART_RxISR_16BIT_FIFOEN+0x22c>
 800599a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800599c:	2220      	movs	r2, #32
 800599e:	4013      	ands	r3, r2
 80059a0:	d000      	beq.n	80059a4 <UART_RxISR_16BIT_FIFOEN+0x22c>
 80059a2:	e70c      	b.n	80057be <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80059a4:	2052      	movs	r0, #82	; 0x52
 80059a6:	183b      	adds	r3, r7, r0
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	215e      	movs	r1, #94	; 0x5e
 80059ac:	5a52      	ldrh	r2, [r2, r1]
 80059ae:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80059b0:	0001      	movs	r1, r0
 80059b2:	187b      	adds	r3, r7, r1
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d044      	beq.n	8005a44 <UART_RxISR_16BIT_FIFOEN+0x2cc>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2268      	movs	r2, #104	; 0x68
 80059be:	5a9b      	ldrh	r3, [r3, r2]
 80059c0:	187a      	adds	r2, r7, r1
 80059c2:	8812      	ldrh	r2, [r2, #0]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d23d      	bcs.n	8005a44 <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059c8:	f3ef 8310 	mrs	r3, PRIMASK
 80059cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80059ce:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80059d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059d2:	2301      	movs	r3, #1
 80059d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	f383 8810 	msr	PRIMASK, r3
}
 80059dc:	46c0      	nop			; (mov r8, r8)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	491a      	ldr	r1, [pc, #104]	; (8005a54 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 80059ea:	400a      	ands	r2, r1
 80059ec:	609a      	str	r2, [r3, #8]
 80059ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f383 8810 	msr	PRIMASK, r3
}
 80059f8:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a16      	ldr	r2, [pc, #88]	; (8005a58 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80059fe:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a00:	f3ef 8310 	mrs	r3, PRIMASK
 8005a04:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a06:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005a08:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	f383 8810 	msr	PRIMASK, r3
}
 8005a14:	46c0      	nop			; (mov r8, r8)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2120      	movs	r1, #32
 8005a22:	430a      	orrs	r2, r1
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a28:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	f383 8810 	msr	PRIMASK, r3
}
 8005a30:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a32:	e007      	b.n	8005a44 <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699a      	ldr	r2, [r3, #24]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2108      	movs	r1, #8
 8005a40:	430a      	orrs	r2, r1
 8005a42:	619a      	str	r2, [r3, #24]
}
 8005a44:	46c0      	nop			; (mov r8, r8)
 8005a46:	46bd      	mov	sp, r7
 8005a48:	b01e      	add	sp, #120	; 0x78
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	fffffeff 	.word	0xfffffeff
 8005a50:	effffffe 	.word	0xeffffffe
 8005a54:	efffffff 	.word	0xefffffff
 8005a58:	08005329 	.word	0x08005329

08005a5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a64:	46c0      	nop			; (mov r8, r8)
 8005a66:	46bd      	mov	sp, r7
 8005a68:	b002      	add	sp, #8
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005a74:	46c0      	nop			; (mov r8, r8)
 8005a76:	46bd      	mov	sp, r7
 8005a78:	b002      	add	sp, #8
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005a84:	46c0      	nop			; (mov r8, r8)
 8005a86:	46bd      	mov	sp, r7
 8005a88:	b002      	add	sp, #8
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2280      	movs	r2, #128	; 0x80
 8005a98:	5c9b      	ldrb	r3, [r3, r2]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d101      	bne.n	8005aa2 <HAL_UARTEx_DisableFifoMode+0x16>
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e027      	b.n	8005af2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2280      	movs	r2, #128	; 0x80
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2284      	movs	r2, #132	; 0x84
 8005aae:	2124      	movs	r1, #36	; 0x24
 8005ab0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	438a      	bics	r2, r1
 8005ac8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	4a0b      	ldr	r2, [pc, #44]	; (8005afc <HAL_UARTEx_DisableFifoMode+0x70>)
 8005ace:	4013      	ands	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2284      	movs	r2, #132	; 0x84
 8005ae4:	2120      	movs	r1, #32
 8005ae6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2280      	movs	r2, #128	; 0x80
 8005aec:	2100      	movs	r1, #0
 8005aee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	0018      	movs	r0, r3
 8005af4:	46bd      	mov	sp, r7
 8005af6:	b004      	add	sp, #16
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	46c0      	nop			; (mov r8, r8)
 8005afc:	dfffffff 	.word	0xdfffffff

08005b00 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2280      	movs	r2, #128	; 0x80
 8005b0e:	5c9b      	ldrb	r3, [r3, r2]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d101      	bne.n	8005b18 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b14:	2302      	movs	r3, #2
 8005b16:	e02e      	b.n	8005b76 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2280      	movs	r2, #128	; 0x80
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2284      	movs	r2, #132	; 0x84
 8005b24:	2124      	movs	r1, #36	; 0x24
 8005b26:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2101      	movs	r1, #1
 8005b3c:	438a      	bics	r2, r1
 8005b3e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	08d9      	lsrs	r1, r3, #3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	0018      	movs	r0, r3
 8005b58:	f000 f854 	bl	8005c04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2284      	movs	r2, #132	; 0x84
 8005b68:	2120      	movs	r1, #32
 8005b6a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2280      	movs	r2, #128	; 0x80
 8005b70:	2100      	movs	r1, #0
 8005b72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	0018      	movs	r0, r3
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	b004      	add	sp, #16
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2280      	movs	r2, #128	; 0x80
 8005b8e:	5c9b      	ldrb	r3, [r3, r2]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d101      	bne.n	8005b98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b94:	2302      	movs	r3, #2
 8005b96:	e02f      	b.n	8005bf8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2280      	movs	r2, #128	; 0x80
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2284      	movs	r2, #132	; 0x84
 8005ba4:	2124      	movs	r1, #36	; 0x24
 8005ba6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2101      	movs	r1, #1
 8005bbc:	438a      	bics	r2, r1
 8005bbe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	4a0e      	ldr	r2, [pc, #56]	; (8005c00 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005bc8:	4013      	ands	r3, r2
 8005bca:	0019      	movs	r1, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	0018      	movs	r0, r3
 8005bda:	f000 f813 	bl	8005c04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2284      	movs	r2, #132	; 0x84
 8005bea:	2120      	movs	r1, #32
 8005bec:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2280      	movs	r2, #128	; 0x80
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	b004      	add	sp, #16
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	f1ffffff 	.word	0xf1ffffff

08005c04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d108      	bne.n	8005c26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	226a      	movs	r2, #106	; 0x6a
 8005c18:	2101      	movs	r1, #1
 8005c1a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2268      	movs	r2, #104	; 0x68
 8005c20:	2101      	movs	r1, #1
 8005c22:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c24:	e043      	b.n	8005cae <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c26:	260f      	movs	r6, #15
 8005c28:	19bb      	adds	r3, r7, r6
 8005c2a:	2208      	movs	r2, #8
 8005c2c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c2e:	200e      	movs	r0, #14
 8005c30:	183b      	adds	r3, r7, r0
 8005c32:	2208      	movs	r2, #8
 8005c34:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	0e5b      	lsrs	r3, r3, #25
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	240d      	movs	r4, #13
 8005c42:	193b      	adds	r3, r7, r4
 8005c44:	2107      	movs	r1, #7
 8005c46:	400a      	ands	r2, r1
 8005c48:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	0f5b      	lsrs	r3, r3, #29
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	250c      	movs	r5, #12
 8005c56:	197b      	adds	r3, r7, r5
 8005c58:	2107      	movs	r1, #7
 8005c5a:	400a      	ands	r2, r1
 8005c5c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c5e:	183b      	adds	r3, r7, r0
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	197a      	adds	r2, r7, r5
 8005c64:	7812      	ldrb	r2, [r2, #0]
 8005c66:	4914      	ldr	r1, [pc, #80]	; (8005cb8 <UARTEx_SetNbDataToProcess+0xb4>)
 8005c68:	5c8a      	ldrb	r2, [r1, r2]
 8005c6a:	435a      	muls	r2, r3
 8005c6c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c6e:	197b      	adds	r3, r7, r5
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	4a12      	ldr	r2, [pc, #72]	; (8005cbc <UARTEx_SetNbDataToProcess+0xb8>)
 8005c74:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c76:	0019      	movs	r1, r3
 8005c78:	f7fa face 	bl	8000218 <__divsi3>
 8005c7c:	0003      	movs	r3, r0
 8005c7e:	b299      	uxth	r1, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	226a      	movs	r2, #106	; 0x6a
 8005c84:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c86:	19bb      	adds	r3, r7, r6
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	193a      	adds	r2, r7, r4
 8005c8c:	7812      	ldrb	r2, [r2, #0]
 8005c8e:	490a      	ldr	r1, [pc, #40]	; (8005cb8 <UARTEx_SetNbDataToProcess+0xb4>)
 8005c90:	5c8a      	ldrb	r2, [r1, r2]
 8005c92:	435a      	muls	r2, r3
 8005c94:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c96:	193b      	adds	r3, r7, r4
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	4a08      	ldr	r2, [pc, #32]	; (8005cbc <UARTEx_SetNbDataToProcess+0xb8>)
 8005c9c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c9e:	0019      	movs	r1, r3
 8005ca0:	f7fa faba 	bl	8000218 <__divsi3>
 8005ca4:	0003      	movs	r3, r0
 8005ca6:	b299      	uxth	r1, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2268      	movs	r2, #104	; 0x68
 8005cac:	5299      	strh	r1, [r3, r2]
}
 8005cae:	46c0      	nop			; (mov r8, r8)
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	b005      	add	sp, #20
 8005cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cb6:	46c0      	nop			; (mov r8, r8)
 8005cb8:	08005da8 	.word	0x08005da8
 8005cbc:	08005db0 	.word	0x08005db0

08005cc0 <__libc_init_array>:
 8005cc0:	b570      	push	{r4, r5, r6, lr}
 8005cc2:	2600      	movs	r6, #0
 8005cc4:	4d0c      	ldr	r5, [pc, #48]	; (8005cf8 <__libc_init_array+0x38>)
 8005cc6:	4c0d      	ldr	r4, [pc, #52]	; (8005cfc <__libc_init_array+0x3c>)
 8005cc8:	1b64      	subs	r4, r4, r5
 8005cca:	10a4      	asrs	r4, r4, #2
 8005ccc:	42a6      	cmp	r6, r4
 8005cce:	d109      	bne.n	8005ce4 <__libc_init_array+0x24>
 8005cd0:	2600      	movs	r6, #0
 8005cd2:	f000 f821 	bl	8005d18 <_init>
 8005cd6:	4d0a      	ldr	r5, [pc, #40]	; (8005d00 <__libc_init_array+0x40>)
 8005cd8:	4c0a      	ldr	r4, [pc, #40]	; (8005d04 <__libc_init_array+0x44>)
 8005cda:	1b64      	subs	r4, r4, r5
 8005cdc:	10a4      	asrs	r4, r4, #2
 8005cde:	42a6      	cmp	r6, r4
 8005ce0:	d105      	bne.n	8005cee <__libc_init_array+0x2e>
 8005ce2:	bd70      	pop	{r4, r5, r6, pc}
 8005ce4:	00b3      	lsls	r3, r6, #2
 8005ce6:	58eb      	ldr	r3, [r5, r3]
 8005ce8:	4798      	blx	r3
 8005cea:	3601      	adds	r6, #1
 8005cec:	e7ee      	b.n	8005ccc <__libc_init_array+0xc>
 8005cee:	00b3      	lsls	r3, r6, #2
 8005cf0:	58eb      	ldr	r3, [r5, r3]
 8005cf2:	4798      	blx	r3
 8005cf4:	3601      	adds	r6, #1
 8005cf6:	e7f2      	b.n	8005cde <__libc_init_array+0x1e>
 8005cf8:	08005dc0 	.word	0x08005dc0
 8005cfc:	08005dc0 	.word	0x08005dc0
 8005d00:	08005dc0 	.word	0x08005dc0
 8005d04:	08005dc8 	.word	0x08005dc8

08005d08 <memset>:
 8005d08:	0003      	movs	r3, r0
 8005d0a:	1882      	adds	r2, r0, r2
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d100      	bne.n	8005d12 <memset+0xa>
 8005d10:	4770      	bx	lr
 8005d12:	7019      	strb	r1, [r3, #0]
 8005d14:	3301      	adds	r3, #1
 8005d16:	e7f9      	b.n	8005d0c <memset+0x4>

08005d18 <_init>:
 8005d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1a:	46c0      	nop			; (mov r8, r8)
 8005d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d1e:	bc08      	pop	{r3}
 8005d20:	469e      	mov	lr, r3
 8005d22:	4770      	bx	lr

08005d24 <_fini>:
 8005d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d26:	46c0      	nop			; (mov r8, r8)
 8005d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d2a:	bc08      	pop	{r3}
 8005d2c:	469e      	mov	lr, r3
 8005d2e:	4770      	bx	lr
