
cats_tele_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a44  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000918  08009b00  08009b00  00019b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a418  0800a418  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a418  0800a418  0001a418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a420  0800a420  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0800a420  0800a420  0001a420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a434  0800a434  0001a434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800a438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  200000b4  0800a4ec  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  0800a4ec  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026756  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004960  00000000  00000000  00046832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001768  00000000  00000000  0004b198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e0  00000000  00000000  0004c900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e5e3  00000000  00000000  0004dee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c0b1  00000000  00000000  0006c4c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3d10  00000000  00000000  00088574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013c284  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059c8  00000000  00000000  0013c2d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000b4 	.word	0x200000b4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009ae8 	.word	0x08009ae8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000b8 	.word	0x200000b8
 8000100:	08009ae8 	.word	0x08009ae8

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	1c08      	adds	r0, r1, #0
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f806 	bl	8000458 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__udivmoddi4>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	0004      	movs	r4, r0
 8000466:	000d      	movs	r5, r1
 8000468:	4692      	mov	sl, r2
 800046a:	4699      	mov	r9, r3
 800046c:	b083      	sub	sp, #12
 800046e:	428b      	cmp	r3, r1
 8000470:	d830      	bhi.n	80004d4 <__udivmoddi4+0x7c>
 8000472:	d02d      	beq.n	80004d0 <__udivmoddi4+0x78>
 8000474:	4649      	mov	r1, r9
 8000476:	4650      	mov	r0, sl
 8000478:	f000 f8d8 	bl	800062c <__clzdi2>
 800047c:	0029      	movs	r1, r5
 800047e:	0006      	movs	r6, r0
 8000480:	0020      	movs	r0, r4
 8000482:	f000 f8d3 	bl	800062c <__clzdi2>
 8000486:	1a33      	subs	r3, r6, r0
 8000488:	4698      	mov	r8, r3
 800048a:	3b20      	subs	r3, #32
 800048c:	469b      	mov	fp, r3
 800048e:	d433      	bmi.n	80004f8 <__udivmoddi4+0xa0>
 8000490:	465a      	mov	r2, fp
 8000492:	4653      	mov	r3, sl
 8000494:	4093      	lsls	r3, r2
 8000496:	4642      	mov	r2, r8
 8000498:	001f      	movs	r7, r3
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	001e      	movs	r6, r3
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d83a      	bhi.n	800051a <__udivmoddi4+0xc2>
 80004a4:	42af      	cmp	r7, r5
 80004a6:	d100      	bne.n	80004aa <__udivmoddi4+0x52>
 80004a8:	e078      	b.n	800059c <__udivmoddi4+0x144>
 80004aa:	465b      	mov	r3, fp
 80004ac:	1ba4      	subs	r4, r4, r6
 80004ae:	41bd      	sbcs	r5, r7
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	da00      	bge.n	80004b6 <__udivmoddi4+0x5e>
 80004b4:	e075      	b.n	80005a2 <__udivmoddi4+0x14a>
 80004b6:	2200      	movs	r2, #0
 80004b8:	2300      	movs	r3, #0
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	465a      	mov	r2, fp
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	4642      	mov	r2, r8
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	e028      	b.n	8000522 <__udivmoddi4+0xca>
 80004d0:	4282      	cmp	r2, r0
 80004d2:	d9cf      	bls.n	8000474 <__udivmoddi4+0x1c>
 80004d4:	2200      	movs	r2, #0
 80004d6:	2300      	movs	r3, #0
 80004d8:	9200      	str	r2, [sp, #0]
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <__udivmoddi4+0x8e>
 80004e2:	601c      	str	r4, [r3, #0]
 80004e4:	605d      	str	r5, [r3, #4]
 80004e6:	9800      	ldr	r0, [sp, #0]
 80004e8:	9901      	ldr	r1, [sp, #4]
 80004ea:	b003      	add	sp, #12
 80004ec:	bcf0      	pop	{r4, r5, r6, r7}
 80004ee:	46bb      	mov	fp, r7
 80004f0:	46b2      	mov	sl, r6
 80004f2:	46a9      	mov	r9, r5
 80004f4:	46a0      	mov	r8, r4
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	4642      	mov	r2, r8
 80004fa:	2320      	movs	r3, #32
 80004fc:	1a9b      	subs	r3, r3, r2
 80004fe:	4652      	mov	r2, sl
 8000500:	40da      	lsrs	r2, r3
 8000502:	4641      	mov	r1, r8
 8000504:	0013      	movs	r3, r2
 8000506:	464a      	mov	r2, r9
 8000508:	408a      	lsls	r2, r1
 800050a:	0017      	movs	r7, r2
 800050c:	4642      	mov	r2, r8
 800050e:	431f      	orrs	r7, r3
 8000510:	4653      	mov	r3, sl
 8000512:	4093      	lsls	r3, r2
 8000514:	001e      	movs	r6, r3
 8000516:	42af      	cmp	r7, r5
 8000518:	d9c4      	bls.n	80004a4 <__udivmoddi4+0x4c>
 800051a:	2200      	movs	r2, #0
 800051c:	2300      	movs	r3, #0
 800051e:	9200      	str	r2, [sp, #0]
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	4643      	mov	r3, r8
 8000524:	2b00      	cmp	r3, #0
 8000526:	d0d9      	beq.n	80004dc <__udivmoddi4+0x84>
 8000528:	07fb      	lsls	r3, r7, #31
 800052a:	0872      	lsrs	r2, r6, #1
 800052c:	431a      	orrs	r2, r3
 800052e:	4646      	mov	r6, r8
 8000530:	087b      	lsrs	r3, r7, #1
 8000532:	e00e      	b.n	8000552 <__udivmoddi4+0xfa>
 8000534:	42ab      	cmp	r3, r5
 8000536:	d101      	bne.n	800053c <__udivmoddi4+0xe4>
 8000538:	42a2      	cmp	r2, r4
 800053a:	d80c      	bhi.n	8000556 <__udivmoddi4+0xfe>
 800053c:	1aa4      	subs	r4, r4, r2
 800053e:	419d      	sbcs	r5, r3
 8000540:	2001      	movs	r0, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2100      	movs	r1, #0
 8000548:	3e01      	subs	r6, #1
 800054a:	1824      	adds	r4, r4, r0
 800054c:	414d      	adcs	r5, r1
 800054e:	2e00      	cmp	r6, #0
 8000550:	d006      	beq.n	8000560 <__udivmoddi4+0x108>
 8000552:	42ab      	cmp	r3, r5
 8000554:	d9ee      	bls.n	8000534 <__udivmoddi4+0xdc>
 8000556:	3e01      	subs	r6, #1
 8000558:	1924      	adds	r4, r4, r4
 800055a:	416d      	adcs	r5, r5
 800055c:	2e00      	cmp	r6, #0
 800055e:	d1f8      	bne.n	8000552 <__udivmoddi4+0xfa>
 8000560:	9800      	ldr	r0, [sp, #0]
 8000562:	9901      	ldr	r1, [sp, #4]
 8000564:	465b      	mov	r3, fp
 8000566:	1900      	adds	r0, r0, r4
 8000568:	4169      	adcs	r1, r5
 800056a:	2b00      	cmp	r3, #0
 800056c:	db24      	blt.n	80005b8 <__udivmoddi4+0x160>
 800056e:	002b      	movs	r3, r5
 8000570:	465a      	mov	r2, fp
 8000572:	4644      	mov	r4, r8
 8000574:	40d3      	lsrs	r3, r2
 8000576:	002a      	movs	r2, r5
 8000578:	40e2      	lsrs	r2, r4
 800057a:	001c      	movs	r4, r3
 800057c:	465b      	mov	r3, fp
 800057e:	0015      	movs	r5, r2
 8000580:	2b00      	cmp	r3, #0
 8000582:	db2a      	blt.n	80005da <__udivmoddi4+0x182>
 8000584:	0026      	movs	r6, r4
 8000586:	409e      	lsls	r6, r3
 8000588:	0033      	movs	r3, r6
 800058a:	0026      	movs	r6, r4
 800058c:	4647      	mov	r7, r8
 800058e:	40be      	lsls	r6, r7
 8000590:	0032      	movs	r2, r6
 8000592:	1a80      	subs	r0, r0, r2
 8000594:	4199      	sbcs	r1, r3
 8000596:	9000      	str	r0, [sp, #0]
 8000598:	9101      	str	r1, [sp, #4]
 800059a:	e79f      	b.n	80004dc <__udivmoddi4+0x84>
 800059c:	42a3      	cmp	r3, r4
 800059e:	d8bc      	bhi.n	800051a <__udivmoddi4+0xc2>
 80005a0:	e783      	b.n	80004aa <__udivmoddi4+0x52>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	2100      	movs	r1, #0
 80005a8:	1a9b      	subs	r3, r3, r2
 80005aa:	2200      	movs	r2, #0
 80005ac:	9100      	str	r1, [sp, #0]
 80005ae:	9201      	str	r2, [sp, #4]
 80005b0:	2201      	movs	r2, #1
 80005b2:	40da      	lsrs	r2, r3
 80005b4:	9201      	str	r2, [sp, #4]
 80005b6:	e786      	b.n	80004c6 <__udivmoddi4+0x6e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	2320      	movs	r3, #32
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	002a      	movs	r2, r5
 80005c0:	4646      	mov	r6, r8
 80005c2:	409a      	lsls	r2, r3
 80005c4:	0023      	movs	r3, r4
 80005c6:	40f3      	lsrs	r3, r6
 80005c8:	4644      	mov	r4, r8
 80005ca:	4313      	orrs	r3, r2
 80005cc:	002a      	movs	r2, r5
 80005ce:	40e2      	lsrs	r2, r4
 80005d0:	001c      	movs	r4, r3
 80005d2:	465b      	mov	r3, fp
 80005d4:	0015      	movs	r5, r2
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	dad4      	bge.n	8000584 <__udivmoddi4+0x12c>
 80005da:	4642      	mov	r2, r8
 80005dc:	002f      	movs	r7, r5
 80005de:	2320      	movs	r3, #32
 80005e0:	0026      	movs	r6, r4
 80005e2:	4097      	lsls	r7, r2
 80005e4:	1a9b      	subs	r3, r3, r2
 80005e6:	40de      	lsrs	r6, r3
 80005e8:	003b      	movs	r3, r7
 80005ea:	4333      	orrs	r3, r6
 80005ec:	e7cd      	b.n	800058a <__udivmoddi4+0x132>
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	; (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <__clzdi2>:
 800062c:	b510      	push	{r4, lr}
 800062e:	2900      	cmp	r1, #0
 8000630:	d103      	bne.n	800063a <__clzdi2+0xe>
 8000632:	f7ff ffdd 	bl	80005f0 <__clzsi2>
 8000636:	3020      	adds	r0, #32
 8000638:	e002      	b.n	8000640 <__clzdi2+0x14>
 800063a:	1c08      	adds	r0, r1, #0
 800063c:	f7ff ffd8 	bl	80005f0 <__clzsi2>
 8000640:	bd10      	pop	{r4, pc}
 8000642:	46c0      	nop			; (mov r8, r8)

08000644 <_Z8containsih>:

*/

uint16_t crc16(uint8_t const *data, int32_t size);

uint8_t contains(int current_pos, uint8_t value){
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	000a      	movs	r2, r1
 800064e:	1cfb      	adds	r3, r7, #3
 8000650:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < current_pos; i++){
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	68fa      	ldr	r2, [r7, #12]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	429a      	cmp	r2, r3
 800065c:	da0d      	bge.n	800067a <_Z8containsih+0x36>
		if(FHSSsequence[i] == value) return 1;
 800065e:	4a09      	ldr	r2, [pc, #36]	; (8000684 <_Z8containsih+0x40>)
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	18d3      	adds	r3, r2, r3
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	1cfa      	adds	r2, r7, #3
 8000668:	7812      	ldrb	r2, [r2, #0]
 800066a:	429a      	cmp	r2, r3
 800066c:	d101      	bne.n	8000672 <_Z8containsih+0x2e>
 800066e:	2301      	movs	r3, #1
 8000670:	e004      	b.n	800067c <_Z8containsih+0x38>
	for(int i = 0; i < current_pos; i++){
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3301      	adds	r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	e7ed      	b.n	8000656 <_Z8containsih+0x12>
	}
	return 0;
 800067a:	2300      	movs	r3, #0
}
 800067c:	0018      	movs	r0, r3
 800067e:	46bd      	mov	sp, r7
 8000680:	b004      	add	sp, #16
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200000d0 	.word	0x200000d0

08000688 <_Z25FHSSrandomiseFHSSsequencem>:

void FHSSrandomiseFHSSsequence(uint32_t crc)
{
 8000688:	b5b0      	push	{r4, r5, r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	rngSeed(crc);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	0018      	movs	r0, r3
 8000694:	f000 f894 	bl	80007c0 <_Z7rngSeedm>
	int i = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
	while(i < FHSS_SEQUENCE_CNT){
 800069c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069e:	2b13      	cmp	r3, #19
 80006a0:	dc1e      	bgt.n	80006e0 <_Z25FHSSrandomiseFHSSsequencem+0x58>
		uint8_t next_freq = (uint8_t)rngN(FHSS_FREQ_CNT);
 80006a2:	251f      	movs	r5, #31
 80006a4:	197c      	adds	r4, r7, r5
 80006a6:	2050      	movs	r0, #80	; 0x50
 80006a8:	f000 f898 	bl	80007dc <_Z4rngNh>
 80006ac:	0003      	movs	r3, r0
 80006ae:	7023      	strb	r3, [r4, #0]
		if(contains(i, next_freq) == 0) {
 80006b0:	002c      	movs	r4, r5
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	781a      	ldrb	r2, [r3, #0]
 80006b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b8:	0011      	movs	r1, r2
 80006ba:	0018      	movs	r0, r3
 80006bc:	f7ff ffc2 	bl	8000644 <_Z8containsih>
 80006c0:	0003      	movs	r3, r0
 80006c2:	425a      	negs	r2, r3
 80006c4:	4153      	adcs	r3, r2
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d0e7      	beq.n	800069c <_Z25FHSSrandomiseFHSSsequencem+0x14>
			FHSSsequence[i] = next_freq;
 80006cc:	4a12      	ldr	r2, [pc, #72]	; (8000718 <_Z25FHSSrandomiseFHSSsequencem+0x90>)
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	18d3      	adds	r3, r2, r3
 80006d2:	193a      	adds	r2, r7, r4
 80006d4:	7812      	ldrb	r2, [r2, #0]
 80006d6:	701a      	strb	r2, [r3, #0]
			i++;
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	3301      	adds	r3, #1
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
	while(i < FHSS_SEQUENCE_CNT){
 80006de:	e7dd      	b.n	800069c <_Z25FHSSrandomiseFHSSsequencem+0x14>
		}
	}
	uint8_t seq[20];
	for(int i1 = 0; i1 < 20; i1++){
 80006e0:	2300      	movs	r3, #0
 80006e2:	623b      	str	r3, [r7, #32]
 80006e4:	6a3b      	ldr	r3, [r7, #32]
 80006e6:	2b13      	cmp	r3, #19
 80006e8:	dc0d      	bgt.n	8000706 <_Z25FHSSrandomiseFHSSsequencem+0x7e>
		seq[i1] = FHSSsequence[i1];
 80006ea:	4a0b      	ldr	r2, [pc, #44]	; (8000718 <_Z25FHSSrandomiseFHSSsequencem+0x90>)
 80006ec:	6a3b      	ldr	r3, [r7, #32]
 80006ee:	18d3      	adds	r3, r2, r3
 80006f0:	7819      	ldrb	r1, [r3, #0]
 80006f2:	2308      	movs	r3, #8
 80006f4:	18fa      	adds	r2, r7, r3
 80006f6:	6a3b      	ldr	r3, [r7, #32]
 80006f8:	18d3      	adds	r3, r2, r3
 80006fa:	1c0a      	adds	r2, r1, #0
 80006fc:	701a      	strb	r2, [r3, #0]
	for(int i1 = 0; i1 < 20; i1++){
 80006fe:	6a3b      	ldr	r3, [r7, #32]
 8000700:	3301      	adds	r3, #1
 8000702:	623b      	str	r3, [r7, #32]
 8000704:	e7ee      	b.n	80006e4 <_Z25FHSSrandomiseFHSSsequencem+0x5c>
	}
	sync_channel = FHSSsequence[0];
 8000706:	4b04      	ldr	r3, [pc, #16]	; (8000718 <_Z25FHSSrandomiseFHSSsequencem+0x90>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	001a      	movs	r2, r3
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <_Z25FHSSrandomiseFHSSsequencem+0x94>)
 800070e:	601a      	str	r2, [r3, #0]
}
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	b00a      	add	sp, #40	; 0x28
 8000716:	bdb0      	pop	{r4, r5, r7, pc}
 8000718:	200000d0 	.word	0x200000d0
 800071c:	200000e8 	.word	0x200000e8

08000720 <_Z5crc32PKhj>:
	0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693,
	0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,
	0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d
};

 uint32_t crc32(const uint8_t *buf, size_t size) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	6039      	str	r1, [r7, #0]
	const uint8_t *p = buf;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	60fb      	str	r3, [r7, #12]
	uint32_t crc;

	crc = ~0U;
 800072e:	2301      	movs	r3, #1
 8000730:	425b      	negs	r3, r3
 8000732:	60bb      	str	r3, [r7, #8]
	while (size--)
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	1e5a      	subs	r2, r3, #1
 8000738:	603a      	str	r2, [r7, #0]
 800073a:	1e5a      	subs	r2, r3, #1
 800073c:	4193      	sbcs	r3, r2
 800073e:	b2db      	uxtb	r3, r3
 8000740:	2b00      	cmp	r3, #0
 8000742:	d010      	beq.n	8000766 <_Z5crc32PKhj+0x46>
		crc = crc32_tab[(crc ^ *p++) & 0xFF] ^ (crc >> 8);
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	1c5a      	adds	r2, r3, #1
 8000748:	60fa      	str	r2, [r7, #12]
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	001a      	movs	r2, r3
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	4053      	eors	r3, r2
 8000752:	22ff      	movs	r2, #255	; 0xff
 8000754:	401a      	ands	r2, r3
 8000756:	4b07      	ldr	r3, [pc, #28]	; (8000774 <_Z5crc32PKhj+0x54>)
 8000758:	0092      	lsls	r2, r2, #2
 800075a:	58d2      	ldr	r2, [r2, r3]
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	0a1b      	lsrs	r3, r3, #8
 8000760:	4053      	eors	r3, r2
 8000762:	60bb      	str	r3, [r7, #8]
	while (size--)
 8000764:	e7e6      	b.n	8000734 <_Z5crc32PKhj+0x14>
	return crc ^ ~0U;
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	43db      	mvns	r3, r3
}
 800076a:	0018      	movs	r0, r3
 800076c:	46bd      	mov	sp, r7
 800076e:	b004      	add	sp, #16
 8000770:	bd80      	pop	{r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	08009d08 	.word	0x08009d08

08000778 <_Z3rngv>:
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	2380      	movs	r3, #128	; 0x80
 8000780:	061b      	lsls	r3, r3, #24
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <_Z3rngv+0x3c>)
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <_Z3rngv+0x40>)
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <_Z3rngv+0x44>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a08      	ldr	r2, [pc, #32]	; (80007b4 <_Z3rngv+0x3c>)
 8000792:	4353      	muls	r3, r2
 8000794:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <_Z3rngv+0x40>)
 8000796:	4694      	mov	ip, r2
 8000798:	4463      	add	r3, ip
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	085a      	lsrs	r2, r3, #1
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <_Z3rngv+0x44>)
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <_Z3rngv+0x44>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	0c1b      	lsrs	r3, r3, #16
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	0018      	movs	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b004      	add	sp, #16
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	000343fd 	.word	0x000343fd
 80007b8:	00269ec3 	.word	0x00269ec3
 80007bc:	200000ec 	.word	0x200000ec

080007c0 <_Z7rngSeedm>:
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <_Z7rngSeedm+0x18>)
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b002      	add	sp, #8
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	200000ec 	.word	0x200000ec

080007dc <_Z4rngNh>:
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	0002      	movs	r2, r0
 80007e4:	1dfb      	adds	r3, r7, #7
 80007e6:	701a      	strb	r2, [r3, #0]
 80007e8:	f7ff ffc6 	bl	8000778 <_Z3rngv>
 80007ec:	0003      	movs	r3, r0
 80007ee:	001a      	movs	r2, r3
 80007f0:	1dfb      	adds	r3, r7, #7
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	0019      	movs	r1, r3
 80007f6:	0010      	movs	r0, r2
 80007f8:	f7ff fe08 	bl	800040c <__aeabi_idivmod>
 80007fc:	000b      	movs	r3, r1
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	0018      	movs	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	b002      	add	sp, #8
 8000806:	bd80      	pop	{r7, pc}

08000808 <_ZNK9SX1280Hal9BusyDelayEm>:
    void RXenable();
    void TXRXdisable();

    static void (*RadioIsrCallback)(); //function pointer for callback

    void BusyDelay(uint32_t duration) const { (void)duration; };
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b002      	add	sp, #8
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <_ZN12SX1280DriverC1Ev>:
#define RX_TIMEOUT_PERIOD_BASE SX1280_RADIO_TICK_SIZE_0015_US
#define RX_TIMEOUT_PERIOD_BASE_NANOS 15625

void nullCallback(void) {}

SX1280Driver::SX1280Driver()
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2201      	movs	r2, #1
 8000828:	4252      	negs	r2, r2
 800082a:	851a      	strh	r2, [r3, #40]	; 0x28
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2234      	movs	r2, #52	; 0x34
 8000830:	2100      	movs	r1, #0
 8000832:	5499      	strb	r1, [r3, r2]
{
    instance = this;
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <_ZN12SX1280DriverC1Ev+0x28>)
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	601a      	str	r2, [r3, #0]
}
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	0018      	movs	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	b002      	add	sp, #8
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200000f4 	.word	0x200000f4

08000848 <_ZN12SX1280Driver5BeginEv>:
    currFreq = 2400000000;
    PayloadLength = 8; // Dummy default value which is overwritten during setup.
}

bool SX1280Driver::Begin()
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b087      	sub	sp, #28
 800084c:	af02      	add	r7, sp, #8
 800084e:	6078      	str	r0, [r7, #4]
    hal.init();
 8000850:	4b41      	ldr	r3, [pc, #260]	; (8000958 <_ZN12SX1280Driver5BeginEv+0x110>)
 8000852:	0018      	movs	r0, r3
 8000854:	f000 fd7e 	bl	8001354 <_ZN9SX1280Hal4initEv>
    //hal.RadioIsrCallback = &SX1280Driver::IsrCallback;

    hal.reset();
 8000858:	4b3f      	ldr	r3, [pc, #252]	; (8000958 <_ZN12SX1280Driver5BeginEv+0x110>)
 800085a:	0018      	movs	r0, r3
 800085c:	f000 fd82 	bl	8001364 <_ZN9SX1280Hal5resetEv>
    //DBGLN("SX1280 Begin");
    HAL_Delay(100);
 8000860:	2064      	movs	r0, #100	; 0x64
 8000862:	f003 f927 	bl	8003ab4 <HAL_Delay>
    uint16_t firmwareRev = (((hal.ReadRegister(REG_LR_FIRMWARE_VERSION_MSB)) << 8) | (hal.ReadRegister(REG_LR_FIRMWARE_VERSION_MSB + 1)));
 8000866:	2354      	movs	r3, #84	; 0x54
 8000868:	33ff      	adds	r3, #255	; 0xff
 800086a:	001a      	movs	r2, r3
 800086c:	4b3a      	ldr	r3, [pc, #232]	; (8000958 <_ZN12SX1280Driver5BeginEv+0x110>)
 800086e:	0011      	movs	r1, r2
 8000870:	0018      	movs	r0, r3
 8000872:	f000 ff23 	bl	80016bc <_ZN9SX1280Hal12ReadRegisterEt>
 8000876:	0003      	movs	r3, r0
 8000878:	021b      	lsls	r3, r3, #8
 800087a:	b21c      	sxth	r4, r3
 800087c:	23aa      	movs	r3, #170	; 0xaa
 800087e:	005a      	lsls	r2, r3, #1
 8000880:	4b35      	ldr	r3, [pc, #212]	; (8000958 <_ZN12SX1280Driver5BeginEv+0x110>)
 8000882:	0011      	movs	r1, r2
 8000884:	0018      	movs	r0, r3
 8000886:	f000 ff19 	bl	80016bc <_ZN9SX1280Hal12ReadRegisterEt>
 800088a:	0003      	movs	r3, r0
 800088c:	b21b      	sxth	r3, r3
 800088e:	4323      	orrs	r3, r4
 8000890:	b21a      	sxth	r2, r3
 8000892:	210e      	movs	r1, #14
 8000894:	187b      	adds	r3, r7, r1
 8000896:	801a      	strh	r2, [r3, #0]
    //DBGLN("Read Vers: %d", firmwareRev);
    if ((firmwareRev == 0) || (firmwareRev == 65535))
 8000898:	000a      	movs	r2, r1
 800089a:	18bb      	adds	r3, r7, r2
 800089c:	881b      	ldrh	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d004      	beq.n	80008ac <_ZN12SX1280Driver5BeginEv+0x64>
 80008a2:	18bb      	adds	r3, r7, r2
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	4a2d      	ldr	r2, [pc, #180]	; (800095c <_ZN12SX1280Driver5BeginEv+0x114>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d101      	bne.n	80008b0 <_ZN12SX1280Driver5BeginEv+0x68>
    {
        // SPI communication failed, just return without configuration
        return false;
 80008ac:	2300      	movs	r3, #0
 80008ae:	e04e      	b.n	800094e <_ZN12SX1280Driver5BeginEv+0x106>
    }

    SetMode(SX1280_MODE_STDBY_RC);                                                                                                //Put in STDBY_RC mode
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2102      	movs	r1, #2
 80008b4:	0018      	movs	r0, r3
 80008b6:	f000 f945 	bl	8000b44 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>
    hal.WriteCommand(SX1280_RADIO_SET_PACKETTYPE, SX1280_PACKET_TYPE_LORA);                                                       //Set packet type to LoRa
 80008ba:	4b27      	ldr	r3, [pc, #156]	; (8000958 <_ZN12SX1280Driver5BeginEv+0x110>)
 80008bc:	2201      	movs	r2, #1
 80008be:	218a      	movs	r1, #138	; 0x8a
 80008c0:	0018      	movs	r0, r3
 80008c2:	f000 fd57 	bl	8001374 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
    ConfigModParamsLoRa(SX1280_LORA_BW_0800, SX1280_LORA_SF6, SX1280_LORA_CR_4_7);                                                //Configure Modulation Params
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	2303      	movs	r3, #3
 80008ca:	2260      	movs	r2, #96	; 0x60
 80008cc:	2118      	movs	r1, #24
 80008ce:	f000 f9b9 	bl	8000c44 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh>
    hal.WriteCommand(SX1280_RADIO_SET_AUTOFS, 0x01);                                                                              //Enable auto FS
 80008d2:	4b21      	ldr	r3, [pc, #132]	; (8000958 <_ZN12SX1280Driver5BeginEv+0x110>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	219e      	movs	r1, #158	; 0x9e
 80008d8:	0018      	movs	r0, r3
 80008da:	f000 fd4b 	bl	8001374 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
    hal.WriteRegister(0x0891, (hal.ReadRegister(0x0891) | 0xC0));                                                                 //default is low power mode, switch to high sensitivity instead
 80008de:	4a20      	ldr	r2, [pc, #128]	; (8000960 <_ZN12SX1280Driver5BeginEv+0x118>)
 80008e0:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <_ZN12SX1280Driver5BeginEv+0x110>)
 80008e2:	0011      	movs	r1, r2
 80008e4:	0018      	movs	r0, r3
 80008e6:	f000 fee9 	bl	80016bc <_ZN9SX1280Hal12ReadRegisterEt>
 80008ea:	0003      	movs	r3, r0
 80008ec:	001a      	movs	r2, r3
 80008ee:	2340      	movs	r3, #64	; 0x40
 80008f0:	425b      	negs	r3, r3
 80008f2:	4313      	orrs	r3, r2
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	491a      	ldr	r1, [pc, #104]	; (8000960 <_ZN12SX1280Driver5BeginEv+0x118>)
 80008f8:	4b17      	ldr	r3, [pc, #92]	; (8000958 <_ZN12SX1280Driver5BeginEv+0x110>)
 80008fa:	0018      	movs	r0, r3
 80008fc:	f000 fe76 	bl	80015ec <_ZN9SX1280Hal13WriteRegisterEth>
    SetPacketParamsLoRa(12, SX1280_LORA_PACKET_IMPLICIT, 8, SX1280_LORA_CRC_OFF, SX1280_LORA_IQ_NORMAL);                          //default params
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	2340      	movs	r3, #64	; 0x40
 8000904:	9301      	str	r3, [sp, #4]
 8000906:	2300      	movs	r3, #0
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	2308      	movs	r3, #8
 800090c:	2280      	movs	r2, #128	; 0x80
 800090e:	210c      	movs	r1, #12
 8000910:	f000 f9e4 	bl	8000cdc <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th>
    SetFrequencyReg(currFreq);                                                                                                    //Set Freq
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	0011      	movs	r1, r2
 800091c:	0018      	movs	r0, r3
 800091e:	f000 fadb 	bl	8000ed8 <_ZN12SX1280Driver15SetFrequencyRegEm>
    SetFIFOaddr(0x00, 0x00);                                                                                                      //Config FIFO addr
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	0018      	movs	r0, r3
 800092a:	f000 fb05 	bl	8000f38 <_ZN12SX1280Driver11SetFIFOaddrEhh>
    SetDioIrqParams(SX1280_IRQ_RADIO_ALL, SX1280_IRQ_TX_DONE | SX1280_IRQ_RX_DONE);                                               //set IRQ to both RXdone/TXdone on DIO1
 800092e:	490b      	ldr	r1, [pc, #44]	; (800095c <_ZN12SX1280Driver5BeginEv+0x114>)
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	2300      	movs	r3, #0
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	2300      	movs	r3, #0
 8000938:	2203      	movs	r2, #3
 800093a:	f000 fb1f 	bl	8000f7c <_ZN12SX1280Driver15SetDioIrqParamsEtttt>
    instance->ClearIrqStatus(SX1280_IRQ_RADIO_ALL);
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <_ZN12SX1280Driver5BeginEv+0x11c>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a06      	ldr	r2, [pc, #24]	; (800095c <_ZN12SX1280Driver5BeginEv+0x114>)
 8000944:	0011      	movs	r1, r2
 8000946:	0018      	movs	r0, r3
 8000948:	f000 fb86 	bl	8001058 <_ZN12SX1280Driver14ClearIrqStatusEt>
    return true;
 800094c:	2301      	movs	r3, #1
}
 800094e:	0018      	movs	r0, r3
 8000950:	46bd      	mov	sp, r7
 8000952:	b005      	add	sp, #20
 8000954:	bd90      	pop	{r4, r7, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	200000f0 	.word	0x200000f0
 800095c:	0000ffff 	.word	0x0000ffff
 8000960:	00000891 	.word	0x00000891
 8000964:	200000f4 	.word	0x200000f4

08000968 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth>:

void SX1280Driver::Config(uint8_t bw, uint8_t sf, uint8_t cr, uint32_t freq,
                          uint8_t PreambleLength, bool InvertIQ, uint8_t _PayloadLength, uint32_t interval,
                          uint32_t flrcSyncWord, uint16_t flrcCrcSeed, uint8_t flrc)
{
 8000968:	b5b0      	push	{r4, r5, r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af04      	add	r7, sp, #16
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	000c      	movs	r4, r1
 8000972:	0010      	movs	r0, r2
 8000974:	0019      	movs	r1, r3
 8000976:	1cfb      	adds	r3, r7, #3
 8000978:	1c22      	adds	r2, r4, #0
 800097a:	701a      	strb	r2, [r3, #0]
 800097c:	1cbb      	adds	r3, r7, #2
 800097e:	1c02      	adds	r2, r0, #0
 8000980:	701a      	strb	r2, [r3, #0]
 8000982:	1c7b      	adds	r3, r7, #1
 8000984:	1c0a      	adds	r2, r1, #0
 8000986:	701a      	strb	r2, [r3, #0]
    uint8_t irqs = SX1280_IRQ_TX_DONE | SX1280_IRQ_RX_DONE;
 8000988:	230f      	movs	r3, #15
 800098a:	18fb      	adds	r3, r7, r3
 800098c:	2203      	movs	r2, #3
 800098e:	701a      	strb	r2, [r3, #0]
    uint8_t const mode = (flrc) ? SX1280_PACKET_TYPE_FLRC : SX1280_PACKET_TYPE_LORA;
 8000990:	233c      	movs	r3, #60	; 0x3c
 8000992:	18fb      	adds	r3, r7, r3
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0x36>
 800099a:	2203      	movs	r2, #3
 800099c:	e000      	b.n	80009a0 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0x38>
 800099e:	2201      	movs	r2, #1
 80009a0:	240e      	movs	r4, #14
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	701a      	strb	r2, [r3, #0]

    PayloadLength = _PayloadLength;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	252c      	movs	r5, #44	; 0x2c
 80009aa:	197a      	adds	r2, r7, r5
 80009ac:	2130      	movs	r1, #48	; 0x30
 80009ae:	7812      	ldrb	r2, [r2, #0]
 80009b0:	545a      	strb	r2, [r3, r1]
    IQinverted = InvertIQ;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2228      	movs	r2, #40	; 0x28
 80009b6:	18ba      	adds	r2, r7, r2
 80009b8:	2131      	movs	r1, #49	; 0x31
 80009ba:	7812      	ldrb	r2, [r2, #0]
 80009bc:	545a      	strb	r2, [r3, r1]
    SetMode(SX1280_MODE_STDBY_XOSC);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2103      	movs	r1, #3
 80009c2:	0018      	movs	r0, r3
 80009c4:	f000 f8be 	bl	8000b44 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>

    hal.WriteCommand(SX1280_RADIO_SET_PACKETTYPE, mode);
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	781a      	ldrb	r2, [r3, #0]
 80009cc:	4b31      	ldr	r3, [pc, #196]	; (8000a94 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0x12c>)
 80009ce:	218a      	movs	r1, #138	; 0x8a
 80009d0:	0018      	movs	r0, r3
 80009d2:	f000 fccf 	bl	8001374 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
    if (mode == SX1280_PACKET_TYPE_FLRC)
 80009d6:	193b      	adds	r3, r7, r4
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b03      	cmp	r3, #3
 80009dc:	d123      	bne.n	8000a26 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0xbe>
    {
        //DBGLN("Config FLRC");
        ConfigModParamsFLRC(bw, cr, sf);
 80009de:	1cbb      	adds	r3, r7, #2
 80009e0:	781c      	ldrb	r4, [r3, #0]
 80009e2:	1c7b      	adds	r3, r7, #1
 80009e4:	781a      	ldrb	r2, [r3, #0]
 80009e6:	1cfb      	adds	r3, r7, #3
 80009e8:	7819      	ldrb	r1, [r3, #0]
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	0023      	movs	r3, r4
 80009ee:	f000 f9b5 	bl	8000d5c <_ZN12SX1280Driver19ConfigModParamsFLRCEhhh>
        SetPacketParamsFLRC(SX1280_FLRC_PACKET_FIXED_LENGTH, /*crc=*/1,
 80009f2:	2324      	movs	r3, #36	; 0x24
 80009f4:	18fb      	adds	r3, r7, r3
 80009f6:	781a      	ldrb	r2, [r3, #0]
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	2338      	movs	r3, #56	; 0x38
 80009fc:	18fb      	adds	r3, r7, r3
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	9302      	str	r3, [sp, #8]
 8000a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a04:	9301      	str	r3, [sp, #4]
 8000a06:	197b      	adds	r3, r7, r5
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	0013      	movs	r3, r2
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2100      	movs	r1, #0
 8000a12:	f000 f9cd 	bl	8000db0 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt>
                            PreambleLength, _PayloadLength, flrcSyncWord, flrcCrcSeed);
        irqs |= SX1280_IRQ_CRC_ERROR;
 8000a16:	220f      	movs	r2, #15
 8000a18:	18bb      	adds	r3, r7, r2
 8000a1a:	18ba      	adds	r2, r7, r2
 8000a1c:	7812      	ldrb	r2, [r2, #0]
 8000a1e:	2140      	movs	r1, #64	; 0x40
 8000a20:	430a      	orrs	r2, r1
 8000a22:	701a      	strb	r2, [r3, #0]
 8000a24:	e01a      	b.n	8000a5c <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0xf4>
    }
    else
    {
        //DBGLN("Config LoRa");
        ConfigModParamsLoRa(bw, sf, cr);
 8000a26:	1c7b      	adds	r3, r7, #1
 8000a28:	781c      	ldrb	r4, [r3, #0]
 8000a2a:	1cbb      	adds	r3, r7, #2
 8000a2c:	781a      	ldrb	r2, [r3, #0]
 8000a2e:	1cfb      	adds	r3, r7, #3
 8000a30:	7819      	ldrb	r1, [r3, #0]
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	0023      	movs	r3, r4
 8000a36:	f000 f905 	bl	8000c44 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh>
        SetPacketParamsLoRa(PreambleLength, SX1280_LORA_PACKET_IMPLICIT,
 8000a3a:	2328      	movs	r3, #40	; 0x28
 8000a3c:	18fb      	adds	r3, r7, r3
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	222c      	movs	r2, #44	; 0x2c
 8000a42:	18ba      	adds	r2, r7, r2
 8000a44:	7814      	ldrb	r4, [r2, #0]
 8000a46:	2224      	movs	r2, #36	; 0x24
 8000a48:	18ba      	adds	r2, r7, r2
 8000a4a:	7811      	ldrb	r1, [r2, #0]
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	9301      	str	r3, [sp, #4]
 8000a50:	2300      	movs	r3, #0
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	0023      	movs	r3, r4
 8000a56:	2280      	movs	r2, #128	; 0x80
 8000a58:	f000 f940 	bl	8000cdc <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th>
                            _PayloadLength, SX1280_LORA_CRC_OFF, InvertIQ);
    }
    SetFrequencyReg(freq);
 8000a5c:	6a3a      	ldr	r2, [r7, #32]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	0011      	movs	r1, r2
 8000a62:	0018      	movs	r0, r3
 8000a64:	f000 fa38 	bl	8000ed8 <_ZN12SX1280Driver15SetFrequencyRegEm>
    SetDioIrqParams(SX1280_IRQ_RADIO_ALL, irqs);
 8000a68:	230f      	movs	r3, #15
 8000a6a:	18fb      	adds	r3, r7, r3
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	4909      	ldr	r1, [pc, #36]	; (8000a98 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0x130>)
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	2300      	movs	r3, #0
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f000 fa7f 	bl	8000f7c <_ZN12SX1280Driver15SetDioIrqParamsEtttt>
    SetRxTimeoutUs(interval);
 8000a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	0011      	movs	r1, r2
 8000a84:	0018      	movs	r0, r3
 8000a86:	f000 f809 	bl	8000a9c <_ZN12SX1280Driver14SetRxTimeoutUsEm>
}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b004      	add	sp, #16
 8000a90:	bdb0      	pop	{r4, r5, r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	200000f0 	.word	0x200000f0
 8000a98:	0000ffff 	.word	0x0000ffff

08000a9c <_ZN12SX1280Driver14SetRxTimeoutUsEm>:

void SX1280Driver::SetRxTimeoutUs(uint32_t interval)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
    if (interval)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d00f      	beq.n	8000acc <_ZN12SX1280Driver14SetRxTimeoutUsEm+0x30>
    {
        timeout = interval * 1000 / RX_TIMEOUT_PERIOD_BASE_NANOS; // number of periods for the SX1280 to timeout
 8000aac:	683a      	ldr	r2, [r7, #0]
 8000aae:	0013      	movs	r3, r2
 8000ab0:	015b      	lsls	r3, r3, #5
 8000ab2:	1a9b      	subs	r3, r3, r2
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	189b      	adds	r3, r3, r2
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	4908      	ldr	r1, [pc, #32]	; (8000adc <_ZN12SX1280Driver14SetRxTimeoutUsEm+0x40>)
 8000abc:	0018      	movs	r0, r3
 8000abe:	f7ff fb35 	bl	800012c <__udivsi3>
 8000ac2:	0003      	movs	r3, r0
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	851a      	strh	r2, [r3, #40]	; 0x28
    }
    else
    {
        timeout = 0xFFFF;   // no timeout, continuous mode
    }
}
 8000aca:	e003      	b.n	8000ad4 <_ZN12SX1280Driver14SetRxTimeoutUsEm+0x38>
        timeout = 0xFFFF;   // no timeout, continuous mode
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2201      	movs	r2, #1
 8000ad0:	4252      	negs	r2, r2
 8000ad2:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b002      	add	sp, #8
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	00003d09 	.word	0x00003d09

08000ae0 <_ZN12SX1280Driver14SetOutputPowerEa>:

void SX1280Driver::SetOutputPower(int8_t power)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	000a      	movs	r2, r1
 8000aea:	1cfb      	adds	r3, r7, #3
 8000aec:	701a      	strb	r2, [r3, #0]
    if (power < -18) power = -18;
 8000aee:	1cfb      	adds	r3, r7, #3
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	b25b      	sxtb	r3, r3
 8000af4:	3312      	adds	r3, #18
 8000af6:	da03      	bge.n	8000b00 <_ZN12SX1280Driver14SetOutputPowerEa+0x20>
 8000af8:	1cfb      	adds	r3, r7, #3
 8000afa:	22ee      	movs	r2, #238	; 0xee
 8000afc:	701a      	strb	r2, [r3, #0]
 8000afe:	e007      	b.n	8000b10 <_ZN12SX1280Driver14SetOutputPowerEa+0x30>
    else if (13 < power) power = 13;
 8000b00:	1cfb      	adds	r3, r7, #3
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b25b      	sxtb	r3, r3
 8000b06:	2b0d      	cmp	r3, #13
 8000b08:	dd02      	ble.n	8000b10 <_ZN12SX1280Driver14SetOutputPowerEa+0x30>
 8000b0a:	1cfb      	adds	r3, r7, #3
 8000b0c:	220d      	movs	r2, #13
 8000b0e:	701a      	strb	r2, [r3, #0]
    uint8_t buf[2] = {(uint8_t)(power + 18), (uint8_t)SX1280_RADIO_RAMP_04_US};
 8000b10:	210c      	movs	r1, #12
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2200      	movs	r2, #0
 8000b16:	801a      	strh	r2, [r3, #0]
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	2220      	movs	r2, #32
 8000b1c:	705a      	strb	r2, [r3, #1]
 8000b1e:	1cfb      	adds	r3, r7, #3
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	3312      	adds	r3, #18
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	701a      	strb	r2, [r3, #0]
    hal.WriteCommand(SX1280_RADIO_SET_TXPARAMS, buf, sizeof(buf));
 8000b2a:	187a      	adds	r2, r7, r1
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <_ZN12SX1280Driver14SetOutputPowerEa+0x60>)
 8000b2e:	2302      	movs	r3, #2
 8000b30:	218e      	movs	r1, #142	; 0x8e
 8000b32:	f000 fc59 	bl	80013e8 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
    //DBGLN("SetPower: %d", buf[0]);
    return;
 8000b36:	46c0      	nop			; (mov r8, r8)
}
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b004      	add	sp, #16
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	200000f0 	.word	0x200000f0

08000b44 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>:

void SX1280Driver::SetMode(SX1280_RadioOperatingModes_t OPmode)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	000a      	movs	r2, r1
 8000b4e:	1cfb      	adds	r3, r7, #3
 8000b50:	701a      	strb	r2, [r3, #0]
    if (OPmode == currOpmode)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2234      	movs	r2, #52	; 0x34
 8000b56:	5c9b      	ldrb	r3, [r3, r2]
 8000b58:	1cfa      	adds	r2, r7, #3
 8000b5a:	7812      	ldrb	r2, [r2, #0]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d066      	beq.n	8000c2e <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xea>
    {
       return;
    }

    uint8_t buf[3];
    uint32_t switchDelay = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]

    switch (OPmode)
 8000b64:	1cfb      	adds	r3, r7, #3
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b07      	cmp	r3, #7
 8000b6a:	d851      	bhi.n	8000c10 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xcc>
 8000b6c:	009a      	lsls	r2, r3, #2
 8000b6e:	4b32      	ldr	r3, [pc, #200]	; (8000c38 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf4>)
 8000b70:	18d3      	adds	r3, r2, r3
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	469f      	mov	pc, r3
    {

    case SX1280_MODE_SLEEP:
        hal.WriteCommand(SX1280_RADIO_SET_SLEEP, 0x01);
 8000b76:	4b31      	ldr	r3, [pc, #196]	; (8000c3c <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2184      	movs	r1, #132	; 0x84
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f000 fbf9 	bl	8001374 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
        break;
 8000b82:	e048      	b.n	8000c16 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd2>

    case SX1280_MODE_CALIBRATION:
        break;

    case SX1280_MODE_STDBY_RC:
        hal.WriteCommand(SX1280_RADIO_SET_STANDBY, SX1280_STDBY_RC);
 8000b84:	4b2d      	ldr	r3, [pc, #180]	; (8000c3c <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	2180      	movs	r1, #128	; 0x80
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 fbf2 	bl	8001374 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
        switchDelay = 1500;
 8000b90:	4b2b      	ldr	r3, [pc, #172]	; (8000c40 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xfc>)
 8000b92:	60fb      	str	r3, [r7, #12]
        break;
 8000b94:	e03f      	b.n	8000c16 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd2>

    case SX1280_MODE_STDBY_XOSC:
        hal.WriteCommand(SX1280_RADIO_SET_STANDBY, SX1280_STDBY_XOSC);
 8000b96:	4b29      	ldr	r3, [pc, #164]	; (8000c3c <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2180      	movs	r1, #128	; 0x80
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f000 fbe9 	bl	8001374 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
        switchDelay = 50;
 8000ba2:	2332      	movs	r3, #50	; 0x32
 8000ba4:	60fb      	str	r3, [r7, #12]
        break;
 8000ba6:	e036      	b.n	8000c16 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd2>

    case SX1280_MODE_FS:
        hal.WriteCommand(SX1280_RADIO_SET_FS, 0x00);
 8000ba8:	4b24      	ldr	r3, [pc, #144]	; (8000c3c <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	21c1      	movs	r1, #193	; 0xc1
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f000 fbe0 	bl	8001374 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
        switchDelay = 70;
 8000bb4:	2346      	movs	r3, #70	; 0x46
 8000bb6:	60fb      	str	r3, [r7, #12]
        break;
 8000bb8:	e02d      	b.n	8000c16 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd2>

    case SX1280_MODE_RX:
        buf[0] = RX_TIMEOUT_PERIOD_BASE;
 8000bba:	2108      	movs	r1, #8
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
        buf[1] = timeout >> 8;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000bc6:	121b      	asrs	r3, r3, #8
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	705a      	strb	r2, [r3, #1]
        buf[2] = timeout & 0xFF;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	709a      	strb	r2, [r3, #2]
        hal.WriteCommand(SX1280_RADIO_SET_RX, buf, sizeof(buf));
 8000bd8:	187a      	adds	r2, r7, r1
 8000bda:	4818      	ldr	r0, [pc, #96]	; (8000c3c <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8000bdc:	2303      	movs	r3, #3
 8000bde:	2182      	movs	r1, #130	; 0x82
 8000be0:	f000 fc02 	bl	80013e8 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
        switchDelay = 100;
 8000be4:	2364      	movs	r3, #100	; 0x64
 8000be6:	60fb      	str	r3, [r7, #12]
        break;
 8000be8:	e015      	b.n	8000c16 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd2>

    case SX1280_MODE_TX:
        //uses timeout Time-out duration = periodBase * periodBaseCount
        buf[0] = RX_TIMEOUT_PERIOD_BASE;
 8000bea:	2108      	movs	r1, #8
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
        buf[1] = 0xFF; // no timeout set for now
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	22ff      	movs	r2, #255	; 0xff
 8000bf6:	705a      	strb	r2, [r3, #1]
        buf[2] = 0xFF; // TODO dynamic timeout based on expected onairtime
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	22ff      	movs	r2, #255	; 0xff
 8000bfc:	709a      	strb	r2, [r3, #2]
        hal.WriteCommand(SX1280_RADIO_SET_TX, buf, sizeof(buf));
 8000bfe:	187a      	adds	r2, r7, r1
 8000c00:	480e      	ldr	r0, [pc, #56]	; (8000c3c <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8000c02:	2303      	movs	r3, #3
 8000c04:	2183      	movs	r1, #131	; 0x83
 8000c06:	f000 fbef 	bl	80013e8 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
        switchDelay = 100;
 8000c0a:	2364      	movs	r3, #100	; 0x64
 8000c0c:	60fb      	str	r3, [r7, #12]
        break;
 8000c0e:	e002      	b.n	8000c16 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd2>

    case SX1280_MODE_CAD:
        break;

    default:
        break;
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	e000      	b.n	8000c16 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd2>
        break;
 8000c14:	46c0      	nop			; (mov r8, r8)
    }
    hal.BusyDelay(switchDelay);
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8000c1a:	0011      	movs	r1, r2
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f7ff fdf3 	bl	8000808 <_ZNK9SX1280Hal9BusyDelayEm>

    currOpmode = OPmode;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	1cfa      	adds	r2, r7, #3
 8000c26:	2134      	movs	r1, #52	; 0x34
 8000c28:	7812      	ldrb	r2, [r2, #0]
 8000c2a:	545a      	strb	r2, [r3, r1]
 8000c2c:	e000      	b.n	8000c30 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xec>
       return;
 8000c2e:	46c0      	nop			; (mov r8, r8)
}
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b004      	add	sp, #16
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	0800a108 	.word	0x0800a108
 8000c3c:	200000f0 	.word	0x200000f0
 8000c40:	000005dc 	.word	0x000005dc

08000c44 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh>:

void SX1280Driver::ConfigModParamsLoRa(uint8_t bw, uint8_t sf, uint8_t cr)
{
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	000c      	movs	r4, r1
 8000c4e:	0010      	movs	r0, r2
 8000c50:	0019      	movs	r1, r3
 8000c52:	1cfb      	adds	r3, r7, #3
 8000c54:	1c22      	adds	r2, r4, #0
 8000c56:	701a      	strb	r2, [r3, #0]
 8000c58:	1cbb      	adds	r3, r7, #2
 8000c5a:	1c02      	adds	r2, r0, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	1c7b      	adds	r3, r7, #1
 8000c60:	1c0a      	adds	r2, r1, #0
 8000c62:	701a      	strb	r2, [r3, #0]
    // Care must therefore be taken to ensure that modulation parameters are set using the command
    // SetModulationParam() only after defining the packet type SetPacketType() to be used

    uint8_t rfparams[3] = {sf, bw, cr};
 8000c64:	210c      	movs	r1, #12
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	1cba      	adds	r2, r7, #2
 8000c6a:	7812      	ldrb	r2, [r2, #0]
 8000c6c:	701a      	strb	r2, [r3, #0]
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	1cfa      	adds	r2, r7, #3
 8000c72:	7812      	ldrb	r2, [r2, #0]
 8000c74:	705a      	strb	r2, [r3, #1]
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	1c7a      	adds	r2, r7, #1
 8000c7a:	7812      	ldrb	r2, [r2, #0]
 8000c7c:	709a      	strb	r2, [r3, #2]

    hal.WriteCommand(SX1280_RADIO_SET_MODULATIONPARAMS, rfparams, sizeof(rfparams));
 8000c7e:	187a      	adds	r2, r7, r1
 8000c80:	4814      	ldr	r0, [pc, #80]	; (8000cd4 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x90>)
 8000c82:	2303      	movs	r3, #3
 8000c84:	218b      	movs	r1, #139	; 0x8b
 8000c86:	f000 fbaf 	bl	80013e8 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>

    switch (sf)
 8000c8a:	1cbb      	adds	r3, r7, #2
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b80      	cmp	r3, #128	; 0x80
 8000c90:	d00e      	beq.n	8000cb0 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x6c>
 8000c92:	dc14      	bgt.n	8000cbe <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x7a>
 8000c94:	2b70      	cmp	r3, #112	; 0x70
 8000c96:	d00b      	beq.n	8000cb0 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x6c>
 8000c98:	dc11      	bgt.n	8000cbe <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x7a>
 8000c9a:	2b50      	cmp	r3, #80	; 0x50
 8000c9c:	d001      	beq.n	8000ca2 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x5e>
 8000c9e:	2b60      	cmp	r3, #96	; 0x60
 8000ca0:	d10d      	bne.n	8000cbe <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x7a>
    {
    case SX1280_LORA_SF5:
    case SX1280_LORA_SF6:
        hal.WriteRegister(0x925, 0x1E); // for SF5 or SF6
 8000ca2:	490d      	ldr	r1, [pc, #52]	; (8000cd8 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x94>)
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x90>)
 8000ca6:	221e      	movs	r2, #30
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f000 fc9f 	bl	80015ec <_ZN9SX1280Hal13WriteRegisterEth>
        break;
 8000cae:	e00d      	b.n	8000ccc <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x88>
    case SX1280_LORA_SF7:
    case SX1280_LORA_SF8:
        hal.WriteRegister(0x925, 0x37); // for SF7 or SF8
 8000cb0:	4909      	ldr	r1, [pc, #36]	; (8000cd8 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x94>)
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x90>)
 8000cb4:	2237      	movs	r2, #55	; 0x37
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f000 fc98 	bl	80015ec <_ZN9SX1280Hal13WriteRegisterEth>
        break;
 8000cbc:	e006      	b.n	8000ccc <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x88>
    default:
        hal.WriteRegister(0x925, 0x32); // for SF9, SF10, SF11, SF12
 8000cbe:	4906      	ldr	r1, [pc, #24]	; (8000cd8 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x94>)
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x90>)
 8000cc2:	2232      	movs	r2, #50	; 0x32
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f000 fc91 	bl	80015ec <_ZN9SX1280Hal13WriteRegisterEth>
    }
}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b005      	add	sp, #20
 8000cd2:	bd90      	pop	{r4, r7, pc}
 8000cd4:	200000f0 	.word	0x200000f0
 8000cd8:	00000925 	.word	0x00000925

08000cdc <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th>:

void SX1280Driver::SetPacketParamsLoRa(uint8_t PreambleLength, SX1280_RadioLoRaPacketLengthsModes_t HeaderType,
                                       uint8_t PayloadLength, SX1280_RadioLoRaCrcModes_t crc,
                                       uint8_t InvertIQ)
{
 8000cdc:	b590      	push	{r4, r7, lr}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	000c      	movs	r4, r1
 8000ce6:	0010      	movs	r0, r2
 8000ce8:	0019      	movs	r1, r3
 8000cea:	1cfb      	adds	r3, r7, #3
 8000cec:	1c22      	adds	r2, r4, #0
 8000cee:	701a      	strb	r2, [r3, #0]
 8000cf0:	1cbb      	adds	r3, r7, #2
 8000cf2:	1c02      	adds	r2, r0, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
 8000cf6:	1c7b      	adds	r3, r7, #1
 8000cf8:	1c0a      	adds	r2, r1, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
    uint8_t buf[7];

    buf[0] = PreambleLength;
 8000cfc:	2108      	movs	r1, #8
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	1cfa      	adds	r2, r7, #3
 8000d02:	7812      	ldrb	r2, [r2, #0]
 8000d04:	701a      	strb	r2, [r3, #0]
    buf[1] = HeaderType;
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	1cba      	adds	r2, r7, #2
 8000d0a:	7812      	ldrb	r2, [r2, #0]
 8000d0c:	705a      	strb	r2, [r3, #1]
    buf[2] = PayloadLength;
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	1c7a      	adds	r2, r7, #1
 8000d12:	7812      	ldrb	r2, [r2, #0]
 8000d14:	709a      	strb	r2, [r3, #2]
    buf[3] = crc;
 8000d16:	187a      	adds	r2, r7, r1
 8000d18:	2320      	movs	r3, #32
 8000d1a:	18fb      	adds	r3, r7, r3
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	70d3      	strb	r3, [r2, #3]
    buf[4] = InvertIQ ? SX1280_LORA_IQ_INVERTED : SX1280_LORA_IQ_NORMAL;
 8000d20:	2324      	movs	r3, #36	; 0x24
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th+0x52>
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	e000      	b.n	8000d30 <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th+0x54>
 8000d2e:	2240      	movs	r2, #64	; 0x40
 8000d30:	2108      	movs	r1, #8
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	711a      	strb	r2, [r3, #4]
    buf[5] = 0x00;
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	2200      	movs	r2, #0
 8000d3a:	715a      	strb	r2, [r3, #5]
    buf[6] = 0x00;
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	2200      	movs	r2, #0
 8000d40:	719a      	strb	r2, [r3, #6]

    hal.WriteCommand(SX1280_RADIO_SET_PACKETPARAMS, buf, sizeof(buf));
 8000d42:	187a      	adds	r2, r7, r1
 8000d44:	4804      	ldr	r0, [pc, #16]	; (8000d58 <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th+0x7c>)
 8000d46:	2307      	movs	r3, #7
 8000d48:	218c      	movs	r1, #140	; 0x8c
 8000d4a:	f000 fb4d 	bl	80013e8 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	46bd      	mov	sp, r7
 8000d52:	b005      	add	sp, #20
 8000d54:	bd90      	pop	{r4, r7, pc}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	200000f0 	.word	0x200000f0

08000d5c <_ZN12SX1280Driver19ConfigModParamsFLRCEhhh>:

void SX1280Driver::ConfigModParamsFLRC(uint8_t bw, uint8_t cr, uint8_t bt)
{
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	000c      	movs	r4, r1
 8000d66:	0010      	movs	r0, r2
 8000d68:	0019      	movs	r1, r3
 8000d6a:	1cfb      	adds	r3, r7, #3
 8000d6c:	1c22      	adds	r2, r4, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
 8000d70:	1cbb      	adds	r3, r7, #2
 8000d72:	1c02      	adds	r2, r0, #0
 8000d74:	701a      	strb	r2, [r3, #0]
 8000d76:	1c7b      	adds	r3, r7, #1
 8000d78:	1c0a      	adds	r2, r1, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
    uint8_t rfparams[3] = {bw, cr, bt};
 8000d7c:	210c      	movs	r1, #12
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	1cfa      	adds	r2, r7, #3
 8000d82:	7812      	ldrb	r2, [r2, #0]
 8000d84:	701a      	strb	r2, [r3, #0]
 8000d86:	187b      	adds	r3, r7, r1
 8000d88:	1cba      	adds	r2, r7, #2
 8000d8a:	7812      	ldrb	r2, [r2, #0]
 8000d8c:	705a      	strb	r2, [r3, #1]
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	1c7a      	adds	r2, r7, #1
 8000d92:	7812      	ldrb	r2, [r2, #0]
 8000d94:	709a      	strb	r2, [r3, #2]
    hal.WriteCommand(SX1280_RADIO_SET_MODULATIONPARAMS, rfparams, sizeof(rfparams));
 8000d96:	187a      	adds	r2, r7, r1
 8000d98:	4804      	ldr	r0, [pc, #16]	; (8000dac <_ZN12SX1280Driver19ConfigModParamsFLRCEhhh+0x50>)
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	218b      	movs	r1, #139	; 0x8b
 8000d9e:	f000 fb23 	bl	80013e8 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b005      	add	sp, #20
 8000da8:	bd90      	pop	{r4, r7, pc}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	200000f0 	.word	0x200000f0

08000db0 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt>:
                                       uint8_t crc,
                                       uint8_t PreambleLength,
                                       uint8_t PayloadLength,
                                       uint32_t syncWord,
                                       uint16_t crcSeed)
{
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	000c      	movs	r4, r1
 8000dba:	0010      	movs	r0, r2
 8000dbc:	0019      	movs	r1, r3
 8000dbe:	1cfb      	adds	r3, r7, #3
 8000dc0:	1c22      	adds	r2, r4, #0
 8000dc2:	701a      	strb	r2, [r3, #0]
 8000dc4:	1cbb      	adds	r3, r7, #2
 8000dc6:	1c02      	adds	r2, r0, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
 8000dca:	1c7b      	adds	r3, r7, #1
 8000dcc:	1c0a      	adds	r2, r1, #0
 8000dce:	701a      	strb	r2, [r3, #0]
    if (PreambleLength < 8) PreambleLength = 8;
 8000dd0:	1c7b      	adds	r3, r7, #1
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b07      	cmp	r3, #7
 8000dd6:	d802      	bhi.n	8000dde <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x2e>
 8000dd8:	1c7b      	adds	r3, r7, #1
 8000dda:	2208      	movs	r2, #8
 8000ddc:	701a      	strb	r2, [r3, #0]
        PreambleLength = ((PreambleLength / 4) - 1) << 4;
 8000dde:	1c7b      	adds	r3, r7, #1
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	089b      	lsrs	r3, r3, #2
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	3b01      	subs	r3, #1
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	1c7b      	adds	r3, r7, #1
 8000dec:	0112      	lsls	r2, r2, #4
 8000dee:	701a      	strb	r2, [r3, #0]
    crc = (crc) ? SX1280_FLRC_CRC_2_BYTE : SX1280_FLRC_CRC_OFF;
 8000df0:	1cbb      	adds	r3, r7, #2
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x4c>
 8000df8:	2220      	movs	r2, #32
 8000dfa:	e000      	b.n	8000dfe <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x4e>
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	1cbb      	adds	r3, r7, #2
 8000e00:	701a      	strb	r2, [r3, #0]

    uint8_t buf[7];
    buf[0] = PreambleLength;                    // AGCPreambleLength
 8000e02:	2108      	movs	r1, #8
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	1c7a      	adds	r2, r7, #1
 8000e08:	7812      	ldrb	r2, [r2, #0]
 8000e0a:	701a      	strb	r2, [r3, #0]
    buf[1] = SX1280_FLRC_SYNC_WORD_LEN_P32S;    // SyncWordLength
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	2204      	movs	r2, #4
 8000e10:	705a      	strb	r2, [r3, #1]
    buf[2] = SX1280_FLRC_RX_MATCH_SYNC_WORD_1;  // SyncWordMatch
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	2210      	movs	r2, #16
 8000e16:	709a      	strb	r2, [r3, #2]
    buf[3] = HeaderType;                        // PacketType
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	1cfa      	adds	r2, r7, #3
 8000e1c:	7812      	ldrb	r2, [r2, #0]
 8000e1e:	70da      	strb	r2, [r3, #3]
    buf[4] = PayloadLength;                     // PayloadLength
 8000e20:	187a      	adds	r2, r7, r1
 8000e22:	2320      	movs	r3, #32
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	7113      	strb	r3, [r2, #4]
    buf[5] = (crc << 4);                        // CrcLength
 8000e2a:	1cbb      	adds	r3, r7, #2
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	011b      	lsls	r3, r3, #4
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	000c      	movs	r4, r1
 8000e34:	193b      	adds	r3, r7, r4
 8000e36:	715a      	strb	r2, [r3, #5]
    buf[6] = 0x08;                              // Must be whitening disabled
 8000e38:	193b      	adds	r3, r7, r4
 8000e3a:	2208      	movs	r2, #8
 8000e3c:	719a      	strb	r2, [r3, #6]
    hal.WriteCommand(SX1280_RADIO_SET_PACKETPARAMS, buf, sizeof(buf));
 8000e3e:	193a      	adds	r2, r7, r4
 8000e40:	4821      	ldr	r0, [pc, #132]	; (8000ec8 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x118>)
 8000e42:	2307      	movs	r3, #7
 8000e44:	218c      	movs	r1, #140	; 0x8c
 8000e46:	f000 facf 	bl	80013e8 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>

    // CRC seed (use dedicated cipher)
    buf[0] = (uint8_t)(crcSeed >> 8);
 8000e4a:	2028      	movs	r0, #40	; 0x28
 8000e4c:	183b      	adds	r3, r7, r0
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	121b      	asrs	r3, r3, #8
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	0021      	movs	r1, r4
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	701a      	strb	r2, [r3, #0]
    buf[1] = (uint8_t)crcSeed;
 8000e5a:	183b      	adds	r3, r7, r0
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	705a      	strb	r2, [r3, #1]
    hal.WriteRegister(SX1280_REG_FLRC_CRC_SEED, buf, 2);
 8000e64:	000c      	movs	r4, r1
 8000e66:	193a      	adds	r2, r7, r4
 8000e68:	4918      	ldr	r1, [pc, #96]	; (8000ecc <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x11c>)
 8000e6a:	4817      	ldr	r0, [pc, #92]	; (8000ec8 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x118>)
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	f000 fb6b 	bl	8001548 <_ZN9SX1280Hal13WriteRegisterEtPhh>

    // CRC POLY 0x3D65
    buf[0] = 0x3D;
 8000e72:	193b      	adds	r3, r7, r4
 8000e74:	223d      	movs	r2, #61	; 0x3d
 8000e76:	701a      	strb	r2, [r3, #0]
    buf[1] = 0x65;
 8000e78:	193b      	adds	r3, r7, r4
 8000e7a:	2265      	movs	r2, #101	; 0x65
 8000e7c:	705a      	strb	r2, [r3, #1]
    hal.WriteRegister(SX1280_REG_FLRC_CRC_POLY, buf, 2);
 8000e7e:	193a      	adds	r2, r7, r4
 8000e80:	4913      	ldr	r1, [pc, #76]	; (8000ed0 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x120>)
 8000e82:	4811      	ldr	r0, [pc, #68]	; (8000ec8 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x118>)
 8000e84:	2302      	movs	r3, #2
 8000e86:	f000 fb5f 	bl	8001548 <_ZN9SX1280Hal13WriteRegisterEtPhh>

    // Set SyncWord1
    buf[0] = (uint8_t)(syncWord >> 24);
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8c:	0e1b      	lsrs	r3, r3, #24
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	0021      	movs	r1, r4
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	701a      	strb	r2, [r3, #0]
    buf[1] = (uint8_t)(syncWord >> 16);
 8000e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e98:	0c1b      	lsrs	r3, r3, #16
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	705a      	strb	r2, [r3, #1]
    buf[2] = (uint8_t)(syncWord >> 8);
 8000ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea2:	0a1b      	lsrs	r3, r3, #8
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	709a      	strb	r2, [r3, #2]
    buf[3] = (uint8_t)syncWord;
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	187b      	adds	r3, r7, r1
 8000eb0:	70da      	strb	r2, [r3, #3]
    hal.WriteRegister(SX1280_REG_FLRC_SYNC_WORD, buf, 4);
 8000eb2:	187a      	adds	r2, r7, r1
 8000eb4:	4907      	ldr	r1, [pc, #28]	; (8000ed4 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x124>)
 8000eb6:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x118>)
 8000eb8:	2304      	movs	r3, #4
 8000eba:	f000 fb45 	bl	8001548 <_ZN9SX1280Hal13WriteRegisterEtPhh>
}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b005      	add	sp, #20
 8000ec4:	bd90      	pop	{r4, r7, pc}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	200000f0 	.word	0x200000f0
 8000ecc:	000009c8 	.word	0x000009c8
 8000ed0:	000009c6 	.word	0x000009c6
 8000ed4:	000009cf 	.word	0x000009cf

08000ed8 <_ZN12SX1280Driver15SetFrequencyRegEm>:
    hal.WriteCommand(SX1280_RADIO_SET_RFFREQUENCY, buf, sizeof(buf));
    currFreq = Reqfreq;
}

void SX1280Driver::SetFrequencyReg(uint32_t freq)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
    uint8_t buf[3] = {0};
 8000ee2:	240c      	movs	r4, #12
 8000ee4:	193b      	adds	r3, r7, r4
 8000ee6:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <_ZN12SX1280Driver15SetFrequencyRegEm+0x58>)
 8000ee8:	7812      	ldrb	r2, [r2, #0]
 8000eea:	701a      	strb	r2, [r3, #0]
 8000eec:	2201      	movs	r2, #1
 8000eee:	189b      	adds	r3, r3, r2
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f008 f8e8 	bl	80090ca <memset>

    buf[0] = (uint8_t)((freq >> 16) & 0xFF);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	0c1b      	lsrs	r3, r3, #16
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	193b      	adds	r3, r7, r4
 8000f02:	701a      	strb	r2, [r3, #0]
    buf[1] = (uint8_t)((freq >> 8) & 0xFF);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	0a1b      	lsrs	r3, r3, #8
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	193b      	adds	r3, r7, r4
 8000f0c:	705a      	strb	r2, [r3, #1]
    buf[2] = (uint8_t)(freq & 0xFF);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	193b      	adds	r3, r7, r4
 8000f14:	709a      	strb	r2, [r3, #2]

    hal.WriteCommand(SX1280_RADIO_SET_RFFREQUENCY, buf, sizeof(buf));
 8000f16:	193a      	adds	r2, r7, r4
 8000f18:	4806      	ldr	r0, [pc, #24]	; (8000f34 <_ZN12SX1280Driver15SetFrequencyRegEm+0x5c>)
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	2186      	movs	r1, #134	; 0x86
 8000f1e:	f000 fa63 	bl	80013e8 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
    currFreq = freq;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000f28:	46c0      	nop			; (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b005      	add	sp, #20
 8000f2e:	bd90      	pop	{r4, r7, pc}
 8000f30:	08009b00 	.word	0x08009b00
 8000f34:	200000f0 	.word	0x200000f0

08000f38 <_ZN12SX1280Driver11SetFIFOaddrEhh>:
    efeHz = 1.55 * efe / (1600.0f / 800000.0f);
    return efeHz;
}

void SX1280Driver::SetFIFOaddr(uint8_t txBaseAddr, uint8_t rxBaseAddr)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	0008      	movs	r0, r1
 8000f42:	0011      	movs	r1, r2
 8000f44:	1cfb      	adds	r3, r7, #3
 8000f46:	1c02      	adds	r2, r0, #0
 8000f48:	701a      	strb	r2, [r3, #0]
 8000f4a:	1cbb      	adds	r3, r7, #2
 8000f4c:	1c0a      	adds	r2, r1, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
    uint8_t buf[2];

    buf[0] = txBaseAddr;
 8000f50:	210c      	movs	r1, #12
 8000f52:	187b      	adds	r3, r7, r1
 8000f54:	1cfa      	adds	r2, r7, #3
 8000f56:	7812      	ldrb	r2, [r2, #0]
 8000f58:	701a      	strb	r2, [r3, #0]
    buf[1] = rxBaseAddr;
 8000f5a:	187b      	adds	r3, r7, r1
 8000f5c:	1cba      	adds	r2, r7, #2
 8000f5e:	7812      	ldrb	r2, [r2, #0]
 8000f60:	705a      	strb	r2, [r3, #1]
    hal.WriteCommand(SX1280_RADIO_SET_BUFFERBASEADDRESS, buf, sizeof(buf));
 8000f62:	187a      	adds	r2, r7, r1
 8000f64:	4804      	ldr	r0, [pc, #16]	; (8000f78 <_ZN12SX1280Driver11SetFIFOaddrEhh+0x40>)
 8000f66:	2302      	movs	r3, #2
 8000f68:	218f      	movs	r1, #143	; 0x8f
 8000f6a:	f000 fa3d 	bl	80013e8 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b004      	add	sp, #16
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	200000f0 	.word	0x200000f0

08000f7c <_ZN12SX1280Driver15SetDioIrqParamsEtttt>:

void SX1280Driver::SetDioIrqParams(uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask)
{
 8000f7c:	b5b0      	push	{r4, r5, r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	000c      	movs	r4, r1
 8000f86:	0010      	movs	r0, r2
 8000f88:	0019      	movs	r1, r3
 8000f8a:	250a      	movs	r5, #10
 8000f8c:	197b      	adds	r3, r7, r5
 8000f8e:	1c22      	adds	r2, r4, #0
 8000f90:	801a      	strh	r2, [r3, #0]
 8000f92:	2408      	movs	r4, #8
 8000f94:	193b      	adds	r3, r7, r4
 8000f96:	1c02      	adds	r2, r0, #0
 8000f98:	801a      	strh	r2, [r3, #0]
 8000f9a:	1dbb      	adds	r3, r7, #6
 8000f9c:	1c0a      	adds	r2, r1, #0
 8000f9e:	801a      	strh	r2, [r3, #0]
    uint8_t buf[8];

    buf[0] = (uint8_t)((irqMask >> 8) & 0x00FF);
 8000fa0:	0028      	movs	r0, r5
 8000fa2:	183b      	adds	r3, r7, r0
 8000fa4:	881b      	ldrh	r3, [r3, #0]
 8000fa6:	0a1b      	lsrs	r3, r3, #8
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	2110      	movs	r1, #16
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	701a      	strb	r2, [r3, #0]
    buf[1] = (uint8_t)(irqMask & 0x00FF);
 8000fb2:	183b      	adds	r3, r7, r0
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	187b      	adds	r3, r7, r1
 8000fba:	705a      	strb	r2, [r3, #1]
    buf[2] = (uint8_t)((dio1Mask >> 8) & 0x00FF);
 8000fbc:	193b      	adds	r3, r7, r4
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	709a      	strb	r2, [r3, #2]
    buf[3] = (uint8_t)(dio1Mask & 0x00FF);
 8000fca:	193b      	adds	r3, r7, r4
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	187b      	adds	r3, r7, r1
 8000fd2:	70da      	strb	r2, [r3, #3]
    buf[4] = (uint8_t)((dio2Mask >> 8) & 0x00FF);
 8000fd4:	1dbb      	adds	r3, r7, #6
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	0a1b      	lsrs	r3, r3, #8
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	711a      	strb	r2, [r3, #4]
    buf[5] = (uint8_t)(dio2Mask & 0x00FF);
 8000fe2:	1dbb      	adds	r3, r7, #6
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	187b      	adds	r3, r7, r1
 8000fea:	715a      	strb	r2, [r3, #5]
    buf[6] = (uint8_t)((dio3Mask >> 8) & 0x00FF);
 8000fec:	2028      	movs	r0, #40	; 0x28
 8000fee:	183b      	adds	r3, r7, r0
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	0a1b      	lsrs	r3, r3, #8
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	187b      	adds	r3, r7, r1
 8000ffa:	719a      	strb	r2, [r3, #6]
    buf[7] = (uint8_t)(dio3Mask & 0x00FF);
 8000ffc:	183b      	adds	r3, r7, r0
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	187b      	adds	r3, r7, r1
 8001004:	71da      	strb	r2, [r3, #7]

    hal.WriteCommand(SX1280_RADIO_SET_DIOIRQPARAMS, buf, sizeof(buf));
 8001006:	187a      	adds	r2, r7, r1
 8001008:	4804      	ldr	r0, [pc, #16]	; (800101c <_ZN12SX1280Driver15SetDioIrqParamsEtttt+0xa0>)
 800100a:	2308      	movs	r3, #8
 800100c:	218d      	movs	r1, #141	; 0x8d
 800100e:	f000 f9eb 	bl	80013e8 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	46bd      	mov	sp, r7
 8001016:	b006      	add	sp, #24
 8001018:	bdb0      	pop	{r4, r5, r7, pc}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	200000f0 	.word	0x200000f0

08001020 <_ZN12SX1280Driver12GetIrqStatusEv>:

uint16_t SX1280Driver::GetIrqStatus()
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    uint8_t status[2];

    hal.ReadCommand(SX1280_RADIO_GET_IRQSTATUS, status, 2);
 8001028:	240c      	movs	r4, #12
 800102a:	193a      	adds	r2, r7, r4
 800102c:	4809      	ldr	r0, [pc, #36]	; (8001054 <_ZN12SX1280Driver12GetIrqStatusEv+0x34>)
 800102e:	2302      	movs	r3, #2
 8001030:	2115      	movs	r1, #21
 8001032:	f000 fa1f 	bl	8001474 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh>
    return status[0] << 8 | status[1];
 8001036:	0021      	movs	r1, r4
 8001038:	187b      	adds	r3, r7, r1
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	b21a      	sxth	r2, r3
 8001040:	187b      	adds	r3, r7, r1
 8001042:	785b      	ldrb	r3, [r3, #1]
 8001044:	b21b      	sxth	r3, r3
 8001046:	4313      	orrs	r3, r2
 8001048:	b21b      	sxth	r3, r3
 800104a:	b29b      	uxth	r3, r3
}
 800104c:	0018      	movs	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	b005      	add	sp, #20
 8001052:	bd90      	pop	{r4, r7, pc}
 8001054:	200000f0 	.word	0x200000f0

08001058 <_ZN12SX1280Driver14ClearIrqStatusEt>:

void SX1280Driver::ClearIrqStatus(uint16_t irqMask)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	000a      	movs	r2, r1
 8001062:	1cbb      	adds	r3, r7, #2
 8001064:	801a      	strh	r2, [r3, #0]
    uint8_t buf[2];

    buf[0] = (uint8_t)(((uint16_t)irqMask >> 8) & 0x00FF);
 8001066:	1cbb      	adds	r3, r7, #2
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	0a1b      	lsrs	r3, r3, #8
 800106c:	b29b      	uxth	r3, r3
 800106e:	b2da      	uxtb	r2, r3
 8001070:	210c      	movs	r1, #12
 8001072:	187b      	adds	r3, r7, r1
 8001074:	701a      	strb	r2, [r3, #0]
    buf[1] = (uint8_t)((uint16_t)irqMask & 0x00FF);
 8001076:	1cbb      	adds	r3, r7, #2
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	187b      	adds	r3, r7, r1
 800107e:	705a      	strb	r2, [r3, #1]

    hal.WriteCommand(SX1280_RADIO_CLR_IRQSTATUS, buf, sizeof(buf));
 8001080:	187a      	adds	r2, r7, r1
 8001082:	4804      	ldr	r0, [pc, #16]	; (8001094 <_ZN12SX1280Driver14ClearIrqStatusEt+0x3c>)
 8001084:	2302      	movs	r3, #2
 8001086:	2197      	movs	r1, #151	; 0x97
 8001088:	f000 f9ae 	bl	80013e8 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
}
 800108c:	46c0      	nop			; (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	b004      	add	sp, #16
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200000f0 	.word	0x200000f0

08001098 <_ZN12SX1280Driver7TXnbISREv>:

void SX1280Driver::TXnbISR()
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
    currOpmode = SX1280_MODE_FS; // radio goes to FS after TX
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2234      	movs	r2, #52	; 0x34
 80010a4:	2104      	movs	r1, #4
 80010a6:	5499      	strb	r1, [r3, r2]
#ifdef DEBUG_SX1280_OTA_TIMING
    endTX = micros();
    DBGLN("TOA: %d", endTX - beginTX);
#endif
    if(TXdoneCallback) TXdoneCallback();
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <_ZN12SX1280Driver7TXnbISREv+0x1e>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	4798      	blx	r3
}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	46bd      	mov	sp, r7
 80010ba:	b002      	add	sp, #8
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <_ZN12SX1280Driver4TXnbEv>:

uint8_t FIFOaddr = 0;

void SX1280Driver::TXnb()
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
    if (currOpmode == SX1280_MODE_TX) //catch TX timeout
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2234      	movs	r2, #52	; 0x34
 80010cc:	5c9b      	ldrb	r3, [r3, r2]
 80010ce:	2b06      	cmp	r3, #6
 80010d0:	d109      	bne.n	80010e6 <_ZN12SX1280Driver4TXnbEv+0x26>
    {
        //DBGLN("Timeout!");
        SetMode(SX1280_MODE_FS);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2104      	movs	r1, #4
 80010d6:	0018      	movs	r0, r3
 80010d8:	f7ff fd34 	bl	8000b44 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>
        TXnbISR();
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	0018      	movs	r0, r3
 80010e0:	f7ff ffda 	bl	8001098 <_ZN12SX1280Driver7TXnbISREv>
        return;
 80010e4:	e02b      	b.n	800113e <_ZN12SX1280Driver4TXnbEv+0x7e>
    }
    hal.TXenable();                      // do first to allow PA stablise
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <_ZN12SX1280Driver4TXnbEv+0x84>)
 80010e8:	0018      	movs	r0, r3
 80010ea:	f000 fbcd 	bl	8001888 <_ZN9SX1280Hal8TXenableEv>
    hal.TXenable();
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <_ZN12SX1280Driver4TXnbEv+0x84>)
 80010f0:	0018      	movs	r0, r3
 80010f2:	f000 fbc9 	bl	8001888 <_ZN9SX1280Hal8TXenableEv>
    hal.TXenable();
 80010f6:	4b13      	ldr	r3, [pc, #76]	; (8001144 <_ZN12SX1280Driver4TXnbEv+0x84>)
 80010f8:	0018      	movs	r0, r3
 80010fa:	f000 fbc5 	bl	8001888 <_ZN9SX1280Hal8TXenableEv>
    hal.TXenable();
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <_ZN12SX1280Driver4TXnbEv+0x84>)
 8001100:	0018      	movs	r0, r3
 8001102:	f000 fbc1 	bl	8001888 <_ZN9SX1280Hal8TXenableEv>
    hal.TXenable();
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <_ZN12SX1280Driver4TXnbEv+0x84>)
 8001108:	0018      	movs	r0, r3
 800110a:	f000 fbbd 	bl	8001888 <_ZN9SX1280Hal8TXenableEv>
    hal.TXenable();
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <_ZN12SX1280Driver4TXnbEv+0x84>)
 8001110:	0018      	movs	r0, r3
 8001112:	f000 fbb9 	bl	8001888 <_ZN9SX1280Hal8TXenableEv>
    hal.TXenable();
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <_ZN12SX1280Driver4TXnbEv+0x84>)
 8001118:	0018      	movs	r0, r3
 800111a:	f000 fbb5 	bl	8001888 <_ZN9SX1280Hal8TXenableEv>
    hal.WriteBuffer(0x00, TXdataBuffer, PayloadLength); //todo fix offset to equal fifo addr
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3308      	adds	r3, #8
 8001122:	001a      	movs	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2130      	movs	r1, #48	; 0x30
 8001128:	5c5b      	ldrb	r3, [r3, r1]
 800112a:	4806      	ldr	r0, [pc, #24]	; (8001144 <_ZN12SX1280Driver4TXnbEv+0x84>)
 800112c:	2100      	movs	r1, #0
 800112e:	f000 fadb 	bl	80016e8 <_ZN9SX1280Hal11WriteBufferEhPVhh>
    instance->SetMode(SX1280_MODE_TX);
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <_ZN12SX1280Driver4TXnbEv+0x88>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2106      	movs	r1, #6
 8001138:	0018      	movs	r0, r3
 800113a:	f7ff fd03 	bl	8000b44 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>
#ifdef DEBUG_SX1280_OTA_TIMING
    beginTX = micros();
#endif
}
 800113e:	46bd      	mov	sp, r7
 8001140:	b002      	add	sp, #8
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200000f0 	.word	0x200000f0
 8001148:	200000f4 	.word	0x200000f4

0800114c <_ZN12SX1280Driver7RXnbISREv>:

void SX1280Driver::RXnbISR()
{
 800114c:	b5b0      	push	{r4, r5, r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
    // In continuous receive mode, the device stays in Rx mode
    if (timeout != 0xFFFF)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001158:	4a14      	ldr	r2, [pc, #80]	; (80011ac <_ZN12SX1280Driver7RXnbISREv+0x60>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d003      	beq.n	8001166 <_ZN12SX1280Driver7RXnbISREv+0x1a>
    {
        // From table 11-28, pg 81 datasheet rev 3.2
        // upon successsful receipt, when the timer is active or in single mode, it returns to STDBY_RC
        // but because we have AUTO_FS enabled we automatically transition to state SX1280_MODE_FS
        currOpmode = SX1280_MODE_FS;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2234      	movs	r2, #52	; 0x34
 8001162:	2104      	movs	r1, #4
 8001164:	5499      	strb	r1, [r3, r2]
    }
    uint8_t FIFOaddr = GetRxBufferAddr();
 8001166:	250f      	movs	r5, #15
 8001168:	197c      	adds	r4, r7, r5
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	0018      	movs	r0, r3
 800116e:	f000 f835 	bl	80011dc <_ZN12SX1280Driver15GetRxBufferAddrEv>
 8001172:	0003      	movs	r3, r0
 8001174:	7023      	strb	r3, [r4, #0]
    hal.ReadBuffer(FIFOaddr, RXdataBuffer, PayloadLength);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3318      	adds	r3, #24
 800117a:	001a      	movs	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2130      	movs	r1, #48	; 0x30
 8001180:	5c5c      	ldrb	r4, [r3, r1]
 8001182:	197b      	adds	r3, r7, r5
 8001184:	7819      	ldrb	r1, [r3, #0]
 8001186:	480a      	ldr	r0, [pc, #40]	; (80011b0 <_ZN12SX1280Driver7RXnbISREv+0x64>)
 8001188:	0023      	movs	r3, r4
 800118a:	f000 faff 	bl	800178c <_ZN9SX1280Hal10ReadBufferEhPVhh>
    GetLastPacketStats();
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	0018      	movs	r0, r3
 8001192:	f000 f83b 	bl	800120c <_ZN12SX1280Driver18GetLastPacketStatsEv>
    if(RXdoneCallback) RXdoneCallback();
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d002      	beq.n	80011a4 <_ZN12SX1280Driver7RXnbISREv+0x58>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4798      	blx	r3
}
 80011a4:	46c0      	nop			; (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b004      	add	sp, #16
 80011aa:	bdb0      	pop	{r4, r5, r7, pc}
 80011ac:	0000ffff 	.word	0x0000ffff
 80011b0:	200000f0 	.word	0x200000f0

080011b4 <_ZN12SX1280Driver4RXnbEv>:

void SX1280Driver::RXnb()
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
    hal.RXenable();
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <_ZN12SX1280Driver4RXnbEv+0x24>)
 80011be:	0018      	movs	r0, r3
 80011c0:	f000 fb82 	bl	80018c8 <_ZN9SX1280Hal8RXenableEv>
    SetMode(SX1280_MODE_RX);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2105      	movs	r1, #5
 80011c8:	0018      	movs	r0, r3
 80011ca:	f7ff fcbb 	bl	8000b44 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>
}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b002      	add	sp, #8
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	200000f0 	.word	0x200000f0

080011dc <_ZN12SX1280Driver15GetRxBufferAddrEv>:

uint8_t SX1280Driver::GetRxBufferAddr()
{
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
    uint8_t status[2] = {0};
 80011e4:	210c      	movs	r1, #12
 80011e6:	187b      	adds	r3, r7, r1
 80011e8:	2200      	movs	r2, #0
 80011ea:	801a      	strh	r2, [r3, #0]
    hal.ReadCommand(SX1280_RADIO_GET_RXBUFFERSTATUS, status, 2);
 80011ec:	000c      	movs	r4, r1
 80011ee:	187a      	adds	r2, r7, r1
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <_ZN12SX1280Driver15GetRxBufferAddrEv+0x2c>)
 80011f2:	2302      	movs	r3, #2
 80011f4:	2117      	movs	r1, #23
 80011f6:	f000 f93d 	bl	8001474 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh>
    return status[1];
 80011fa:	193b      	adds	r3, r7, r4
 80011fc:	785b      	ldrb	r3, [r3, #1]
}
 80011fe:	0018      	movs	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	b005      	add	sp, #20
 8001204:	bd90      	pop	{r4, r7, pc}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	200000f0 	.word	0x200000f0

0800120c <_ZN12SX1280Driver18GetLastPacketStatsEv>:
    hal.ReadCommand(SX1280_RADIO_GET_RSSIINST, (uint8_t *)&status, 1);
    return -(int8_t)(status / 2);
}

void SX1280Driver::GetLastPacketStats()
{
 800120c:	b590      	push	{r4, r7, lr}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
    uint8_t status[2];

    hal.ReadCommand(SX1280_RADIO_GET_PACKETSTATUS, status, 2);
 8001214:	240c      	movs	r4, #12
 8001216:	193a      	adds	r2, r7, r4
 8001218:	481a      	ldr	r0, [pc, #104]	; (8001284 <_ZN12SX1280Driver18GetLastPacketStatsEv+0x78>)
 800121a:	2302      	movs	r3, #2
 800121c:	211d      	movs	r1, #29
 800121e:	f000 f929 	bl	8001474 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh>
    LastPacketRSSI = -(int8_t)(status[0] / 2);
 8001222:	0020      	movs	r0, r4
 8001224:	183b      	adds	r3, r7, r0
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	085b      	lsrs	r3, r3, #1
 800122a:	b2db      	uxtb	r3, r3
 800122c:	425b      	negs	r3, r3
 800122e:	b2db      	uxtb	r3, r3
 8001230:	b259      	sxtb	r1, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2232      	movs	r2, #50	; 0x32
 8001236:	5499      	strb	r1, [r3, r2]
    LastPacketSNR = (int8_t)status[1] / 4;
 8001238:	183b      	adds	r3, r7, r0
 800123a:	785b      	ldrb	r3, [r3, #1]
 800123c:	b25b      	sxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	da00      	bge.n	8001244 <_ZN12SX1280Driver18GetLastPacketStatsEv+0x38>
 8001242:	3303      	adds	r3, #3
 8001244:	109b      	asrs	r3, r3, #2
 8001246:	b259      	sxtb	r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2233      	movs	r2, #51	; 0x33
 800124c:	5499      	strb	r1, [r3, r2]
    // https://www.mouser.com/datasheet/2/761/DS_SX1280-1_V2.2-1511144.pdf
    // need to subtract SNR from RSSI when SNR <= 0;
    int8_t negOffset = (LastPacketSNR < 0) ? LastPacketSNR : 0;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2233      	movs	r2, #51	; 0x33
 8001252:	569b      	ldrsb	r3, [r3, r2]
 8001254:	220f      	movs	r2, #15
 8001256:	18ba      	adds	r2, r7, r2
 8001258:	b259      	sxtb	r1, r3
 800125a:	2900      	cmp	r1, #0
 800125c:	dd00      	ble.n	8001260 <_ZN12SX1280Driver18GetLastPacketStatsEv+0x54>
 800125e:	2300      	movs	r3, #0
 8001260:	7013      	strb	r3, [r2, #0]
    LastPacketRSSI += negOffset;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2232      	movs	r2, #50	; 0x32
 8001266:	569b      	ldrsb	r3, [r3, r2]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	230f      	movs	r3, #15
 800126c:	18fb      	adds	r3, r7, r3
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	18d3      	adds	r3, r2, r3
 8001272:	b2db      	uxtb	r3, r3
 8001274:	b259      	sxtb	r1, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2232      	movs	r2, #50	; 0x32
 800127a:	5499      	strb	r1, [r3, r2]
}
 800127c:	46c0      	nop			; (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	b005      	add	sp, #20
 8001282:	bd90      	pop	{r4, r7, pc}
 8001284:	200000f0 	.word	0x200000f0

08001288 <_ZN12SX1280Driver11IsrCallbackEv>:

void SX1280Driver::IsrCallback()
{
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
    uint16_t irqStatus = instance->GetIrqStatus();
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <_ZN12SX1280Driver11IsrCallbackEv+0x5c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	1dbc      	adds	r4, r7, #6
 8001294:	0018      	movs	r0, r3
 8001296:	f7ff fec3 	bl	8001020 <_ZN12SX1280Driver12GetIrqStatusEv>
 800129a:	0003      	movs	r3, r0
 800129c:	8023      	strh	r3, [r4, #0]
    instance->ClearIrqStatus(SX1280_IRQ_RADIO_ALL);
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <_ZN12SX1280Driver11IsrCallbackEv+0x5c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a11      	ldr	r2, [pc, #68]	; (80012e8 <_ZN12SX1280Driver11IsrCallbackEv+0x60>)
 80012a4:	0011      	movs	r1, r2
 80012a6:	0018      	movs	r0, r3
 80012a8:	f7ff fed6 	bl	8001058 <_ZN12SX1280Driver14ClearIrqStatusEt>
    if (irqStatus & SX1280_IRQ_TX_DONE)
 80012ac:	1dbb      	adds	r3, r7, #6
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	2201      	movs	r2, #1
 80012b2:	4013      	ands	r3, r2
 80012b4:	d008      	beq.n	80012c8 <_ZN12SX1280Driver11IsrCallbackEv+0x40>
    {
        hal.TXRXdisable();
 80012b6:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <_ZN12SX1280Driver11IsrCallbackEv+0x64>)
 80012b8:	0018      	movs	r0, r3
 80012ba:	f000 fb25 	bl	8001908 <_ZN9SX1280Hal11TXRXdisableEv>
        instance->TXnbISR();
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <_ZN12SX1280Driver11IsrCallbackEv+0x5c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	0018      	movs	r0, r3
 80012c4:	f7ff fee8 	bl	8001098 <_ZN12SX1280Driver7TXnbISREv>
    }
    if (irqStatus & SX1280_IRQ_RX_DONE)
 80012c8:	1dbb      	adds	r3, r7, #6
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	2202      	movs	r2, #2
 80012ce:	4013      	ands	r3, r2
 80012d0:	d004      	beq.n	80012dc <_ZN12SX1280Driver11IsrCallbackEv+0x54>
        instance->RXnbISR();
 80012d2:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <_ZN12SX1280Driver11IsrCallbackEv+0x5c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	0018      	movs	r0, r3
 80012d8:	f7ff ff38 	bl	800114c <_ZN12SX1280Driver7RXnbISREv>
}
 80012dc:	46c0      	nop			; (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	b003      	add	sp, #12
 80012e2:	bd90      	pop	{r4, r7, pc}
 80012e4:	200000f4 	.word	0x200000f4
 80012e8:	0000ffff 	.word	0x0000ffff
 80012ec:	200000f0 	.word	0x200000f0

080012f0 <_Z41__static_initialization_and_destruction_0ii>:
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d107      	bne.n	8001310 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	4a05      	ldr	r2, [pc, #20]	; (8001318 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d103      	bne.n	8001310 <_Z41__static_initialization_and_destruction_0ii+0x20>
SX1280Hal hal;
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800130a:	0018      	movs	r0, r3
 800130c:	f000 f814 	bl	8001338 <_ZN9SX1280HalC1Ev>
}
 8001310:	46c0      	nop			; (mov r8, r8)
 8001312:	46bd      	mov	sp, r7
 8001314:	b002      	add	sp, #8
 8001316:	bd80      	pop	{r7, pc}
 8001318:	0000ffff 	.word	0x0000ffff
 800131c:	200000f0 	.word	0x200000f0

08001320 <_GLOBAL__sub_I_hal>:
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <_GLOBAL__sub_I_hal+0x14>)
 8001326:	0019      	movs	r1, r3
 8001328:	2001      	movs	r0, #1
 800132a:	f7ff ffe1 	bl	80012f0 <_Z41__static_initialization_and_destruction_0ii>
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	0000ffff 	.word	0x0000ffff

08001338 <_ZN9SX1280HalC1Ev>:

SX1280Hal *SX1280Hal::instance = NULL;

uint8_t OutBuffer[64];

SX1280Hal::SX1280Hal()
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
{
    instance = this;
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <_ZN9SX1280HalC1Ev+0x18>)
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	601a      	str	r2, [r3, #0]
}
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	0018      	movs	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	b002      	add	sp, #8
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200000f8 	.word	0x200000f8

08001354 <_ZN9SX1280Hal4initEv>:
{
    TXRXdisable(); // make sure the RX/TX amp pins are disabled
}

void SX1280Hal::init()
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

}
 800135c:	46c0      	nop			; (mov r8, r8)
 800135e:	46bd      	mov	sp, r7
 8001360:	b002      	add	sp, #8
 8001362:	bd80      	pop	{r7, pc}

08001364 <_ZN9SX1280Hal5resetEv>:

void SX1280Hal::reset(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	// We do not have this pin
}
 800136c:	46c0      	nop			; (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	b002      	add	sp, #8
 8001372:	bd80      	pop	{r7, pc}

08001374 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>:

void SX1280Hal::WriteCommand(SX1280_RadioCommands_t command, uint8_t val)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	0008      	movs	r0, r1
 800137e:	0011      	movs	r1, r2
 8001380:	1cfb      	adds	r3, r7, #3
 8001382:	1c02      	adds	r2, r0, #0
 8001384:	701a      	strb	r2, [r3, #0]
 8001386:	1cbb      	adds	r3, r7, #2
 8001388:	1c0a      	adds	r2, r1, #0
 800138a:	701a      	strb	r2, [r3, #0]
    WaitOnBusy();
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	0018      	movs	r0, r3
 8001390:	f000 fa50 	bl	8001834 <_ZN9SX1280Hal10WaitOnBusyEv>
    OutBuffer[0] = command;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x68>)
 8001396:	1cfa      	adds	r2, r7, #3
 8001398:	7812      	ldrb	r2, [r2, #0]
 800139a:	701a      	strb	r2, [r3, #0]
    OutBuffer[1] = val;
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x68>)
 800139e:	1cba      	adds	r2, r7, #2
 80013a0:	7812      	ldrb	r2, [r2, #0]
 80013a2:	705a      	strb	r2, [r3, #1]
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80013a4:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x6c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	2101      	movs	r1, #1
 80013aa:	0018      	movs	r0, r3
 80013ac:	f003 fb85 	bl	8004aba <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(RADIO_SPI, OutBuffer, 2, 5);
 80013b0:	490a      	ldr	r1, [pc, #40]	; (80013dc <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x68>)
 80013b2:	480c      	ldr	r0, [pc, #48]	; (80013e4 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x70>)
 80013b4:	2305      	movs	r3, #5
 80013b6:	2202      	movs	r2, #2
 80013b8:	f004 fb72 	bl	8005aa0 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x6c>)
 80013be:	2201      	movs	r2, #1
 80013c0:	2101      	movs	r1, #1
 80013c2:	0018      	movs	r0, r3
 80013c4:	f003 fb79 	bl	8004aba <HAL_GPIO_WritePin>

    BusyDelay(12);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	210c      	movs	r1, #12
 80013cc:	0018      	movs	r0, r3
 80013ce:	f7ff fa1b 	bl	8000808 <_ZNK9SX1280Hal9BusyDelayEm>
}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	46bd      	mov	sp, r7
 80013d6:	b002      	add	sp, #8
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	200000fc 	.word	0x200000fc
 80013e0:	50000400 	.word	0x50000400
 80013e4:	200002bc 	.word	0x200002bc

080013e8 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>:

void SX1280Hal::WriteCommand(SX1280_RadioCommands_t command, uint8_t *buffer, uint8_t size)
{
 80013e8:	b5b0      	push	{r4, r5, r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	0008      	movs	r0, r1
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	0019      	movs	r1, r3
 80013f6:	250b      	movs	r5, #11
 80013f8:	197b      	adds	r3, r7, r5
 80013fa:	1c02      	adds	r2, r0, #0
 80013fc:	701a      	strb	r2, [r3, #0]
 80013fe:	240a      	movs	r4, #10
 8001400:	193b      	adds	r3, r7, r4
 8001402:	1c0a      	adds	r2, r1, #0
 8001404:	701a      	strb	r2, [r3, #0]
    OutBuffer[0] = (uint8_t)command;
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x7c>)
 8001408:	197a      	adds	r2, r7, r5
 800140a:	7812      	ldrb	r2, [r2, #0]
 800140c:	701a      	strb	r2, [r3, #0]
    memcpy(OutBuffer + 1, buffer, size);
 800140e:	4816      	ldr	r0, [pc, #88]	; (8001468 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x80>)
 8001410:	193b      	adds	r3, r7, r4
 8001412:	781a      	ldrb	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	0019      	movs	r1, r3
 8001418:	f007 fe4e 	bl	80090b8 <memcpy>

    WaitOnBusy();
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	0018      	movs	r0, r3
 8001420:	f000 fa08 	bl	8001834 <_ZN9SX1280Hal10WaitOnBusyEv>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x84>)
 8001426:	2200      	movs	r2, #0
 8001428:	2101      	movs	r1, #1
 800142a:	0018      	movs	r0, r3
 800142c:	f003 fb45 	bl	8004aba <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(RADIO_SPI, OutBuffer, size+1, 5);
 8001430:	193b      	adds	r3, r7, r4
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b29b      	uxth	r3, r3
 8001436:	3301      	adds	r3, #1
 8001438:	b29a      	uxth	r2, r3
 800143a:	490a      	ldr	r1, [pc, #40]	; (8001464 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x7c>)
 800143c:	480c      	ldr	r0, [pc, #48]	; (8001470 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x88>)
 800143e:	2305      	movs	r3, #5
 8001440:	f004 fb2e 	bl	8005aa0 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x84>)
 8001446:	2201      	movs	r2, #1
 8001448:	2101      	movs	r1, #1
 800144a:	0018      	movs	r0, r3
 800144c:	f003 fb35 	bl	8004aba <HAL_GPIO_WritePin>

    BusyDelay(12);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	210c      	movs	r1, #12
 8001454:	0018      	movs	r0, r3
 8001456:	f7ff f9d7 	bl	8000808 <_ZNK9SX1280Hal9BusyDelayEm>
}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	46bd      	mov	sp, r7
 800145e:	b004      	add	sp, #16
 8001460:	bdb0      	pop	{r4, r5, r7, pc}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	200000fc 	.word	0x200000fc
 8001468:	200000fd 	.word	0x200000fd
 800146c:	50000400 	.word	0x50000400
 8001470:	200002bc 	.word	0x200002bc

08001474 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh>:

void SX1280Hal::ReadCommand(SX1280_RadioCommands_t command, uint8_t *buffer, uint8_t size)
{
 8001474:	b5b0      	push	{r4, r5, r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af02      	add	r7, sp, #8
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	0008      	movs	r0, r1
 800147e:	607a      	str	r2, [r7, #4]
 8001480:	0019      	movs	r1, r3
 8001482:	240b      	movs	r4, #11
 8001484:	193b      	adds	r3, r7, r4
 8001486:	1c02      	adds	r2, r0, #0
 8001488:	701a      	strb	r2, [r3, #0]
 800148a:	230a      	movs	r3, #10
 800148c:	18fb      	adds	r3, r7, r3
 800148e:	1c0a      	adds	r2, r1, #0
 8001490:	701a      	strb	r2, [r3, #0]
    #define RADIO_GET_STATUS_BUF_SIZEOF 3 // special case for command == SX1280_RADIO_GET_STATUS, fixed 3 bytes packet size

    WaitOnBusy();
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	0018      	movs	r0, r3
 8001496:	f000 f9cd 	bl	8001834 <_ZN9SX1280Hal10WaitOnBusyEv>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800149a:	4b27      	ldr	r3, [pc, #156]	; (8001538 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc4>)
 800149c:	2200      	movs	r2, #0
 800149e:	2101      	movs	r1, #1
 80014a0:	0018      	movs	r0, r3
 80014a2:	f003 fb0a 	bl	8004aba <HAL_GPIO_WritePin>

    if (command == SX1280_RADIO_GET_STATUS)
 80014a6:	193b      	adds	r3, r7, r4
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2bc0      	cmp	r3, #192	; 0xc0
 80014ac:	d116      	bne.n	80014dc <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0x68>
    {
        OutBuffer[0] = (uint8_t)command;
 80014ae:	4b23      	ldr	r3, [pc, #140]	; (800153c <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 80014b0:	193a      	adds	r2, r7, r4
 80014b2:	7812      	ldrb	r2, [r2, #0]
 80014b4:	701a      	strb	r2, [r3, #0]
        OutBuffer[1] = 0x00;
 80014b6:	4b21      	ldr	r3, [pc, #132]	; (800153c <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	705a      	strb	r2, [r3, #1]
        OutBuffer[2] = 0x00;
 80014bc:	4b1f      	ldr	r3, [pc, #124]	; (800153c <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 80014be:	2200      	movs	r2, #0
 80014c0:	709a      	strb	r2, [r3, #2]
        HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer, RADIO_GET_STATUS_BUF_SIZEOF, 5);
 80014c2:	4a1e      	ldr	r2, [pc, #120]	; (800153c <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 80014c4:	491d      	ldr	r1, [pc, #116]	; (800153c <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 80014c6:	481e      	ldr	r0, [pc, #120]	; (8001540 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xcc>)
 80014c8:	2305      	movs	r3, #5
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2303      	movs	r3, #3
 80014ce:	f004 fc3f 	bl	8005d50 <HAL_SPI_TransmitReceive>
        buffer[0] = OutBuffer[0];
 80014d2:	4b1a      	ldr	r3, [pc, #104]	; (800153c <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 80014d4:	781a      	ldrb	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	701a      	strb	r2, [r3, #0]
 80014da:	e022      	b.n	8001522 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xae>
    }
    else
    {
        OutBuffer[0] = (uint8_t)command;
 80014dc:	4b17      	ldr	r3, [pc, #92]	; (800153c <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 80014de:	220b      	movs	r2, #11
 80014e0:	18ba      	adds	r2, r7, r2
 80014e2:	7812      	ldrb	r2, [r2, #0]
 80014e4:	701a      	strb	r2, [r3, #0]
        OutBuffer[1] = 0x00;
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	705a      	strb	r2, [r3, #1]
        memcpy(OutBuffer + 2, buffer, size);
 80014ec:	4815      	ldr	r0, [pc, #84]	; (8001544 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xd0>)
 80014ee:	250a      	movs	r5, #10
 80014f0:	197b      	adds	r3, r7, r5
 80014f2:	781a      	ldrb	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	0019      	movs	r1, r3
 80014f8:	f007 fdde 	bl	80090b8 <memcpy>
        HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer, size+2, 5);
 80014fc:	197b      	adds	r3, r7, r5
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b29b      	uxth	r3, r3
 8001502:	3302      	adds	r3, #2
 8001504:	b29b      	uxth	r3, r3
 8001506:	4a0d      	ldr	r2, [pc, #52]	; (800153c <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 8001508:	490c      	ldr	r1, [pc, #48]	; (800153c <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 800150a:	480d      	ldr	r0, [pc, #52]	; (8001540 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xcc>)
 800150c:	2405      	movs	r4, #5
 800150e:	9400      	str	r4, [sp, #0]
 8001510:	f004 fc1e 	bl	8005d50 <HAL_SPI_TransmitReceive>
        memcpy(buffer, OutBuffer + 2, size);
 8001514:	490b      	ldr	r1, [pc, #44]	; (8001544 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xd0>)
 8001516:	197b      	adds	r3, r7, r5
 8001518:	781a      	ldrb	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	0018      	movs	r0, r3
 800151e:	f007 fdcb 	bl	80090b8 <memcpy>
    }
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc4>)
 8001524:	2201      	movs	r2, #1
 8001526:	2101      	movs	r1, #1
 8001528:	0018      	movs	r0, r3
 800152a:	f003 fac6 	bl	8004aba <HAL_GPIO_WritePin>
}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	46bd      	mov	sp, r7
 8001532:	b004      	add	sp, #16
 8001534:	bdb0      	pop	{r4, r5, r7, pc}
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	50000400 	.word	0x50000400
 800153c:	200000fc 	.word	0x200000fc
 8001540:	200002bc 	.word	0x200002bc
 8001544:	200000fe 	.word	0x200000fe

08001548 <_ZN9SX1280Hal13WriteRegisterEtPhh>:

void SX1280Hal::WriteRegister(uint16_t address, uint8_t *buffer, uint8_t size)
{
 8001548:	b5b0      	push	{r4, r5, r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af02      	add	r7, sp, #8
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	0008      	movs	r0, r1
 8001552:	607a      	str	r2, [r7, #4]
 8001554:	0019      	movs	r1, r3
 8001556:	240a      	movs	r4, #10
 8001558:	193b      	adds	r3, r7, r4
 800155a:	1c02      	adds	r2, r0, #0
 800155c:	801a      	strh	r2, [r3, #0]
 800155e:	2509      	movs	r5, #9
 8001560:	197b      	adds	r3, r7, r5
 8001562:	1c0a      	adds	r2, r1, #0
 8001564:	701a      	strb	r2, [r3, #0]
    OutBuffer[0] = (SX1280_RADIO_WRITE_REGISTER);
 8001566:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <_ZN9SX1280Hal13WriteRegisterEtPhh+0x94>)
 8001568:	2218      	movs	r2, #24
 800156a:	701a      	strb	r2, [r3, #0]
    OutBuffer[1] = ((address & 0xFF00) >> 8);
 800156c:	193b      	adds	r3, r7, r4
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	b29b      	uxth	r3, r3
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <_ZN9SX1280Hal13WriteRegisterEtPhh+0x94>)
 8001578:	705a      	strb	r2, [r3, #1]
    OutBuffer[2] = (address & 0x00FF);
 800157a:	193b      	adds	r3, r7, r4
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	b2da      	uxtb	r2, r3
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <_ZN9SX1280Hal13WriteRegisterEtPhh+0x94>)
 8001582:	709a      	strb	r2, [r3, #2]

    memcpy(OutBuffer + 3, buffer, size);
 8001584:	4816      	ldr	r0, [pc, #88]	; (80015e0 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x98>)
 8001586:	197b      	adds	r3, r7, r5
 8001588:	781a      	ldrb	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	0019      	movs	r1, r3
 800158e:	f007 fd93 	bl	80090b8 <memcpy>

    WaitOnBusy();
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	0018      	movs	r0, r3
 8001596:	f000 f94d 	bl	8001834 <_ZN9SX1280Hal10WaitOnBusyEv>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800159a:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x9c>)
 800159c:	2200      	movs	r2, #0
 800159e:	2101      	movs	r1, #1
 80015a0:	0018      	movs	r0, r3
 80015a2:	f003 fa8a 	bl	8004aba <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer, size+3, 5);
 80015a6:	197b      	adds	r3, r7, r5
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	3303      	adds	r3, #3
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <_ZN9SX1280Hal13WriteRegisterEtPhh+0x94>)
 80015b2:	490a      	ldr	r1, [pc, #40]	; (80015dc <_ZN9SX1280Hal13WriteRegisterEtPhh+0x94>)
 80015b4:	480c      	ldr	r0, [pc, #48]	; (80015e8 <_ZN9SX1280Hal13WriteRegisterEtPhh+0xa0>)
 80015b6:	2405      	movs	r4, #5
 80015b8:	9400      	str	r4, [sp, #0]
 80015ba:	f004 fbc9 	bl	8005d50 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x9c>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	2101      	movs	r1, #1
 80015c4:	0018      	movs	r0, r3
 80015c6:	f003 fa78 	bl	8004aba <HAL_GPIO_WritePin>

    BusyDelay(12);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	210c      	movs	r1, #12
 80015ce:	0018      	movs	r0, r3
 80015d0:	f7ff f91a 	bl	8000808 <_ZNK9SX1280Hal9BusyDelayEm>
}
 80015d4:	46c0      	nop			; (mov r8, r8)
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b004      	add	sp, #16
 80015da:	bdb0      	pop	{r4, r5, r7, pc}
 80015dc:	200000fc 	.word	0x200000fc
 80015e0:	200000ff 	.word	0x200000ff
 80015e4:	50000400 	.word	0x50000400
 80015e8:	200002bc 	.word	0x200002bc

080015ec <_ZN9SX1280Hal13WriteRegisterEth>:

void SX1280Hal::WriteRegister(uint16_t address, uint8_t value)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	0008      	movs	r0, r1
 80015f6:	0011      	movs	r1, r2
 80015f8:	1cbb      	adds	r3, r7, #2
 80015fa:	1c02      	adds	r2, r0, #0
 80015fc:	801a      	strh	r2, [r3, #0]
 80015fe:	1c7b      	adds	r3, r7, #1
 8001600:	1c0a      	adds	r2, r1, #0
 8001602:	701a      	strb	r2, [r3, #0]
    WriteRegister(address, &value, 1);
 8001604:	1c7a      	adds	r2, r7, #1
 8001606:	1cbb      	adds	r3, r7, #2
 8001608:	8819      	ldrh	r1, [r3, #0]
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	2301      	movs	r3, #1
 800160e:	f7ff ff9b 	bl	8001548 <_ZN9SX1280Hal13WriteRegisterEtPhh>
}
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	46bd      	mov	sp, r7
 8001616:	b002      	add	sp, #8
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <_ZN9SX1280Hal12ReadRegisterEtPhh>:

void SX1280Hal::ReadRegister(uint16_t address, uint8_t *buffer, uint8_t size)
{
 800161c:	b5b0      	push	{r4, r5, r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af02      	add	r7, sp, #8
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	0008      	movs	r0, r1
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	0019      	movs	r1, r3
 800162a:	240a      	movs	r4, #10
 800162c:	193b      	adds	r3, r7, r4
 800162e:	1c02      	adds	r2, r0, #0
 8001630:	801a      	strh	r2, [r3, #0]
 8001632:	2509      	movs	r5, #9
 8001634:	197b      	adds	r3, r7, r5
 8001636:	1c0a      	adds	r2, r1, #0
 8001638:	701a      	strb	r2, [r3, #0]
    OutBuffer[0] = (SX1280_RADIO_READ_REGISTER);
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 800163c:	2219      	movs	r2, #25
 800163e:	701a      	strb	r2, [r3, #0]
    OutBuffer[1] = ((address & 0xFF00) >> 8);
 8001640:	193b      	adds	r3, r7, r4
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	0a1b      	lsrs	r3, r3, #8
 8001646:	b29b      	uxth	r3, r3
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 800164c:	705a      	strb	r2, [r3, #1]
    OutBuffer[2] = (address & 0x00FF);
 800164e:	193b      	adds	r3, r7, r4
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 8001656:	709a      	strb	r2, [r3, #2]
    OutBuffer[3] = 0x00;
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 800165a:	2200      	movs	r2, #0
 800165c:	70da      	strb	r2, [r3, #3]

    WaitOnBusy();
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	0018      	movs	r0, r3
 8001662:	f000 f8e7 	bl	8001834 <_ZN9SX1280Hal10WaitOnBusyEv>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x94>)
 8001668:	2200      	movs	r2, #0
 800166a:	2101      	movs	r1, #1
 800166c:	0018      	movs	r0, r3
 800166e:	f003 fa24 	bl	8004aba <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer, size+4, 5);
 8001672:	197b      	adds	r3, r7, r5
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	b29b      	uxth	r3, r3
 8001678:	3304      	adds	r3, #4
 800167a:	b29b      	uxth	r3, r3
 800167c:	4a0b      	ldr	r2, [pc, #44]	; (80016ac <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 800167e:	490b      	ldr	r1, [pc, #44]	; (80016ac <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 8001680:	480c      	ldr	r0, [pc, #48]	; (80016b4 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x98>)
 8001682:	2405      	movs	r4, #5
 8001684:	9400      	str	r4, [sp, #0]
 8001686:	f004 fb63 	bl	8005d50 <HAL_SPI_TransmitReceive>
    memcpy(buffer, OutBuffer + 4, size);
 800168a:	490b      	ldr	r1, [pc, #44]	; (80016b8 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x9c>)
 800168c:	197b      	adds	r3, r7, r5
 800168e:	781a      	ldrb	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	0018      	movs	r0, r3
 8001694:	f007 fd10 	bl	80090b8 <memcpy>

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x94>)
 800169a:	2201      	movs	r2, #1
 800169c:	2101      	movs	r1, #1
 800169e:	0018      	movs	r0, r3
 80016a0:	f003 fa0b 	bl	8004aba <HAL_GPIO_WritePin>
}
 80016a4:	46c0      	nop			; (mov r8, r8)
 80016a6:	46bd      	mov	sp, r7
 80016a8:	b004      	add	sp, #16
 80016aa:	bdb0      	pop	{r4, r5, r7, pc}
 80016ac:	200000fc 	.word	0x200000fc
 80016b0:	50000400 	.word	0x50000400
 80016b4:	200002bc 	.word	0x200002bc
 80016b8:	20000100 	.word	0x20000100

080016bc <_ZN9SX1280Hal12ReadRegisterEt>:

uint8_t SX1280Hal::ReadRegister(uint16_t address)
{
 80016bc:	b590      	push	{r4, r7, lr}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	000a      	movs	r2, r1
 80016c6:	1cbb      	adds	r3, r7, #2
 80016c8:	801a      	strh	r2, [r3, #0]
    uint8_t data;
    ReadRegister(address, &data, 1);
 80016ca:	240f      	movs	r4, #15
 80016cc:	193a      	adds	r2, r7, r4
 80016ce:	1cbb      	adds	r3, r7, #2
 80016d0:	8819      	ldrh	r1, [r3, #0]
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	2301      	movs	r3, #1
 80016d6:	f7ff ffa1 	bl	800161c <_ZN9SX1280Hal12ReadRegisterEtPhh>
    return data;
 80016da:	193b      	adds	r3, r7, r4
 80016dc:	781b      	ldrb	r3, [r3, #0]
}
 80016de:	0018      	movs	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b005      	add	sp, #20
 80016e4:	bd90      	pop	{r4, r7, pc}
	...

080016e8 <_ZN9SX1280Hal11WriteBufferEhPVhh>:

void SX1280Hal::WriteBuffer(uint8_t offset, volatile uint8_t *buffer, uint8_t size)
{
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b089      	sub	sp, #36	; 0x24
 80016ec:	af02      	add	r7, sp, #8
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	0008      	movs	r0, r1
 80016f2:	607a      	str	r2, [r7, #4]
 80016f4:	0019      	movs	r1, r3
 80016f6:	240b      	movs	r4, #11
 80016f8:	193b      	adds	r3, r7, r4
 80016fa:	1c02      	adds	r2, r0, #0
 80016fc:	701a      	strb	r2, [r3, #0]
 80016fe:	230a      	movs	r3, #10
 8001700:	18fb      	adds	r3, r7, r3
 8001702:	1c0a      	adds	r2, r1, #0
 8001704:	701a      	strb	r2, [r3, #0]
    OutBuffer[0] = SX1280_RADIO_WRITE_BUFFER;
 8001706:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <_ZN9SX1280Hal11WriteBufferEhPVhh+0x98>)
 8001708:	221a      	movs	r2, #26
 800170a:	701a      	strb	r2, [r3, #0]
    OutBuffer[1] = offset;
 800170c:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <_ZN9SX1280Hal11WriteBufferEhPVhh+0x98>)
 800170e:	193a      	adds	r2, r7, r4
 8001710:	7812      	ldrb	r2, [r2, #0]
 8001712:	705a      	strb	r2, [r3, #1]

    for(int i = 0; i < size; i++){
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	230a      	movs	r3, #10
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	429a      	cmp	r2, r3
 8001722:	da0c      	bge.n	800173e <_ZN9SX1280Hal11WriteBufferEhPVhh+0x56>
    	OutBuffer[i+2] = buffer[i];
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	18d2      	adds	r2, r2, r3
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	3302      	adds	r3, #2
 800172e:	7812      	ldrb	r2, [r2, #0]
 8001730:	b2d1      	uxtb	r1, r2
 8001732:	4a13      	ldr	r2, [pc, #76]	; (8001780 <_ZN9SX1280Hal11WriteBufferEhPVhh+0x98>)
 8001734:	54d1      	strb	r1, [r2, r3]
    for(int i = 0; i < size; i++){
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3301      	adds	r3, #1
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	e7ec      	b.n	8001718 <_ZN9SX1280Hal11WriteBufferEhPVhh+0x30>
    }

    WaitOnBusy();
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	0018      	movs	r0, r3
 8001742:	f000 f877 	bl	8001834 <_ZN9SX1280Hal10WaitOnBusyEv>

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001746:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <_ZN9SX1280Hal11WriteBufferEhPVhh+0x9c>)
 8001748:	2200      	movs	r2, #0
 800174a:	2101      	movs	r1, #1
 800174c:	0018      	movs	r0, r3
 800174e:	f003 f9b4 	bl	8004aba <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer, size+2, 5);
 8001752:	230a      	movs	r3, #10
 8001754:	18fb      	adds	r3, r7, r3
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b29b      	uxth	r3, r3
 800175a:	3302      	adds	r3, #2
 800175c:	b29b      	uxth	r3, r3
 800175e:	4a08      	ldr	r2, [pc, #32]	; (8001780 <_ZN9SX1280Hal11WriteBufferEhPVhh+0x98>)
 8001760:	4907      	ldr	r1, [pc, #28]	; (8001780 <_ZN9SX1280Hal11WriteBufferEhPVhh+0x98>)
 8001762:	4809      	ldr	r0, [pc, #36]	; (8001788 <_ZN9SX1280Hal11WriteBufferEhPVhh+0xa0>)
 8001764:	2405      	movs	r4, #5
 8001766:	9400      	str	r4, [sp, #0]
 8001768:	f004 faf2 	bl	8005d50 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800176c:	4b05      	ldr	r3, [pc, #20]	; (8001784 <_ZN9SX1280Hal11WriteBufferEhPVhh+0x9c>)
 800176e:	2201      	movs	r2, #1
 8001770:	2101      	movs	r1, #1
 8001772:	0018      	movs	r0, r3
 8001774:	f003 f9a1 	bl	8004aba <HAL_GPIO_WritePin>

}
 8001778:	46c0      	nop			; (mov r8, r8)
 800177a:	46bd      	mov	sp, r7
 800177c:	b007      	add	sp, #28
 800177e:	bd90      	pop	{r4, r7, pc}
 8001780:	200000fc 	.word	0x200000fc
 8001784:	50000400 	.word	0x50000400
 8001788:	200002bc 	.word	0x200002bc

0800178c <_ZN9SX1280Hal10ReadBufferEhPVhh>:

void SX1280Hal::ReadBuffer(uint8_t offset, volatile uint8_t *buffer, uint8_t size)
{
 800178c:	b5b0      	push	{r4, r5, r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af02      	add	r7, sp, #8
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	0008      	movs	r0, r1
 8001796:	607a      	str	r2, [r7, #4]
 8001798:	0019      	movs	r1, r3
 800179a:	240b      	movs	r4, #11
 800179c:	193b      	adds	r3, r7, r4
 800179e:	1c02      	adds	r2, r0, #0
 80017a0:	701a      	strb	r2, [r3, #0]
 80017a2:	250a      	movs	r5, #10
 80017a4:	197b      	adds	r3, r7, r5
 80017a6:	1c0a      	adds	r2, r1, #0
 80017a8:	701a      	strb	r2, [r3, #0]
    OutBuffer[0] = SX1280_RADIO_READ_BUFFER;
 80017aa:	4b1f      	ldr	r3, [pc, #124]	; (8001828 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 80017ac:	221b      	movs	r2, #27
 80017ae:	701a      	strb	r2, [r3, #0]
    OutBuffer[1] = offset;
 80017b0:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 80017b2:	193a      	adds	r2, r7, r4
 80017b4:	7812      	ldrb	r2, [r2, #0]
 80017b6:	705a      	strb	r2, [r3, #1]
    OutBuffer[2] = 0x00;
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	709a      	strb	r2, [r3, #2]

    WaitOnBusy();
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	0018      	movs	r0, r3
 80017c2:	f000 f837 	bl	8001834 <_ZN9SX1280Hal10WaitOnBusyEv>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80017c6:	4b19      	ldr	r3, [pc, #100]	; (800182c <_ZN9SX1280Hal10ReadBufferEhPVhh+0xa0>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	2101      	movs	r1, #1
 80017cc:	0018      	movs	r0, r3
 80017ce:	f003 f974 	bl	8004aba <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer, size+3, 5);
 80017d2:	197b      	adds	r3, r7, r5
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	3303      	adds	r3, #3
 80017da:	b29b      	uxth	r3, r3
 80017dc:	4a12      	ldr	r2, [pc, #72]	; (8001828 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 80017de:	4912      	ldr	r1, [pc, #72]	; (8001828 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 80017e0:	4813      	ldr	r0, [pc, #76]	; (8001830 <_ZN9SX1280Hal10ReadBufferEhPVhh+0xa4>)
 80017e2:	2405      	movs	r4, #5
 80017e4:	9400      	str	r4, [sp, #0]
 80017e6:	f004 fab3 	bl	8005d50 <HAL_SPI_TransmitReceive>

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <_ZN9SX1280Hal10ReadBufferEhPVhh+0xa0>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	2101      	movs	r1, #1
 80017f0:	0018      	movs	r0, r3
 80017f2:	f003 f962 	bl	8004aba <HAL_GPIO_WritePin>

    for(int i = 0; i < size; i++){
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	230a      	movs	r3, #10
 80017fc:	18fb      	adds	r3, r7, r3
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	429a      	cmp	r2, r3
 8001804:	da0b      	bge.n	800181e <_ZN9SX1280Hal10ReadBufferEhPVhh+0x92>
    	buffer[i] = OutBuffer[i+3];
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	1cda      	adds	r2, r3, #3
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	18cb      	adds	r3, r1, r3
 8001810:	4905      	ldr	r1, [pc, #20]	; (8001828 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 8001812:	5c8a      	ldrb	r2, [r1, r2]
 8001814:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < size; i++){
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3301      	adds	r3, #1
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	e7ed      	b.n	80017fa <_ZN9SX1280Hal10ReadBufferEhPVhh+0x6e>
    }
}
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	46bd      	mov	sp, r7
 8001822:	b006      	add	sp, #24
 8001824:	bdb0      	pop	{r4, r5, r7, pc}
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	200000fc 	.word	0x200000fc
 800182c:	50000400 	.word	0x50000400
 8001830:	200002bc 	.word	0x200002bc

08001834 <_ZN9SX1280Hal10WaitOnBusyEv>:

bool SX1280Hal::WaitOnBusy()
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
    uint32_t startTime = HAL_GetTick();
 800183c:	f002 f930 	bl	8003aa0 <HAL_GetTick>
 8001840:	0003      	movs	r3, r0
 8001842:	60fb      	str	r3, [r7, #12]

    while (HAL_GPIO_ReadPin(BUSY_GPIO_Port, BUSY_Pin)) // wait until not busy or until timeout
 8001844:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <_ZN9SX1280Hal10WaitOnBusyEv+0x50>)
 8001846:	2102      	movs	r1, #2
 8001848:	0018      	movs	r0, r3
 800184a:	f003 f919 	bl	8004a80 <HAL_GPIO_ReadPin>
 800184e:	0003      	movs	r3, r0
 8001850:	1e5a      	subs	r2, r3, #1
 8001852:	4193      	sbcs	r3, r2
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00f      	beq.n	800187a <_ZN9SX1280Hal10WaitOnBusyEv+0x46>
    {
        if ((HAL_GetTick() - startTime) >= 2) // 2ms timeout
 800185a:	f002 f921 	bl	8003aa0 <HAL_GetTick>
 800185e:	0002      	movs	r2, r0
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2201      	movs	r2, #1
 8001866:	429a      	cmp	r2, r3
 8001868:	419b      	sbcs	r3, r3
 800186a:	425b      	negs	r3, r3
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <_ZN9SX1280Hal10WaitOnBusyEv+0x42>
        {
            return false;
 8001872:	2300      	movs	r3, #0
 8001874:	e002      	b.n	800187c <_ZN9SX1280Hal10WaitOnBusyEv+0x48>
        }
        else
        {
        	asm("NOP");
 8001876:	46c0      	nop			; (mov r8, r8)
    while (HAL_GPIO_ReadPin(BUSY_GPIO_Port, BUSY_Pin)) // wait until not busy or until timeout
 8001878:	e7e4      	b.n	8001844 <_ZN9SX1280Hal10WaitOnBusyEv+0x10>
        }
    }
    return true;
 800187a:	2301      	movs	r3, #1
}
 800187c:	0018      	movs	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	b004      	add	sp, #16
 8001882:	bd80      	pop	{r7, pc}
 8001884:	50000400 	.word	0x50000400

08001888 <_ZN9SX1280Hal8TXenableEv>:

void SX1280Hal::TXenable()
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	// Enable Front End
	HAL_GPIO_WritePin(FE_EN_GPIO_Port, FE_EN_Pin, GPIO_PIN_SET);
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	0059      	lsls	r1, r3, #1
 8001894:	23a0      	movs	r3, #160	; 0xa0
 8001896:	05db      	lsls	r3, r3, #23
 8001898:	2201      	movs	r2, #1
 800189a:	0018      	movs	r0, r3
 800189c:	f003 f90d 	bl	8004aba <HAL_GPIO_WritePin>

	// Enable TX
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_SET);
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <_ZN9SX1280Hal8TXenableEv+0x3c>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	2140      	movs	r1, #64	; 0x40
 80018a6:	0018      	movs	r0, r3
 80018a8:	f003 f907 	bl	8004aba <HAL_GPIO_WritePin>

	// Disable RX
	HAL_GPIO_WritePin(RX_EN_GPIO_Port, RX_EN_Pin, GPIO_PIN_RESET);
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	0119      	lsls	r1, r3, #4
 80018b0:	23a0      	movs	r3, #160	; 0xa0
 80018b2:	05db      	lsls	r3, r3, #23
 80018b4:	2200      	movs	r2, #0
 80018b6:	0018      	movs	r0, r3
 80018b8:	f003 f8ff 	bl	8004aba <HAL_GPIO_WritePin>
}
 80018bc:	46c0      	nop			; (mov r8, r8)
 80018be:	46bd      	mov	sp, r7
 80018c0:	b002      	add	sp, #8
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	50000800 	.word	0x50000800

080018c8 <_ZN9SX1280Hal8RXenableEv>:

void SX1280Hal::RXenable()
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	// Enable Front End
	HAL_GPIO_WritePin(FE_EN_GPIO_Port, FE_EN_Pin, GPIO_PIN_SET);
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	0059      	lsls	r1, r3, #1
 80018d4:	23a0      	movs	r3, #160	; 0xa0
 80018d6:	05db      	lsls	r3, r3, #23
 80018d8:	2201      	movs	r2, #1
 80018da:	0018      	movs	r0, r3
 80018dc:	f003 f8ed 	bl	8004aba <HAL_GPIO_WritePin>

	// Disable TX
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <_ZN9SX1280Hal8RXenableEv+0x3c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	2140      	movs	r1, #64	; 0x40
 80018e6:	0018      	movs	r0, r3
 80018e8:	f003 f8e7 	bl	8004aba <HAL_GPIO_WritePin>

	// Enable RX
	HAL_GPIO_WritePin(RX_EN_GPIO_Port, RX_EN_Pin, GPIO_PIN_SET);
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	0119      	lsls	r1, r3, #4
 80018f0:	23a0      	movs	r3, #160	; 0xa0
 80018f2:	05db      	lsls	r3, r3, #23
 80018f4:	2201      	movs	r2, #1
 80018f6:	0018      	movs	r0, r3
 80018f8:	f003 f8df 	bl	8004aba <HAL_GPIO_WritePin>
}
 80018fc:	46c0      	nop			; (mov r8, r8)
 80018fe:	46bd      	mov	sp, r7
 8001900:	b002      	add	sp, #8
 8001902:	bd80      	pop	{r7, pc}
 8001904:	50000800 	.word	0x50000800

08001908 <_ZN9SX1280Hal11TXRXdisableEv>:

void SX1280Hal::TXRXdisable()
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	// Disable Front End
	HAL_GPIO_WritePin(FE_EN_GPIO_Port, FE_EN_Pin, GPIO_PIN_RESET);
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	0059      	lsls	r1, r3, #1
 8001914:	23a0      	movs	r3, #160	; 0xa0
 8001916:	05db      	lsls	r3, r3, #23
 8001918:	2200      	movs	r2, #0
 800191a:	0018      	movs	r0, r3
 800191c:	f003 f8cd 	bl	8004aba <HAL_GPIO_WritePin>

	// Disable TX
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <_ZN9SX1280Hal11TXRXdisableEv+0x3c>)
 8001922:	2200      	movs	r2, #0
 8001924:	2140      	movs	r1, #64	; 0x40
 8001926:	0018      	movs	r0, r3
 8001928:	f003 f8c7 	bl	8004aba <HAL_GPIO_WritePin>

	// Disable RX
	HAL_GPIO_WritePin(RX_EN_GPIO_Port, RX_EN_Pin, GPIO_PIN_RESET);
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	0119      	lsls	r1, r3, #4
 8001930:	23a0      	movs	r3, #160	; 0xa0
 8001932:	05db      	lsls	r3, r3, #23
 8001934:	2200      	movs	r2, #0
 8001936:	0018      	movs	r0, r3
 8001938:	f003 f8bf 	bl	8004aba <HAL_GPIO_WritePin>
}
 800193c:	46c0      	nop			; (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	b002      	add	sp, #8
 8001942:	bd80      	pop	{r7, pc}
 8001944:	50000800 	.word	0x50000800

08001948 <HAL_GPIO_EXTI_Rising_Callback>:

// EXTI External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	0002      	movs	r2, r0
 8001950:	1dbb      	adds	r3, r7, #6
 8001952:	801a      	strh	r2, [r3, #0]
    if(GPIO_Pin == DIO1_Pin) //
 8001954:	1dbb      	adds	r3, r7, #6
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	2b20      	cmp	r3, #32
 800195a:	d101      	bne.n	8001960 <HAL_GPIO_EXTI_Rising_Callback+0x18>
    {
    	SX1280Driver::IsrCallback();
 800195c:	f7ff fc94 	bl	8001288 <_ZN12SX1280Driver11IsrCallbackEv>
    	//if (SX1280Hal::RadioIsrCallback) SX1280Hal::RadioIsrCallback();
    }
}
 8001960:	46c0      	nop			; (mov r8, r8)
 8001962:	46bd      	mov	sp, r7
 8001964:	b002      	add	sp, #8
 8001966:	bd80      	pop	{r7, pc}

08001968 <_ZN10RawDegreesC1Ev>:
{
   uint16_t deg;
   uint32_t billionths;
   bool negative;
public:
   RawDegrees() : deg(0), billionths(0), negative(false)
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	801a      	strh	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	721a      	strb	r2, [r3, #8]
   {}
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	0018      	movs	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	b002      	add	sp, #8
 800198a:	bd80      	pop	{r7, pc}

0800198c <_ZN15TinyGPSLocationC1Ev>:
   const RawDegrees &rawLat()     { updated = false; return rawLatData; }
   const RawDegrees &rawLng()     { updated = false; return rawLngData; }
   double lat();
   double lng();

   TinyGPSLocation() : valid(false), updated(false)
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	705a      	strb	r2, [r3, #1]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3304      	adds	r3, #4
 80019a4:	0018      	movs	r0, r3
 80019a6:	f7ff ffdf 	bl	8001968 <_ZN10RawDegreesC1Ev>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3310      	adds	r3, #16
 80019ae:	0018      	movs	r0, r3
 80019b0:	f7ff ffda 	bl	8001968 <_ZN10RawDegreesC1Ev>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	331c      	adds	r3, #28
 80019b8:	0018      	movs	r0, r3
 80019ba:	f7ff ffd5 	bl	8001968 <_ZN10RawDegreesC1Ev>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3328      	adds	r3, #40	; 0x28
 80019c2:	0018      	movs	r0, r3
 80019c4:	f7ff ffd0 	bl	8001968 <_ZN10RawDegreesC1Ev>
   {}
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	0018      	movs	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b002      	add	sp, #8
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <_ZN11TinyGPSDateC1Ev>:
   uint32_t value()           { updated = false; return date; }
   uint16_t year();
   uint8_t month();
   uint8_t day();

   TinyGPSDate() : valid(false), updated(false), date(0)
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	705a      	strb	r2, [r3, #1]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	605a      	str	r2, [r3, #4]
   {}
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	0018      	movs	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	b002      	add	sp, #8
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <_ZN11TinyGPSTimeC1Ev>:
   uint8_t hour();
   uint8_t minute();
   uint8_t second();
   uint8_t centisecond();

   TinyGPSTime() : valid(false), updated(false), time(0)
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	705a      	strb	r2, [r3, #1]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	605a      	str	r2, [r3, #4]
   {}
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	0018      	movs	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b002      	add	sp, #8
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <_ZN14TinyGPSDecimalC1Ev>:
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? HAL_GetTick() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }

   TinyGPSDecimal() : valid(false), updated(false), val(0)
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	705a      	strb	r2, [r3, #1]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
   {}
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	0018      	movs	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	b002      	add	sp, #8
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <_ZN14TinyGPSIntegerC1Ev>:
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? HAL_GetTick() - lastCommitTime : (uint32_t)ULONG_MAX; }
   uint32_t value()        { updated = false; return val; }

   TinyGPSInteger() : valid(false), updated(false), val(0)
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	705a      	strb	r2, [r3, #1]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
   {}
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b002      	add	sp, #8
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <_ZN12TinyGPSSpeedC1Ev>:
   uint32_t val, newval;
   void commit();
   void set(const char *term);
};

struct TinyGPSSpeed : TinyGPSDecimal
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f7ff ffd4 	bl	8001a1a <_ZN14TinyGPSDecimalC1Ev>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	0018      	movs	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b002      	add	sp, #8
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <_ZN13TinyGPSCourseC1Ev>:
   double mph()      { return _GPS_MPH_PER_KNOT * value() / 100.0; }
   double mps()      { return _GPS_MPS_PER_KNOT * value() / 100.0; }
   double kmph()     { return _GPS_KMPH_PER_KNOT * value() / 100.0; }
};

struct TinyGPSCourse : public TinyGPSDecimal
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	0018      	movs	r0, r3
 8001a88:	f7ff ffc7 	bl	8001a1a <_ZN14TinyGPSDecimalC1Ev>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	0018      	movs	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b002      	add	sp, #8
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <_ZN15TinyGPSAltitudeC1Ev>:
{
   double deg()      { return value() / 100.0; }
};

struct TinyGPSAltitude : TinyGPSDecimal
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f7ff ffba 	bl	8001a1a <_ZN14TinyGPSDecimalC1Ev>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b002      	add	sp, #8
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <_ZN11TinyGPSHDOPC1Ev>:
   double miles()        { return _GPS_MILES_PER_METER * value() / 100.0; }
   double kilometers()   { return _GPS_KM_PER_METER * value() / 100.0; }
   double feet()         { return _GPS_FEET_PER_METER * value() / 100.0; }
};

struct TinyGPSHDOP : TinyGPSDecimal
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	0018      	movs	r0, r3
 8001abc:	f7ff ffad 	bl	8001a1a <_ZN14TinyGPSDecimalC1Ev>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b002      	add	sp, #8
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <_ZN11TinyGPSPlusC1Ev>:
#define _GPRMCterm   "GPRMC"
#define _GPGGAterm   "GPGGA"
#define _GNRMCterm   "GNRMC"
#define _GNGGAterm   "GNGGA"

TinyGPSPlus::TinyGPSPlus()
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f7ff ff59 	bl	800198c <_ZN15TinyGPSLocationC1Ev>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3338      	adds	r3, #56	; 0x38
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f7ff ff77 	bl	80019d2 <_ZN11TinyGPSDateC1Ev>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3348      	adds	r3, #72	; 0x48
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f7ff ff84 	bl	80019f6 <_ZN11TinyGPSTimeC1Ev>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3358      	adds	r3, #88	; 0x58
 8001af2:	0018      	movs	r0, r3
 8001af4:	f7ff ffb5 	bl	8001a62 <_ZN12TinyGPSSpeedC1Ev>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3368      	adds	r3, #104	; 0x68
 8001afc:	0018      	movs	r0, r3
 8001afe:	f7ff ffbd 	bl	8001a7c <_ZN13TinyGPSCourseC1Ev>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3378      	adds	r3, #120	; 0x78
 8001b06:	0018      	movs	r0, r3
 8001b08:	f7ff ffc5 	bl	8001a96 <_ZN15TinyGPSAltitudeC1Ev>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3388      	adds	r3, #136	; 0x88
 8001b10:	0018      	movs	r0, r3
 8001b12:	f7ff ff94 	bl	8001a3e <_ZN14TinyGPSIntegerC1Ev>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3398      	adds	r3, #152	; 0x98
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f7ff ffc8 	bl	8001ab0 <_ZN11TinyGPSHDOPC1Ev>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	22a8      	movs	r2, #168	; 0xa8
 8001b24:	2100      	movs	r1, #0
 8001b26:	5499      	strb	r1, [r3, r2]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	22a9      	movs	r2, #169	; 0xa9
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	5499      	strb	r1, [r3, r2]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	22b9      	movs	r2, #185	; 0xb9
 8001b34:	2102      	movs	r1, #2
 8001b36:	5499      	strb	r1, [r3, r2]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	22ba      	movs	r2, #186	; 0xba
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	5499      	strb	r1, [r3, r2]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	22bb      	movs	r2, #187	; 0xbb
 8001b44:	2100      	movs	r1, #0
 8001b46:	5499      	strb	r1, [r3, r2]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	22bc      	movs	r2, #188	; 0xbc
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	5499      	strb	r1, [r3, r2]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	22c0      	movs	r2, #192	; 0xc0
 8001b54:	2100      	movs	r1, #0
 8001b56:	5099      	str	r1, [r3, r2]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	22c4      	movs	r2, #196	; 0xc4
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	5099      	str	r1, [r3, r2]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	22c8      	movs	r2, #200	; 0xc8
 8001b64:	2100      	movs	r1, #0
 8001b66:	5099      	str	r1, [r3, r2]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	22cc      	movs	r2, #204	; 0xcc
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	5099      	str	r1, [r3, r2]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	22d0      	movs	r2, #208	; 0xd0
 8001b74:	2100      	movs	r1, #0
 8001b76:	5099      	str	r1, [r3, r2]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	22d4      	movs	r2, #212	; 0xd4
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	5099      	str	r1, [r3, r2]
{
  term[0] = '\0';
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	22aa      	movs	r2, #170	; 0xaa
 8001b84:	2100      	movs	r1, #0
 8001b86:	5499      	strb	r1, [r3, r2]
}
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b002      	add	sp, #8
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <_ZN11TinyGPSPlus6encodeEc>:
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
 8001b94:	b590      	push	{r4, r7, lr}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	000a      	movs	r2, r1
 8001b9e:	1cfb      	adds	r3, r7, #3
 8001ba0:	701a      	strb	r2, [r3, #0]
  ++encodedCharCount;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	22c8      	movs	r2, #200	; 0xc8
 8001ba6:	589b      	ldr	r3, [r3, r2]
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	21c8      	movs	r1, #200	; 0xc8
 8001bae:	505a      	str	r2, [r3, r1]

  switch(c)
 8001bb0:	1cfb      	adds	r3, r7, #3
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	3b0a      	subs	r3, #10
 8001bb6:	2b22      	cmp	r3, #34	; 0x22
 8001bb8:	d85d      	bhi.n	8001c76 <_ZN11TinyGPSPlus6encodeEc+0xe2>
 8001bba:	009a      	lsls	r2, r3, #2
 8001bbc:	4b44      	ldr	r3, [pc, #272]	; (8001cd0 <_ZN11TinyGPSPlus6encodeEc+0x13c>)
 8001bbe:	18d3      	adds	r3, r2, r3
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	469f      	mov	pc, r3
  {
  case ',': // term terminators
    parity ^= (uint8_t)c;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	22a8      	movs	r2, #168	; 0xa8
 8001bc8:	5c9a      	ldrb	r2, [r3, r2]
 8001bca:	1cfb      	adds	r3, r7, #3
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	4053      	eors	r3, r2
 8001bd0:	b2d9      	uxtb	r1, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	22a8      	movs	r2, #168	; 0xa8
 8001bd6:	5499      	strb	r1, [r3, r2]
  case '\r':
  case '\n':
  case '*':
    {
      bool isValidSentence = false;
 8001bd8:	200f      	movs	r0, #15
 8001bda:	183b      	adds	r3, r7, r0
 8001bdc:	2200      	movs	r2, #0
 8001bde:	701a      	strb	r2, [r3, #0]
      if (curTermOffset < sizeof(term))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	22bb      	movs	r2, #187	; 0xbb
 8001be4:	5c9b      	ldrb	r3, [r3, r2]
 8001be6:	2b0e      	cmp	r3, #14
 8001be8:	d810      	bhi.n	8001c0c <_ZN11TinyGPSPlus6encodeEc+0x78>
      {
        term[curTermOffset] = 0;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	22bb      	movs	r2, #187	; 0xbb
 8001bee:	5c9b      	ldrb	r3, [r3, r2]
 8001bf0:	0019      	movs	r1, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	22aa      	movs	r2, #170	; 0xaa
 8001bf6:	185b      	adds	r3, r3, r1
 8001bf8:	189b      	adds	r3, r3, r2
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
        isValidSentence = endOfTermHandler();
 8001bfe:	183c      	adds	r4, r7, r0
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	0018      	movs	r0, r3
 8001c04:	f000 f964 	bl	8001ed0 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	7023      	strb	r3, [r4, #0]
      }
      ++curTermNumber;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	22ba      	movs	r2, #186	; 0xba
 8001c10:	5c9b      	ldrb	r3, [r3, r2]
 8001c12:	3301      	adds	r3, #1
 8001c14:	b2d9      	uxtb	r1, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	22ba      	movs	r2, #186	; 0xba
 8001c1a:	5499      	strb	r1, [r3, r2]
      curTermOffset = 0;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	22bb      	movs	r2, #187	; 0xbb
 8001c20:	2100      	movs	r1, #0
 8001c22:	5499      	strb	r1, [r3, r2]
      isChecksumTerm = c == '*';
 8001c24:	1cfb      	adds	r3, r7, #3
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	3b2a      	subs	r3, #42	; 0x2a
 8001c2a:	425a      	negs	r2, r3
 8001c2c:	4153      	adcs	r3, r2
 8001c2e:	b2d9      	uxtb	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	22a9      	movs	r2, #169	; 0xa9
 8001c34:	5499      	strb	r1, [r3, r2]
      return isValidSentence;
 8001c36:	230f      	movs	r3, #15
 8001c38:	18fb      	adds	r3, r7, r3
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	e043      	b.n	8001cc6 <_ZN11TinyGPSPlus6encodeEc+0x132>
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	22bb      	movs	r2, #187	; 0xbb
 8001c42:	2100      	movs	r1, #0
 8001c44:	5499      	strb	r1, [r3, r2]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	22bb      	movs	r2, #187	; 0xbb
 8001c4a:	5c99      	ldrb	r1, [r3, r2]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	22ba      	movs	r2, #186	; 0xba
 8001c50:	5499      	strb	r1, [r3, r2]
    parity = 0;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	22a8      	movs	r2, #168	; 0xa8
 8001c56:	2100      	movs	r1, #0
 8001c58:	5499      	strb	r1, [r3, r2]
    curSentenceType = GPS_SENTENCE_OTHER;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	22b9      	movs	r2, #185	; 0xb9
 8001c5e:	2102      	movs	r1, #2
 8001c60:	5499      	strb	r1, [r3, r2]
    isChecksumTerm = false;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	22a9      	movs	r2, #169	; 0xa9
 8001c66:	2100      	movs	r1, #0
 8001c68:	5499      	strb	r1, [r3, r2]
    sentenceHasFix = false;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	22bc      	movs	r2, #188	; 0xbc
 8001c6e:	2100      	movs	r1, #0
 8001c70:	5499      	strb	r1, [r3, r2]
    return false;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e027      	b.n	8001cc6 <_ZN11TinyGPSPlus6encodeEc+0x132>

  default: // ordinary characters
    if (curTermOffset < sizeof(term) - 1)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	22bb      	movs	r2, #187	; 0xbb
 8001c7a:	5c9b      	ldrb	r3, [r3, r2]
 8001c7c:	2b0d      	cmp	r3, #13
 8001c7e:	d80f      	bhi.n	8001ca0 <_ZN11TinyGPSPlus6encodeEc+0x10c>
      term[curTermOffset++] = c;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	22bb      	movs	r2, #187	; 0xbb
 8001c84:	5c9b      	ldrb	r3, [r3, r2]
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	b2d0      	uxtb	r0, r2
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	21bb      	movs	r1, #187	; 0xbb
 8001c8e:	5450      	strb	r0, [r2, r1]
 8001c90:	0019      	movs	r1, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	22aa      	movs	r2, #170	; 0xaa
 8001c96:	185b      	adds	r3, r3, r1
 8001c98:	189b      	adds	r3, r3, r2
 8001c9a:	1cfa      	adds	r2, r7, #3
 8001c9c:	7812      	ldrb	r2, [r2, #0]
 8001c9e:	701a      	strb	r2, [r3, #0]
    if (!isChecksumTerm)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	22a9      	movs	r2, #169	; 0xa9
 8001ca4:	5c9b      	ldrb	r3, [r3, r2]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	4053      	eors	r3, r2
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d009      	beq.n	8001cc4 <_ZN11TinyGPSPlus6encodeEc+0x130>
      parity ^= c;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	22a8      	movs	r2, #168	; 0xa8
 8001cb4:	5c9a      	ldrb	r2, [r3, r2]
 8001cb6:	1cfb      	adds	r3, r7, #3
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	4053      	eors	r3, r2
 8001cbc:	b2d9      	uxtb	r1, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	22a8      	movs	r2, #168	; 0xa8
 8001cc2:	5499      	strb	r1, [r3, r2]
    return false;
 8001cc4:	2300      	movs	r3, #0
  }

  return false;
}
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	b005      	add	sp, #20
 8001ccc:	bd90      	pop	{r4, r7, pc}
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	0800a128 	.word	0x0800a128

08001cd4 <_ZN11TinyGPSPlus7fromHexEc>:

//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	000a      	movs	r2, r1
 8001cde:	1cfb      	adds	r3, r7, #3
 8001ce0:	701a      	strb	r2, [r3, #0]
  if (a >= 'A' && a <= 'F')
 8001ce2:	1cfb      	adds	r3, r7, #3
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b40      	cmp	r3, #64	; 0x40
 8001ce8:	d907      	bls.n	8001cfa <_ZN11TinyGPSPlus7fromHexEc+0x26>
 8001cea:	1cfb      	adds	r3, r7, #3
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b46      	cmp	r3, #70	; 0x46
 8001cf0:	d803      	bhi.n	8001cfa <_ZN11TinyGPSPlus7fromHexEc+0x26>
    return a - 'A' + 10;
 8001cf2:	1cfb      	adds	r3, r7, #3
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	3b37      	subs	r3, #55	; 0x37
 8001cf8:	e00e      	b.n	8001d18 <_ZN11TinyGPSPlus7fromHexEc+0x44>
  else if (a >= 'a' && a <= 'f')
 8001cfa:	1cfb      	adds	r3, r7, #3
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b60      	cmp	r3, #96	; 0x60
 8001d00:	d907      	bls.n	8001d12 <_ZN11TinyGPSPlus7fromHexEc+0x3e>
 8001d02:	1cfb      	adds	r3, r7, #3
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b66      	cmp	r3, #102	; 0x66
 8001d08:	d803      	bhi.n	8001d12 <_ZN11TinyGPSPlus7fromHexEc+0x3e>
    return a - 'a' + 10;
 8001d0a:	1cfb      	adds	r3, r7, #3
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	3b57      	subs	r3, #87	; 0x57
 8001d10:	e002      	b.n	8001d18 <_ZN11TinyGPSPlus7fromHexEc+0x44>
  else
    return a - '0';
 8001d12:	1cfb      	adds	r3, r7, #3
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	3b30      	subs	r3, #48	; 0x30
}
 8001d18:	0018      	movs	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	b002      	add	sp, #8
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  bool negative = *term == '-';
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	781a      	ldrb	r2, [r3, #0]
 8001d2c:	200b      	movs	r0, #11
 8001d2e:	183b      	adds	r3, r7, r0
 8001d30:	3a2d      	subs	r2, #45	; 0x2d
 8001d32:	4251      	negs	r1, r2
 8001d34:	414a      	adcs	r2, r1
 8001d36:	701a      	strb	r2, [r3, #0]
  if (negative) ++term;
 8001d38:	183b      	adds	r3, r7, r0
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d002      	beq.n	8001d46 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x26>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3301      	adds	r3, #1
 8001d44:	607b      	str	r3, [r7, #4]
  int32_t ret = 100 * (int32_t)atol(term);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f007 f985 	bl	8009058 <atol>
 8001d4e:	0003      	movs	r3, r0
 8001d50:	2264      	movs	r2, #100	; 0x64
 8001d52:	4353      	muls	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
  while (isdigit(*term)) ++term;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	3b30      	subs	r3, #48	; 0x30
 8001d5c:	001a      	movs	r2, r3
 8001d5e:	2109      	movs	r1, #9
 8001d60:	2300      	movs	r3, #0
 8001d62:	4291      	cmp	r1, r2
 8001d64:	415b      	adcs	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x54>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	607b      	str	r3, [r7, #4]
 8001d72:	e7f0      	b.n	8001d56 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x36>
  if (*term == '.' && isdigit(term[1]))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b2e      	cmp	r3, #46	; 0x2e
 8001d7a:	d12b      	bne.n	8001dd4 <_ZN11TinyGPSPlus12parseDecimalEPKc+0xb4>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	3b30      	subs	r3, #48	; 0x30
 8001d84:	001a      	movs	r2, r3
 8001d86:	2109      	movs	r1, #9
 8001d88:	2300      	movs	r3, #0
 8001d8a:	4291      	cmp	r1, r2
 8001d8c:	415b      	adcs	r3, r3
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d01f      	beq.n	8001dd4 <_ZN11TinyGPSPlus12parseDecimalEPKc+0xb4>
  {
    ret += 10 * (term[1] - '0');
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3301      	adds	r3, #1
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	3b30      	subs	r3, #48	; 0x30
 8001d9c:	001a      	movs	r2, r3
 8001d9e:	0013      	movs	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	189b      	adds	r3, r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	001a      	movs	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	189b      	adds	r3, r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
    if (isdigit(term[2]))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3302      	adds	r3, #2
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	3b30      	subs	r3, #48	; 0x30
 8001db6:	001a      	movs	r2, r3
 8001db8:	2109      	movs	r1, #9
 8001dba:	2300      	movs	r3, #0
 8001dbc:	4291      	cmp	r1, r2
 8001dbe:	415b      	adcs	r3, r3
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d006      	beq.n	8001dd4 <_ZN11TinyGPSPlus12parseDecimalEPKc+0xb4>
      ret += term[2] - '0';
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3302      	adds	r3, #2
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	3b30      	subs	r3, #48	; 0x30
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	18d3      	adds	r3, r2, r3
 8001dd2:	60fb      	str	r3, [r7, #12]
  }
  return negative ? -ret : ret;
 8001dd4:	230b      	movs	r3, #11
 8001dd6:	18fb      	adds	r3, r7, r3
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d002      	beq.n	8001de4 <_ZN11TinyGPSPlus12parseDecimalEPKc+0xc4>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	425b      	negs	r3, r3
 8001de2:	e000      	b.n	8001de6 <_ZN11TinyGPSPlus12parseDecimalEPKc+0xc6>
 8001de4:	68fb      	ldr	r3, [r7, #12]
}
 8001de6:	0018      	movs	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	b004      	add	sp, #16
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t leftOfDecimal = (uint32_t)atol(term);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f007 f92b 	bl	8009058 <atol>
 8001e02:	0003      	movs	r3, r0
 8001e04:	60fb      	str	r3, [r7, #12]
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2164      	movs	r1, #100	; 0x64
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f7fe fa14 	bl	8000238 <__aeabi_uidivmod>
 8001e10:	000b      	movs	r3, r1
 8001e12:	001a      	movs	r2, r3
 8001e14:	210a      	movs	r1, #10
 8001e16:	187b      	adds	r3, r7, r1
 8001e18:	801a      	strh	r2, [r3, #0]
  uint32_t multiplier = 10000000UL;
 8001e1a:	4b2c      	ldr	r3, [pc, #176]	; (8001ecc <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0xdc>)
 8001e1c:	617b      	str	r3, [r7, #20]
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
 8001e1e:	187b      	adds	r3, r7, r1
 8001e20:	881a      	ldrh	r2, [r3, #0]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	4353      	muls	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]

  deg.deg = (int16_t)(leftOfDecimal / 100);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2164      	movs	r1, #100	; 0x64
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f7fe f97d 	bl	800012c <__udivsi3>
 8001e32:	0003      	movs	r3, r0
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	801a      	strh	r2, [r3, #0]

  while (isdigit(*term))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	3b30      	subs	r3, #48	; 0x30
 8001e40:	001a      	movs	r2, r3
 8001e42:	2109      	movs	r1, #9
 8001e44:	2300      	movs	r3, #0
 8001e46:	4291      	cmp	r1, r2
 8001e48:	415b      	adcs	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x68>
    ++term;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3301      	adds	r3, #1
 8001e54:	607b      	str	r3, [r7, #4]
  while (isdigit(*term))
 8001e56:	e7f0      	b.n	8001e3a <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x4a>

  if (*term == '.')
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b2e      	cmp	r3, #46	; 0x2e
 8001e5e:	d121      	bne.n	8001ea4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0xb4>
    while (isdigit(*++term))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3301      	adds	r3, #1
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	3b30      	subs	r3, #48	; 0x30
 8001e6c:	001a      	movs	r2, r3
 8001e6e:	2109      	movs	r1, #9
 8001e70:	2300      	movs	r3, #0
 8001e72:	4291      	cmp	r1, r2
 8001e74:	415b      	adcs	r3, r3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	1e5a      	subs	r2, r3, #1
 8001e7a:	4193      	sbcs	r3, r2
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d010      	beq.n	8001ea4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0xb4>
    {
      multiplier /= 10;
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	210a      	movs	r1, #10
 8001e86:	0018      	movs	r0, r3
 8001e88:	f7fe f950 	bl	800012c <__udivsi3>
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	617b      	str	r3, [r7, #20]
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	3b30      	subs	r3, #48	; 0x30
 8001e96:	001a      	movs	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	4353      	muls	r3, r2
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	18d3      	adds	r3, r2, r3
 8001ea0:	613b      	str	r3, [r7, #16]
    while (isdigit(*++term))
 8001ea2:	e7dd      	b.n	8001e60 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x70>
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	0013      	movs	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	189b      	adds	r3, r3, r2
 8001eac:	3301      	adds	r3, #1
 8001eae:	2103      	movs	r1, #3
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f7fe f93b 	bl	800012c <__udivsi3>
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	001a      	movs	r2, r3
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
  deg.negative = false;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	721a      	strb	r2, [r3, #8]
}
 8001ec4:	46c0      	nop			; (mov r8, r8)
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	b006      	add	sp, #24
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	00989680 	.word	0x00989680

08001ed0 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
 8001ed0:	b590      	push	{r4, r7, lr}
 8001ed2:	b087      	sub	sp, #28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	22a9      	movs	r2, #169	; 0xa9
 8001edc:	5c9b      	ldrb	r3, [r3, r2]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d100      	bne.n	8001ee4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x14>
 8001ee2:	e09e      	b.n	8002022 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x152>
  {
    uint8_t checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	22aa      	movs	r2, #170	; 0xaa
 8001ee8:	5c9a      	ldrb	r2, [r3, r2]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	0011      	movs	r1, r2
 8001eee:	0018      	movs	r0, r3
 8001ef0:	f7ff fef0 	bl	8001cd4 <_ZN11TinyGPSPlus7fromHexEc>
 8001ef4:	0003      	movs	r3, r0
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	011b      	lsls	r3, r3, #4
 8001efa:	b2dc      	uxtb	r4, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	22ab      	movs	r2, #171	; 0xab
 8001f00:	5c9a      	ldrb	r2, [r3, r2]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	0011      	movs	r1, r2
 8001f06:	0018      	movs	r0, r3
 8001f08:	f7ff fee4 	bl	8001cd4 <_ZN11TinyGPSPlus7fromHexEc>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	210f      	movs	r1, #15
 8001f12:	187b      	adds	r3, r7, r1
 8001f14:	18a2      	adds	r2, r4, r2
 8001f16:	701a      	strb	r2, [r3, #0]
    if (checksum == parity)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	22a8      	movs	r2, #168	; 0xa8
 8001f1c:	5c9b      	ldrb	r3, [r3, r2]
 8001f1e:	187a      	adds	r2, r7, r1
 8001f20:	7812      	ldrb	r2, [r2, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d000      	beq.n	8001f28 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x58>
 8001f26:	e073      	b.n	8002010 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x140>
    {
      passedChecksumCount++;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	22d4      	movs	r2, #212	; 0xd4
 8001f2c:	589b      	ldr	r3, [r3, r2]
 8001f2e:	1c5a      	adds	r2, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	21d4      	movs	r1, #212	; 0xd4
 8001f34:	505a      	str	r2, [r3, r1]
      if (sentenceHasFix)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	22bc      	movs	r2, #188	; 0xbc
 8001f3a:	5c9b      	ldrb	r3, [r3, r2]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d006      	beq.n	8001f4e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7e>
        ++sentencesWithFixCount;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	22cc      	movs	r2, #204	; 0xcc
 8001f44:	589b      	ldr	r3, [r3, r2]
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	21cc      	movs	r1, #204	; 0xcc
 8001f4c:	505a      	str	r2, [r3, r1]

      switch(curSentenceType)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	22b9      	movs	r2, #185	; 0xb9
 8001f52:	5c9b      	ldrb	r3, [r3, r2]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d01f      	beq.n	8001f98 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xc8>
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d13c      	bne.n	8001fd6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x106>
      {
      case GPS_SENTENCE_GPRMC:
        date.commit();
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3338      	adds	r3, #56	; 0x38
 8001f60:	0018      	movs	r0, r3
 8001f62:	f000 f9ee 	bl	8002342 <_ZN11TinyGPSDate6commitEv>
        time.commit();
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3348      	adds	r3, #72	; 0x48
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f000 fa01 	bl	8002372 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	22bc      	movs	r2, #188	; 0xbc
 8001f74:	5c9b      	ldrb	r3, [r3, r2]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d02c      	beq.n	8001fd4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x104>
        {
           location.commit();
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f000 f999 	bl	80022b4 <_ZN15TinyGPSLocation6commitEv>
           speed.commit();
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3358      	adds	r3, #88	; 0x58
 8001f86:	0018      	movs	r0, r3
 8001f88:	f000 fa2d 	bl	80023e6 <_ZN14TinyGPSDecimal6commitEv>
           course.commit();
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3368      	adds	r3, #104	; 0x68
 8001f90:	0018      	movs	r0, r3
 8001f92:	f000 fa28 	bl	80023e6 <_ZN14TinyGPSDecimal6commitEv>
        }
        break;
 8001f96:	e01d      	b.n	8001fd4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x104>
      case GPS_SENTENCE_GPGGA:
        time.commit();
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3348      	adds	r3, #72	; 0x48
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f000 f9e8 	bl	8002372 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	22bc      	movs	r2, #188	; 0xbc
 8001fa6:	5c9b      	ldrb	r3, [r3, r2]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d008      	beq.n	8001fbe <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xee>
        {
          location.commit();
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f000 f980 	bl	80022b4 <_ZN15TinyGPSLocation6commitEv>
          altitude.commit();
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3378      	adds	r3, #120	; 0x78
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f000 fa14 	bl	80023e6 <_ZN14TinyGPSDecimal6commitEv>
        }
        satellites.commit();
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3388      	adds	r3, #136	; 0x88
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f000 fa37 	bl	8002436 <_ZN14TinyGPSInteger6commitEv>
        hdop.commit();
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3398      	adds	r3, #152	; 0x98
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f000 fa0a 	bl	80023e6 <_ZN14TinyGPSDecimal6commitEv>
        break;
 8001fd2:	e000      	b.n	8001fd6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x106>
        break;
 8001fd4:	46c0      	nop			; (mov r8, r8)
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	22c4      	movs	r2, #196	; 0xc4
 8001fda:	589b      	ldr	r3, [r3, r2]
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d013      	beq.n	800200c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x13c>
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	21c4      	movs	r1, #196	; 0xc4
 8001fec:	585b      	ldr	r3, [r3, r1]
 8001fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff0:	0019      	movs	r1, r3
 8001ff2:	0010      	movs	r0, r2
 8001ff4:	f7fe f886 	bl	8000104 <strcmp>
 8001ff8:	1e03      	subs	r3, r0, #0
 8001ffa:	d107      	bne.n	800200c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x13c>
         p->commit();
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	0018      	movs	r0, r3
 8002000:	f000 fa42 	bl	8002488 <_ZN13TinyGPSCustom6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	e7e8      	b.n	8001fde <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x10e>
      return true;
 800200c:	2301      	movs	r3, #1
 800200e:	e143      	b.n	8002298 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c8>
    }

    else
    {
      ++failedChecksumCount;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	22d0      	movs	r2, #208	; 0xd0
 8002014:	589b      	ldr	r3, [r3, r2]
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	21d0      	movs	r1, #208	; 0xd0
 800201c:	505a      	str	r2, [r3, r1]
    }

    return false;
 800201e:	2300      	movs	r3, #0
 8002020:	e13a      	b.n	8002298 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c8>
  }

  // the first term determines the sentence type
  if (curTermNumber == 0)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	22ba      	movs	r2, #186	; 0xba
 8002026:	5c9b      	ldrb	r3, [r3, r2]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d000      	beq.n	800202e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x15e>
 800202c:	e067      	b.n	80020fe <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x22e>
  {
    if (!strcmp(term, _GPRMCterm) || !strcmp(term, _GNRMCterm))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	33aa      	adds	r3, #170	; 0xaa
 8002032:	4a9b      	ldr	r2, [pc, #620]	; (80022a0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3d0>)
 8002034:	0011      	movs	r1, r2
 8002036:	0018      	movs	r0, r3
 8002038:	f7fe f864 	bl	8000104 <strcmp>
 800203c:	1e03      	subs	r3, r0, #0
 800203e:	d008      	beq.n	8002052 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x182>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	33aa      	adds	r3, #170	; 0xaa
 8002044:	4a97      	ldr	r2, [pc, #604]	; (80022a4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3d4>)
 8002046:	0011      	movs	r1, r2
 8002048:	0018      	movs	r0, r3
 800204a:	f7fe f85b 	bl	8000104 <strcmp>
 800204e:	1e03      	subs	r3, r0, #0
 8002050:	d104      	bne.n	800205c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x18c>
      curSentenceType = GPS_SENTENCE_GPRMC;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	22b9      	movs	r2, #185	; 0xb9
 8002056:	2101      	movs	r1, #1
 8002058:	5499      	strb	r1, [r3, r2]
 800205a:	e01a      	b.n	8002092 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1c2>
    else if (!strcmp(term, _GPGGAterm) || !strcmp(term, _GNGGAterm))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	33aa      	adds	r3, #170	; 0xaa
 8002060:	4a91      	ldr	r2, [pc, #580]	; (80022a8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3d8>)
 8002062:	0011      	movs	r1, r2
 8002064:	0018      	movs	r0, r3
 8002066:	f7fe f84d 	bl	8000104 <strcmp>
 800206a:	1e03      	subs	r3, r0, #0
 800206c:	d008      	beq.n	8002080 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1b0>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	33aa      	adds	r3, #170	; 0xaa
 8002072:	4a8e      	ldr	r2, [pc, #568]	; (80022ac <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3dc>)
 8002074:	0011      	movs	r1, r2
 8002076:	0018      	movs	r0, r3
 8002078:	f7fe f844 	bl	8000104 <strcmp>
 800207c:	1e03      	subs	r3, r0, #0
 800207e:	d104      	bne.n	800208a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ba>
      curSentenceType = GPS_SENTENCE_GPGGA;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	22b9      	movs	r2, #185	; 0xb9
 8002084:	2100      	movs	r1, #0
 8002086:	5499      	strb	r1, [r3, r2]
 8002088:	e003      	b.n	8002092 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1c2>
    else
      curSentenceType = GPS_SENTENCE_OTHER;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	22b9      	movs	r2, #185	; 0xb9
 800208e:	2102      	movs	r1, #2
 8002090:	5499      	strb	r1, [r3, r2]

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	22c0      	movs	r2, #192	; 0xc0
 8002096:	589a      	ldr	r2, [r3, r2]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	21c4      	movs	r1, #196	; 0xc4
 800209c:	505a      	str	r2, [r3, r1]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	22c4      	movs	r2, #196	; 0xc4
 80020a2:	589b      	ldr	r3, [r3, r2]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d013      	beq.n	80020d0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	22c4      	movs	r2, #196	; 0xc4
 80020ac:	589b      	ldr	r3, [r3, r2]
 80020ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	33aa      	adds	r3, #170	; 0xaa
 80020b4:	0019      	movs	r1, r3
 80020b6:	0010      	movs	r0, r2
 80020b8:	f7fe f824 	bl	8000104 <strcmp>
 80020bc:	1e03      	subs	r3, r0, #0
 80020be:	da07      	bge.n	80020d0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	22c4      	movs	r2, #196	; 0xc4
 80020c4:	589b      	ldr	r3, [r3, r2]
 80020c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	21c4      	movs	r1, #196	; 0xc4
 80020cc:	505a      	str	r2, [r3, r1]
 80020ce:	e7e6      	b.n	800209e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ce>
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	22c4      	movs	r2, #196	; 0xc4
 80020d4:	589b      	ldr	r3, [r3, r2]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00f      	beq.n	80020fa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x22a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	22c4      	movs	r2, #196	; 0xc4
 80020de:	589b      	ldr	r3, [r3, r2]
 80020e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	33aa      	adds	r3, #170	; 0xaa
 80020e6:	0019      	movs	r1, r3
 80020e8:	0010      	movs	r0, r2
 80020ea:	f7fe f80b 	bl	8000104 <strcmp>
 80020ee:	1e03      	subs	r3, r0, #0
 80020f0:	dd03      	ble.n	80020fa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x22a>
       customCandidates = NULL;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	22c4      	movs	r2, #196	; 0xc4
 80020f6:	2100      	movs	r1, #0
 80020f8:	5099      	str	r1, [r3, r2]

    return false;
 80020fa:	2300      	movs	r3, #0
 80020fc:	e0cc      	b.n	8002298 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c8>
  }

  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	22b9      	movs	r2, #185	; 0xb9
 8002102:	5c9b      	ldrb	r3, [r3, r2]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d100      	bne.n	800210a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23a>
 8002108:	e098      	b.n	800223c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	22aa      	movs	r2, #170	; 0xaa
 800210e:	5c9b      	ldrb	r3, [r3, r2]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d100      	bne.n	8002116 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x246>
 8002114:	e092      	b.n	800223c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    switch(COMBINE(curSentenceType, curTermNumber))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	22b9      	movs	r2, #185	; 0xb9
 800211a:	5c9b      	ldrb	r3, [r3, r2]
 800211c:	015b      	lsls	r3, r3, #5
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	21ba      	movs	r1, #186	; 0xba
 8002122:	5c52      	ldrb	r2, [r2, r1]
 8002124:	4313      	orrs	r3, r2
 8002126:	2b29      	cmp	r3, #41	; 0x29
 8002128:	d900      	bls.n	800212c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x25c>
 800212a:	e087      	b.n	800223c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
 800212c:	009a      	lsls	r2, r3, #2
 800212e:	4b60      	ldr	r3, [pc, #384]	; (80022b0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3e0>)
 8002130:	18d3      	adds	r3, r2, r3
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	469f      	mov	pc, r3
  {
    case COMBINE(GPS_SENTENCE_GPRMC, 1): // Time in both sentences
    case COMBINE(GPS_SENTENCE_GPGGA, 1):
      time.setTime(term);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3348      	adds	r3, #72	; 0x48
 800213a:	001a      	movs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	33aa      	adds	r3, #170	; 0xaa
 8002140:	0019      	movs	r1, r3
 8002142:	0010      	movs	r0, r2
 8002144:	f000 f92d 	bl	80023a2 <_ZN11TinyGPSTime7setTimeEPKc>
      break;
 8002148:	e078      	b.n	800223c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 2): // GPRMC validity
      sentenceHasFix = term[0] == 'A';
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	22aa      	movs	r2, #170	; 0xaa
 800214e:	5c9b      	ldrb	r3, [r3, r2]
 8002150:	3b41      	subs	r3, #65	; 0x41
 8002152:	425a      	negs	r2, r3
 8002154:	4153      	adcs	r3, r2
 8002156:	b2d9      	uxtb	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	22bc      	movs	r2, #188	; 0xbc
 800215c:	5499      	strb	r1, [r3, r2]
      break;
 800215e:	e06d      	b.n	800223c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 3): // Latitude
    case COMBINE(GPS_SENTENCE_GPGGA, 2):
      location.setLatitude(term);
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	33aa      	adds	r3, #170	; 0xaa
 8002166:	0019      	movs	r1, r3
 8002168:	0010      	movs	r0, r2
 800216a:	f000 f8c8 	bl	80022fe <_ZN15TinyGPSLocation11setLatitudeEPKc>
      break;
 800216e:	e065      	b.n	800223c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 4): // N/S
    case COMBINE(GPS_SENTENCE_GPGGA, 3):
      location.rawNewLatData.negative = term[0] == 'S';
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	22aa      	movs	r2, #170	; 0xaa
 8002174:	5c9b      	ldrb	r3, [r3, r2]
 8002176:	3b53      	subs	r3, #83	; 0x53
 8002178:	425a      	negs	r2, r3
 800217a:	4153      	adcs	r3, r2
 800217c:	b2d9      	uxtb	r1, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2224      	movs	r2, #36	; 0x24
 8002182:	5499      	strb	r1, [r3, r2]
      break;
 8002184:	e05a      	b.n	800223c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 5): // Longitude
    case COMBINE(GPS_SENTENCE_GPGGA, 4):
      location.setLongitude(term);
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	33aa      	adds	r3, #170	; 0xaa
 800218c:	0019      	movs	r1, r3
 800218e:	0010      	movs	r0, r2
 8002190:	f000 f8c6 	bl	8002320 <_ZN15TinyGPSLocation12setLongitudeEPKc>
      break;
 8002194:	e052      	b.n	800223c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 6): // E/W
    case COMBINE(GPS_SENTENCE_GPGGA, 5):
      location.rawNewLngData.negative = term[0] == 'W';
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	22aa      	movs	r2, #170	; 0xaa
 800219a:	5c9b      	ldrb	r3, [r3, r2]
 800219c:	3b57      	subs	r3, #87	; 0x57
 800219e:	425a      	negs	r2, r3
 80021a0:	4153      	adcs	r3, r2
 80021a2:	b2d9      	uxtb	r1, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2230      	movs	r2, #48	; 0x30
 80021a8:	5499      	strb	r1, [r3, r2]
      break;
 80021aa:	e047      	b.n	800223c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 7): // Speed (GPRMC)
      speed.set(term);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3358      	adds	r3, #88	; 0x58
 80021b0:	001a      	movs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	33aa      	adds	r3, #170	; 0xaa
 80021b6:	0019      	movs	r1, r3
 80021b8:	0010      	movs	r0, r2
 80021ba:	f000 f92c 	bl	8002416 <_ZN14TinyGPSDecimal3setEPKc>
      break;
 80021be:	e03d      	b.n	800223c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
      course.set(term);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3368      	adds	r3, #104	; 0x68
 80021c4:	001a      	movs	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	33aa      	adds	r3, #170	; 0xaa
 80021ca:	0019      	movs	r1, r3
 80021cc:	0010      	movs	r0, r2
 80021ce:	f000 f922 	bl	8002416 <_ZN14TinyGPSDecimal3setEPKc>
      break;
 80021d2:	e033      	b.n	800223c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
      date.setDate(term);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3338      	adds	r3, #56	; 0x38
 80021d8:	001a      	movs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	33aa      	adds	r3, #170	; 0xaa
 80021de:	0019      	movs	r1, r3
 80021e0:	0010      	movs	r0, r2
 80021e2:	f000 f8ef 	bl	80023c4 <_ZN11TinyGPSDate7setDateEPKc>
      break;
 80021e6:	e029      	b.n	800223c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPGGA, 6): // Fix data (GPGGA)
      sentenceHasFix = term[0] > '0';
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	22aa      	movs	r2, #170	; 0xaa
 80021ec:	5c9b      	ldrb	r3, [r3, r2]
 80021ee:	2230      	movs	r2, #48	; 0x30
 80021f0:	429a      	cmp	r2, r3
 80021f2:	419b      	sbcs	r3, r3
 80021f4:	425b      	negs	r3, r3
 80021f6:	b2d9      	uxtb	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	22bc      	movs	r2, #188	; 0xbc
 80021fc:	5499      	strb	r1, [r3, r2]
      break;
 80021fe:	e01d      	b.n	800223c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPGGA, 7): // Satellites used (GPGGA)
      satellites.set(term);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3388      	adds	r3, #136	; 0x88
 8002204:	001a      	movs	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	33aa      	adds	r3, #170	; 0xaa
 800220a:	0019      	movs	r1, r3
 800220c:	0010      	movs	r0, r2
 800220e:	f000 f92a 	bl	8002466 <_ZN14TinyGPSInteger3setEPKc>
      break;
 8002212:	e013      	b.n	800223c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPGGA, 8): // HDOP
      hdop.set(term);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3398      	adds	r3, #152	; 0x98
 8002218:	001a      	movs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	33aa      	adds	r3, #170	; 0xaa
 800221e:	0019      	movs	r1, r3
 8002220:	0010      	movs	r0, r2
 8002222:	f000 f8f8 	bl	8002416 <_ZN14TinyGPSDecimal3setEPKc>
      break;
 8002226:	e009      	b.n	800223c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPGGA, 9): // Altitude (GPGGA)
      altitude.set(term);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3378      	adds	r3, #120	; 0x78
 800222c:	001a      	movs	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	33aa      	adds	r3, #170	; 0xaa
 8002232:	0019      	movs	r1, r3
 8002234:	0010      	movs	r0, r2
 8002236:	f000 f8ee 	bl	8002416 <_ZN14TinyGPSDecimal3setEPKc>
      break;
 800223a:	46c0      	nop			; (mov r8, r8)
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	22c4      	movs	r2, #196	; 0xc4
 8002240:	589b      	ldr	r3, [r3, r2]
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d025      	beq.n	8002296 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c6>
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	21c4      	movs	r1, #196	; 0xc4
 8002252:	585b      	ldr	r3, [r3, r1]
 8002254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002256:	0019      	movs	r1, r3
 8002258:	0010      	movs	r0, r2
 800225a:	f7fd ff53 	bl	8000104 <strcmp>
 800225e:	1e03      	subs	r3, r0, #0
 8002260:	d119      	bne.n	8002296 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c6>
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	21ba      	movs	r1, #186	; 0xba
 800226a:	5c52      	ldrb	r2, [r2, r1]
 800226c:	4293      	cmp	r3, r2
 800226e:	dc12      	bgt.n	8002296 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c6>
    if (p->termNumber == curTermNumber)
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	21ba      	movs	r1, #186	; 0xba
 8002278:	5c52      	ldrb	r2, [r2, r1]
 800227a:	4293      	cmp	r3, r2
 800227c:	d107      	bne.n	800228e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3be>
         p->set(term);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	33aa      	adds	r3, #170	; 0xaa
 8002282:	001a      	movs	r2, r3
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	0011      	movs	r1, r2
 8002288:	0018      	movs	r0, r3
 800228a:	f000 f91b 	bl	80024c4 <_ZN13TinyGPSCustom3setEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	e7d6      	b.n	8002244 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x374>

  return false;
 8002296:	2300      	movs	r3, #0
}
 8002298:	0018      	movs	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	b007      	add	sp, #28
 800229e:	bd90      	pop	{r4, r7, pc}
 80022a0:	08009b04 	.word	0x08009b04
 80022a4:	08009b0c 	.word	0x08009b0c
 80022a8:	08009b14 	.word	0x08009b14
 80022ac:	08009b1c 	.word	0x08009b1c
 80022b0:	0800a1b4 	.word	0x0800a1b4

080022b4 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
   rawLatData = rawNewLatData;
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	1d10      	adds	r0, r2, #4
 80022c2:	331c      	adds	r3, #28
 80022c4:	2209      	movs	r2, #9
 80022c6:	0019      	movs	r1, r3
 80022c8:	f006 fef6 	bl	80090b8 <memcpy>
   rawLngData = rawNewLngData;
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3210      	adds	r2, #16
 80022d2:	0010      	movs	r0, r2
 80022d4:	3328      	adds	r3, #40	; 0x28
 80022d6:	2209      	movs	r2, #9
 80022d8:	0019      	movs	r1, r3
 80022da:	f006 feed 	bl	80090b8 <memcpy>
   lastCommitTime = HAL_GetTick();
 80022de:	f001 fbdf 	bl	8003aa0 <HAL_GetTick>
 80022e2:	0002      	movs	r2, r0
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	635a      	str	r2, [r3, #52]	; 0x34
   valid = updated = true;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	705a      	strb	r2, [r3, #1]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	785a      	ldrb	r2, [r3, #1]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	701a      	strb	r2, [r3, #0]
}
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b002      	add	sp, #8
 80022fc:	bd80      	pop	{r7, pc}

080022fe <_ZN15TinyGPSLocation11setLatitudeEPKc>:

void TinyGPSLocation::setLatitude(const char *term)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	6039      	str	r1, [r7, #0]
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	331c      	adds	r3, #28
 800230c:	001a      	movs	r2, r3
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	0011      	movs	r1, r2
 8002312:	0018      	movs	r0, r3
 8002314:	f7ff fd6c 	bl	8001df0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
}
 8002318:	46c0      	nop			; (mov r8, r8)
 800231a:	46bd      	mov	sp, r7
 800231c:	b002      	add	sp, #8
 800231e:	bd80      	pop	{r7, pc}

08002320 <_ZN15TinyGPSLocation12setLongitudeEPKc>:

void TinyGPSLocation::setLongitude(const char *term)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3328      	adds	r3, #40	; 0x28
 800232e:	001a      	movs	r2, r3
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	0011      	movs	r1, r2
 8002334:	0018      	movs	r0, r3
 8002336:	f7ff fd5b 	bl	8001df0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	46bd      	mov	sp, r7
 800233e:	b002      	add	sp, #8
 8002340:	bd80      	pop	{r7, pc}

08002342 <_ZN11TinyGPSDate6commitEv>:
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   return rawLngData.negative ? -ret : ret;
}

void TinyGPSDate::commit()
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
   date = newDate;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	605a      	str	r2, [r3, #4]
   lastCommitTime = HAL_GetTick();
 8002352:	f001 fba5 	bl	8003aa0 <HAL_GetTick>
 8002356:	0002      	movs	r2, r0
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	60da      	str	r2, [r3, #12]
   valid = updated = true;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	705a      	strb	r2, [r3, #1]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	785a      	ldrb	r2, [r3, #1]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	701a      	strb	r2, [r3, #0]
}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	46bd      	mov	sp, r7
 800236e:	b002      	add	sp, #8
 8002370:	bd80      	pop	{r7, pc}

08002372 <_ZN11TinyGPSTime6commitEv>:

void TinyGPSTime::commit()
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
   time = newTime;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	605a      	str	r2, [r3, #4]
   lastCommitTime = HAL_GetTick();
 8002382:	f001 fb8d 	bl	8003aa0 <HAL_GetTick>
 8002386:	0002      	movs	r2, r0
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	60da      	str	r2, [r3, #12]
   valid = updated = true;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	705a      	strb	r2, [r3, #1]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	785a      	ldrb	r2, [r3, #1]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	701a      	strb	r2, [r3, #0]
}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	46bd      	mov	sp, r7
 800239e:	b002      	add	sp, #8
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <_ZN11TinyGPSTime7setTimeEPKc>:

void TinyGPSTime::setTime(const char *term)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	6039      	str	r1, [r7, #0]
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	0018      	movs	r0, r3
 80023b0:	f7ff fcb6 	bl	8001d20 <_ZN11TinyGPSPlus12parseDecimalEPKc>
 80023b4:	0003      	movs	r3, r0
 80023b6:	001a      	movs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	609a      	str	r2, [r3, #8]
}
 80023bc:	46c0      	nop			; (mov r8, r8)
 80023be:	46bd      	mov	sp, r7
 80023c0:	b002      	add	sp, #8
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <_ZN11TinyGPSDate7setDateEPKc>:

void TinyGPSDate::setDate(const char *term)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
   newDate = atol(term);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	0018      	movs	r0, r3
 80023d2:	f006 fe41 	bl	8009058 <atol>
 80023d6:	0003      	movs	r3, r0
 80023d8:	001a      	movs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	609a      	str	r2, [r3, #8]
}
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	46bd      	mov	sp, r7
 80023e2:	b002      	add	sp, #8
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
   val = newval;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	609a      	str	r2, [r3, #8]
   lastCommitTime = HAL_GetTick();
 80023f6:	f001 fb53 	bl	8003aa0 <HAL_GetTick>
 80023fa:	0002      	movs	r2, r0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	605a      	str	r2, [r3, #4]
   valid = updated = true;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	705a      	strb	r2, [r3, #1]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	785a      	ldrb	r2, [r3, #1]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	701a      	strb	r2, [r3, #0]
}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	46bd      	mov	sp, r7
 8002412:	b002      	add	sp, #8
 8002414:	bd80      	pop	{r7, pc}

08002416 <_ZN14TinyGPSDecimal3setEPKc>:

void TinyGPSDecimal::set(const char *term)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	6039      	str	r1, [r7, #0]
   newval = TinyGPSPlus::parseDecimal(term);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	0018      	movs	r0, r3
 8002424:	f7ff fc7c 	bl	8001d20 <_ZN11TinyGPSPlus12parseDecimalEPKc>
 8002428:	0002      	movs	r2, r0
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	60da      	str	r2, [r3, #12]
}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	46bd      	mov	sp, r7
 8002432:	b002      	add	sp, #8
 8002434:	bd80      	pop	{r7, pc}

08002436 <_ZN14TinyGPSInteger6commitEv>:

void TinyGPSInteger::commit()
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
   val = newval;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	609a      	str	r2, [r3, #8]
   lastCommitTime = HAL_GetTick();
 8002446:	f001 fb2b 	bl	8003aa0 <HAL_GetTick>
 800244a:	0002      	movs	r2, r0
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	605a      	str	r2, [r3, #4]
   valid = updated = true;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	705a      	strb	r2, [r3, #1]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	785a      	ldrb	r2, [r3, #1]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	701a      	strb	r2, [r3, #0]
}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	46bd      	mov	sp, r7
 8002462:	b002      	add	sp, #8
 8002464:	bd80      	pop	{r7, pc}

08002466 <_ZN14TinyGPSInteger3setEPKc>:

void TinyGPSInteger::set(const char *term)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	6039      	str	r1, [r7, #0]
   newval = atol(term);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	0018      	movs	r0, r3
 8002474:	f006 fdf0 	bl	8009058 <atol>
 8002478:	0003      	movs	r3, r0
 800247a:	001a      	movs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	60da      	str	r2, [r3, #12]
}
 8002480:	46c0      	nop			; (mov r8, r8)
 8002482:	46bd      	mov	sp, r7
 8002484:	b002      	add	sp, #8
 8002486:	bd80      	pop	{r7, pc}

08002488 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
   strcpy(this->buffer, this->stagingBuffer);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3310      	adds	r3, #16
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	0011      	movs	r1, r2
 8002498:	0018      	movs	r0, r3
 800249a:	f006 fe73 	bl	8009184 <strcpy>
   lastCommitTime = HAL_GetTick();
 800249e:	f001 faff 	bl	8003aa0 <HAL_GetTick>
 80024a2:	0002      	movs	r2, r0
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	621a      	str	r2, [r3, #32]
   valid = updated = true;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2225      	movs	r2, #37	; 0x25
 80024ac:	2101      	movs	r1, #1
 80024ae:	5499      	strb	r1, [r3, r2]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2225      	movs	r2, #37	; 0x25
 80024b4:	5c99      	ldrb	r1, [r3, r2]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2224      	movs	r2, #36	; 0x24
 80024ba:	5499      	strb	r1, [r3, r2]
}
 80024bc:	46c0      	nop			; (mov r8, r8)
 80024be:	46bd      	mov	sp, r7
 80024c0:	b002      	add	sp, #8
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <_ZN13TinyGPSCustom3setEPKc>:

void TinyGPSCustom::set(const char *term)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6839      	ldr	r1, [r7, #0]
 80024d2:	2210      	movs	r2, #16
 80024d4:	0018      	movs	r0, r3
 80024d6:	f006 fe5d 	bl	8009194 <strncpy>
}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	46bd      	mov	sp, r7
 80024de:	b002      	add	sp, #8
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <_Z22get_elrs_airRateConfigh>:
expresslrs_mod_settings_s ExpressLRS_AirRateConfig[RATE_MAX] = {
	{0, RADIO_TYPE_SX128x_LORA, RATE_50HZ,  SX1280_LORA_BW_0800, SX1280_LORA_SF9, SX1280_LORA_CR_LI_4_7, 100000, TLM_RATIO_NO_TLM, 1, 12, 14},
    {1, RADIO_TYPE_SX128x_LORA, RATE_50HZ,  SX1280_LORA_BW_0800, SX1280_LORA_SF9, SX1280_LORA_CR_LI_4_7, 50000, TLM_RATIO_NO_TLM, 1, 12, 14}};

expresslrs_mod_settings_s *get_elrs_airRateConfig(uint8_t index)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	0002      	movs	r2, r0
 80024ec:	1dfb      	adds	r3, r7, #7
 80024ee:	701a      	strb	r2, [r3, #0]
    if (RATE_MAX <= index)
 80024f0:	1dfb      	adds	r3, r7, #7
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d902      	bls.n	80024fe <_Z22get_elrs_airRateConfigh+0x1a>
    {
        // Set to last usable entry in the array
        index = RATE_MAX - 1;
 80024f8:	1dfb      	adds	r3, r7, #7
 80024fa:	2203      	movs	r2, #3
 80024fc:	701a      	strb	r2, [r3, #0]
    }
    return &ExpressLRS_AirRateConfig[index];
 80024fe:	1dfb      	adds	r3, r7, #7
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	011a      	lsls	r2, r3, #4
 8002504:	4b02      	ldr	r3, [pc, #8]	; (8002510 <_Z22get_elrs_airRateConfigh+0x2c>)
 8002506:	18d3      	adds	r3, r2, r3
}
 8002508:	0018      	movs	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	b002      	add	sp, #8
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000000 	.word	0x20000000

08002514 <_Z41__static_initialization_and_destruction_0ii>:

expresslrs_mod_settings_s *ExpressLRS_currAirRate_Modparams;
expresslrs_rf_pref_params_s *ExpressLRS_currAirRate_RFperfParams;

connectionState_e connectionState = disconnected;
bool connectionHasModelMatch;
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d107      	bne.n	8002534 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	4a05      	ldr	r2, [pc, #20]	; (800253c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d103      	bne.n	8002534 <_Z41__static_initialization_and_destruction_0ii+0x20>
SX1280Driver Radio;
 800252c:	4b04      	ldr	r3, [pc, #16]	; (8002540 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800252e:	0018      	movs	r0, r3
 8002530:	f7fe f974 	bl	800081c <_ZN12SX1280DriverC1Ev>
bool connectionHasModelMatch;
 8002534:	46c0      	nop			; (mov r8, r8)
 8002536:	46bd      	mov	sp, r7
 8002538:	b002      	add	sp, #8
 800253a:	bd80      	pop	{r7, pc}
 800253c:	0000ffff 	.word	0x0000ffff
 8002540:	2000013c 	.word	0x2000013c

08002544 <_GLOBAL__sub_I_Radio>:
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
 8002548:	4b03      	ldr	r3, [pc, #12]	; (8002558 <_GLOBAL__sub_I_Radio+0x14>)
 800254a:	0019      	movs	r1, r3
 800254c:	2001      	movs	r0, #1
 800254e:	f7ff ffe1 	bl	8002514 <_Z41__static_initialization_and_destruction_0ii>
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	0000ffff 	.word	0x0000ffff

0800255c <_ZNK15TinyGPSLocation7isValidEv>:
   bool isValid() const    { return valid; }
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	0018      	movs	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	b002      	add	sp, #8
 800256e:	bd80      	pop	{r7, pc}

08002570 <_Z8gpsSetupv>:
TinyGPSPlus gps;
uint8_t c;

static uint32_t last_package = 0;

void gpsSetup(){
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0

	uint8_t command[20];

	/* Request UART speed of 115200 */
	sprintf((char*)command, "$PCAS01,5*19\r\n");
 8002576:	4a23      	ldr	r2, [pc, #140]	; (8002604 <_Z8gpsSetupv+0x94>)
 8002578:	1d3b      	adds	r3, r7, #4
 800257a:	0011      	movs	r1, r2
 800257c:	0018      	movs	r0, r3
 800257e:	f006 fde1 	bl	8009144 <siprintf>
	HAL_UART_Transmit(&huart1, command, 14, 100);
 8002582:	1d39      	adds	r1, r7, #4
 8002584:	4820      	ldr	r0, [pc, #128]	; (8002608 <_Z8gpsSetupv+0x98>)
 8002586:	2364      	movs	r3, #100	; 0x64
 8002588:	220e      	movs	r2, #14
 800258a:	f004 fd3d 	bl	8007008 <HAL_UART_Transmit>

	HAL_Delay(200);
 800258e:	20c8      	movs	r0, #200	; 0xc8
 8002590:	f001 fa90 	bl	8003ab4 <HAL_Delay>

	/* Change bus speed to 115200 */
	USART1->CR1 &= ~(USART_CR1_UE);
 8002594:	4b1d      	ldr	r3, [pc, #116]	; (800260c <_Z8gpsSetupv+0x9c>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4b1c      	ldr	r3, [pc, #112]	; (800260c <_Z8gpsSetupv+0x9c>)
 800259a:	2101      	movs	r1, #1
 800259c:	438a      	bics	r2, r1
 800259e:	601a      	str	r2, [r3, #0]
	USART1->BRR = 417;	// Set baud to 115200
 80025a0:	4b1a      	ldr	r3, [pc, #104]	; (800260c <_Z8gpsSetupv+0x9c>)
 80025a2:	22a2      	movs	r2, #162	; 0xa2
 80025a4:	32ff      	adds	r2, #255	; 0xff
 80025a6:	60da      	str	r2, [r3, #12]
	USART1->CR1 |= USART_CR1_UE;
 80025a8:	4b18      	ldr	r3, [pc, #96]	; (800260c <_Z8gpsSetupv+0x9c>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4b17      	ldr	r3, [pc, #92]	; (800260c <_Z8gpsSetupv+0x9c>)
 80025ae:	2101      	movs	r1, #1
 80025b0:	430a      	orrs	r2, r1
 80025b2:	601a      	str	r2, [r3, #0]

	HAL_Delay(200);
 80025b4:	20c8      	movs	r0, #200	; 0xc8
 80025b6:	f001 fa7d 	bl	8003ab4 <HAL_Delay>

	/* Request 10Hz update rate */
	sprintf((char*)command,"$PCAS02,100*1E\r\n");
 80025ba:	4a15      	ldr	r2, [pc, #84]	; (8002610 <_Z8gpsSetupv+0xa0>)
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	0011      	movs	r1, r2
 80025c0:	0018      	movs	r0, r3
 80025c2:	f006 fdbf 	bl	8009144 <siprintf>
	HAL_UART_Transmit(&huart1, command, 16, 100);
 80025c6:	1d39      	adds	r1, r7, #4
 80025c8:	480f      	ldr	r0, [pc, #60]	; (8002608 <_Z8gpsSetupv+0x98>)
 80025ca:	2364      	movs	r3, #100	; 0x64
 80025cc:	2210      	movs	r2, #16
 80025ce:	f004 fd1b 	bl	8007008 <HAL_UART_Transmit>

	HAL_Delay(10);
 80025d2:	200a      	movs	r0, #10
 80025d4:	f001 fa6e 	bl	8003ab4 <HAL_Delay>

	/* Request airbourne <4g mode*/
	sprintf((char*)command, "$PCAS11,7*1A\r\n");
 80025d8:	4a0e      	ldr	r2, [pc, #56]	; (8002614 <_Z8gpsSetupv+0xa4>)
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	0011      	movs	r1, r2
 80025de:	0018      	movs	r0, r3
 80025e0:	f006 fdb0 	bl	8009144 <siprintf>
	HAL_UART_Transmit(&huart1, command, 14, 100);
 80025e4:	1d39      	adds	r1, r7, #4
 80025e6:	4808      	ldr	r0, [pc, #32]	; (8002608 <_Z8gpsSetupv+0x98>)
 80025e8:	2364      	movs	r3, #100	; 0x64
 80025ea:	220e      	movs	r2, #14
 80025ec:	f004 fd0c 	bl	8007008 <HAL_UART_Transmit>

	/* Start receiving data from the module */
	HAL_UART_Receive_IT(&huart1, (uint8_t*)& c, 1);
 80025f0:	4909      	ldr	r1, [pc, #36]	; (8002618 <_Z8gpsSetupv+0xa8>)
 80025f2:	4b05      	ldr	r3, [pc, #20]	; (8002608 <_Z8gpsSetupv+0x98>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	0018      	movs	r0, r3
 80025f8:	f004 fdb2 	bl	8007160 <HAL_UART_Receive_IT>
}
 80025fc:	46c0      	nop			; (mov r8, r8)
 80025fe:	46bd      	mov	sp, r7
 8002600:	b006      	add	sp, #24
 8002602:	bd80      	pop	{r7, pc}
 8002604:	08009b64 	.word	0x08009b64
 8002608:	2000036c 	.word	0x2000036c
 800260c:	40013800 	.word	0x40013800
 8002610:	08009b74 	.word	0x08009b74
 8002614:	08009b88 	.word	0x08009b88
 8002618:	20000250 	.word	0x20000250

0800261c <_Z6gpsRunv>:




void gpsRun(){
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
	if(gps.location.isValid()){
 8002620:	4b11      	ldr	r3, [pc, #68]	; (8002668 <_Z6gpsRunv+0x4c>)
 8002622:	0018      	movs	r0, r3
 8002624:	f7ff ff9a 	bl	800255c <_ZNK15TinyGPSLocation7isValidEv>
 8002628:	1e03      	subs	r3, r0, #0
 800262a:	d007      	beq.n	800263c <_Z6gpsRunv+0x20>
		 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800262c:	2380      	movs	r3, #128	; 0x80
 800262e:	0219      	lsls	r1, r3, #8
 8002630:	23a0      	movs	r3, #160	; 0xa0
 8002632:	05db      	lsls	r3, r3, #23
 8002634:	2200      	movs	r2, #0
 8002636:	0018      	movs	r0, r3
 8002638:	f002 fa3f 	bl	8004aba <HAL_GPIO_WritePin>
	}

	if(HAL_GetTick() > (last_package+100)){
 800263c:	f001 fa30 	bl	8003aa0 <HAL_GetTick>
 8002640:	0002      	movs	r2, r0
 8002642:	4b0a      	ldr	r3, [pc, #40]	; (800266c <_Z6gpsRunv+0x50>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	3364      	adds	r3, #100	; 0x64
 8002648:	4293      	cmp	r3, r2
 800264a:	419b      	sbcs	r3, r3
 800264c:	425b      	negs	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <_Z6gpsRunv+0x44>
		HAL_UART_Receive_IT(&huart1, (uint8_t*)& c, 1);
 8002654:	4906      	ldr	r1, [pc, #24]	; (8002670 <_Z6gpsRunv+0x54>)
 8002656:	4b07      	ldr	r3, [pc, #28]	; (8002674 <_Z6gpsRunv+0x58>)
 8002658:	2201      	movs	r2, #1
 800265a:	0018      	movs	r0, r3
 800265c:	f004 fd80 	bl	8007160 <HAL_UART_Receive_IT>
	}
}
 8002660:	46c0      	nop			; (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	20000178 	.word	0x20000178
 800266c:	20000254 	.word	0x20000254
 8002670:	20000250 	.word	0x20000250
 8002674:	2000036c 	.word	0x2000036c

08002678 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)& c, 1);
 8002680:	490a      	ldr	r1, [pc, #40]	; (80026ac <HAL_UART_RxCpltCallback+0x34>)
 8002682:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_UART_RxCpltCallback+0x38>)
 8002684:	2201      	movs	r2, #1
 8002686:	0018      	movs	r0, r3
 8002688:	f004 fd6a 	bl	8007160 <HAL_UART_Receive_IT>
	last_package = HAL_GetTick();
 800268c:	f001 fa08 	bl	8003aa0 <HAL_GetTick>
 8002690:	0002      	movs	r2, r0
 8002692:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <HAL_UART_RxCpltCallback+0x3c>)
 8002694:	601a      	str	r2, [r3, #0]
	gps.encode(c);
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_UART_RxCpltCallback+0x34>)
 8002698:	781a      	ldrb	r2, [r3, #0]
 800269a:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <HAL_UART_RxCpltCallback+0x40>)
 800269c:	0011      	movs	r1, r2
 800269e:	0018      	movs	r0, r3
 80026a0:	f7ff fa78 	bl	8001b94 <_ZN11TinyGPSPlus6encodeEc>
}
 80026a4:	46c0      	nop			; (mov r8, r8)
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b002      	add	sp, #8
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20000250 	.word	0x20000250
 80026b0:	2000036c 	.word	0x2000036c
 80026b4:	20000254 	.word	0x20000254
 80026b8:	20000178 	.word	0x20000178

080026bc <_Z41__static_initialization_and_destruction_0ii>:
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d107      	bne.n	80026dc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	4a05      	ldr	r2, [pc, #20]	; (80026e4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d103      	bne.n	80026dc <_Z41__static_initialization_and_destruction_0ii+0x20>
TinyGPSPlus gps;
 80026d4:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80026d6:	0018      	movs	r0, r3
 80026d8:	f7ff f9f7 	bl	8001aca <_ZN11TinyGPSPlusC1Ev>
}
 80026dc:	46c0      	nop			; (mov r8, r8)
 80026de:	46bd      	mov	sp, r7
 80026e0:	b002      	add	sp, #8
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	0000ffff 	.word	0x0000ffff
 80026e8:	20000178 	.word	0x20000178

080026ec <_GLOBAL__sub_I_gps>:
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	4b03      	ldr	r3, [pc, #12]	; (8002700 <_GLOBAL__sub_I_gps+0x14>)
 80026f2:	0019      	movs	r1, r3
 80026f4:	2001      	movs	r0, #1
 80026f6:	f7ff ffe1 	bl	80026bc <_Z41__static_initialization_and_destruction_0ii>
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	0000ffff 	.word	0x0000ffff

08002704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002708:	f001 f94e 	bl	80039a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800270c:	f000 f81c 	bl	8002748 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002710:	f000 fa50 	bl	8002bb4 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8002714:	f000 f87e 	bl	8002814 <_ZL12MX_ADC1_Initv>
  MX_SPI1_Init();
 8002718:	f000 f8ee 	bl	80028f8 <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 800271c:	f000 f98e 	bl	8002a3c <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 8002720:	f000 f9ea 	bl	8002af8 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 8002724:	f000 f92a 	bl	800297c <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
  HAL_Delay(4000);
 8002728:	23fa      	movs	r3, #250	; 0xfa
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	0018      	movs	r0, r3
 800272e:	f001 f9c1 	bl	8003ab4 <HAL_Delay>

  gpsSetup();
 8002732:	f7ff ff1d 	bl	8002570 <_Z8gpsSetupv>
  transmissionSetup(RX);
 8002736:	2002      	movs	r0, #2
 8002738:	f000 feac 	bl	8003494 <_Z17transmissionSetup6mode_e>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  gpsRun();
 800273c:	f7ff ff6e 	bl	800261c <_Z6gpsRunv>
	  HAL_Delay(100);
 8002740:	2064      	movs	r0, #100	; 0x64
 8002742:	f001 f9b7 	bl	8003ab4 <HAL_Delay>
	  gpsRun();
 8002746:	e7f9      	b.n	800273c <main+0x38>

08002748 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002748:	b590      	push	{r4, r7, lr}
 800274a:	b093      	sub	sp, #76	; 0x4c
 800274c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800274e:	2410      	movs	r4, #16
 8002750:	193b      	adds	r3, r7, r4
 8002752:	0018      	movs	r0, r3
 8002754:	2338      	movs	r3, #56	; 0x38
 8002756:	001a      	movs	r2, r3
 8002758:	2100      	movs	r1, #0
 800275a:	f006 fcb6 	bl	80090ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800275e:	003b      	movs	r3, r7
 8002760:	0018      	movs	r0, r3
 8002762:	2310      	movs	r3, #16
 8002764:	001a      	movs	r2, r3
 8002766:	2100      	movs	r1, #0
 8002768:	f006 fcaf 	bl	80090ca <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	0018      	movs	r0, r3
 8002772:	f002 fa0f 	bl	8004b94 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002776:	193b      	adds	r3, r7, r4
 8002778:	2202      	movs	r2, #2
 800277a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800277c:	193b      	adds	r3, r7, r4
 800277e:	2280      	movs	r2, #128	; 0x80
 8002780:	0052      	lsls	r2, r2, #1
 8002782:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002784:	0021      	movs	r1, r4
 8002786:	187b      	adds	r3, r7, r1
 8002788:	2200      	movs	r2, #0
 800278a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800278c:	187b      	adds	r3, r7, r1
 800278e:	2240      	movs	r2, #64	; 0x40
 8002790:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002792:	187b      	adds	r3, r7, r1
 8002794:	2202      	movs	r2, #2
 8002796:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002798:	187b      	adds	r3, r7, r1
 800279a:	2202      	movs	r2, #2
 800279c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800279e:	187b      	adds	r3, r7, r1
 80027a0:	2200      	movs	r2, #0
 80027a2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 9;
 80027a4:	187b      	adds	r3, r7, r1
 80027a6:	2209      	movs	r2, #9
 80027a8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027aa:	187b      	adds	r3, r7, r1
 80027ac:	2280      	movs	r2, #128	; 0x80
 80027ae:	0292      	lsls	r2, r2, #10
 80027b0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80027b2:	187b      	adds	r3, r7, r1
 80027b4:	2280      	movs	r2, #128	; 0x80
 80027b6:	0492      	lsls	r2, r2, #18
 80027b8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 80027ba:	187b      	adds	r3, r7, r1
 80027bc:	2280      	movs	r2, #128	; 0x80
 80027be:	05d2      	lsls	r2, r2, #23
 80027c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027c2:	187b      	adds	r3, r7, r1
 80027c4:	0018      	movs	r0, r3
 80027c6:	f002 fa31 	bl	8004c2c <HAL_RCC_OscConfig>
 80027ca:	0003      	movs	r3, r0
 80027cc:	1e5a      	subs	r2, r3, #1
 80027ce:	4193      	sbcs	r3, r2
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 80027d6:	f000 faa1 	bl	8002d1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027da:	003b      	movs	r3, r7
 80027dc:	2207      	movs	r2, #7
 80027de:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027e0:	003b      	movs	r3, r7
 80027e2:	2202      	movs	r2, #2
 80027e4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027e6:	003b      	movs	r3, r7
 80027e8:	2200      	movs	r2, #0
 80027ea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027ec:	003b      	movs	r3, r7
 80027ee:	2200      	movs	r2, #0
 80027f0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80027f2:	003b      	movs	r3, r7
 80027f4:	2101      	movs	r1, #1
 80027f6:	0018      	movs	r0, r3
 80027f8:	f002 fd38 	bl	800526c <HAL_RCC_ClockConfig>
 80027fc:	0003      	movs	r3, r0
 80027fe:	1e5a      	subs	r2, r3, #1
 8002800:	4193      	sbcs	r3, r2
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8002808:	f000 fa88 	bl	8002d1c <Error_Handler>
  }
}
 800280c:	46c0      	nop			; (mov r8, r8)
 800280e:	46bd      	mov	sp, r7
 8002810:	b013      	add	sp, #76	; 0x4c
 8002812:	bd90      	pop	{r4, r7, pc}

08002814 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	0018      	movs	r0, r3
 800281e:	230c      	movs	r3, #12
 8002820:	001a      	movs	r2, r3
 8002822:	2100      	movs	r1, #0
 8002824:	f006 fc51 	bl	80090ca <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002828:	4b31      	ldr	r3, [pc, #196]	; (80028f0 <_ZL12MX_ADC1_Initv+0xdc>)
 800282a:	4a32      	ldr	r2, [pc, #200]	; (80028f4 <_ZL12MX_ADC1_Initv+0xe0>)
 800282c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800282e:	4b30      	ldr	r3, [pc, #192]	; (80028f0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002830:	2280      	movs	r2, #128	; 0x80
 8002832:	05d2      	lsls	r2, r2, #23
 8002834:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002836:	4b2e      	ldr	r3, [pc, #184]	; (80028f0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002838:	2200      	movs	r2, #0
 800283a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800283c:	4b2c      	ldr	r3, [pc, #176]	; (80028f0 <_ZL12MX_ADC1_Initv+0xdc>)
 800283e:	2200      	movs	r2, #0
 8002840:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002842:	4b2b      	ldr	r3, [pc, #172]	; (80028f0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002844:	2200      	movs	r2, #0
 8002846:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002848:	4b29      	ldr	r3, [pc, #164]	; (80028f0 <_ZL12MX_ADC1_Initv+0xdc>)
 800284a:	2204      	movs	r2, #4
 800284c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800284e:	4b28      	ldr	r3, [pc, #160]	; (80028f0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002850:	2200      	movs	r2, #0
 8002852:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002854:	4b26      	ldr	r3, [pc, #152]	; (80028f0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002856:	2200      	movs	r2, #0
 8002858:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800285a:	4b25      	ldr	r3, [pc, #148]	; (80028f0 <_ZL12MX_ADC1_Initv+0xdc>)
 800285c:	2200      	movs	r2, #0
 800285e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002860:	4b23      	ldr	r3, [pc, #140]	; (80028f0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002862:	2201      	movs	r2, #1
 8002864:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002866:	4b22      	ldr	r3, [pc, #136]	; (80028f0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002868:	2220      	movs	r2, #32
 800286a:	2100      	movs	r1, #0
 800286c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800286e:	4b20      	ldr	r3, [pc, #128]	; (80028f0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002870:	2200      	movs	r2, #0
 8002872:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002874:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002876:	2200      	movs	r2, #0
 8002878:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800287a:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <_ZL12MX_ADC1_Initv+0xdc>)
 800287c:	222c      	movs	r2, #44	; 0x2c
 800287e:	2100      	movs	r1, #0
 8002880:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002882:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002884:	2200      	movs	r2, #0
 8002886:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002888:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <_ZL12MX_ADC1_Initv+0xdc>)
 800288a:	2200      	movs	r2, #0
 800288c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800288e:	4b18      	ldr	r3, [pc, #96]	; (80028f0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002890:	2200      	movs	r2, #0
 8002892:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002894:	4b16      	ldr	r3, [pc, #88]	; (80028f0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002896:	223c      	movs	r2, #60	; 0x3c
 8002898:	2100      	movs	r1, #0
 800289a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800289c:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <_ZL12MX_ADC1_Initv+0xdc>)
 800289e:	2200      	movs	r2, #0
 80028a0:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80028a2:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <_ZL12MX_ADC1_Initv+0xdc>)
 80028a4:	0018      	movs	r0, r3
 80028a6:	f001 fa27 	bl	8003cf8 <HAL_ADC_Init>
 80028aa:	0003      	movs	r3, r0
 80028ac:	1e5a      	subs	r2, r3, #1
 80028ae:	4193      	sbcs	r3, r2
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <_ZL12MX_ADC1_Initv+0xa6>
  {
    Error_Handler();
 80028b6:	f000 fa31 	bl	8002d1c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80028ba:	1d3b      	adds	r3, r7, #4
 80028bc:	2201      	movs	r2, #1
 80028be:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80028c0:	1d3b      	adds	r3, r7, #4
 80028c2:	2200      	movs	r2, #0
 80028c4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80028c6:	1d3b      	adds	r3, r7, #4
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028cc:	1d3a      	adds	r2, r7, #4
 80028ce:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <_ZL12MX_ADC1_Initv+0xdc>)
 80028d0:	0011      	movs	r1, r2
 80028d2:	0018      	movs	r0, r3
 80028d4:	f001 fbee 	bl	80040b4 <HAL_ADC_ConfigChannel>
 80028d8:	0003      	movs	r3, r0
 80028da:	1e5a      	subs	r2, r3, #1
 80028dc:	4193      	sbcs	r3, r2
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <_ZL12MX_ADC1_Initv+0xd4>
  {
    Error_Handler();
 80028e4:	f000 fa1a 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80028e8:	46c0      	nop			; (mov r8, r8)
 80028ea:	46bd      	mov	sp, r7
 80028ec:	b004      	add	sp, #16
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20000258 	.word	0x20000258
 80028f4:	40012400 	.word	0x40012400

080028f8 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80028fc:	4b1d      	ldr	r3, [pc, #116]	; (8002974 <_ZL12MX_SPI1_Initv+0x7c>)
 80028fe:	4a1e      	ldr	r2, [pc, #120]	; (8002978 <_ZL12MX_SPI1_Initv+0x80>)
 8002900:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002902:	4b1c      	ldr	r3, [pc, #112]	; (8002974 <_ZL12MX_SPI1_Initv+0x7c>)
 8002904:	2282      	movs	r2, #130	; 0x82
 8002906:	0052      	lsls	r2, r2, #1
 8002908:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800290a:	4b1a      	ldr	r3, [pc, #104]	; (8002974 <_ZL12MX_SPI1_Initv+0x7c>)
 800290c:	2200      	movs	r2, #0
 800290e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002910:	4b18      	ldr	r3, [pc, #96]	; (8002974 <_ZL12MX_SPI1_Initv+0x7c>)
 8002912:	22e0      	movs	r2, #224	; 0xe0
 8002914:	00d2      	lsls	r2, r2, #3
 8002916:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002918:	4b16      	ldr	r3, [pc, #88]	; (8002974 <_ZL12MX_SPI1_Initv+0x7c>)
 800291a:	2200      	movs	r2, #0
 800291c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800291e:	4b15      	ldr	r3, [pc, #84]	; (8002974 <_ZL12MX_SPI1_Initv+0x7c>)
 8002920:	2200      	movs	r2, #0
 8002922:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002924:	4b13      	ldr	r3, [pc, #76]	; (8002974 <_ZL12MX_SPI1_Initv+0x7c>)
 8002926:	2280      	movs	r2, #128	; 0x80
 8002928:	0092      	lsls	r2, r2, #2
 800292a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800292c:	4b11      	ldr	r3, [pc, #68]	; (8002974 <_ZL12MX_SPI1_Initv+0x7c>)
 800292e:	2210      	movs	r2, #16
 8002930:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002932:	4b10      	ldr	r3, [pc, #64]	; (8002974 <_ZL12MX_SPI1_Initv+0x7c>)
 8002934:	2200      	movs	r2, #0
 8002936:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002938:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <_ZL12MX_SPI1_Initv+0x7c>)
 800293a:	2200      	movs	r2, #0
 800293c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800293e:	4b0d      	ldr	r3, [pc, #52]	; (8002974 <_ZL12MX_SPI1_Initv+0x7c>)
 8002940:	2200      	movs	r2, #0
 8002942:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <_ZL12MX_SPI1_Initv+0x7c>)
 8002946:	2207      	movs	r2, #7
 8002948:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800294a:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <_ZL12MX_SPI1_Initv+0x7c>)
 800294c:	2200      	movs	r2, #0
 800294e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <_ZL12MX_SPI1_Initv+0x7c>)
 8002952:	2200      	movs	r2, #0
 8002954:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002956:	4b07      	ldr	r3, [pc, #28]	; (8002974 <_ZL12MX_SPI1_Initv+0x7c>)
 8002958:	0018      	movs	r0, r3
 800295a:	f002 ffe9 	bl	8005930 <HAL_SPI_Init>
 800295e:	0003      	movs	r3, r0
 8002960:	1e5a      	subs	r2, r3, #1
 8002962:	4193      	sbcs	r3, r2
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <_ZL12MX_SPI1_Initv+0x76>
  {
    Error_Handler();
 800296a:	f000 f9d7 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	200002bc 	.word	0x200002bc
 8002978:	40013000 	.word	0x40013000

0800297c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002982:	2310      	movs	r3, #16
 8002984:	18fb      	adds	r3, r7, r3
 8002986:	0018      	movs	r0, r3
 8002988:	2310      	movs	r3, #16
 800298a:	001a      	movs	r2, r3
 800298c:	2100      	movs	r1, #0
 800298e:	f006 fb9c 	bl	80090ca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002992:	1d3b      	adds	r3, r7, #4
 8002994:	0018      	movs	r0, r3
 8002996:	230c      	movs	r3, #12
 8002998:	001a      	movs	r2, r3
 800299a:	2100      	movs	r1, #0
 800299c:	f006 fb95 	bl	80090ca <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029a0:	4b25      	ldr	r3, [pc, #148]	; (8002a38 <_ZL12MX_TIM2_Initv+0xbc>)
 80029a2:	2280      	movs	r2, #128	; 0x80
 80029a4:	05d2      	lsls	r2, r2, #23
 80029a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4800;
 80029a8:	4b23      	ldr	r3, [pc, #140]	; (8002a38 <_ZL12MX_TIM2_Initv+0xbc>)
 80029aa:	2296      	movs	r2, #150	; 0x96
 80029ac:	0152      	lsls	r2, r2, #5
 80029ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029b0:	4b21      	ldr	r3, [pc, #132]	; (8002a38 <_ZL12MX_TIM2_Initv+0xbc>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80029b6:	4b20      	ldr	r3, [pc, #128]	; (8002a38 <_ZL12MX_TIM2_Initv+0xbc>)
 80029b8:	22fa      	movs	r2, #250	; 0xfa
 80029ba:	0092      	lsls	r2, r2, #2
 80029bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029be:	4b1e      	ldr	r3, [pc, #120]	; (8002a38 <_ZL12MX_TIM2_Initv+0xbc>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029c4:	4b1c      	ldr	r3, [pc, #112]	; (8002a38 <_ZL12MX_TIM2_Initv+0xbc>)
 80029c6:	2280      	movs	r2, #128	; 0x80
 80029c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029ca:	4b1b      	ldr	r3, [pc, #108]	; (8002a38 <_ZL12MX_TIM2_Initv+0xbc>)
 80029cc:	0018      	movs	r0, r3
 80029ce:	f003 fe23 	bl	8006618 <HAL_TIM_Base_Init>
 80029d2:	0003      	movs	r3, r0
 80029d4:	1e5a      	subs	r2, r3, #1
 80029d6:	4193      	sbcs	r3, r2
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <_ZL12MX_TIM2_Initv+0x66>
  {
    Error_Handler();
 80029de:	f000 f99d 	bl	8002d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029e2:	2110      	movs	r1, #16
 80029e4:	187b      	adds	r3, r7, r1
 80029e6:	2280      	movs	r2, #128	; 0x80
 80029e8:	0152      	lsls	r2, r2, #5
 80029ea:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029ec:	187a      	adds	r2, r7, r1
 80029ee:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <_ZL12MX_TIM2_Initv+0xbc>)
 80029f0:	0011      	movs	r1, r2
 80029f2:	0018      	movs	r0, r3
 80029f4:	f004 f824 	bl	8006a40 <HAL_TIM_ConfigClockSource>
 80029f8:	0003      	movs	r3, r0
 80029fa:	1e5a      	subs	r2, r3, #1
 80029fc:	4193      	sbcs	r3, r2
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 8002a04:	f000 f98a 	bl	8002d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002a08:	1d3b      	adds	r3, r7, #4
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a0e:	1d3b      	adds	r3, r7, #4
 8002a10:	2200      	movs	r2, #0
 8002a12:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a14:	1d3a      	adds	r2, r7, #4
 8002a16:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <_ZL12MX_TIM2_Initv+0xbc>)
 8002a18:	0011      	movs	r1, r2
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f004 fa18 	bl	8006e50 <HAL_TIMEx_MasterConfigSynchronization>
 8002a20:	0003      	movs	r3, r0
 8002a22:	1e5a      	subs	r2, r3, #1
 8002a24:	4193      	sbcs	r3, r2
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 8002a2c:	f000 f976 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a30:	46c0      	nop			; (mov r8, r8)
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b008      	add	sp, #32
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	20000320 	.word	0x20000320

08002a3c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a40:	4b2b      	ldr	r3, [pc, #172]	; (8002af0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002a42:	4a2c      	ldr	r2, [pc, #176]	; (8002af4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002a44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a46:	4b2a      	ldr	r3, [pc, #168]	; (8002af0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002a48:	2296      	movs	r2, #150	; 0x96
 8002a4a:	0192      	lsls	r2, r2, #6
 8002a4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a4e:	4b28      	ldr	r3, [pc, #160]	; (8002af0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a54:	4b26      	ldr	r3, [pc, #152]	; (8002af0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a5a:	4b25      	ldr	r3, [pc, #148]	; (8002af0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a60:	4b23      	ldr	r3, [pc, #140]	; (8002af0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002a62:	220c      	movs	r2, #12
 8002a64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a66:	4b22      	ldr	r3, [pc, #136]	; (8002af0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a6c:	4b20      	ldr	r3, [pc, #128]	; (8002af0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a72:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a78:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a7e:	4b1c      	ldr	r3, [pc, #112]	; (8002af0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a84:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002a86:	0018      	movs	r0, r3
 8002a88:	f004 fa68 	bl	8006f5c <HAL_UART_Init>
 8002a8c:	0003      	movs	r3, r0
 8002a8e:	1e5a      	subs	r2, r3, #1
 8002a90:	4193      	sbcs	r3, r2
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <_ZL19MX_USART1_UART_Initv+0x60>
  {
    Error_Handler();
 8002a98:	f000 f940 	bl	8002d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a9c:	4b14      	ldr	r3, [pc, #80]	; (8002af0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f006 f9f9 	bl	8008e98 <HAL_UARTEx_SetTxFifoThreshold>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	1e5a      	subs	r2, r3, #1
 8002aaa:	4193      	sbcs	r3, r2
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <_ZL19MX_USART1_UART_Initv+0x7a>
  {
    Error_Handler();
 8002ab2:	f000 f933 	bl	8002d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002ab8:	2100      	movs	r1, #0
 8002aba:	0018      	movs	r0, r3
 8002abc:	f006 fa2c 	bl	8008f18 <HAL_UARTEx_SetRxFifoThreshold>
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	1e5a      	subs	r2, r3, #1
 8002ac4:	4193      	sbcs	r3, r2
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <_ZL19MX_USART1_UART_Initv+0x94>
  {
    Error_Handler();
 8002acc:	f000 f926 	bl	8002d1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002ad0:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f006 f9a6 	bl	8008e24 <HAL_UARTEx_DisableFifoMode>
 8002ad8:	0003      	movs	r3, r0
 8002ada:	1e5a      	subs	r2, r3, #1
 8002adc:	4193      	sbcs	r3, r2
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <_ZL19MX_USART1_UART_Initv+0xac>
  {
    Error_Handler();
 8002ae4:	f000 f91a 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ae8:	46c0      	nop			; (mov r8, r8)
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	2000036c 	.word	0x2000036c
 8002af4:	40013800 	.word	0x40013800

08002af8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002afc:	4b2b      	ldr	r3, [pc, #172]	; (8002bac <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002afe:	4a2c      	ldr	r2, [pc, #176]	; (8002bb0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002b00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b02:	4b2a      	ldr	r3, [pc, #168]	; (8002bac <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002b04:	22e1      	movs	r2, #225	; 0xe1
 8002b06:	0252      	lsls	r2, r2, #9
 8002b08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b0a:	4b28      	ldr	r3, [pc, #160]	; (8002bac <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b10:	4b26      	ldr	r3, [pc, #152]	; (8002bac <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b16:	4b25      	ldr	r3, [pc, #148]	; (8002bac <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b1c:	4b23      	ldr	r3, [pc, #140]	; (8002bac <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002b1e:	220c      	movs	r2, #12
 8002b20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b22:	4b22      	ldr	r3, [pc, #136]	; (8002bac <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b28:	4b20      	ldr	r3, [pc, #128]	; (8002bac <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b2e:	4b1f      	ldr	r3, [pc, #124]	; (8002bac <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b34:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b3a:	4b1c      	ldr	r3, [pc, #112]	; (8002bac <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b40:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002b42:	0018      	movs	r0, r3
 8002b44:	f004 fa0a 	bl	8006f5c <HAL_UART_Init>
 8002b48:	0003      	movs	r3, r0
 8002b4a:	1e5a      	subs	r2, r3, #1
 8002b4c:	4193      	sbcs	r3, r2
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <_ZL19MX_USART2_UART_Initv+0x60>
  {
    Error_Handler();
 8002b54:	f000 f8e2 	bl	8002d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b58:	4b14      	ldr	r3, [pc, #80]	; (8002bac <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f006 f99b 	bl	8008e98 <HAL_UARTEx_SetTxFifoThreshold>
 8002b62:	0003      	movs	r3, r0
 8002b64:	1e5a      	subs	r2, r3, #1
 8002b66:	4193      	sbcs	r3, r2
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <_ZL19MX_USART2_UART_Initv+0x7a>
  {
    Error_Handler();
 8002b6e:	f000 f8d5 	bl	8002d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b72:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002b74:	2100      	movs	r1, #0
 8002b76:	0018      	movs	r0, r3
 8002b78:	f006 f9ce 	bl	8008f18 <HAL_UARTEx_SetRxFifoThreshold>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	1e5a      	subs	r2, r3, #1
 8002b80:	4193      	sbcs	r3, r2
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <_ZL19MX_USART2_UART_Initv+0x94>
  {
    Error_Handler();
 8002b88:	f000 f8c8 	bl	8002d1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002b8c:	4b07      	ldr	r3, [pc, #28]	; (8002bac <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f006 f948 	bl	8008e24 <HAL_UARTEx_DisableFifoMode>
 8002b94:	0003      	movs	r3, r0
 8002b96:	1e5a      	subs	r2, r3, #1
 8002b98:	4193      	sbcs	r3, r2
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <_ZL19MX_USART2_UART_Initv+0xac>
  {
    Error_Handler();
 8002ba0:	f000 f8bc 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ba4:	46c0      	nop			; (mov r8, r8)
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	200003fc 	.word	0x200003fc
 8002bb0:	40004400 	.word	0x40004400

08002bb4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bb4:	b590      	push	{r4, r7, lr}
 8002bb6:	b089      	sub	sp, #36	; 0x24
 8002bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bba:	240c      	movs	r4, #12
 8002bbc:	193b      	adds	r3, r7, r4
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	2314      	movs	r3, #20
 8002bc2:	001a      	movs	r2, r3
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	f006 fa80 	bl	80090ca <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bca:	4b51      	ldr	r3, [pc, #324]	; (8002d10 <_ZL12MX_GPIO_Initv+0x15c>)
 8002bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bce:	4b50      	ldr	r3, [pc, #320]	; (8002d10 <_ZL12MX_GPIO_Initv+0x15c>)
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	635a      	str	r2, [r3, #52]	; 0x34
 8002bd6:	4b4e      	ldr	r3, [pc, #312]	; (8002d10 <_ZL12MX_GPIO_Initv+0x15c>)
 8002bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bda:	2201      	movs	r2, #1
 8002bdc:	4013      	ands	r3, r2
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be2:	4b4b      	ldr	r3, [pc, #300]	; (8002d10 <_ZL12MX_GPIO_Initv+0x15c>)
 8002be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002be6:	4b4a      	ldr	r3, [pc, #296]	; (8002d10 <_ZL12MX_GPIO_Initv+0x15c>)
 8002be8:	2102      	movs	r1, #2
 8002bea:	430a      	orrs	r2, r1
 8002bec:	635a      	str	r2, [r3, #52]	; 0x34
 8002bee:	4b48      	ldr	r3, [pc, #288]	; (8002d10 <_ZL12MX_GPIO_Initv+0x15c>)
 8002bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	607b      	str	r3, [r7, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bfa:	4b45      	ldr	r3, [pc, #276]	; (8002d10 <_ZL12MX_GPIO_Initv+0x15c>)
 8002bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bfe:	4b44      	ldr	r3, [pc, #272]	; (8002d10 <_ZL12MX_GPIO_Initv+0x15c>)
 8002c00:	2104      	movs	r1, #4
 8002c02:	430a      	orrs	r2, r1
 8002c04:	635a      	str	r2, [r3, #52]	; 0x34
 8002c06:	4b42      	ldr	r3, [pc, #264]	; (8002d10 <_ZL12MX_GPIO_Initv+0x15c>)
 8002c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	603b      	str	r3, [r7, #0]
 8002c10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|INT2_Pin|INT1_Pin, GPIO_PIN_RESET);
 8002c12:	2322      	movs	r3, #34	; 0x22
 8002c14:	33ff      	adds	r3, #255	; 0xff
 8002c16:	483f      	ldr	r0, [pc, #252]	; (8002d14 <_ZL12MX_GPIO_Initv+0x160>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	0019      	movs	r1, r3
 8002c1c:	f001 ff4d 	bl	8004aba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FE_EN_Pin|RX_EN_Pin|LED_Pin, GPIO_PIN_RESET);
 8002c20:	2389      	movs	r3, #137	; 0x89
 8002c22:	0219      	lsls	r1, r3, #8
 8002c24:	23a0      	movs	r3, #160	; 0xa0
 8002c26:	05db      	lsls	r3, r3, #23
 8002c28:	2200      	movs	r2, #0
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f001 ff45 	bl	8004aba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 8002c30:	4b39      	ldr	r3, [pc, #228]	; (8002d18 <_ZL12MX_GPIO_Initv+0x164>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	2140      	movs	r1, #64	; 0x40
 8002c36:	0018      	movs	r0, r3
 8002c38:	f001 ff3f 	bl	8004aba <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIO2_Pin DIO1_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin|DIO1_Pin;
 8002c3c:	193b      	adds	r3, r7, r4
 8002c3e:	2230      	movs	r2, #48	; 0x30
 8002c40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c42:	193b      	adds	r3, r7, r4
 8002c44:	2288      	movs	r2, #136	; 0x88
 8002c46:	0352      	lsls	r2, r2, #13
 8002c48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	193b      	adds	r3, r7, r4
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c50:	193a      	adds	r2, r7, r4
 8002c52:	23a0      	movs	r3, #160	; 0xa0
 8002c54:	05db      	lsls	r3, r3, #23
 8002c56:	0011      	movs	r1, r2
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f001 fdad 	bl	80047b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin INT2_Pin INT1_Pin */
  GPIO_InitStruct.Pin = CS_Pin|INT2_Pin|INT1_Pin;
 8002c5e:	0021      	movs	r1, r4
 8002c60:	187b      	adds	r3, r7, r1
 8002c62:	2222      	movs	r2, #34	; 0x22
 8002c64:	32ff      	adds	r2, #255	; 0xff
 8002c66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c68:	000c      	movs	r4, r1
 8002c6a:	193b      	adds	r3, r7, r4
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	193b      	adds	r3, r7, r4
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c76:	193b      	adds	r3, r7, r4
 8002c78:	2200      	movs	r2, #0
 8002c7a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c7c:	193b      	adds	r3, r7, r4
 8002c7e:	4a25      	ldr	r2, [pc, #148]	; (8002d14 <_ZL12MX_GPIO_Initv+0x160>)
 8002c80:	0019      	movs	r1, r3
 8002c82:	0010      	movs	r0, r2
 8002c84:	f001 fd98 	bl	80047b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8002c88:	193b      	adds	r3, r7, r4
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c8e:	193b      	adds	r3, r7, r4
 8002c90:	2200      	movs	r2, #0
 8002c92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c94:	193b      	adds	r3, r7, r4
 8002c96:	2201      	movs	r2, #1
 8002c98:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8002c9a:	193b      	adds	r3, r7, r4
 8002c9c:	4a1d      	ldr	r2, [pc, #116]	; (8002d14 <_ZL12MX_GPIO_Initv+0x160>)
 8002c9e:	0019      	movs	r1, r3
 8002ca0:	0010      	movs	r0, r2
 8002ca2:	f001 fd89 	bl	80047b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_EN_Pin RX_EN_Pin LED_Pin */
  GPIO_InitStruct.Pin = FE_EN_Pin|RX_EN_Pin|LED_Pin;
 8002ca6:	0021      	movs	r1, r4
 8002ca8:	187b      	adds	r3, r7, r1
 8002caa:	2289      	movs	r2, #137	; 0x89
 8002cac:	0212      	lsls	r2, r2, #8
 8002cae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cb0:	000c      	movs	r4, r1
 8002cb2:	193b      	adds	r3, r7, r4
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb8:	193b      	adds	r3, r7, r4
 8002cba:	2200      	movs	r2, #0
 8002cbc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cbe:	193b      	adds	r3, r7, r4
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc4:	193a      	adds	r2, r7, r4
 8002cc6:	23a0      	movs	r3, #160	; 0xa0
 8002cc8:	05db      	lsls	r3, r3, #23
 8002cca:	0011      	movs	r1, r2
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f001 fd73 	bl	80047b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TX_EN_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
 8002cd2:	0021      	movs	r1, r4
 8002cd4:	187b      	adds	r3, r7, r1
 8002cd6:	2240      	movs	r2, #64	; 0x40
 8002cd8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cda:	187b      	adds	r3, r7, r1
 8002cdc:	2201      	movs	r2, #1
 8002cde:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	187b      	adds	r3, r7, r1
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce6:	187b      	adds	r3, r7, r1
 8002ce8:	2200      	movs	r2, #0
 8002cea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 8002cec:	187b      	adds	r3, r7, r1
 8002cee:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <_ZL12MX_GPIO_Initv+0x164>)
 8002cf0:	0019      	movs	r1, r3
 8002cf2:	0010      	movs	r0, r2
 8002cf4:	f001 fd60 	bl	80047b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	2007      	movs	r0, #7
 8002cfe:	f001 fc5d 	bl	80045bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002d02:	2007      	movs	r0, #7
 8002d04:	f001 fc6f 	bl	80045e6 <HAL_NVIC_EnableIRQ>

}
 8002d08:	46c0      	nop			; (mov r8, r8)
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b009      	add	sp, #36	; 0x24
 8002d0e:	bd90      	pop	{r4, r7, pc}
 8002d10:	40021000 	.word	0x40021000
 8002d14:	50000400 	.word	0x50000400
 8002d18:	50000800 	.word	0x50000800

08002d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d20:	b672      	cpsid	i
}
 8002d22:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d24:	e7fe      	b.n	8002d24 <Error_Handler+0x8>
	...

08002d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2e:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <HAL_MspInit+0x4c>)
 8002d30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d32:	4b10      	ldr	r3, [pc, #64]	; (8002d74 <HAL_MspInit+0x4c>)
 8002d34:	2101      	movs	r1, #1
 8002d36:	430a      	orrs	r2, r1
 8002d38:	641a      	str	r2, [r3, #64]	; 0x40
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <HAL_MspInit+0x4c>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	2201      	movs	r2, #1
 8002d40:	4013      	ands	r3, r2
 8002d42:	607b      	str	r3, [r7, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d46:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <HAL_MspInit+0x4c>)
 8002d48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d4a:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <HAL_MspInit+0x4c>)
 8002d4c:	2180      	movs	r1, #128	; 0x80
 8002d4e:	0549      	lsls	r1, r1, #21
 8002d50:	430a      	orrs	r2, r1
 8002d52:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d54:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <HAL_MspInit+0x4c>)
 8002d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d58:	2380      	movs	r3, #128	; 0x80
 8002d5a:	055b      	lsls	r3, r3, #21
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8002d62:	2380      	movs	r3, #128	; 0x80
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	0018      	movs	r0, r3
 8002d68:	f000 fec8 	bl	8003afc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d6c:	46c0      	nop			; (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b002      	add	sp, #8
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40021000 	.word	0x40021000

08002d78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b097      	sub	sp, #92	; 0x5c
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d80:	2344      	movs	r3, #68	; 0x44
 8002d82:	18fb      	adds	r3, r7, r3
 8002d84:	0018      	movs	r0, r3
 8002d86:	2314      	movs	r3, #20
 8002d88:	001a      	movs	r2, r3
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	f006 f99d 	bl	80090ca <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d90:	2410      	movs	r4, #16
 8002d92:	193b      	adds	r3, r7, r4
 8002d94:	0018      	movs	r0, r3
 8002d96:	2334      	movs	r3, #52	; 0x34
 8002d98:	001a      	movs	r2, r3
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	f006 f995 	bl	80090ca <memset>
  if(hadc->Instance==ADC1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a20      	ldr	r2, [pc, #128]	; (8002e28 <HAL_ADC_MspInit+0xb0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d139      	bne.n	8002e1e <HAL_ADC_MspInit+0xa6>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002daa:	193b      	adds	r3, r7, r4
 8002dac:	2280      	movs	r2, #128	; 0x80
 8002dae:	01d2      	lsls	r2, r2, #7
 8002db0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002db2:	193b      	adds	r3, r7, r4
 8002db4:	2200      	movs	r2, #0
 8002db6:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002db8:	193b      	adds	r3, r7, r4
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f002 fc00 	bl	80055c0 <HAL_RCCEx_PeriphCLKConfig>
 8002dc0:	1e03      	subs	r3, r0, #0
 8002dc2:	d001      	beq.n	8002dc8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002dc4:	f7ff ffaa 	bl	8002d1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002dc8:	4b18      	ldr	r3, [pc, #96]	; (8002e2c <HAL_ADC_MspInit+0xb4>)
 8002dca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dcc:	4b17      	ldr	r3, [pc, #92]	; (8002e2c <HAL_ADC_MspInit+0xb4>)
 8002dce:	2180      	movs	r1, #128	; 0x80
 8002dd0:	0349      	lsls	r1, r1, #13
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40
 8002dd6:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <HAL_ADC_MspInit+0xb4>)
 8002dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dda:	2380      	movs	r3, #128	; 0x80
 8002ddc:	035b      	lsls	r3, r3, #13
 8002dde:	4013      	ands	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de4:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <HAL_ADC_MspInit+0xb4>)
 8002de6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002de8:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <HAL_ADC_MspInit+0xb4>)
 8002dea:	2101      	movs	r1, #1
 8002dec:	430a      	orrs	r2, r1
 8002dee:	635a      	str	r2, [r3, #52]	; 0x34
 8002df0:	4b0e      	ldr	r3, [pc, #56]	; (8002e2c <HAL_ADC_MspInit+0xb4>)
 8002df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df4:	2201      	movs	r2, #1
 8002df6:	4013      	ands	r3, r2
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002dfc:	2144      	movs	r1, #68	; 0x44
 8002dfe:	187b      	adds	r3, r7, r1
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e04:	187b      	adds	r3, r7, r1
 8002e06:	2203      	movs	r2, #3
 8002e08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0a:	187b      	adds	r3, r7, r1
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e10:	187a      	adds	r2, r7, r1
 8002e12:	23a0      	movs	r3, #160	; 0xa0
 8002e14:	05db      	lsls	r3, r3, #23
 8002e16:	0011      	movs	r1, r2
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f001 fccd 	bl	80047b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	46bd      	mov	sp, r7
 8002e22:	b017      	add	sp, #92	; 0x5c
 8002e24:	bd90      	pop	{r4, r7, pc}
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	40012400 	.word	0x40012400
 8002e2c:	40021000 	.word	0x40021000

08002e30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e30:	b590      	push	{r4, r7, lr}
 8002e32:	b08b      	sub	sp, #44	; 0x2c
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e38:	2414      	movs	r4, #20
 8002e3a:	193b      	adds	r3, r7, r4
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	2314      	movs	r3, #20
 8002e40:	001a      	movs	r2, r3
 8002e42:	2100      	movs	r1, #0
 8002e44:	f006 f941 	bl	80090ca <memset>
  if(hspi->Instance==SPI1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a1f      	ldr	r2, [pc, #124]	; (8002ecc <HAL_SPI_MspInit+0x9c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d138      	bne.n	8002ec4 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e52:	4b1f      	ldr	r3, [pc, #124]	; (8002ed0 <HAL_SPI_MspInit+0xa0>)
 8002e54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e56:	4b1e      	ldr	r3, [pc, #120]	; (8002ed0 <HAL_SPI_MspInit+0xa0>)
 8002e58:	2180      	movs	r1, #128	; 0x80
 8002e5a:	0149      	lsls	r1, r1, #5
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	641a      	str	r2, [r3, #64]	; 0x40
 8002e60:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <HAL_SPI_MspInit+0xa0>)
 8002e62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e64:	2380      	movs	r3, #128	; 0x80
 8002e66:	015b      	lsls	r3, r3, #5
 8002e68:	4013      	ands	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6e:	4b18      	ldr	r3, [pc, #96]	; (8002ed0 <HAL_SPI_MspInit+0xa0>)
 8002e70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e72:	4b17      	ldr	r3, [pc, #92]	; (8002ed0 <HAL_SPI_MspInit+0xa0>)
 8002e74:	2101      	movs	r1, #1
 8002e76:	430a      	orrs	r2, r1
 8002e78:	635a      	str	r2, [r3, #52]	; 0x34
 8002e7a:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <HAL_SPI_MspInit+0xa0>)
 8002e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7e:	2201      	movs	r2, #1
 8002e80:	4013      	ands	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8002e86:	0021      	movs	r1, r4
 8002e88:	187b      	adds	r3, r7, r1
 8002e8a:	22c2      	movs	r2, #194	; 0xc2
 8002e8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8e:	187b      	adds	r3, r7, r1
 8002e90:	2202      	movs	r2, #2
 8002e92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e94:	187b      	adds	r3, r7, r1
 8002e96:	2200      	movs	r2, #0
 8002e98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9a:	187b      	adds	r3, r7, r1
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002ea0:	187b      	adds	r3, r7, r1
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea6:	187a      	adds	r2, r7, r1
 8002ea8:	23a0      	movs	r3, #160	; 0xa0
 8002eaa:	05db      	lsls	r3, r3, #23
 8002eac:	0011      	movs	r1, r2
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f001 fc82 	bl	80047b8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	2019      	movs	r0, #25
 8002eba:	f001 fb7f 	bl	80045bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002ebe:	2019      	movs	r0, #25
 8002ec0:	f001 fb91 	bl	80045e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ec4:	46c0      	nop			; (mov r8, r8)
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b00b      	add	sp, #44	; 0x2c
 8002eca:	bd90      	pop	{r4, r7, pc}
 8002ecc:	40013000 	.word	0x40013000
 8002ed0:	40021000 	.word	0x40021000

08002ed4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	05db      	lsls	r3, r3, #23
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d113      	bne.n	8002f10 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <HAL_TIM_Base_MspInit+0x44>)
 8002eea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002eec:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <HAL_TIM_Base_MspInit+0x44>)
 8002eee:	2101      	movs	r1, #1
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ef4:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <HAL_TIM_Base_MspInit+0x44>)
 8002ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef8:	2201      	movs	r2, #1
 8002efa:	4013      	ands	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8002f00:	2200      	movs	r2, #0
 8002f02:	2102      	movs	r1, #2
 8002f04:	200f      	movs	r0, #15
 8002f06:	f001 fb59 	bl	80045bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f0a:	200f      	movs	r0, #15
 8002f0c:	f001 fb6b 	bl	80045e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002f10:	46c0      	nop			; (mov r8, r8)
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b004      	add	sp, #16
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40021000 	.word	0x40021000

08002f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f1c:	b590      	push	{r4, r7, lr}
 8002f1e:	b099      	sub	sp, #100	; 0x64
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f24:	234c      	movs	r3, #76	; 0x4c
 8002f26:	18fb      	adds	r3, r7, r3
 8002f28:	0018      	movs	r0, r3
 8002f2a:	2314      	movs	r3, #20
 8002f2c:	001a      	movs	r2, r3
 8002f2e:	2100      	movs	r1, #0
 8002f30:	f006 f8cb 	bl	80090ca <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f34:	2418      	movs	r4, #24
 8002f36:	193b      	adds	r3, r7, r4
 8002f38:	0018      	movs	r0, r3
 8002f3a:	2334      	movs	r3, #52	; 0x34
 8002f3c:	001a      	movs	r2, r3
 8002f3e:	2100      	movs	r1, #0
 8002f40:	f006 f8c3 	bl	80090ca <memset>
  if(huart->Instance==USART1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a49      	ldr	r2, [pc, #292]	; (8003070 <HAL_UART_MspInit+0x154>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d146      	bne.n	8002fdc <HAL_UART_MspInit+0xc0>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f4e:	193b      	adds	r3, r7, r4
 8002f50:	2201      	movs	r2, #1
 8002f52:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002f54:	193b      	adds	r3, r7, r4
 8002f56:	2200      	movs	r2, #0
 8002f58:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f5a:	193b      	adds	r3, r7, r4
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f002 fb2f 	bl	80055c0 <HAL_RCCEx_PeriphCLKConfig>
 8002f62:	1e03      	subs	r3, r0, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002f66:	f7ff fed9 	bl	8002d1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f6a:	4b42      	ldr	r3, [pc, #264]	; (8003074 <HAL_UART_MspInit+0x158>)
 8002f6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f6e:	4b41      	ldr	r3, [pc, #260]	; (8003074 <HAL_UART_MspInit+0x158>)
 8002f70:	2180      	movs	r1, #128	; 0x80
 8002f72:	01c9      	lsls	r1, r1, #7
 8002f74:	430a      	orrs	r2, r1
 8002f76:	641a      	str	r2, [r3, #64]	; 0x40
 8002f78:	4b3e      	ldr	r3, [pc, #248]	; (8003074 <HAL_UART_MspInit+0x158>)
 8002f7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f7c:	2380      	movs	r3, #128	; 0x80
 8002f7e:	01db      	lsls	r3, r3, #7
 8002f80:	4013      	ands	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f86:	4b3b      	ldr	r3, [pc, #236]	; (8003074 <HAL_UART_MspInit+0x158>)
 8002f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f8a:	4b3a      	ldr	r3, [pc, #232]	; (8003074 <HAL_UART_MspInit+0x158>)
 8002f8c:	2102      	movs	r1, #2
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	635a      	str	r2, [r3, #52]	; 0x34
 8002f92:	4b38      	ldr	r3, [pc, #224]	; (8003074 <HAL_UART_MspInit+0x158>)
 8002f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f96:	2202      	movs	r2, #2
 8002f98:	4013      	ands	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
 8002f9c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f9e:	214c      	movs	r1, #76	; 0x4c
 8002fa0:	187b      	adds	r3, r7, r1
 8002fa2:	22c0      	movs	r2, #192	; 0xc0
 8002fa4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa6:	187b      	adds	r3, r7, r1
 8002fa8:	2202      	movs	r2, #2
 8002faa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fac:	187b      	adds	r3, r7, r1
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb2:	187b      	adds	r3, r7, r1
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002fb8:	187b      	adds	r3, r7, r1
 8002fba:	2200      	movs	r2, #0
 8002fbc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fbe:	187b      	adds	r3, r7, r1
 8002fc0:	4a2d      	ldr	r2, [pc, #180]	; (8003078 <HAL_UART_MspInit+0x15c>)
 8002fc2:	0019      	movs	r1, r3
 8002fc4:	0010      	movs	r0, r2
 8002fc6:	f001 fbf7 	bl	80047b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2103      	movs	r1, #3
 8002fce:	201b      	movs	r0, #27
 8002fd0:	f001 faf4 	bl	80045bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002fd4:	201b      	movs	r0, #27
 8002fd6:	f001 fb06 	bl	80045e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002fda:	e044      	b.n	8003066 <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART2)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a26      	ldr	r2, [pc, #152]	; (800307c <HAL_UART_MspInit+0x160>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d13f      	bne.n	8003066 <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002fe6:	2118      	movs	r1, #24
 8002fe8:	187b      	adds	r3, r7, r1
 8002fea:	2202      	movs	r2, #2
 8002fec:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002fee:	187b      	adds	r3, r7, r1
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ff4:	187b      	adds	r3, r7, r1
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f002 fae2 	bl	80055c0 <HAL_RCCEx_PeriphCLKConfig>
 8002ffc:	1e03      	subs	r3, r0, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8003000:	f7ff fe8c 	bl	8002d1c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003004:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <HAL_UART_MspInit+0x158>)
 8003006:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003008:	4b1a      	ldr	r3, [pc, #104]	; (8003074 <HAL_UART_MspInit+0x158>)
 800300a:	2180      	movs	r1, #128	; 0x80
 800300c:	0289      	lsls	r1, r1, #10
 800300e:	430a      	orrs	r2, r1
 8003010:	63da      	str	r2, [r3, #60]	; 0x3c
 8003012:	4b18      	ldr	r3, [pc, #96]	; (8003074 <HAL_UART_MspInit+0x158>)
 8003014:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003016:	2380      	movs	r3, #128	; 0x80
 8003018:	029b      	lsls	r3, r3, #10
 800301a:	4013      	ands	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003020:	4b14      	ldr	r3, [pc, #80]	; (8003074 <HAL_UART_MspInit+0x158>)
 8003022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003024:	4b13      	ldr	r3, [pc, #76]	; (8003074 <HAL_UART_MspInit+0x158>)
 8003026:	2101      	movs	r1, #1
 8003028:	430a      	orrs	r2, r1
 800302a:	635a      	str	r2, [r3, #52]	; 0x34
 800302c:	4b11      	ldr	r3, [pc, #68]	; (8003074 <HAL_UART_MspInit+0x158>)
 800302e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003030:	2201      	movs	r2, #1
 8003032:	4013      	ands	r3, r2
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003038:	214c      	movs	r1, #76	; 0x4c
 800303a:	187b      	adds	r3, r7, r1
 800303c:	220c      	movs	r2, #12
 800303e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003040:	187b      	adds	r3, r7, r1
 8003042:	2202      	movs	r2, #2
 8003044:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003046:	187b      	adds	r3, r7, r1
 8003048:	2200      	movs	r2, #0
 800304a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800304c:	187b      	adds	r3, r7, r1
 800304e:	2200      	movs	r2, #0
 8003050:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003052:	187b      	adds	r3, r7, r1
 8003054:	2201      	movs	r2, #1
 8003056:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003058:	187a      	adds	r2, r7, r1
 800305a:	23a0      	movs	r3, #160	; 0xa0
 800305c:	05db      	lsls	r3, r3, #23
 800305e:	0011      	movs	r1, r2
 8003060:	0018      	movs	r0, r3
 8003062:	f001 fba9 	bl	80047b8 <HAL_GPIO_Init>
}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	46bd      	mov	sp, r7
 800306a:	b019      	add	sp, #100	; 0x64
 800306c:	bd90      	pop	{r4, r7, pc}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	40013800 	.word	0x40013800
 8003074:	40021000 	.word	0x40021000
 8003078:	50000400 	.word	0x50000400
 800307c:	40004400 	.word	0x40004400

08003080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003084:	e7fe      	b.n	8003084 <NMI_Handler+0x4>

08003086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800308a:	e7fe      	b.n	800308a <HardFault_Handler+0x4>

0800308c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003090:	46c0      	nop			; (mov r8, r8)
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030a4:	f000 fcea 	bl	8003a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030a8:	46c0      	nop			; (mov r8, r8)
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO2_Pin);
 80030b2:	2010      	movs	r0, #16
 80030b4:	f001 fd3a 	bl	8004b2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 80030b8:	2020      	movs	r0, #32
 80030ba:	f001 fd37 	bl	8004b2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80030c8:	4b03      	ldr	r3, [pc, #12]	; (80030d8 <TIM2_IRQHandler+0x14>)
 80030ca:	0018      	movs	r0, r3
 80030cc:	f003 fb86 	bl	80067dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80030d0:	46c0      	nop			; (mov r8, r8)
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	20000320 	.word	0x20000320

080030dc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80030e0:	4b03      	ldr	r3, [pc, #12]	; (80030f0 <SPI1_IRQHandler+0x14>)
 80030e2:	0018      	movs	r0, r3
 80030e4:	f003 f806 	bl	80060f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80030e8:	46c0      	nop			; (mov r8, r8)
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	200002bc 	.word	0x200002bc

080030f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80030f8:	4b03      	ldr	r3, [pc, #12]	; (8003108 <USART1_IRQHandler+0x14>)
 80030fa:	0018      	movs	r0, r3
 80030fc:	f004 f89a 	bl	8007234 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003100:	46c0      	nop			; (mov r8, r8)
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	2000036c 	.word	0x2000036c

0800310c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003114:	4a14      	ldr	r2, [pc, #80]	; (8003168 <_sbrk+0x5c>)
 8003116:	4b15      	ldr	r3, [pc, #84]	; (800316c <_sbrk+0x60>)
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003120:	4b13      	ldr	r3, [pc, #76]	; (8003170 <_sbrk+0x64>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d102      	bne.n	800312e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003128:	4b11      	ldr	r3, [pc, #68]	; (8003170 <_sbrk+0x64>)
 800312a:	4a12      	ldr	r2, [pc, #72]	; (8003174 <_sbrk+0x68>)
 800312c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800312e:	4b10      	ldr	r3, [pc, #64]	; (8003170 <_sbrk+0x64>)
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	18d3      	adds	r3, r2, r3
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	429a      	cmp	r2, r3
 800313a:	d207      	bcs.n	800314c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800313c:	f005 ff92 	bl	8009064 <__errno>
 8003140:	0003      	movs	r3, r0
 8003142:	220c      	movs	r2, #12
 8003144:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003146:	2301      	movs	r3, #1
 8003148:	425b      	negs	r3, r3
 800314a:	e009      	b.n	8003160 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800314c:	4b08      	ldr	r3, [pc, #32]	; (8003170 <_sbrk+0x64>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003152:	4b07      	ldr	r3, [pc, #28]	; (8003170 <_sbrk+0x64>)
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	18d2      	adds	r2, r2, r3
 800315a:	4b05      	ldr	r3, [pc, #20]	; (8003170 <_sbrk+0x64>)
 800315c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800315e:	68fb      	ldr	r3, [r7, #12]
}
 8003160:	0018      	movs	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	b006      	add	sp, #24
 8003166:	bd80      	pop	{r7, pc}
 8003168:	20009000 	.word	0x20009000
 800316c:	00000400 	.word	0x00000400
 8003170:	2000048c 	.word	0x2000048c
 8003174:	200004f0 	.word	0x200004f0

08003178 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
 800317c:	4b03      	ldr	r3, [pc, #12]	; (800318c <SystemInit+0x14>)
 800317e:	2280      	movs	r2, #128	; 0x80
 8003180:	0512      	lsls	r2, r2, #20
 8003182:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003184:	46c0      	nop			; (mov r8, r8)
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <_ZL14GetInitialFreqv>:
// The number of frequencies for this regulatory domain
uint32_t FHSSgetChannelCount(void);

// get the initial frequency, which is also the sync channel
static inline uint32_t GetInitialFreq()
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
    return FHSSfreqs[sync_channel];
 8003194:	4b03      	ldr	r3, [pc, #12]	; (80031a4 <_ZL14GetInitialFreqv+0x14>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4b03      	ldr	r3, [pc, #12]	; (80031a8 <_ZL14GetInitialFreqv+0x18>)
 800319a:	0092      	lsls	r2, r2, #2
 800319c:	58d3      	ldr	r3, [r2, r3]
}
 800319e:	0018      	movs	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	200000e8 	.word	0x200000e8
 80031a8:	08009bc4 	.word	0x08009bc4

080031ac <_ZL16FHSSsetCurrIndexh>:
    return FHSSptr;
}

// Set the sequence pointer, used by RX on SYNC
static inline void FHSSsetCurrIndex(const uint8_t value)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	0002      	movs	r2, r0
 80031b4:	1dfb      	adds	r3, r7, #7
 80031b6:	701a      	strb	r2, [r3, #0]
    FHSSptr = value % FHSS_SEQUENCE_CNT;
 80031b8:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <_ZL16FHSSsetCurrIndexh+0x2c>)
 80031ba:	781a      	ldrb	r2, [r3, #0]
 80031bc:	1dfb      	adds	r3, r7, #7
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	0011      	movs	r1, r2
 80031c2:	0018      	movs	r0, r3
 80031c4:	f7fd f838 	bl	8000238 <__aeabi_uidivmod>
 80031c8:	000b      	movs	r3, r1
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	4b03      	ldr	r3, [pc, #12]	; (80031dc <_ZL16FHSSsetCurrIndexh+0x30>)
 80031ce:	701a      	strb	r2, [r3, #0]
}
 80031d0:	46c0      	nop			; (mov r8, r8)
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b002      	add	sp, #8
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	08009d04 	.word	0x08009d04
 80031dc:	200000e4 	.word	0x200000e4

080031e0 <_ZL15FHSSgetNextFreqv>:

// Advance the pointer to the next hop and return the frequency of that channel
static inline uint32_t FHSSgetNextFreq()
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
    FHSSptr = (FHSSptr + 1) % FHSS_SEQUENCE_CNT;
 80031e6:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <_ZL15FHSSgetNextFreqv+0x44>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	4b0e      	ldr	r3, [pc, #56]	; (8003228 <_ZL15FHSSgetNextFreqv+0x48>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	0019      	movs	r1, r3
 80031f4:	0010      	movs	r0, r2
 80031f6:	f7fd f909 	bl	800040c <__aeabi_idivmod>
 80031fa:	000b      	movs	r3, r1
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	4b09      	ldr	r3, [pc, #36]	; (8003224 <_ZL15FHSSgetNextFreqv+0x44>)
 8003200:	701a      	strb	r2, [r3, #0]
    uint32_t freq = FHSSfreqs[FHSSsequence[FHSSptr]];
 8003202:	4b08      	ldr	r3, [pc, #32]	; (8003224 <_ZL15FHSSgetNextFreqv+0x44>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	b2db      	uxtb	r3, r3
 8003208:	001a      	movs	r2, r3
 800320a:	4b08      	ldr	r3, [pc, #32]	; (800322c <_ZL15FHSSgetNextFreqv+0x4c>)
 800320c:	5c9b      	ldrb	r3, [r3, r2]
 800320e:	001a      	movs	r2, r3
 8003210:	4b07      	ldr	r3, [pc, #28]	; (8003230 <_ZL15FHSSgetNextFreqv+0x50>)
 8003212:	0092      	lsls	r2, r2, #2
 8003214:	58d3      	ldr	r3, [r2, r3]
 8003216:	607b      	str	r3, [r7, #4]
    return freq;
 8003218:	687b      	ldr	r3, [r7, #4]
}
 800321a:	0018      	movs	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	b002      	add	sp, #8
 8003220:	bd80      	pop	{r7, pc}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	200000e4 	.word	0x200000e4
 8003228:	08009d04 	.word	0x08009d04
 800322c:	200000d0 	.word	0x200000d0
 8003230:	08009bc4 	.word	0x08009bc4

08003234 <_Z13SetRFLinkRate6mode_e>:

char data[30];
extern UART_HandleTypeDef huart2;

void SetRFLinkRate(mode_e mode) // Set speed of RF link (hz)
{
 8003234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003236:	46ce      	mov	lr, r9
 8003238:	4647      	mov	r7, r8
 800323a:	b580      	push	{r7, lr}
 800323c:	b08d      	sub	sp, #52	; 0x34
 800323e:	af08      	add	r7, sp, #32
 8003240:	0002      	movs	r2, r0
 8003242:	1dfb      	adds	r3, r7, #7
 8003244:	701a      	strb	r2, [r3, #0]
  expresslrs_mod_settings_s *const ModParams = get_elrs_airRateConfig(1);
 8003246:	2001      	movs	r0, #1
 8003248:	f7ff f94c 	bl	80024e4 <_Z22get_elrs_airRateConfigh>
 800324c:	0003      	movs	r3, r0
 800324e:	60fb      	str	r3, [r7, #12]

  if ((ModParams == ExpressLRS_currAirRate_Modparams)) return;
 8003250:	4b32      	ldr	r3, [pc, #200]	; (800331c <_Z13SetRFLinkRate6mode_e+0xe8>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	429a      	cmp	r2, r3
 8003258:	d059      	beq.n	800330e <_Z13SetRFLinkRate6mode_e+0xda>

  if(mode == TX){
 800325a:	1dfb      	adds	r3, r7, #7
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d12a      	bne.n	80032b8 <_Z13SetRFLinkRate6mode_e+0x84>
	  Radio.Config(ModParams->bw, ModParams->sf, ModParams->cr, GetInitialFreq(),
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	78dc      	ldrb	r4, [r3, #3]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	791d      	ldrb	r5, [r3, #4]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	795e      	ldrb	r6, [r3, #5]
 800326e:	f7ff ff8f 	bl	8003190 <_ZL14GetInitialFreqv>
 8003272:	4684      	mov	ip, r0
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	7b9a      	ldrb	r2, [r3, #14]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	7bd9      	ldrb	r1, [r3, #15]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	4699      	mov	r9, r3
 8003282:	4827      	ldr	r0, [pc, #156]	; (8003320 <_Z13SetRFLinkRate6mode_e+0xec>)
 8003284:	2300      	movs	r3, #0
 8003286:	4698      	mov	r8, r3
 8003288:	4643      	mov	r3, r8
 800328a:	9307      	str	r3, [sp, #28]
 800328c:	2300      	movs	r3, #0
 800328e:	4698      	mov	r8, r3
 8003290:	4643      	mov	r3, r8
 8003292:	9306      	str	r3, [sp, #24]
 8003294:	2300      	movs	r3, #0
 8003296:	4698      	mov	r8, r3
 8003298:	4643      	mov	r3, r8
 800329a:	9305      	str	r3, [sp, #20]
 800329c:	464b      	mov	r3, r9
 800329e:	9304      	str	r3, [sp, #16]
 80032a0:	9103      	str	r1, [sp, #12]
 80032a2:	2300      	movs	r3, #0
 80032a4:	9302      	str	r3, [sp, #8]
 80032a6:	9201      	str	r2, [sp, #4]
 80032a8:	4663      	mov	r3, ip
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	0033      	movs	r3, r6
 80032ae:	002a      	movs	r2, r5
 80032b0:	0021      	movs	r1, r4
 80032b2:	f7fd fb59 	bl	8000968 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth>
 80032b6:	e02b      	b.n	8003310 <_Z13SetRFLinkRate6mode_e+0xdc>
	                 ModParams->PreambleLen, 0, ModParams->PayloadLength, ModParams->interval);
  }
  else {
	  Radio.Config(ModParams->bw, ModParams->sf, ModParams->cr, GetInitialFreq(),
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	78dc      	ldrb	r4, [r3, #3]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	791d      	ldrb	r5, [r3, #4]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	795e      	ldrb	r6, [r3, #5]
 80032c4:	f7ff ff64 	bl	8003190 <_ZL14GetInitialFreqv>
 80032c8:	0001      	movs	r1, r0
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	7b9b      	ldrb	r3, [r3, #14]
 80032ce:	4698      	mov	r8, r3
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	7bd2      	ldrb	r2, [r2, #15]
 80032d4:	4812      	ldr	r0, [pc, #72]	; (8003320 <_Z13SetRFLinkRate6mode_e+0xec>)
 80032d6:	2300      	movs	r3, #0
 80032d8:	469c      	mov	ip, r3
 80032da:	4663      	mov	r3, ip
 80032dc:	9307      	str	r3, [sp, #28]
 80032de:	2300      	movs	r3, #0
 80032e0:	469c      	mov	ip, r3
 80032e2:	4663      	mov	r3, ip
 80032e4:	9306      	str	r3, [sp, #24]
 80032e6:	2300      	movs	r3, #0
 80032e8:	469c      	mov	ip, r3
 80032ea:	4663      	mov	r3, ip
 80032ec:	9305      	str	r3, [sp, #20]
 80032ee:	2300      	movs	r3, #0
 80032f0:	469c      	mov	ip, r3
 80032f2:	4663      	mov	r3, ip
 80032f4:	9304      	str	r3, [sp, #16]
 80032f6:	9203      	str	r2, [sp, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	9202      	str	r2, [sp, #8]
 80032fc:	4643      	mov	r3, r8
 80032fe:	9301      	str	r3, [sp, #4]
 8003300:	9100      	str	r1, [sp, #0]
 8003302:	0033      	movs	r3, r6
 8003304:	002a      	movs	r2, r5
 8003306:	0021      	movs	r1, r4
 8003308:	f7fd fb2e 	bl	8000968 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth>
 800330c:	e000      	b.n	8003310 <_Z13SetRFLinkRate6mode_e+0xdc>
  if ((ModParams == ExpressLRS_currAirRate_Modparams)) return;
 800330e:	46c0      	nop			; (mov r8, r8)
	                 ModParams->PreambleLen, 0, ModParams->PayloadLength, 0);
  }
}
 8003310:	46bd      	mov	sp, r7
 8003312:	b005      	add	sp, #20
 8003314:	bcc0      	pop	{r6, r7}
 8003316:	46b9      	mov	r9, r7
 8003318:	46b0      	mov	r8, r6
 800331a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800331c:	20000174 	.word	0x20000174
 8003320:	2000013c 	.word	0x2000013c

08003324 <_Z15ProcessRFPacketv>:


void ProcessRFPacket()
{
 8003324:	b590      	push	{r4, r7, lr}
 8003326:	b085      	sub	sp, #20
 8003328:	af02      	add	r7, sp, #8
	LQCalc.inc();
 800332a:	4b28      	ldr	r3, [pc, #160]	; (80033cc <_Z15ProcessRFPacketv+0xa8>)
 800332c:	0018      	movs	r0, r3
 800332e:	f000 fa1d 	bl	800376c <_ZN6LQCALCILh30EE3incEv>
	uint8_t package_crc = link_xor ^ (uint8_t)crc32((const uint8_t*)Radio.RXdataBuffer, 13);
 8003332:	4b27      	ldr	r3, [pc, #156]	; (80033d0 <_Z15ProcessRFPacketv+0xac>)
 8003334:	210d      	movs	r1, #13
 8003336:	0018      	movs	r0, r3
 8003338:	f7fd f9f2 	bl	8000720 <_Z5crc32PKhj>
 800333c:	0003      	movs	r3, r0
 800333e:	b2d9      	uxtb	r1, r3
 8003340:	4b24      	ldr	r3, [pc, #144]	; (80033d4 <_Z15ProcessRFPacketv+0xb0>)
 8003342:	781a      	ldrb	r2, [r3, #0]
 8003344:	1dfb      	adds	r3, r7, #7
 8003346:	404a      	eors	r2, r1
 8003348:	701a      	strb	r2, [r3, #0]

	if(package_crc == Radio.RXdataBuffer[13]){
 800334a:	4b23      	ldr	r3, [pc, #140]	; (80033d8 <_Z15ProcessRFPacketv+0xb4>)
 800334c:	2225      	movs	r2, #37	; 0x25
 800334e:	5c9b      	ldrb	r3, [r3, r2]
 8003350:	b2db      	uxtb	r3, r3
 8003352:	1dfa      	adds	r2, r7, #7
 8003354:	7812      	ldrb	r2, [r2, #0]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	425a      	negs	r2, r3
 800335a:	4153      	adcs	r3, r2
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d030      	beq.n	80033c4 <_Z15ProcessRFPacketv+0xa0>
		connectionState = connected;
 8003362:	4b1e      	ldr	r3, [pc, #120]	; (80033dc <_Z15ProcessRFPacketv+0xb8>)
 8003364:	2200      	movs	r2, #0
 8003366:	701a      	strb	r2, [r3, #0]
		timeout = 0;
 8003368:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <_Z15ProcessRFPacketv+0xbc>)
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
    	return;
    }

    // Store the LQ/RSSI/Antenna

    LQCalc.add();
 800336e:	4b17      	ldr	r3, [pc, #92]	; (80033cc <_Z15ProcessRFPacketv+0xa8>)
 8003370:	0018      	movs	r0, r3
 8003372:	f000 fa53 	bl	800381c <_ZN6LQCALCILh30EE3addEv>

    uint8_t lq = LQCalc.getLQ();
 8003376:	1dbc      	adds	r4, r7, #6
 8003378:	4b14      	ldr	r3, [pc, #80]	; (80033cc <_Z15ProcessRFPacketv+0xa8>)
 800337a:	0018      	movs	r0, r3
 800337c:	f000 fa75 	bl	800386a <_ZNK6LQCALCILh30EE5getLQEv>
 8003380:	0003      	movs	r3, r0
 8003382:	7023      	strb	r3, [r4, #0]
    int8_t rssi = Radio.LastPacketRSSI;
 8003384:	1d7b      	adds	r3, r7, #5
 8003386:	4a14      	ldr	r2, [pc, #80]	; (80033d8 <_Z15ProcessRFPacketv+0xb4>)
 8003388:	2132      	movs	r1, #50	; 0x32
 800338a:	5c52      	ldrb	r2, [r2, r1]
 800338c:	701a      	strb	r2, [r3, #0]


    int n = snprintf(data, 30, "LQ: %d RSSI: %d SNR: %d\n", (int)lq, (int)rssi, (int)Radio.LastPacketSNR);
 800338e:	1dbb      	adds	r3, r7, #6
 8003390:	7819      	ldrb	r1, [r3, #0]
 8003392:	1d7b      	adds	r3, r7, #5
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	b25b      	sxtb	r3, r3
 8003398:	4a0f      	ldr	r2, [pc, #60]	; (80033d8 <_Z15ProcessRFPacketv+0xb4>)
 800339a:	2033      	movs	r0, #51	; 0x33
 800339c:	5612      	ldrsb	r2, [r2, r0]
 800339e:	0014      	movs	r4, r2
 80033a0:	4a10      	ldr	r2, [pc, #64]	; (80033e4 <_Z15ProcessRFPacketv+0xc0>)
 80033a2:	4811      	ldr	r0, [pc, #68]	; (80033e8 <_Z15ProcessRFPacketv+0xc4>)
 80033a4:	9401      	str	r4, [sp, #4]
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	000b      	movs	r3, r1
 80033aa:	211e      	movs	r1, #30
 80033ac:	f005 fe96 	bl	80090dc <sniprintf>
 80033b0:	0003      	movs	r3, r0
 80033b2:	603b      	str	r3, [r7, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, n, 5);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	490b      	ldr	r1, [pc, #44]	; (80033e8 <_Z15ProcessRFPacketv+0xc4>)
 80033ba:	480c      	ldr	r0, [pc, #48]	; (80033ec <_Z15ProcessRFPacketv+0xc8>)
 80033bc:	2305      	movs	r3, #5
 80033be:	f003 fe23 	bl	8007008 <HAL_UART_Transmit>
 80033c2:	e000      	b.n	80033c6 <_Z15ProcessRFPacketv+0xa2>
    	return;
 80033c4:	46c0      	nop			; (mov r8, r8)
}
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b003      	add	sp, #12
 80033ca:	bd90      	pop	{r4, r7, pc}
 80033cc:	20000494 	.word	0x20000494
 80033d0:	20000154 	.word	0x20000154
 80033d4:	200004ac 	.word	0x200004ac
 80033d8:	2000013c 	.word	0x2000013c
 80033dc:	20000040 	.word	0x20000040
 80033e0:	200004a4 	.word	0x200004a4
 80033e4:	08009b98 	.word	0x08009b98
 80033e8:	200004b4 	.word	0x200004b4
 80033ec:	200003fc 	.word	0x200003fc

080033f0 <_Z9RXdoneISRv>:

void RXdoneISR()
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  //ProcessTLMpacket();
  busyTransmitting = false;
 80033f4:	4b18      	ldr	r3, [pc, #96]	; (8003458 <_Z9RXdoneISRv+0x68>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	701a      	strb	r2, [r3, #0]
  t = TIM2->CNT;
 80033fa:	2380      	movs	r3, #128	; 0x80
 80033fc:	05db      	lsls	r3, r3, #23
 80033fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003400:	4b16      	ldr	r3, [pc, #88]	; (800345c <_Z9RXdoneISRv+0x6c>)
 8003402:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Stop_IT(&htim2);
 8003404:	4b16      	ldr	r3, [pc, #88]	; (8003460 <_Z9RXdoneISRv+0x70>)
 8003406:	0018      	movs	r0, r3
 8003408:	f003 f9ba 	bl	8006780 <HAL_TIM_Base_Stop_IT>
  TIM2->CNT = 0;
 800340c:	2380      	movs	r3, #128	; 0x80
 800340e:	05db      	lsls	r3, r3, #23
 8003410:	2200      	movs	r2, #0
 8003412:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start_IT(&htim2);
 8003414:	4b12      	ldr	r3, [pc, #72]	; (8003460 <_Z9RXdoneISRv+0x70>)
 8003416:	0018      	movs	r0, r3
 8003418:	f003 f956 	bl	80066c8 <HAL_TIM_Base_Start_IT>

  ProcessRFPacket();
 800341c:	f7ff ff82 	bl	8003324 <_Z15ProcessRFPacketv>
  if(connectionState == connected){
 8003420:	4b10      	ldr	r3, [pc, #64]	; (8003464 <_Z9RXdoneISRv+0x74>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d107      	bne.n	8003438 <_Z9RXdoneISRv+0x48>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8003428:	2380      	movs	r3, #128	; 0x80
 800342a:	021a      	lsls	r2, r3, #8
 800342c:	23a0      	movs	r3, #160	; 0xa0
 800342e:	05db      	lsls	r3, r3, #23
 8003430:	0011      	movs	r1, r2
 8003432:	0018      	movs	r0, r3
 8003434:	f001 fb5e 	bl	8004af4 <HAL_GPIO_TogglePin>
  }


  Radio.SetFrequencyReg(FHSSgetNextFreq());
 8003438:	f7ff fed2 	bl	80031e0 <_ZL15FHSSgetNextFreqv>
 800343c:	0002      	movs	r2, r0
 800343e:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <_Z9RXdoneISRv+0x78>)
 8003440:	0011      	movs	r1, r2
 8003442:	0018      	movs	r0, r3
 8003444:	f7fd fd48 	bl	8000ed8 <_ZN12SX1280Driver15SetFrequencyRegEm>

  Radio.RXnb();
 8003448:	4b07      	ldr	r3, [pc, #28]	; (8003468 <_Z9RXdoneISRv+0x78>)
 800344a:	0018      	movs	r0, r3
 800344c:	f7fd feb2 	bl	80011b4 <_ZN12SX1280Driver4RXnbEv>
}
 8003450:	46c0      	nop			; (mov r8, r8)
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	20000490 	.word	0x20000490
 800345c:	200004b0 	.word	0x200004b0
 8003460:	20000320 	.word	0x20000320
 8003464:	20000040 	.word	0x20000040
 8003468:	2000013c 	.word	0x2000013c

0800346c <_Z9TXdoneISRv>:

void TXdoneISR()
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  //HandleFHSS();
  //HandlePrepareForTLM();
  Radio.SetFrequencyReg(FHSSgetNextFreq());
 8003470:	f7ff feb6 	bl	80031e0 <_ZL15FHSSgetNextFreqv>
 8003474:	0002      	movs	r2, r0
 8003476:	4b05      	ldr	r3, [pc, #20]	; (800348c <_Z9TXdoneISRv+0x20>)
 8003478:	0011      	movs	r1, r2
 800347a:	0018      	movs	r0, r3
 800347c:	f7fd fd2c 	bl	8000ed8 <_ZN12SX1280Driver15SetFrequencyRegEm>
  busyTransmitting = false;
 8003480:	4b03      	ldr	r3, [pc, #12]	; (8003490 <_Z9TXdoneISRv+0x24>)
 8003482:	2200      	movs	r2, #0
 8003484:	701a      	strb	r2, [r3, #0]
}
 8003486:	46c0      	nop			; (mov r8, r8)
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	2000013c 	.word	0x2000013c
 8003490:	20000490 	.word	0x20000490

08003494 <_Z17transmissionSetup6mode_e>:

void transmissionSetup(mode_e mode){
 8003494:	b590      	push	{r4, r7, lr}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	0002      	movs	r2, r0
 800349c:	1dfb      	adds	r3, r7, #7
 800349e:	701a      	strb	r2, [r3, #0]

  uint8_t pass[] = "test123";
 80034a0:	2110      	movs	r1, #16
 80034a2:	187b      	adds	r3, r7, r1
 80034a4:	4a39      	ldr	r2, [pc, #228]	; (800358c <_Z17transmissionSetup6mode_e+0xf8>)
 80034a6:	ca11      	ldmia	r2!, {r0, r4}
 80034a8:	c311      	stmia	r3!, {r0, r4}

  link_crc = crc32(pass, 7);
 80034aa:	187b      	adds	r3, r7, r1
 80034ac:	2107      	movs	r1, #7
 80034ae:	0018      	movs	r0, r3
 80034b0:	f7fd f936 	bl	8000720 <_Z5crc32PKhj>
 80034b4:	0002      	movs	r2, r0
 80034b6:	4b36      	ldr	r3, [pc, #216]	; (8003590 <_Z17transmissionSetup6mode_e+0xfc>)
 80034b8:	601a      	str	r2, [r3, #0]
  link_xor = link_crc & 0xFF;
 80034ba:	4b35      	ldr	r3, [pc, #212]	; (8003590 <_Z17transmissionSetup6mode_e+0xfc>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	4b34      	ldr	r3, [pc, #208]	; (8003594 <_Z17transmissionSetup6mode_e+0x100>)
 80034c2:	701a      	strb	r2, [r3, #0]
  FHSSrandomiseFHSSsequence(link_crc);
 80034c4:	4b32      	ldr	r3, [pc, #200]	; (8003590 <_Z17transmissionSetup6mode_e+0xfc>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	0018      	movs	r0, r3
 80034ca:	f7fd f8dd 	bl	8000688 <_Z25FHSSrandomiseFHSSsequencem>

  Radio.RXdoneCallback = &RXdoneISR;
 80034ce:	4b32      	ldr	r3, [pc, #200]	; (8003598 <_Z17transmissionSetup6mode_e+0x104>)
 80034d0:	4a32      	ldr	r2, [pc, #200]	; (800359c <_Z17transmissionSetup6mode_e+0x108>)
 80034d2:	601a      	str	r2, [r3, #0]
  Radio.TXdoneCallback = &TXdoneISR;
 80034d4:	4b30      	ldr	r3, [pc, #192]	; (8003598 <_Z17transmissionSetup6mode_e+0x104>)
 80034d6:	4a32      	ldr	r2, [pc, #200]	; (80035a0 <_Z17transmissionSetup6mode_e+0x10c>)
 80034d8:	605a      	str	r2, [r3, #4]

  while (Radio.Begin() == false){
 80034da:	4b2f      	ldr	r3, [pc, #188]	; (8003598 <_Z17transmissionSetup6mode_e+0x104>)
 80034dc:	0018      	movs	r0, r3
 80034de:	f7fd f9b3 	bl	8000848 <_ZN12SX1280Driver5BeginEv>
 80034e2:	0003      	movs	r3, r0
 80034e4:	425a      	negs	r2, r3
 80034e6:	4153      	adcs	r3, r2
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d014      	beq.n	8003518 <_Z17transmissionSetup6mode_e+0x84>
	  uint8_t msg[] = "Error\n";
 80034ee:	2308      	movs	r3, #8
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	4a2c      	ldr	r2, [pc, #176]	; (80035a4 <_Z17transmissionSetup6mode_e+0x110>)
 80034f4:	6811      	ldr	r1, [r2, #0]
 80034f6:	6019      	str	r1, [r3, #0]
 80034f8:	8891      	ldrh	r1, [r2, #4]
 80034fa:	8099      	strh	r1, [r3, #4]
 80034fc:	7992      	ldrb	r2, [r2, #6]
 80034fe:	719a      	strb	r2, [r3, #6]
	  HAL_UART_Transmit(&huart2, (uint8_t*)data, sizeof(msg), 5);
 8003500:	4929      	ldr	r1, [pc, #164]	; (80035a8 <_Z17transmissionSetup6mode_e+0x114>)
 8003502:	482a      	ldr	r0, [pc, #168]	; (80035ac <_Z17transmissionSetup6mode_e+0x118>)
 8003504:	2305      	movs	r3, #5
 8003506:	2207      	movs	r2, #7
 8003508:	f003 fd7e 	bl	8007008 <HAL_UART_Transmit>
	  HAL_Delay(500);
 800350c:	23fa      	movs	r3, #250	; 0xfa
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	0018      	movs	r0, r3
 8003512:	f000 facf 	bl	8003ab4 <HAL_Delay>
  while (Radio.Begin() == false){
 8003516:	e7e0      	b.n	80034da <_Z17transmissionSetup6mode_e+0x46>
  }

  Radio.SetOutputPower(-5);
 8003518:	2305      	movs	r3, #5
 800351a:	425a      	negs	r2, r3
 800351c:	4b1e      	ldr	r3, [pc, #120]	; (8003598 <_Z17transmissionSetup6mode_e+0x104>)
 800351e:	0011      	movs	r1, r2
 8003520:	0018      	movs	r0, r3
 8003522:	f7fd fadd 	bl	8000ae0 <_ZN12SX1280Driver14SetOutputPowerEa>
  SetRFLinkRate(mode);
 8003526:	1dfb      	adds	r3, r7, #7
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	0018      	movs	r0, r3
 800352c:	f7ff fe82 	bl	8003234 <_Z13SetRFLinkRate6mode_e>

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003530:	2380      	movs	r3, #128	; 0x80
 8003532:	0219      	lsls	r1, r3, #8
 8003534:	23a0      	movs	r3, #160	; 0xa0
 8003536:	05db      	lsls	r3, r3, #23
 8003538:	2201      	movs	r2, #1
 800353a:	0018      	movs	r0, r3
 800353c:	f001 fabd 	bl	8004aba <HAL_GPIO_WritePin>

  transmission_mode = mode;
 8003540:	4b1b      	ldr	r3, [pc, #108]	; (80035b0 <_Z17transmissionSetup6mode_e+0x11c>)
 8003542:	1dfa      	adds	r2, r7, #7
 8003544:	7812      	ldrb	r2, [r2, #0]
 8003546:	701a      	strb	r2, [r3, #0]

  if(mode == TX) {
 8003548:	1dfb      	adds	r3, r7, #7
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d109      	bne.n	8003564 <_Z17transmissionSetup6mode_e+0xd0>
	  TIM2->ARR = 1000;
 8003550:	2380      	movs	r3, #128	; 0x80
 8003552:	05db      	lsls	r3, r3, #23
 8003554:	22fa      	movs	r2, #250	; 0xfa
 8003556:	0092      	lsls	r2, r2, #2
 8003558:	62da      	str	r2, [r3, #44]	; 0x2c
	   HAL_TIM_Base_Start_IT(&htim2);
 800355a:	4b16      	ldr	r3, [pc, #88]	; (80035b4 <_Z17transmissionSetup6mode_e+0x120>)
 800355c:	0018      	movs	r0, r3
 800355e:	f003 f8b3 	bl	80066c8 <HAL_TIM_Base_Start_IT>
	    HAL_Delay(10);
	    Radio.RXnb();
	    HAL_TIM_Base_Start_IT(&htim2);
  }

}
 8003562:	e00e      	b.n	8003582 <_Z17transmissionSetup6mode_e+0xee>
	  TIM2->ARR = 1005;
 8003564:	2380      	movs	r3, #128	; 0x80
 8003566:	05db      	lsls	r3, r3, #23
 8003568:	4a13      	ldr	r2, [pc, #76]	; (80035b8 <_Z17transmissionSetup6mode_e+0x124>)
 800356a:	62da      	str	r2, [r3, #44]	; 0x2c
	    HAL_Delay(10);
 800356c:	200a      	movs	r0, #10
 800356e:	f000 faa1 	bl	8003ab4 <HAL_Delay>
	    Radio.RXnb();
 8003572:	4b09      	ldr	r3, [pc, #36]	; (8003598 <_Z17transmissionSetup6mode_e+0x104>)
 8003574:	0018      	movs	r0, r3
 8003576:	f7fd fe1d 	bl	80011b4 <_ZN12SX1280Driver4RXnbEv>
	    HAL_TIM_Base_Start_IT(&htim2);
 800357a:	4b0e      	ldr	r3, [pc, #56]	; (80035b4 <_Z17transmissionSetup6mode_e+0x120>)
 800357c:	0018      	movs	r0, r3
 800357e:	f003 f8a3 	bl	80066c8 <HAL_TIM_Base_Start_IT>
}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	46bd      	mov	sp, r7
 8003586:	b007      	add	sp, #28
 8003588:	bd90      	pop	{r4, r7, pc}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	08009bb4 	.word	0x08009bb4
 8003590:	200004a8 	.word	0x200004a8
 8003594:	200004ac 	.word	0x200004ac
 8003598:	2000013c 	.word	0x2000013c
 800359c:	080033f1 	.word	0x080033f1
 80035a0:	0800346d 	.word	0x0800346d
 80035a4:	08009bbc 	.word	0x08009bbc
 80035a8:	200004b4 	.word	0x200004b4
 80035ac:	200003fc 	.word	0x200003fc
 80035b0:	200004a0 	.word	0x200004a0
 80035b4:	20000320 	.word	0x20000320
 80035b8:	000003ed 	.word	0x000003ed

080035bc <_Z10rx_timeoutv>:

void rx_timeout(){
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
	if(timeout == 50){
 80035c0:	4b26      	ldr	r3, [pc, #152]	; (800365c <_Z10rx_timeoutv+0xa0>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b32      	cmp	r3, #50	; 0x32
 80035c6:	d121      	bne.n	800360c <_Z10rx_timeoutv+0x50>
			LQCalc.reset();
 80035c8:	4b25      	ldr	r3, [pc, #148]	; (8003660 <_Z10rx_timeoutv+0xa4>)
 80035ca:	0018      	movs	r0, r3
 80035cc:	f000 f962 	bl	8003894 <_ZN6LQCALCILh30EE5resetEv>
			HAL_TIM_Base_Stop_IT(&htim2);
 80035d0:	4b24      	ldr	r3, [pc, #144]	; (8003664 <_Z10rx_timeoutv+0xa8>)
 80035d2:	0018      	movs	r0, r3
 80035d4:	f003 f8d4 	bl	8006780 <HAL_TIM_Base_Stop_IT>
			TIM2->CNT = 0;
 80035d8:	2380      	movs	r3, #128	; 0x80
 80035da:	05db      	lsls	r3, r3, #23
 80035dc:	2200      	movs	r2, #0
 80035de:	625a      	str	r2, [r3, #36]	; 0x24
			connectionState = disconnected;
 80035e0:	4b21      	ldr	r3, [pc, #132]	; (8003668 <_Z10rx_timeoutv+0xac>)
 80035e2:	2202      	movs	r2, #2
 80035e4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80035e6:	2380      	movs	r3, #128	; 0x80
 80035e8:	0219      	lsls	r1, r3, #8
 80035ea:	23a0      	movs	r3, #160	; 0xa0
 80035ec:	05db      	lsls	r3, r3, #23
 80035ee:	2201      	movs	r2, #1
 80035f0:	0018      	movs	r0, r3
 80035f2:	f001 fa62 	bl	8004aba <HAL_GPIO_WritePin>
			FHSSsetCurrIndex(0);
 80035f6:	2000      	movs	r0, #0
 80035f8:	f7ff fdd8 	bl	80031ac <_ZL16FHSSsetCurrIndexh>
			Radio.SetFrequencyReg(GetInitialFreq());
 80035fc:	f7ff fdc8 	bl	8003190 <_ZL14GetInitialFreqv>
 8003600:	0002      	movs	r2, r0
 8003602:	4b1a      	ldr	r3, [pc, #104]	; (800366c <_Z10rx_timeoutv+0xb0>)
 8003604:	0011      	movs	r1, r2
 8003606:	0018      	movs	r0, r3
 8003608:	f7fd fc66 	bl	8000ed8 <_ZN12SX1280Driver15SetFrequencyRegEm>
		}
	  if(connectionState == connected){
 800360c:	4b16      	ldr	r3, [pc, #88]	; (8003668 <_Z10rx_timeoutv+0xac>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d10c      	bne.n	800362e <_Z10rx_timeoutv+0x72>
		  LQCalc.inc();
 8003614:	4b12      	ldr	r3, [pc, #72]	; (8003660 <_Z10rx_timeoutv+0xa4>)
 8003616:	0018      	movs	r0, r3
 8003618:	f000 f8a8 	bl	800376c <_ZN6LQCALCILh30EE3incEv>
		  Radio.SetFrequencyReg(FHSSgetNextFreq());
 800361c:	f7ff fde0 	bl	80031e0 <_ZL15FHSSgetNextFreqv>
 8003620:	0002      	movs	r2, r0
 8003622:	4b12      	ldr	r3, [pc, #72]	; (800366c <_Z10rx_timeoutv+0xb0>)
 8003624:	0011      	movs	r1, r2
 8003626:	0018      	movs	r0, r3
 8003628:	f7fd fc56 	bl	8000ed8 <_ZN12SX1280Driver15SetFrequencyRegEm>
 800362c:	e00e      	b.n	800364c <_Z10rx_timeoutv+0x90>
	  } else {
		  if(timeout > 5){
 800362e:	4b0b      	ldr	r3, [pc, #44]	; (800365c <_Z10rx_timeoutv+0xa0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b05      	cmp	r3, #5
 8003634:	d90a      	bls.n	800364c <_Z10rx_timeoutv+0x90>
			  timeout = 0;
 8003636:	4b09      	ldr	r3, [pc, #36]	; (800365c <_Z10rx_timeoutv+0xa0>)
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
			  Radio.SetFrequencyReg(FHSSgetNextFreq());
 800363c:	f7ff fdd0 	bl	80031e0 <_ZL15FHSSgetNextFreqv>
 8003640:	0002      	movs	r2, r0
 8003642:	4b0a      	ldr	r3, [pc, #40]	; (800366c <_Z10rx_timeoutv+0xb0>)
 8003644:	0011      	movs	r1, r2
 8003646:	0018      	movs	r0, r3
 8003648:	f7fd fc46 	bl	8000ed8 <_ZN12SX1280Driver15SetFrequencyRegEm>
		  }
	  }
		timeout++;
 800364c:	4b03      	ldr	r3, [pc, #12]	; (800365c <_Z10rx_timeoutv+0xa0>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	4b02      	ldr	r3, [pc, #8]	; (800365c <_Z10rx_timeoutv+0xa0>)
 8003654:	601a      	str	r2, [r3, #0]
}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	200004a4 	.word	0x200004a4
 8003660:	20000494 	.word	0x20000494
 8003664:	20000320 	.word	0x20000320
 8003668:	20000040 	.word	0x20000040
 800366c:	2000013c 	.word	0x2000013c

08003670 <_Z11tx_transmitv>:

void tx_transmit(){
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
	Radio.TXdataBuffer[0] = SYNC0;
 8003674:	4b26      	ldr	r3, [pc, #152]	; (8003710 <_Z11tx_transmitv+0xa0>)
 8003676:	22ca      	movs	r2, #202	; 0xca
 8003678:	721a      	strb	r2, [r3, #8]
	Radio.TXdataBuffer[1] = SYNC1;
 800367a:	4b25      	ldr	r3, [pc, #148]	; (8003710 <_Z11tx_transmitv+0xa0>)
 800367c:	2275      	movs	r2, #117	; 0x75
 800367e:	725a      	strb	r2, [r3, #9]

	Radio.TXdataBuffer[2] = (link_crc >> 24) & 0xFF;
 8003680:	4b24      	ldr	r3, [pc, #144]	; (8003714 <_Z11tx_transmitv+0xa4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	0e1b      	lsrs	r3, r3, #24
 8003686:	b2da      	uxtb	r2, r3
 8003688:	4b21      	ldr	r3, [pc, #132]	; (8003710 <_Z11tx_transmitv+0xa0>)
 800368a:	729a      	strb	r2, [r3, #10]
	Radio.TXdataBuffer[3] = (link_crc >> 16) & 0xFF;
 800368c:	4b21      	ldr	r3, [pc, #132]	; (8003714 <_Z11tx_transmitv+0xa4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	0c1b      	lsrs	r3, r3, #16
 8003692:	b2da      	uxtb	r2, r3
 8003694:	4b1e      	ldr	r3, [pc, #120]	; (8003710 <_Z11tx_transmitv+0xa0>)
 8003696:	72da      	strb	r2, [r3, #11]
	Radio.TXdataBuffer[4] = (link_crc >> 8) & 0xFF;
 8003698:	4b1e      	ldr	r3, [pc, #120]	; (8003714 <_Z11tx_transmitv+0xa4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	0a1b      	lsrs	r3, r3, #8
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <_Z11tx_transmitv+0xa0>)
 80036a2:	731a      	strb	r2, [r3, #12]
	Radio.TXdataBuffer[5] = (link_crc) & 0xFF;
 80036a4:	4b1b      	ldr	r3, [pc, #108]	; (8003714 <_Z11tx_transmitv+0xa4>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	4b19      	ldr	r3, [pc, #100]	; (8003710 <_Z11tx_transmitv+0xa0>)
 80036ac:	735a      	strb	r2, [r3, #13]

	Radio.TXdataBuffer[6] = 0x0a;
 80036ae:	4b18      	ldr	r3, [pc, #96]	; (8003710 <_Z11tx_transmitv+0xa0>)
 80036b0:	220a      	movs	r2, #10
 80036b2:	739a      	strb	r2, [r3, #14]
	Radio.TXdataBuffer[7] = 0x0b;
 80036b4:	4b16      	ldr	r3, [pc, #88]	; (8003710 <_Z11tx_transmitv+0xa0>)
 80036b6:	220b      	movs	r2, #11
 80036b8:	73da      	strb	r2, [r3, #15]
	Radio.TXdataBuffer[8] = 0x0c;
 80036ba:	4b15      	ldr	r3, [pc, #84]	; (8003710 <_Z11tx_transmitv+0xa0>)
 80036bc:	220c      	movs	r2, #12
 80036be:	741a      	strb	r2, [r3, #16]
	Radio.TXdataBuffer[9] = 0x0d;
 80036c0:	4b13      	ldr	r3, [pc, #76]	; (8003710 <_Z11tx_transmitv+0xa0>)
 80036c2:	220d      	movs	r2, #13
 80036c4:	745a      	strb	r2, [r3, #17]
	Radio.TXdataBuffer[10] = 0x0e;
 80036c6:	4b12      	ldr	r3, [pc, #72]	; (8003710 <_Z11tx_transmitv+0xa0>)
 80036c8:	220e      	movs	r2, #14
 80036ca:	749a      	strb	r2, [r3, #18]
	Radio.TXdataBuffer[11] = 0x0f;
 80036cc:	4b10      	ldr	r3, [pc, #64]	; (8003710 <_Z11tx_transmitv+0xa0>)
 80036ce:	220f      	movs	r2, #15
 80036d0:	74da      	strb	r2, [r3, #19]
	Radio.TXdataBuffer[12] = 0xa;
 80036d2:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <_Z11tx_transmitv+0xa0>)
 80036d4:	220a      	movs	r2, #10
 80036d6:	751a      	strb	r2, [r3, #20]



	Radio.TXdataBuffer[13] = link_xor  ^ (uint8_t)crc32((const uint8_t*)Radio.TXdataBuffer, 13);
 80036d8:	4b0f      	ldr	r3, [pc, #60]	; (8003718 <_Z11tx_transmitv+0xa8>)
 80036da:	210d      	movs	r1, #13
 80036dc:	0018      	movs	r0, r3
 80036de:	f7fd f81f 	bl	8000720 <_Z5crc32PKhj>
 80036e2:	0003      	movs	r3, r0
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	4b0d      	ldr	r3, [pc, #52]	; (800371c <_Z11tx_transmitv+0xac>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	4053      	eors	r3, r2
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	4b08      	ldr	r3, [pc, #32]	; (8003710 <_Z11tx_transmitv+0xa0>)
 80036f0:	755a      	strb	r2, [r3, #21]
	if(!busyTransmitting) Radio.TXnb();
 80036f2:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <_Z11tx_transmitv+0xb0>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2201      	movs	r2, #1
 80036fa:	4053      	eors	r3, r2
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <_Z11tx_transmitv+0x9a>
 8003702:	4b03      	ldr	r3, [pc, #12]	; (8003710 <_Z11tx_transmitv+0xa0>)
 8003704:	0018      	movs	r0, r3
 8003706:	f7fd fcdb 	bl	80010c0 <_ZN12SX1280Driver4TXnbEv>
}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	2000013c 	.word	0x2000013c
 8003714:	200004a8 	.word	0x200004a8
 8003718:	20000144 	.word	0x20000144
 800371c:	200004ac 	.word	0x200004ac
 8003720:	20000490 	.word	0x20000490

08003724 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
	if(transmission_mode == TX){
 800372c:	4b06      	ldr	r3, [pc, #24]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d102      	bne.n	800373a <HAL_TIM_PeriodElapsedCallback+0x16>
		tx_transmit();
 8003734:	f7ff ff9c 	bl	8003670 <_Z11tx_transmitv>
	} else {
		rx_timeout();
	}

}
 8003738:	e001      	b.n	800373e <HAL_TIM_PeriodElapsedCallback+0x1a>
		rx_timeout();
 800373a:	f7ff ff3f 	bl	80035bc <_Z10rx_timeoutv>
}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	46bd      	mov	sp, r7
 8003742:	b002      	add	sp, #8
 8003744:	bd80      	pop	{r7, pc}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	200004a0 	.word	0x200004a0

0800374c <_ZN6LQCALCILh30EEC1Ev>:

template <uint8_t N>
class LQCALC
{
public:
    LQCALC(void)
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
    {
        reset();
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	0018      	movs	r0, r3
 8003758:	f000 f89c 	bl	8003894 <_ZN6LQCALCILh30EE5resetEv>
        // count is reset here only once on construction to start LQ counting
        // at 100% on first connect, but 0 out of N after a failsafe
        count = 1;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	709a      	strb	r2, [r3, #2]
    }
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	0018      	movs	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	b002      	add	sp, #8
 800376a:	bd80      	pop	{r7, pc}

0800376c <_ZN6LQCALCILh30EE3incEv>:
        LQArray[index] |= LQmask;
        LQ += 1;
    }

    /* Start a new period */
    void inc()
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
    {
        // Increment the counter by shifting one bit higher
        // If we've shifted out all the bits, move to next idx
        LQmask = LQmask << 1;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	005a      	lsls	r2, r3, #1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	605a      	str	r2, [r3, #4]
        if (LQmask == 0)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d108      	bne.n	8003798 <_ZN6LQCALCILh30EE3incEv+0x2c>
        {
            LQmask = (1 << 0);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	605a      	str	r2, [r3, #4]
            index += 1;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	785b      	ldrb	r3, [r3, #1]
 8003790:	3301      	adds	r3, #1
 8003792:	b2da      	uxtb	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	705a      	strb	r2, [r3, #1]
        }

        // At idx N / 32 and bit N % 32, wrap back to idx=0, bit=0
        if ((index == (N / 32)) && (LQmask & (1 << (N % 32))))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	785b      	ldrb	r3, [r3, #1]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10b      	bne.n	80037b8 <_ZN6LQCALCILh30EE3incEv+0x4c>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	2380      	movs	r3, #128	; 0x80
 80037a6:	05db      	lsls	r3, r3, #23
 80037a8:	4013      	ands	r3, r2
 80037aa:	d005      	beq.n	80037b8 <_ZN6LQCALCILh30EE3incEv+0x4c>
        {
            index = 0;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	705a      	strb	r2, [r3, #1]
            LQmask = (1 << 0);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	605a      	str	r2, [r3, #4]
        }

        if ((LQArray[index] & LQmask) != 0)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	785b      	ldrb	r3, [r3, #1]
 80037bc:	001a      	movs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3202      	adds	r2, #2
 80037c2:	0092      	lsls	r2, r2, #2
 80037c4:	58d2      	ldr	r2, [r2, r3]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	4013      	ands	r3, r2
 80037cc:	d018      	beq.n	8003800 <_ZN6LQCALCILh30EE3incEv+0x94>
        {
            LQArray[index] &= ~LQmask;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	785b      	ldrb	r3, [r3, #1]
 80037d2:	001a      	movs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3202      	adds	r2, #2
 80037d8:	0092      	lsls	r2, r2, #2
 80037da:	58d2      	ldr	r2, [r2, r3]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	43db      	mvns	r3, r3
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	7849      	ldrb	r1, [r1, #1]
 80037e6:	0008      	movs	r0, r1
 80037e8:	4013      	ands	r3, r2
 80037ea:	0019      	movs	r1, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	1c82      	adds	r2, r0, #2
 80037f0:	0092      	lsls	r2, r2, #2
 80037f2:	50d1      	str	r1, [r2, r3]
            LQ -= 1;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	701a      	strb	r2, [r3, #0]
        }

        if (count < N)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	789b      	ldrb	r3, [r3, #2]
 8003804:	2b1d      	cmp	r3, #29
 8003806:	d805      	bhi.n	8003814 <_ZN6LQCALCILh30EE3incEv+0xa8>
          ++count;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	789b      	ldrb	r3, [r3, #2]
 800380c:	3301      	adds	r3, #1
 800380e:	b2da      	uxtb	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	709a      	strb	r2, [r3, #2]
    }
 8003814:	46c0      	nop			; (mov r8, r8)
 8003816:	46bd      	mov	sp, r7
 8003818:	b002      	add	sp, #8
 800381a:	bd80      	pop	{r7, pc}

0800381c <_ZN6LQCALCILh30EE3addEv>:
    void add()
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
        if (currentIsSet())
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	0018      	movs	r0, r3
 8003828:	f000 f85b 	bl	80038e2 <_ZNK6LQCALCILh30EE12currentIsSetEv>
 800382c:	1e03      	subs	r3, r0, #0
 800382e:	d118      	bne.n	8003862 <_ZN6LQCALCILh30EE3addEv+0x46>
        LQArray[index] |= LQmask;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	785b      	ldrb	r3, [r3, #1]
 8003834:	001a      	movs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3202      	adds	r2, #2
 800383a:	0092      	lsls	r2, r2, #2
 800383c:	58d2      	ldr	r2, [r2, r3]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	7849      	ldrb	r1, [r1, #1]
 8003846:	0008      	movs	r0, r1
 8003848:	431a      	orrs	r2, r3
 800384a:	0011      	movs	r1, r2
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	1c82      	adds	r2, r0, #2
 8003850:	0092      	lsls	r2, r2, #2
 8003852:	50d1      	str	r1, [r2, r3]
        LQ += 1;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	3301      	adds	r3, #1
 800385a:	b2da      	uxtb	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	701a      	strb	r2, [r3, #0]
 8003860:	e000      	b.n	8003864 <_ZN6LQCALCILh30EE3addEv+0x48>
            return;
 8003862:	46c0      	nop			; (mov r8, r8)
    }
 8003864:	46bd      	mov	sp, r7
 8003866:	b002      	add	sp, #8
 8003868:	bd80      	pop	{r7, pc}

0800386a <_ZNK6LQCALCILh30EE5getLQEv>:

    /* Return the current running total of bits set, in percent */
    uint8_t getLQ() const
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
    {
        return (uint32_t)LQ * 100U / count;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	001a      	movs	r2, r3
 8003878:	2364      	movs	r3, #100	; 0x64
 800387a:	435a      	muls	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	789b      	ldrb	r3, [r3, #2]
 8003880:	0019      	movs	r1, r3
 8003882:	0010      	movs	r0, r2
 8003884:	f7fc fc52 	bl	800012c <__udivsi3>
 8003888:	0003      	movs	r3, r0
 800388a:	b2db      	uxtb	r3, r3
    }
 800388c:	0018      	movs	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	b002      	add	sp, #8
 8003892:	bd80      	pop	{r7, pc}

08003894 <_ZN6LQCALCILh30EE5resetEv>:
    {
        return N;
    }

    /* Initialize and zero the history */
    void reset()
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
    {
        // count is intentonally not zeroed here to start LQ counting up from 0
        // after a failsafe, instead of down from 100
        LQ = 0;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	701a      	strb	r2, [r3, #0]
        index = 0;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	705a      	strb	r2, [r3, #1]
        LQmask = (1 << 0);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	605a      	str	r2, [r3, #4]
        for (uint8_t i = 0; i < (sizeof(LQArray)/sizeof(LQArray[0])); i++)
 80038ae:	230f      	movs	r3, #15
 80038b0:	18fb      	adds	r3, r7, r3
 80038b2:	2200      	movs	r2, #0
 80038b4:	701a      	strb	r2, [r3, #0]
 80038b6:	200f      	movs	r0, #15
 80038b8:	183b      	adds	r3, r7, r0
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10c      	bne.n	80038da <_ZN6LQCALCILh30EE5resetEv+0x46>
            LQArray[i] = 0;
 80038c0:	183b      	adds	r3, r7, r0
 80038c2:	781a      	ldrb	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3202      	adds	r2, #2
 80038c8:	0092      	lsls	r2, r2, #2
 80038ca:	2100      	movs	r1, #0
 80038cc:	50d1      	str	r1, [r2, r3]
        for (uint8_t i = 0; i < (sizeof(LQArray)/sizeof(LQArray[0])); i++)
 80038ce:	183b      	adds	r3, r7, r0
 80038d0:	781a      	ldrb	r2, [r3, #0]
 80038d2:	183b      	adds	r3, r7, r0
 80038d4:	3201      	adds	r2, #1
 80038d6:	701a      	strb	r2, [r3, #0]
 80038d8:	e7ed      	b.n	80038b6 <_ZN6LQCALCILh30EE5resetEv+0x22>
    }
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	46bd      	mov	sp, r7
 80038de:	b004      	add	sp, #16
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <_ZNK6LQCALCILh30EE12currentIsSetEv>:

    /*  Return true if the current period was add()ed */
    bool currentIsSet() const
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b082      	sub	sp, #8
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
    {
        return LQArray[index] & LQmask;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	785b      	ldrb	r3, [r3, #1]
 80038ee:	001a      	movs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3202      	adds	r2, #2
 80038f4:	0092      	lsls	r2, r2, #2
 80038f6:	58d2      	ldr	r2, [r2, r3]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	4013      	ands	r3, r2
 80038fe:	1e5a      	subs	r2, r3, #1
 8003900:	4193      	sbcs	r3, r2
 8003902:	b2db      	uxtb	r3, r3
    }
 8003904:	0018      	movs	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	b002      	add	sp, #8
 800390a:	bd80      	pop	{r7, pc}

0800390c <_Z41__static_initialization_and_destruction_0ii>:
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d107      	bne.n	800392c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	4a05      	ldr	r2, [pc, #20]	; (8003934 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d103      	bne.n	800392c <_Z41__static_initialization_and_destruction_0ii+0x20>
LQCALC<30> LQCalc;
 8003924:	4b04      	ldr	r3, [pc, #16]	; (8003938 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8003926:	0018      	movs	r0, r3
 8003928:	f7ff ff10 	bl	800374c <_ZN6LQCALCILh30EEC1Ev>
}
 800392c:	46c0      	nop			; (mov r8, r8)
 800392e:	46bd      	mov	sp, r7
 8003930:	b002      	add	sp, #8
 8003932:	bd80      	pop	{r7, pc}
 8003934:	0000ffff 	.word	0x0000ffff
 8003938:	20000494 	.word	0x20000494

0800393c <_GLOBAL__sub_I_busyTransmitting>:
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
 8003940:	4b03      	ldr	r3, [pc, #12]	; (8003950 <_GLOBAL__sub_I_busyTransmitting+0x14>)
 8003942:	0019      	movs	r1, r3
 8003944:	2001      	movs	r0, #1
 8003946:	f7ff ffe1 	bl	800390c <_Z41__static_initialization_and_destruction_0ii>
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	0000ffff 	.word	0x0000ffff

08003954 <Reset_Handler>:
 8003954:	480d      	ldr	r0, [pc, #52]	; (800398c <LoopForever+0x2>)
 8003956:	4685      	mov	sp, r0
 8003958:	f7ff fc0e 	bl	8003178 <SystemInit>
 800395c:	480c      	ldr	r0, [pc, #48]	; (8003990 <LoopForever+0x6>)
 800395e:	490d      	ldr	r1, [pc, #52]	; (8003994 <LoopForever+0xa>)
 8003960:	4a0d      	ldr	r2, [pc, #52]	; (8003998 <LoopForever+0xe>)
 8003962:	2300      	movs	r3, #0
 8003964:	e002      	b.n	800396c <LoopCopyDataInit>

08003966 <CopyDataInit>:
 8003966:	58d4      	ldr	r4, [r2, r3]
 8003968:	50c4      	str	r4, [r0, r3]
 800396a:	3304      	adds	r3, #4

0800396c <LoopCopyDataInit>:
 800396c:	18c4      	adds	r4, r0, r3
 800396e:	428c      	cmp	r4, r1
 8003970:	d3f9      	bcc.n	8003966 <CopyDataInit>
 8003972:	4a0a      	ldr	r2, [pc, #40]	; (800399c <LoopForever+0x12>)
 8003974:	4c0a      	ldr	r4, [pc, #40]	; (80039a0 <LoopForever+0x16>)
 8003976:	2300      	movs	r3, #0
 8003978:	e001      	b.n	800397e <LoopFillZerobss>

0800397a <FillZerobss>:
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	3204      	adds	r2, #4

0800397e <LoopFillZerobss>:
 800397e:	42a2      	cmp	r2, r4
 8003980:	d3fb      	bcc.n	800397a <FillZerobss>
 8003982:	f005 fb75 	bl	8009070 <__libc_init_array>
 8003986:	f7fe febd 	bl	8002704 <main>

0800398a <LoopForever>:
 800398a:	e7fe      	b.n	800398a <LoopForever>
 800398c:	20009000 	.word	0x20009000
 8003990:	20000000 	.word	0x20000000
 8003994:	200000b4 	.word	0x200000b4
 8003998:	0800a438 	.word	0x0800a438
 800399c:	200000b4 	.word	0x200000b4
 80039a0:	200004f0 	.word	0x200004f0

080039a4 <ADC1_COMP_IRQHandler>:
 80039a4:	e7fe      	b.n	80039a4 <ADC1_COMP_IRQHandler>
	...

080039a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80039ae:	1dfb      	adds	r3, r7, #7
 80039b0:	2200      	movs	r2, #0
 80039b2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039b4:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <HAL_Init+0x3c>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <HAL_Init+0x3c>)
 80039ba:	2180      	movs	r1, #128	; 0x80
 80039bc:	0049      	lsls	r1, r1, #1
 80039be:	430a      	orrs	r2, r1
 80039c0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039c2:	2001      	movs	r0, #1
 80039c4:	f000 f810 	bl	80039e8 <HAL_InitTick>
 80039c8:	1e03      	subs	r3, r0, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80039cc:	1dfb      	adds	r3, r7, #7
 80039ce:	2201      	movs	r2, #1
 80039d0:	701a      	strb	r2, [r3, #0]
 80039d2:	e001      	b.n	80039d8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80039d4:	f7ff f9a8 	bl	8002d28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80039d8:	1dfb      	adds	r3, r7, #7
 80039da:	781b      	ldrb	r3, [r3, #0]
}
 80039dc:	0018      	movs	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	b002      	add	sp, #8
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40022000 	.word	0x40022000

080039e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039e8:	b590      	push	{r4, r7, lr}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80039f0:	230f      	movs	r3, #15
 80039f2:	18fb      	adds	r3, r7, r3
 80039f4:	2200      	movs	r2, #0
 80039f6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80039f8:	4b1d      	ldr	r3, [pc, #116]	; (8003a70 <HAL_InitTick+0x88>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d02b      	beq.n	8003a58 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003a00:	4b1c      	ldr	r3, [pc, #112]	; (8003a74 <HAL_InitTick+0x8c>)
 8003a02:	681c      	ldr	r4, [r3, #0]
 8003a04:	4b1a      	ldr	r3, [pc, #104]	; (8003a70 <HAL_InitTick+0x88>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	0019      	movs	r1, r3
 8003a0a:	23fa      	movs	r3, #250	; 0xfa
 8003a0c:	0098      	lsls	r0, r3, #2
 8003a0e:	f7fc fb8d 	bl	800012c <__udivsi3>
 8003a12:	0003      	movs	r3, r0
 8003a14:	0019      	movs	r1, r3
 8003a16:	0020      	movs	r0, r4
 8003a18:	f7fc fb88 	bl	800012c <__udivsi3>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f000 fdf1 	bl	8004606 <HAL_SYSTICK_Config>
 8003a24:	1e03      	subs	r3, r0, #0
 8003a26:	d112      	bne.n	8003a4e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	d80a      	bhi.n	8003a44 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	2301      	movs	r3, #1
 8003a32:	425b      	negs	r3, r3
 8003a34:	2200      	movs	r2, #0
 8003a36:	0018      	movs	r0, r3
 8003a38:	f000 fdc0 	bl	80045bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a3c:	4b0e      	ldr	r3, [pc, #56]	; (8003a78 <HAL_InitTick+0x90>)
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	e00d      	b.n	8003a60 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003a44:	230f      	movs	r3, #15
 8003a46:	18fb      	adds	r3, r7, r3
 8003a48:	2201      	movs	r2, #1
 8003a4a:	701a      	strb	r2, [r3, #0]
 8003a4c:	e008      	b.n	8003a60 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003a4e:	230f      	movs	r3, #15
 8003a50:	18fb      	adds	r3, r7, r3
 8003a52:	2201      	movs	r2, #1
 8003a54:	701a      	strb	r2, [r3, #0]
 8003a56:	e003      	b.n	8003a60 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a58:	230f      	movs	r3, #15
 8003a5a:	18fb      	adds	r3, r7, r3
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003a60:	230f      	movs	r3, #15
 8003a62:	18fb      	adds	r3, r7, r3
 8003a64:	781b      	ldrb	r3, [r3, #0]
}
 8003a66:	0018      	movs	r0, r3
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	b005      	add	sp, #20
 8003a6c:	bd90      	pop	{r4, r7, pc}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	2000004c 	.word	0x2000004c
 8003a74:	20000044 	.word	0x20000044
 8003a78:	20000048 	.word	0x20000048

08003a7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a80:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <HAL_IncTick+0x1c>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	001a      	movs	r2, r3
 8003a86:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <HAL_IncTick+0x20>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	18d2      	adds	r2, r2, r3
 8003a8c:	4b03      	ldr	r3, [pc, #12]	; (8003a9c <HAL_IncTick+0x20>)
 8003a8e:	601a      	str	r2, [r3, #0]
}
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	2000004c 	.word	0x2000004c
 8003a9c:	200004dc 	.word	0x200004dc

08003aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8003aa4:	4b02      	ldr	r3, [pc, #8]	; (8003ab0 <HAL_GetTick+0x10>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
}
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	200004dc 	.word	0x200004dc

08003ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003abc:	f7ff fff0 	bl	8003aa0 <HAL_GetTick>
 8003ac0:	0003      	movs	r3, r0
 8003ac2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	3301      	adds	r3, #1
 8003acc:	d005      	beq.n	8003ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ace:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <HAL_Delay+0x44>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	001a      	movs	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	189b      	adds	r3, r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	f7ff ffe0 	bl	8003aa0 <HAL_GetTick>
 8003ae0:	0002      	movs	r2, r0
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d8f7      	bhi.n	8003adc <HAL_Delay+0x28>
  {
  }
}
 8003aec:	46c0      	nop			; (mov r8, r8)
 8003aee:	46c0      	nop			; (mov r8, r8)
 8003af0:	46bd      	mov	sp, r7
 8003af2:	b004      	add	sp, #16
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	46c0      	nop			; (mov r8, r8)
 8003af8:	2000004c 	.word	0x2000004c

08003afc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003b04:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a06      	ldr	r2, [pc, #24]	; (8003b24 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	0019      	movs	r1, r3
 8003b0e:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	601a      	str	r2, [r3, #0]
}
 8003b16:	46c0      	nop			; (mov r8, r8)
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	b002      	add	sp, #8
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	46c0      	nop			; (mov r8, r8)
 8003b20:	40010000 	.word	0x40010000
 8003b24:	fffff9ff 	.word	0xfffff9ff

08003b28 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a05      	ldr	r2, [pc, #20]	; (8003b4c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003b38:	401a      	ands	r2, r3
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	601a      	str	r2, [r3, #0]
}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b002      	add	sp, #8
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	fe3fffff 	.word	0xfe3fffff

08003b50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	23e0      	movs	r3, #224	; 0xe0
 8003b5e:	045b      	lsls	r3, r3, #17
 8003b60:	4013      	ands	r3, r2
}
 8003b62:	0018      	movs	r0, r3
 8003b64:	46bd      	mov	sp, r7
 8003b66:	b002      	add	sp, #8
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b084      	sub	sp, #16
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	60f8      	str	r0, [r7, #12]
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	2104      	movs	r1, #4
 8003b7e:	400a      	ands	r2, r1
 8003b80:	2107      	movs	r1, #7
 8003b82:	4091      	lsls	r1, r2
 8003b84:	000a      	movs	r2, r1
 8003b86:	43d2      	mvns	r2, r2
 8003b88:	401a      	ands	r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2104      	movs	r1, #4
 8003b8e:	400b      	ands	r3, r1
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	4099      	lsls	r1, r3
 8003b94:	000b      	movs	r3, r1
 8003b96:	431a      	orrs	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003b9c:	46c0      	nop			; (mov r8, r8)
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b004      	add	sp, #16
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	211f      	movs	r1, #31
 8003bb8:	400a      	ands	r2, r1
 8003bba:	210f      	movs	r1, #15
 8003bbc:	4091      	lsls	r1, r2
 8003bbe:	000a      	movs	r2, r1
 8003bc0:	43d2      	mvns	r2, r2
 8003bc2:	401a      	ands	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	0e9b      	lsrs	r3, r3, #26
 8003bc8:	210f      	movs	r1, #15
 8003bca:	4019      	ands	r1, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	201f      	movs	r0, #31
 8003bd0:	4003      	ands	r3, r0
 8003bd2:	4099      	lsls	r1, r3
 8003bd4:	000b      	movs	r3, r1
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003bdc:	46c0      	nop			; (mov r8, r8)
 8003bde:	46bd      	mov	sp, r7
 8003be0:	b004      	add	sp, #16
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	035b      	lsls	r3, r3, #13
 8003bf6:	0b5b      	lsrs	r3, r3, #13
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	46bd      	mov	sp, r7
 8003c02:	b002      	add	sp, #8
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b082      	sub	sp, #8
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
 8003c0e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	0352      	lsls	r2, r2, #13
 8003c18:	0b52      	lsrs	r2, r2, #13
 8003c1a:	43d2      	mvns	r2, r2
 8003c1c:	401a      	ands	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	46bd      	mov	sp, r7
 8003c26:	b002      	add	sp, #8
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	0212      	lsls	r2, r2, #8
 8003c40:	43d2      	mvns	r2, r2
 8003c42:	401a      	ands	r2, r3
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	021b      	lsls	r3, r3, #8
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	400b      	ands	r3, r1
 8003c4c:	4904      	ldr	r1, [pc, #16]	; (8003c60 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003c4e:	400b      	ands	r3, r1
 8003c50:	431a      	orrs	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b004      	add	sp, #16
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	07ffff00 	.word	0x07ffff00

08003c64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	4a05      	ldr	r2, [pc, #20]	; (8003c88 <LL_ADC_EnableInternalRegulator+0x24>)
 8003c72:	4013      	ands	r3, r2
 8003c74:	2280      	movs	r2, #128	; 0x80
 8003c76:	0552      	lsls	r2, r2, #21
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	46bd      	mov	sp, r7
 8003c82:	b002      	add	sp, #8
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	46c0      	nop			; (mov r8, r8)
 8003c88:	6fffffe8 	.word	0x6fffffe8

08003c8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	2380      	movs	r3, #128	; 0x80
 8003c9a:	055b      	lsls	r3, r3, #21
 8003c9c:	401a      	ands	r2, r3
 8003c9e:	2380      	movs	r3, #128	; 0x80
 8003ca0:	055b      	lsls	r3, r3, #21
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d101      	bne.n	8003caa <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	0018      	movs	r0, r3
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	b002      	add	sp, #8
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <LL_ADC_IsEnabled+0x18>
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e000      	b.n	8003cce <LL_ADC_IsEnabled+0x1a>
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	0018      	movs	r0, r3
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	b002      	add	sp, #8
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b082      	sub	sp, #8
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	2204      	movs	r2, #4
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d101      	bne.n	8003cee <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cea:	2301      	movs	r3, #1
 8003cec:	e000      	b.n	8003cf0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b002      	add	sp, #8
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d00:	231f      	movs	r3, #31
 8003d02:	18fb      	adds	r3, r7, r3
 8003d04:	2200      	movs	r2, #0
 8003d06:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e1b1      	b.n	8004082 <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10a      	bne.n	8003d3c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f7ff f825 	bl	8002d78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2254      	movs	r2, #84	; 0x54
 8003d38:	2100      	movs	r1, #0
 8003d3a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	0018      	movs	r0, r3
 8003d42:	f7ff ffa3 	bl	8003c8c <LL_ADC_IsInternalRegulatorEnabled>
 8003d46:	1e03      	subs	r3, r0, #0
 8003d48:	d115      	bne.n	8003d76 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	0018      	movs	r0, r3
 8003d50:	f7ff ff88 	bl	8003c64 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d54:	4bcd      	ldr	r3, [pc, #820]	; (800408c <HAL_ADC_Init+0x394>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	49cd      	ldr	r1, [pc, #820]	; (8004090 <HAL_ADC_Init+0x398>)
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	f7fc f9e6 	bl	800012c <__udivsi3>
 8003d60:	0003      	movs	r3, r0
 8003d62:	3301      	adds	r3, #1
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d68:	e002      	b.n	8003d70 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f9      	bne.n	8003d6a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f7ff ff86 	bl	8003c8c <LL_ADC_IsInternalRegulatorEnabled>
 8003d80:	1e03      	subs	r3, r0, #0
 8003d82:	d10f      	bne.n	8003da4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d88:	2210      	movs	r2, #16
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d94:	2201      	movs	r2, #1
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d9c:	231f      	movs	r3, #31
 8003d9e:	18fb      	adds	r3, r7, r3
 8003da0:	2201      	movs	r2, #1
 8003da2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	0018      	movs	r0, r3
 8003daa:	f7ff ff94 	bl	8003cd6 <LL_ADC_REG_IsConversionOngoing>
 8003dae:	0003      	movs	r3, r0
 8003db0:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db6:	2210      	movs	r2, #16
 8003db8:	4013      	ands	r3, r2
 8003dba:	d000      	beq.n	8003dbe <HAL_ADC_Init+0xc6>
 8003dbc:	e154      	b.n	8004068 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d000      	beq.n	8003dc6 <HAL_ADC_Init+0xce>
 8003dc4:	e150      	b.n	8004068 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dca:	4ab2      	ldr	r2, [pc, #712]	; (8004094 <HAL_ADC_Init+0x39c>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2202      	movs	r2, #2
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f7ff ff6a 	bl	8003cb4 <LL_ADC_IsEnabled>
 8003de0:	1e03      	subs	r3, r0, #0
 8003de2:	d156      	bne.n	8003e92 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	2218      	movs	r2, #24
 8003dec:	4393      	bics	r3, r2
 8003dee:	0019      	movs	r1, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	0f9b      	lsrs	r3, r3, #30
 8003e02:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	223c      	movs	r2, #60	; 0x3c
 8003e14:	5c9b      	ldrb	r3, [r3, r2]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d111      	bne.n	8003e3e <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	0f9b      	lsrs	r3, r3, #30
 8003e20:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003e26:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003e2c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003e32:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	2201      	movs	r2, #1
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	4a94      	ldr	r2, [pc, #592]	; (8004098 <HAL_ADC_Init+0x3a0>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	0019      	movs	r1, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	23c0      	movs	r3, #192	; 0xc0
 8003e5a:	061b      	lsls	r3, r3, #24
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d018      	beq.n	8003e92 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003e64:	2380      	movs	r3, #128	; 0x80
 8003e66:	05db      	lsls	r3, r3, #23
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d012      	beq.n	8003e92 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003e70:	2380      	movs	r3, #128	; 0x80
 8003e72:	061b      	lsls	r3, r3, #24
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d00c      	beq.n	8003e92 <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003e78:	4b88      	ldr	r3, [pc, #544]	; (800409c <HAL_ADC_Init+0x3a4>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a88      	ldr	r2, [pc, #544]	; (80040a0 <HAL_ADC_Init+0x3a8>)
 8003e7e:	4013      	ands	r3, r2
 8003e80:	0019      	movs	r1, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	23f0      	movs	r3, #240	; 0xf0
 8003e88:	039b      	lsls	r3, r3, #14
 8003e8a:	401a      	ands	r2, r3
 8003e8c:	4b83      	ldr	r3, [pc, #524]	; (800409c <HAL_ADC_Init+0x3a4>)
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	7e1b      	ldrb	r3, [r3, #24]
 8003e96:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	7e5b      	ldrb	r3, [r3, #25]
 8003e9c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003e9e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	7e9b      	ldrb	r3, [r3, #26]
 8003ea4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003ea6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <HAL_ADC_Init+0x1be>
 8003eb0:	2380      	movs	r3, #128	; 0x80
 8003eb2:	015b      	lsls	r3, r3, #5
 8003eb4:	e000      	b.n	8003eb8 <HAL_ADC_Init+0x1c0>
 8003eb6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003eb8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003ebe:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	da04      	bge.n	8003ed2 <HAL_ADC_Init+0x1da>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	085b      	lsrs	r3, r3, #1
 8003ed0:	e001      	b.n	8003ed6 <HAL_ADC_Init+0x1de>
 8003ed2:	2380      	movs	r3, #128	; 0x80
 8003ed4:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8003ed6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	212c      	movs	r1, #44	; 0x2c
 8003edc:	5c5b      	ldrb	r3, [r3, r1]
 8003ede:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003ee0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2220      	movs	r2, #32
 8003eec:	5c9b      	ldrb	r3, [r3, r2]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d115      	bne.n	8003f1e <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	7e9b      	ldrb	r3, [r3, #26]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d105      	bne.n	8003f06 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	2280      	movs	r2, #128	; 0x80
 8003efe:	0252      	lsls	r2, r2, #9
 8003f00:	4313      	orrs	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
 8003f04:	e00b      	b.n	8003f1e <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f16:	2201      	movs	r2, #1
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f2a:	23e0      	movs	r3, #224	; 0xe0
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003f34:	4313      	orrs	r3, r2
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	4a58      	ldr	r2, [pc, #352]	; (80040a4 <HAL_ADC_Init+0x3ac>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	0019      	movs	r1, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	4a53      	ldr	r2, [pc, #332]	; (80040a8 <HAL_ADC_Init+0x3b0>)
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	0019      	movs	r1, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6818      	ldr	r0, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f70:	001a      	movs	r2, r3
 8003f72:	2100      	movs	r1, #0
 8003f74:	f7ff fdf9 	bl	8003b6a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f80:	494a      	ldr	r1, [pc, #296]	; (80040ac <HAL_ADC_Init+0x3b4>)
 8003f82:	001a      	movs	r2, r3
 8003f84:	f7ff fdf1 	bl	8003b6a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d109      	bne.n	8003fa4 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2110      	movs	r1, #16
 8003f9c:	4249      	negs	r1, r1
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	629a      	str	r2, [r3, #40]	; 0x28
 8003fa2:	e03a      	b.n	800401a <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	2380      	movs	r3, #128	; 0x80
 8003faa:	039b      	lsls	r3, r3, #14
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d134      	bne.n	800401a <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	613b      	str	r3, [r7, #16]
 8003fb4:	e00c      	b.n	8003fd0 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	40da      	lsrs	r2, r3
 8003fc0:	0013      	movs	r3, r2
 8003fc2:	220f      	movs	r2, #15
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	2b0f      	cmp	r3, #15
 8003fc8:	d006      	beq.n	8003fd8 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	613b      	str	r3, [r7, #16]
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	2b07      	cmp	r3, #7
 8003fd4:	d9ef      	bls.n	8003fb6 <HAL_ADC_Init+0x2be>
 8003fd6:	e000      	b.n	8003fda <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8003fd8:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d109      	bne.n	8003ff4 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2110      	movs	r1, #16
 8003fec:	4249      	negs	r1, r1
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	629a      	str	r2, [r3, #40]	; 0x28
 8003ff2:	e012      	b.n	800401a <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	221c      	movs	r2, #28
 8004004:	4013      	ands	r3, r2
 8004006:	2210      	movs	r2, #16
 8004008:	4252      	negs	r2, r2
 800400a:	409a      	lsls	r2, r3
 800400c:	0011      	movs	r1, r2
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	4a23      	ldr	r2, [pc, #140]	; (80040b0 <HAL_ADC_Init+0x3b8>)
 8004022:	4013      	ands	r3, r2
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	429a      	cmp	r2, r3
 8004028:	d10b      	bne.n	8004042 <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004034:	2203      	movs	r2, #3
 8004036:	4393      	bics	r3, r2
 8004038:	2201      	movs	r2, #1
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8004040:	e01c      	b.n	800407c <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004046:	2212      	movs	r2, #18
 8004048:	4393      	bics	r3, r2
 800404a:	2210      	movs	r2, #16
 800404c:	431a      	orrs	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004056:	2201      	movs	r2, #1
 8004058:	431a      	orrs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800405e:	231f      	movs	r3, #31
 8004060:	18fb      	adds	r3, r7, r3
 8004062:	2201      	movs	r2, #1
 8004064:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8004066:	e009      	b.n	800407c <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406c:	2210      	movs	r2, #16
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004074:	231f      	movs	r3, #31
 8004076:	18fb      	adds	r3, r7, r3
 8004078:	2201      	movs	r2, #1
 800407a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800407c:	231f      	movs	r3, #31
 800407e:	18fb      	adds	r3, r7, r3
 8004080:	781b      	ldrb	r3, [r3, #0]
}
 8004082:	0018      	movs	r0, r3
 8004084:	46bd      	mov	sp, r7
 8004086:	b008      	add	sp, #32
 8004088:	bd80      	pop	{r7, pc}
 800408a:	46c0      	nop			; (mov r8, r8)
 800408c:	20000044 	.word	0x20000044
 8004090:	00030d40 	.word	0x00030d40
 8004094:	fffffefd 	.word	0xfffffefd
 8004098:	1ffffc02 	.word	0x1ffffc02
 800409c:	40012708 	.word	0x40012708
 80040a0:	ffc3ffff 	.word	0xffc3ffff
 80040a4:	fffe0219 	.word	0xfffe0219
 80040a8:	dffffc02 	.word	0xdffffc02
 80040ac:	07ffff04 	.word	0x07ffff04
 80040b0:	833fffe7 	.word	0x833fffe7

080040b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040be:	2317      	movs	r3, #23
 80040c0:	18fb      	adds	r3, r7, r3
 80040c2:	2200      	movs	r2, #0
 80040c4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2254      	movs	r2, #84	; 0x54
 80040ce:	5c9b      	ldrb	r3, [r3, r2]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_ADC_ConfigChannel+0x24>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e1c0      	b.n	800445a <HAL_ADC_ConfigChannel+0x3a6>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2254      	movs	r2, #84	; 0x54
 80040dc:	2101      	movs	r1, #1
 80040de:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	0018      	movs	r0, r3
 80040e6:	f7ff fdf6 	bl	8003cd6 <LL_ADC_REG_IsConversionOngoing>
 80040ea:	1e03      	subs	r3, r0, #0
 80040ec:	d000      	beq.n	80040f0 <HAL_ADC_ConfigChannel+0x3c>
 80040ee:	e1a3      	b.n	8004438 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d100      	bne.n	80040fa <HAL_ADC_ConfigChannel+0x46>
 80040f8:	e143      	b.n	8004382 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	2380      	movs	r3, #128	; 0x80
 8004100:	061b      	lsls	r3, r3, #24
 8004102:	429a      	cmp	r2, r3
 8004104:	d004      	beq.n	8004110 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800410a:	4ac1      	ldr	r2, [pc, #772]	; (8004410 <HAL_ADC_ConfigChannel+0x35c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d108      	bne.n	8004122 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	0019      	movs	r1, r3
 800411a:	0010      	movs	r0, r2
 800411c:	f7ff fd62 	bl	8003be4 <LL_ADC_REG_SetSequencerChAdd>
 8004120:	e0c9      	b.n	80042b6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	211f      	movs	r1, #31
 800412c:	400b      	ands	r3, r1
 800412e:	210f      	movs	r1, #15
 8004130:	4099      	lsls	r1, r3
 8004132:	000b      	movs	r3, r1
 8004134:	43db      	mvns	r3, r3
 8004136:	4013      	ands	r3, r2
 8004138:	0019      	movs	r1, r3
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	035b      	lsls	r3, r3, #13
 8004140:	0b5b      	lsrs	r3, r3, #13
 8004142:	d105      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x9c>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	0e9b      	lsrs	r3, r3, #26
 800414a:	221f      	movs	r2, #31
 800414c:	4013      	ands	r3, r2
 800414e:	e098      	b.n	8004282 <HAL_ADC_ConfigChannel+0x1ce>
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2201      	movs	r2, #1
 8004156:	4013      	ands	r3, r2
 8004158:	d000      	beq.n	800415c <HAL_ADC_ConfigChannel+0xa8>
 800415a:	e091      	b.n	8004280 <HAL_ADC_ConfigChannel+0x1cc>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2202      	movs	r2, #2
 8004162:	4013      	ands	r3, r2
 8004164:	d000      	beq.n	8004168 <HAL_ADC_ConfigChannel+0xb4>
 8004166:	e089      	b.n	800427c <HAL_ADC_ConfigChannel+0x1c8>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2204      	movs	r2, #4
 800416e:	4013      	ands	r3, r2
 8004170:	d000      	beq.n	8004174 <HAL_ADC_ConfigChannel+0xc0>
 8004172:	e081      	b.n	8004278 <HAL_ADC_ConfigChannel+0x1c4>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2208      	movs	r2, #8
 800417a:	4013      	ands	r3, r2
 800417c:	d000      	beq.n	8004180 <HAL_ADC_ConfigChannel+0xcc>
 800417e:	e079      	b.n	8004274 <HAL_ADC_ConfigChannel+0x1c0>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2210      	movs	r2, #16
 8004186:	4013      	ands	r3, r2
 8004188:	d000      	beq.n	800418c <HAL_ADC_ConfigChannel+0xd8>
 800418a:	e071      	b.n	8004270 <HAL_ADC_ConfigChannel+0x1bc>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2220      	movs	r2, #32
 8004192:	4013      	ands	r3, r2
 8004194:	d000      	beq.n	8004198 <HAL_ADC_ConfigChannel+0xe4>
 8004196:	e069      	b.n	800426c <HAL_ADC_ConfigChannel+0x1b8>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2240      	movs	r2, #64	; 0x40
 800419e:	4013      	ands	r3, r2
 80041a0:	d000      	beq.n	80041a4 <HAL_ADC_ConfigChannel+0xf0>
 80041a2:	e061      	b.n	8004268 <HAL_ADC_ConfigChannel+0x1b4>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2280      	movs	r2, #128	; 0x80
 80041aa:	4013      	ands	r3, r2
 80041ac:	d000      	beq.n	80041b0 <HAL_ADC_ConfigChannel+0xfc>
 80041ae:	e059      	b.n	8004264 <HAL_ADC_ConfigChannel+0x1b0>
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	4013      	ands	r3, r2
 80041ba:	d151      	bne.n	8004260 <HAL_ADC_ConfigChannel+0x1ac>
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	2380      	movs	r3, #128	; 0x80
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4013      	ands	r3, r2
 80041c6:	d149      	bne.n	800425c <HAL_ADC_ConfigChannel+0x1a8>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	2380      	movs	r3, #128	; 0x80
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	4013      	ands	r3, r2
 80041d2:	d141      	bne.n	8004258 <HAL_ADC_ConfigChannel+0x1a4>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	2380      	movs	r3, #128	; 0x80
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	4013      	ands	r3, r2
 80041de:	d139      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x1a0>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	2380      	movs	r3, #128	; 0x80
 80041e6:	015b      	lsls	r3, r3, #5
 80041e8:	4013      	ands	r3, r2
 80041ea:	d131      	bne.n	8004250 <HAL_ADC_ConfigChannel+0x19c>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	2380      	movs	r3, #128	; 0x80
 80041f2:	019b      	lsls	r3, r3, #6
 80041f4:	4013      	ands	r3, r2
 80041f6:	d129      	bne.n	800424c <HAL_ADC_ConfigChannel+0x198>
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	2380      	movs	r3, #128	; 0x80
 80041fe:	01db      	lsls	r3, r3, #7
 8004200:	4013      	ands	r3, r2
 8004202:	d121      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x194>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	2380      	movs	r3, #128	; 0x80
 800420a:	021b      	lsls	r3, r3, #8
 800420c:	4013      	ands	r3, r2
 800420e:	d119      	bne.n	8004244 <HAL_ADC_ConfigChannel+0x190>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	2380      	movs	r3, #128	; 0x80
 8004216:	025b      	lsls	r3, r3, #9
 8004218:	4013      	ands	r3, r2
 800421a:	d111      	bne.n	8004240 <HAL_ADC_ConfigChannel+0x18c>
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	2380      	movs	r3, #128	; 0x80
 8004222:	029b      	lsls	r3, r3, #10
 8004224:	4013      	ands	r3, r2
 8004226:	d109      	bne.n	800423c <HAL_ADC_ConfigChannel+0x188>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	2380      	movs	r3, #128	; 0x80
 800422e:	02db      	lsls	r3, r3, #11
 8004230:	4013      	ands	r3, r2
 8004232:	d001      	beq.n	8004238 <HAL_ADC_ConfigChannel+0x184>
 8004234:	2312      	movs	r3, #18
 8004236:	e024      	b.n	8004282 <HAL_ADC_ConfigChannel+0x1ce>
 8004238:	2300      	movs	r3, #0
 800423a:	e022      	b.n	8004282 <HAL_ADC_ConfigChannel+0x1ce>
 800423c:	2311      	movs	r3, #17
 800423e:	e020      	b.n	8004282 <HAL_ADC_ConfigChannel+0x1ce>
 8004240:	2310      	movs	r3, #16
 8004242:	e01e      	b.n	8004282 <HAL_ADC_ConfigChannel+0x1ce>
 8004244:	230f      	movs	r3, #15
 8004246:	e01c      	b.n	8004282 <HAL_ADC_ConfigChannel+0x1ce>
 8004248:	230e      	movs	r3, #14
 800424a:	e01a      	b.n	8004282 <HAL_ADC_ConfigChannel+0x1ce>
 800424c:	230d      	movs	r3, #13
 800424e:	e018      	b.n	8004282 <HAL_ADC_ConfigChannel+0x1ce>
 8004250:	230c      	movs	r3, #12
 8004252:	e016      	b.n	8004282 <HAL_ADC_ConfigChannel+0x1ce>
 8004254:	230b      	movs	r3, #11
 8004256:	e014      	b.n	8004282 <HAL_ADC_ConfigChannel+0x1ce>
 8004258:	230a      	movs	r3, #10
 800425a:	e012      	b.n	8004282 <HAL_ADC_ConfigChannel+0x1ce>
 800425c:	2309      	movs	r3, #9
 800425e:	e010      	b.n	8004282 <HAL_ADC_ConfigChannel+0x1ce>
 8004260:	2308      	movs	r3, #8
 8004262:	e00e      	b.n	8004282 <HAL_ADC_ConfigChannel+0x1ce>
 8004264:	2307      	movs	r3, #7
 8004266:	e00c      	b.n	8004282 <HAL_ADC_ConfigChannel+0x1ce>
 8004268:	2306      	movs	r3, #6
 800426a:	e00a      	b.n	8004282 <HAL_ADC_ConfigChannel+0x1ce>
 800426c:	2305      	movs	r3, #5
 800426e:	e008      	b.n	8004282 <HAL_ADC_ConfigChannel+0x1ce>
 8004270:	2304      	movs	r3, #4
 8004272:	e006      	b.n	8004282 <HAL_ADC_ConfigChannel+0x1ce>
 8004274:	2303      	movs	r3, #3
 8004276:	e004      	b.n	8004282 <HAL_ADC_ConfigChannel+0x1ce>
 8004278:	2302      	movs	r3, #2
 800427a:	e002      	b.n	8004282 <HAL_ADC_ConfigChannel+0x1ce>
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <HAL_ADC_ConfigChannel+0x1ce>
 8004280:	2300      	movs	r3, #0
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	6852      	ldr	r2, [r2, #4]
 8004286:	201f      	movs	r0, #31
 8004288:	4002      	ands	r2, r0
 800428a:	4093      	lsls	r3, r2
 800428c:	000a      	movs	r2, r1
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	089b      	lsrs	r3, r3, #2
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d808      	bhi.n	80042b6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6818      	ldr	r0, [r3, #0]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	6859      	ldr	r1, [r3, #4]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	001a      	movs	r2, r3
 80042b2:	f7ff fc77 	bl	8003ba4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6818      	ldr	r0, [r3, #0]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	6819      	ldr	r1, [r3, #0]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	001a      	movs	r2, r3
 80042c4:	f7ff fcb2 	bl	8003c2c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	db00      	blt.n	80042d2 <HAL_ADC_ConfigChannel+0x21e>
 80042d0:	e0bc      	b.n	800444c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042d2:	4b50      	ldr	r3, [pc, #320]	; (8004414 <HAL_ADC_ConfigChannel+0x360>)
 80042d4:	0018      	movs	r0, r3
 80042d6:	f7ff fc3b 	bl	8003b50 <LL_ADC_GetCommonPathInternalCh>
 80042da:	0003      	movs	r3, r0
 80042dc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a4d      	ldr	r2, [pc, #308]	; (8004418 <HAL_ADC_ConfigChannel+0x364>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d122      	bne.n	800432e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	2380      	movs	r3, #128	; 0x80
 80042ec:	041b      	lsls	r3, r3, #16
 80042ee:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80042f0:	d11d      	bne.n	800432e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	2280      	movs	r2, #128	; 0x80
 80042f6:	0412      	lsls	r2, r2, #16
 80042f8:	4313      	orrs	r3, r2
 80042fa:	4a46      	ldr	r2, [pc, #280]	; (8004414 <HAL_ADC_ConfigChannel+0x360>)
 80042fc:	0019      	movs	r1, r3
 80042fe:	0010      	movs	r0, r2
 8004300:	f7ff fc12 	bl	8003b28 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004304:	4b45      	ldr	r3, [pc, #276]	; (800441c <HAL_ADC_ConfigChannel+0x368>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4945      	ldr	r1, [pc, #276]	; (8004420 <HAL_ADC_ConfigChannel+0x36c>)
 800430a:	0018      	movs	r0, r3
 800430c:	f7fb ff0e 	bl	800012c <__udivsi3>
 8004310:	0003      	movs	r3, r0
 8004312:	1c5a      	adds	r2, r3, #1
 8004314:	0013      	movs	r3, r2
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	189b      	adds	r3, r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800431e:	e002      	b.n	8004326 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	3b01      	subs	r3, #1
 8004324:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1f9      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800432c:	e08e      	b.n	800444c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a3c      	ldr	r2, [pc, #240]	; (8004424 <HAL_ADC_ConfigChannel+0x370>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d10e      	bne.n	8004356 <HAL_ADC_ConfigChannel+0x2a2>
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	2380      	movs	r3, #128	; 0x80
 800433c:	045b      	lsls	r3, r3, #17
 800433e:	4013      	ands	r3, r2
 8004340:	d109      	bne.n	8004356 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	2280      	movs	r2, #128	; 0x80
 8004346:	0452      	lsls	r2, r2, #17
 8004348:	4313      	orrs	r3, r2
 800434a:	4a32      	ldr	r2, [pc, #200]	; (8004414 <HAL_ADC_ConfigChannel+0x360>)
 800434c:	0019      	movs	r1, r3
 800434e:	0010      	movs	r0, r2
 8004350:	f7ff fbea 	bl	8003b28 <LL_ADC_SetCommonPathInternalCh>
 8004354:	e07a      	b.n	800444c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a33      	ldr	r2, [pc, #204]	; (8004428 <HAL_ADC_ConfigChannel+0x374>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d000      	beq.n	8004362 <HAL_ADC_ConfigChannel+0x2ae>
 8004360:	e074      	b.n	800444c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	2380      	movs	r3, #128	; 0x80
 8004366:	03db      	lsls	r3, r3, #15
 8004368:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800436a:	d000      	beq.n	800436e <HAL_ADC_ConfigChannel+0x2ba>
 800436c:	e06e      	b.n	800444c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	2280      	movs	r2, #128	; 0x80
 8004372:	03d2      	lsls	r2, r2, #15
 8004374:	4313      	orrs	r3, r2
 8004376:	4a27      	ldr	r2, [pc, #156]	; (8004414 <HAL_ADC_ConfigChannel+0x360>)
 8004378:	0019      	movs	r1, r3
 800437a:	0010      	movs	r0, r2
 800437c:	f7ff fbd4 	bl	8003b28 <LL_ADC_SetCommonPathInternalCh>
 8004380:	e064      	b.n	800444c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691a      	ldr	r2, [r3, #16]
 8004386:	2380      	movs	r3, #128	; 0x80
 8004388:	061b      	lsls	r3, r3, #24
 800438a:	429a      	cmp	r2, r3
 800438c:	d004      	beq.n	8004398 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004392:	4a1f      	ldr	r2, [pc, #124]	; (8004410 <HAL_ADC_ConfigChannel+0x35c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d107      	bne.n	80043a8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	0019      	movs	r1, r3
 80043a2:	0010      	movs	r0, r2
 80043a4:	f7ff fc2f 	bl	8003c06 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	da4d      	bge.n	800444c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043b0:	4b18      	ldr	r3, [pc, #96]	; (8004414 <HAL_ADC_ConfigChannel+0x360>)
 80043b2:	0018      	movs	r0, r3
 80043b4:	f7ff fbcc 	bl	8003b50 <LL_ADC_GetCommonPathInternalCh>
 80043b8:	0003      	movs	r3, r0
 80043ba:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a15      	ldr	r2, [pc, #84]	; (8004418 <HAL_ADC_ConfigChannel+0x364>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d108      	bne.n	80043d8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	4a18      	ldr	r2, [pc, #96]	; (800442c <HAL_ADC_ConfigChannel+0x378>)
 80043ca:	4013      	ands	r3, r2
 80043cc:	4a11      	ldr	r2, [pc, #68]	; (8004414 <HAL_ADC_ConfigChannel+0x360>)
 80043ce:	0019      	movs	r1, r3
 80043d0:	0010      	movs	r0, r2
 80043d2:	f7ff fba9 	bl	8003b28 <LL_ADC_SetCommonPathInternalCh>
 80043d6:	e039      	b.n	800444c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a11      	ldr	r2, [pc, #68]	; (8004424 <HAL_ADC_ConfigChannel+0x370>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d108      	bne.n	80043f4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	4a12      	ldr	r2, [pc, #72]	; (8004430 <HAL_ADC_ConfigChannel+0x37c>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	4a0a      	ldr	r2, [pc, #40]	; (8004414 <HAL_ADC_ConfigChannel+0x360>)
 80043ea:	0019      	movs	r1, r3
 80043ec:	0010      	movs	r0, r2
 80043ee:	f7ff fb9b 	bl	8003b28 <LL_ADC_SetCommonPathInternalCh>
 80043f2:	e02b      	b.n	800444c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a0b      	ldr	r2, [pc, #44]	; (8004428 <HAL_ADC_ConfigChannel+0x374>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d126      	bne.n	800444c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	4a0c      	ldr	r2, [pc, #48]	; (8004434 <HAL_ADC_ConfigChannel+0x380>)
 8004402:	4013      	ands	r3, r2
 8004404:	4a03      	ldr	r2, [pc, #12]	; (8004414 <HAL_ADC_ConfigChannel+0x360>)
 8004406:	0019      	movs	r1, r3
 8004408:	0010      	movs	r0, r2
 800440a:	f7ff fb8d 	bl	8003b28 <LL_ADC_SetCommonPathInternalCh>
 800440e:	e01d      	b.n	800444c <HAL_ADC_ConfigChannel+0x398>
 8004410:	80000004 	.word	0x80000004
 8004414:	40012708 	.word	0x40012708
 8004418:	b0001000 	.word	0xb0001000
 800441c:	20000044 	.word	0x20000044
 8004420:	00030d40 	.word	0x00030d40
 8004424:	b8004000 	.word	0xb8004000
 8004428:	b4002000 	.word	0xb4002000
 800442c:	ff7fffff 	.word	0xff7fffff
 8004430:	feffffff 	.word	0xfeffffff
 8004434:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443c:	2220      	movs	r2, #32
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004444:	2317      	movs	r3, #23
 8004446:	18fb      	adds	r3, r7, r3
 8004448:	2201      	movs	r2, #1
 800444a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2254      	movs	r2, #84	; 0x54
 8004450:	2100      	movs	r1, #0
 8004452:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004454:	2317      	movs	r3, #23
 8004456:	18fb      	adds	r3, r7, r3
 8004458:	781b      	ldrb	r3, [r3, #0]
}
 800445a:	0018      	movs	r0, r3
 800445c:	46bd      	mov	sp, r7
 800445e:	b006      	add	sp, #24
 8004460:	bd80      	pop	{r7, pc}
 8004462:	46c0      	nop			; (mov r8, r8)

08004464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	0002      	movs	r2, r0
 800446c:	1dfb      	adds	r3, r7, #7
 800446e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004470:	1dfb      	adds	r3, r7, #7
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2b7f      	cmp	r3, #127	; 0x7f
 8004476:	d809      	bhi.n	800448c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004478:	1dfb      	adds	r3, r7, #7
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	001a      	movs	r2, r3
 800447e:	231f      	movs	r3, #31
 8004480:	401a      	ands	r2, r3
 8004482:	4b04      	ldr	r3, [pc, #16]	; (8004494 <__NVIC_EnableIRQ+0x30>)
 8004484:	2101      	movs	r1, #1
 8004486:	4091      	lsls	r1, r2
 8004488:	000a      	movs	r2, r1
 800448a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800448c:	46c0      	nop			; (mov r8, r8)
 800448e:	46bd      	mov	sp, r7
 8004490:	b002      	add	sp, #8
 8004492:	bd80      	pop	{r7, pc}
 8004494:	e000e100 	.word	0xe000e100

08004498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004498:	b590      	push	{r4, r7, lr}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	0002      	movs	r2, r0
 80044a0:	6039      	str	r1, [r7, #0]
 80044a2:	1dfb      	adds	r3, r7, #7
 80044a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80044a6:	1dfb      	adds	r3, r7, #7
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	2b7f      	cmp	r3, #127	; 0x7f
 80044ac:	d828      	bhi.n	8004500 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044ae:	4a2f      	ldr	r2, [pc, #188]	; (800456c <__NVIC_SetPriority+0xd4>)
 80044b0:	1dfb      	adds	r3, r7, #7
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	b25b      	sxtb	r3, r3
 80044b6:	089b      	lsrs	r3, r3, #2
 80044b8:	33c0      	adds	r3, #192	; 0xc0
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	589b      	ldr	r3, [r3, r2]
 80044be:	1dfa      	adds	r2, r7, #7
 80044c0:	7812      	ldrb	r2, [r2, #0]
 80044c2:	0011      	movs	r1, r2
 80044c4:	2203      	movs	r2, #3
 80044c6:	400a      	ands	r2, r1
 80044c8:	00d2      	lsls	r2, r2, #3
 80044ca:	21ff      	movs	r1, #255	; 0xff
 80044cc:	4091      	lsls	r1, r2
 80044ce:	000a      	movs	r2, r1
 80044d0:	43d2      	mvns	r2, r2
 80044d2:	401a      	ands	r2, r3
 80044d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	019b      	lsls	r3, r3, #6
 80044da:	22ff      	movs	r2, #255	; 0xff
 80044dc:	401a      	ands	r2, r3
 80044de:	1dfb      	adds	r3, r7, #7
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	0018      	movs	r0, r3
 80044e4:	2303      	movs	r3, #3
 80044e6:	4003      	ands	r3, r0
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044ec:	481f      	ldr	r0, [pc, #124]	; (800456c <__NVIC_SetPriority+0xd4>)
 80044ee:	1dfb      	adds	r3, r7, #7
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	b25b      	sxtb	r3, r3
 80044f4:	089b      	lsrs	r3, r3, #2
 80044f6:	430a      	orrs	r2, r1
 80044f8:	33c0      	adds	r3, #192	; 0xc0
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80044fe:	e031      	b.n	8004564 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004500:	4a1b      	ldr	r2, [pc, #108]	; (8004570 <__NVIC_SetPriority+0xd8>)
 8004502:	1dfb      	adds	r3, r7, #7
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	0019      	movs	r1, r3
 8004508:	230f      	movs	r3, #15
 800450a:	400b      	ands	r3, r1
 800450c:	3b08      	subs	r3, #8
 800450e:	089b      	lsrs	r3, r3, #2
 8004510:	3306      	adds	r3, #6
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	18d3      	adds	r3, r2, r3
 8004516:	3304      	adds	r3, #4
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	1dfa      	adds	r2, r7, #7
 800451c:	7812      	ldrb	r2, [r2, #0]
 800451e:	0011      	movs	r1, r2
 8004520:	2203      	movs	r2, #3
 8004522:	400a      	ands	r2, r1
 8004524:	00d2      	lsls	r2, r2, #3
 8004526:	21ff      	movs	r1, #255	; 0xff
 8004528:	4091      	lsls	r1, r2
 800452a:	000a      	movs	r2, r1
 800452c:	43d2      	mvns	r2, r2
 800452e:	401a      	ands	r2, r3
 8004530:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	019b      	lsls	r3, r3, #6
 8004536:	22ff      	movs	r2, #255	; 0xff
 8004538:	401a      	ands	r2, r3
 800453a:	1dfb      	adds	r3, r7, #7
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	0018      	movs	r0, r3
 8004540:	2303      	movs	r3, #3
 8004542:	4003      	ands	r3, r0
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004548:	4809      	ldr	r0, [pc, #36]	; (8004570 <__NVIC_SetPriority+0xd8>)
 800454a:	1dfb      	adds	r3, r7, #7
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	001c      	movs	r4, r3
 8004550:	230f      	movs	r3, #15
 8004552:	4023      	ands	r3, r4
 8004554:	3b08      	subs	r3, #8
 8004556:	089b      	lsrs	r3, r3, #2
 8004558:	430a      	orrs	r2, r1
 800455a:	3306      	adds	r3, #6
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	18c3      	adds	r3, r0, r3
 8004560:	3304      	adds	r3, #4
 8004562:	601a      	str	r2, [r3, #0]
}
 8004564:	46c0      	nop			; (mov r8, r8)
 8004566:	46bd      	mov	sp, r7
 8004568:	b003      	add	sp, #12
 800456a:	bd90      	pop	{r4, r7, pc}
 800456c:	e000e100 	.word	0xe000e100
 8004570:	e000ed00 	.word	0xe000ed00

08004574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	1e5a      	subs	r2, r3, #1
 8004580:	2380      	movs	r3, #128	; 0x80
 8004582:	045b      	lsls	r3, r3, #17
 8004584:	429a      	cmp	r2, r3
 8004586:	d301      	bcc.n	800458c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004588:	2301      	movs	r3, #1
 800458a:	e010      	b.n	80045ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800458c:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <SysTick_Config+0x44>)
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	3a01      	subs	r2, #1
 8004592:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004594:	2301      	movs	r3, #1
 8004596:	425b      	negs	r3, r3
 8004598:	2103      	movs	r1, #3
 800459a:	0018      	movs	r0, r3
 800459c:	f7ff ff7c 	bl	8004498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045a0:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <SysTick_Config+0x44>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045a6:	4b04      	ldr	r3, [pc, #16]	; (80045b8 <SysTick_Config+0x44>)
 80045a8:	2207      	movs	r2, #7
 80045aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	0018      	movs	r0, r3
 80045b0:	46bd      	mov	sp, r7
 80045b2:	b002      	add	sp, #8
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	46c0      	nop			; (mov r8, r8)
 80045b8:	e000e010 	.word	0xe000e010

080045bc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	607a      	str	r2, [r7, #4]
 80045c6:	210f      	movs	r1, #15
 80045c8:	187b      	adds	r3, r7, r1
 80045ca:	1c02      	adds	r2, r0, #0
 80045cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	187b      	adds	r3, r7, r1
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	b25b      	sxtb	r3, r3
 80045d6:	0011      	movs	r1, r2
 80045d8:	0018      	movs	r0, r3
 80045da:	f7ff ff5d 	bl	8004498 <__NVIC_SetPriority>
}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	46bd      	mov	sp, r7
 80045e2:	b004      	add	sp, #16
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b082      	sub	sp, #8
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	0002      	movs	r2, r0
 80045ee:	1dfb      	adds	r3, r7, #7
 80045f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045f2:	1dfb      	adds	r3, r7, #7
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	b25b      	sxtb	r3, r3
 80045f8:	0018      	movs	r0, r3
 80045fa:	f7ff ff33 	bl	8004464 <__NVIC_EnableIRQ>
}
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	46bd      	mov	sp, r7
 8004602:	b002      	add	sp, #8
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b082      	sub	sp, #8
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	0018      	movs	r0, r3
 8004612:	f7ff ffaf 	bl	8004574 <SysTick_Config>
 8004616:	0003      	movs	r3, r0
}
 8004618:	0018      	movs	r0, r3
 800461a:	46bd      	mov	sp, r7
 800461c:	b002      	add	sp, #8
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e050      	b.n	80046d4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2225      	movs	r2, #37	; 0x25
 8004636:	5c9b      	ldrb	r3, [r3, r2]
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d008      	beq.n	8004650 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2204      	movs	r2, #4
 8004642:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2224      	movs	r2, #36	; 0x24
 8004648:	2100      	movs	r1, #0
 800464a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e041      	b.n	80046d4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	210e      	movs	r1, #14
 800465c:	438a      	bics	r2, r1
 800465e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466a:	491c      	ldr	r1, [pc, #112]	; (80046dc <HAL_DMA_Abort+0xbc>)
 800466c:	400a      	ands	r2, r1
 800466e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2101      	movs	r1, #1
 800467c:	438a      	bics	r2, r1
 800467e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8004680:	4b17      	ldr	r3, [pc, #92]	; (80046e0 <HAL_DMA_Abort+0xc0>)
 8004682:	6859      	ldr	r1, [r3, #4]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	221c      	movs	r2, #28
 800468a:	4013      	ands	r3, r2
 800468c:	2201      	movs	r2, #1
 800468e:	409a      	lsls	r2, r3
 8004690:	4b13      	ldr	r3, [pc, #76]	; (80046e0 <HAL_DMA_Abort+0xc0>)
 8004692:	430a      	orrs	r2, r1
 8004694:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800469e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00c      	beq.n	80046c2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b2:	490a      	ldr	r1, [pc, #40]	; (80046dc <HAL_DMA_Abort+0xbc>)
 80046b4:	400a      	ands	r2, r1
 80046b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80046c0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2225      	movs	r2, #37	; 0x25
 80046c6:	2101      	movs	r1, #1
 80046c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2224      	movs	r2, #36	; 0x24
 80046ce:	2100      	movs	r1, #0
 80046d0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	0018      	movs	r0, r3
 80046d6:	46bd      	mov	sp, r7
 80046d8:	b002      	add	sp, #8
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	fffffeff 	.word	0xfffffeff
 80046e0:	40020000 	.word	0x40020000

080046e4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046ec:	210f      	movs	r1, #15
 80046ee:	187b      	adds	r3, r7, r1
 80046f0:	2200      	movs	r2, #0
 80046f2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2225      	movs	r2, #37	; 0x25
 80046f8:	5c9b      	ldrb	r3, [r3, r2]
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d006      	beq.n	800470e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2204      	movs	r2, #4
 8004704:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004706:	187b      	adds	r3, r7, r1
 8004708:	2201      	movs	r2, #1
 800470a:	701a      	strb	r2, [r3, #0]
 800470c:	e049      	b.n	80047a2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	210e      	movs	r1, #14
 800471a:	438a      	bics	r2, r1
 800471c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2101      	movs	r1, #1
 800472a:	438a      	bics	r2, r1
 800472c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004738:	491d      	ldr	r1, [pc, #116]	; (80047b0 <HAL_DMA_Abort_IT+0xcc>)
 800473a:	400a      	ands	r2, r1
 800473c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800473e:	4b1d      	ldr	r3, [pc, #116]	; (80047b4 <HAL_DMA_Abort_IT+0xd0>)
 8004740:	6859      	ldr	r1, [r3, #4]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	221c      	movs	r2, #28
 8004748:	4013      	ands	r3, r2
 800474a:	2201      	movs	r2, #1
 800474c:	409a      	lsls	r2, r3
 800474e:	4b19      	ldr	r3, [pc, #100]	; (80047b4 <HAL_DMA_Abort_IT+0xd0>)
 8004750:	430a      	orrs	r2, r1
 8004752:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800475c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00c      	beq.n	8004780 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004770:	490f      	ldr	r1, [pc, #60]	; (80047b0 <HAL_DMA_Abort_IT+0xcc>)
 8004772:	400a      	ands	r2, r1
 8004774:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800477e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2225      	movs	r2, #37	; 0x25
 8004784:	2101      	movs	r1, #1
 8004786:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2224      	movs	r2, #36	; 0x24
 800478c:	2100      	movs	r1, #0
 800478e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004794:	2b00      	cmp	r3, #0
 8004796:	d004      	beq.n	80047a2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	0010      	movs	r0, r2
 80047a0:	4798      	blx	r3
    }
  }
  return status;
 80047a2:	230f      	movs	r3, #15
 80047a4:	18fb      	adds	r3, r7, r3
 80047a6:	781b      	ldrb	r3, [r3, #0]
}
 80047a8:	0018      	movs	r0, r3
 80047aa:	46bd      	mov	sp, r7
 80047ac:	b004      	add	sp, #16
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	fffffeff 	.word	0xfffffeff
 80047b4:	40020000 	.word	0x40020000

080047b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047c2:	2300      	movs	r3, #0
 80047c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047c6:	e147      	b.n	8004a58 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2101      	movs	r1, #1
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	4091      	lsls	r1, r2
 80047d2:	000a      	movs	r2, r1
 80047d4:	4013      	ands	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d100      	bne.n	80047e0 <HAL_GPIO_Init+0x28>
 80047de:	e138      	b.n	8004a52 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	2203      	movs	r2, #3
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d005      	beq.n	80047f8 <HAL_GPIO_Init+0x40>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2203      	movs	r2, #3
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d130      	bne.n	800485a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	2203      	movs	r2, #3
 8004804:	409a      	lsls	r2, r3
 8004806:	0013      	movs	r3, r2
 8004808:	43da      	mvns	r2, r3
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	4013      	ands	r3, r2
 800480e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	68da      	ldr	r2, [r3, #12]
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	409a      	lsls	r2, r3
 800481a:	0013      	movs	r3, r2
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	4313      	orrs	r3, r2
 8004820:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800482e:	2201      	movs	r2, #1
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	409a      	lsls	r2, r3
 8004834:	0013      	movs	r3, r2
 8004836:	43da      	mvns	r2, r3
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	4013      	ands	r3, r2
 800483c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	091b      	lsrs	r3, r3, #4
 8004844:	2201      	movs	r2, #1
 8004846:	401a      	ands	r2, r3
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	409a      	lsls	r2, r3
 800484c:	0013      	movs	r3, r2
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4313      	orrs	r3, r2
 8004852:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2203      	movs	r2, #3
 8004860:	4013      	ands	r3, r2
 8004862:	2b03      	cmp	r3, #3
 8004864:	d017      	beq.n	8004896 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	2203      	movs	r2, #3
 8004872:	409a      	lsls	r2, r3
 8004874:	0013      	movs	r3, r2
 8004876:	43da      	mvns	r2, r3
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	4013      	ands	r3, r2
 800487c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	689a      	ldr	r2, [r3, #8]
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	409a      	lsls	r2, r3
 8004888:	0013      	movs	r3, r2
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	4313      	orrs	r3, r2
 800488e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2203      	movs	r2, #3
 800489c:	4013      	ands	r3, r2
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d123      	bne.n	80048ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	08da      	lsrs	r2, r3, #3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3208      	adds	r2, #8
 80048aa:	0092      	lsls	r2, r2, #2
 80048ac:	58d3      	ldr	r3, [r2, r3]
 80048ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	2207      	movs	r2, #7
 80048b4:	4013      	ands	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	220f      	movs	r2, #15
 80048ba:	409a      	lsls	r2, r3
 80048bc:	0013      	movs	r3, r2
 80048be:	43da      	mvns	r2, r3
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	4013      	ands	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	691a      	ldr	r2, [r3, #16]
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2107      	movs	r1, #7
 80048ce:	400b      	ands	r3, r1
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	409a      	lsls	r2, r3
 80048d4:	0013      	movs	r3, r2
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	08da      	lsrs	r2, r3, #3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3208      	adds	r2, #8
 80048e4:	0092      	lsls	r2, r2, #2
 80048e6:	6939      	ldr	r1, [r7, #16]
 80048e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	2203      	movs	r2, #3
 80048f6:	409a      	lsls	r2, r3
 80048f8:	0013      	movs	r3, r2
 80048fa:	43da      	mvns	r2, r3
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	4013      	ands	r3, r2
 8004900:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2203      	movs	r2, #3
 8004908:	401a      	ands	r2, r3
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	409a      	lsls	r2, r3
 8004910:	0013      	movs	r3, r2
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	4313      	orrs	r3, r2
 8004916:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	23c0      	movs	r3, #192	; 0xc0
 8004924:	029b      	lsls	r3, r3, #10
 8004926:	4013      	ands	r3, r2
 8004928:	d100      	bne.n	800492c <HAL_GPIO_Init+0x174>
 800492a:	e092      	b.n	8004a52 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800492c:	4a50      	ldr	r2, [pc, #320]	; (8004a70 <HAL_GPIO_Init+0x2b8>)
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	089b      	lsrs	r3, r3, #2
 8004932:	3318      	adds	r3, #24
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	589b      	ldr	r3, [r3, r2]
 8004938:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2203      	movs	r2, #3
 800493e:	4013      	ands	r3, r2
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	220f      	movs	r2, #15
 8004944:	409a      	lsls	r2, r3
 8004946:	0013      	movs	r3, r2
 8004948:	43da      	mvns	r2, r3
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	4013      	ands	r3, r2
 800494e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	23a0      	movs	r3, #160	; 0xa0
 8004954:	05db      	lsls	r3, r3, #23
 8004956:	429a      	cmp	r2, r3
 8004958:	d013      	beq.n	8004982 <HAL_GPIO_Init+0x1ca>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a45      	ldr	r2, [pc, #276]	; (8004a74 <HAL_GPIO_Init+0x2bc>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d00d      	beq.n	800497e <HAL_GPIO_Init+0x1c6>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a44      	ldr	r2, [pc, #272]	; (8004a78 <HAL_GPIO_Init+0x2c0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d007      	beq.n	800497a <HAL_GPIO_Init+0x1c2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a43      	ldr	r2, [pc, #268]	; (8004a7c <HAL_GPIO_Init+0x2c4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d101      	bne.n	8004976 <HAL_GPIO_Init+0x1be>
 8004972:	2303      	movs	r3, #3
 8004974:	e006      	b.n	8004984 <HAL_GPIO_Init+0x1cc>
 8004976:	2305      	movs	r3, #5
 8004978:	e004      	b.n	8004984 <HAL_GPIO_Init+0x1cc>
 800497a:	2302      	movs	r3, #2
 800497c:	e002      	b.n	8004984 <HAL_GPIO_Init+0x1cc>
 800497e:	2301      	movs	r3, #1
 8004980:	e000      	b.n	8004984 <HAL_GPIO_Init+0x1cc>
 8004982:	2300      	movs	r3, #0
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	2103      	movs	r1, #3
 8004988:	400a      	ands	r2, r1
 800498a:	00d2      	lsls	r2, r2, #3
 800498c:	4093      	lsls	r3, r2
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	4313      	orrs	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004994:	4936      	ldr	r1, [pc, #216]	; (8004a70 <HAL_GPIO_Init+0x2b8>)
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	089b      	lsrs	r3, r3, #2
 800499a:	3318      	adds	r3, #24
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80049a2:	4a33      	ldr	r2, [pc, #204]	; (8004a70 <HAL_GPIO_Init+0x2b8>)
 80049a4:	2380      	movs	r3, #128	; 0x80
 80049a6:	58d3      	ldr	r3, [r2, r3]
 80049a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	43da      	mvns	r2, r3
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	4013      	ands	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	2380      	movs	r3, #128	; 0x80
 80049ba:	025b      	lsls	r3, r3, #9
 80049bc:	4013      	ands	r3, r2
 80049be:	d003      	beq.n	80049c8 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80049c8:	4929      	ldr	r1, [pc, #164]	; (8004a70 <HAL_GPIO_Init+0x2b8>)
 80049ca:	2280      	movs	r2, #128	; 0x80
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80049d0:	4a27      	ldr	r2, [pc, #156]	; (8004a70 <HAL_GPIO_Init+0x2b8>)
 80049d2:	2384      	movs	r3, #132	; 0x84
 80049d4:	58d3      	ldr	r3, [r2, r3]
 80049d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	43da      	mvns	r2, r3
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	4013      	ands	r3, r2
 80049e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	2380      	movs	r3, #128	; 0x80
 80049e8:	029b      	lsls	r3, r3, #10
 80049ea:	4013      	ands	r3, r2
 80049ec:	d003      	beq.n	80049f6 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80049f6:	491e      	ldr	r1, [pc, #120]	; (8004a70 <HAL_GPIO_Init+0x2b8>)
 80049f8:	2284      	movs	r2, #132	; 0x84
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049fe:	4b1c      	ldr	r3, [pc, #112]	; (8004a70 <HAL_GPIO_Init+0x2b8>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	43da      	mvns	r2, r3
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	2380      	movs	r3, #128	; 0x80
 8004a14:	035b      	lsls	r3, r3, #13
 8004a16:	4013      	ands	r3, r2
 8004a18:	d003      	beq.n	8004a22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a22:	4b13      	ldr	r3, [pc, #76]	; (8004a70 <HAL_GPIO_Init+0x2b8>)
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004a28:	4b11      	ldr	r3, [pc, #68]	; (8004a70 <HAL_GPIO_Init+0x2b8>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	43da      	mvns	r2, r3
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	4013      	ands	r3, r2
 8004a36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	2380      	movs	r3, #128	; 0x80
 8004a3e:	039b      	lsls	r3, r3, #14
 8004a40:	4013      	ands	r3, r2
 8004a42:	d003      	beq.n	8004a4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a4c:	4b08      	ldr	r3, [pc, #32]	; (8004a70 <HAL_GPIO_Init+0x2b8>)
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	3301      	adds	r3, #1
 8004a56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	40da      	lsrs	r2, r3
 8004a60:	1e13      	subs	r3, r2, #0
 8004a62:	d000      	beq.n	8004a66 <HAL_GPIO_Init+0x2ae>
 8004a64:	e6b0      	b.n	80047c8 <HAL_GPIO_Init+0x10>
  }
}
 8004a66:	46c0      	nop			; (mov r8, r8)
 8004a68:	46c0      	nop			; (mov r8, r8)
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	b006      	add	sp, #24
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40021800 	.word	0x40021800
 8004a74:	50000400 	.word	0x50000400
 8004a78:	50000800 	.word	0x50000800
 8004a7c:	50000c00 	.word	0x50000c00

08004a80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	000a      	movs	r2, r1
 8004a8a:	1cbb      	adds	r3, r7, #2
 8004a8c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	1cba      	adds	r2, r7, #2
 8004a94:	8812      	ldrh	r2, [r2, #0]
 8004a96:	4013      	ands	r3, r2
 8004a98:	d004      	beq.n	8004aa4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004a9a:	230f      	movs	r3, #15
 8004a9c:	18fb      	adds	r3, r7, r3
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	701a      	strb	r2, [r3, #0]
 8004aa2:	e003      	b.n	8004aac <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004aa4:	230f      	movs	r3, #15
 8004aa6:	18fb      	adds	r3, r7, r3
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004aac:	230f      	movs	r3, #15
 8004aae:	18fb      	adds	r3, r7, r3
 8004ab0:	781b      	ldrb	r3, [r3, #0]
}
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	b004      	add	sp, #16
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b082      	sub	sp, #8
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	0008      	movs	r0, r1
 8004ac4:	0011      	movs	r1, r2
 8004ac6:	1cbb      	adds	r3, r7, #2
 8004ac8:	1c02      	adds	r2, r0, #0
 8004aca:	801a      	strh	r2, [r3, #0]
 8004acc:	1c7b      	adds	r3, r7, #1
 8004ace:	1c0a      	adds	r2, r1, #0
 8004ad0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ad2:	1c7b      	adds	r3, r7, #1
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d004      	beq.n	8004ae4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ada:	1cbb      	adds	r3, r7, #2
 8004adc:	881a      	ldrh	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ae2:	e003      	b.n	8004aec <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ae4:	1cbb      	adds	r3, r7, #2
 8004ae6:	881a      	ldrh	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004aec:	46c0      	nop			; (mov r8, r8)
 8004aee:	46bd      	mov	sp, r7
 8004af0:	b002      	add	sp, #8
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	000a      	movs	r2, r1
 8004afe:	1cbb      	adds	r3, r7, #2
 8004b00:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b08:	1cbb      	adds	r3, r7, #2
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	041a      	lsls	r2, r3, #16
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	43db      	mvns	r3, r3
 8004b16:	1cb9      	adds	r1, r7, #2
 8004b18:	8809      	ldrh	r1, [r1, #0]
 8004b1a:	400b      	ands	r3, r1
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	619a      	str	r2, [r3, #24]
}
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	46bd      	mov	sp, r7
 8004b26:	b004      	add	sp, #16
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	0002      	movs	r2, r0
 8004b34:	1dbb      	adds	r3, r7, #6
 8004b36:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004b38:	4b10      	ldr	r3, [pc, #64]	; (8004b7c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	1dba      	adds	r2, r7, #6
 8004b3e:	8812      	ldrh	r2, [r2, #0]
 8004b40:	4013      	ands	r3, r2
 8004b42:	d008      	beq.n	8004b56 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004b44:	4b0d      	ldr	r3, [pc, #52]	; (8004b7c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004b46:	1dba      	adds	r2, r7, #6
 8004b48:	8812      	ldrh	r2, [r2, #0]
 8004b4a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004b4c:	1dbb      	adds	r3, r7, #6
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	0018      	movs	r0, r3
 8004b52:	f7fc fef9 	bl	8001948 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004b56:	4b09      	ldr	r3, [pc, #36]	; (8004b7c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	1dba      	adds	r2, r7, #6
 8004b5c:	8812      	ldrh	r2, [r2, #0]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	d008      	beq.n	8004b74 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004b62:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004b64:	1dba      	adds	r2, r7, #6
 8004b66:	8812      	ldrh	r2, [r2, #0]
 8004b68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004b6a:	1dbb      	adds	r3, r7, #6
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f000 f806 	bl	8004b80 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004b74:	46c0      	nop			; (mov r8, r8)
 8004b76:	46bd      	mov	sp, r7
 8004b78:	b002      	add	sp, #8
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40021800 	.word	0x40021800

08004b80 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	0002      	movs	r2, r0
 8004b88:	1dbb      	adds	r3, r7, #6
 8004b8a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004b8c:	46c0      	nop			; (mov r8, r8)
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b002      	add	sp, #8
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004b9c:	4b19      	ldr	r3, [pc, #100]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a19      	ldr	r2, [pc, #100]	; (8004c08 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	0019      	movs	r1, r3
 8004ba6:	4b17      	ldr	r3, [pc, #92]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	2380      	movs	r3, #128	; 0x80
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d11f      	bne.n	8004bf8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004bb8:	4b14      	ldr	r3, [pc, #80]	; (8004c0c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	0013      	movs	r3, r2
 8004bbe:	005b      	lsls	r3, r3, #1
 8004bc0:	189b      	adds	r3, r3, r2
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	4912      	ldr	r1, [pc, #72]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	f7fb fab0 	bl	800012c <__udivsi3>
 8004bcc:	0003      	movs	r3, r0
 8004bce:	3301      	adds	r3, #1
 8004bd0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bd2:	e008      	b.n	8004be6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	e001      	b.n	8004be6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e009      	b.n	8004bfa <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004be6:	4b07      	ldr	r3, [pc, #28]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004be8:	695a      	ldr	r2, [r3, #20]
 8004bea:	2380      	movs	r3, #128	; 0x80
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	401a      	ands	r2, r3
 8004bf0:	2380      	movs	r3, #128	; 0x80
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d0ed      	beq.n	8004bd4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	b004      	add	sp, #16
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	46c0      	nop			; (mov r8, r8)
 8004c04:	40007000 	.word	0x40007000
 8004c08:	fffff9ff 	.word	0xfffff9ff
 8004c0c:	20000044 	.word	0x20000044
 8004c10:	000f4240 	.word	0x000f4240

08004c14 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004c18:	4b03      	ldr	r3, [pc, #12]	; (8004c28 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	23e0      	movs	r3, #224	; 0xe0
 8004c1e:	01db      	lsls	r3, r3, #7
 8004c20:	4013      	ands	r3, r2
}
 8004c22:	0018      	movs	r0, r3
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40021000 	.word	0x40021000

08004c2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e304      	b.n	8005248 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2201      	movs	r2, #1
 8004c44:	4013      	ands	r3, r2
 8004c46:	d100      	bne.n	8004c4a <HAL_RCC_OscConfig+0x1e>
 8004c48:	e07c      	b.n	8004d44 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c4a:	4bc3      	ldr	r3, [pc, #780]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	2238      	movs	r2, #56	; 0x38
 8004c50:	4013      	ands	r3, r2
 8004c52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c54:	4bc0      	ldr	r3, [pc, #768]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	2203      	movs	r2, #3
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	2b10      	cmp	r3, #16
 8004c62:	d102      	bne.n	8004c6a <HAL_RCC_OscConfig+0x3e>
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2b03      	cmp	r3, #3
 8004c68:	d002      	beq.n	8004c70 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d10b      	bne.n	8004c88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c70:	4bb9      	ldr	r3, [pc, #740]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	2380      	movs	r3, #128	; 0x80
 8004c76:	029b      	lsls	r3, r3, #10
 8004c78:	4013      	ands	r3, r2
 8004c7a:	d062      	beq.n	8004d42 <HAL_RCC_OscConfig+0x116>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d15e      	bne.n	8004d42 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e2df      	b.n	8005248 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	2380      	movs	r3, #128	; 0x80
 8004c8e:	025b      	lsls	r3, r3, #9
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d107      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x78>
 8004c94:	4bb0      	ldr	r3, [pc, #704]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	4baf      	ldr	r3, [pc, #700]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004c9a:	2180      	movs	r1, #128	; 0x80
 8004c9c:	0249      	lsls	r1, r1, #9
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	e020      	b.n	8004ce6 <HAL_RCC_OscConfig+0xba>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	23a0      	movs	r3, #160	; 0xa0
 8004caa:	02db      	lsls	r3, r3, #11
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d10e      	bne.n	8004cce <HAL_RCC_OscConfig+0xa2>
 8004cb0:	4ba9      	ldr	r3, [pc, #676]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	4ba8      	ldr	r3, [pc, #672]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004cb6:	2180      	movs	r1, #128	; 0x80
 8004cb8:	02c9      	lsls	r1, r1, #11
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	4ba6      	ldr	r3, [pc, #664]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	4ba5      	ldr	r3, [pc, #660]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004cc4:	2180      	movs	r1, #128	; 0x80
 8004cc6:	0249      	lsls	r1, r1, #9
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	e00b      	b.n	8004ce6 <HAL_RCC_OscConfig+0xba>
 8004cce:	4ba2      	ldr	r3, [pc, #648]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	4ba1      	ldr	r3, [pc, #644]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004cd4:	49a1      	ldr	r1, [pc, #644]	; (8004f5c <HAL_RCC_OscConfig+0x330>)
 8004cd6:	400a      	ands	r2, r1
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	4b9f      	ldr	r3, [pc, #636]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	4b9e      	ldr	r3, [pc, #632]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004ce0:	499f      	ldr	r1, [pc, #636]	; (8004f60 <HAL_RCC_OscConfig+0x334>)
 8004ce2:	400a      	ands	r2, r1
 8004ce4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d014      	beq.n	8004d18 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cee:	f7fe fed7 	bl	8003aa0 <HAL_GetTick>
 8004cf2:	0003      	movs	r3, r0
 8004cf4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cf8:	f7fe fed2 	bl	8003aa0 <HAL_GetTick>
 8004cfc:	0002      	movs	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b64      	cmp	r3, #100	; 0x64
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e29e      	b.n	8005248 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d0a:	4b93      	ldr	r3, [pc, #588]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	2380      	movs	r3, #128	; 0x80
 8004d10:	029b      	lsls	r3, r3, #10
 8004d12:	4013      	ands	r3, r2
 8004d14:	d0f0      	beq.n	8004cf8 <HAL_RCC_OscConfig+0xcc>
 8004d16:	e015      	b.n	8004d44 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fe fec2 	bl	8003aa0 <HAL_GetTick>
 8004d1c:	0003      	movs	r3, r0
 8004d1e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d22:	f7fe febd 	bl	8003aa0 <HAL_GetTick>
 8004d26:	0002      	movs	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b64      	cmp	r3, #100	; 0x64
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e289      	b.n	8005248 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d34:	4b88      	ldr	r3, [pc, #544]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	2380      	movs	r3, #128	; 0x80
 8004d3a:	029b      	lsls	r3, r3, #10
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	d1f0      	bne.n	8004d22 <HAL_RCC_OscConfig+0xf6>
 8004d40:	e000      	b.n	8004d44 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d42:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2202      	movs	r2, #2
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	d100      	bne.n	8004d50 <HAL_RCC_OscConfig+0x124>
 8004d4e:	e099      	b.n	8004e84 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d50:	4b81      	ldr	r3, [pc, #516]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	2238      	movs	r2, #56	; 0x38
 8004d56:	4013      	ands	r3, r2
 8004d58:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d5a:	4b7f      	ldr	r3, [pc, #508]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	2203      	movs	r2, #3
 8004d60:	4013      	ands	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	2b10      	cmp	r3, #16
 8004d68:	d102      	bne.n	8004d70 <HAL_RCC_OscConfig+0x144>
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d002      	beq.n	8004d76 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d135      	bne.n	8004de2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d76:	4b78      	ldr	r3, [pc, #480]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	2380      	movs	r3, #128	; 0x80
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	4013      	ands	r3, r2
 8004d80:	d005      	beq.n	8004d8e <HAL_RCC_OscConfig+0x162>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e25c      	b.n	8005248 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d8e:	4b72      	ldr	r3, [pc, #456]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	4a74      	ldr	r2, [pc, #464]	; (8004f64 <HAL_RCC_OscConfig+0x338>)
 8004d94:	4013      	ands	r3, r2
 8004d96:	0019      	movs	r1, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	021a      	lsls	r2, r3, #8
 8004d9e:	4b6e      	ldr	r3, [pc, #440]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004da0:	430a      	orrs	r2, r1
 8004da2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d112      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004daa:	4b6b      	ldr	r3, [pc, #428]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a6e      	ldr	r2, [pc, #440]	; (8004f68 <HAL_RCC_OscConfig+0x33c>)
 8004db0:	4013      	ands	r3, r2
 8004db2:	0019      	movs	r1, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	4b67      	ldr	r3, [pc, #412]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004dbe:	4b66      	ldr	r3, [pc, #408]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	0adb      	lsrs	r3, r3, #11
 8004dc4:	2207      	movs	r2, #7
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	4a68      	ldr	r2, [pc, #416]	; (8004f6c <HAL_RCC_OscConfig+0x340>)
 8004dca:	40da      	lsrs	r2, r3
 8004dcc:	4b68      	ldr	r3, [pc, #416]	; (8004f70 <HAL_RCC_OscConfig+0x344>)
 8004dce:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004dd0:	4b68      	ldr	r3, [pc, #416]	; (8004f74 <HAL_RCC_OscConfig+0x348>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	f7fe fe07 	bl	80039e8 <HAL_InitTick>
 8004dda:	1e03      	subs	r3, r0, #0
 8004ddc:	d051      	beq.n	8004e82 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e232      	b.n	8005248 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d030      	beq.n	8004e4c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004dea:	4b5b      	ldr	r3, [pc, #364]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a5e      	ldr	r2, [pc, #376]	; (8004f68 <HAL_RCC_OscConfig+0x33c>)
 8004df0:	4013      	ands	r3, r2
 8004df2:	0019      	movs	r1, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	4b57      	ldr	r3, [pc, #348]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004dfe:	4b56      	ldr	r3, [pc, #344]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	4b55      	ldr	r3, [pc, #340]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004e04:	2180      	movs	r1, #128	; 0x80
 8004e06:	0049      	lsls	r1, r1, #1
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0c:	f7fe fe48 	bl	8003aa0 <HAL_GetTick>
 8004e10:	0003      	movs	r3, r0
 8004e12:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e14:	e008      	b.n	8004e28 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e16:	f7fe fe43 	bl	8003aa0 <HAL_GetTick>
 8004e1a:	0002      	movs	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e20f      	b.n	8005248 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e28:	4b4b      	ldr	r3, [pc, #300]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	2380      	movs	r3, #128	; 0x80
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	4013      	ands	r3, r2
 8004e32:	d0f0      	beq.n	8004e16 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e34:	4b48      	ldr	r3, [pc, #288]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	4a4a      	ldr	r2, [pc, #296]	; (8004f64 <HAL_RCC_OscConfig+0x338>)
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	0019      	movs	r1, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	021a      	lsls	r2, r3, #8
 8004e44:	4b44      	ldr	r3, [pc, #272]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004e46:	430a      	orrs	r2, r1
 8004e48:	605a      	str	r2, [r3, #4]
 8004e4a:	e01b      	b.n	8004e84 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004e4c:	4b42      	ldr	r3, [pc, #264]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	4b41      	ldr	r3, [pc, #260]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004e52:	4949      	ldr	r1, [pc, #292]	; (8004f78 <HAL_RCC_OscConfig+0x34c>)
 8004e54:	400a      	ands	r2, r1
 8004e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e58:	f7fe fe22 	bl	8003aa0 <HAL_GetTick>
 8004e5c:	0003      	movs	r3, r0
 8004e5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e62:	f7fe fe1d 	bl	8003aa0 <HAL_GetTick>
 8004e66:	0002      	movs	r2, r0
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e1e9      	b.n	8005248 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e74:	4b38      	ldr	r3, [pc, #224]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	2380      	movs	r3, #128	; 0x80
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	d1f0      	bne.n	8004e62 <HAL_RCC_OscConfig+0x236>
 8004e80:	e000      	b.n	8004e84 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e82:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2208      	movs	r2, #8
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	d047      	beq.n	8004f1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004e8e:	4b32      	ldr	r3, [pc, #200]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	2238      	movs	r2, #56	; 0x38
 8004e94:	4013      	ands	r3, r2
 8004e96:	2b18      	cmp	r3, #24
 8004e98:	d10a      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004e9a:	4b2f      	ldr	r3, [pc, #188]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	d03c      	beq.n	8004f1e <HAL_RCC_OscConfig+0x2f2>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d138      	bne.n	8004f1e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e1cb      	b.n	8005248 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d019      	beq.n	8004eec <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004eb8:	4b27      	ldr	r3, [pc, #156]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004eba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ebc:	4b26      	ldr	r3, [pc, #152]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec4:	f7fe fdec 	bl	8003aa0 <HAL_GetTick>
 8004ec8:	0003      	movs	r3, r0
 8004eca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ece:	f7fe fde7 	bl	8003aa0 <HAL_GetTick>
 8004ed2:	0002      	movs	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e1b3      	b.n	8005248 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ee0:	4b1d      	ldr	r3, [pc, #116]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	d0f1      	beq.n	8004ece <HAL_RCC_OscConfig+0x2a2>
 8004eea:	e018      	b.n	8004f1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004eec:	4b1a      	ldr	r3, [pc, #104]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004eee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ef0:	4b19      	ldr	r3, [pc, #100]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	438a      	bics	r2, r1
 8004ef6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef8:	f7fe fdd2 	bl	8003aa0 <HAL_GetTick>
 8004efc:	0003      	movs	r3, r0
 8004efe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f00:	e008      	b.n	8004f14 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f02:	f7fe fdcd 	bl	8003aa0 <HAL_GetTick>
 8004f06:	0002      	movs	r2, r0
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e199      	b.n	8005248 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f14:	4b10      	ldr	r3, [pc, #64]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f18:	2202      	movs	r2, #2
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	d1f1      	bne.n	8004f02 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2204      	movs	r2, #4
 8004f24:	4013      	ands	r3, r2
 8004f26:	d100      	bne.n	8004f2a <HAL_RCC_OscConfig+0x2fe>
 8004f28:	e0c6      	b.n	80050b8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f2a:	231f      	movs	r3, #31
 8004f2c:	18fb      	adds	r3, r7, r3
 8004f2e:	2200      	movs	r2, #0
 8004f30:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004f32:	4b09      	ldr	r3, [pc, #36]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	2238      	movs	r2, #56	; 0x38
 8004f38:	4013      	ands	r3, r2
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	d11e      	bne.n	8004f7c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004f3e:	4b06      	ldr	r3, [pc, #24]	; (8004f58 <HAL_RCC_OscConfig+0x32c>)
 8004f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f42:	2202      	movs	r2, #2
 8004f44:	4013      	ands	r3, r2
 8004f46:	d100      	bne.n	8004f4a <HAL_RCC_OscConfig+0x31e>
 8004f48:	e0b6      	b.n	80050b8 <HAL_RCC_OscConfig+0x48c>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d000      	beq.n	8004f54 <HAL_RCC_OscConfig+0x328>
 8004f52:	e0b1      	b.n	80050b8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e177      	b.n	8005248 <HAL_RCC_OscConfig+0x61c>
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	fffeffff 	.word	0xfffeffff
 8004f60:	fffbffff 	.word	0xfffbffff
 8004f64:	ffff80ff 	.word	0xffff80ff
 8004f68:	ffffc7ff 	.word	0xffffc7ff
 8004f6c:	00f42400 	.word	0x00f42400
 8004f70:	20000044 	.word	0x20000044
 8004f74:	20000048 	.word	0x20000048
 8004f78:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f7c:	4bb4      	ldr	r3, [pc, #720]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 8004f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f80:	2380      	movs	r3, #128	; 0x80
 8004f82:	055b      	lsls	r3, r3, #21
 8004f84:	4013      	ands	r3, r2
 8004f86:	d101      	bne.n	8004f8c <HAL_RCC_OscConfig+0x360>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <HAL_RCC_OscConfig+0x362>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d011      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004f92:	4baf      	ldr	r3, [pc, #700]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 8004f94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f96:	4bae      	ldr	r3, [pc, #696]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 8004f98:	2180      	movs	r1, #128	; 0x80
 8004f9a:	0549      	lsls	r1, r1, #21
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004fa0:	4bab      	ldr	r3, [pc, #684]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 8004fa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fa4:	2380      	movs	r3, #128	; 0x80
 8004fa6:	055b      	lsls	r3, r3, #21
 8004fa8:	4013      	ands	r3, r2
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004fae:	231f      	movs	r3, #31
 8004fb0:	18fb      	adds	r3, r7, r3
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fb6:	4ba7      	ldr	r3, [pc, #668]	; (8005254 <HAL_RCC_OscConfig+0x628>)
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	2380      	movs	r3, #128	; 0x80
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	d11a      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fc2:	4ba4      	ldr	r3, [pc, #656]	; (8005254 <HAL_RCC_OscConfig+0x628>)
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	4ba3      	ldr	r3, [pc, #652]	; (8005254 <HAL_RCC_OscConfig+0x628>)
 8004fc8:	2180      	movs	r1, #128	; 0x80
 8004fca:	0049      	lsls	r1, r1, #1
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004fd0:	f7fe fd66 	bl	8003aa0 <HAL_GetTick>
 8004fd4:	0003      	movs	r3, r0
 8004fd6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fd8:	e008      	b.n	8004fec <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fda:	f7fe fd61 	bl	8003aa0 <HAL_GetTick>
 8004fde:	0002      	movs	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e12d      	b.n	8005248 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fec:	4b99      	ldr	r3, [pc, #612]	; (8005254 <HAL_RCC_OscConfig+0x628>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	2380      	movs	r3, #128	; 0x80
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	d0f0      	beq.n	8004fda <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d106      	bne.n	800500e <HAL_RCC_OscConfig+0x3e2>
 8005000:	4b93      	ldr	r3, [pc, #588]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 8005002:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005004:	4b92      	ldr	r3, [pc, #584]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 8005006:	2101      	movs	r1, #1
 8005008:	430a      	orrs	r2, r1
 800500a:	65da      	str	r2, [r3, #92]	; 0x5c
 800500c:	e01c      	b.n	8005048 <HAL_RCC_OscConfig+0x41c>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	2b05      	cmp	r3, #5
 8005014:	d10c      	bne.n	8005030 <HAL_RCC_OscConfig+0x404>
 8005016:	4b8e      	ldr	r3, [pc, #568]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 8005018:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800501a:	4b8d      	ldr	r3, [pc, #564]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 800501c:	2104      	movs	r1, #4
 800501e:	430a      	orrs	r2, r1
 8005020:	65da      	str	r2, [r3, #92]	; 0x5c
 8005022:	4b8b      	ldr	r3, [pc, #556]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 8005024:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005026:	4b8a      	ldr	r3, [pc, #552]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 8005028:	2101      	movs	r1, #1
 800502a:	430a      	orrs	r2, r1
 800502c:	65da      	str	r2, [r3, #92]	; 0x5c
 800502e:	e00b      	b.n	8005048 <HAL_RCC_OscConfig+0x41c>
 8005030:	4b87      	ldr	r3, [pc, #540]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 8005032:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005034:	4b86      	ldr	r3, [pc, #536]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 8005036:	2101      	movs	r1, #1
 8005038:	438a      	bics	r2, r1
 800503a:	65da      	str	r2, [r3, #92]	; 0x5c
 800503c:	4b84      	ldr	r3, [pc, #528]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 800503e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005040:	4b83      	ldr	r3, [pc, #524]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 8005042:	2104      	movs	r1, #4
 8005044:	438a      	bics	r2, r1
 8005046:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d014      	beq.n	800507a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005050:	f7fe fd26 	bl	8003aa0 <HAL_GetTick>
 8005054:	0003      	movs	r3, r0
 8005056:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005058:	e009      	b.n	800506e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800505a:	f7fe fd21 	bl	8003aa0 <HAL_GetTick>
 800505e:	0002      	movs	r2, r0
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	4a7c      	ldr	r2, [pc, #496]	; (8005258 <HAL_RCC_OscConfig+0x62c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e0ec      	b.n	8005248 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800506e:	4b78      	ldr	r3, [pc, #480]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 8005070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005072:	2202      	movs	r2, #2
 8005074:	4013      	ands	r3, r2
 8005076:	d0f0      	beq.n	800505a <HAL_RCC_OscConfig+0x42e>
 8005078:	e013      	b.n	80050a2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800507a:	f7fe fd11 	bl	8003aa0 <HAL_GetTick>
 800507e:	0003      	movs	r3, r0
 8005080:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005082:	e009      	b.n	8005098 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005084:	f7fe fd0c 	bl	8003aa0 <HAL_GetTick>
 8005088:	0002      	movs	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	4a72      	ldr	r2, [pc, #456]	; (8005258 <HAL_RCC_OscConfig+0x62c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d901      	bls.n	8005098 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e0d7      	b.n	8005248 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005098:	4b6d      	ldr	r3, [pc, #436]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 800509a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800509c:	2202      	movs	r2, #2
 800509e:	4013      	ands	r3, r2
 80050a0:	d1f0      	bne.n	8005084 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80050a2:	231f      	movs	r3, #31
 80050a4:	18fb      	adds	r3, r7, r3
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d105      	bne.n	80050b8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80050ac:	4b68      	ldr	r3, [pc, #416]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 80050ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050b0:	4b67      	ldr	r3, [pc, #412]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 80050b2:	496a      	ldr	r1, [pc, #424]	; (800525c <HAL_RCC_OscConfig+0x630>)
 80050b4:	400a      	ands	r2, r1
 80050b6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d100      	bne.n	80050c2 <HAL_RCC_OscConfig+0x496>
 80050c0:	e0c1      	b.n	8005246 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050c2:	4b63      	ldr	r3, [pc, #396]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	2238      	movs	r2, #56	; 0x38
 80050c8:	4013      	ands	r3, r2
 80050ca:	2b10      	cmp	r3, #16
 80050cc:	d100      	bne.n	80050d0 <HAL_RCC_OscConfig+0x4a4>
 80050ce:	e081      	b.n	80051d4 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d156      	bne.n	8005186 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050d8:	4b5d      	ldr	r3, [pc, #372]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	4b5c      	ldr	r3, [pc, #368]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 80050de:	4960      	ldr	r1, [pc, #384]	; (8005260 <HAL_RCC_OscConfig+0x634>)
 80050e0:	400a      	ands	r2, r1
 80050e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e4:	f7fe fcdc 	bl	8003aa0 <HAL_GetTick>
 80050e8:	0003      	movs	r3, r0
 80050ea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050ec:	e008      	b.n	8005100 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ee:	f7fe fcd7 	bl	8003aa0 <HAL_GetTick>
 80050f2:	0002      	movs	r2, r0
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d901      	bls.n	8005100 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e0a3      	b.n	8005248 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005100:	4b53      	ldr	r3, [pc, #332]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	2380      	movs	r3, #128	; 0x80
 8005106:	049b      	lsls	r3, r3, #18
 8005108:	4013      	ands	r3, r2
 800510a:	d1f0      	bne.n	80050ee <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800510c:	4b50      	ldr	r3, [pc, #320]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	4a54      	ldr	r2, [pc, #336]	; (8005264 <HAL_RCC_OscConfig+0x638>)
 8005112:	4013      	ands	r3, r2
 8005114:	0019      	movs	r1, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a1a      	ldr	r2, [r3, #32]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	431a      	orrs	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005124:	021b      	lsls	r3, r3, #8
 8005126:	431a      	orrs	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005138:	431a      	orrs	r2, r3
 800513a:	4b45      	ldr	r3, [pc, #276]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 800513c:	430a      	orrs	r2, r1
 800513e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005140:	4b43      	ldr	r3, [pc, #268]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	4b42      	ldr	r3, [pc, #264]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 8005146:	2180      	movs	r1, #128	; 0x80
 8005148:	0449      	lsls	r1, r1, #17
 800514a:	430a      	orrs	r2, r1
 800514c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800514e:	4b40      	ldr	r3, [pc, #256]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	4b3f      	ldr	r3, [pc, #252]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 8005154:	2180      	movs	r1, #128	; 0x80
 8005156:	0549      	lsls	r1, r1, #21
 8005158:	430a      	orrs	r2, r1
 800515a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800515c:	f7fe fca0 	bl	8003aa0 <HAL_GetTick>
 8005160:	0003      	movs	r3, r0
 8005162:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005164:	e008      	b.n	8005178 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005166:	f7fe fc9b 	bl	8003aa0 <HAL_GetTick>
 800516a:	0002      	movs	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d901      	bls.n	8005178 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e067      	b.n	8005248 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005178:	4b35      	ldr	r3, [pc, #212]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	2380      	movs	r3, #128	; 0x80
 800517e:	049b      	lsls	r3, r3, #18
 8005180:	4013      	ands	r3, r2
 8005182:	d0f0      	beq.n	8005166 <HAL_RCC_OscConfig+0x53a>
 8005184:	e05f      	b.n	8005246 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005186:	4b32      	ldr	r3, [pc, #200]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	4b31      	ldr	r3, [pc, #196]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 800518c:	4934      	ldr	r1, [pc, #208]	; (8005260 <HAL_RCC_OscConfig+0x634>)
 800518e:	400a      	ands	r2, r1
 8005190:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005192:	4b2f      	ldr	r3, [pc, #188]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	4b2e      	ldr	r3, [pc, #184]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 8005198:	2103      	movs	r1, #3
 800519a:	438a      	bics	r2, r1
 800519c:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800519e:	4b2c      	ldr	r3, [pc, #176]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 80051a0:	68da      	ldr	r2, [r3, #12]
 80051a2:	4b2b      	ldr	r3, [pc, #172]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 80051a4:	4930      	ldr	r1, [pc, #192]	; (8005268 <HAL_RCC_OscConfig+0x63c>)
 80051a6:	400a      	ands	r2, r1
 80051a8:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051aa:	f7fe fc79 	bl	8003aa0 <HAL_GetTick>
 80051ae:	0003      	movs	r3, r0
 80051b0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b4:	f7fe fc74 	bl	8003aa0 <HAL_GetTick>
 80051b8:	0002      	movs	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e040      	b.n	8005248 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051c6:	4b22      	ldr	r3, [pc, #136]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	2380      	movs	r3, #128	; 0x80
 80051cc:	049b      	lsls	r3, r3, #18
 80051ce:	4013      	ands	r3, r2
 80051d0:	d1f0      	bne.n	80051b4 <HAL_RCC_OscConfig+0x588>
 80051d2:	e038      	b.n	8005246 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d101      	bne.n	80051e0 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e033      	b.n	8005248 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80051e0:	4b1b      	ldr	r3, [pc, #108]	; (8005250 <HAL_RCC_OscConfig+0x624>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2203      	movs	r2, #3
 80051ea:	401a      	ands	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d126      	bne.n	8005242 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	2270      	movs	r2, #112	; 0x70
 80051f8:	401a      	ands	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051fe:	429a      	cmp	r2, r3
 8005200:	d11f      	bne.n	8005242 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	23fe      	movs	r3, #254	; 0xfe
 8005206:	01db      	lsls	r3, r3, #7
 8005208:	401a      	ands	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005210:	429a      	cmp	r2, r3
 8005212:	d116      	bne.n	8005242 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	23f8      	movs	r3, #248	; 0xf8
 8005218:	039b      	lsls	r3, r3, #14
 800521a:	401a      	ands	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005220:	429a      	cmp	r2, r3
 8005222:	d10e      	bne.n	8005242 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	23e0      	movs	r3, #224	; 0xe0
 8005228:	051b      	lsls	r3, r3, #20
 800522a:	401a      	ands	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005230:	429a      	cmp	r2, r3
 8005232:	d106      	bne.n	8005242 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	0f5b      	lsrs	r3, r3, #29
 8005238:	075a      	lsls	r2, r3, #29
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800523e:	429a      	cmp	r2, r3
 8005240:	d001      	beq.n	8005246 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e000      	b.n	8005248 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	0018      	movs	r0, r3
 800524a:	46bd      	mov	sp, r7
 800524c:	b008      	add	sp, #32
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40021000 	.word	0x40021000
 8005254:	40007000 	.word	0x40007000
 8005258:	00001388 	.word	0x00001388
 800525c:	efffffff 	.word	0xefffffff
 8005260:	feffffff 	.word	0xfeffffff
 8005264:	11c1808c 	.word	0x11c1808c
 8005268:	eefeffff 	.word	0xeefeffff

0800526c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e0e9      	b.n	8005454 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005280:	4b76      	ldr	r3, [pc, #472]	; (800545c <HAL_RCC_ClockConfig+0x1f0>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2207      	movs	r2, #7
 8005286:	4013      	ands	r3, r2
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d91e      	bls.n	80052cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800528e:	4b73      	ldr	r3, [pc, #460]	; (800545c <HAL_RCC_ClockConfig+0x1f0>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2207      	movs	r2, #7
 8005294:	4393      	bics	r3, r2
 8005296:	0019      	movs	r1, r3
 8005298:	4b70      	ldr	r3, [pc, #448]	; (800545c <HAL_RCC_ClockConfig+0x1f0>)
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	430a      	orrs	r2, r1
 800529e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80052a0:	f7fe fbfe 	bl	8003aa0 <HAL_GetTick>
 80052a4:	0003      	movs	r3, r0
 80052a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80052a8:	e009      	b.n	80052be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052aa:	f7fe fbf9 	bl	8003aa0 <HAL_GetTick>
 80052ae:	0002      	movs	r2, r0
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	4a6a      	ldr	r2, [pc, #424]	; (8005460 <HAL_RCC_ClockConfig+0x1f4>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d901      	bls.n	80052be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e0ca      	b.n	8005454 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80052be:	4b67      	ldr	r3, [pc, #412]	; (800545c <HAL_RCC_ClockConfig+0x1f0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2207      	movs	r2, #7
 80052c4:	4013      	ands	r3, r2
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d1ee      	bne.n	80052aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2202      	movs	r2, #2
 80052d2:	4013      	ands	r3, r2
 80052d4:	d015      	beq.n	8005302 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2204      	movs	r2, #4
 80052dc:	4013      	ands	r3, r2
 80052de:	d006      	beq.n	80052ee <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80052e0:	4b60      	ldr	r3, [pc, #384]	; (8005464 <HAL_RCC_ClockConfig+0x1f8>)
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	4b5f      	ldr	r3, [pc, #380]	; (8005464 <HAL_RCC_ClockConfig+0x1f8>)
 80052e6:	21e0      	movs	r1, #224	; 0xe0
 80052e8:	01c9      	lsls	r1, r1, #7
 80052ea:	430a      	orrs	r2, r1
 80052ec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052ee:	4b5d      	ldr	r3, [pc, #372]	; (8005464 <HAL_RCC_ClockConfig+0x1f8>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	4a5d      	ldr	r2, [pc, #372]	; (8005468 <HAL_RCC_ClockConfig+0x1fc>)
 80052f4:	4013      	ands	r3, r2
 80052f6:	0019      	movs	r1, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	4b59      	ldr	r3, [pc, #356]	; (8005464 <HAL_RCC_ClockConfig+0x1f8>)
 80052fe:	430a      	orrs	r2, r1
 8005300:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2201      	movs	r2, #1
 8005308:	4013      	ands	r3, r2
 800530a:	d057      	beq.n	80053bc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d107      	bne.n	8005324 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005314:	4b53      	ldr	r3, [pc, #332]	; (8005464 <HAL_RCC_ClockConfig+0x1f8>)
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	2380      	movs	r3, #128	; 0x80
 800531a:	029b      	lsls	r3, r3, #10
 800531c:	4013      	ands	r3, r2
 800531e:	d12b      	bne.n	8005378 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e097      	b.n	8005454 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	2b02      	cmp	r3, #2
 800532a:	d107      	bne.n	800533c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800532c:	4b4d      	ldr	r3, [pc, #308]	; (8005464 <HAL_RCC_ClockConfig+0x1f8>)
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	2380      	movs	r3, #128	; 0x80
 8005332:	049b      	lsls	r3, r3, #18
 8005334:	4013      	ands	r3, r2
 8005336:	d11f      	bne.n	8005378 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e08b      	b.n	8005454 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d107      	bne.n	8005354 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005344:	4b47      	ldr	r3, [pc, #284]	; (8005464 <HAL_RCC_ClockConfig+0x1f8>)
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	2380      	movs	r3, #128	; 0x80
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	4013      	ands	r3, r2
 800534e:	d113      	bne.n	8005378 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e07f      	b.n	8005454 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	2b03      	cmp	r3, #3
 800535a:	d106      	bne.n	800536a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800535c:	4b41      	ldr	r3, [pc, #260]	; (8005464 <HAL_RCC_ClockConfig+0x1f8>)
 800535e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005360:	2202      	movs	r2, #2
 8005362:	4013      	ands	r3, r2
 8005364:	d108      	bne.n	8005378 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e074      	b.n	8005454 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800536a:	4b3e      	ldr	r3, [pc, #248]	; (8005464 <HAL_RCC_ClockConfig+0x1f8>)
 800536c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800536e:	2202      	movs	r2, #2
 8005370:	4013      	ands	r3, r2
 8005372:	d101      	bne.n	8005378 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e06d      	b.n	8005454 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005378:	4b3a      	ldr	r3, [pc, #232]	; (8005464 <HAL_RCC_ClockConfig+0x1f8>)
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	2207      	movs	r2, #7
 800537e:	4393      	bics	r3, r2
 8005380:	0019      	movs	r1, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	4b37      	ldr	r3, [pc, #220]	; (8005464 <HAL_RCC_ClockConfig+0x1f8>)
 8005388:	430a      	orrs	r2, r1
 800538a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800538c:	f7fe fb88 	bl	8003aa0 <HAL_GetTick>
 8005390:	0003      	movs	r3, r0
 8005392:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005394:	e009      	b.n	80053aa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005396:	f7fe fb83 	bl	8003aa0 <HAL_GetTick>
 800539a:	0002      	movs	r2, r0
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	4a2f      	ldr	r2, [pc, #188]	; (8005460 <HAL_RCC_ClockConfig+0x1f4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e054      	b.n	8005454 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053aa:	4b2e      	ldr	r3, [pc, #184]	; (8005464 <HAL_RCC_ClockConfig+0x1f8>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	2238      	movs	r2, #56	; 0x38
 80053b0:	401a      	ands	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d1ec      	bne.n	8005396 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053bc:	4b27      	ldr	r3, [pc, #156]	; (800545c <HAL_RCC_ClockConfig+0x1f0>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2207      	movs	r2, #7
 80053c2:	4013      	ands	r3, r2
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d21e      	bcs.n	8005408 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ca:	4b24      	ldr	r3, [pc, #144]	; (800545c <HAL_RCC_ClockConfig+0x1f0>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2207      	movs	r2, #7
 80053d0:	4393      	bics	r3, r2
 80053d2:	0019      	movs	r1, r3
 80053d4:	4b21      	ldr	r3, [pc, #132]	; (800545c <HAL_RCC_ClockConfig+0x1f0>)
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80053dc:	f7fe fb60 	bl	8003aa0 <HAL_GetTick>
 80053e0:	0003      	movs	r3, r0
 80053e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80053e4:	e009      	b.n	80053fa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053e6:	f7fe fb5b 	bl	8003aa0 <HAL_GetTick>
 80053ea:	0002      	movs	r2, r0
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	4a1b      	ldr	r2, [pc, #108]	; (8005460 <HAL_RCC_ClockConfig+0x1f4>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e02c      	b.n	8005454 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80053fa:	4b18      	ldr	r3, [pc, #96]	; (800545c <HAL_RCC_ClockConfig+0x1f0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2207      	movs	r2, #7
 8005400:	4013      	ands	r3, r2
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	429a      	cmp	r2, r3
 8005406:	d1ee      	bne.n	80053e6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2204      	movs	r2, #4
 800540e:	4013      	ands	r3, r2
 8005410:	d009      	beq.n	8005426 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005412:	4b14      	ldr	r3, [pc, #80]	; (8005464 <HAL_RCC_ClockConfig+0x1f8>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	4a15      	ldr	r2, [pc, #84]	; (800546c <HAL_RCC_ClockConfig+0x200>)
 8005418:	4013      	ands	r3, r2
 800541a:	0019      	movs	r1, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	4b10      	ldr	r3, [pc, #64]	; (8005464 <HAL_RCC_ClockConfig+0x1f8>)
 8005422:	430a      	orrs	r2, r1
 8005424:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005426:	f000 f829 	bl	800547c <HAL_RCC_GetSysClockFreq>
 800542a:	0001      	movs	r1, r0
 800542c:	4b0d      	ldr	r3, [pc, #52]	; (8005464 <HAL_RCC_ClockConfig+0x1f8>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	0a1b      	lsrs	r3, r3, #8
 8005432:	220f      	movs	r2, #15
 8005434:	401a      	ands	r2, r3
 8005436:	4b0e      	ldr	r3, [pc, #56]	; (8005470 <HAL_RCC_ClockConfig+0x204>)
 8005438:	0092      	lsls	r2, r2, #2
 800543a:	58d3      	ldr	r3, [r2, r3]
 800543c:	221f      	movs	r2, #31
 800543e:	4013      	ands	r3, r2
 8005440:	000a      	movs	r2, r1
 8005442:	40da      	lsrs	r2, r3
 8005444:	4b0b      	ldr	r3, [pc, #44]	; (8005474 <HAL_RCC_ClockConfig+0x208>)
 8005446:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005448:	4b0b      	ldr	r3, [pc, #44]	; (8005478 <HAL_RCC_ClockConfig+0x20c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	0018      	movs	r0, r3
 800544e:	f7fe facb 	bl	80039e8 <HAL_InitTick>
 8005452:	0003      	movs	r3, r0
}
 8005454:	0018      	movs	r0, r3
 8005456:	46bd      	mov	sp, r7
 8005458:	b004      	add	sp, #16
 800545a:	bd80      	pop	{r7, pc}
 800545c:	40022000 	.word	0x40022000
 8005460:	00001388 	.word	0x00001388
 8005464:	40021000 	.word	0x40021000
 8005468:	fffff0ff 	.word	0xfffff0ff
 800546c:	ffff8fff 	.word	0xffff8fff
 8005470:	0800a25c 	.word	0x0800a25c
 8005474:	20000044 	.word	0x20000044
 8005478:	20000048 	.word	0x20000048

0800547c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005482:	4b3c      	ldr	r3, [pc, #240]	; (8005574 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	2238      	movs	r2, #56	; 0x38
 8005488:	4013      	ands	r3, r2
 800548a:	d10f      	bne.n	80054ac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800548c:	4b39      	ldr	r3, [pc, #228]	; (8005574 <HAL_RCC_GetSysClockFreq+0xf8>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	0adb      	lsrs	r3, r3, #11
 8005492:	2207      	movs	r2, #7
 8005494:	4013      	ands	r3, r2
 8005496:	2201      	movs	r2, #1
 8005498:	409a      	lsls	r2, r3
 800549a:	0013      	movs	r3, r2
 800549c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800549e:	6839      	ldr	r1, [r7, #0]
 80054a0:	4835      	ldr	r0, [pc, #212]	; (8005578 <HAL_RCC_GetSysClockFreq+0xfc>)
 80054a2:	f7fa fe43 	bl	800012c <__udivsi3>
 80054a6:	0003      	movs	r3, r0
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	e05d      	b.n	8005568 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054ac:	4b31      	ldr	r3, [pc, #196]	; (8005574 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	2238      	movs	r2, #56	; 0x38
 80054b2:	4013      	ands	r3, r2
 80054b4:	2b08      	cmp	r3, #8
 80054b6:	d102      	bne.n	80054be <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054b8:	4b30      	ldr	r3, [pc, #192]	; (800557c <HAL_RCC_GetSysClockFreq+0x100>)
 80054ba:	613b      	str	r3, [r7, #16]
 80054bc:	e054      	b.n	8005568 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054be:	4b2d      	ldr	r3, [pc, #180]	; (8005574 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	2238      	movs	r2, #56	; 0x38
 80054c4:	4013      	ands	r3, r2
 80054c6:	2b10      	cmp	r3, #16
 80054c8:	d138      	bne.n	800553c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80054ca:	4b2a      	ldr	r3, [pc, #168]	; (8005574 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	2203      	movs	r2, #3
 80054d0:	4013      	ands	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054d4:	4b27      	ldr	r3, [pc, #156]	; (8005574 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	091b      	lsrs	r3, r3, #4
 80054da:	2207      	movs	r2, #7
 80054dc:	4013      	ands	r3, r2
 80054de:	3301      	adds	r3, #1
 80054e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b03      	cmp	r3, #3
 80054e6:	d10d      	bne.n	8005504 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054e8:	68b9      	ldr	r1, [r7, #8]
 80054ea:	4824      	ldr	r0, [pc, #144]	; (800557c <HAL_RCC_GetSysClockFreq+0x100>)
 80054ec:	f7fa fe1e 	bl	800012c <__udivsi3>
 80054f0:	0003      	movs	r3, r0
 80054f2:	0019      	movs	r1, r3
 80054f4:	4b1f      	ldr	r3, [pc, #124]	; (8005574 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	0a1b      	lsrs	r3, r3, #8
 80054fa:	227f      	movs	r2, #127	; 0x7f
 80054fc:	4013      	ands	r3, r2
 80054fe:	434b      	muls	r3, r1
 8005500:	617b      	str	r3, [r7, #20]
        break;
 8005502:	e00d      	b.n	8005520 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005504:	68b9      	ldr	r1, [r7, #8]
 8005506:	481c      	ldr	r0, [pc, #112]	; (8005578 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005508:	f7fa fe10 	bl	800012c <__udivsi3>
 800550c:	0003      	movs	r3, r0
 800550e:	0019      	movs	r1, r3
 8005510:	4b18      	ldr	r3, [pc, #96]	; (8005574 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	0a1b      	lsrs	r3, r3, #8
 8005516:	227f      	movs	r2, #127	; 0x7f
 8005518:	4013      	ands	r3, r2
 800551a:	434b      	muls	r3, r1
 800551c:	617b      	str	r3, [r7, #20]
        break;
 800551e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005520:	4b14      	ldr	r3, [pc, #80]	; (8005574 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	0f5b      	lsrs	r3, r3, #29
 8005526:	2207      	movs	r2, #7
 8005528:	4013      	ands	r3, r2
 800552a:	3301      	adds	r3, #1
 800552c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800552e:	6879      	ldr	r1, [r7, #4]
 8005530:	6978      	ldr	r0, [r7, #20]
 8005532:	f7fa fdfb 	bl	800012c <__udivsi3>
 8005536:	0003      	movs	r3, r0
 8005538:	613b      	str	r3, [r7, #16]
 800553a:	e015      	b.n	8005568 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800553c:	4b0d      	ldr	r3, [pc, #52]	; (8005574 <HAL_RCC_GetSysClockFreq+0xf8>)
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2238      	movs	r2, #56	; 0x38
 8005542:	4013      	ands	r3, r2
 8005544:	2b20      	cmp	r3, #32
 8005546:	d103      	bne.n	8005550 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005548:	2380      	movs	r3, #128	; 0x80
 800554a:	021b      	lsls	r3, r3, #8
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	e00b      	b.n	8005568 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005550:	4b08      	ldr	r3, [pc, #32]	; (8005574 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	2238      	movs	r2, #56	; 0x38
 8005556:	4013      	ands	r3, r2
 8005558:	2b18      	cmp	r3, #24
 800555a:	d103      	bne.n	8005564 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800555c:	23fa      	movs	r3, #250	; 0xfa
 800555e:	01db      	lsls	r3, r3, #7
 8005560:	613b      	str	r3, [r7, #16]
 8005562:	e001      	b.n	8005568 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005568:	693b      	ldr	r3, [r7, #16]
}
 800556a:	0018      	movs	r0, r3
 800556c:	46bd      	mov	sp, r7
 800556e:	b006      	add	sp, #24
 8005570:	bd80      	pop	{r7, pc}
 8005572:	46c0      	nop			; (mov r8, r8)
 8005574:	40021000 	.word	0x40021000
 8005578:	00f42400 	.word	0x00f42400
 800557c:	007a1200 	.word	0x007a1200

08005580 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005584:	4b02      	ldr	r3, [pc, #8]	; (8005590 <HAL_RCC_GetHCLKFreq+0x10>)
 8005586:	681b      	ldr	r3, [r3, #0]
}
 8005588:	0018      	movs	r0, r3
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	46c0      	nop			; (mov r8, r8)
 8005590:	20000044 	.word	0x20000044

08005594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005594:	b5b0      	push	{r4, r5, r7, lr}
 8005596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005598:	f7ff fff2 	bl	8005580 <HAL_RCC_GetHCLKFreq>
 800559c:	0004      	movs	r4, r0
 800559e:	f7ff fb39 	bl	8004c14 <LL_RCC_GetAPB1Prescaler>
 80055a2:	0003      	movs	r3, r0
 80055a4:	0b1a      	lsrs	r2, r3, #12
 80055a6:	4b05      	ldr	r3, [pc, #20]	; (80055bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80055a8:	0092      	lsls	r2, r2, #2
 80055aa:	58d3      	ldr	r3, [r2, r3]
 80055ac:	221f      	movs	r2, #31
 80055ae:	4013      	ands	r3, r2
 80055b0:	40dc      	lsrs	r4, r3
 80055b2:	0023      	movs	r3, r4
}
 80055b4:	0018      	movs	r0, r3
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bdb0      	pop	{r4, r5, r7, pc}
 80055ba:	46c0      	nop			; (mov r8, r8)
 80055bc:	0800a29c 	.word	0x0800a29c

080055c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80055c8:	2313      	movs	r3, #19
 80055ca:	18fb      	adds	r3, r7, r3
 80055cc:	2200      	movs	r2, #0
 80055ce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055d0:	2312      	movs	r3, #18
 80055d2:	18fb      	adds	r3, r7, r3
 80055d4:	2200      	movs	r2, #0
 80055d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	2380      	movs	r3, #128	; 0x80
 80055de:	029b      	lsls	r3, r3, #10
 80055e0:	4013      	ands	r3, r2
 80055e2:	d100      	bne.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80055e4:	e0a3      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055e6:	2011      	movs	r0, #17
 80055e8:	183b      	adds	r3, r7, r0
 80055ea:	2200      	movs	r2, #0
 80055ec:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055ee:	4bc3      	ldr	r3, [pc, #780]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055f2:	2380      	movs	r3, #128	; 0x80
 80055f4:	055b      	lsls	r3, r3, #21
 80055f6:	4013      	ands	r3, r2
 80055f8:	d110      	bne.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055fa:	4bc0      	ldr	r3, [pc, #768]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055fe:	4bbf      	ldr	r3, [pc, #764]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005600:	2180      	movs	r1, #128	; 0x80
 8005602:	0549      	lsls	r1, r1, #21
 8005604:	430a      	orrs	r2, r1
 8005606:	63da      	str	r2, [r3, #60]	; 0x3c
 8005608:	4bbc      	ldr	r3, [pc, #752]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800560a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800560c:	2380      	movs	r3, #128	; 0x80
 800560e:	055b      	lsls	r3, r3, #21
 8005610:	4013      	ands	r3, r2
 8005612:	60bb      	str	r3, [r7, #8]
 8005614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005616:	183b      	adds	r3, r7, r0
 8005618:	2201      	movs	r2, #1
 800561a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800561c:	4bb8      	ldr	r3, [pc, #736]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	4bb7      	ldr	r3, [pc, #732]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005622:	2180      	movs	r1, #128	; 0x80
 8005624:	0049      	lsls	r1, r1, #1
 8005626:	430a      	orrs	r2, r1
 8005628:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800562a:	f7fe fa39 	bl	8003aa0 <HAL_GetTick>
 800562e:	0003      	movs	r3, r0
 8005630:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005632:	e00b      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005634:	f7fe fa34 	bl	8003aa0 <HAL_GetTick>
 8005638:	0002      	movs	r2, r0
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d904      	bls.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005642:	2313      	movs	r3, #19
 8005644:	18fb      	adds	r3, r7, r3
 8005646:	2203      	movs	r2, #3
 8005648:	701a      	strb	r2, [r3, #0]
        break;
 800564a:	e005      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800564c:	4bac      	ldr	r3, [pc, #688]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	2380      	movs	r3, #128	; 0x80
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	4013      	ands	r3, r2
 8005656:	d0ed      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005658:	2313      	movs	r3, #19
 800565a:	18fb      	adds	r3, r7, r3
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d154      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005662:	4ba6      	ldr	r3, [pc, #664]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005664:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005666:	23c0      	movs	r3, #192	; 0xc0
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4013      	ands	r3, r2
 800566c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d019      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	429a      	cmp	r2, r3
 800567c:	d014      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800567e:	4b9f      	ldr	r3, [pc, #636]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005682:	4aa0      	ldr	r2, [pc, #640]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005684:	4013      	ands	r3, r2
 8005686:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005688:	4b9c      	ldr	r3, [pc, #624]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800568a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800568c:	4b9b      	ldr	r3, [pc, #620]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800568e:	2180      	movs	r1, #128	; 0x80
 8005690:	0249      	lsls	r1, r1, #9
 8005692:	430a      	orrs	r2, r1
 8005694:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005696:	4b99      	ldr	r3, [pc, #612]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005698:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800569a:	4b98      	ldr	r3, [pc, #608]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800569c:	499a      	ldr	r1, [pc, #616]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800569e:	400a      	ands	r2, r1
 80056a0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056a2:	4b96      	ldr	r3, [pc, #600]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	2201      	movs	r2, #1
 80056ac:	4013      	ands	r3, r2
 80056ae:	d016      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b0:	f7fe f9f6 	bl	8003aa0 <HAL_GetTick>
 80056b4:	0003      	movs	r3, r0
 80056b6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056b8:	e00c      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ba:	f7fe f9f1 	bl	8003aa0 <HAL_GetTick>
 80056be:	0002      	movs	r2, r0
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	4a91      	ldr	r2, [pc, #580]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d904      	bls.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80056ca:	2313      	movs	r3, #19
 80056cc:	18fb      	adds	r3, r7, r3
 80056ce:	2203      	movs	r2, #3
 80056d0:	701a      	strb	r2, [r3, #0]
            break;
 80056d2:	e004      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056d4:	4b89      	ldr	r3, [pc, #548]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056d8:	2202      	movs	r2, #2
 80056da:	4013      	ands	r3, r2
 80056dc:	d0ed      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80056de:	2313      	movs	r3, #19
 80056e0:	18fb      	adds	r3, r7, r3
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10a      	bne.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056e8:	4b84      	ldr	r3, [pc, #528]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ec:	4a85      	ldr	r2, [pc, #532]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80056ee:	4013      	ands	r3, r2
 80056f0:	0019      	movs	r1, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056f6:	4b81      	ldr	r3, [pc, #516]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056f8:	430a      	orrs	r2, r1
 80056fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80056fc:	e00c      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056fe:	2312      	movs	r3, #18
 8005700:	18fb      	adds	r3, r7, r3
 8005702:	2213      	movs	r2, #19
 8005704:	18ba      	adds	r2, r7, r2
 8005706:	7812      	ldrb	r2, [r2, #0]
 8005708:	701a      	strb	r2, [r3, #0]
 800570a:	e005      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570c:	2312      	movs	r3, #18
 800570e:	18fb      	adds	r3, r7, r3
 8005710:	2213      	movs	r2, #19
 8005712:	18ba      	adds	r2, r7, r2
 8005714:	7812      	ldrb	r2, [r2, #0]
 8005716:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005718:	2311      	movs	r3, #17
 800571a:	18fb      	adds	r3, r7, r3
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d105      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005722:	4b76      	ldr	r3, [pc, #472]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005724:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005726:	4b75      	ldr	r3, [pc, #468]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005728:	4979      	ldr	r1, [pc, #484]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800572a:	400a      	ands	r2, r1
 800572c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2201      	movs	r2, #1
 8005734:	4013      	ands	r3, r2
 8005736:	d009      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005738:	4b70      	ldr	r3, [pc, #448]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800573a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573c:	2203      	movs	r2, #3
 800573e:	4393      	bics	r3, r2
 8005740:	0019      	movs	r1, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	4b6d      	ldr	r3, [pc, #436]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005748:	430a      	orrs	r2, r1
 800574a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2202      	movs	r2, #2
 8005752:	4013      	ands	r3, r2
 8005754:	d009      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005756:	4b69      	ldr	r3, [pc, #420]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575a:	220c      	movs	r2, #12
 800575c:	4393      	bics	r3, r2
 800575e:	0019      	movs	r1, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	4b65      	ldr	r3, [pc, #404]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005766:	430a      	orrs	r2, r1
 8005768:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2210      	movs	r2, #16
 8005770:	4013      	ands	r3, r2
 8005772:	d009      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005774:	4b61      	ldr	r3, [pc, #388]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005778:	4a66      	ldr	r2, [pc, #408]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800577a:	4013      	ands	r3, r2
 800577c:	0019      	movs	r1, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	4b5e      	ldr	r3, [pc, #376]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005784:	430a      	orrs	r2, r1
 8005786:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	2380      	movs	r3, #128	; 0x80
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4013      	ands	r3, r2
 8005792:	d009      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005794:	4b59      	ldr	r3, [pc, #356]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005798:	4a5f      	ldr	r2, [pc, #380]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800579a:	4013      	ands	r3, r2
 800579c:	0019      	movs	r1, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	699a      	ldr	r2, [r3, #24]
 80057a2:	4b56      	ldr	r3, [pc, #344]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057a4:	430a      	orrs	r2, r1
 80057a6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	2380      	movs	r3, #128	; 0x80
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	4013      	ands	r3, r2
 80057b2:	d009      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057b4:	4b51      	ldr	r3, [pc, #324]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b8:	4a58      	ldr	r2, [pc, #352]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057ba:	4013      	ands	r3, r2
 80057bc:	0019      	movs	r1, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	69da      	ldr	r2, [r3, #28]
 80057c2:	4b4e      	ldr	r3, [pc, #312]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057c4:	430a      	orrs	r2, r1
 80057c6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2220      	movs	r2, #32
 80057ce:	4013      	ands	r3, r2
 80057d0:	d009      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057d2:	4b4a      	ldr	r3, [pc, #296]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d6:	4a52      	ldr	r2, [pc, #328]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80057d8:	4013      	ands	r3, r2
 80057da:	0019      	movs	r1, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	691a      	ldr	r2, [r3, #16]
 80057e0:	4b46      	ldr	r3, [pc, #280]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057e2:	430a      	orrs	r2, r1
 80057e4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	2380      	movs	r3, #128	; 0x80
 80057ec:	01db      	lsls	r3, r3, #7
 80057ee:	4013      	ands	r3, r2
 80057f0:	d015      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057f2:	4b42      	ldr	r3, [pc, #264]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	0899      	lsrs	r1, r3, #2
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a1a      	ldr	r2, [r3, #32]
 80057fe:	4b3f      	ldr	r3, [pc, #252]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005800:	430a      	orrs	r2, r1
 8005802:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a1a      	ldr	r2, [r3, #32]
 8005808:	2380      	movs	r3, #128	; 0x80
 800580a:	05db      	lsls	r3, r3, #23
 800580c:	429a      	cmp	r2, r3
 800580e:	d106      	bne.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005810:	4b3a      	ldr	r3, [pc, #232]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005812:	68da      	ldr	r2, [r3, #12]
 8005814:	4b39      	ldr	r3, [pc, #228]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005816:	2180      	movs	r1, #128	; 0x80
 8005818:	0249      	lsls	r1, r1, #9
 800581a:	430a      	orrs	r2, r1
 800581c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	2380      	movs	r3, #128	; 0x80
 8005824:	031b      	lsls	r3, r3, #12
 8005826:	4013      	ands	r3, r2
 8005828:	d009      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800582a:	4b34      	ldr	r3, [pc, #208]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800582c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582e:	2240      	movs	r2, #64	; 0x40
 8005830:	4393      	bics	r3, r2
 8005832:	0019      	movs	r1, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005838:	4b30      	ldr	r3, [pc, #192]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800583a:	430a      	orrs	r2, r1
 800583c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	2380      	movs	r3, #128	; 0x80
 8005844:	039b      	lsls	r3, r3, #14
 8005846:	4013      	ands	r3, r2
 8005848:	d016      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800584a:	4b2c      	ldr	r3, [pc, #176]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800584c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584e:	4a35      	ldr	r2, [pc, #212]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005850:	4013      	ands	r3, r2
 8005852:	0019      	movs	r1, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005858:	4b28      	ldr	r3, [pc, #160]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800585a:	430a      	orrs	r2, r1
 800585c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005862:	2380      	movs	r3, #128	; 0x80
 8005864:	03db      	lsls	r3, r3, #15
 8005866:	429a      	cmp	r2, r3
 8005868:	d106      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800586a:	4b24      	ldr	r3, [pc, #144]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	4b23      	ldr	r3, [pc, #140]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005870:	2180      	movs	r1, #128	; 0x80
 8005872:	0449      	lsls	r1, r1, #17
 8005874:	430a      	orrs	r2, r1
 8005876:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	2380      	movs	r3, #128	; 0x80
 800587e:	03db      	lsls	r3, r3, #15
 8005880:	4013      	ands	r3, r2
 8005882:	d016      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005884:	4b1d      	ldr	r3, [pc, #116]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005888:	4a27      	ldr	r2, [pc, #156]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800588a:	4013      	ands	r3, r2
 800588c:	0019      	movs	r1, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005892:	4b1a      	ldr	r3, [pc, #104]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005894:	430a      	orrs	r2, r1
 8005896:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589c:	2380      	movs	r3, #128	; 0x80
 800589e:	045b      	lsls	r3, r3, #17
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d106      	bne.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80058a4:	4b15      	ldr	r3, [pc, #84]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058a6:	68da      	ldr	r2, [r3, #12]
 80058a8:	4b14      	ldr	r3, [pc, #80]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058aa:	2180      	movs	r1, #128	; 0x80
 80058ac:	0449      	lsls	r1, r1, #17
 80058ae:	430a      	orrs	r2, r1
 80058b0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	2380      	movs	r3, #128	; 0x80
 80058b8:	011b      	lsls	r3, r3, #4
 80058ba:	4013      	ands	r3, r2
 80058bc:	d016      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80058be:	4b0f      	ldr	r3, [pc, #60]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c2:	4a1a      	ldr	r2, [pc, #104]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80058c4:	4013      	ands	r3, r2
 80058c6:	0019      	movs	r1, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	695a      	ldr	r2, [r3, #20]
 80058cc:	4b0b      	ldr	r3, [pc, #44]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058ce:	430a      	orrs	r2, r1
 80058d0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	695a      	ldr	r2, [r3, #20]
 80058d6:	2380      	movs	r3, #128	; 0x80
 80058d8:	01db      	lsls	r3, r3, #7
 80058da:	429a      	cmp	r2, r3
 80058dc:	d106      	bne.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80058de:	4b07      	ldr	r3, [pc, #28]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058e0:	68da      	ldr	r2, [r3, #12]
 80058e2:	4b06      	ldr	r3, [pc, #24]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058e4:	2180      	movs	r1, #128	; 0x80
 80058e6:	0249      	lsls	r1, r1, #9
 80058e8:	430a      	orrs	r2, r1
 80058ea:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80058ec:	2312      	movs	r3, #18
 80058ee:	18fb      	adds	r3, r7, r3
 80058f0:	781b      	ldrb	r3, [r3, #0]
}
 80058f2:	0018      	movs	r0, r3
 80058f4:	46bd      	mov	sp, r7
 80058f6:	b006      	add	sp, #24
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	46c0      	nop			; (mov r8, r8)
 80058fc:	40021000 	.word	0x40021000
 8005900:	40007000 	.word	0x40007000
 8005904:	fffffcff 	.word	0xfffffcff
 8005908:	fffeffff 	.word	0xfffeffff
 800590c:	00001388 	.word	0x00001388
 8005910:	efffffff 	.word	0xefffffff
 8005914:	fffff3ff 	.word	0xfffff3ff
 8005918:	fff3ffff 	.word	0xfff3ffff
 800591c:	ffcfffff 	.word	0xffcfffff
 8005920:	ffffcfff 	.word	0xffffcfff
 8005924:	ffbfffff 	.word	0xffbfffff
 8005928:	feffffff 	.word	0xfeffffff
 800592c:	ffff3fff 	.word	0xffff3fff

08005930 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e0a8      	b.n	8005a94 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005946:	2b00      	cmp	r3, #0
 8005948:	d109      	bne.n	800595e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	2382      	movs	r3, #130	; 0x82
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	429a      	cmp	r2, r3
 8005954:	d009      	beq.n	800596a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	61da      	str	r2, [r3, #28]
 800595c:	e005      	b.n	800596a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	225d      	movs	r2, #93	; 0x5d
 8005974:	5c9b      	ldrb	r3, [r3, r2]
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d107      	bne.n	800598c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	225c      	movs	r2, #92	; 0x5c
 8005980:	2100      	movs	r1, #0
 8005982:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	0018      	movs	r0, r3
 8005988:	f7fd fa52 	bl	8002e30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	225d      	movs	r2, #93	; 0x5d
 8005990:	2102      	movs	r1, #2
 8005992:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2140      	movs	r1, #64	; 0x40
 80059a0:	438a      	bics	r2, r1
 80059a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68da      	ldr	r2, [r3, #12]
 80059a8:	23e0      	movs	r3, #224	; 0xe0
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d902      	bls.n	80059b6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	e002      	b.n	80059bc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80059b6:	2380      	movs	r3, #128	; 0x80
 80059b8:	015b      	lsls	r3, r3, #5
 80059ba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68da      	ldr	r2, [r3, #12]
 80059c0:	23f0      	movs	r3, #240	; 0xf0
 80059c2:	011b      	lsls	r3, r3, #4
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d008      	beq.n	80059da <HAL_SPI_Init+0xaa>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68da      	ldr	r2, [r3, #12]
 80059cc:	23e0      	movs	r3, #224	; 0xe0
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d002      	beq.n	80059da <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	2382      	movs	r3, #130	; 0x82
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	401a      	ands	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6899      	ldr	r1, [r3, #8]
 80059e8:	2384      	movs	r3, #132	; 0x84
 80059ea:	021b      	lsls	r3, r3, #8
 80059ec:	400b      	ands	r3, r1
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	2102      	movs	r1, #2
 80059f6:	400b      	ands	r3, r1
 80059f8:	431a      	orrs	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	2101      	movs	r1, #1
 8005a00:	400b      	ands	r3, r1
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6999      	ldr	r1, [r3, #24]
 8005a08:	2380      	movs	r3, #128	; 0x80
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	400b      	ands	r3, r1
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	2138      	movs	r1, #56	; 0x38
 8005a16:	400b      	ands	r3, r1
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	2180      	movs	r1, #128	; 0x80
 8005a20:	400b      	ands	r3, r1
 8005a22:	431a      	orrs	r2, r3
 8005a24:	0011      	movs	r1, r2
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a2a:	2380      	movs	r3, #128	; 0x80
 8005a2c:	019b      	lsls	r3, r3, #6
 8005a2e:	401a      	ands	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	0c1b      	lsrs	r3, r3, #16
 8005a3e:	2204      	movs	r2, #4
 8005a40:	401a      	ands	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a46:	2110      	movs	r1, #16
 8005a48:	400b      	ands	r3, r1
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a50:	2108      	movs	r1, #8
 8005a52:	400b      	ands	r3, r1
 8005a54:	431a      	orrs	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68d9      	ldr	r1, [r3, #12]
 8005a5a:	23f0      	movs	r3, #240	; 0xf0
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	400b      	ands	r3, r1
 8005a60:	431a      	orrs	r2, r3
 8005a62:	0011      	movs	r1, r2
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	2380      	movs	r3, #128	; 0x80
 8005a68:	015b      	lsls	r3, r3, #5
 8005a6a:	401a      	ands	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	69da      	ldr	r2, [r3, #28]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4907      	ldr	r1, [pc, #28]	; (8005a9c <HAL_SPI_Init+0x16c>)
 8005a80:	400a      	ands	r2, r1
 8005a82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	225d      	movs	r2, #93	; 0x5d
 8005a8e:	2101      	movs	r1, #1
 8005a90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	0018      	movs	r0, r3
 8005a96:	46bd      	mov	sp, r7
 8005a98:	b004      	add	sp, #16
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	fffff7ff 	.word	0xfffff7ff

08005aa0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b088      	sub	sp, #32
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	603b      	str	r3, [r7, #0]
 8005aac:	1dbb      	adds	r3, r7, #6
 8005aae:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ab0:	231f      	movs	r3, #31
 8005ab2:	18fb      	adds	r3, r7, r3
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	225c      	movs	r2, #92	; 0x5c
 8005abc:	5c9b      	ldrb	r3, [r3, r2]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d101      	bne.n	8005ac6 <HAL_SPI_Transmit+0x26>
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	e140      	b.n	8005d48 <HAL_SPI_Transmit+0x2a8>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	225c      	movs	r2, #92	; 0x5c
 8005aca:	2101      	movs	r1, #1
 8005acc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ace:	f7fd ffe7 	bl	8003aa0 <HAL_GetTick>
 8005ad2:	0003      	movs	r3, r0
 8005ad4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005ad6:	2316      	movs	r3, #22
 8005ad8:	18fb      	adds	r3, r7, r3
 8005ada:	1dba      	adds	r2, r7, #6
 8005adc:	8812      	ldrh	r2, [r2, #0]
 8005ade:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	225d      	movs	r2, #93	; 0x5d
 8005ae4:	5c9b      	ldrb	r3, [r3, r2]
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d004      	beq.n	8005af6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005aec:	231f      	movs	r3, #31
 8005aee:	18fb      	adds	r3, r7, r3
 8005af0:	2202      	movs	r2, #2
 8005af2:	701a      	strb	r2, [r3, #0]
    goto error;
 8005af4:	e11d      	b.n	8005d32 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d003      	beq.n	8005b04 <HAL_SPI_Transmit+0x64>
 8005afc:	1dbb      	adds	r3, r7, #6
 8005afe:	881b      	ldrh	r3, [r3, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d104      	bne.n	8005b0e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005b04:	231f      	movs	r3, #31
 8005b06:	18fb      	adds	r3, r7, r3
 8005b08:	2201      	movs	r2, #1
 8005b0a:	701a      	strb	r2, [r3, #0]
    goto error;
 8005b0c:	e111      	b.n	8005d32 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	225d      	movs	r2, #93	; 0x5d
 8005b12:	2103      	movs	r1, #3
 8005b14:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	1dba      	adds	r2, r7, #6
 8005b26:	8812      	ldrh	r2, [r2, #0]
 8005b28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	1dba      	adds	r2, r7, #6
 8005b2e:	8812      	ldrh	r2, [r2, #0]
 8005b30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2244      	movs	r2, #68	; 0x44
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2246      	movs	r2, #70	; 0x46
 8005b44:	2100      	movs	r1, #0
 8005b46:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	2380      	movs	r3, #128	; 0x80
 8005b5a:	021b      	lsls	r3, r3, #8
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d110      	bne.n	8005b82 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2140      	movs	r1, #64	; 0x40
 8005b6c:	438a      	bics	r2, r1
 8005b6e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2180      	movs	r1, #128	; 0x80
 8005b7c:	01c9      	lsls	r1, r1, #7
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2240      	movs	r2, #64	; 0x40
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	2b40      	cmp	r3, #64	; 0x40
 8005b8e:	d007      	beq.n	8005ba0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2140      	movs	r1, #64	; 0x40
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	23e0      	movs	r3, #224	; 0xe0
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d94e      	bls.n	8005c4a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d004      	beq.n	8005bbe <HAL_SPI_Transmit+0x11e>
 8005bb4:	2316      	movs	r3, #22
 8005bb6:	18fb      	adds	r3, r7, r3
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d13f      	bne.n	8005c3e <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc2:	881a      	ldrh	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bce:	1c9a      	adds	r2, r3, #2
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005be2:	e02c      	b.n	8005c3e <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	2202      	movs	r2, #2
 8005bec:	4013      	ands	r3, r2
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d112      	bne.n	8005c18 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf6:	881a      	ldrh	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c02:	1c9a      	adds	r2, r3, #2
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c16:	e012      	b.n	8005c3e <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c18:	f7fd ff42 	bl	8003aa0 <HAL_GetTick>
 8005c1c:	0002      	movs	r2, r0
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d802      	bhi.n	8005c2e <HAL_SPI_Transmit+0x18e>
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	d102      	bne.n	8005c34 <HAL_SPI_Transmit+0x194>
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d104      	bne.n	8005c3e <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8005c34:	231f      	movs	r3, #31
 8005c36:	18fb      	adds	r3, r7, r3
 8005c38:	2203      	movs	r2, #3
 8005c3a:	701a      	strb	r2, [r3, #0]
          goto error;
 8005c3c:	e079      	b.n	8005d32 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1cd      	bne.n	8005be4 <HAL_SPI_Transmit+0x144>
 8005c48:	e04f      	b.n	8005cea <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d004      	beq.n	8005c5c <HAL_SPI_Transmit+0x1bc>
 8005c52:	2316      	movs	r3, #22
 8005c54:	18fb      	adds	r3, r7, r3
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d141      	bne.n	8005ce0 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	330c      	adds	r3, #12
 8005c66:	7812      	ldrb	r2, [r2, #0]
 8005c68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005c82:	e02d      	b.n	8005ce0 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d113      	bne.n	8005cba <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	330c      	adds	r3, #12
 8005c9c:	7812      	ldrb	r2, [r2, #0]
 8005c9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cb8:	e012      	b.n	8005ce0 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cba:	f7fd fef1 	bl	8003aa0 <HAL_GetTick>
 8005cbe:	0002      	movs	r2, r0
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	683a      	ldr	r2, [r7, #0]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d802      	bhi.n	8005cd0 <HAL_SPI_Transmit+0x230>
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	d102      	bne.n	8005cd6 <HAL_SPI_Transmit+0x236>
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d104      	bne.n	8005ce0 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8005cd6:	231f      	movs	r3, #31
 8005cd8:	18fb      	adds	r3, r7, r3
 8005cda:	2203      	movs	r2, #3
 8005cdc:	701a      	strb	r2, [r3, #0]
          goto error;
 8005cde:	e028      	b.n	8005d32 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1cc      	bne.n	8005c84 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	6839      	ldr	r1, [r7, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	f000 fc4b 	bl	800658c <SPI_EndRxTxTransaction>
 8005cf6:	1e03      	subs	r3, r0, #0
 8005cf8:	d002      	beq.n	8005d00 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10a      	bne.n	8005d1e <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d08:	2300      	movs	r3, #0
 8005d0a:	613b      	str	r3, [r7, #16]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	613b      	str	r3, [r7, #16]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	613b      	str	r3, [r7, #16]
 8005d1c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d004      	beq.n	8005d30 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8005d26:	231f      	movs	r3, #31
 8005d28:	18fb      	adds	r3, r7, r3
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	701a      	strb	r2, [r3, #0]
 8005d2e:	e000      	b.n	8005d32 <HAL_SPI_Transmit+0x292>
  }

error:
 8005d30:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	225d      	movs	r2, #93	; 0x5d
 8005d36:	2101      	movs	r1, #1
 8005d38:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	225c      	movs	r2, #92	; 0x5c
 8005d3e:	2100      	movs	r1, #0
 8005d40:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005d42:	231f      	movs	r3, #31
 8005d44:	18fb      	adds	r3, r7, r3
 8005d46:	781b      	ldrb	r3, [r3, #0]
}
 8005d48:	0018      	movs	r0, r3
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	b008      	add	sp, #32
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b08a      	sub	sp, #40	; 0x28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
 8005d5c:	001a      	movs	r2, r3
 8005d5e:	1cbb      	adds	r3, r7, #2
 8005d60:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d62:	2301      	movs	r3, #1
 8005d64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005d66:	2323      	movs	r3, #35	; 0x23
 8005d68:	18fb      	adds	r3, r7, r3
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	225c      	movs	r2, #92	; 0x5c
 8005d72:	5c9b      	ldrb	r3, [r3, r2]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d101      	bne.n	8005d7c <HAL_SPI_TransmitReceive+0x2c>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	e1b5      	b.n	80060e8 <HAL_SPI_TransmitReceive+0x398>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	225c      	movs	r2, #92	; 0x5c
 8005d80:	2101      	movs	r1, #1
 8005d82:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d84:	f7fd fe8c 	bl	8003aa0 <HAL_GetTick>
 8005d88:	0003      	movs	r3, r0
 8005d8a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d8c:	201b      	movs	r0, #27
 8005d8e:	183b      	adds	r3, r7, r0
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	215d      	movs	r1, #93	; 0x5d
 8005d94:	5c52      	ldrb	r2, [r2, r1]
 8005d96:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005d9e:	2312      	movs	r3, #18
 8005da0:	18fb      	adds	r3, r7, r3
 8005da2:	1cba      	adds	r2, r7, #2
 8005da4:	8812      	ldrh	r2, [r2, #0]
 8005da6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005da8:	183b      	adds	r3, r7, r0
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d011      	beq.n	8005dd4 <HAL_SPI_TransmitReceive+0x84>
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	2382      	movs	r3, #130	; 0x82
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d107      	bne.n	8005dca <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d103      	bne.n	8005dca <HAL_SPI_TransmitReceive+0x7a>
 8005dc2:	183b      	adds	r3, r7, r0
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	2b04      	cmp	r3, #4
 8005dc8:	d004      	beq.n	8005dd4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005dca:	2323      	movs	r3, #35	; 0x23
 8005dcc:	18fb      	adds	r3, r7, r3
 8005dce:	2202      	movs	r2, #2
 8005dd0:	701a      	strb	r2, [r3, #0]
    goto error;
 8005dd2:	e17e      	b.n	80060d2 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d006      	beq.n	8005de8 <HAL_SPI_TransmitReceive+0x98>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d003      	beq.n	8005de8 <HAL_SPI_TransmitReceive+0x98>
 8005de0:	1cbb      	adds	r3, r7, #2
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d104      	bne.n	8005df2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005de8:	2323      	movs	r3, #35	; 0x23
 8005dea:	18fb      	adds	r3, r7, r3
 8005dec:	2201      	movs	r2, #1
 8005dee:	701a      	strb	r2, [r3, #0]
    goto error;
 8005df0:	e16f      	b.n	80060d2 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	225d      	movs	r2, #93	; 0x5d
 8005df6:	5c9b      	ldrb	r3, [r3, r2]
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	d003      	beq.n	8005e06 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	225d      	movs	r2, #93	; 0x5d
 8005e02:	2105      	movs	r1, #5
 8005e04:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	1cba      	adds	r2, r7, #2
 8005e16:	2146      	movs	r1, #70	; 0x46
 8005e18:	8812      	ldrh	r2, [r2, #0]
 8005e1a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	1cba      	adds	r2, r7, #2
 8005e20:	2144      	movs	r1, #68	; 0x44
 8005e22:	8812      	ldrh	r2, [r2, #0]
 8005e24:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	1cba      	adds	r2, r7, #2
 8005e30:	8812      	ldrh	r2, [r2, #0]
 8005e32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	1cba      	adds	r2, r7, #2
 8005e38:	8812      	ldrh	r2, [r2, #0]
 8005e3a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	68da      	ldr	r2, [r3, #12]
 8005e4c:	23e0      	movs	r3, #224	; 0xe0
 8005e4e:	00db      	lsls	r3, r3, #3
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d908      	bls.n	8005e66 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	49a4      	ldr	r1, [pc, #656]	; (80060f0 <HAL_SPI_TransmitReceive+0x3a0>)
 8005e60:	400a      	ands	r2, r1
 8005e62:	605a      	str	r2, [r3, #4]
 8005e64:	e008      	b.n	8005e78 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2180      	movs	r1, #128	; 0x80
 8005e72:	0149      	lsls	r1, r1, #5
 8005e74:	430a      	orrs	r2, r1
 8005e76:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2240      	movs	r2, #64	; 0x40
 8005e80:	4013      	ands	r3, r2
 8005e82:	2b40      	cmp	r3, #64	; 0x40
 8005e84:	d007      	beq.n	8005e96 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2140      	movs	r1, #64	; 0x40
 8005e92:	430a      	orrs	r2, r1
 8005e94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	23e0      	movs	r3, #224	; 0xe0
 8005e9c:	00db      	lsls	r3, r3, #3
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d800      	bhi.n	8005ea4 <HAL_SPI_TransmitReceive+0x154>
 8005ea2:	e07f      	b.n	8005fa4 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d005      	beq.n	8005eb8 <HAL_SPI_TransmitReceive+0x168>
 8005eac:	2312      	movs	r3, #18
 8005eae:	18fb      	adds	r3, r7, r3
 8005eb0:	881b      	ldrh	r3, [r3, #0]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d000      	beq.n	8005eb8 <HAL_SPI_TransmitReceive+0x168>
 8005eb6:	e069      	b.n	8005f8c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebc:	881a      	ldrh	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec8:	1c9a      	adds	r2, r3, #2
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005edc:	e056      	b.n	8005f8c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d11b      	bne.n	8005f24 <HAL_SPI_TransmitReceive+0x1d4>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d016      	beq.n	8005f24 <HAL_SPI_TransmitReceive+0x1d4>
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d113      	bne.n	8005f24 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f00:	881a      	ldrh	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0c:	1c9a      	adds	r2, r3, #2
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d11c      	bne.n	8005f6c <HAL_SPI_TransmitReceive+0x21c>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2246      	movs	r2, #70	; 0x46
 8005f36:	5a9b      	ldrh	r3, [r3, r2]
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d016      	beq.n	8005f6c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f48:	b292      	uxth	r2, r2
 8005f4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f50:	1c9a      	adds	r2, r3, #2
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2246      	movs	r2, #70	; 0x46
 8005f5a:	5a9b      	ldrh	r3, [r3, r2]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	b299      	uxth	r1, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2246      	movs	r2, #70	; 0x46
 8005f66:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f6c:	f7fd fd98 	bl	8003aa0 <HAL_GetTick>
 8005f70:	0002      	movs	r2, r0
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d807      	bhi.n	8005f8c <HAL_SPI_TransmitReceive+0x23c>
 8005f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7e:	3301      	adds	r3, #1
 8005f80:	d004      	beq.n	8005f8c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8005f82:	2323      	movs	r3, #35	; 0x23
 8005f84:	18fb      	adds	r3, r7, r3
 8005f86:	2203      	movs	r2, #3
 8005f88:	701a      	strb	r2, [r3, #0]
        goto error;
 8005f8a:	e0a2      	b.n	80060d2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1a3      	bne.n	8005ede <HAL_SPI_TransmitReceive+0x18e>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2246      	movs	r2, #70	; 0x46
 8005f9a:	5a9b      	ldrh	r3, [r3, r2]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d19d      	bne.n	8005ede <HAL_SPI_TransmitReceive+0x18e>
 8005fa2:	e085      	b.n	80060b0 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d005      	beq.n	8005fb8 <HAL_SPI_TransmitReceive+0x268>
 8005fac:	2312      	movs	r3, #18
 8005fae:	18fb      	adds	r3, r7, r3
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d000      	beq.n	8005fb8 <HAL_SPI_TransmitReceive+0x268>
 8005fb6:	e070      	b.n	800609a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	330c      	adds	r3, #12
 8005fc2:	7812      	ldrb	r2, [r2, #0]
 8005fc4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fca:	1c5a      	adds	r2, r3, #1
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fde:	e05c      	b.n	800609a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	4013      	ands	r3, r2
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d11c      	bne.n	8006028 <HAL_SPI_TransmitReceive+0x2d8>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d017      	beq.n	8006028 <HAL_SPI_TransmitReceive+0x2d8>
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d114      	bne.n	8006028 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	330c      	adds	r3, #12
 8006008:	7812      	ldrb	r2, [r2, #0]
 800600a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800601a:	b29b      	uxth	r3, r3
 800601c:	3b01      	subs	r3, #1
 800601e:	b29a      	uxth	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006024:	2300      	movs	r3, #0
 8006026:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	2201      	movs	r2, #1
 8006030:	4013      	ands	r3, r2
 8006032:	2b01      	cmp	r3, #1
 8006034:	d11e      	bne.n	8006074 <HAL_SPI_TransmitReceive+0x324>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2246      	movs	r2, #70	; 0x46
 800603a:	5a9b      	ldrh	r3, [r3, r2]
 800603c:	b29b      	uxth	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d018      	beq.n	8006074 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	330c      	adds	r3, #12
 8006048:	001a      	movs	r2, r3
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604e:	7812      	ldrb	r2, [r2, #0]
 8006050:	b2d2      	uxtb	r2, r2
 8006052:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2246      	movs	r2, #70	; 0x46
 8006062:	5a9b      	ldrh	r3, [r3, r2]
 8006064:	b29b      	uxth	r3, r3
 8006066:	3b01      	subs	r3, #1
 8006068:	b299      	uxth	r1, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2246      	movs	r2, #70	; 0x46
 800606e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006070:	2301      	movs	r3, #1
 8006072:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006074:	f7fd fd14 	bl	8003aa0 <HAL_GetTick>
 8006078:	0002      	movs	r2, r0
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006080:	429a      	cmp	r2, r3
 8006082:	d802      	bhi.n	800608a <HAL_SPI_TransmitReceive+0x33a>
 8006084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006086:	3301      	adds	r3, #1
 8006088:	d102      	bne.n	8006090 <HAL_SPI_TransmitReceive+0x340>
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	2b00      	cmp	r3, #0
 800608e:	d104      	bne.n	800609a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006090:	2323      	movs	r3, #35	; 0x23
 8006092:	18fb      	adds	r3, r7, r3
 8006094:	2203      	movs	r2, #3
 8006096:	701a      	strb	r2, [r3, #0]
        goto error;
 8006098:	e01b      	b.n	80060d2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800609e:	b29b      	uxth	r3, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d19d      	bne.n	8005fe0 <HAL_SPI_TransmitReceive+0x290>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2246      	movs	r2, #70	; 0x46
 80060a8:	5a9b      	ldrh	r3, [r3, r2]
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d197      	bne.n	8005fe0 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060b0:	69fa      	ldr	r2, [r7, #28]
 80060b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	0018      	movs	r0, r3
 80060b8:	f000 fa68 	bl	800658c <SPI_EndRxTxTransaction>
 80060bc:	1e03      	subs	r3, r0, #0
 80060be:	d007      	beq.n	80060d0 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80060c0:	2323      	movs	r3, #35	; 0x23
 80060c2:	18fb      	adds	r3, r7, r3
 80060c4:	2201      	movs	r2, #1
 80060c6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2220      	movs	r2, #32
 80060cc:	661a      	str	r2, [r3, #96]	; 0x60
 80060ce:	e000      	b.n	80060d2 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80060d0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	225d      	movs	r2, #93	; 0x5d
 80060d6:	2101      	movs	r1, #1
 80060d8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	225c      	movs	r2, #92	; 0x5c
 80060de:	2100      	movs	r1, #0
 80060e0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80060e2:	2323      	movs	r3, #35	; 0x23
 80060e4:	18fb      	adds	r3, r7, r3
 80060e6:	781b      	ldrb	r3, [r3, #0]
}
 80060e8:	0018      	movs	r0, r3
 80060ea:	46bd      	mov	sp, r7
 80060ec:	b00a      	add	sp, #40	; 0x28
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	ffffefff 	.word	0xffffefff

080060f4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b088      	sub	sp, #32
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	099b      	lsrs	r3, r3, #6
 8006110:	001a      	movs	r2, r3
 8006112:	2301      	movs	r3, #1
 8006114:	4013      	ands	r3, r2
 8006116:	d10f      	bne.n	8006138 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	2201      	movs	r2, #1
 800611c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800611e:	d00b      	beq.n	8006138 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	099b      	lsrs	r3, r3, #6
 8006124:	001a      	movs	r2, r3
 8006126:	2301      	movs	r3, #1
 8006128:	4013      	ands	r3, r2
 800612a:	d005      	beq.n	8006138 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	0010      	movs	r0, r2
 8006134:	4798      	blx	r3
    return;
 8006136:	e0d5      	b.n	80062e4 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	085b      	lsrs	r3, r3, #1
 800613c:	001a      	movs	r2, r3
 800613e:	2301      	movs	r3, #1
 8006140:	4013      	ands	r3, r2
 8006142:	d00b      	beq.n	800615c <HAL_SPI_IRQHandler+0x68>
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	09db      	lsrs	r3, r3, #7
 8006148:	001a      	movs	r2, r3
 800614a:	2301      	movs	r3, #1
 800614c:	4013      	ands	r3, r2
 800614e:	d005      	beq.n	800615c <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	0010      	movs	r0, r2
 8006158:	4798      	blx	r3
    return;
 800615a:	e0c3      	b.n	80062e4 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	095b      	lsrs	r3, r3, #5
 8006160:	001a      	movs	r2, r3
 8006162:	2301      	movs	r3, #1
 8006164:	4013      	ands	r3, r2
 8006166:	d10c      	bne.n	8006182 <HAL_SPI_IRQHandler+0x8e>
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	099b      	lsrs	r3, r3, #6
 800616c:	001a      	movs	r2, r3
 800616e:	2301      	movs	r3, #1
 8006170:	4013      	ands	r3, r2
 8006172:	d106      	bne.n	8006182 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	0a1b      	lsrs	r3, r3, #8
 8006178:	001a      	movs	r2, r3
 800617a:	2301      	movs	r3, #1
 800617c:	4013      	ands	r3, r2
 800617e:	d100      	bne.n	8006182 <HAL_SPI_IRQHandler+0x8e>
 8006180:	e0b0      	b.n	80062e4 <HAL_SPI_IRQHandler+0x1f0>
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	095b      	lsrs	r3, r3, #5
 8006186:	001a      	movs	r2, r3
 8006188:	2301      	movs	r3, #1
 800618a:	4013      	ands	r3, r2
 800618c:	d100      	bne.n	8006190 <HAL_SPI_IRQHandler+0x9c>
 800618e:	e0a9      	b.n	80062e4 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	099b      	lsrs	r3, r3, #6
 8006194:	001a      	movs	r2, r3
 8006196:	2301      	movs	r3, #1
 8006198:	4013      	ands	r3, r2
 800619a:	d023      	beq.n	80061e4 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	225d      	movs	r2, #93	; 0x5d
 80061a0:	5c9b      	ldrb	r3, [r3, r2]
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b03      	cmp	r3, #3
 80061a6:	d011      	beq.n	80061cc <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061ac:	2204      	movs	r2, #4
 80061ae:	431a      	orrs	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061b4:	2300      	movs	r3, #0
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	617b      	str	r3, [r7, #20]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	617b      	str	r3, [r7, #20]
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	e00b      	b.n	80061e4 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061cc:	2300      	movs	r3, #0
 80061ce:	613b      	str	r3, [r7, #16]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	613b      	str	r3, [r7, #16]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	613b      	str	r3, [r7, #16]
 80061e0:	693b      	ldr	r3, [r7, #16]
        return;
 80061e2:	e07f      	b.n	80062e4 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	095b      	lsrs	r3, r3, #5
 80061e8:	001a      	movs	r2, r3
 80061ea:	2301      	movs	r3, #1
 80061ec:	4013      	ands	r3, r2
 80061ee:	d014      	beq.n	800621a <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061f4:	2201      	movs	r2, #1
 80061f6:	431a      	orrs	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80061fc:	2300      	movs	r3, #0
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	60fb      	str	r3, [r7, #12]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2140      	movs	r1, #64	; 0x40
 8006214:	438a      	bics	r2, r1
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	0a1b      	lsrs	r3, r3, #8
 800621e:	001a      	movs	r2, r3
 8006220:	2301      	movs	r3, #1
 8006222:	4013      	ands	r3, r2
 8006224:	d00c      	beq.n	8006240 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800622a:	2208      	movs	r2, #8
 800622c:	431a      	orrs	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006232:	2300      	movs	r3, #0
 8006234:	60bb      	str	r3, [r7, #8]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	60bb      	str	r3, [r7, #8]
 800623e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006244:	2b00      	cmp	r3, #0
 8006246:	d04c      	beq.n	80062e2 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	21e0      	movs	r1, #224	; 0xe0
 8006254:	438a      	bics	r2, r1
 8006256:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	225d      	movs	r2, #93	; 0x5d
 800625c:	2101      	movs	r1, #1
 800625e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	2202      	movs	r2, #2
 8006264:	4013      	ands	r3, r2
 8006266:	d103      	bne.n	8006270 <HAL_SPI_IRQHandler+0x17c>
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	2201      	movs	r2, #1
 800626c:	4013      	ands	r3, r2
 800626e:	d032      	beq.n	80062d6 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2103      	movs	r1, #3
 800627c:	438a      	bics	r2, r1
 800627e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006284:	2b00      	cmp	r3, #0
 8006286:	d010      	beq.n	80062aa <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800628c:	4a17      	ldr	r2, [pc, #92]	; (80062ec <HAL_SPI_IRQHandler+0x1f8>)
 800628e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006294:	0018      	movs	r0, r3
 8006296:	f7fe fa25 	bl	80046e4 <HAL_DMA_Abort_IT>
 800629a:	1e03      	subs	r3, r0, #0
 800629c:	d005      	beq.n	80062aa <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a2:	2240      	movs	r2, #64	; 0x40
 80062a4:	431a      	orrs	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d016      	beq.n	80062e0 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b6:	4a0d      	ldr	r2, [pc, #52]	; (80062ec <HAL_SPI_IRQHandler+0x1f8>)
 80062b8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062be:	0018      	movs	r0, r3
 80062c0:	f7fe fa10 	bl	80046e4 <HAL_DMA_Abort_IT>
 80062c4:	1e03      	subs	r3, r0, #0
 80062c6:	d00b      	beq.n	80062e0 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062cc:	2240      	movs	r2, #64	; 0x40
 80062ce:	431a      	orrs	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80062d4:	e004      	b.n	80062e0 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	0018      	movs	r0, r3
 80062da:	f000 f809 	bl	80062f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80062de:	e000      	b.n	80062e2 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 80062e0:	46c0      	nop			; (mov r8, r8)
    return;
 80062e2:	46c0      	nop			; (mov r8, r8)
  }
}
 80062e4:	46bd      	mov	sp, r7
 80062e6:	b008      	add	sp, #32
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	46c0      	nop			; (mov r8, r8)
 80062ec:	08006301 	.word	0x08006301

080062f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80062f8:	46c0      	nop			; (mov r8, r8)
 80062fa:	46bd      	mov	sp, r7
 80062fc:	b002      	add	sp, #8
 80062fe:	bd80      	pop	{r7, pc}

08006300 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2246      	movs	r2, #70	; 0x46
 8006312:	2100      	movs	r1, #0
 8006314:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	0018      	movs	r0, r3
 8006320:	f7ff ffe6 	bl	80062f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006324:	46c0      	nop			; (mov r8, r8)
 8006326:	46bd      	mov	sp, r7
 8006328:	b004      	add	sp, #16
 800632a:	bd80      	pop	{r7, pc}

0800632c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b088      	sub	sp, #32
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	603b      	str	r3, [r7, #0]
 8006338:	1dfb      	adds	r3, r7, #7
 800633a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800633c:	f7fd fbb0 	bl	8003aa0 <HAL_GetTick>
 8006340:	0002      	movs	r2, r0
 8006342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006344:	1a9b      	subs	r3, r3, r2
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	18d3      	adds	r3, r2, r3
 800634a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800634c:	f7fd fba8 	bl	8003aa0 <HAL_GetTick>
 8006350:	0003      	movs	r3, r0
 8006352:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006354:	4b3a      	ldr	r3, [pc, #232]	; (8006440 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	015b      	lsls	r3, r3, #5
 800635a:	0d1b      	lsrs	r3, r3, #20
 800635c:	69fa      	ldr	r2, [r7, #28]
 800635e:	4353      	muls	r3, r2
 8006360:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006362:	e058      	b.n	8006416 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	3301      	adds	r3, #1
 8006368:	d055      	beq.n	8006416 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800636a:	f7fd fb99 	bl	8003aa0 <HAL_GetTick>
 800636e:	0002      	movs	r2, r0
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	69fa      	ldr	r2, [r7, #28]
 8006376:	429a      	cmp	r2, r3
 8006378:	d902      	bls.n	8006380 <SPI_WaitFlagStateUntilTimeout+0x54>
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d142      	bne.n	8006406 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	21e0      	movs	r1, #224	; 0xe0
 800638c:	438a      	bics	r2, r1
 800638e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	2382      	movs	r3, #130	; 0x82
 8006396:	005b      	lsls	r3, r3, #1
 8006398:	429a      	cmp	r2, r3
 800639a:	d113      	bne.n	80063c4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	2380      	movs	r3, #128	; 0x80
 80063a2:	021b      	lsls	r3, r3, #8
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d005      	beq.n	80063b4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	689a      	ldr	r2, [r3, #8]
 80063ac:	2380      	movs	r3, #128	; 0x80
 80063ae:	00db      	lsls	r3, r3, #3
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d107      	bne.n	80063c4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2140      	movs	r1, #64	; 0x40
 80063c0:	438a      	bics	r2, r1
 80063c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063c8:	2380      	movs	r3, #128	; 0x80
 80063ca:	019b      	lsls	r3, r3, #6
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d110      	bne.n	80063f2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	491a      	ldr	r1, [pc, #104]	; (8006444 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80063dc:	400a      	ands	r2, r1
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2180      	movs	r1, #128	; 0x80
 80063ec:	0189      	lsls	r1, r1, #6
 80063ee:	430a      	orrs	r2, r1
 80063f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	225d      	movs	r2, #93	; 0x5d
 80063f6:	2101      	movs	r1, #1
 80063f8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	225c      	movs	r2, #92	; 0x5c
 80063fe:	2100      	movs	r1, #0
 8006400:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e017      	b.n	8006436 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d101      	bne.n	8006410 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800640c:	2300      	movs	r3, #0
 800640e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	3b01      	subs	r3, #1
 8006414:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	4013      	ands	r3, r2
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	425a      	negs	r2, r3
 8006426:	4153      	adcs	r3, r2
 8006428:	b2db      	uxtb	r3, r3
 800642a:	001a      	movs	r2, r3
 800642c:	1dfb      	adds	r3, r7, #7
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	429a      	cmp	r2, r3
 8006432:	d197      	bne.n	8006364 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	0018      	movs	r0, r3
 8006438:	46bd      	mov	sp, r7
 800643a:	b008      	add	sp, #32
 800643c:	bd80      	pop	{r7, pc}
 800643e:	46c0      	nop			; (mov r8, r8)
 8006440:	20000044 	.word	0x20000044
 8006444:	ffffdfff 	.word	0xffffdfff

08006448 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b08a      	sub	sp, #40	; 0x28
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
 8006454:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006456:	2317      	movs	r3, #23
 8006458:	18fb      	adds	r3, r7, r3
 800645a:	2200      	movs	r2, #0
 800645c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800645e:	f7fd fb1f 	bl	8003aa0 <HAL_GetTick>
 8006462:	0002      	movs	r2, r0
 8006464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006466:	1a9b      	subs	r3, r3, r2
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	18d3      	adds	r3, r2, r3
 800646c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800646e:	f7fd fb17 	bl	8003aa0 <HAL_GetTick>
 8006472:	0003      	movs	r3, r0
 8006474:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	330c      	adds	r3, #12
 800647c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800647e:	4b41      	ldr	r3, [pc, #260]	; (8006584 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	0013      	movs	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	189b      	adds	r3, r3, r2
 8006488:	00da      	lsls	r2, r3, #3
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	0d1b      	lsrs	r3, r3, #20
 800648e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006490:	4353      	muls	r3, r2
 8006492:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006494:	e068      	b.n	8006568 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	23c0      	movs	r3, #192	; 0xc0
 800649a:	00db      	lsls	r3, r3, #3
 800649c:	429a      	cmp	r2, r3
 800649e:	d10a      	bne.n	80064b6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d107      	bne.n	80064b6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	2117      	movs	r1, #23
 80064ae:	187b      	adds	r3, r7, r1
 80064b0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80064b2:	187b      	adds	r3, r7, r1
 80064b4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	3301      	adds	r3, #1
 80064ba:	d055      	beq.n	8006568 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064bc:	f7fd faf0 	bl	8003aa0 <HAL_GetTick>
 80064c0:	0002      	movs	r2, r0
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d902      	bls.n	80064d2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d142      	bne.n	8006558 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	21e0      	movs	r1, #224	; 0xe0
 80064de:	438a      	bics	r2, r1
 80064e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	2382      	movs	r3, #130	; 0x82
 80064e8:	005b      	lsls	r3, r3, #1
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d113      	bne.n	8006516 <SPI_WaitFifoStateUntilTimeout+0xce>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	689a      	ldr	r2, [r3, #8]
 80064f2:	2380      	movs	r3, #128	; 0x80
 80064f4:	021b      	lsls	r3, r3, #8
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d005      	beq.n	8006506 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	689a      	ldr	r2, [r3, #8]
 80064fe:	2380      	movs	r3, #128	; 0x80
 8006500:	00db      	lsls	r3, r3, #3
 8006502:	429a      	cmp	r2, r3
 8006504:	d107      	bne.n	8006516 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2140      	movs	r1, #64	; 0x40
 8006512:	438a      	bics	r2, r1
 8006514:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800651a:	2380      	movs	r3, #128	; 0x80
 800651c:	019b      	lsls	r3, r3, #6
 800651e:	429a      	cmp	r2, r3
 8006520:	d110      	bne.n	8006544 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4916      	ldr	r1, [pc, #88]	; (8006588 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800652e:	400a      	ands	r2, r1
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2180      	movs	r1, #128	; 0x80
 800653e:	0189      	lsls	r1, r1, #6
 8006540:	430a      	orrs	r2, r1
 8006542:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	225d      	movs	r2, #93	; 0x5d
 8006548:	2101      	movs	r1, #1
 800654a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	225c      	movs	r2, #92	; 0x5c
 8006550:	2100      	movs	r1, #0
 8006552:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e010      	b.n	800657a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800655e:	2300      	movs	r3, #0
 8006560:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	3b01      	subs	r3, #1
 8006566:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	4013      	ands	r3, r2
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	429a      	cmp	r2, r3
 8006576:	d18e      	bne.n	8006496 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	0018      	movs	r0, r3
 800657c:	46bd      	mov	sp, r7
 800657e:	b00a      	add	sp, #40	; 0x28
 8006580:	bd80      	pop	{r7, pc}
 8006582:	46c0      	nop			; (mov r8, r8)
 8006584:	20000044 	.word	0x20000044
 8006588:	ffffdfff 	.word	0xffffdfff

0800658c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b086      	sub	sp, #24
 8006590:	af02      	add	r7, sp, #8
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	23c0      	movs	r3, #192	; 0xc0
 800659c:	0159      	lsls	r1, r3, #5
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	0013      	movs	r3, r2
 80065a6:	2200      	movs	r2, #0
 80065a8:	f7ff ff4e 	bl	8006448 <SPI_WaitFifoStateUntilTimeout>
 80065ac:	1e03      	subs	r3, r0, #0
 80065ae:	d007      	beq.n	80065c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065b4:	2220      	movs	r2, #32
 80065b6:	431a      	orrs	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e027      	b.n	8006610 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	0013      	movs	r3, r2
 80065ca:	2200      	movs	r2, #0
 80065cc:	2180      	movs	r1, #128	; 0x80
 80065ce:	f7ff fead 	bl	800632c <SPI_WaitFlagStateUntilTimeout>
 80065d2:	1e03      	subs	r3, r0, #0
 80065d4:	d007      	beq.n	80065e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065da:	2220      	movs	r2, #32
 80065dc:	431a      	orrs	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e014      	b.n	8006610 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	23c0      	movs	r3, #192	; 0xc0
 80065ea:	00d9      	lsls	r1, r3, #3
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	0013      	movs	r3, r2
 80065f4:	2200      	movs	r2, #0
 80065f6:	f7ff ff27 	bl	8006448 <SPI_WaitFifoStateUntilTimeout>
 80065fa:	1e03      	subs	r3, r0, #0
 80065fc:	d007      	beq.n	800660e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006602:	2220      	movs	r2, #32
 8006604:	431a      	orrs	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e000      	b.n	8006610 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	0018      	movs	r0, r3
 8006612:	46bd      	mov	sp, r7
 8006614:	b004      	add	sp, #16
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e04a      	b.n	80066c0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	223d      	movs	r2, #61	; 0x3d
 800662e:	5c9b      	ldrb	r3, [r3, r2]
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d107      	bne.n	8006646 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	223c      	movs	r2, #60	; 0x3c
 800663a:	2100      	movs	r1, #0
 800663c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	0018      	movs	r0, r3
 8006642:	f7fc fc47 	bl	8002ed4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	223d      	movs	r2, #61	; 0x3d
 800664a:	2102      	movs	r1, #2
 800664c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	3304      	adds	r3, #4
 8006656:	0019      	movs	r1, r3
 8006658:	0010      	movs	r0, r2
 800665a:	f000 fadd 	bl	8006c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2248      	movs	r2, #72	; 0x48
 8006662:	2101      	movs	r1, #1
 8006664:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	223e      	movs	r2, #62	; 0x3e
 800666a:	2101      	movs	r1, #1
 800666c:	5499      	strb	r1, [r3, r2]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	223f      	movs	r2, #63	; 0x3f
 8006672:	2101      	movs	r1, #1
 8006674:	5499      	strb	r1, [r3, r2]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2240      	movs	r2, #64	; 0x40
 800667a:	2101      	movs	r1, #1
 800667c:	5499      	strb	r1, [r3, r2]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2241      	movs	r2, #65	; 0x41
 8006682:	2101      	movs	r1, #1
 8006684:	5499      	strb	r1, [r3, r2]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2242      	movs	r2, #66	; 0x42
 800668a:	2101      	movs	r1, #1
 800668c:	5499      	strb	r1, [r3, r2]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2243      	movs	r2, #67	; 0x43
 8006692:	2101      	movs	r1, #1
 8006694:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2244      	movs	r2, #68	; 0x44
 800669a:	2101      	movs	r1, #1
 800669c:	5499      	strb	r1, [r3, r2]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2245      	movs	r2, #69	; 0x45
 80066a2:	2101      	movs	r1, #1
 80066a4:	5499      	strb	r1, [r3, r2]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2246      	movs	r2, #70	; 0x46
 80066aa:	2101      	movs	r1, #1
 80066ac:	5499      	strb	r1, [r3, r2]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2247      	movs	r2, #71	; 0x47
 80066b2:	2101      	movs	r1, #1
 80066b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	223d      	movs	r2, #61	; 0x3d
 80066ba:	2101      	movs	r1, #1
 80066bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	0018      	movs	r0, r3
 80066c2:	46bd      	mov	sp, r7
 80066c4:	b002      	add	sp, #8
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	223d      	movs	r2, #61	; 0x3d
 80066d4:	5c9b      	ldrb	r3, [r3, r2]
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d001      	beq.n	80066e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e042      	b.n	8006766 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	223d      	movs	r2, #61	; 0x3d
 80066e4:	2102      	movs	r1, #2
 80066e6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2101      	movs	r1, #1
 80066f4:	430a      	orrs	r2, r1
 80066f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a1c      	ldr	r2, [pc, #112]	; (8006770 <HAL_TIM_Base_Start_IT+0xa8>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d00f      	beq.n	8006722 <HAL_TIM_Base_Start_IT+0x5a>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	2380      	movs	r3, #128	; 0x80
 8006708:	05db      	lsls	r3, r3, #23
 800670a:	429a      	cmp	r2, r3
 800670c:	d009      	beq.n	8006722 <HAL_TIM_Base_Start_IT+0x5a>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a18      	ldr	r2, [pc, #96]	; (8006774 <HAL_TIM_Base_Start_IT+0xac>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d004      	beq.n	8006722 <HAL_TIM_Base_Start_IT+0x5a>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a16      	ldr	r2, [pc, #88]	; (8006778 <HAL_TIM_Base_Start_IT+0xb0>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d116      	bne.n	8006750 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	4a14      	ldr	r2, [pc, #80]	; (800677c <HAL_TIM_Base_Start_IT+0xb4>)
 800672a:	4013      	ands	r3, r2
 800672c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2b06      	cmp	r3, #6
 8006732:	d016      	beq.n	8006762 <HAL_TIM_Base_Start_IT+0x9a>
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	2380      	movs	r3, #128	; 0x80
 8006738:	025b      	lsls	r3, r3, #9
 800673a:	429a      	cmp	r2, r3
 800673c:	d011      	beq.n	8006762 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2101      	movs	r1, #1
 800674a:	430a      	orrs	r2, r1
 800674c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800674e:	e008      	b.n	8006762 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2101      	movs	r1, #1
 800675c:	430a      	orrs	r2, r1
 800675e:	601a      	str	r2, [r3, #0]
 8006760:	e000      	b.n	8006764 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006762:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	0018      	movs	r0, r3
 8006768:	46bd      	mov	sp, r7
 800676a:	b004      	add	sp, #16
 800676c:	bd80      	pop	{r7, pc}
 800676e:	46c0      	nop			; (mov r8, r8)
 8006770:	40012c00 	.word	0x40012c00
 8006774:	40000400 	.word	0x40000400
 8006778:	40014000 	.word	0x40014000
 800677c:	00010007 	.word	0x00010007

08006780 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68da      	ldr	r2, [r3, #12]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2101      	movs	r1, #1
 8006794:	438a      	bics	r2, r1
 8006796:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	4a0d      	ldr	r2, [pc, #52]	; (80067d4 <HAL_TIM_Base_Stop_IT+0x54>)
 80067a0:	4013      	ands	r3, r2
 80067a2:	d10d      	bne.n	80067c0 <HAL_TIM_Base_Stop_IT+0x40>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	4a0b      	ldr	r2, [pc, #44]	; (80067d8 <HAL_TIM_Base_Stop_IT+0x58>)
 80067ac:	4013      	ands	r3, r2
 80067ae:	d107      	bne.n	80067c0 <HAL_TIM_Base_Stop_IT+0x40>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2101      	movs	r1, #1
 80067bc:	438a      	bics	r2, r1
 80067be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	223d      	movs	r2, #61	; 0x3d
 80067c4:	2101      	movs	r1, #1
 80067c6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	0018      	movs	r0, r3
 80067cc:	46bd      	mov	sp, r7
 80067ce:	b002      	add	sp, #8
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	46c0      	nop			; (mov r8, r8)
 80067d4:	00001111 	.word	0x00001111
 80067d8:	00000444 	.word	0x00000444

080067dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	2202      	movs	r2, #2
 80067ec:	4013      	ands	r3, r2
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d124      	bne.n	800683c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	2202      	movs	r2, #2
 80067fa:	4013      	ands	r3, r2
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d11d      	bne.n	800683c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2203      	movs	r2, #3
 8006806:	4252      	negs	r2, r2
 8006808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	2203      	movs	r2, #3
 8006818:	4013      	ands	r3, r2
 800681a:	d004      	beq.n	8006826 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	0018      	movs	r0, r3
 8006820:	f000 f9e2 	bl	8006be8 <HAL_TIM_IC_CaptureCallback>
 8006824:	e007      	b.n	8006836 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	0018      	movs	r0, r3
 800682a:	f000 f9d5 	bl	8006bd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	0018      	movs	r0, r3
 8006832:	f000 f9e1 	bl	8006bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	2204      	movs	r2, #4
 8006844:	4013      	ands	r3, r2
 8006846:	2b04      	cmp	r3, #4
 8006848:	d125      	bne.n	8006896 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	2204      	movs	r2, #4
 8006852:	4013      	ands	r3, r2
 8006854:	2b04      	cmp	r3, #4
 8006856:	d11e      	bne.n	8006896 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2205      	movs	r2, #5
 800685e:	4252      	negs	r2, r2
 8006860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2202      	movs	r2, #2
 8006866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	699a      	ldr	r2, [r3, #24]
 800686e:	23c0      	movs	r3, #192	; 0xc0
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4013      	ands	r3, r2
 8006874:	d004      	beq.n	8006880 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	0018      	movs	r0, r3
 800687a:	f000 f9b5 	bl	8006be8 <HAL_TIM_IC_CaptureCallback>
 800687e:	e007      	b.n	8006890 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	0018      	movs	r0, r3
 8006884:	f000 f9a8 	bl	8006bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	0018      	movs	r0, r3
 800688c:	f000 f9b4 	bl	8006bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	2208      	movs	r2, #8
 800689e:	4013      	ands	r3, r2
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	d124      	bne.n	80068ee <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	2208      	movs	r2, #8
 80068ac:	4013      	ands	r3, r2
 80068ae:	2b08      	cmp	r3, #8
 80068b0:	d11d      	bne.n	80068ee <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2209      	movs	r2, #9
 80068b8:	4252      	negs	r2, r2
 80068ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2204      	movs	r2, #4
 80068c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69db      	ldr	r3, [r3, #28]
 80068c8:	2203      	movs	r2, #3
 80068ca:	4013      	ands	r3, r2
 80068cc:	d004      	beq.n	80068d8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	0018      	movs	r0, r3
 80068d2:	f000 f989 	bl	8006be8 <HAL_TIM_IC_CaptureCallback>
 80068d6:	e007      	b.n	80068e8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	0018      	movs	r0, r3
 80068dc:	f000 f97c 	bl	8006bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	0018      	movs	r0, r3
 80068e4:	f000 f988 	bl	8006bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	2210      	movs	r2, #16
 80068f6:	4013      	ands	r3, r2
 80068f8:	2b10      	cmp	r3, #16
 80068fa:	d125      	bne.n	8006948 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	2210      	movs	r2, #16
 8006904:	4013      	ands	r3, r2
 8006906:	2b10      	cmp	r3, #16
 8006908:	d11e      	bne.n	8006948 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2211      	movs	r2, #17
 8006910:	4252      	negs	r2, r2
 8006912:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2208      	movs	r2, #8
 8006918:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	69da      	ldr	r2, [r3, #28]
 8006920:	23c0      	movs	r3, #192	; 0xc0
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4013      	ands	r3, r2
 8006926:	d004      	beq.n	8006932 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	0018      	movs	r0, r3
 800692c:	f000 f95c 	bl	8006be8 <HAL_TIM_IC_CaptureCallback>
 8006930:	e007      	b.n	8006942 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	0018      	movs	r0, r3
 8006936:	f000 f94f 	bl	8006bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	0018      	movs	r0, r3
 800693e:	f000 f95b 	bl	8006bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	2201      	movs	r2, #1
 8006950:	4013      	ands	r3, r2
 8006952:	2b01      	cmp	r3, #1
 8006954:	d10f      	bne.n	8006976 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	2201      	movs	r2, #1
 800695e:	4013      	ands	r3, r2
 8006960:	2b01      	cmp	r3, #1
 8006962:	d108      	bne.n	8006976 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2202      	movs	r2, #2
 800696a:	4252      	negs	r2, r2
 800696c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	0018      	movs	r0, r3
 8006972:	f7fc fed7 	bl	8003724 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	2280      	movs	r2, #128	; 0x80
 800697e:	4013      	ands	r3, r2
 8006980:	2b80      	cmp	r3, #128	; 0x80
 8006982:	d10f      	bne.n	80069a4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	2280      	movs	r2, #128	; 0x80
 800698c:	4013      	ands	r3, r2
 800698e:	2b80      	cmp	r3, #128	; 0x80
 8006990:	d108      	bne.n	80069a4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2281      	movs	r2, #129	; 0x81
 8006998:	4252      	negs	r2, r2
 800699a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	0018      	movs	r0, r3
 80069a0:	f000 facc 	bl	8006f3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	691a      	ldr	r2, [r3, #16]
 80069aa:	2380      	movs	r3, #128	; 0x80
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	401a      	ands	r2, r3
 80069b0:	2380      	movs	r3, #128	; 0x80
 80069b2:	005b      	lsls	r3, r3, #1
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d10e      	bne.n	80069d6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	2280      	movs	r2, #128	; 0x80
 80069c0:	4013      	ands	r3, r2
 80069c2:	2b80      	cmp	r3, #128	; 0x80
 80069c4:	d107      	bne.n	80069d6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a1c      	ldr	r2, [pc, #112]	; (8006a3c <HAL_TIM_IRQHandler+0x260>)
 80069cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	0018      	movs	r0, r3
 80069d2:	f000 fabb 	bl	8006f4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	2240      	movs	r2, #64	; 0x40
 80069de:	4013      	ands	r3, r2
 80069e0:	2b40      	cmp	r3, #64	; 0x40
 80069e2:	d10f      	bne.n	8006a04 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	2240      	movs	r2, #64	; 0x40
 80069ec:	4013      	ands	r3, r2
 80069ee:	2b40      	cmp	r3, #64	; 0x40
 80069f0:	d108      	bne.n	8006a04 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2241      	movs	r2, #65	; 0x41
 80069f8:	4252      	negs	r2, r2
 80069fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	0018      	movs	r0, r3
 8006a00:	f000 f902 	bl	8006c08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	2b20      	cmp	r3, #32
 8006a10:	d10f      	bne.n	8006a32 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	2b20      	cmp	r3, #32
 8006a1e:	d108      	bne.n	8006a32 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2221      	movs	r2, #33	; 0x21
 8006a26:	4252      	negs	r2, r2
 8006a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	0018      	movs	r0, r3
 8006a2e:	f000 fa7d 	bl	8006f2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a32:	46c0      	nop			; (mov r8, r8)
 8006a34:	46bd      	mov	sp, r7
 8006a36:	b002      	add	sp, #8
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	46c0      	nop			; (mov r8, r8)
 8006a3c:	fffffeff 	.word	0xfffffeff

08006a40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	223c      	movs	r2, #60	; 0x3c
 8006a4e:	5c9b      	ldrb	r3, [r3, r2]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d101      	bne.n	8006a58 <HAL_TIM_ConfigClockSource+0x18>
 8006a54:	2302      	movs	r3, #2
 8006a56:	e0b7      	b.n	8006bc8 <HAL_TIM_ConfigClockSource+0x188>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	223c      	movs	r2, #60	; 0x3c
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	223d      	movs	r2, #61	; 0x3d
 8006a64:	2102      	movs	r1, #2
 8006a66:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4a57      	ldr	r2, [pc, #348]	; (8006bd0 <HAL_TIM_ConfigClockSource+0x190>)
 8006a74:	4013      	ands	r3, r2
 8006a76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4a56      	ldr	r2, [pc, #344]	; (8006bd4 <HAL_TIM_ConfigClockSource+0x194>)
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2280      	movs	r2, #128	; 0x80
 8006a8e:	0192      	lsls	r2, r2, #6
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d040      	beq.n	8006b16 <HAL_TIM_ConfigClockSource+0xd6>
 8006a94:	2280      	movs	r2, #128	; 0x80
 8006a96:	0192      	lsls	r2, r2, #6
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d900      	bls.n	8006a9e <HAL_TIM_ConfigClockSource+0x5e>
 8006a9c:	e088      	b.n	8006bb0 <HAL_TIM_ConfigClockSource+0x170>
 8006a9e:	2280      	movs	r2, #128	; 0x80
 8006aa0:	0152      	lsls	r2, r2, #5
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d100      	bne.n	8006aa8 <HAL_TIM_ConfigClockSource+0x68>
 8006aa6:	e085      	b.n	8006bb4 <HAL_TIM_ConfigClockSource+0x174>
 8006aa8:	2280      	movs	r2, #128	; 0x80
 8006aaa:	0152      	lsls	r2, r2, #5
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d900      	bls.n	8006ab2 <HAL_TIM_ConfigClockSource+0x72>
 8006ab0:	e07e      	b.n	8006bb0 <HAL_TIM_ConfigClockSource+0x170>
 8006ab2:	2b70      	cmp	r3, #112	; 0x70
 8006ab4:	d018      	beq.n	8006ae8 <HAL_TIM_ConfigClockSource+0xa8>
 8006ab6:	d900      	bls.n	8006aba <HAL_TIM_ConfigClockSource+0x7a>
 8006ab8:	e07a      	b.n	8006bb0 <HAL_TIM_ConfigClockSource+0x170>
 8006aba:	2b60      	cmp	r3, #96	; 0x60
 8006abc:	d04f      	beq.n	8006b5e <HAL_TIM_ConfigClockSource+0x11e>
 8006abe:	d900      	bls.n	8006ac2 <HAL_TIM_ConfigClockSource+0x82>
 8006ac0:	e076      	b.n	8006bb0 <HAL_TIM_ConfigClockSource+0x170>
 8006ac2:	2b50      	cmp	r3, #80	; 0x50
 8006ac4:	d03b      	beq.n	8006b3e <HAL_TIM_ConfigClockSource+0xfe>
 8006ac6:	d900      	bls.n	8006aca <HAL_TIM_ConfigClockSource+0x8a>
 8006ac8:	e072      	b.n	8006bb0 <HAL_TIM_ConfigClockSource+0x170>
 8006aca:	2b40      	cmp	r3, #64	; 0x40
 8006acc:	d057      	beq.n	8006b7e <HAL_TIM_ConfigClockSource+0x13e>
 8006ace:	d900      	bls.n	8006ad2 <HAL_TIM_ConfigClockSource+0x92>
 8006ad0:	e06e      	b.n	8006bb0 <HAL_TIM_ConfigClockSource+0x170>
 8006ad2:	2b30      	cmp	r3, #48	; 0x30
 8006ad4:	d063      	beq.n	8006b9e <HAL_TIM_ConfigClockSource+0x15e>
 8006ad6:	d86b      	bhi.n	8006bb0 <HAL_TIM_ConfigClockSource+0x170>
 8006ad8:	2b20      	cmp	r3, #32
 8006ada:	d060      	beq.n	8006b9e <HAL_TIM_ConfigClockSource+0x15e>
 8006adc:	d868      	bhi.n	8006bb0 <HAL_TIM_ConfigClockSource+0x170>
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d05d      	beq.n	8006b9e <HAL_TIM_ConfigClockSource+0x15e>
 8006ae2:	2b10      	cmp	r3, #16
 8006ae4:	d05b      	beq.n	8006b9e <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006ae6:	e063      	b.n	8006bb0 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6818      	ldr	r0, [r3, #0]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	6899      	ldr	r1, [r3, #8]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f000 f98a 	bl	8006e10 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2277      	movs	r2, #119	; 0x77
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	609a      	str	r2, [r3, #8]
      break;
 8006b14:	e04f      	b.n	8006bb6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6818      	ldr	r0, [r3, #0]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	6899      	ldr	r1, [r3, #8]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	f000 f973 	bl	8006e10 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689a      	ldr	r2, [r3, #8]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2180      	movs	r1, #128	; 0x80
 8006b36:	01c9      	lsls	r1, r1, #7
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	609a      	str	r2, [r3, #8]
      break;
 8006b3c:	e03b      	b.n	8006bb6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6818      	ldr	r0, [r3, #0]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	6859      	ldr	r1, [r3, #4]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	001a      	movs	r2, r3
 8006b4c:	f000 f8e4 	bl	8006d18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2150      	movs	r1, #80	; 0x50
 8006b56:	0018      	movs	r0, r3
 8006b58:	f000 f93e 	bl	8006dd8 <TIM_ITRx_SetConfig>
      break;
 8006b5c:	e02b      	b.n	8006bb6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6818      	ldr	r0, [r3, #0]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	6859      	ldr	r1, [r3, #4]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	001a      	movs	r2, r3
 8006b6c:	f000 f902 	bl	8006d74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2160      	movs	r1, #96	; 0x60
 8006b76:	0018      	movs	r0, r3
 8006b78:	f000 f92e 	bl	8006dd8 <TIM_ITRx_SetConfig>
      break;
 8006b7c:	e01b      	b.n	8006bb6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6818      	ldr	r0, [r3, #0]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	6859      	ldr	r1, [r3, #4]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	001a      	movs	r2, r3
 8006b8c:	f000 f8c4 	bl	8006d18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2140      	movs	r1, #64	; 0x40
 8006b96:	0018      	movs	r0, r3
 8006b98:	f000 f91e 	bl	8006dd8 <TIM_ITRx_SetConfig>
      break;
 8006b9c:	e00b      	b.n	8006bb6 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	0019      	movs	r1, r3
 8006ba8:	0010      	movs	r0, r2
 8006baa:	f000 f915 	bl	8006dd8 <TIM_ITRx_SetConfig>
        break;
 8006bae:	e002      	b.n	8006bb6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8006bb0:	46c0      	nop			; (mov r8, r8)
 8006bb2:	e000      	b.n	8006bb6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8006bb4:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	223d      	movs	r2, #61	; 0x3d
 8006bba:	2101      	movs	r1, #1
 8006bbc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	223c      	movs	r2, #60	; 0x3c
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	0018      	movs	r0, r3
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	b004      	add	sp, #16
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	ffceff88 	.word	0xffceff88
 8006bd4:	ffff00ff 	.word	0xffff00ff

08006bd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006be0:	46c0      	nop			; (mov r8, r8)
 8006be2:	46bd      	mov	sp, r7
 8006be4:	b002      	add	sp, #8
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bf0:	46c0      	nop			; (mov r8, r8)
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	b002      	add	sp, #8
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c00:	46c0      	nop			; (mov r8, r8)
 8006c02:	46bd      	mov	sp, r7
 8006c04:	b002      	add	sp, #8
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c10:	46c0      	nop			; (mov r8, r8)
 8006c12:	46bd      	mov	sp, r7
 8006c14:	b002      	add	sp, #8
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a34      	ldr	r2, [pc, #208]	; (8006cfc <TIM_Base_SetConfig+0xe4>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d008      	beq.n	8006c42 <TIM_Base_SetConfig+0x2a>
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	2380      	movs	r3, #128	; 0x80
 8006c34:	05db      	lsls	r3, r3, #23
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d003      	beq.n	8006c42 <TIM_Base_SetConfig+0x2a>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a30      	ldr	r2, [pc, #192]	; (8006d00 <TIM_Base_SetConfig+0xe8>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d108      	bne.n	8006c54 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2270      	movs	r2, #112	; 0x70
 8006c46:	4393      	bics	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a29      	ldr	r2, [pc, #164]	; (8006cfc <TIM_Base_SetConfig+0xe4>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d018      	beq.n	8006c8e <TIM_Base_SetConfig+0x76>
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	2380      	movs	r3, #128	; 0x80
 8006c60:	05db      	lsls	r3, r3, #23
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d013      	beq.n	8006c8e <TIM_Base_SetConfig+0x76>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a25      	ldr	r2, [pc, #148]	; (8006d00 <TIM_Base_SetConfig+0xe8>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d00f      	beq.n	8006c8e <TIM_Base_SetConfig+0x76>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a24      	ldr	r2, [pc, #144]	; (8006d04 <TIM_Base_SetConfig+0xec>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d00b      	beq.n	8006c8e <TIM_Base_SetConfig+0x76>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a23      	ldr	r2, [pc, #140]	; (8006d08 <TIM_Base_SetConfig+0xf0>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d007      	beq.n	8006c8e <TIM_Base_SetConfig+0x76>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a22      	ldr	r2, [pc, #136]	; (8006d0c <TIM_Base_SetConfig+0xf4>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d003      	beq.n	8006c8e <TIM_Base_SetConfig+0x76>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a21      	ldr	r2, [pc, #132]	; (8006d10 <TIM_Base_SetConfig+0xf8>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d108      	bne.n	8006ca0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	4a20      	ldr	r2, [pc, #128]	; (8006d14 <TIM_Base_SetConfig+0xfc>)
 8006c92:	4013      	ands	r3, r2
 8006c94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2280      	movs	r2, #128	; 0x80
 8006ca4:	4393      	bics	r3, r2
 8006ca6:	001a      	movs	r2, r3
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	689a      	ldr	r2, [r3, #8]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a0c      	ldr	r2, [pc, #48]	; (8006cfc <TIM_Base_SetConfig+0xe4>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d00b      	beq.n	8006ce6 <TIM_Base_SetConfig+0xce>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a0d      	ldr	r2, [pc, #52]	; (8006d08 <TIM_Base_SetConfig+0xf0>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d007      	beq.n	8006ce6 <TIM_Base_SetConfig+0xce>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a0c      	ldr	r2, [pc, #48]	; (8006d0c <TIM_Base_SetConfig+0xf4>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d003      	beq.n	8006ce6 <TIM_Base_SetConfig+0xce>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a0b      	ldr	r2, [pc, #44]	; (8006d10 <TIM_Base_SetConfig+0xf8>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d103      	bne.n	8006cee <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	691a      	ldr	r2, [r3, #16]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	615a      	str	r2, [r3, #20]
}
 8006cf4:	46c0      	nop			; (mov r8, r8)
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	b004      	add	sp, #16
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	40012c00 	.word	0x40012c00
 8006d00:	40000400 	.word	0x40000400
 8006d04:	40002000 	.word	0x40002000
 8006d08:	40014000 	.word	0x40014000
 8006d0c:	40014400 	.word	0x40014400
 8006d10:	40014800 	.word	0x40014800
 8006d14:	fffffcff 	.word	0xfffffcff

08006d18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6a1b      	ldr	r3, [r3, #32]
 8006d28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	4393      	bics	r3, r2
 8006d32:	001a      	movs	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	22f0      	movs	r2, #240	; 0xf0
 8006d42:	4393      	bics	r3, r2
 8006d44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	011b      	lsls	r3, r3, #4
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	220a      	movs	r2, #10
 8006d54:	4393      	bics	r3, r2
 8006d56:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	621a      	str	r2, [r3, #32]
}
 8006d6c:	46c0      	nop			; (mov r8, r8)
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	b006      	add	sp, #24
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b086      	sub	sp, #24
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	2210      	movs	r2, #16
 8006d86:	4393      	bics	r3, r2
 8006d88:	001a      	movs	r2, r3
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6a1b      	ldr	r3, [r3, #32]
 8006d98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	4a0d      	ldr	r2, [pc, #52]	; (8006dd4 <TIM_TI2_ConfigInputStage+0x60>)
 8006d9e:	4013      	ands	r3, r2
 8006da0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	031b      	lsls	r3, r3, #12
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	22a0      	movs	r2, #160	; 0xa0
 8006db0:	4393      	bics	r3, r2
 8006db2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	011b      	lsls	r3, r3, #4
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	697a      	ldr	r2, [r7, #20]
 8006dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	621a      	str	r2, [r3, #32]
}
 8006dca:	46c0      	nop			; (mov r8, r8)
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	b006      	add	sp, #24
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	46c0      	nop			; (mov r8, r8)
 8006dd4:	ffff0fff 	.word	0xffff0fff

08006dd8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	4a08      	ldr	r2, [pc, #32]	; (8006e0c <TIM_ITRx_SetConfig+0x34>)
 8006dec:	4013      	ands	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	2207      	movs	r2, #7
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	609a      	str	r2, [r3, #8]
}
 8006e02:	46c0      	nop			; (mov r8, r8)
 8006e04:	46bd      	mov	sp, r7
 8006e06:	b004      	add	sp, #16
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	46c0      	nop			; (mov r8, r8)
 8006e0c:	ffcfff8f 	.word	0xffcfff8f

08006e10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
 8006e1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	4a09      	ldr	r2, [pc, #36]	; (8006e4c <TIM_ETR_SetConfig+0x3c>)
 8006e28:	4013      	ands	r3, r2
 8006e2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	021a      	lsls	r2, r3, #8
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	431a      	orrs	r2, r3
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	609a      	str	r2, [r3, #8]
}
 8006e44:	46c0      	nop			; (mov r8, r8)
 8006e46:	46bd      	mov	sp, r7
 8006e48:	b006      	add	sp, #24
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	ffff00ff 	.word	0xffff00ff

08006e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	223c      	movs	r2, #60	; 0x3c
 8006e5e:	5c9b      	ldrb	r3, [r3, r2]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d101      	bne.n	8006e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e64:	2302      	movs	r3, #2
 8006e66:	e055      	b.n	8006f14 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	223c      	movs	r2, #60	; 0x3c
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	223d      	movs	r2, #61	; 0x3d
 8006e74:	2102      	movs	r1, #2
 8006e76:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a23      	ldr	r2, [pc, #140]	; (8006f1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d108      	bne.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	4a22      	ldr	r2, [pc, #136]	; (8006f20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006e96:	4013      	ands	r3, r2
 8006e98:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2270      	movs	r2, #112	; 0x70
 8006ea8:	4393      	bics	r3, r2
 8006eaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a16      	ldr	r2, [pc, #88]	; (8006f1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d00f      	beq.n	8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	2380      	movs	r3, #128	; 0x80
 8006ece:	05db      	lsls	r3, r3, #23
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d009      	beq.n	8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a12      	ldr	r2, [pc, #72]	; (8006f24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d004      	beq.n	8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a11      	ldr	r2, [pc, #68]	; (8006f28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d10c      	bne.n	8006f02 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2280      	movs	r2, #128	; 0x80
 8006eec:	4393      	bics	r3, r2
 8006eee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	68ba      	ldr	r2, [r7, #8]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	223d      	movs	r2, #61	; 0x3d
 8006f06:	2101      	movs	r1, #1
 8006f08:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	223c      	movs	r2, #60	; 0x3c
 8006f0e:	2100      	movs	r1, #0
 8006f10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	0018      	movs	r0, r3
 8006f16:	46bd      	mov	sp, r7
 8006f18:	b004      	add	sp, #16
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	40012c00 	.word	0x40012c00
 8006f20:	ff0fffff 	.word	0xff0fffff
 8006f24:	40000400 	.word	0x40000400
 8006f28:	40014000 	.word	0x40014000

08006f2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f34:	46c0      	nop			; (mov r8, r8)
 8006f36:	46bd      	mov	sp, r7
 8006f38:	b002      	add	sp, #8
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f44:	46c0      	nop			; (mov r8, r8)
 8006f46:	46bd      	mov	sp, r7
 8006f48:	b002      	add	sp, #8
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f54:	46c0      	nop			; (mov r8, r8)
 8006f56:	46bd      	mov	sp, r7
 8006f58:	b002      	add	sp, #8
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d101      	bne.n	8006f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e046      	b.n	8006ffc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2284      	movs	r2, #132	; 0x84
 8006f72:	589b      	ldr	r3, [r3, r2]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d107      	bne.n	8006f88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2280      	movs	r2, #128	; 0x80
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	0018      	movs	r0, r3
 8006f84:	f7fb ffca 	bl	8002f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2284      	movs	r2, #132	; 0x84
 8006f8c:	2124      	movs	r1, #36	; 0x24
 8006f8e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2101      	movs	r1, #1
 8006f9c:	438a      	bics	r2, r1
 8006f9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	0018      	movs	r0, r3
 8006fa4:	f000 fc7c 	bl	80078a0 <UART_SetConfig>
 8006fa8:	0003      	movs	r3, r0
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d101      	bne.n	8006fb2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e024      	b.n	8006ffc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d003      	beq.n	8006fc2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	0018      	movs	r0, r3
 8006fbe:	f000 ff4d 	bl	8007e5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	685a      	ldr	r2, [r3, #4]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	490d      	ldr	r1, [pc, #52]	; (8007004 <HAL_UART_Init+0xa8>)
 8006fce:	400a      	ands	r2, r1
 8006fd0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	689a      	ldr	r2, [r3, #8]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	212a      	movs	r1, #42	; 0x2a
 8006fde:	438a      	bics	r2, r1
 8006fe0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2101      	movs	r1, #1
 8006fee:	430a      	orrs	r2, r1
 8006ff0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	0018      	movs	r0, r3
 8006ff6:	f000 ffe5 	bl	8007fc4 <UART_CheckIdleState>
 8006ffa:	0003      	movs	r3, r0
}
 8006ffc:	0018      	movs	r0, r3
 8006ffe:	46bd      	mov	sp, r7
 8007000:	b002      	add	sp, #8
 8007002:	bd80      	pop	{r7, pc}
 8007004:	ffffb7ff 	.word	0xffffb7ff

08007008 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b08a      	sub	sp, #40	; 0x28
 800700c:	af02      	add	r7, sp, #8
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	603b      	str	r3, [r7, #0]
 8007014:	1dbb      	adds	r3, r7, #6
 8007016:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2284      	movs	r2, #132	; 0x84
 800701c:	589b      	ldr	r3, [r3, r2]
 800701e:	2b20      	cmp	r3, #32
 8007020:	d000      	beq.n	8007024 <HAL_UART_Transmit+0x1c>
 8007022:	e097      	b.n	8007154 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <HAL_UART_Transmit+0x2a>
 800702a:	1dbb      	adds	r3, r7, #6
 800702c:	881b      	ldrh	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e08f      	b.n	8007156 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	689a      	ldr	r2, [r3, #8]
 800703a:	2380      	movs	r3, #128	; 0x80
 800703c:	015b      	lsls	r3, r3, #5
 800703e:	429a      	cmp	r2, r3
 8007040:	d109      	bne.n	8007056 <HAL_UART_Transmit+0x4e>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d105      	bne.n	8007056 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	2201      	movs	r2, #1
 800704e:	4013      	ands	r3, r2
 8007050:	d001      	beq.n	8007056 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e07f      	b.n	8007156 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2280      	movs	r2, #128	; 0x80
 800705a:	5c9b      	ldrb	r3, [r3, r2]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d101      	bne.n	8007064 <HAL_UART_Transmit+0x5c>
 8007060:	2302      	movs	r3, #2
 8007062:	e078      	b.n	8007156 <HAL_UART_Transmit+0x14e>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2280      	movs	r2, #128	; 0x80
 8007068:	2101      	movs	r1, #1
 800706a:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	228c      	movs	r2, #140	; 0x8c
 8007070:	2100      	movs	r1, #0
 8007072:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2284      	movs	r2, #132	; 0x84
 8007078:	2121      	movs	r1, #33	; 0x21
 800707a:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800707c:	f7fc fd10 	bl	8003aa0 <HAL_GetTick>
 8007080:	0003      	movs	r3, r0
 8007082:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	1dba      	adds	r2, r7, #6
 8007088:	2154      	movs	r1, #84	; 0x54
 800708a:	8812      	ldrh	r2, [r2, #0]
 800708c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	1dba      	adds	r2, r7, #6
 8007092:	2156      	movs	r1, #86	; 0x56
 8007094:	8812      	ldrh	r2, [r2, #0]
 8007096:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	2380      	movs	r3, #128	; 0x80
 800709e:	015b      	lsls	r3, r3, #5
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d108      	bne.n	80070b6 <HAL_UART_Transmit+0xae>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d104      	bne.n	80070b6 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 80070ac:	2300      	movs	r3, #0
 80070ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	61bb      	str	r3, [r7, #24]
 80070b4:	e003      	b.n	80070be <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070ba:	2300      	movs	r3, #0
 80070bc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2280      	movs	r2, #128	; 0x80
 80070c2:	2100      	movs	r1, #0
 80070c4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80070c6:	e02c      	b.n	8007122 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	0013      	movs	r3, r2
 80070d2:	2200      	movs	r2, #0
 80070d4:	2180      	movs	r1, #128	; 0x80
 80070d6:	f000 ffbf 	bl	8008058 <UART_WaitOnFlagUntilTimeout>
 80070da:	1e03      	subs	r3, r0, #0
 80070dc:	d001      	beq.n	80070e2 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e039      	b.n	8007156 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10b      	bne.n	8007100 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	881b      	ldrh	r3, [r3, #0]
 80070ec:	001a      	movs	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	05d2      	lsls	r2, r2, #23
 80070f4:	0dd2      	lsrs	r2, r2, #23
 80070f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	3302      	adds	r3, #2
 80070fc:	61bb      	str	r3, [r7, #24]
 80070fe:	e007      	b.n	8007110 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	781a      	ldrb	r2, [r3, #0]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	3301      	adds	r3, #1
 800710e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2256      	movs	r2, #86	; 0x56
 8007114:	5a9b      	ldrh	r3, [r3, r2]
 8007116:	b29b      	uxth	r3, r3
 8007118:	3b01      	subs	r3, #1
 800711a:	b299      	uxth	r1, r3
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2256      	movs	r2, #86	; 0x56
 8007120:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2256      	movs	r2, #86	; 0x56
 8007126:	5a9b      	ldrh	r3, [r3, r2]
 8007128:	b29b      	uxth	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1cc      	bne.n	80070c8 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	9300      	str	r3, [sp, #0]
 8007136:	0013      	movs	r3, r2
 8007138:	2200      	movs	r2, #0
 800713a:	2140      	movs	r1, #64	; 0x40
 800713c:	f000 ff8c 	bl	8008058 <UART_WaitOnFlagUntilTimeout>
 8007140:	1e03      	subs	r3, r0, #0
 8007142:	d001      	beq.n	8007148 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e006      	b.n	8007156 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2284      	movs	r2, #132	; 0x84
 800714c:	2120      	movs	r1, #32
 800714e:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007150:	2300      	movs	r3, #0
 8007152:	e000      	b.n	8007156 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8007154:	2302      	movs	r3, #2
  }
}
 8007156:	0018      	movs	r0, r3
 8007158:	46bd      	mov	sp, r7
 800715a:	b008      	add	sp, #32
 800715c:	bd80      	pop	{r7, pc}
	...

08007160 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b088      	sub	sp, #32
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	1dbb      	adds	r3, r7, #6
 800716c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2288      	movs	r2, #136	; 0x88
 8007172:	589b      	ldr	r3, [r3, r2]
 8007174:	2b20      	cmp	r3, #32
 8007176:	d155      	bne.n	8007224 <HAL_UART_Receive_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d003      	beq.n	8007186 <HAL_UART_Receive_IT+0x26>
 800717e:	1dbb      	adds	r3, r7, #6
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d101      	bne.n	800718a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e04d      	b.n	8007226 <HAL_UART_Receive_IT+0xc6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	689a      	ldr	r2, [r3, #8]
 800718e:	2380      	movs	r3, #128	; 0x80
 8007190:	015b      	lsls	r3, r3, #5
 8007192:	429a      	cmp	r2, r3
 8007194:	d109      	bne.n	80071aa <HAL_UART_Receive_IT+0x4a>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d105      	bne.n	80071aa <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	2201      	movs	r2, #1
 80071a2:	4013      	ands	r3, r2
 80071a4:	d001      	beq.n	80071aa <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e03d      	b.n	8007226 <HAL_UART_Receive_IT+0xc6>
      }
    }

    __HAL_LOCK(huart);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2280      	movs	r2, #128	; 0x80
 80071ae:	5c9b      	ldrb	r3, [r3, r2]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d101      	bne.n	80071b8 <HAL_UART_Receive_IT+0x58>
 80071b4:	2302      	movs	r3, #2
 80071b6:	e036      	b.n	8007226 <HAL_UART_Receive_IT+0xc6>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2280      	movs	r2, #128	; 0x80
 80071bc:	2101      	movs	r1, #1
 80071be:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a19      	ldr	r2, [pc, #100]	; (8007230 <HAL_UART_Receive_IT+0xd0>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d020      	beq.n	8007212 <HAL_UART_Receive_IT+0xb2>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685a      	ldr	r2, [r3, #4]
 80071d6:	2380      	movs	r3, #128	; 0x80
 80071d8:	041b      	lsls	r3, r3, #16
 80071da:	4013      	ands	r3, r2
 80071dc:	d019      	beq.n	8007212 <HAL_UART_Receive_IT+0xb2>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071de:	f3ef 8310 	mrs	r3, PRIMASK
 80071e2:	613b      	str	r3, [r7, #16]
  return(result);
 80071e4:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80071e6:	61fb      	str	r3, [r7, #28]
 80071e8:	2301      	movs	r3, #1
 80071ea:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	f383 8810 	msr	PRIMASK, r3
}
 80071f2:	46c0      	nop			; (mov r8, r8)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2180      	movs	r1, #128	; 0x80
 8007200:	04c9      	lsls	r1, r1, #19
 8007202:	430a      	orrs	r2, r1
 8007204:	601a      	str	r2, [r3, #0]
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	f383 8810 	msr	PRIMASK, r3
}
 8007210:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007212:	1dbb      	adds	r3, r7, #6
 8007214:	881a      	ldrh	r2, [r3, #0]
 8007216:	68b9      	ldr	r1, [r7, #8]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	0018      	movs	r0, r3
 800721c:	f000 ffe4 	bl	80081e8 <UART_Start_Receive_IT>
 8007220:	0003      	movs	r3, r0
 8007222:	e000      	b.n	8007226 <HAL_UART_Receive_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8007224:	2302      	movs	r3, #2
  }
}
 8007226:	0018      	movs	r0, r3
 8007228:	46bd      	mov	sp, r7
 800722a:	b008      	add	sp, #32
 800722c:	bd80      	pop	{r7, pc}
 800722e:	46c0      	nop			; (mov r8, r8)
 8007230:	40008000 	.word	0x40008000

08007234 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007234:	b5b0      	push	{r4, r5, r7, lr}
 8007236:	b0aa      	sub	sp, #168	; 0xa8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	22a4      	movs	r2, #164	; 0xa4
 8007244:	18b9      	adds	r1, r7, r2
 8007246:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	20a0      	movs	r0, #160	; 0xa0
 8007250:	1839      	adds	r1, r7, r0
 8007252:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	249c      	movs	r4, #156	; 0x9c
 800725c:	1939      	adds	r1, r7, r4
 800725e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007260:	0011      	movs	r1, r2
 8007262:	18bb      	adds	r3, r7, r2
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4aa0      	ldr	r2, [pc, #640]	; (80074e8 <HAL_UART_IRQHandler+0x2b4>)
 8007268:	4013      	ands	r3, r2
 800726a:	2298      	movs	r2, #152	; 0x98
 800726c:	18bd      	adds	r5, r7, r2
 800726e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8007270:	18bb      	adds	r3, r7, r2
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d11a      	bne.n	80072ae <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007278:	187b      	adds	r3, r7, r1
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2220      	movs	r2, #32
 800727e:	4013      	ands	r3, r2
 8007280:	d015      	beq.n	80072ae <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007282:	183b      	adds	r3, r7, r0
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2220      	movs	r2, #32
 8007288:	4013      	ands	r3, r2
 800728a:	d105      	bne.n	8007298 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800728c:	193b      	adds	r3, r7, r4
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	2380      	movs	r3, #128	; 0x80
 8007292:	055b      	lsls	r3, r3, #21
 8007294:	4013      	ands	r3, r2
 8007296:	d00a      	beq.n	80072ae <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729c:	2b00      	cmp	r3, #0
 800729e:	d100      	bne.n	80072a2 <HAL_UART_IRQHandler+0x6e>
 80072a0:	e2cf      	b.n	8007842 <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	0010      	movs	r0, r2
 80072aa:	4798      	blx	r3
      }
      return;
 80072ac:	e2c9      	b.n	8007842 <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80072ae:	2398      	movs	r3, #152	; 0x98
 80072b0:	18fb      	adds	r3, r7, r3
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d100      	bne.n	80072ba <HAL_UART_IRQHandler+0x86>
 80072b8:	e11e      	b.n	80074f8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80072ba:	239c      	movs	r3, #156	; 0x9c
 80072bc:	18fb      	adds	r3, r7, r3
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a8a      	ldr	r2, [pc, #552]	; (80074ec <HAL_UART_IRQHandler+0x2b8>)
 80072c2:	4013      	ands	r3, r2
 80072c4:	d106      	bne.n	80072d4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80072c6:	23a0      	movs	r3, #160	; 0xa0
 80072c8:	18fb      	adds	r3, r7, r3
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a88      	ldr	r2, [pc, #544]	; (80074f0 <HAL_UART_IRQHandler+0x2bc>)
 80072ce:	4013      	ands	r3, r2
 80072d0:	d100      	bne.n	80072d4 <HAL_UART_IRQHandler+0xa0>
 80072d2:	e111      	b.n	80074f8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80072d4:	23a4      	movs	r3, #164	; 0xa4
 80072d6:	18fb      	adds	r3, r7, r3
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2201      	movs	r2, #1
 80072dc:	4013      	ands	r3, r2
 80072de:	d012      	beq.n	8007306 <HAL_UART_IRQHandler+0xd2>
 80072e0:	23a0      	movs	r3, #160	; 0xa0
 80072e2:	18fb      	adds	r3, r7, r3
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	2380      	movs	r3, #128	; 0x80
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	4013      	ands	r3, r2
 80072ec:	d00b      	beq.n	8007306 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2201      	movs	r2, #1
 80072f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	228c      	movs	r2, #140	; 0x8c
 80072fa:	589b      	ldr	r3, [r3, r2]
 80072fc:	2201      	movs	r2, #1
 80072fe:	431a      	orrs	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	218c      	movs	r1, #140	; 0x8c
 8007304:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007306:	23a4      	movs	r3, #164	; 0xa4
 8007308:	18fb      	adds	r3, r7, r3
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2202      	movs	r2, #2
 800730e:	4013      	ands	r3, r2
 8007310:	d011      	beq.n	8007336 <HAL_UART_IRQHandler+0x102>
 8007312:	239c      	movs	r3, #156	; 0x9c
 8007314:	18fb      	adds	r3, r7, r3
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2201      	movs	r2, #1
 800731a:	4013      	ands	r3, r2
 800731c:	d00b      	beq.n	8007336 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2202      	movs	r2, #2
 8007324:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	228c      	movs	r2, #140	; 0x8c
 800732a:	589b      	ldr	r3, [r3, r2]
 800732c:	2204      	movs	r2, #4
 800732e:	431a      	orrs	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	218c      	movs	r1, #140	; 0x8c
 8007334:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007336:	23a4      	movs	r3, #164	; 0xa4
 8007338:	18fb      	adds	r3, r7, r3
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2204      	movs	r2, #4
 800733e:	4013      	ands	r3, r2
 8007340:	d011      	beq.n	8007366 <HAL_UART_IRQHandler+0x132>
 8007342:	239c      	movs	r3, #156	; 0x9c
 8007344:	18fb      	adds	r3, r7, r3
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2201      	movs	r2, #1
 800734a:	4013      	ands	r3, r2
 800734c:	d00b      	beq.n	8007366 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2204      	movs	r2, #4
 8007354:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	228c      	movs	r2, #140	; 0x8c
 800735a:	589b      	ldr	r3, [r3, r2]
 800735c:	2202      	movs	r2, #2
 800735e:	431a      	orrs	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	218c      	movs	r1, #140	; 0x8c
 8007364:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007366:	23a4      	movs	r3, #164	; 0xa4
 8007368:	18fb      	adds	r3, r7, r3
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2208      	movs	r2, #8
 800736e:	4013      	ands	r3, r2
 8007370:	d017      	beq.n	80073a2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007372:	23a0      	movs	r3, #160	; 0xa0
 8007374:	18fb      	adds	r3, r7, r3
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2220      	movs	r2, #32
 800737a:	4013      	ands	r3, r2
 800737c:	d105      	bne.n	800738a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800737e:	239c      	movs	r3, #156	; 0x9c
 8007380:	18fb      	adds	r3, r7, r3
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a59      	ldr	r2, [pc, #356]	; (80074ec <HAL_UART_IRQHandler+0x2b8>)
 8007386:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007388:	d00b      	beq.n	80073a2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2208      	movs	r2, #8
 8007390:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	228c      	movs	r2, #140	; 0x8c
 8007396:	589b      	ldr	r3, [r3, r2]
 8007398:	2208      	movs	r2, #8
 800739a:	431a      	orrs	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	218c      	movs	r1, #140	; 0x8c
 80073a0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80073a2:	23a4      	movs	r3, #164	; 0xa4
 80073a4:	18fb      	adds	r3, r7, r3
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	2380      	movs	r3, #128	; 0x80
 80073aa:	011b      	lsls	r3, r3, #4
 80073ac:	4013      	ands	r3, r2
 80073ae:	d013      	beq.n	80073d8 <HAL_UART_IRQHandler+0x1a4>
 80073b0:	23a0      	movs	r3, #160	; 0xa0
 80073b2:	18fb      	adds	r3, r7, r3
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	2380      	movs	r3, #128	; 0x80
 80073b8:	04db      	lsls	r3, r3, #19
 80073ba:	4013      	ands	r3, r2
 80073bc:	d00c      	beq.n	80073d8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2280      	movs	r2, #128	; 0x80
 80073c4:	0112      	lsls	r2, r2, #4
 80073c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	228c      	movs	r2, #140	; 0x8c
 80073cc:	589b      	ldr	r3, [r3, r2]
 80073ce:	2220      	movs	r2, #32
 80073d0:	431a      	orrs	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	218c      	movs	r1, #140	; 0x8c
 80073d6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	228c      	movs	r2, #140	; 0x8c
 80073dc:	589b      	ldr	r3, [r3, r2]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d100      	bne.n	80073e4 <HAL_UART_IRQHandler+0x1b0>
 80073e2:	e230      	b.n	8007846 <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80073e4:	23a4      	movs	r3, #164	; 0xa4
 80073e6:	18fb      	adds	r3, r7, r3
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2220      	movs	r2, #32
 80073ec:	4013      	ands	r3, r2
 80073ee:	d015      	beq.n	800741c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80073f0:	23a0      	movs	r3, #160	; 0xa0
 80073f2:	18fb      	adds	r3, r7, r3
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2220      	movs	r2, #32
 80073f8:	4013      	ands	r3, r2
 80073fa:	d106      	bne.n	800740a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80073fc:	239c      	movs	r3, #156	; 0x9c
 80073fe:	18fb      	adds	r3, r7, r3
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	2380      	movs	r3, #128	; 0x80
 8007404:	055b      	lsls	r3, r3, #21
 8007406:	4013      	ands	r3, r2
 8007408:	d008      	beq.n	800741c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800740e:	2b00      	cmp	r3, #0
 8007410:	d004      	beq.n	800741c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	0010      	movs	r0, r2
 800741a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	228c      	movs	r2, #140	; 0x8c
 8007420:	589b      	ldr	r3, [r3, r2]
 8007422:	2194      	movs	r1, #148	; 0x94
 8007424:	187a      	adds	r2, r7, r1
 8007426:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	2240      	movs	r2, #64	; 0x40
 8007430:	4013      	ands	r3, r2
 8007432:	2b40      	cmp	r3, #64	; 0x40
 8007434:	d004      	beq.n	8007440 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007436:	187b      	adds	r3, r7, r1
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2228      	movs	r2, #40	; 0x28
 800743c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800743e:	d047      	beq.n	80074d0 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	0018      	movs	r0, r3
 8007444:	f000 ffdc 	bl	8008400 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	2240      	movs	r2, #64	; 0x40
 8007450:	4013      	ands	r3, r2
 8007452:	2b40      	cmp	r3, #64	; 0x40
 8007454:	d137      	bne.n	80074c6 <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007456:	f3ef 8310 	mrs	r3, PRIMASK
 800745a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800745c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800745e:	2090      	movs	r0, #144	; 0x90
 8007460:	183a      	adds	r2, r7, r0
 8007462:	6013      	str	r3, [r2, #0]
 8007464:	2301      	movs	r3, #1
 8007466:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007468:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800746a:	f383 8810 	msr	PRIMASK, r3
}
 800746e:	46c0      	nop			; (mov r8, r8)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	689a      	ldr	r2, [r3, #8]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2140      	movs	r1, #64	; 0x40
 800747c:	438a      	bics	r2, r1
 800747e:	609a      	str	r2, [r3, #8]
 8007480:	183b      	adds	r3, r7, r0
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007486:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007488:	f383 8810 	msr	PRIMASK, r3
}
 800748c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007492:	2b00      	cmp	r3, #0
 8007494:	d012      	beq.n	80074bc <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800749a:	4a16      	ldr	r2, [pc, #88]	; (80074f4 <HAL_UART_IRQHandler+0x2c0>)
 800749c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074a2:	0018      	movs	r0, r3
 80074a4:	f7fd f91e 	bl	80046e4 <HAL_DMA_Abort_IT>
 80074a8:	1e03      	subs	r3, r0, #0
 80074aa:	d01a      	beq.n	80074e2 <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074b6:	0018      	movs	r0, r3
 80074b8:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ba:	e012      	b.n	80074e2 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	0018      	movs	r0, r3
 80074c0:	f000 f9da 	bl	8007878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074c4:	e00d      	b.n	80074e2 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	0018      	movs	r0, r3
 80074ca:	f000 f9d5 	bl	8007878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ce:	e008      	b.n	80074e2 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	0018      	movs	r0, r3
 80074d4:	f000 f9d0 	bl	8007878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	228c      	movs	r2, #140	; 0x8c
 80074dc:	2100      	movs	r1, #0
 80074de:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80074e0:	e1b1      	b.n	8007846 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074e2:	46c0      	nop			; (mov r8, r8)
    return;
 80074e4:	e1af      	b.n	8007846 <HAL_UART_IRQHandler+0x612>
 80074e6:	46c0      	nop			; (mov r8, r8)
 80074e8:	0000080f 	.word	0x0000080f
 80074ec:	10000001 	.word	0x10000001
 80074f0:	04000120 	.word	0x04000120
 80074f4:	080084cd 	.word	0x080084cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d000      	beq.n	8007502 <HAL_UART_IRQHandler+0x2ce>
 8007500:	e135      	b.n	800776e <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007502:	23a4      	movs	r3, #164	; 0xa4
 8007504:	18fb      	adds	r3, r7, r3
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2210      	movs	r2, #16
 800750a:	4013      	ands	r3, r2
 800750c:	d100      	bne.n	8007510 <HAL_UART_IRQHandler+0x2dc>
 800750e:	e12e      	b.n	800776e <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007510:	23a0      	movs	r3, #160	; 0xa0
 8007512:	18fb      	adds	r3, r7, r3
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2210      	movs	r2, #16
 8007518:	4013      	ands	r3, r2
 800751a:	d100      	bne.n	800751e <HAL_UART_IRQHandler+0x2ea>
 800751c:	e127      	b.n	800776e <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2210      	movs	r2, #16
 8007524:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	2240      	movs	r2, #64	; 0x40
 800752e:	4013      	ands	r3, r2
 8007530:	2b40      	cmp	r3, #64	; 0x40
 8007532:	d000      	beq.n	8007536 <HAL_UART_IRQHandler+0x302>
 8007534:	e09e      	b.n	8007674 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	685a      	ldr	r2, [r3, #4]
 800753e:	217e      	movs	r1, #126	; 0x7e
 8007540:	187b      	adds	r3, r7, r1
 8007542:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007544:	187b      	adds	r3, r7, r1
 8007546:	881b      	ldrh	r3, [r3, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d100      	bne.n	800754e <HAL_UART_IRQHandler+0x31a>
 800754c:	e17d      	b.n	800784a <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	225c      	movs	r2, #92	; 0x5c
 8007552:	5a9b      	ldrh	r3, [r3, r2]
 8007554:	187a      	adds	r2, r7, r1
 8007556:	8812      	ldrh	r2, [r2, #0]
 8007558:	429a      	cmp	r2, r3
 800755a:	d300      	bcc.n	800755e <HAL_UART_IRQHandler+0x32a>
 800755c:	e175      	b.n	800784a <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	187a      	adds	r2, r7, r1
 8007562:	215e      	movs	r1, #94	; 0x5e
 8007564:	8812      	ldrh	r2, [r2, #0]
 8007566:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2220      	movs	r2, #32
 8007572:	4013      	ands	r3, r2
 8007574:	d16f      	bne.n	8007656 <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007576:	f3ef 8310 	mrs	r3, PRIMASK
 800757a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800757c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800757e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007580:	2301      	movs	r3, #1
 8007582:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007586:	f383 8810 	msr	PRIMASK, r3
}
 800758a:	46c0      	nop			; (mov r8, r8)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	49b1      	ldr	r1, [pc, #708]	; (800785c <HAL_UART_IRQHandler+0x628>)
 8007598:	400a      	ands	r2, r1
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800759e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a2:	f383 8810 	msr	PRIMASK, r3
}
 80075a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075a8:	f3ef 8310 	mrs	r3, PRIMASK
 80075ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80075ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075b0:	677b      	str	r3, [r7, #116]	; 0x74
 80075b2:	2301      	movs	r3, #1
 80075b4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075b8:	f383 8810 	msr	PRIMASK, r3
}
 80075bc:	46c0      	nop			; (mov r8, r8)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	689a      	ldr	r2, [r3, #8]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2101      	movs	r1, #1
 80075ca:	438a      	bics	r2, r1
 80075cc:	609a      	str	r2, [r3, #8]
 80075ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075d0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075d4:	f383 8810 	msr	PRIMASK, r3
}
 80075d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075da:	f3ef 8310 	mrs	r3, PRIMASK
 80075de:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80075e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075e2:	673b      	str	r3, [r7, #112]	; 0x70
 80075e4:	2301      	movs	r3, #1
 80075e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ea:	f383 8810 	msr	PRIMASK, r3
}
 80075ee:	46c0      	nop			; (mov r8, r8)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689a      	ldr	r2, [r3, #8]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2140      	movs	r1, #64	; 0x40
 80075fc:	438a      	bics	r2, r1
 80075fe:	609a      	str	r2, [r3, #8]
 8007600:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007602:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007606:	f383 8810 	msr	PRIMASK, r3
}
 800760a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2288      	movs	r2, #136	; 0x88
 8007610:	2120      	movs	r1, #32
 8007612:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800761a:	f3ef 8310 	mrs	r3, PRIMASK
 800761e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007620:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007622:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007624:	2301      	movs	r3, #1
 8007626:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007628:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800762a:	f383 8810 	msr	PRIMASK, r3
}
 800762e:	46c0      	nop			; (mov r8, r8)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2110      	movs	r1, #16
 800763c:	438a      	bics	r2, r1
 800763e:	601a      	str	r2, [r3, #0]
 8007640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007642:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007644:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007646:	f383 8810 	msr	PRIMASK, r3
}
 800764a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007650:	0018      	movs	r0, r3
 8007652:	f7fc ffe5 	bl	8004620 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	225c      	movs	r2, #92	; 0x5c
 800765a:	5a9a      	ldrh	r2, [r3, r2]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	215e      	movs	r1, #94	; 0x5e
 8007660:	5a5b      	ldrh	r3, [r3, r1]
 8007662:	b29b      	uxth	r3, r3
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	b29a      	uxth	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	0011      	movs	r1, r2
 800766c:	0018      	movs	r0, r3
 800766e:	f000 f90b 	bl	8007888 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007672:	e0ea      	b.n	800784a <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	225c      	movs	r2, #92	; 0x5c
 8007678:	5a99      	ldrh	r1, [r3, r2]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	225e      	movs	r2, #94	; 0x5e
 800767e:	5a9b      	ldrh	r3, [r3, r2]
 8007680:	b29a      	uxth	r2, r3
 8007682:	208e      	movs	r0, #142	; 0x8e
 8007684:	183b      	adds	r3, r7, r0
 8007686:	1a8a      	subs	r2, r1, r2
 8007688:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	225e      	movs	r2, #94	; 0x5e
 800768e:	5a9b      	ldrh	r3, [r3, r2]
 8007690:	b29b      	uxth	r3, r3
 8007692:	2b00      	cmp	r3, #0
 8007694:	d100      	bne.n	8007698 <HAL_UART_IRQHandler+0x464>
 8007696:	e0da      	b.n	800784e <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8007698:	183b      	adds	r3, r7, r0
 800769a:	881b      	ldrh	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d100      	bne.n	80076a2 <HAL_UART_IRQHandler+0x46e>
 80076a0:	e0d5      	b.n	800784e <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076a2:	f3ef 8310 	mrs	r3, PRIMASK
 80076a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80076a8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076aa:	2488      	movs	r4, #136	; 0x88
 80076ac:	193a      	adds	r2, r7, r4
 80076ae:	6013      	str	r3, [r2, #0]
 80076b0:	2301      	movs	r3, #1
 80076b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	f383 8810 	msr	PRIMASK, r3
}
 80076ba:	46c0      	nop			; (mov r8, r8)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4966      	ldr	r1, [pc, #408]	; (8007860 <HAL_UART_IRQHandler+0x62c>)
 80076c8:	400a      	ands	r2, r1
 80076ca:	601a      	str	r2, [r3, #0]
 80076cc:	193b      	adds	r3, r7, r4
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f383 8810 	msr	PRIMASK, r3
}
 80076d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076da:	f3ef 8310 	mrs	r3, PRIMASK
 80076de:	61bb      	str	r3, [r7, #24]
  return(result);
 80076e0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076e2:	2484      	movs	r4, #132	; 0x84
 80076e4:	193a      	adds	r2, r7, r4
 80076e6:	6013      	str	r3, [r2, #0]
 80076e8:	2301      	movs	r3, #1
 80076ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	f383 8810 	msr	PRIMASK, r3
}
 80076f2:	46c0      	nop			; (mov r8, r8)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	689a      	ldr	r2, [r3, #8]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4959      	ldr	r1, [pc, #356]	; (8007864 <HAL_UART_IRQHandler+0x630>)
 8007700:	400a      	ands	r2, r1
 8007702:	609a      	str	r2, [r3, #8]
 8007704:	193b      	adds	r3, r7, r4
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	f383 8810 	msr	PRIMASK, r3
}
 8007710:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2288      	movs	r2, #136	; 0x88
 8007716:	2120      	movs	r1, #32
 8007718:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007726:	f3ef 8310 	mrs	r3, PRIMASK
 800772a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800772e:	2480      	movs	r4, #128	; 0x80
 8007730:	193a      	adds	r2, r7, r4
 8007732:	6013      	str	r3, [r2, #0]
 8007734:	2301      	movs	r3, #1
 8007736:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773a:	f383 8810 	msr	PRIMASK, r3
}
 800773e:	46c0      	nop			; (mov r8, r8)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2110      	movs	r1, #16
 800774c:	438a      	bics	r2, r1
 800774e:	601a      	str	r2, [r3, #0]
 8007750:	193b      	adds	r3, r7, r4
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007758:	f383 8810 	msr	PRIMASK, r3
}
 800775c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800775e:	183b      	adds	r3, r7, r0
 8007760:	881a      	ldrh	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	0011      	movs	r1, r2
 8007766:	0018      	movs	r0, r3
 8007768:	f000 f88e 	bl	8007888 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800776c:	e06f      	b.n	800784e <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800776e:	23a4      	movs	r3, #164	; 0xa4
 8007770:	18fb      	adds	r3, r7, r3
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	2380      	movs	r3, #128	; 0x80
 8007776:	035b      	lsls	r3, r3, #13
 8007778:	4013      	ands	r3, r2
 800777a:	d010      	beq.n	800779e <HAL_UART_IRQHandler+0x56a>
 800777c:	239c      	movs	r3, #156	; 0x9c
 800777e:	18fb      	adds	r3, r7, r3
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	2380      	movs	r3, #128	; 0x80
 8007784:	03db      	lsls	r3, r3, #15
 8007786:	4013      	ands	r3, r2
 8007788:	d009      	beq.n	800779e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2280      	movs	r2, #128	; 0x80
 8007790:	0352      	lsls	r2, r2, #13
 8007792:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	0018      	movs	r0, r3
 8007798:	f001 fb2c 	bl	8008df4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800779c:	e05a      	b.n	8007854 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800779e:	23a4      	movs	r3, #164	; 0xa4
 80077a0:	18fb      	adds	r3, r7, r3
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2280      	movs	r2, #128	; 0x80
 80077a6:	4013      	ands	r3, r2
 80077a8:	d016      	beq.n	80077d8 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80077aa:	23a0      	movs	r3, #160	; 0xa0
 80077ac:	18fb      	adds	r3, r7, r3
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2280      	movs	r2, #128	; 0x80
 80077b2:	4013      	ands	r3, r2
 80077b4:	d106      	bne.n	80077c4 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80077b6:	239c      	movs	r3, #156	; 0x9c
 80077b8:	18fb      	adds	r3, r7, r3
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	2380      	movs	r3, #128	; 0x80
 80077be:	041b      	lsls	r3, r3, #16
 80077c0:	4013      	ands	r3, r2
 80077c2:	d009      	beq.n	80077d8 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d042      	beq.n	8007852 <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	0010      	movs	r0, r2
 80077d4:	4798      	blx	r3
    }
    return;
 80077d6:	e03c      	b.n	8007852 <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80077d8:	23a4      	movs	r3, #164	; 0xa4
 80077da:	18fb      	adds	r3, r7, r3
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2240      	movs	r2, #64	; 0x40
 80077e0:	4013      	ands	r3, r2
 80077e2:	d00a      	beq.n	80077fa <HAL_UART_IRQHandler+0x5c6>
 80077e4:	23a0      	movs	r3, #160	; 0xa0
 80077e6:	18fb      	adds	r3, r7, r3
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2240      	movs	r2, #64	; 0x40
 80077ec:	4013      	ands	r3, r2
 80077ee:	d004      	beq.n	80077fa <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	0018      	movs	r0, r3
 80077f4:	f000 fe81 	bl	80084fa <UART_EndTransmit_IT>
    return;
 80077f8:	e02c      	b.n	8007854 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80077fa:	23a4      	movs	r3, #164	; 0xa4
 80077fc:	18fb      	adds	r3, r7, r3
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	2380      	movs	r3, #128	; 0x80
 8007802:	041b      	lsls	r3, r3, #16
 8007804:	4013      	ands	r3, r2
 8007806:	d00b      	beq.n	8007820 <HAL_UART_IRQHandler+0x5ec>
 8007808:	23a0      	movs	r3, #160	; 0xa0
 800780a:	18fb      	adds	r3, r7, r3
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	2380      	movs	r3, #128	; 0x80
 8007810:	05db      	lsls	r3, r3, #23
 8007812:	4013      	ands	r3, r2
 8007814:	d004      	beq.n	8007820 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	0018      	movs	r0, r3
 800781a:	f001 fafb 	bl	8008e14 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800781e:	e019      	b.n	8007854 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007820:	23a4      	movs	r3, #164	; 0xa4
 8007822:	18fb      	adds	r3, r7, r3
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	2380      	movs	r3, #128	; 0x80
 8007828:	045b      	lsls	r3, r3, #17
 800782a:	4013      	ands	r3, r2
 800782c:	d012      	beq.n	8007854 <HAL_UART_IRQHandler+0x620>
 800782e:	23a0      	movs	r3, #160	; 0xa0
 8007830:	18fb      	adds	r3, r7, r3
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	da0d      	bge.n	8007854 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	0018      	movs	r0, r3
 800783c:	f001 fae2 	bl	8008e04 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007840:	e008      	b.n	8007854 <HAL_UART_IRQHandler+0x620>
      return;
 8007842:	46c0      	nop			; (mov r8, r8)
 8007844:	e006      	b.n	8007854 <HAL_UART_IRQHandler+0x620>
    return;
 8007846:	46c0      	nop			; (mov r8, r8)
 8007848:	e004      	b.n	8007854 <HAL_UART_IRQHandler+0x620>
      return;
 800784a:	46c0      	nop			; (mov r8, r8)
 800784c:	e002      	b.n	8007854 <HAL_UART_IRQHandler+0x620>
      return;
 800784e:	46c0      	nop			; (mov r8, r8)
 8007850:	e000      	b.n	8007854 <HAL_UART_IRQHandler+0x620>
    return;
 8007852:	46c0      	nop			; (mov r8, r8)
  }
}
 8007854:	46bd      	mov	sp, r7
 8007856:	b02a      	add	sp, #168	; 0xa8
 8007858:	bdb0      	pop	{r4, r5, r7, pc}
 800785a:	46c0      	nop			; (mov r8, r8)
 800785c:	fffffeff 	.word	0xfffffeff
 8007860:	fffffedf 	.word	0xfffffedf
 8007864:	effffffe 	.word	0xeffffffe

08007868 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007870:	46c0      	nop			; (mov r8, r8)
 8007872:	46bd      	mov	sp, r7
 8007874:	b002      	add	sp, #8
 8007876:	bd80      	pop	{r7, pc}

08007878 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007880:	46c0      	nop			; (mov r8, r8)
 8007882:	46bd      	mov	sp, r7
 8007884:	b002      	add	sp, #8
 8007886:	bd80      	pop	{r7, pc}

08007888 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	000a      	movs	r2, r1
 8007892:	1cbb      	adds	r3, r7, #2
 8007894:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007896:	46c0      	nop			; (mov r8, r8)
 8007898:	46bd      	mov	sp, r7
 800789a:	b002      	add	sp, #8
 800789c:	bd80      	pop	{r7, pc}
	...

080078a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078a0:	b5b0      	push	{r4, r5, r7, lr}
 80078a2:	b090      	sub	sp, #64	; 0x40
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078a8:	231a      	movs	r3, #26
 80078aa:	2220      	movs	r2, #32
 80078ac:	4694      	mov	ip, r2
 80078ae:	44bc      	add	ip, r7
 80078b0:	4463      	add	r3, ip
 80078b2:	2200      	movs	r2, #0
 80078b4:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b8:	689a      	ldr	r2, [r3, #8]
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	431a      	orrs	r2, r3
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	431a      	orrs	r2, r3
 80078c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c8:	69db      	ldr	r3, [r3, #28]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4ab9      	ldr	r2, [pc, #740]	; (8007bbc <UART_SetConfig+0x31c>)
 80078d6:	4013      	ands	r3, r2
 80078d8:	0019      	movs	r1, r3
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078e0:	430b      	orrs	r3, r1
 80078e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	4ab5      	ldr	r2, [pc, #724]	; (8007bc0 <UART_SetConfig+0x320>)
 80078ec:	4013      	ands	r3, r2
 80078ee:	0018      	movs	r0, r3
 80078f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f2:	68d9      	ldr	r1, [r3, #12]
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	0003      	movs	r3, r0
 80078fa:	430b      	orrs	r3, r1
 80078fc:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4aae      	ldr	r2, [pc, #696]	; (8007bc4 <UART_SetConfig+0x324>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d004      	beq.n	8007918 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800790e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007914:	4313      	orrs	r3, r2
 8007916:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	4aaa      	ldr	r2, [pc, #680]	; (8007bc8 <UART_SetConfig+0x328>)
 8007920:	4013      	ands	r3, r2
 8007922:	0019      	movs	r1, r3
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800792a:	430b      	orrs	r3, r1
 800792c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007934:	220f      	movs	r2, #15
 8007936:	4393      	bics	r3, r2
 8007938:	0018      	movs	r0, r3
 800793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	0003      	movs	r3, r0
 8007944:	430b      	orrs	r3, r1
 8007946:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a9f      	ldr	r2, [pc, #636]	; (8007bcc <UART_SetConfig+0x32c>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d136      	bne.n	80079c0 <UART_SetConfig+0x120>
 8007952:	4b9f      	ldr	r3, [pc, #636]	; (8007bd0 <UART_SetConfig+0x330>)
 8007954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007956:	2203      	movs	r2, #3
 8007958:	4013      	ands	r3, r2
 800795a:	2b03      	cmp	r3, #3
 800795c:	d020      	beq.n	80079a0 <UART_SetConfig+0x100>
 800795e:	d827      	bhi.n	80079b0 <UART_SetConfig+0x110>
 8007960:	2b02      	cmp	r3, #2
 8007962:	d00d      	beq.n	8007980 <UART_SetConfig+0xe0>
 8007964:	d824      	bhi.n	80079b0 <UART_SetConfig+0x110>
 8007966:	2b00      	cmp	r3, #0
 8007968:	d002      	beq.n	8007970 <UART_SetConfig+0xd0>
 800796a:	2b01      	cmp	r3, #1
 800796c:	d010      	beq.n	8007990 <UART_SetConfig+0xf0>
 800796e:	e01f      	b.n	80079b0 <UART_SetConfig+0x110>
 8007970:	231b      	movs	r3, #27
 8007972:	2220      	movs	r2, #32
 8007974:	4694      	mov	ip, r2
 8007976:	44bc      	add	ip, r7
 8007978:	4463      	add	r3, ip
 800797a:	2200      	movs	r2, #0
 800797c:	701a      	strb	r2, [r3, #0]
 800797e:	e0c5      	b.n	8007b0c <UART_SetConfig+0x26c>
 8007980:	231b      	movs	r3, #27
 8007982:	2220      	movs	r2, #32
 8007984:	4694      	mov	ip, r2
 8007986:	44bc      	add	ip, r7
 8007988:	4463      	add	r3, ip
 800798a:	2202      	movs	r2, #2
 800798c:	701a      	strb	r2, [r3, #0]
 800798e:	e0bd      	b.n	8007b0c <UART_SetConfig+0x26c>
 8007990:	231b      	movs	r3, #27
 8007992:	2220      	movs	r2, #32
 8007994:	4694      	mov	ip, r2
 8007996:	44bc      	add	ip, r7
 8007998:	4463      	add	r3, ip
 800799a:	2204      	movs	r2, #4
 800799c:	701a      	strb	r2, [r3, #0]
 800799e:	e0b5      	b.n	8007b0c <UART_SetConfig+0x26c>
 80079a0:	231b      	movs	r3, #27
 80079a2:	2220      	movs	r2, #32
 80079a4:	4694      	mov	ip, r2
 80079a6:	44bc      	add	ip, r7
 80079a8:	4463      	add	r3, ip
 80079aa:	2208      	movs	r2, #8
 80079ac:	701a      	strb	r2, [r3, #0]
 80079ae:	e0ad      	b.n	8007b0c <UART_SetConfig+0x26c>
 80079b0:	231b      	movs	r3, #27
 80079b2:	2220      	movs	r2, #32
 80079b4:	4694      	mov	ip, r2
 80079b6:	44bc      	add	ip, r7
 80079b8:	4463      	add	r3, ip
 80079ba:	2210      	movs	r2, #16
 80079bc:	701a      	strb	r2, [r3, #0]
 80079be:	e0a5      	b.n	8007b0c <UART_SetConfig+0x26c>
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a83      	ldr	r2, [pc, #524]	; (8007bd4 <UART_SetConfig+0x334>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d136      	bne.n	8007a38 <UART_SetConfig+0x198>
 80079ca:	4b81      	ldr	r3, [pc, #516]	; (8007bd0 <UART_SetConfig+0x330>)
 80079cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ce:	220c      	movs	r2, #12
 80079d0:	4013      	ands	r3, r2
 80079d2:	2b0c      	cmp	r3, #12
 80079d4:	d020      	beq.n	8007a18 <UART_SetConfig+0x178>
 80079d6:	d827      	bhi.n	8007a28 <UART_SetConfig+0x188>
 80079d8:	2b08      	cmp	r3, #8
 80079da:	d00d      	beq.n	80079f8 <UART_SetConfig+0x158>
 80079dc:	d824      	bhi.n	8007a28 <UART_SetConfig+0x188>
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d002      	beq.n	80079e8 <UART_SetConfig+0x148>
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d010      	beq.n	8007a08 <UART_SetConfig+0x168>
 80079e6:	e01f      	b.n	8007a28 <UART_SetConfig+0x188>
 80079e8:	231b      	movs	r3, #27
 80079ea:	2220      	movs	r2, #32
 80079ec:	4694      	mov	ip, r2
 80079ee:	44bc      	add	ip, r7
 80079f0:	4463      	add	r3, ip
 80079f2:	2200      	movs	r2, #0
 80079f4:	701a      	strb	r2, [r3, #0]
 80079f6:	e089      	b.n	8007b0c <UART_SetConfig+0x26c>
 80079f8:	231b      	movs	r3, #27
 80079fa:	2220      	movs	r2, #32
 80079fc:	4694      	mov	ip, r2
 80079fe:	44bc      	add	ip, r7
 8007a00:	4463      	add	r3, ip
 8007a02:	2202      	movs	r2, #2
 8007a04:	701a      	strb	r2, [r3, #0]
 8007a06:	e081      	b.n	8007b0c <UART_SetConfig+0x26c>
 8007a08:	231b      	movs	r3, #27
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	4694      	mov	ip, r2
 8007a0e:	44bc      	add	ip, r7
 8007a10:	4463      	add	r3, ip
 8007a12:	2204      	movs	r2, #4
 8007a14:	701a      	strb	r2, [r3, #0]
 8007a16:	e079      	b.n	8007b0c <UART_SetConfig+0x26c>
 8007a18:	231b      	movs	r3, #27
 8007a1a:	2220      	movs	r2, #32
 8007a1c:	4694      	mov	ip, r2
 8007a1e:	44bc      	add	ip, r7
 8007a20:	4463      	add	r3, ip
 8007a22:	2208      	movs	r2, #8
 8007a24:	701a      	strb	r2, [r3, #0]
 8007a26:	e071      	b.n	8007b0c <UART_SetConfig+0x26c>
 8007a28:	231b      	movs	r3, #27
 8007a2a:	2220      	movs	r2, #32
 8007a2c:	4694      	mov	ip, r2
 8007a2e:	44bc      	add	ip, r7
 8007a30:	4463      	add	r3, ip
 8007a32:	2210      	movs	r2, #16
 8007a34:	701a      	strb	r2, [r3, #0]
 8007a36:	e069      	b.n	8007b0c <UART_SetConfig+0x26c>
 8007a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a66      	ldr	r2, [pc, #408]	; (8007bd8 <UART_SetConfig+0x338>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d107      	bne.n	8007a52 <UART_SetConfig+0x1b2>
 8007a42:	231b      	movs	r3, #27
 8007a44:	2220      	movs	r2, #32
 8007a46:	4694      	mov	ip, r2
 8007a48:	44bc      	add	ip, r7
 8007a4a:	4463      	add	r3, ip
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	701a      	strb	r2, [r3, #0]
 8007a50:	e05c      	b.n	8007b0c <UART_SetConfig+0x26c>
 8007a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a61      	ldr	r2, [pc, #388]	; (8007bdc <UART_SetConfig+0x33c>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d107      	bne.n	8007a6c <UART_SetConfig+0x1cc>
 8007a5c:	231b      	movs	r3, #27
 8007a5e:	2220      	movs	r2, #32
 8007a60:	4694      	mov	ip, r2
 8007a62:	44bc      	add	ip, r7
 8007a64:	4463      	add	r3, ip
 8007a66:	2200      	movs	r2, #0
 8007a68:	701a      	strb	r2, [r3, #0]
 8007a6a:	e04f      	b.n	8007b0c <UART_SetConfig+0x26c>
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a54      	ldr	r2, [pc, #336]	; (8007bc4 <UART_SetConfig+0x324>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d143      	bne.n	8007afe <UART_SetConfig+0x25e>
 8007a76:	4b56      	ldr	r3, [pc, #344]	; (8007bd0 <UART_SetConfig+0x330>)
 8007a78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a7a:	23c0      	movs	r3, #192	; 0xc0
 8007a7c:	011b      	lsls	r3, r3, #4
 8007a7e:	4013      	ands	r3, r2
 8007a80:	22c0      	movs	r2, #192	; 0xc0
 8007a82:	0112      	lsls	r2, r2, #4
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d02a      	beq.n	8007ade <UART_SetConfig+0x23e>
 8007a88:	22c0      	movs	r2, #192	; 0xc0
 8007a8a:	0112      	lsls	r2, r2, #4
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d82e      	bhi.n	8007aee <UART_SetConfig+0x24e>
 8007a90:	2280      	movs	r2, #128	; 0x80
 8007a92:	0112      	lsls	r2, r2, #4
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d012      	beq.n	8007abe <UART_SetConfig+0x21e>
 8007a98:	2280      	movs	r2, #128	; 0x80
 8007a9a:	0112      	lsls	r2, r2, #4
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d826      	bhi.n	8007aee <UART_SetConfig+0x24e>
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d004      	beq.n	8007aae <UART_SetConfig+0x20e>
 8007aa4:	2280      	movs	r2, #128	; 0x80
 8007aa6:	00d2      	lsls	r2, r2, #3
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d010      	beq.n	8007ace <UART_SetConfig+0x22e>
 8007aac:	e01f      	b.n	8007aee <UART_SetConfig+0x24e>
 8007aae:	231b      	movs	r3, #27
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	4694      	mov	ip, r2
 8007ab4:	44bc      	add	ip, r7
 8007ab6:	4463      	add	r3, ip
 8007ab8:	2200      	movs	r2, #0
 8007aba:	701a      	strb	r2, [r3, #0]
 8007abc:	e026      	b.n	8007b0c <UART_SetConfig+0x26c>
 8007abe:	231b      	movs	r3, #27
 8007ac0:	2220      	movs	r2, #32
 8007ac2:	4694      	mov	ip, r2
 8007ac4:	44bc      	add	ip, r7
 8007ac6:	4463      	add	r3, ip
 8007ac8:	2202      	movs	r2, #2
 8007aca:	701a      	strb	r2, [r3, #0]
 8007acc:	e01e      	b.n	8007b0c <UART_SetConfig+0x26c>
 8007ace:	231b      	movs	r3, #27
 8007ad0:	2220      	movs	r2, #32
 8007ad2:	4694      	mov	ip, r2
 8007ad4:	44bc      	add	ip, r7
 8007ad6:	4463      	add	r3, ip
 8007ad8:	2204      	movs	r2, #4
 8007ada:	701a      	strb	r2, [r3, #0]
 8007adc:	e016      	b.n	8007b0c <UART_SetConfig+0x26c>
 8007ade:	231b      	movs	r3, #27
 8007ae0:	2220      	movs	r2, #32
 8007ae2:	4694      	mov	ip, r2
 8007ae4:	44bc      	add	ip, r7
 8007ae6:	4463      	add	r3, ip
 8007ae8:	2208      	movs	r2, #8
 8007aea:	701a      	strb	r2, [r3, #0]
 8007aec:	e00e      	b.n	8007b0c <UART_SetConfig+0x26c>
 8007aee:	231b      	movs	r3, #27
 8007af0:	2220      	movs	r2, #32
 8007af2:	4694      	mov	ip, r2
 8007af4:	44bc      	add	ip, r7
 8007af6:	4463      	add	r3, ip
 8007af8:	2210      	movs	r2, #16
 8007afa:	701a      	strb	r2, [r3, #0]
 8007afc:	e006      	b.n	8007b0c <UART_SetConfig+0x26c>
 8007afe:	231b      	movs	r3, #27
 8007b00:	2220      	movs	r2, #32
 8007b02:	4694      	mov	ip, r2
 8007b04:	44bc      	add	ip, r7
 8007b06:	4463      	add	r3, ip
 8007b08:	2210      	movs	r2, #16
 8007b0a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a2c      	ldr	r2, [pc, #176]	; (8007bc4 <UART_SetConfig+0x324>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d000      	beq.n	8007b18 <UART_SetConfig+0x278>
 8007b16:	e0ad      	b.n	8007c74 <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b18:	231b      	movs	r3, #27
 8007b1a:	2220      	movs	r2, #32
 8007b1c:	4694      	mov	ip, r2
 8007b1e:	44bc      	add	ip, r7
 8007b20:	4463      	add	r3, ip
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	2b08      	cmp	r3, #8
 8007b26:	d015      	beq.n	8007b54 <UART_SetConfig+0x2b4>
 8007b28:	dc18      	bgt.n	8007b5c <UART_SetConfig+0x2bc>
 8007b2a:	2b04      	cmp	r3, #4
 8007b2c:	d00d      	beq.n	8007b4a <UART_SetConfig+0x2aa>
 8007b2e:	dc15      	bgt.n	8007b5c <UART_SetConfig+0x2bc>
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d002      	beq.n	8007b3a <UART_SetConfig+0x29a>
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d005      	beq.n	8007b44 <UART_SetConfig+0x2a4>
 8007b38:	e010      	b.n	8007b5c <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b3a:	f7fd fd2b 	bl	8005594 <HAL_RCC_GetPCLK1Freq>
 8007b3e:	0003      	movs	r3, r0
 8007b40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b42:	e015      	b.n	8007b70 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b44:	4b26      	ldr	r3, [pc, #152]	; (8007be0 <UART_SetConfig+0x340>)
 8007b46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b48:	e012      	b.n	8007b70 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b4a:	f7fd fc97 	bl	800547c <HAL_RCC_GetSysClockFreq>
 8007b4e:	0003      	movs	r3, r0
 8007b50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b52:	e00d      	b.n	8007b70 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b54:	2380      	movs	r3, #128	; 0x80
 8007b56:	021b      	lsls	r3, r3, #8
 8007b58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b5a:	e009      	b.n	8007b70 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007b60:	231a      	movs	r3, #26
 8007b62:	2220      	movs	r2, #32
 8007b64:	4694      	mov	ip, r2
 8007b66:	44bc      	add	ip, r7
 8007b68:	4463      	add	r3, ip
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	701a      	strb	r2, [r3, #0]
        break;
 8007b6e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d100      	bne.n	8007b78 <UART_SetConfig+0x2d8>
 8007b76:	e154      	b.n	8007e22 <UART_SetConfig+0x582>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b7c:	4b19      	ldr	r3, [pc, #100]	; (8007be4 <UART_SetConfig+0x344>)
 8007b7e:	0052      	lsls	r2, r2, #1
 8007b80:	5ad3      	ldrh	r3, [r2, r3]
 8007b82:	0019      	movs	r1, r3
 8007b84:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007b86:	f7f8 fad1 	bl	800012c <__udivsi3>
 8007b8a:	0003      	movs	r3, r0
 8007b8c:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	685a      	ldr	r2, [r3, #4]
 8007b92:	0013      	movs	r3, r2
 8007b94:	005b      	lsls	r3, r3, #1
 8007b96:	189b      	adds	r3, r3, r2
 8007b98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d305      	bcc.n	8007baa <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d91e      	bls.n	8007be8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007baa:	231a      	movs	r3, #26
 8007bac:	2220      	movs	r2, #32
 8007bae:	4694      	mov	ip, r2
 8007bb0:	44bc      	add	ip, r7
 8007bb2:	4463      	add	r3, ip
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	701a      	strb	r2, [r3, #0]
 8007bb8:	e133      	b.n	8007e22 <UART_SetConfig+0x582>
 8007bba:	46c0      	nop			; (mov r8, r8)
 8007bbc:	cfff69f3 	.word	0xcfff69f3
 8007bc0:	ffffcfff 	.word	0xffffcfff
 8007bc4:	40008000 	.word	0x40008000
 8007bc8:	11fff4ff 	.word	0x11fff4ff
 8007bcc:	40013800 	.word	0x40013800
 8007bd0:	40021000 	.word	0x40021000
 8007bd4:	40004400 	.word	0x40004400
 8007bd8:	40004800 	.word	0x40004800
 8007bdc:	40004c00 	.word	0x40004c00
 8007be0:	00f42400 	.word	0x00f42400
 8007be4:	0800a2bc 	.word	0x0800a2bc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bea:	61bb      	str	r3, [r7, #24]
 8007bec:	2300      	movs	r3, #0
 8007bee:	61fb      	str	r3, [r7, #28]
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bf4:	4b97      	ldr	r3, [pc, #604]	; (8007e54 <UART_SetConfig+0x5b4>)
 8007bf6:	0052      	lsls	r2, r2, #1
 8007bf8:	5ad3      	ldrh	r3, [r2, r3]
 8007bfa:	613b      	str	r3, [r7, #16]
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	617b      	str	r3, [r7, #20]
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	69b8      	ldr	r0, [r7, #24]
 8007c06:	69f9      	ldr	r1, [r7, #28]
 8007c08:	f7f8 fc06 	bl	8000418 <__aeabi_uldivmod>
 8007c0c:	0002      	movs	r2, r0
 8007c0e:	000b      	movs	r3, r1
 8007c10:	0e11      	lsrs	r1, r2, #24
 8007c12:	021d      	lsls	r5, r3, #8
 8007c14:	430d      	orrs	r5, r1
 8007c16:	0214      	lsls	r4, r2, #8
 8007c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	085b      	lsrs	r3, r3, #1
 8007c1e:	60bb      	str	r3, [r7, #8]
 8007c20:	2300      	movs	r3, #0
 8007c22:	60fb      	str	r3, [r7, #12]
 8007c24:	68b8      	ldr	r0, [r7, #8]
 8007c26:	68f9      	ldr	r1, [r7, #12]
 8007c28:	1900      	adds	r0, r0, r4
 8007c2a:	4169      	adcs	r1, r5
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	603b      	str	r3, [r7, #0]
 8007c32:	2300      	movs	r3, #0
 8007c34:	607b      	str	r3, [r7, #4]
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f7f8 fbed 	bl	8000418 <__aeabi_uldivmod>
 8007c3e:	0002      	movs	r2, r0
 8007c40:	000b      	movs	r3, r1
 8007c42:	0013      	movs	r3, r2
 8007c44:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c48:	23c0      	movs	r3, #192	; 0xc0
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d309      	bcc.n	8007c64 <UART_SetConfig+0x3c4>
 8007c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c52:	2380      	movs	r3, #128	; 0x80
 8007c54:	035b      	lsls	r3, r3, #13
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d204      	bcs.n	8007c64 <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c60:	60da      	str	r2, [r3, #12]
 8007c62:	e0de      	b.n	8007e22 <UART_SetConfig+0x582>
        }
        else
        {
          ret = HAL_ERROR;
 8007c64:	231a      	movs	r3, #26
 8007c66:	2220      	movs	r2, #32
 8007c68:	4694      	mov	ip, r2
 8007c6a:	44bc      	add	ip, r7
 8007c6c:	4463      	add	r3, ip
 8007c6e:	2201      	movs	r2, #1
 8007c70:	701a      	strb	r2, [r3, #0]
 8007c72:	e0d6      	b.n	8007e22 <UART_SetConfig+0x582>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c76:	69da      	ldr	r2, [r3, #28]
 8007c78:	2380      	movs	r3, #128	; 0x80
 8007c7a:	021b      	lsls	r3, r3, #8
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d000      	beq.n	8007c82 <UART_SetConfig+0x3e2>
 8007c80:	e074      	b.n	8007d6c <UART_SetConfig+0x4cc>
  {
    switch (clocksource)
 8007c82:	231b      	movs	r3, #27
 8007c84:	2220      	movs	r2, #32
 8007c86:	4694      	mov	ip, r2
 8007c88:	44bc      	add	ip, r7
 8007c8a:	4463      	add	r3, ip
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	2b08      	cmp	r3, #8
 8007c90:	d015      	beq.n	8007cbe <UART_SetConfig+0x41e>
 8007c92:	dc18      	bgt.n	8007cc6 <UART_SetConfig+0x426>
 8007c94:	2b04      	cmp	r3, #4
 8007c96:	d00d      	beq.n	8007cb4 <UART_SetConfig+0x414>
 8007c98:	dc15      	bgt.n	8007cc6 <UART_SetConfig+0x426>
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d002      	beq.n	8007ca4 <UART_SetConfig+0x404>
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d005      	beq.n	8007cae <UART_SetConfig+0x40e>
 8007ca2:	e010      	b.n	8007cc6 <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ca4:	f7fd fc76 	bl	8005594 <HAL_RCC_GetPCLK1Freq>
 8007ca8:	0003      	movs	r3, r0
 8007caa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cac:	e015      	b.n	8007cda <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cae:	4b6a      	ldr	r3, [pc, #424]	; (8007e58 <UART_SetConfig+0x5b8>)
 8007cb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cb2:	e012      	b.n	8007cda <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cb4:	f7fd fbe2 	bl	800547c <HAL_RCC_GetSysClockFreq>
 8007cb8:	0003      	movs	r3, r0
 8007cba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cbc:	e00d      	b.n	8007cda <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cbe:	2380      	movs	r3, #128	; 0x80
 8007cc0:	021b      	lsls	r3, r3, #8
 8007cc2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cc4:	e009      	b.n	8007cda <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007cca:	231a      	movs	r3, #26
 8007ccc:	2220      	movs	r2, #32
 8007cce:	4694      	mov	ip, r2
 8007cd0:	44bc      	add	ip, r7
 8007cd2:	4463      	add	r3, ip
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	701a      	strb	r2, [r3, #0]
        break;
 8007cd8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d100      	bne.n	8007ce2 <UART_SetConfig+0x442>
 8007ce0:	e09f      	b.n	8007e22 <UART_SetConfig+0x582>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ce6:	4b5b      	ldr	r3, [pc, #364]	; (8007e54 <UART_SetConfig+0x5b4>)
 8007ce8:	0052      	lsls	r2, r2, #1
 8007cea:	5ad3      	ldrh	r3, [r2, r3]
 8007cec:	0019      	movs	r1, r3
 8007cee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007cf0:	f7f8 fa1c 	bl	800012c <__udivsi3>
 8007cf4:	0003      	movs	r3, r0
 8007cf6:	005a      	lsls	r2, r3, #1
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	085b      	lsrs	r3, r3, #1
 8007cfe:	18d2      	adds	r2, r2, r3
 8007d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	0019      	movs	r1, r3
 8007d06:	0010      	movs	r0, r2
 8007d08:	f7f8 fa10 	bl	800012c <__udivsi3>
 8007d0c:	0003      	movs	r3, r0
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d14:	2b0f      	cmp	r3, #15
 8007d16:	d921      	bls.n	8007d5c <UART_SetConfig+0x4bc>
 8007d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d1a:	2380      	movs	r3, #128	; 0x80
 8007d1c:	025b      	lsls	r3, r3, #9
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d21c      	bcs.n	8007d5c <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	200e      	movs	r0, #14
 8007d28:	2420      	movs	r4, #32
 8007d2a:	193b      	adds	r3, r7, r4
 8007d2c:	181b      	adds	r3, r3, r0
 8007d2e:	210f      	movs	r1, #15
 8007d30:	438a      	bics	r2, r1
 8007d32:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d36:	085b      	lsrs	r3, r3, #1
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	2207      	movs	r2, #7
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	b299      	uxth	r1, r3
 8007d40:	193b      	adds	r3, r7, r4
 8007d42:	181b      	adds	r3, r3, r0
 8007d44:	193a      	adds	r2, r7, r4
 8007d46:	1812      	adds	r2, r2, r0
 8007d48:	8812      	ldrh	r2, [r2, #0]
 8007d4a:	430a      	orrs	r2, r1
 8007d4c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	193a      	adds	r2, r7, r4
 8007d54:	1812      	adds	r2, r2, r0
 8007d56:	8812      	ldrh	r2, [r2, #0]
 8007d58:	60da      	str	r2, [r3, #12]
 8007d5a:	e062      	b.n	8007e22 <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 8007d5c:	231a      	movs	r3, #26
 8007d5e:	2220      	movs	r2, #32
 8007d60:	4694      	mov	ip, r2
 8007d62:	44bc      	add	ip, r7
 8007d64:	4463      	add	r3, ip
 8007d66:	2201      	movs	r2, #1
 8007d68:	701a      	strb	r2, [r3, #0]
 8007d6a:	e05a      	b.n	8007e22 <UART_SetConfig+0x582>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d6c:	231b      	movs	r3, #27
 8007d6e:	2220      	movs	r2, #32
 8007d70:	4694      	mov	ip, r2
 8007d72:	44bc      	add	ip, r7
 8007d74:	4463      	add	r3, ip
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	2b08      	cmp	r3, #8
 8007d7a:	d015      	beq.n	8007da8 <UART_SetConfig+0x508>
 8007d7c:	dc18      	bgt.n	8007db0 <UART_SetConfig+0x510>
 8007d7e:	2b04      	cmp	r3, #4
 8007d80:	d00d      	beq.n	8007d9e <UART_SetConfig+0x4fe>
 8007d82:	dc15      	bgt.n	8007db0 <UART_SetConfig+0x510>
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d002      	beq.n	8007d8e <UART_SetConfig+0x4ee>
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d005      	beq.n	8007d98 <UART_SetConfig+0x4f8>
 8007d8c:	e010      	b.n	8007db0 <UART_SetConfig+0x510>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d8e:	f7fd fc01 	bl	8005594 <HAL_RCC_GetPCLK1Freq>
 8007d92:	0003      	movs	r3, r0
 8007d94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d96:	e015      	b.n	8007dc4 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d98:	4b2f      	ldr	r3, [pc, #188]	; (8007e58 <UART_SetConfig+0x5b8>)
 8007d9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d9c:	e012      	b.n	8007dc4 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d9e:	f7fd fb6d 	bl	800547c <HAL_RCC_GetSysClockFreq>
 8007da2:	0003      	movs	r3, r0
 8007da4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007da6:	e00d      	b.n	8007dc4 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007da8:	2380      	movs	r3, #128	; 0x80
 8007daa:	021b      	lsls	r3, r3, #8
 8007dac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007dae:	e009      	b.n	8007dc4 <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 8007db0:	2300      	movs	r3, #0
 8007db2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007db4:	231a      	movs	r3, #26
 8007db6:	2220      	movs	r2, #32
 8007db8:	4694      	mov	ip, r2
 8007dba:	44bc      	add	ip, r7
 8007dbc:	4463      	add	r3, ip
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	701a      	strb	r2, [r3, #0]
        break;
 8007dc2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d02b      	beq.n	8007e22 <UART_SetConfig+0x582>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dce:	4b21      	ldr	r3, [pc, #132]	; (8007e54 <UART_SetConfig+0x5b4>)
 8007dd0:	0052      	lsls	r2, r2, #1
 8007dd2:	5ad3      	ldrh	r3, [r2, r3]
 8007dd4:	0019      	movs	r1, r3
 8007dd6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007dd8:	f7f8 f9a8 	bl	800012c <__udivsi3>
 8007ddc:	0003      	movs	r3, r0
 8007dde:	001a      	movs	r2, r3
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	085b      	lsrs	r3, r3, #1
 8007de6:	18d2      	adds	r2, r2, r3
 8007de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	0019      	movs	r1, r3
 8007dee:	0010      	movs	r0, r2
 8007df0:	f7f8 f99c 	bl	800012c <__udivsi3>
 8007df4:	0003      	movs	r3, r0
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfc:	2b0f      	cmp	r3, #15
 8007dfe:	d909      	bls.n	8007e14 <UART_SetConfig+0x574>
 8007e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e02:	2380      	movs	r3, #128	; 0x80
 8007e04:	025b      	lsls	r3, r3, #9
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d204      	bcs.n	8007e14 <UART_SetConfig+0x574>
      {
        huart->Instance->BRR = usartdiv;
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e10:	60da      	str	r2, [r3, #12]
 8007e12:	e006      	b.n	8007e22 <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 8007e14:	231a      	movs	r3, #26
 8007e16:	2220      	movs	r2, #32
 8007e18:	4694      	mov	ip, r2
 8007e1a:	44bc      	add	ip, r7
 8007e1c:	4463      	add	r3, ip
 8007e1e:	2201      	movs	r2, #1
 8007e20:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	226a      	movs	r2, #106	; 0x6a
 8007e26:	2101      	movs	r1, #1
 8007e28:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2c:	2268      	movs	r2, #104	; 0x68
 8007e2e:	2101      	movs	r1, #1
 8007e30:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e34:	2200      	movs	r2, #0
 8007e36:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007e3e:	231a      	movs	r3, #26
 8007e40:	2220      	movs	r2, #32
 8007e42:	4694      	mov	ip, r2
 8007e44:	44bc      	add	ip, r7
 8007e46:	4463      	add	r3, ip
 8007e48:	781b      	ldrb	r3, [r3, #0]
}
 8007e4a:	0018      	movs	r0, r3
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	b010      	add	sp, #64	; 0x40
 8007e50:	bdb0      	pop	{r4, r5, r7, pc}
 8007e52:	46c0      	nop			; (mov r8, r8)
 8007e54:	0800a2bc 	.word	0x0800a2bc
 8007e58:	00f42400 	.word	0x00f42400

08007e5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e68:	2201      	movs	r2, #1
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	d00b      	beq.n	8007e86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	4a4a      	ldr	r2, [pc, #296]	; (8007fa0 <UART_AdvFeatureConfig+0x144>)
 8007e76:	4013      	ands	r3, r2
 8007e78:	0019      	movs	r1, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	430a      	orrs	r2, r1
 8007e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	d00b      	beq.n	8007ea8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	4a43      	ldr	r2, [pc, #268]	; (8007fa4 <UART_AdvFeatureConfig+0x148>)
 8007e98:	4013      	ands	r3, r2
 8007e9a:	0019      	movs	r1, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eac:	2204      	movs	r2, #4
 8007eae:	4013      	ands	r3, r2
 8007eb0:	d00b      	beq.n	8007eca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	4a3b      	ldr	r2, [pc, #236]	; (8007fa8 <UART_AdvFeatureConfig+0x14c>)
 8007eba:	4013      	ands	r3, r2
 8007ebc:	0019      	movs	r1, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ece:	2208      	movs	r2, #8
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	d00b      	beq.n	8007eec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	4a34      	ldr	r2, [pc, #208]	; (8007fac <UART_AdvFeatureConfig+0x150>)
 8007edc:	4013      	ands	r3, r2
 8007ede:	0019      	movs	r1, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	430a      	orrs	r2, r1
 8007eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef0:	2210      	movs	r2, #16
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	d00b      	beq.n	8007f0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	4a2c      	ldr	r2, [pc, #176]	; (8007fb0 <UART_AdvFeatureConfig+0x154>)
 8007efe:	4013      	ands	r3, r2
 8007f00:	0019      	movs	r1, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f12:	2220      	movs	r2, #32
 8007f14:	4013      	ands	r3, r2
 8007f16:	d00b      	beq.n	8007f30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	4a25      	ldr	r2, [pc, #148]	; (8007fb4 <UART_AdvFeatureConfig+0x158>)
 8007f20:	4013      	ands	r3, r2
 8007f22:	0019      	movs	r1, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	430a      	orrs	r2, r1
 8007f2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f34:	2240      	movs	r2, #64	; 0x40
 8007f36:	4013      	ands	r3, r2
 8007f38:	d01d      	beq.n	8007f76 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	4a1d      	ldr	r2, [pc, #116]	; (8007fb8 <UART_AdvFeatureConfig+0x15c>)
 8007f42:	4013      	ands	r3, r2
 8007f44:	0019      	movs	r1, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	430a      	orrs	r2, r1
 8007f50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f56:	2380      	movs	r3, #128	; 0x80
 8007f58:	035b      	lsls	r3, r3, #13
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d10b      	bne.n	8007f76 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	4a15      	ldr	r2, [pc, #84]	; (8007fbc <UART_AdvFeatureConfig+0x160>)
 8007f66:	4013      	ands	r3, r2
 8007f68:	0019      	movs	r1, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	430a      	orrs	r2, r1
 8007f74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7a:	2280      	movs	r2, #128	; 0x80
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	d00b      	beq.n	8007f98 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	4a0e      	ldr	r2, [pc, #56]	; (8007fc0 <UART_AdvFeatureConfig+0x164>)
 8007f88:	4013      	ands	r3, r2
 8007f8a:	0019      	movs	r1, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	430a      	orrs	r2, r1
 8007f96:	605a      	str	r2, [r3, #4]
  }
}
 8007f98:	46c0      	nop			; (mov r8, r8)
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	b002      	add	sp, #8
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	fffdffff 	.word	0xfffdffff
 8007fa4:	fffeffff 	.word	0xfffeffff
 8007fa8:	fffbffff 	.word	0xfffbffff
 8007fac:	ffff7fff 	.word	0xffff7fff
 8007fb0:	ffffefff 	.word	0xffffefff
 8007fb4:	ffffdfff 	.word	0xffffdfff
 8007fb8:	ffefffff 	.word	0xffefffff
 8007fbc:	ff9fffff 	.word	0xff9fffff
 8007fc0:	fff7ffff 	.word	0xfff7ffff

08007fc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b086      	sub	sp, #24
 8007fc8:	af02      	add	r7, sp, #8
 8007fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	228c      	movs	r2, #140	; 0x8c
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fd4:	f7fb fd64 	bl	8003aa0 <HAL_GetTick>
 8007fd8:	0003      	movs	r3, r0
 8007fda:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2208      	movs	r2, #8
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	2b08      	cmp	r3, #8
 8007fe8:	d10c      	bne.n	8008004 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2280      	movs	r2, #128	; 0x80
 8007fee:	0391      	lsls	r1, r2, #14
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	4a18      	ldr	r2, [pc, #96]	; (8008054 <UART_CheckIdleState+0x90>)
 8007ff4:	9200      	str	r2, [sp, #0]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f000 f82e 	bl	8008058 <UART_WaitOnFlagUntilTimeout>
 8007ffc:	1e03      	subs	r3, r0, #0
 8007ffe:	d001      	beq.n	8008004 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008000:	2303      	movs	r3, #3
 8008002:	e023      	b.n	800804c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2204      	movs	r2, #4
 800800c:	4013      	ands	r3, r2
 800800e:	2b04      	cmp	r3, #4
 8008010:	d10c      	bne.n	800802c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2280      	movs	r2, #128	; 0x80
 8008016:	03d1      	lsls	r1, r2, #15
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	4a0e      	ldr	r2, [pc, #56]	; (8008054 <UART_CheckIdleState+0x90>)
 800801c:	9200      	str	r2, [sp, #0]
 800801e:	2200      	movs	r2, #0
 8008020:	f000 f81a 	bl	8008058 <UART_WaitOnFlagUntilTimeout>
 8008024:	1e03      	subs	r3, r0, #0
 8008026:	d001      	beq.n	800802c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008028:	2303      	movs	r3, #3
 800802a:	e00f      	b.n	800804c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2284      	movs	r2, #132	; 0x84
 8008030:	2120      	movs	r1, #32
 8008032:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2288      	movs	r2, #136	; 0x88
 8008038:	2120      	movs	r1, #32
 800803a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2280      	movs	r2, #128	; 0x80
 8008046:	2100      	movs	r1, #0
 8008048:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	0018      	movs	r0, r3
 800804e:	46bd      	mov	sp, r7
 8008050:	b004      	add	sp, #16
 8008052:	bd80      	pop	{r7, pc}
 8008054:	01ffffff 	.word	0x01ffffff

08008058 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b094      	sub	sp, #80	; 0x50
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	603b      	str	r3, [r7, #0]
 8008064:	1dfb      	adds	r3, r7, #7
 8008066:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008068:	e0a7      	b.n	80081ba <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800806a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800806c:	3301      	adds	r3, #1
 800806e:	d100      	bne.n	8008072 <UART_WaitOnFlagUntilTimeout+0x1a>
 8008070:	e0a3      	b.n	80081ba <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008072:	f7fb fd15 	bl	8003aa0 <HAL_GetTick>
 8008076:	0002      	movs	r2, r0
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800807e:	429a      	cmp	r2, r3
 8008080:	d302      	bcc.n	8008088 <UART_WaitOnFlagUntilTimeout+0x30>
 8008082:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008084:	2b00      	cmp	r3, #0
 8008086:	d13f      	bne.n	8008108 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008088:	f3ef 8310 	mrs	r3, PRIMASK
 800808c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800808e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008090:	647b      	str	r3, [r7, #68]	; 0x44
 8008092:	2301      	movs	r3, #1
 8008094:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008098:	f383 8810 	msr	PRIMASK, r3
}
 800809c:	46c0      	nop			; (mov r8, r8)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	494e      	ldr	r1, [pc, #312]	; (80081e4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80080aa:	400a      	ands	r2, r1
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080b0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b4:	f383 8810 	msr	PRIMASK, r3
}
 80080b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080ba:	f3ef 8310 	mrs	r3, PRIMASK
 80080be:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80080c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080c2:	643b      	str	r3, [r7, #64]	; 0x40
 80080c4:	2301      	movs	r3, #1
 80080c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ca:	f383 8810 	msr	PRIMASK, r3
}
 80080ce:	46c0      	nop			; (mov r8, r8)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689a      	ldr	r2, [r3, #8]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2101      	movs	r1, #1
 80080dc:	438a      	bics	r2, r1
 80080de:	609a      	str	r2, [r3, #8]
 80080e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080e6:	f383 8810 	msr	PRIMASK, r3
}
 80080ea:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2284      	movs	r2, #132	; 0x84
 80080f0:	2120      	movs	r1, #32
 80080f2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2288      	movs	r2, #136	; 0x88
 80080f8:	2120      	movs	r1, #32
 80080fa:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2280      	movs	r2, #128	; 0x80
 8008100:	2100      	movs	r1, #0
 8008102:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008104:	2303      	movs	r3, #3
 8008106:	e069      	b.n	80081dc <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2204      	movs	r2, #4
 8008110:	4013      	ands	r3, r2
 8008112:	d052      	beq.n	80081ba <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	69da      	ldr	r2, [r3, #28]
 800811a:	2380      	movs	r3, #128	; 0x80
 800811c:	011b      	lsls	r3, r3, #4
 800811e:	401a      	ands	r2, r3
 8008120:	2380      	movs	r3, #128	; 0x80
 8008122:	011b      	lsls	r3, r3, #4
 8008124:	429a      	cmp	r2, r3
 8008126:	d148      	bne.n	80081ba <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2280      	movs	r2, #128	; 0x80
 800812e:	0112      	lsls	r2, r2, #4
 8008130:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008132:	f3ef 8310 	mrs	r3, PRIMASK
 8008136:	613b      	str	r3, [r7, #16]
  return(result);
 8008138:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800813a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800813c:	2301      	movs	r3, #1
 800813e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	f383 8810 	msr	PRIMASK, r3
}
 8008146:	46c0      	nop			; (mov r8, r8)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4924      	ldr	r1, [pc, #144]	; (80081e4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008154:	400a      	ands	r2, r1
 8008156:	601a      	str	r2, [r3, #0]
 8008158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800815a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	f383 8810 	msr	PRIMASK, r3
}
 8008162:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008164:	f3ef 8310 	mrs	r3, PRIMASK
 8008168:	61fb      	str	r3, [r7, #28]
  return(result);
 800816a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800816c:	64bb      	str	r3, [r7, #72]	; 0x48
 800816e:	2301      	movs	r3, #1
 8008170:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008172:	6a3b      	ldr	r3, [r7, #32]
 8008174:	f383 8810 	msr	PRIMASK, r3
}
 8008178:	46c0      	nop			; (mov r8, r8)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	689a      	ldr	r2, [r3, #8]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2101      	movs	r1, #1
 8008186:	438a      	bics	r2, r1
 8008188:	609a      	str	r2, [r3, #8]
 800818a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800818c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008190:	f383 8810 	msr	PRIMASK, r3
}
 8008194:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2284      	movs	r2, #132	; 0x84
 800819a:	2120      	movs	r1, #32
 800819c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2288      	movs	r2, #136	; 0x88
 80081a2:	2120      	movs	r1, #32
 80081a4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	228c      	movs	r2, #140	; 0x8c
 80081aa:	2120      	movs	r1, #32
 80081ac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2280      	movs	r2, #128	; 0x80
 80081b2:	2100      	movs	r1, #0
 80081b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e010      	b.n	80081dc <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	69db      	ldr	r3, [r3, #28]
 80081c0:	68ba      	ldr	r2, [r7, #8]
 80081c2:	4013      	ands	r3, r2
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	425a      	negs	r2, r3
 80081ca:	4153      	adcs	r3, r2
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	001a      	movs	r2, r3
 80081d0:	1dfb      	adds	r3, r7, #7
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d100      	bne.n	80081da <UART_WaitOnFlagUntilTimeout+0x182>
 80081d8:	e747      	b.n	800806a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	0018      	movs	r0, r3
 80081de:	46bd      	mov	sp, r7
 80081e0:	b014      	add	sp, #80	; 0x50
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	fffffe5f 	.word	0xfffffe5f

080081e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b094      	sub	sp, #80	; 0x50
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	1dbb      	adds	r3, r7, #6
 80081f4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	1dba      	adds	r2, r7, #6
 8008200:	215c      	movs	r1, #92	; 0x5c
 8008202:	8812      	ldrh	r2, [r2, #0]
 8008204:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	1dba      	adds	r2, r7, #6
 800820a:	215e      	movs	r1, #94	; 0x5e
 800820c:	8812      	ldrh	r2, [r2, #0]
 800820e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2200      	movs	r2, #0
 8008214:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	689a      	ldr	r2, [r3, #8]
 800821a:	2380      	movs	r3, #128	; 0x80
 800821c:	015b      	lsls	r3, r3, #5
 800821e:	429a      	cmp	r2, r3
 8008220:	d10d      	bne.n	800823e <UART_Start_Receive_IT+0x56>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d104      	bne.n	8008234 <UART_Start_Receive_IT+0x4c>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2260      	movs	r2, #96	; 0x60
 800822e:	496f      	ldr	r1, [pc, #444]	; (80083ec <UART_Start_Receive_IT+0x204>)
 8008230:	5299      	strh	r1, [r3, r2]
 8008232:	e02e      	b.n	8008292 <UART_Start_Receive_IT+0xaa>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2260      	movs	r2, #96	; 0x60
 8008238:	21ff      	movs	r1, #255	; 0xff
 800823a:	5299      	strh	r1, [r3, r2]
 800823c:	e029      	b.n	8008292 <UART_Start_Receive_IT+0xaa>
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10d      	bne.n	8008262 <UART_Start_Receive_IT+0x7a>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d104      	bne.n	8008258 <UART_Start_Receive_IT+0x70>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2260      	movs	r2, #96	; 0x60
 8008252:	21ff      	movs	r1, #255	; 0xff
 8008254:	5299      	strh	r1, [r3, r2]
 8008256:	e01c      	b.n	8008292 <UART_Start_Receive_IT+0xaa>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2260      	movs	r2, #96	; 0x60
 800825c:	217f      	movs	r1, #127	; 0x7f
 800825e:	5299      	strh	r1, [r3, r2]
 8008260:	e017      	b.n	8008292 <UART_Start_Receive_IT+0xaa>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	689a      	ldr	r2, [r3, #8]
 8008266:	2380      	movs	r3, #128	; 0x80
 8008268:	055b      	lsls	r3, r3, #21
 800826a:	429a      	cmp	r2, r3
 800826c:	d10d      	bne.n	800828a <UART_Start_Receive_IT+0xa2>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d104      	bne.n	8008280 <UART_Start_Receive_IT+0x98>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2260      	movs	r2, #96	; 0x60
 800827a:	217f      	movs	r1, #127	; 0x7f
 800827c:	5299      	strh	r1, [r3, r2]
 800827e:	e008      	b.n	8008292 <UART_Start_Receive_IT+0xaa>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2260      	movs	r2, #96	; 0x60
 8008284:	213f      	movs	r1, #63	; 0x3f
 8008286:	5299      	strh	r1, [r3, r2]
 8008288:	e003      	b.n	8008292 <UART_Start_Receive_IT+0xaa>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2260      	movs	r2, #96	; 0x60
 800828e:	2100      	movs	r1, #0
 8008290:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	228c      	movs	r2, #140	; 0x8c
 8008296:	2100      	movs	r1, #0
 8008298:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2288      	movs	r2, #136	; 0x88
 800829e:	2122      	movs	r1, #34	; 0x22
 80082a0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082a2:	f3ef 8310 	mrs	r3, PRIMASK
 80082a6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80082a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082ac:	2301      	movs	r3, #1
 80082ae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b2:	f383 8810 	msr	PRIMASK, r3
}
 80082b6:	46c0      	nop			; (mov r8, r8)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	689a      	ldr	r2, [r3, #8]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2101      	movs	r1, #1
 80082c4:	430a      	orrs	r2, r1
 80082c6:	609a      	str	r2, [r3, #8]
 80082c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ce:	f383 8810 	msr	PRIMASK, r3
}
 80082d2:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80082d8:	2380      	movs	r3, #128	; 0x80
 80082da:	059b      	lsls	r3, r3, #22
 80082dc:	429a      	cmp	r2, r3
 80082de:	d150      	bne.n	8008382 <UART_Start_Receive_IT+0x19a>
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2268      	movs	r2, #104	; 0x68
 80082e4:	5a9b      	ldrh	r3, [r3, r2]
 80082e6:	1dba      	adds	r2, r7, #6
 80082e8:	8812      	ldrh	r2, [r2, #0]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d349      	bcc.n	8008382 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	689a      	ldr	r2, [r3, #8]
 80082f2:	2380      	movs	r3, #128	; 0x80
 80082f4:	015b      	lsls	r3, r3, #5
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d107      	bne.n	800830a <UART_Start_Receive_IT+0x122>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d103      	bne.n	800830a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	4a3a      	ldr	r2, [pc, #232]	; (80083f0 <UART_Start_Receive_IT+0x208>)
 8008306:	671a      	str	r2, [r3, #112]	; 0x70
 8008308:	e002      	b.n	8008310 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	4a39      	ldr	r2, [pc, #228]	; (80083f4 <UART_Start_Receive_IT+0x20c>)
 800830e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2280      	movs	r2, #128	; 0x80
 8008314:	2100      	movs	r1, #0
 8008316:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008318:	f3ef 8310 	mrs	r3, PRIMASK
 800831c:	61fb      	str	r3, [r7, #28]
  return(result);
 800831e:	69fb      	ldr	r3, [r7, #28]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008320:	64bb      	str	r3, [r7, #72]	; 0x48
 8008322:	2301      	movs	r3, #1
 8008324:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008326:	6a3b      	ldr	r3, [r7, #32]
 8008328:	f383 8810 	msr	PRIMASK, r3
}
 800832c:	46c0      	nop			; (mov r8, r8)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2180      	movs	r1, #128	; 0x80
 800833a:	0049      	lsls	r1, r1, #1
 800833c:	430a      	orrs	r2, r1
 800833e:	601a      	str	r2, [r3, #0]
 8008340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008342:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	f383 8810 	msr	PRIMASK, r3
}
 800834a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800834c:	f3ef 8310 	mrs	r3, PRIMASK
 8008350:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008352:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008354:	647b      	str	r3, [r7, #68]	; 0x44
 8008356:	2301      	movs	r3, #1
 8008358:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800835a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835c:	f383 8810 	msr	PRIMASK, r3
}
 8008360:	46c0      	nop			; (mov r8, r8)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	689a      	ldr	r2, [r3, #8]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2180      	movs	r1, #128	; 0x80
 800836e:	0549      	lsls	r1, r1, #21
 8008370:	430a      	orrs	r2, r1
 8008372:	609a      	str	r2, [r3, #8]
 8008374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008376:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837a:	f383 8810 	msr	PRIMASK, r3
}
 800837e:	46c0      	nop			; (mov r8, r8)
 8008380:	e02e      	b.n	80083e0 <UART_Start_Receive_IT+0x1f8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	689a      	ldr	r2, [r3, #8]
 8008386:	2380      	movs	r3, #128	; 0x80
 8008388:	015b      	lsls	r3, r3, #5
 800838a:	429a      	cmp	r2, r3
 800838c:	d107      	bne.n	800839e <UART_Start_Receive_IT+0x1b6>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d103      	bne.n	800839e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	4a17      	ldr	r2, [pc, #92]	; (80083f8 <UART_Start_Receive_IT+0x210>)
 800839a:	671a      	str	r2, [r3, #112]	; 0x70
 800839c:	e002      	b.n	80083a4 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	4a16      	ldr	r2, [pc, #88]	; (80083fc <UART_Start_Receive_IT+0x214>)
 80083a2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2280      	movs	r2, #128	; 0x80
 80083a8:	2100      	movs	r1, #0
 80083aa:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083ac:	f3ef 8310 	mrs	r3, PRIMASK
 80083b0:	613b      	str	r3, [r7, #16]
  return(result);
 80083b2:	693b      	ldr	r3, [r7, #16]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80083b4:	643b      	str	r3, [r7, #64]	; 0x40
 80083b6:	2301      	movs	r3, #1
 80083b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	f383 8810 	msr	PRIMASK, r3
}
 80083c0:	46c0      	nop			; (mov r8, r8)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2190      	movs	r1, #144	; 0x90
 80083ce:	0049      	lsls	r1, r1, #1
 80083d0:	430a      	orrs	r2, r1
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	f383 8810 	msr	PRIMASK, r3
}
 80083de:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	0018      	movs	r0, r3
 80083e4:	46bd      	mov	sp, r7
 80083e6:	b014      	add	sp, #80	; 0x50
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	46c0      	nop			; (mov r8, r8)
 80083ec:	000001ff 	.word	0x000001ff
 80083f0:	08008b11 	.word	0x08008b11
 80083f4:	0800882d 	.word	0x0800882d
 80083f8:	080086c1 	.word	0x080086c1
 80083fc:	08008555 	.word	0x08008555

08008400 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b08e      	sub	sp, #56	; 0x38
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008408:	f3ef 8310 	mrs	r3, PRIMASK
 800840c:	617b      	str	r3, [r7, #20]
  return(result);
 800840e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008410:	637b      	str	r3, [r7, #52]	; 0x34
 8008412:	2301      	movs	r3, #1
 8008414:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	f383 8810 	msr	PRIMASK, r3
}
 800841c:	46c0      	nop			; (mov r8, r8)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4926      	ldr	r1, [pc, #152]	; (80084c4 <UART_EndRxTransfer+0xc4>)
 800842a:	400a      	ands	r2, r1
 800842c:	601a      	str	r2, [r3, #0]
 800842e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008430:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	f383 8810 	msr	PRIMASK, r3
}
 8008438:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800843a:	f3ef 8310 	mrs	r3, PRIMASK
 800843e:	623b      	str	r3, [r7, #32]
  return(result);
 8008440:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008442:	633b      	str	r3, [r7, #48]	; 0x30
 8008444:	2301      	movs	r3, #1
 8008446:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844a:	f383 8810 	msr	PRIMASK, r3
}
 800844e:	46c0      	nop			; (mov r8, r8)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	689a      	ldr	r2, [r3, #8]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	491b      	ldr	r1, [pc, #108]	; (80084c8 <UART_EndRxTransfer+0xc8>)
 800845c:	400a      	ands	r2, r1
 800845e:	609a      	str	r2, [r3, #8]
 8008460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008462:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008466:	f383 8810 	msr	PRIMASK, r3
}
 800846a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008470:	2b01      	cmp	r3, #1
 8008472:	d118      	bne.n	80084a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008474:	f3ef 8310 	mrs	r3, PRIMASK
 8008478:	60bb      	str	r3, [r7, #8]
  return(result);
 800847a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800847c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800847e:	2301      	movs	r3, #1
 8008480:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f383 8810 	msr	PRIMASK, r3
}
 8008488:	46c0      	nop			; (mov r8, r8)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2110      	movs	r1, #16
 8008496:	438a      	bics	r2, r1
 8008498:	601a      	str	r2, [r3, #0]
 800849a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	f383 8810 	msr	PRIMASK, r3
}
 80084a4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2288      	movs	r2, #136	; 0x88
 80084aa:	2120      	movs	r1, #32
 80084ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	671a      	str	r2, [r3, #112]	; 0x70
}
 80084ba:	46c0      	nop			; (mov r8, r8)
 80084bc:	46bd      	mov	sp, r7
 80084be:	b00e      	add	sp, #56	; 0x38
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	46c0      	nop			; (mov r8, r8)
 80084c4:	fffffedf 	.word	0xfffffedf
 80084c8:	effffffe 	.word	0xeffffffe

080084cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	225e      	movs	r2, #94	; 0x5e
 80084de:	2100      	movs	r1, #0
 80084e0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2256      	movs	r2, #86	; 0x56
 80084e6:	2100      	movs	r1, #0
 80084e8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	0018      	movs	r0, r3
 80084ee:	f7ff f9c3 	bl	8007878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084f2:	46c0      	nop			; (mov r8, r8)
 80084f4:	46bd      	mov	sp, r7
 80084f6:	b004      	add	sp, #16
 80084f8:	bd80      	pop	{r7, pc}

080084fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b086      	sub	sp, #24
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008502:	f3ef 8310 	mrs	r3, PRIMASK
 8008506:	60bb      	str	r3, [r7, #8]
  return(result);
 8008508:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800850a:	617b      	str	r3, [r7, #20]
 800850c:	2301      	movs	r3, #1
 800850e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f383 8810 	msr	PRIMASK, r3
}
 8008516:	46c0      	nop			; (mov r8, r8)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2140      	movs	r1, #64	; 0x40
 8008524:	438a      	bics	r2, r1
 8008526:	601a      	str	r2, [r3, #0]
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	f383 8810 	msr	PRIMASK, r3
}
 8008532:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2284      	movs	r2, #132	; 0x84
 8008538:	2120      	movs	r1, #32
 800853a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	0018      	movs	r0, r3
 8008546:	f7ff f98f 	bl	8007868 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800854a:	46c0      	nop			; (mov r8, r8)
 800854c:	46bd      	mov	sp, r7
 800854e:	b006      	add	sp, #24
 8008550:	bd80      	pop	{r7, pc}
	...

08008554 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b090      	sub	sp, #64	; 0x40
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800855c:	203e      	movs	r0, #62	; 0x3e
 800855e:	183b      	adds	r3, r7, r0
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	2160      	movs	r1, #96	; 0x60
 8008564:	5a52      	ldrh	r2, [r2, r1]
 8008566:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2288      	movs	r2, #136	; 0x88
 800856c:	589b      	ldr	r3, [r3, r2]
 800856e:	2b22      	cmp	r3, #34	; 0x22
 8008570:	d000      	beq.n	8008574 <UART_RxISR_8BIT+0x20>
 8008572:	e097      	b.n	80086a4 <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800857a:	213c      	movs	r1, #60	; 0x3c
 800857c:	187b      	adds	r3, r7, r1
 800857e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008580:	187b      	adds	r3, r7, r1
 8008582:	881b      	ldrh	r3, [r3, #0]
 8008584:	b2da      	uxtb	r2, r3
 8008586:	183b      	adds	r3, r7, r0
 8008588:	881b      	ldrh	r3, [r3, #0]
 800858a:	b2d9      	uxtb	r1, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008590:	400a      	ands	r2, r1
 8008592:	b2d2      	uxtb	r2, r2
 8008594:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800859a:	1c5a      	adds	r2, r3, #1
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	225e      	movs	r2, #94	; 0x5e
 80085a4:	5a9b      	ldrh	r3, [r3, r2]
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	3b01      	subs	r3, #1
 80085aa:	b299      	uxth	r1, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	225e      	movs	r2, #94	; 0x5e
 80085b0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	225e      	movs	r2, #94	; 0x5e
 80085b6:	5a9b      	ldrh	r3, [r3, r2]
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d000      	beq.n	80085c0 <UART_RxISR_8BIT+0x6c>
 80085be:	e079      	b.n	80086b4 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085c0:	f3ef 8310 	mrs	r3, PRIMASK
 80085c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80085c6:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80085ca:	2301      	movs	r3, #1
 80085cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	f383 8810 	msr	PRIMASK, r3
}
 80085d4:	46c0      	nop			; (mov r8, r8)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4936      	ldr	r1, [pc, #216]	; (80086bc <UART_RxISR_8BIT+0x168>)
 80085e2:	400a      	ands	r2, r1
 80085e4:	601a      	str	r2, [r3, #0]
 80085e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085ea:	6a3b      	ldr	r3, [r7, #32]
 80085ec:	f383 8810 	msr	PRIMASK, r3
}
 80085f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085f2:	f3ef 8310 	mrs	r3, PRIMASK
 80085f6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085fa:	637b      	str	r3, [r7, #52]	; 0x34
 80085fc:	2301      	movs	r3, #1
 80085fe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008602:	f383 8810 	msr	PRIMASK, r3
}
 8008606:	46c0      	nop			; (mov r8, r8)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	689a      	ldr	r2, [r3, #8]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2101      	movs	r1, #1
 8008614:	438a      	bics	r2, r1
 8008616:	609a      	str	r2, [r3, #8]
 8008618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800861a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800861c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861e:	f383 8810 	msr	PRIMASK, r3
}
 8008622:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2288      	movs	r2, #136	; 0x88
 8008628:	2120      	movs	r1, #32
 800862a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008636:	2b01      	cmp	r3, #1
 8008638:	d12f      	bne.n	800869a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008640:	f3ef 8310 	mrs	r3, PRIMASK
 8008644:	60fb      	str	r3, [r7, #12]
  return(result);
 8008646:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008648:	633b      	str	r3, [r7, #48]	; 0x30
 800864a:	2301      	movs	r3, #1
 800864c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	f383 8810 	msr	PRIMASK, r3
}
 8008654:	46c0      	nop			; (mov r8, r8)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2110      	movs	r1, #16
 8008662:	438a      	bics	r2, r1
 8008664:	601a      	str	r2, [r3, #0]
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	f383 8810 	msr	PRIMASK, r3
}
 8008670:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	69db      	ldr	r3, [r3, #28]
 8008678:	2210      	movs	r2, #16
 800867a:	4013      	ands	r3, r2
 800867c:	2b10      	cmp	r3, #16
 800867e:	d103      	bne.n	8008688 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2210      	movs	r2, #16
 8008686:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	225c      	movs	r2, #92	; 0x5c
 800868c:	5a9a      	ldrh	r2, [r3, r2]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	0011      	movs	r1, r2
 8008692:	0018      	movs	r0, r3
 8008694:	f7ff f8f8 	bl	8007888 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008698:	e00c      	b.n	80086b4 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	0018      	movs	r0, r3
 800869e:	f7f9 ffeb 	bl	8002678 <HAL_UART_RxCpltCallback>
}
 80086a2:	e007      	b.n	80086b4 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	699a      	ldr	r2, [r3, #24]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2108      	movs	r1, #8
 80086b0:	430a      	orrs	r2, r1
 80086b2:	619a      	str	r2, [r3, #24]
}
 80086b4:	46c0      	nop			; (mov r8, r8)
 80086b6:	46bd      	mov	sp, r7
 80086b8:	b010      	add	sp, #64	; 0x40
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	fffffedf 	.word	0xfffffedf

080086c0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b090      	sub	sp, #64	; 0x40
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80086c8:	203e      	movs	r0, #62	; 0x3e
 80086ca:	183b      	adds	r3, r7, r0
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	2160      	movs	r1, #96	; 0x60
 80086d0:	5a52      	ldrh	r2, [r2, r1]
 80086d2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2288      	movs	r2, #136	; 0x88
 80086d8:	589b      	ldr	r3, [r3, r2]
 80086da:	2b22      	cmp	r3, #34	; 0x22
 80086dc:	d000      	beq.n	80086e0 <UART_RxISR_16BIT+0x20>
 80086de:	e097      	b.n	8008810 <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086e6:	213c      	movs	r1, #60	; 0x3c
 80086e8:	187b      	adds	r3, r7, r1
 80086ea:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086f0:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80086f2:	187b      	adds	r3, r7, r1
 80086f4:	183a      	adds	r2, r7, r0
 80086f6:	881b      	ldrh	r3, [r3, #0]
 80086f8:	8812      	ldrh	r2, [r2, #0]
 80086fa:	4013      	ands	r3, r2
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008700:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008706:	1c9a      	adds	r2, r3, #2
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	225e      	movs	r2, #94	; 0x5e
 8008710:	5a9b      	ldrh	r3, [r3, r2]
 8008712:	b29b      	uxth	r3, r3
 8008714:	3b01      	subs	r3, #1
 8008716:	b299      	uxth	r1, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	225e      	movs	r2, #94	; 0x5e
 800871c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	225e      	movs	r2, #94	; 0x5e
 8008722:	5a9b      	ldrh	r3, [r3, r2]
 8008724:	b29b      	uxth	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d000      	beq.n	800872c <UART_RxISR_16BIT+0x6c>
 800872a:	e079      	b.n	8008820 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800872c:	f3ef 8310 	mrs	r3, PRIMASK
 8008730:	617b      	str	r3, [r7, #20]
  return(result);
 8008732:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008734:	637b      	str	r3, [r7, #52]	; 0x34
 8008736:	2301      	movs	r3, #1
 8008738:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	f383 8810 	msr	PRIMASK, r3
}
 8008740:	46c0      	nop			; (mov r8, r8)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4936      	ldr	r1, [pc, #216]	; (8008828 <UART_RxISR_16BIT+0x168>)
 800874e:	400a      	ands	r2, r1
 8008750:	601a      	str	r2, [r3, #0]
 8008752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008754:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	f383 8810 	msr	PRIMASK, r3
}
 800875c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800875e:	f3ef 8310 	mrs	r3, PRIMASK
 8008762:	623b      	str	r3, [r7, #32]
  return(result);
 8008764:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008766:	633b      	str	r3, [r7, #48]	; 0x30
 8008768:	2301      	movs	r3, #1
 800876a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800876c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876e:	f383 8810 	msr	PRIMASK, r3
}
 8008772:	46c0      	nop			; (mov r8, r8)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	689a      	ldr	r2, [r3, #8]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2101      	movs	r1, #1
 8008780:	438a      	bics	r2, r1
 8008782:	609a      	str	r2, [r3, #8]
 8008784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008786:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878a:	f383 8810 	msr	PRIMASK, r3
}
 800878e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2288      	movs	r2, #136	; 0x88
 8008794:	2120      	movs	r1, #32
 8008796:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d12f      	bne.n	8008806 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087ac:	f3ef 8310 	mrs	r3, PRIMASK
 80087b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80087b2:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087b6:	2301      	movs	r3, #1
 80087b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f383 8810 	msr	PRIMASK, r3
}
 80087c0:	46c0      	nop			; (mov r8, r8)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2110      	movs	r1, #16
 80087ce:	438a      	bics	r2, r1
 80087d0:	601a      	str	r2, [r3, #0]
 80087d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	f383 8810 	msr	PRIMASK, r3
}
 80087dc:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	69db      	ldr	r3, [r3, #28]
 80087e4:	2210      	movs	r2, #16
 80087e6:	4013      	ands	r3, r2
 80087e8:	2b10      	cmp	r3, #16
 80087ea:	d103      	bne.n	80087f4 <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2210      	movs	r2, #16
 80087f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	225c      	movs	r2, #92	; 0x5c
 80087f8:	5a9a      	ldrh	r2, [r3, r2]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	0011      	movs	r1, r2
 80087fe:	0018      	movs	r0, r3
 8008800:	f7ff f842 	bl	8007888 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008804:	e00c      	b.n	8008820 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	0018      	movs	r0, r3
 800880a:	f7f9 ff35 	bl	8002678 <HAL_UART_RxCpltCallback>
}
 800880e:	e007      	b.n	8008820 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	699a      	ldr	r2, [r3, #24]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2108      	movs	r1, #8
 800881c:	430a      	orrs	r2, r1
 800881e:	619a      	str	r2, [r3, #24]
}
 8008820:	46c0      	nop			; (mov r8, r8)
 8008822:	46bd      	mov	sp, r7
 8008824:	b010      	add	sp, #64	; 0x40
 8008826:	bd80      	pop	{r7, pc}
 8008828:	fffffedf 	.word	0xfffffedf

0800882c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b09c      	sub	sp, #112	; 0x70
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008834:	236a      	movs	r3, #106	; 0x6a
 8008836:	18fb      	adds	r3, r7, r3
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	2160      	movs	r1, #96	; 0x60
 800883c:	5a52      	ldrh	r2, [r2, r1]
 800883e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	69db      	ldr	r3, [r3, #28]
 8008846:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2288      	movs	r2, #136	; 0x88
 800885c:	589b      	ldr	r3, [r3, r2]
 800885e:	2b22      	cmp	r3, #34	; 0x22
 8008860:	d000      	beq.n	8008864 <UART_RxISR_8BIT_FIFOEN+0x38>
 8008862:	e141      	b.n	8008ae8 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008864:	235e      	movs	r3, #94	; 0x5e
 8008866:	18fb      	adds	r3, r7, r3
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	2168      	movs	r1, #104	; 0x68
 800886c:	5a52      	ldrh	r2, [r2, r1]
 800886e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008870:	e0e8      	b.n	8008a44 <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008878:	215c      	movs	r1, #92	; 0x5c
 800887a:	187b      	adds	r3, r7, r1
 800887c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800887e:	187b      	adds	r3, r7, r1
 8008880:	881b      	ldrh	r3, [r3, #0]
 8008882:	b2da      	uxtb	r2, r3
 8008884:	236a      	movs	r3, #106	; 0x6a
 8008886:	18fb      	adds	r3, r7, r3
 8008888:	881b      	ldrh	r3, [r3, #0]
 800888a:	b2d9      	uxtb	r1, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008890:	400a      	ands	r2, r1
 8008892:	b2d2      	uxtb	r2, r2
 8008894:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800889a:	1c5a      	adds	r2, r3, #1
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	225e      	movs	r2, #94	; 0x5e
 80088a4:	5a9b      	ldrh	r3, [r3, r2]
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	3b01      	subs	r3, #1
 80088aa:	b299      	uxth	r1, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	225e      	movs	r2, #94	; 0x5e
 80088b0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	69db      	ldr	r3, [r3, #28]
 80088b8:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80088ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088bc:	2207      	movs	r2, #7
 80088be:	4013      	ands	r3, r2
 80088c0:	d049      	beq.n	8008956 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80088c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088c4:	2201      	movs	r2, #1
 80088c6:	4013      	ands	r3, r2
 80088c8:	d010      	beq.n	80088ec <UART_RxISR_8BIT_FIFOEN+0xc0>
 80088ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80088cc:	2380      	movs	r3, #128	; 0x80
 80088ce:	005b      	lsls	r3, r3, #1
 80088d0:	4013      	ands	r3, r2
 80088d2:	d00b      	beq.n	80088ec <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2201      	movs	r2, #1
 80088da:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	228c      	movs	r2, #140	; 0x8c
 80088e0:	589b      	ldr	r3, [r3, r2]
 80088e2:	2201      	movs	r2, #1
 80088e4:	431a      	orrs	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	218c      	movs	r1, #140	; 0x8c
 80088ea:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088ee:	2202      	movs	r2, #2
 80088f0:	4013      	ands	r3, r2
 80088f2:	d00f      	beq.n	8008914 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80088f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088f6:	2201      	movs	r2, #1
 80088f8:	4013      	ands	r3, r2
 80088fa:	d00b      	beq.n	8008914 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2202      	movs	r2, #2
 8008902:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	228c      	movs	r2, #140	; 0x8c
 8008908:	589b      	ldr	r3, [r3, r2]
 800890a:	2204      	movs	r2, #4
 800890c:	431a      	orrs	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	218c      	movs	r1, #140	; 0x8c
 8008912:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008916:	2204      	movs	r2, #4
 8008918:	4013      	ands	r3, r2
 800891a:	d00f      	beq.n	800893c <UART_RxISR_8BIT_FIFOEN+0x110>
 800891c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800891e:	2201      	movs	r2, #1
 8008920:	4013      	ands	r3, r2
 8008922:	d00b      	beq.n	800893c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2204      	movs	r2, #4
 800892a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	228c      	movs	r2, #140	; 0x8c
 8008930:	589b      	ldr	r3, [r3, r2]
 8008932:	2202      	movs	r2, #2
 8008934:	431a      	orrs	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	218c      	movs	r1, #140	; 0x8c
 800893a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	228c      	movs	r2, #140	; 0x8c
 8008940:	589b      	ldr	r3, [r3, r2]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d007      	beq.n	8008956 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	0018      	movs	r0, r3
 800894a:	f7fe ff95 	bl	8007878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	228c      	movs	r2, #140	; 0x8c
 8008952:	2100      	movs	r1, #0
 8008954:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	225e      	movs	r2, #94	; 0x5e
 800895a:	5a9b      	ldrh	r3, [r3, r2]
 800895c:	b29b      	uxth	r3, r3
 800895e:	2b00      	cmp	r3, #0
 8008960:	d170      	bne.n	8008a44 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008962:	f3ef 8310 	mrs	r3, PRIMASK
 8008966:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8008968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800896a:	65bb      	str	r3, [r7, #88]	; 0x58
 800896c:	2301      	movs	r3, #1
 800896e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008972:	f383 8810 	msr	PRIMASK, r3
}
 8008976:	46c0      	nop			; (mov r8, r8)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	495f      	ldr	r1, [pc, #380]	; (8008b00 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 8008984:	400a      	ands	r2, r1
 8008986:	601a      	str	r2, [r3, #0]
 8008988:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800898a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800898c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800898e:	f383 8810 	msr	PRIMASK, r3
}
 8008992:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008994:	f3ef 8310 	mrs	r3, PRIMASK
 8008998:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800899a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800899c:	657b      	str	r3, [r7, #84]	; 0x54
 800899e:	2301      	movs	r3, #1
 80089a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089a4:	f383 8810 	msr	PRIMASK, r3
}
 80089a8:	46c0      	nop			; (mov r8, r8)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	689a      	ldr	r2, [r3, #8]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4953      	ldr	r1, [pc, #332]	; (8008b04 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 80089b6:	400a      	ands	r2, r1
 80089b8:	609a      	str	r2, [r3, #8]
 80089ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089bc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089c0:	f383 8810 	msr	PRIMASK, r3
}
 80089c4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2288      	movs	r2, #136	; 0x88
 80089ca:	2120      	movs	r1, #32
 80089cc:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d12f      	bne.n	8008a3c <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089e2:	f3ef 8310 	mrs	r3, PRIMASK
 80089e6:	623b      	str	r3, [r7, #32]
  return(result);
 80089e8:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089ea:	653b      	str	r3, [r7, #80]	; 0x50
 80089ec:	2301      	movs	r3, #1
 80089ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f2:	f383 8810 	msr	PRIMASK, r3
}
 80089f6:	46c0      	nop			; (mov r8, r8)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2110      	movs	r1, #16
 8008a04:	438a      	bics	r2, r1
 8008a06:	601a      	str	r2, [r3, #0]
 8008a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0e:	f383 8810 	msr	PRIMASK, r3
}
 8008a12:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	69db      	ldr	r3, [r3, #28]
 8008a1a:	2210      	movs	r2, #16
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	2b10      	cmp	r3, #16
 8008a20:	d103      	bne.n	8008a2a <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2210      	movs	r2, #16
 8008a28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	225c      	movs	r2, #92	; 0x5c
 8008a2e:	5a9a      	ldrh	r2, [r3, r2]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	0011      	movs	r1, r2
 8008a34:	0018      	movs	r0, r3
 8008a36:	f7fe ff27 	bl	8007888 <HAL_UARTEx_RxEventCallback>
 8008a3a:	e003      	b.n	8008a44 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	0018      	movs	r0, r3
 8008a40:	f7f9 fe1a 	bl	8002678 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a44:	235e      	movs	r3, #94	; 0x5e
 8008a46:	18fb      	adds	r3, r7, r3
 8008a48:	881b      	ldrh	r3, [r3, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d004      	beq.n	8008a58 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8008a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a50:	2220      	movs	r2, #32
 8008a52:	4013      	ands	r3, r2
 8008a54:	d000      	beq.n	8008a58 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8008a56:	e70c      	b.n	8008872 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008a58:	204e      	movs	r0, #78	; 0x4e
 8008a5a:	183b      	adds	r3, r7, r0
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	215e      	movs	r1, #94	; 0x5e
 8008a60:	5a52      	ldrh	r2, [r2, r1]
 8008a62:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008a64:	0001      	movs	r1, r0
 8008a66:	187b      	adds	r3, r7, r1
 8008a68:	881b      	ldrh	r3, [r3, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d044      	beq.n	8008af8 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2268      	movs	r2, #104	; 0x68
 8008a72:	5a9b      	ldrh	r3, [r3, r2]
 8008a74:	187a      	adds	r2, r7, r1
 8008a76:	8812      	ldrh	r2, [r2, #0]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d23d      	bcs.n	8008af8 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a7c:	f3ef 8310 	mrs	r3, PRIMASK
 8008a80:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a82:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008a84:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a86:	2301      	movs	r3, #1
 8008a88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f383 8810 	msr	PRIMASK, r3
}
 8008a90:	46c0      	nop			; (mov r8, r8)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	689a      	ldr	r2, [r3, #8]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	491a      	ldr	r1, [pc, #104]	; (8008b08 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8008a9e:	400a      	ands	r2, r1
 8008aa0:	609a      	str	r2, [r3, #8]
 8008aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008aa4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	f383 8810 	msr	PRIMASK, r3
}
 8008aac:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a16      	ldr	r2, [pc, #88]	; (8008b0c <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8008ab2:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8008ab8:	617b      	str	r3, [r7, #20]
  return(result);
 8008aba:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008abc:	647b      	str	r3, [r7, #68]	; 0x44
 8008abe:	2301      	movs	r3, #1
 8008ac0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	f383 8810 	msr	PRIMASK, r3
}
 8008ac8:	46c0      	nop			; (mov r8, r8)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2120      	movs	r1, #32
 8008ad6:	430a      	orrs	r2, r1
 8008ad8:	601a      	str	r2, [r3, #0]
 8008ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008adc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	f383 8810 	msr	PRIMASK, r3
}
 8008ae4:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ae6:	e007      	b.n	8008af8 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	699a      	ldr	r2, [r3, #24]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2108      	movs	r1, #8
 8008af4:	430a      	orrs	r2, r1
 8008af6:	619a      	str	r2, [r3, #24]
}
 8008af8:	46c0      	nop			; (mov r8, r8)
 8008afa:	46bd      	mov	sp, r7
 8008afc:	b01c      	add	sp, #112	; 0x70
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	fffffeff 	.word	0xfffffeff
 8008b04:	effffffe 	.word	0xeffffffe
 8008b08:	efffffff 	.word	0xefffffff
 8008b0c:	08008555 	.word	0x08008555

08008b10 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b09e      	sub	sp, #120	; 0x78
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008b18:	2372      	movs	r3, #114	; 0x72
 8008b1a:	18fb      	adds	r3, r7, r3
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	2160      	movs	r1, #96	; 0x60
 8008b20:	5a52      	ldrh	r2, [r2, r1]
 8008b22:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	69db      	ldr	r3, [r3, #28]
 8008b2a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2288      	movs	r2, #136	; 0x88
 8008b40:	589b      	ldr	r3, [r3, r2]
 8008b42:	2b22      	cmp	r3, #34	; 0x22
 8008b44:	d000      	beq.n	8008b48 <UART_RxISR_16BIT_FIFOEN+0x38>
 8008b46:	e141      	b.n	8008dcc <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008b48:	2366      	movs	r3, #102	; 0x66
 8008b4a:	18fb      	adds	r3, r7, r3
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	2168      	movs	r1, #104	; 0x68
 8008b50:	5a52      	ldrh	r2, [r2, r1]
 8008b52:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b54:	e0e8      	b.n	8008d28 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b5c:	2164      	movs	r1, #100	; 0x64
 8008b5e:	187b      	adds	r3, r7, r1
 8008b60:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b66:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8008b68:	187b      	adds	r3, r7, r1
 8008b6a:	2272      	movs	r2, #114	; 0x72
 8008b6c:	18ba      	adds	r2, r7, r2
 8008b6e:	881b      	ldrh	r3, [r3, #0]
 8008b70:	8812      	ldrh	r2, [r2, #0]
 8008b72:	4013      	ands	r3, r2
 8008b74:	b29a      	uxth	r2, r3
 8008b76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b7e:	1c9a      	adds	r2, r3, #2
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	225e      	movs	r2, #94	; 0x5e
 8008b88:	5a9b      	ldrh	r3, [r3, r2]
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	b299      	uxth	r1, r3
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	225e      	movs	r2, #94	; 0x5e
 8008b94:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	69db      	ldr	r3, [r3, #28]
 8008b9c:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ba0:	2207      	movs	r2, #7
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	d049      	beq.n	8008c3a <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ba8:	2201      	movs	r2, #1
 8008baa:	4013      	ands	r3, r2
 8008bac:	d010      	beq.n	8008bd0 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8008bae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008bb0:	2380      	movs	r3, #128	; 0x80
 8008bb2:	005b      	lsls	r3, r3, #1
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	d00b      	beq.n	8008bd0 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	228c      	movs	r2, #140	; 0x8c
 8008bc4:	589b      	ldr	r3, [r3, r2]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	431a      	orrs	r2, r3
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	218c      	movs	r1, #140	; 0x8c
 8008bce:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	4013      	ands	r3, r2
 8008bd6:	d00f      	beq.n	8008bf8 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8008bd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008bda:	2201      	movs	r2, #1
 8008bdc:	4013      	ands	r3, r2
 8008bde:	d00b      	beq.n	8008bf8 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2202      	movs	r2, #2
 8008be6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	228c      	movs	r2, #140	; 0x8c
 8008bec:	589b      	ldr	r3, [r3, r2]
 8008bee:	2204      	movs	r2, #4
 8008bf0:	431a      	orrs	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	218c      	movs	r1, #140	; 0x8c
 8008bf6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bfa:	2204      	movs	r2, #4
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	d00f      	beq.n	8008c20 <UART_RxISR_16BIT_FIFOEN+0x110>
 8008c00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c02:	2201      	movs	r2, #1
 8008c04:	4013      	ands	r3, r2
 8008c06:	d00b      	beq.n	8008c20 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2204      	movs	r2, #4
 8008c0e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	228c      	movs	r2, #140	; 0x8c
 8008c14:	589b      	ldr	r3, [r3, r2]
 8008c16:	2202      	movs	r2, #2
 8008c18:	431a      	orrs	r2, r3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	218c      	movs	r1, #140	; 0x8c
 8008c1e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	228c      	movs	r2, #140	; 0x8c
 8008c24:	589b      	ldr	r3, [r3, r2]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d007      	beq.n	8008c3a <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	0018      	movs	r0, r3
 8008c2e:	f7fe fe23 	bl	8007878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	228c      	movs	r2, #140	; 0x8c
 8008c36:	2100      	movs	r1, #0
 8008c38:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	225e      	movs	r2, #94	; 0x5e
 8008c3e:	5a9b      	ldrh	r3, [r3, r2]
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d170      	bne.n	8008d28 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c46:	f3ef 8310 	mrs	r3, PRIMASK
 8008c4a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c50:	2301      	movs	r3, #1
 8008c52:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c56:	f383 8810 	msr	PRIMASK, r3
}
 8008c5a:	46c0      	nop			; (mov r8, r8)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	495f      	ldr	r1, [pc, #380]	; (8008de4 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8008c68:	400a      	ands	r2, r1
 8008c6a:	601a      	str	r2, [r3, #0]
 8008c6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c6e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c72:	f383 8810 	msr	PRIMASK, r3
}
 8008c76:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c78:	f3ef 8310 	mrs	r3, PRIMASK
 8008c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8008c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c80:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c82:	2301      	movs	r3, #1
 8008c84:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c88:	f383 8810 	msr	PRIMASK, r3
}
 8008c8c:	46c0      	nop			; (mov r8, r8)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	689a      	ldr	r2, [r3, #8]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4953      	ldr	r1, [pc, #332]	; (8008de8 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 8008c9a:	400a      	ands	r2, r1
 8008c9c:	609a      	str	r2, [r3, #8]
 8008c9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ca0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ca4:	f383 8810 	msr	PRIMASK, r3
}
 8008ca8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2288      	movs	r2, #136	; 0x88
 8008cae:	2120      	movs	r1, #32
 8008cb0:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d12f      	bne.n	8008d20 <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8008cca:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cce:	657b      	str	r3, [r7, #84]	; 0x54
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd6:	f383 8810 	msr	PRIMASK, r3
}
 8008cda:	46c0      	nop			; (mov r8, r8)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2110      	movs	r1, #16
 8008ce8:	438a      	bics	r2, r1
 8008cea:	601a      	str	r2, [r3, #0]
 8008cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf2:	f383 8810 	msr	PRIMASK, r3
}
 8008cf6:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	69db      	ldr	r3, [r3, #28]
 8008cfe:	2210      	movs	r2, #16
 8008d00:	4013      	ands	r3, r2
 8008d02:	2b10      	cmp	r3, #16
 8008d04:	d103      	bne.n	8008d0e <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2210      	movs	r2, #16
 8008d0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	225c      	movs	r2, #92	; 0x5c
 8008d12:	5a9a      	ldrh	r2, [r3, r2]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	0011      	movs	r1, r2
 8008d18:	0018      	movs	r0, r3
 8008d1a:	f7fe fdb5 	bl	8007888 <HAL_UARTEx_RxEventCallback>
 8008d1e:	e003      	b.n	8008d28 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	0018      	movs	r0, r3
 8008d24:	f7f9 fca8 	bl	8002678 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008d28:	2366      	movs	r3, #102	; 0x66
 8008d2a:	18fb      	adds	r3, r7, r3
 8008d2c:	881b      	ldrh	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d004      	beq.n	8008d3c <UART_RxISR_16BIT_FIFOEN+0x22c>
 8008d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d34:	2220      	movs	r2, #32
 8008d36:	4013      	ands	r3, r2
 8008d38:	d000      	beq.n	8008d3c <UART_RxISR_16BIT_FIFOEN+0x22c>
 8008d3a:	e70c      	b.n	8008b56 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008d3c:	2052      	movs	r0, #82	; 0x52
 8008d3e:	183b      	adds	r3, r7, r0
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	215e      	movs	r1, #94	; 0x5e
 8008d44:	5a52      	ldrh	r2, [r2, r1]
 8008d46:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008d48:	0001      	movs	r1, r0
 8008d4a:	187b      	adds	r3, r7, r1
 8008d4c:	881b      	ldrh	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d044      	beq.n	8008ddc <UART_RxISR_16BIT_FIFOEN+0x2cc>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2268      	movs	r2, #104	; 0x68
 8008d56:	5a9b      	ldrh	r3, [r3, r2]
 8008d58:	187a      	adds	r2, r7, r1
 8008d5a:	8812      	ldrh	r2, [r2, #0]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d23d      	bcs.n	8008ddc <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d60:	f3ef 8310 	mrs	r3, PRIMASK
 8008d64:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d66:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008d68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	f383 8810 	msr	PRIMASK, r3
}
 8008d74:	46c0      	nop			; (mov r8, r8)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	689a      	ldr	r2, [r3, #8]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	491a      	ldr	r1, [pc, #104]	; (8008dec <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8008d82:	400a      	ands	r2, r1
 8008d84:	609a      	str	r2, [r3, #8]
 8008d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	f383 8810 	msr	PRIMASK, r3
}
 8008d90:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a16      	ldr	r2, [pc, #88]	; (8008df0 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8008d96:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d98:	f3ef 8310 	mrs	r3, PRIMASK
 8008d9c:	61bb      	str	r3, [r7, #24]
  return(result);
 8008d9e:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008da0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008da2:	2301      	movs	r3, #1
 8008da4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	f383 8810 	msr	PRIMASK, r3
}
 8008dac:	46c0      	nop			; (mov r8, r8)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2120      	movs	r1, #32
 8008dba:	430a      	orrs	r2, r1
 8008dbc:	601a      	str	r2, [r3, #0]
 8008dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dc0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dc2:	6a3b      	ldr	r3, [r7, #32]
 8008dc4:	f383 8810 	msr	PRIMASK, r3
}
 8008dc8:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008dca:	e007      	b.n	8008ddc <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	699a      	ldr	r2, [r3, #24]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2108      	movs	r1, #8
 8008dd8:	430a      	orrs	r2, r1
 8008dda:	619a      	str	r2, [r3, #24]
}
 8008ddc:	46c0      	nop			; (mov r8, r8)
 8008dde:	46bd      	mov	sp, r7
 8008de0:	b01e      	add	sp, #120	; 0x78
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	fffffeff 	.word	0xfffffeff
 8008de8:	effffffe 	.word	0xeffffffe
 8008dec:	efffffff 	.word	0xefffffff
 8008df0:	080086c1 	.word	0x080086c1

08008df4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008dfc:	46c0      	nop			; (mov r8, r8)
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	b002      	add	sp, #8
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008e0c:	46c0      	nop			; (mov r8, r8)
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	b002      	add	sp, #8
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008e1c:	46c0      	nop			; (mov r8, r8)
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	b002      	add	sp, #8
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2280      	movs	r2, #128	; 0x80
 8008e30:	5c9b      	ldrb	r3, [r3, r2]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d101      	bne.n	8008e3a <HAL_UARTEx_DisableFifoMode+0x16>
 8008e36:	2302      	movs	r3, #2
 8008e38:	e027      	b.n	8008e8a <HAL_UARTEx_DisableFifoMode+0x66>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2280      	movs	r2, #128	; 0x80
 8008e3e:	2101      	movs	r1, #1
 8008e40:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2284      	movs	r2, #132	; 0x84
 8008e46:	2124      	movs	r1, #36	; 0x24
 8008e48:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2101      	movs	r1, #1
 8008e5e:	438a      	bics	r2, r1
 8008e60:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	4a0b      	ldr	r2, [pc, #44]	; (8008e94 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008e66:	4013      	ands	r3, r2
 8008e68:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2284      	movs	r2, #132	; 0x84
 8008e7c:	2120      	movs	r1, #32
 8008e7e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2280      	movs	r2, #128	; 0x80
 8008e84:	2100      	movs	r1, #0
 8008e86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	0018      	movs	r0, r3
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	b004      	add	sp, #16
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	46c0      	nop			; (mov r8, r8)
 8008e94:	dfffffff 	.word	0xdfffffff

08008e98 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2280      	movs	r2, #128	; 0x80
 8008ea6:	5c9b      	ldrb	r3, [r3, r2]
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d101      	bne.n	8008eb0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008eac:	2302      	movs	r3, #2
 8008eae:	e02e      	b.n	8008f0e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2280      	movs	r2, #128	; 0x80
 8008eb4:	2101      	movs	r1, #1
 8008eb6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2284      	movs	r2, #132	; 0x84
 8008ebc:	2124      	movs	r1, #36	; 0x24
 8008ebe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2101      	movs	r1, #1
 8008ed4:	438a      	bics	r2, r1
 8008ed6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	00db      	lsls	r3, r3, #3
 8008ee0:	08d9      	lsrs	r1, r3, #3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	683a      	ldr	r2, [r7, #0]
 8008ee8:	430a      	orrs	r2, r1
 8008eea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	0018      	movs	r0, r3
 8008ef0:	f000 f854 	bl	8008f9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2284      	movs	r2, #132	; 0x84
 8008f00:	2120      	movs	r1, #32
 8008f02:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2280      	movs	r2, #128	; 0x80
 8008f08:	2100      	movs	r1, #0
 8008f0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	0018      	movs	r0, r3
 8008f10:	46bd      	mov	sp, r7
 8008f12:	b004      	add	sp, #16
 8008f14:	bd80      	pop	{r7, pc}
	...

08008f18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2280      	movs	r2, #128	; 0x80
 8008f26:	5c9b      	ldrb	r3, [r3, r2]
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d101      	bne.n	8008f30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f2c:	2302      	movs	r3, #2
 8008f2e:	e02f      	b.n	8008f90 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2280      	movs	r2, #128	; 0x80
 8008f34:	2101      	movs	r1, #1
 8008f36:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2284      	movs	r2, #132	; 0x84
 8008f3c:	2124      	movs	r1, #36	; 0x24
 8008f3e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2101      	movs	r1, #1
 8008f54:	438a      	bics	r2, r1
 8008f56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	4a0e      	ldr	r2, [pc, #56]	; (8008f98 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008f60:	4013      	ands	r3, r2
 8008f62:	0019      	movs	r1, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	683a      	ldr	r2, [r7, #0]
 8008f6a:	430a      	orrs	r2, r1
 8008f6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	0018      	movs	r0, r3
 8008f72:	f000 f813 	bl	8008f9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2284      	movs	r2, #132	; 0x84
 8008f82:	2120      	movs	r1, #32
 8008f84:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2280      	movs	r2, #128	; 0x80
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	0018      	movs	r0, r3
 8008f92:	46bd      	mov	sp, r7
 8008f94:	b004      	add	sp, #16
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	f1ffffff 	.word	0xf1ffffff

08008f9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d108      	bne.n	8008fbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	226a      	movs	r2, #106	; 0x6a
 8008fb0:	2101      	movs	r1, #1
 8008fb2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2268      	movs	r2, #104	; 0x68
 8008fb8:	2101      	movs	r1, #1
 8008fba:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008fbc:	e043      	b.n	8009046 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008fbe:	260f      	movs	r6, #15
 8008fc0:	19bb      	adds	r3, r7, r6
 8008fc2:	2208      	movs	r2, #8
 8008fc4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008fc6:	200e      	movs	r0, #14
 8008fc8:	183b      	adds	r3, r7, r0
 8008fca:	2208      	movs	r2, #8
 8008fcc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	0e5b      	lsrs	r3, r3, #25
 8008fd6:	b2da      	uxtb	r2, r3
 8008fd8:	240d      	movs	r4, #13
 8008fda:	193b      	adds	r3, r7, r4
 8008fdc:	2107      	movs	r1, #7
 8008fde:	400a      	ands	r2, r1
 8008fe0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	0f5b      	lsrs	r3, r3, #29
 8008fea:	b2da      	uxtb	r2, r3
 8008fec:	250c      	movs	r5, #12
 8008fee:	197b      	adds	r3, r7, r5
 8008ff0:	2107      	movs	r1, #7
 8008ff2:	400a      	ands	r2, r1
 8008ff4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ff6:	183b      	adds	r3, r7, r0
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	197a      	adds	r2, r7, r5
 8008ffc:	7812      	ldrb	r2, [r2, #0]
 8008ffe:	4914      	ldr	r1, [pc, #80]	; (8009050 <UARTEx_SetNbDataToProcess+0xb4>)
 8009000:	5c8a      	ldrb	r2, [r1, r2]
 8009002:	435a      	muls	r2, r3
 8009004:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8009006:	197b      	adds	r3, r7, r5
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	4a12      	ldr	r2, [pc, #72]	; (8009054 <UARTEx_SetNbDataToProcess+0xb8>)
 800900c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800900e:	0019      	movs	r1, r3
 8009010:	f7f7 f916 	bl	8000240 <__divsi3>
 8009014:	0003      	movs	r3, r0
 8009016:	b299      	uxth	r1, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	226a      	movs	r2, #106	; 0x6a
 800901c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800901e:	19bb      	adds	r3, r7, r6
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	193a      	adds	r2, r7, r4
 8009024:	7812      	ldrb	r2, [r2, #0]
 8009026:	490a      	ldr	r1, [pc, #40]	; (8009050 <UARTEx_SetNbDataToProcess+0xb4>)
 8009028:	5c8a      	ldrb	r2, [r1, r2]
 800902a:	435a      	muls	r2, r3
 800902c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800902e:	193b      	adds	r3, r7, r4
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	4a08      	ldr	r2, [pc, #32]	; (8009054 <UARTEx_SetNbDataToProcess+0xb8>)
 8009034:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009036:	0019      	movs	r1, r3
 8009038:	f7f7 f902 	bl	8000240 <__divsi3>
 800903c:	0003      	movs	r3, r0
 800903e:	b299      	uxth	r1, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2268      	movs	r2, #104	; 0x68
 8009044:	5299      	strh	r1, [r3, r2]
}
 8009046:	46c0      	nop			; (mov r8, r8)
 8009048:	46bd      	mov	sp, r7
 800904a:	b005      	add	sp, #20
 800904c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800904e:	46c0      	nop			; (mov r8, r8)
 8009050:	0800a2d4 	.word	0x0800a2d4
 8009054:	0800a2dc 	.word	0x0800a2dc

08009058 <atol>:
 8009058:	b510      	push	{r4, lr}
 800905a:	220a      	movs	r2, #10
 800905c:	2100      	movs	r1, #0
 800905e:	f000 f93b 	bl	80092d8 <strtol>
 8009062:	bd10      	pop	{r4, pc}

08009064 <__errno>:
 8009064:	4b01      	ldr	r3, [pc, #4]	; (800906c <__errno+0x8>)
 8009066:	6818      	ldr	r0, [r3, #0]
 8009068:	4770      	bx	lr
 800906a:	46c0      	nop			; (mov r8, r8)
 800906c:	20000050 	.word	0x20000050

08009070 <__libc_init_array>:
 8009070:	b570      	push	{r4, r5, r6, lr}
 8009072:	2600      	movs	r6, #0
 8009074:	4d0c      	ldr	r5, [pc, #48]	; (80090a8 <__libc_init_array+0x38>)
 8009076:	4c0d      	ldr	r4, [pc, #52]	; (80090ac <__libc_init_array+0x3c>)
 8009078:	1b64      	subs	r4, r4, r5
 800907a:	10a4      	asrs	r4, r4, #2
 800907c:	42a6      	cmp	r6, r4
 800907e:	d109      	bne.n	8009094 <__libc_init_array+0x24>
 8009080:	2600      	movs	r6, #0
 8009082:	f000 fd31 	bl	8009ae8 <_init>
 8009086:	4d0a      	ldr	r5, [pc, #40]	; (80090b0 <__libc_init_array+0x40>)
 8009088:	4c0a      	ldr	r4, [pc, #40]	; (80090b4 <__libc_init_array+0x44>)
 800908a:	1b64      	subs	r4, r4, r5
 800908c:	10a4      	asrs	r4, r4, #2
 800908e:	42a6      	cmp	r6, r4
 8009090:	d105      	bne.n	800909e <__libc_init_array+0x2e>
 8009092:	bd70      	pop	{r4, r5, r6, pc}
 8009094:	00b3      	lsls	r3, r6, #2
 8009096:	58eb      	ldr	r3, [r5, r3]
 8009098:	4798      	blx	r3
 800909a:	3601      	adds	r6, #1
 800909c:	e7ee      	b.n	800907c <__libc_init_array+0xc>
 800909e:	00b3      	lsls	r3, r6, #2
 80090a0:	58eb      	ldr	r3, [r5, r3]
 80090a2:	4798      	blx	r3
 80090a4:	3601      	adds	r6, #1
 80090a6:	e7f2      	b.n	800908e <__libc_init_array+0x1e>
 80090a8:	0800a420 	.word	0x0800a420
 80090ac:	0800a420 	.word	0x0800a420
 80090b0:	0800a420 	.word	0x0800a420
 80090b4:	0800a434 	.word	0x0800a434

080090b8 <memcpy>:
 80090b8:	2300      	movs	r3, #0
 80090ba:	b510      	push	{r4, lr}
 80090bc:	429a      	cmp	r2, r3
 80090be:	d100      	bne.n	80090c2 <memcpy+0xa>
 80090c0:	bd10      	pop	{r4, pc}
 80090c2:	5ccc      	ldrb	r4, [r1, r3]
 80090c4:	54c4      	strb	r4, [r0, r3]
 80090c6:	3301      	adds	r3, #1
 80090c8:	e7f8      	b.n	80090bc <memcpy+0x4>

080090ca <memset>:
 80090ca:	0003      	movs	r3, r0
 80090cc:	1882      	adds	r2, r0, r2
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d100      	bne.n	80090d4 <memset+0xa>
 80090d2:	4770      	bx	lr
 80090d4:	7019      	strb	r1, [r3, #0]
 80090d6:	3301      	adds	r3, #1
 80090d8:	e7f9      	b.n	80090ce <memset+0x4>
	...

080090dc <sniprintf>:
 80090dc:	b40c      	push	{r2, r3}
 80090de:	b530      	push	{r4, r5, lr}
 80090e0:	4b17      	ldr	r3, [pc, #92]	; (8009140 <sniprintf+0x64>)
 80090e2:	000c      	movs	r4, r1
 80090e4:	681d      	ldr	r5, [r3, #0]
 80090e6:	b09d      	sub	sp, #116	; 0x74
 80090e8:	2900      	cmp	r1, #0
 80090ea:	da08      	bge.n	80090fe <sniprintf+0x22>
 80090ec:	238b      	movs	r3, #139	; 0x8b
 80090ee:	2001      	movs	r0, #1
 80090f0:	602b      	str	r3, [r5, #0]
 80090f2:	4240      	negs	r0, r0
 80090f4:	b01d      	add	sp, #116	; 0x74
 80090f6:	bc30      	pop	{r4, r5}
 80090f8:	bc08      	pop	{r3}
 80090fa:	b002      	add	sp, #8
 80090fc:	4718      	bx	r3
 80090fe:	2382      	movs	r3, #130	; 0x82
 8009100:	466a      	mov	r2, sp
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	8293      	strh	r3, [r2, #20]
 8009106:	2300      	movs	r3, #0
 8009108:	9002      	str	r0, [sp, #8]
 800910a:	9006      	str	r0, [sp, #24]
 800910c:	4299      	cmp	r1, r3
 800910e:	d000      	beq.n	8009112 <sniprintf+0x36>
 8009110:	1e4b      	subs	r3, r1, #1
 8009112:	9304      	str	r3, [sp, #16]
 8009114:	9307      	str	r3, [sp, #28]
 8009116:	2301      	movs	r3, #1
 8009118:	466a      	mov	r2, sp
 800911a:	425b      	negs	r3, r3
 800911c:	82d3      	strh	r3, [r2, #22]
 800911e:	0028      	movs	r0, r5
 8009120:	ab21      	add	r3, sp, #132	; 0x84
 8009122:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009124:	a902      	add	r1, sp, #8
 8009126:	9301      	str	r3, [sp, #4]
 8009128:	f000 f944 	bl	80093b4 <_svfiprintf_r>
 800912c:	1c43      	adds	r3, r0, #1
 800912e:	da01      	bge.n	8009134 <sniprintf+0x58>
 8009130:	238b      	movs	r3, #139	; 0x8b
 8009132:	602b      	str	r3, [r5, #0]
 8009134:	2c00      	cmp	r4, #0
 8009136:	d0dd      	beq.n	80090f4 <sniprintf+0x18>
 8009138:	2300      	movs	r3, #0
 800913a:	9a02      	ldr	r2, [sp, #8]
 800913c:	7013      	strb	r3, [r2, #0]
 800913e:	e7d9      	b.n	80090f4 <sniprintf+0x18>
 8009140:	20000050 	.word	0x20000050

08009144 <siprintf>:
 8009144:	b40e      	push	{r1, r2, r3}
 8009146:	b500      	push	{lr}
 8009148:	490b      	ldr	r1, [pc, #44]	; (8009178 <siprintf+0x34>)
 800914a:	b09c      	sub	sp, #112	; 0x70
 800914c:	ab1d      	add	r3, sp, #116	; 0x74
 800914e:	9002      	str	r0, [sp, #8]
 8009150:	9006      	str	r0, [sp, #24]
 8009152:	9107      	str	r1, [sp, #28]
 8009154:	9104      	str	r1, [sp, #16]
 8009156:	4809      	ldr	r0, [pc, #36]	; (800917c <siprintf+0x38>)
 8009158:	4909      	ldr	r1, [pc, #36]	; (8009180 <siprintf+0x3c>)
 800915a:	cb04      	ldmia	r3!, {r2}
 800915c:	9105      	str	r1, [sp, #20]
 800915e:	6800      	ldr	r0, [r0, #0]
 8009160:	a902      	add	r1, sp, #8
 8009162:	9301      	str	r3, [sp, #4]
 8009164:	f000 f926 	bl	80093b4 <_svfiprintf_r>
 8009168:	2300      	movs	r3, #0
 800916a:	9a02      	ldr	r2, [sp, #8]
 800916c:	7013      	strb	r3, [r2, #0]
 800916e:	b01c      	add	sp, #112	; 0x70
 8009170:	bc08      	pop	{r3}
 8009172:	b003      	add	sp, #12
 8009174:	4718      	bx	r3
 8009176:	46c0      	nop			; (mov r8, r8)
 8009178:	7fffffff 	.word	0x7fffffff
 800917c:	20000050 	.word	0x20000050
 8009180:	ffff0208 	.word	0xffff0208

08009184 <strcpy>:
 8009184:	0003      	movs	r3, r0
 8009186:	780a      	ldrb	r2, [r1, #0]
 8009188:	3101      	adds	r1, #1
 800918a:	701a      	strb	r2, [r3, #0]
 800918c:	3301      	adds	r3, #1
 800918e:	2a00      	cmp	r2, #0
 8009190:	d1f9      	bne.n	8009186 <strcpy+0x2>
 8009192:	4770      	bx	lr

08009194 <strncpy>:
 8009194:	0003      	movs	r3, r0
 8009196:	b530      	push	{r4, r5, lr}
 8009198:	001d      	movs	r5, r3
 800919a:	2a00      	cmp	r2, #0
 800919c:	d006      	beq.n	80091ac <strncpy+0x18>
 800919e:	780c      	ldrb	r4, [r1, #0]
 80091a0:	3a01      	subs	r2, #1
 80091a2:	3301      	adds	r3, #1
 80091a4:	702c      	strb	r4, [r5, #0]
 80091a6:	3101      	adds	r1, #1
 80091a8:	2c00      	cmp	r4, #0
 80091aa:	d1f5      	bne.n	8009198 <strncpy+0x4>
 80091ac:	2100      	movs	r1, #0
 80091ae:	189a      	adds	r2, r3, r2
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d100      	bne.n	80091b6 <strncpy+0x22>
 80091b4:	bd30      	pop	{r4, r5, pc}
 80091b6:	7019      	strb	r1, [r3, #0]
 80091b8:	3301      	adds	r3, #1
 80091ba:	e7f9      	b.n	80091b0 <strncpy+0x1c>

080091bc <_strtol_l.isra.0>:
 80091bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091be:	b087      	sub	sp, #28
 80091c0:	001e      	movs	r6, r3
 80091c2:	9005      	str	r0, [sp, #20]
 80091c4:	9101      	str	r1, [sp, #4]
 80091c6:	9202      	str	r2, [sp, #8]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d045      	beq.n	8009258 <_strtol_l.isra.0+0x9c>
 80091cc:	0008      	movs	r0, r1
 80091ce:	2b24      	cmp	r3, #36	; 0x24
 80091d0:	d842      	bhi.n	8009258 <_strtol_l.isra.0+0x9c>
 80091d2:	4b3f      	ldr	r3, [pc, #252]	; (80092d0 <_strtol_l.isra.0+0x114>)
 80091d4:	2208      	movs	r2, #8
 80091d6:	469c      	mov	ip, r3
 80091d8:	0003      	movs	r3, r0
 80091da:	4661      	mov	r1, ip
 80091dc:	781c      	ldrb	r4, [r3, #0]
 80091de:	1c45      	adds	r5, r0, #1
 80091e0:	5d09      	ldrb	r1, [r1, r4]
 80091e2:	0028      	movs	r0, r5
 80091e4:	000f      	movs	r7, r1
 80091e6:	4017      	ands	r7, r2
 80091e8:	4211      	tst	r1, r2
 80091ea:	d1f5      	bne.n	80091d8 <_strtol_l.isra.0+0x1c>
 80091ec:	2c2d      	cmp	r4, #45	; 0x2d
 80091ee:	d13a      	bne.n	8009266 <_strtol_l.isra.0+0xaa>
 80091f0:	2701      	movs	r7, #1
 80091f2:	782c      	ldrb	r4, [r5, #0]
 80091f4:	1c9d      	adds	r5, r3, #2
 80091f6:	2e00      	cmp	r6, #0
 80091f8:	d065      	beq.n	80092c6 <_strtol_l.isra.0+0x10a>
 80091fa:	2e10      	cmp	r6, #16
 80091fc:	d109      	bne.n	8009212 <_strtol_l.isra.0+0x56>
 80091fe:	2c30      	cmp	r4, #48	; 0x30
 8009200:	d107      	bne.n	8009212 <_strtol_l.isra.0+0x56>
 8009202:	2220      	movs	r2, #32
 8009204:	782b      	ldrb	r3, [r5, #0]
 8009206:	4393      	bics	r3, r2
 8009208:	2b58      	cmp	r3, #88	; 0x58
 800920a:	d157      	bne.n	80092bc <_strtol_l.isra.0+0x100>
 800920c:	2610      	movs	r6, #16
 800920e:	786c      	ldrb	r4, [r5, #1]
 8009210:	3502      	adds	r5, #2
 8009212:	4b30      	ldr	r3, [pc, #192]	; (80092d4 <_strtol_l.isra.0+0x118>)
 8009214:	0031      	movs	r1, r6
 8009216:	18fb      	adds	r3, r7, r3
 8009218:	0018      	movs	r0, r3
 800921a:	9303      	str	r3, [sp, #12]
 800921c:	f7f7 f80c 	bl	8000238 <__aeabi_uidivmod>
 8009220:	2300      	movs	r3, #0
 8009222:	2201      	movs	r2, #1
 8009224:	4684      	mov	ip, r0
 8009226:	0018      	movs	r0, r3
 8009228:	9104      	str	r1, [sp, #16]
 800922a:	4252      	negs	r2, r2
 800922c:	0021      	movs	r1, r4
 800922e:	3930      	subs	r1, #48	; 0x30
 8009230:	2909      	cmp	r1, #9
 8009232:	d81d      	bhi.n	8009270 <_strtol_l.isra.0+0xb4>
 8009234:	000c      	movs	r4, r1
 8009236:	42a6      	cmp	r6, r4
 8009238:	dd28      	ble.n	800928c <_strtol_l.isra.0+0xd0>
 800923a:	2b00      	cmp	r3, #0
 800923c:	db24      	blt.n	8009288 <_strtol_l.isra.0+0xcc>
 800923e:	0013      	movs	r3, r2
 8009240:	4584      	cmp	ip, r0
 8009242:	d306      	bcc.n	8009252 <_strtol_l.isra.0+0x96>
 8009244:	d102      	bne.n	800924c <_strtol_l.isra.0+0x90>
 8009246:	9904      	ldr	r1, [sp, #16]
 8009248:	42a1      	cmp	r1, r4
 800924a:	db02      	blt.n	8009252 <_strtol_l.isra.0+0x96>
 800924c:	2301      	movs	r3, #1
 800924e:	4370      	muls	r0, r6
 8009250:	1820      	adds	r0, r4, r0
 8009252:	782c      	ldrb	r4, [r5, #0]
 8009254:	3501      	adds	r5, #1
 8009256:	e7e9      	b.n	800922c <_strtol_l.isra.0+0x70>
 8009258:	f7ff ff04 	bl	8009064 <__errno>
 800925c:	2316      	movs	r3, #22
 800925e:	6003      	str	r3, [r0, #0]
 8009260:	2000      	movs	r0, #0
 8009262:	b007      	add	sp, #28
 8009264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009266:	2c2b      	cmp	r4, #43	; 0x2b
 8009268:	d1c5      	bne.n	80091f6 <_strtol_l.isra.0+0x3a>
 800926a:	782c      	ldrb	r4, [r5, #0]
 800926c:	1c9d      	adds	r5, r3, #2
 800926e:	e7c2      	b.n	80091f6 <_strtol_l.isra.0+0x3a>
 8009270:	0021      	movs	r1, r4
 8009272:	3941      	subs	r1, #65	; 0x41
 8009274:	2919      	cmp	r1, #25
 8009276:	d801      	bhi.n	800927c <_strtol_l.isra.0+0xc0>
 8009278:	3c37      	subs	r4, #55	; 0x37
 800927a:	e7dc      	b.n	8009236 <_strtol_l.isra.0+0x7a>
 800927c:	0021      	movs	r1, r4
 800927e:	3961      	subs	r1, #97	; 0x61
 8009280:	2919      	cmp	r1, #25
 8009282:	d803      	bhi.n	800928c <_strtol_l.isra.0+0xd0>
 8009284:	3c57      	subs	r4, #87	; 0x57
 8009286:	e7d6      	b.n	8009236 <_strtol_l.isra.0+0x7a>
 8009288:	0013      	movs	r3, r2
 800928a:	e7e2      	b.n	8009252 <_strtol_l.isra.0+0x96>
 800928c:	2b00      	cmp	r3, #0
 800928e:	da09      	bge.n	80092a4 <_strtol_l.isra.0+0xe8>
 8009290:	2322      	movs	r3, #34	; 0x22
 8009292:	9a05      	ldr	r2, [sp, #20]
 8009294:	9803      	ldr	r0, [sp, #12]
 8009296:	6013      	str	r3, [r2, #0]
 8009298:	9b02      	ldr	r3, [sp, #8]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d0e1      	beq.n	8009262 <_strtol_l.isra.0+0xa6>
 800929e:	1e6b      	subs	r3, r5, #1
 80092a0:	9301      	str	r3, [sp, #4]
 80092a2:	e007      	b.n	80092b4 <_strtol_l.isra.0+0xf8>
 80092a4:	2f00      	cmp	r7, #0
 80092a6:	d000      	beq.n	80092aa <_strtol_l.isra.0+0xee>
 80092a8:	4240      	negs	r0, r0
 80092aa:	9a02      	ldr	r2, [sp, #8]
 80092ac:	2a00      	cmp	r2, #0
 80092ae:	d0d8      	beq.n	8009262 <_strtol_l.isra.0+0xa6>
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1f4      	bne.n	800929e <_strtol_l.isra.0+0xe2>
 80092b4:	9b02      	ldr	r3, [sp, #8]
 80092b6:	9a01      	ldr	r2, [sp, #4]
 80092b8:	601a      	str	r2, [r3, #0]
 80092ba:	e7d2      	b.n	8009262 <_strtol_l.isra.0+0xa6>
 80092bc:	2430      	movs	r4, #48	; 0x30
 80092be:	2e00      	cmp	r6, #0
 80092c0:	d1a7      	bne.n	8009212 <_strtol_l.isra.0+0x56>
 80092c2:	3608      	adds	r6, #8
 80092c4:	e7a5      	b.n	8009212 <_strtol_l.isra.0+0x56>
 80092c6:	2c30      	cmp	r4, #48	; 0x30
 80092c8:	d09b      	beq.n	8009202 <_strtol_l.isra.0+0x46>
 80092ca:	260a      	movs	r6, #10
 80092cc:	e7a1      	b.n	8009212 <_strtol_l.isra.0+0x56>
 80092ce:	46c0      	nop			; (mov r8, r8)
 80092d0:	0800a2e5 	.word	0x0800a2e5
 80092d4:	7fffffff 	.word	0x7fffffff

080092d8 <strtol>:
 80092d8:	b510      	push	{r4, lr}
 80092da:	0013      	movs	r3, r2
 80092dc:	000a      	movs	r2, r1
 80092de:	0001      	movs	r1, r0
 80092e0:	4802      	ldr	r0, [pc, #8]	; (80092ec <strtol+0x14>)
 80092e2:	6800      	ldr	r0, [r0, #0]
 80092e4:	f7ff ff6a 	bl	80091bc <_strtol_l.isra.0>
 80092e8:	bd10      	pop	{r4, pc}
 80092ea:	46c0      	nop			; (mov r8, r8)
 80092ec:	20000050 	.word	0x20000050

080092f0 <__ssputs_r>:
 80092f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092f2:	688e      	ldr	r6, [r1, #8]
 80092f4:	b085      	sub	sp, #20
 80092f6:	0007      	movs	r7, r0
 80092f8:	000c      	movs	r4, r1
 80092fa:	9203      	str	r2, [sp, #12]
 80092fc:	9301      	str	r3, [sp, #4]
 80092fe:	429e      	cmp	r6, r3
 8009300:	d83c      	bhi.n	800937c <__ssputs_r+0x8c>
 8009302:	2390      	movs	r3, #144	; 0x90
 8009304:	898a      	ldrh	r2, [r1, #12]
 8009306:	00db      	lsls	r3, r3, #3
 8009308:	421a      	tst	r2, r3
 800930a:	d034      	beq.n	8009376 <__ssputs_r+0x86>
 800930c:	2503      	movs	r5, #3
 800930e:	6909      	ldr	r1, [r1, #16]
 8009310:	6823      	ldr	r3, [r4, #0]
 8009312:	1a5b      	subs	r3, r3, r1
 8009314:	9302      	str	r3, [sp, #8]
 8009316:	6963      	ldr	r3, [r4, #20]
 8009318:	9802      	ldr	r0, [sp, #8]
 800931a:	435d      	muls	r5, r3
 800931c:	0feb      	lsrs	r3, r5, #31
 800931e:	195d      	adds	r5, r3, r5
 8009320:	9b01      	ldr	r3, [sp, #4]
 8009322:	106d      	asrs	r5, r5, #1
 8009324:	3301      	adds	r3, #1
 8009326:	181b      	adds	r3, r3, r0
 8009328:	42ab      	cmp	r3, r5
 800932a:	d900      	bls.n	800932e <__ssputs_r+0x3e>
 800932c:	001d      	movs	r5, r3
 800932e:	0553      	lsls	r3, r2, #21
 8009330:	d532      	bpl.n	8009398 <__ssputs_r+0xa8>
 8009332:	0029      	movs	r1, r5
 8009334:	0038      	movs	r0, r7
 8009336:	f000 fb27 	bl	8009988 <_malloc_r>
 800933a:	1e06      	subs	r6, r0, #0
 800933c:	d109      	bne.n	8009352 <__ssputs_r+0x62>
 800933e:	230c      	movs	r3, #12
 8009340:	603b      	str	r3, [r7, #0]
 8009342:	2340      	movs	r3, #64	; 0x40
 8009344:	2001      	movs	r0, #1
 8009346:	89a2      	ldrh	r2, [r4, #12]
 8009348:	4240      	negs	r0, r0
 800934a:	4313      	orrs	r3, r2
 800934c:	81a3      	strh	r3, [r4, #12]
 800934e:	b005      	add	sp, #20
 8009350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009352:	9a02      	ldr	r2, [sp, #8]
 8009354:	6921      	ldr	r1, [r4, #16]
 8009356:	f7ff feaf 	bl	80090b8 <memcpy>
 800935a:	89a3      	ldrh	r3, [r4, #12]
 800935c:	4a14      	ldr	r2, [pc, #80]	; (80093b0 <__ssputs_r+0xc0>)
 800935e:	401a      	ands	r2, r3
 8009360:	2380      	movs	r3, #128	; 0x80
 8009362:	4313      	orrs	r3, r2
 8009364:	81a3      	strh	r3, [r4, #12]
 8009366:	9b02      	ldr	r3, [sp, #8]
 8009368:	6126      	str	r6, [r4, #16]
 800936a:	18f6      	adds	r6, r6, r3
 800936c:	6026      	str	r6, [r4, #0]
 800936e:	6165      	str	r5, [r4, #20]
 8009370:	9e01      	ldr	r6, [sp, #4]
 8009372:	1aed      	subs	r5, r5, r3
 8009374:	60a5      	str	r5, [r4, #8]
 8009376:	9b01      	ldr	r3, [sp, #4]
 8009378:	429e      	cmp	r6, r3
 800937a:	d900      	bls.n	800937e <__ssputs_r+0x8e>
 800937c:	9e01      	ldr	r6, [sp, #4]
 800937e:	0032      	movs	r2, r6
 8009380:	9903      	ldr	r1, [sp, #12]
 8009382:	6820      	ldr	r0, [r4, #0]
 8009384:	f000 faa3 	bl	80098ce <memmove>
 8009388:	68a3      	ldr	r3, [r4, #8]
 800938a:	2000      	movs	r0, #0
 800938c:	1b9b      	subs	r3, r3, r6
 800938e:	60a3      	str	r3, [r4, #8]
 8009390:	6823      	ldr	r3, [r4, #0]
 8009392:	199e      	adds	r6, r3, r6
 8009394:	6026      	str	r6, [r4, #0]
 8009396:	e7da      	b.n	800934e <__ssputs_r+0x5e>
 8009398:	002a      	movs	r2, r5
 800939a:	0038      	movs	r0, r7
 800939c:	f000 fb52 	bl	8009a44 <_realloc_r>
 80093a0:	1e06      	subs	r6, r0, #0
 80093a2:	d1e0      	bne.n	8009366 <__ssputs_r+0x76>
 80093a4:	0038      	movs	r0, r7
 80093a6:	6921      	ldr	r1, [r4, #16]
 80093a8:	f000 faa4 	bl	80098f4 <_free_r>
 80093ac:	e7c7      	b.n	800933e <__ssputs_r+0x4e>
 80093ae:	46c0      	nop			; (mov r8, r8)
 80093b0:	fffffb7f 	.word	0xfffffb7f

080093b4 <_svfiprintf_r>:
 80093b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093b6:	b0a1      	sub	sp, #132	; 0x84
 80093b8:	9003      	str	r0, [sp, #12]
 80093ba:	001d      	movs	r5, r3
 80093bc:	898b      	ldrh	r3, [r1, #12]
 80093be:	000f      	movs	r7, r1
 80093c0:	0016      	movs	r6, r2
 80093c2:	061b      	lsls	r3, r3, #24
 80093c4:	d511      	bpl.n	80093ea <_svfiprintf_r+0x36>
 80093c6:	690b      	ldr	r3, [r1, #16]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d10e      	bne.n	80093ea <_svfiprintf_r+0x36>
 80093cc:	2140      	movs	r1, #64	; 0x40
 80093ce:	f000 fadb 	bl	8009988 <_malloc_r>
 80093d2:	6038      	str	r0, [r7, #0]
 80093d4:	6138      	str	r0, [r7, #16]
 80093d6:	2800      	cmp	r0, #0
 80093d8:	d105      	bne.n	80093e6 <_svfiprintf_r+0x32>
 80093da:	230c      	movs	r3, #12
 80093dc:	9a03      	ldr	r2, [sp, #12]
 80093de:	3801      	subs	r0, #1
 80093e0:	6013      	str	r3, [r2, #0]
 80093e2:	b021      	add	sp, #132	; 0x84
 80093e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093e6:	2340      	movs	r3, #64	; 0x40
 80093e8:	617b      	str	r3, [r7, #20]
 80093ea:	2300      	movs	r3, #0
 80093ec:	ac08      	add	r4, sp, #32
 80093ee:	6163      	str	r3, [r4, #20]
 80093f0:	3320      	adds	r3, #32
 80093f2:	7663      	strb	r3, [r4, #25]
 80093f4:	3310      	adds	r3, #16
 80093f6:	76a3      	strb	r3, [r4, #26]
 80093f8:	9507      	str	r5, [sp, #28]
 80093fa:	0035      	movs	r5, r6
 80093fc:	782b      	ldrb	r3, [r5, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d001      	beq.n	8009406 <_svfiprintf_r+0x52>
 8009402:	2b25      	cmp	r3, #37	; 0x25
 8009404:	d147      	bne.n	8009496 <_svfiprintf_r+0xe2>
 8009406:	1bab      	subs	r3, r5, r6
 8009408:	9305      	str	r3, [sp, #20]
 800940a:	42b5      	cmp	r5, r6
 800940c:	d00c      	beq.n	8009428 <_svfiprintf_r+0x74>
 800940e:	0032      	movs	r2, r6
 8009410:	0039      	movs	r1, r7
 8009412:	9803      	ldr	r0, [sp, #12]
 8009414:	f7ff ff6c 	bl	80092f0 <__ssputs_r>
 8009418:	1c43      	adds	r3, r0, #1
 800941a:	d100      	bne.n	800941e <_svfiprintf_r+0x6a>
 800941c:	e0ae      	b.n	800957c <_svfiprintf_r+0x1c8>
 800941e:	6962      	ldr	r2, [r4, #20]
 8009420:	9b05      	ldr	r3, [sp, #20]
 8009422:	4694      	mov	ip, r2
 8009424:	4463      	add	r3, ip
 8009426:	6163      	str	r3, [r4, #20]
 8009428:	782b      	ldrb	r3, [r5, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d100      	bne.n	8009430 <_svfiprintf_r+0x7c>
 800942e:	e0a5      	b.n	800957c <_svfiprintf_r+0x1c8>
 8009430:	2201      	movs	r2, #1
 8009432:	2300      	movs	r3, #0
 8009434:	4252      	negs	r2, r2
 8009436:	6062      	str	r2, [r4, #4]
 8009438:	a904      	add	r1, sp, #16
 800943a:	3254      	adds	r2, #84	; 0x54
 800943c:	1852      	adds	r2, r2, r1
 800943e:	1c6e      	adds	r6, r5, #1
 8009440:	6023      	str	r3, [r4, #0]
 8009442:	60e3      	str	r3, [r4, #12]
 8009444:	60a3      	str	r3, [r4, #8]
 8009446:	7013      	strb	r3, [r2, #0]
 8009448:	65a3      	str	r3, [r4, #88]	; 0x58
 800944a:	2205      	movs	r2, #5
 800944c:	7831      	ldrb	r1, [r6, #0]
 800944e:	4854      	ldr	r0, [pc, #336]	; (80095a0 <_svfiprintf_r+0x1ec>)
 8009450:	f000 fa32 	bl	80098b8 <memchr>
 8009454:	1c75      	adds	r5, r6, #1
 8009456:	2800      	cmp	r0, #0
 8009458:	d11f      	bne.n	800949a <_svfiprintf_r+0xe6>
 800945a:	6822      	ldr	r2, [r4, #0]
 800945c:	06d3      	lsls	r3, r2, #27
 800945e:	d504      	bpl.n	800946a <_svfiprintf_r+0xb6>
 8009460:	2353      	movs	r3, #83	; 0x53
 8009462:	a904      	add	r1, sp, #16
 8009464:	185b      	adds	r3, r3, r1
 8009466:	2120      	movs	r1, #32
 8009468:	7019      	strb	r1, [r3, #0]
 800946a:	0713      	lsls	r3, r2, #28
 800946c:	d504      	bpl.n	8009478 <_svfiprintf_r+0xc4>
 800946e:	2353      	movs	r3, #83	; 0x53
 8009470:	a904      	add	r1, sp, #16
 8009472:	185b      	adds	r3, r3, r1
 8009474:	212b      	movs	r1, #43	; 0x2b
 8009476:	7019      	strb	r1, [r3, #0]
 8009478:	7833      	ldrb	r3, [r6, #0]
 800947a:	2b2a      	cmp	r3, #42	; 0x2a
 800947c:	d016      	beq.n	80094ac <_svfiprintf_r+0xf8>
 800947e:	0035      	movs	r5, r6
 8009480:	2100      	movs	r1, #0
 8009482:	200a      	movs	r0, #10
 8009484:	68e3      	ldr	r3, [r4, #12]
 8009486:	782a      	ldrb	r2, [r5, #0]
 8009488:	1c6e      	adds	r6, r5, #1
 800948a:	3a30      	subs	r2, #48	; 0x30
 800948c:	2a09      	cmp	r2, #9
 800948e:	d94e      	bls.n	800952e <_svfiprintf_r+0x17a>
 8009490:	2900      	cmp	r1, #0
 8009492:	d111      	bne.n	80094b8 <_svfiprintf_r+0x104>
 8009494:	e017      	b.n	80094c6 <_svfiprintf_r+0x112>
 8009496:	3501      	adds	r5, #1
 8009498:	e7b0      	b.n	80093fc <_svfiprintf_r+0x48>
 800949a:	4b41      	ldr	r3, [pc, #260]	; (80095a0 <_svfiprintf_r+0x1ec>)
 800949c:	6822      	ldr	r2, [r4, #0]
 800949e:	1ac0      	subs	r0, r0, r3
 80094a0:	2301      	movs	r3, #1
 80094a2:	4083      	lsls	r3, r0
 80094a4:	4313      	orrs	r3, r2
 80094a6:	002e      	movs	r6, r5
 80094a8:	6023      	str	r3, [r4, #0]
 80094aa:	e7ce      	b.n	800944a <_svfiprintf_r+0x96>
 80094ac:	9b07      	ldr	r3, [sp, #28]
 80094ae:	1d19      	adds	r1, r3, #4
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	9107      	str	r1, [sp, #28]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	db01      	blt.n	80094bc <_svfiprintf_r+0x108>
 80094b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80094ba:	e004      	b.n	80094c6 <_svfiprintf_r+0x112>
 80094bc:	425b      	negs	r3, r3
 80094be:	60e3      	str	r3, [r4, #12]
 80094c0:	2302      	movs	r3, #2
 80094c2:	4313      	orrs	r3, r2
 80094c4:	6023      	str	r3, [r4, #0]
 80094c6:	782b      	ldrb	r3, [r5, #0]
 80094c8:	2b2e      	cmp	r3, #46	; 0x2e
 80094ca:	d10a      	bne.n	80094e2 <_svfiprintf_r+0x12e>
 80094cc:	786b      	ldrb	r3, [r5, #1]
 80094ce:	2b2a      	cmp	r3, #42	; 0x2a
 80094d0:	d135      	bne.n	800953e <_svfiprintf_r+0x18a>
 80094d2:	9b07      	ldr	r3, [sp, #28]
 80094d4:	3502      	adds	r5, #2
 80094d6:	1d1a      	adds	r2, r3, #4
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	9207      	str	r2, [sp, #28]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	db2b      	blt.n	8009538 <_svfiprintf_r+0x184>
 80094e0:	9309      	str	r3, [sp, #36]	; 0x24
 80094e2:	4e30      	ldr	r6, [pc, #192]	; (80095a4 <_svfiprintf_r+0x1f0>)
 80094e4:	2203      	movs	r2, #3
 80094e6:	0030      	movs	r0, r6
 80094e8:	7829      	ldrb	r1, [r5, #0]
 80094ea:	f000 f9e5 	bl	80098b8 <memchr>
 80094ee:	2800      	cmp	r0, #0
 80094f0:	d006      	beq.n	8009500 <_svfiprintf_r+0x14c>
 80094f2:	2340      	movs	r3, #64	; 0x40
 80094f4:	1b80      	subs	r0, r0, r6
 80094f6:	4083      	lsls	r3, r0
 80094f8:	6822      	ldr	r2, [r4, #0]
 80094fa:	3501      	adds	r5, #1
 80094fc:	4313      	orrs	r3, r2
 80094fe:	6023      	str	r3, [r4, #0]
 8009500:	7829      	ldrb	r1, [r5, #0]
 8009502:	2206      	movs	r2, #6
 8009504:	4828      	ldr	r0, [pc, #160]	; (80095a8 <_svfiprintf_r+0x1f4>)
 8009506:	1c6e      	adds	r6, r5, #1
 8009508:	7621      	strb	r1, [r4, #24]
 800950a:	f000 f9d5 	bl	80098b8 <memchr>
 800950e:	2800      	cmp	r0, #0
 8009510:	d03c      	beq.n	800958c <_svfiprintf_r+0x1d8>
 8009512:	4b26      	ldr	r3, [pc, #152]	; (80095ac <_svfiprintf_r+0x1f8>)
 8009514:	2b00      	cmp	r3, #0
 8009516:	d125      	bne.n	8009564 <_svfiprintf_r+0x1b0>
 8009518:	2207      	movs	r2, #7
 800951a:	9b07      	ldr	r3, [sp, #28]
 800951c:	3307      	adds	r3, #7
 800951e:	4393      	bics	r3, r2
 8009520:	3308      	adds	r3, #8
 8009522:	9307      	str	r3, [sp, #28]
 8009524:	6963      	ldr	r3, [r4, #20]
 8009526:	9a04      	ldr	r2, [sp, #16]
 8009528:	189b      	adds	r3, r3, r2
 800952a:	6163      	str	r3, [r4, #20]
 800952c:	e765      	b.n	80093fa <_svfiprintf_r+0x46>
 800952e:	4343      	muls	r3, r0
 8009530:	0035      	movs	r5, r6
 8009532:	2101      	movs	r1, #1
 8009534:	189b      	adds	r3, r3, r2
 8009536:	e7a6      	b.n	8009486 <_svfiprintf_r+0xd2>
 8009538:	2301      	movs	r3, #1
 800953a:	425b      	negs	r3, r3
 800953c:	e7d0      	b.n	80094e0 <_svfiprintf_r+0x12c>
 800953e:	2300      	movs	r3, #0
 8009540:	200a      	movs	r0, #10
 8009542:	001a      	movs	r2, r3
 8009544:	3501      	adds	r5, #1
 8009546:	6063      	str	r3, [r4, #4]
 8009548:	7829      	ldrb	r1, [r5, #0]
 800954a:	1c6e      	adds	r6, r5, #1
 800954c:	3930      	subs	r1, #48	; 0x30
 800954e:	2909      	cmp	r1, #9
 8009550:	d903      	bls.n	800955a <_svfiprintf_r+0x1a6>
 8009552:	2b00      	cmp	r3, #0
 8009554:	d0c5      	beq.n	80094e2 <_svfiprintf_r+0x12e>
 8009556:	9209      	str	r2, [sp, #36]	; 0x24
 8009558:	e7c3      	b.n	80094e2 <_svfiprintf_r+0x12e>
 800955a:	4342      	muls	r2, r0
 800955c:	0035      	movs	r5, r6
 800955e:	2301      	movs	r3, #1
 8009560:	1852      	adds	r2, r2, r1
 8009562:	e7f1      	b.n	8009548 <_svfiprintf_r+0x194>
 8009564:	ab07      	add	r3, sp, #28
 8009566:	9300      	str	r3, [sp, #0]
 8009568:	003a      	movs	r2, r7
 800956a:	0021      	movs	r1, r4
 800956c:	4b10      	ldr	r3, [pc, #64]	; (80095b0 <_svfiprintf_r+0x1fc>)
 800956e:	9803      	ldr	r0, [sp, #12]
 8009570:	e000      	b.n	8009574 <_svfiprintf_r+0x1c0>
 8009572:	bf00      	nop
 8009574:	9004      	str	r0, [sp, #16]
 8009576:	9b04      	ldr	r3, [sp, #16]
 8009578:	3301      	adds	r3, #1
 800957a:	d1d3      	bne.n	8009524 <_svfiprintf_r+0x170>
 800957c:	89bb      	ldrh	r3, [r7, #12]
 800957e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009580:	065b      	lsls	r3, r3, #25
 8009582:	d400      	bmi.n	8009586 <_svfiprintf_r+0x1d2>
 8009584:	e72d      	b.n	80093e2 <_svfiprintf_r+0x2e>
 8009586:	2001      	movs	r0, #1
 8009588:	4240      	negs	r0, r0
 800958a:	e72a      	b.n	80093e2 <_svfiprintf_r+0x2e>
 800958c:	ab07      	add	r3, sp, #28
 800958e:	9300      	str	r3, [sp, #0]
 8009590:	003a      	movs	r2, r7
 8009592:	0021      	movs	r1, r4
 8009594:	4b06      	ldr	r3, [pc, #24]	; (80095b0 <_svfiprintf_r+0x1fc>)
 8009596:	9803      	ldr	r0, [sp, #12]
 8009598:	f000 f87c 	bl	8009694 <_printf_i>
 800959c:	e7ea      	b.n	8009574 <_svfiprintf_r+0x1c0>
 800959e:	46c0      	nop			; (mov r8, r8)
 80095a0:	0800a3e5 	.word	0x0800a3e5
 80095a4:	0800a3eb 	.word	0x0800a3eb
 80095a8:	0800a3ef 	.word	0x0800a3ef
 80095ac:	00000000 	.word	0x00000000
 80095b0:	080092f1 	.word	0x080092f1

080095b4 <_printf_common>:
 80095b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095b6:	0015      	movs	r5, r2
 80095b8:	9301      	str	r3, [sp, #4]
 80095ba:	688a      	ldr	r2, [r1, #8]
 80095bc:	690b      	ldr	r3, [r1, #16]
 80095be:	000c      	movs	r4, r1
 80095c0:	9000      	str	r0, [sp, #0]
 80095c2:	4293      	cmp	r3, r2
 80095c4:	da00      	bge.n	80095c8 <_printf_common+0x14>
 80095c6:	0013      	movs	r3, r2
 80095c8:	0022      	movs	r2, r4
 80095ca:	602b      	str	r3, [r5, #0]
 80095cc:	3243      	adds	r2, #67	; 0x43
 80095ce:	7812      	ldrb	r2, [r2, #0]
 80095d0:	2a00      	cmp	r2, #0
 80095d2:	d001      	beq.n	80095d8 <_printf_common+0x24>
 80095d4:	3301      	adds	r3, #1
 80095d6:	602b      	str	r3, [r5, #0]
 80095d8:	6823      	ldr	r3, [r4, #0]
 80095da:	069b      	lsls	r3, r3, #26
 80095dc:	d502      	bpl.n	80095e4 <_printf_common+0x30>
 80095de:	682b      	ldr	r3, [r5, #0]
 80095e0:	3302      	adds	r3, #2
 80095e2:	602b      	str	r3, [r5, #0]
 80095e4:	6822      	ldr	r2, [r4, #0]
 80095e6:	2306      	movs	r3, #6
 80095e8:	0017      	movs	r7, r2
 80095ea:	401f      	ands	r7, r3
 80095ec:	421a      	tst	r2, r3
 80095ee:	d027      	beq.n	8009640 <_printf_common+0x8c>
 80095f0:	0023      	movs	r3, r4
 80095f2:	3343      	adds	r3, #67	; 0x43
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	1e5a      	subs	r2, r3, #1
 80095f8:	4193      	sbcs	r3, r2
 80095fa:	6822      	ldr	r2, [r4, #0]
 80095fc:	0692      	lsls	r2, r2, #26
 80095fe:	d430      	bmi.n	8009662 <_printf_common+0xae>
 8009600:	0022      	movs	r2, r4
 8009602:	9901      	ldr	r1, [sp, #4]
 8009604:	9800      	ldr	r0, [sp, #0]
 8009606:	9e08      	ldr	r6, [sp, #32]
 8009608:	3243      	adds	r2, #67	; 0x43
 800960a:	47b0      	blx	r6
 800960c:	1c43      	adds	r3, r0, #1
 800960e:	d025      	beq.n	800965c <_printf_common+0xa8>
 8009610:	2306      	movs	r3, #6
 8009612:	6820      	ldr	r0, [r4, #0]
 8009614:	682a      	ldr	r2, [r5, #0]
 8009616:	68e1      	ldr	r1, [r4, #12]
 8009618:	2500      	movs	r5, #0
 800961a:	4003      	ands	r3, r0
 800961c:	2b04      	cmp	r3, #4
 800961e:	d103      	bne.n	8009628 <_printf_common+0x74>
 8009620:	1a8d      	subs	r5, r1, r2
 8009622:	43eb      	mvns	r3, r5
 8009624:	17db      	asrs	r3, r3, #31
 8009626:	401d      	ands	r5, r3
 8009628:	68a3      	ldr	r3, [r4, #8]
 800962a:	6922      	ldr	r2, [r4, #16]
 800962c:	4293      	cmp	r3, r2
 800962e:	dd01      	ble.n	8009634 <_printf_common+0x80>
 8009630:	1a9b      	subs	r3, r3, r2
 8009632:	18ed      	adds	r5, r5, r3
 8009634:	2700      	movs	r7, #0
 8009636:	42bd      	cmp	r5, r7
 8009638:	d120      	bne.n	800967c <_printf_common+0xc8>
 800963a:	2000      	movs	r0, #0
 800963c:	e010      	b.n	8009660 <_printf_common+0xac>
 800963e:	3701      	adds	r7, #1
 8009640:	68e3      	ldr	r3, [r4, #12]
 8009642:	682a      	ldr	r2, [r5, #0]
 8009644:	1a9b      	subs	r3, r3, r2
 8009646:	42bb      	cmp	r3, r7
 8009648:	ddd2      	ble.n	80095f0 <_printf_common+0x3c>
 800964a:	0022      	movs	r2, r4
 800964c:	2301      	movs	r3, #1
 800964e:	9901      	ldr	r1, [sp, #4]
 8009650:	9800      	ldr	r0, [sp, #0]
 8009652:	9e08      	ldr	r6, [sp, #32]
 8009654:	3219      	adds	r2, #25
 8009656:	47b0      	blx	r6
 8009658:	1c43      	adds	r3, r0, #1
 800965a:	d1f0      	bne.n	800963e <_printf_common+0x8a>
 800965c:	2001      	movs	r0, #1
 800965e:	4240      	negs	r0, r0
 8009660:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009662:	2030      	movs	r0, #48	; 0x30
 8009664:	18e1      	adds	r1, r4, r3
 8009666:	3143      	adds	r1, #67	; 0x43
 8009668:	7008      	strb	r0, [r1, #0]
 800966a:	0021      	movs	r1, r4
 800966c:	1c5a      	adds	r2, r3, #1
 800966e:	3145      	adds	r1, #69	; 0x45
 8009670:	7809      	ldrb	r1, [r1, #0]
 8009672:	18a2      	adds	r2, r4, r2
 8009674:	3243      	adds	r2, #67	; 0x43
 8009676:	3302      	adds	r3, #2
 8009678:	7011      	strb	r1, [r2, #0]
 800967a:	e7c1      	b.n	8009600 <_printf_common+0x4c>
 800967c:	0022      	movs	r2, r4
 800967e:	2301      	movs	r3, #1
 8009680:	9901      	ldr	r1, [sp, #4]
 8009682:	9800      	ldr	r0, [sp, #0]
 8009684:	9e08      	ldr	r6, [sp, #32]
 8009686:	321a      	adds	r2, #26
 8009688:	47b0      	blx	r6
 800968a:	1c43      	adds	r3, r0, #1
 800968c:	d0e6      	beq.n	800965c <_printf_common+0xa8>
 800968e:	3701      	adds	r7, #1
 8009690:	e7d1      	b.n	8009636 <_printf_common+0x82>
	...

08009694 <_printf_i>:
 8009694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009696:	b08b      	sub	sp, #44	; 0x2c
 8009698:	9206      	str	r2, [sp, #24]
 800969a:	000a      	movs	r2, r1
 800969c:	3243      	adds	r2, #67	; 0x43
 800969e:	9307      	str	r3, [sp, #28]
 80096a0:	9005      	str	r0, [sp, #20]
 80096a2:	9204      	str	r2, [sp, #16]
 80096a4:	7e0a      	ldrb	r2, [r1, #24]
 80096a6:	000c      	movs	r4, r1
 80096a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096aa:	2a78      	cmp	r2, #120	; 0x78
 80096ac:	d806      	bhi.n	80096bc <_printf_i+0x28>
 80096ae:	2a62      	cmp	r2, #98	; 0x62
 80096b0:	d808      	bhi.n	80096c4 <_printf_i+0x30>
 80096b2:	2a00      	cmp	r2, #0
 80096b4:	d100      	bne.n	80096b8 <_printf_i+0x24>
 80096b6:	e0c0      	b.n	800983a <_printf_i+0x1a6>
 80096b8:	2a58      	cmp	r2, #88	; 0x58
 80096ba:	d052      	beq.n	8009762 <_printf_i+0xce>
 80096bc:	0026      	movs	r6, r4
 80096be:	3642      	adds	r6, #66	; 0x42
 80096c0:	7032      	strb	r2, [r6, #0]
 80096c2:	e022      	b.n	800970a <_printf_i+0x76>
 80096c4:	0010      	movs	r0, r2
 80096c6:	3863      	subs	r0, #99	; 0x63
 80096c8:	2815      	cmp	r0, #21
 80096ca:	d8f7      	bhi.n	80096bc <_printf_i+0x28>
 80096cc:	f7f6 fd24 	bl	8000118 <__gnu_thumb1_case_shi>
 80096d0:	001f0016 	.word	0x001f0016
 80096d4:	fff6fff6 	.word	0xfff6fff6
 80096d8:	fff6fff6 	.word	0xfff6fff6
 80096dc:	fff6001f 	.word	0xfff6001f
 80096e0:	fff6fff6 	.word	0xfff6fff6
 80096e4:	00a8fff6 	.word	0x00a8fff6
 80096e8:	009a0036 	.word	0x009a0036
 80096ec:	fff6fff6 	.word	0xfff6fff6
 80096f0:	fff600b9 	.word	0xfff600b9
 80096f4:	fff60036 	.word	0xfff60036
 80096f8:	009efff6 	.word	0x009efff6
 80096fc:	0026      	movs	r6, r4
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	3642      	adds	r6, #66	; 0x42
 8009702:	1d11      	adds	r1, r2, #4
 8009704:	6019      	str	r1, [r3, #0]
 8009706:	6813      	ldr	r3, [r2, #0]
 8009708:	7033      	strb	r3, [r6, #0]
 800970a:	2301      	movs	r3, #1
 800970c:	e0a7      	b.n	800985e <_printf_i+0x1ca>
 800970e:	6808      	ldr	r0, [r1, #0]
 8009710:	6819      	ldr	r1, [r3, #0]
 8009712:	1d0a      	adds	r2, r1, #4
 8009714:	0605      	lsls	r5, r0, #24
 8009716:	d50b      	bpl.n	8009730 <_printf_i+0x9c>
 8009718:	680d      	ldr	r5, [r1, #0]
 800971a:	601a      	str	r2, [r3, #0]
 800971c:	2d00      	cmp	r5, #0
 800971e:	da03      	bge.n	8009728 <_printf_i+0x94>
 8009720:	232d      	movs	r3, #45	; 0x2d
 8009722:	9a04      	ldr	r2, [sp, #16]
 8009724:	426d      	negs	r5, r5
 8009726:	7013      	strb	r3, [r2, #0]
 8009728:	4b61      	ldr	r3, [pc, #388]	; (80098b0 <_printf_i+0x21c>)
 800972a:	270a      	movs	r7, #10
 800972c:	9303      	str	r3, [sp, #12]
 800972e:	e032      	b.n	8009796 <_printf_i+0x102>
 8009730:	680d      	ldr	r5, [r1, #0]
 8009732:	601a      	str	r2, [r3, #0]
 8009734:	0641      	lsls	r1, r0, #25
 8009736:	d5f1      	bpl.n	800971c <_printf_i+0x88>
 8009738:	b22d      	sxth	r5, r5
 800973a:	e7ef      	b.n	800971c <_printf_i+0x88>
 800973c:	680d      	ldr	r5, [r1, #0]
 800973e:	6819      	ldr	r1, [r3, #0]
 8009740:	1d08      	adds	r0, r1, #4
 8009742:	6018      	str	r0, [r3, #0]
 8009744:	062e      	lsls	r6, r5, #24
 8009746:	d501      	bpl.n	800974c <_printf_i+0xb8>
 8009748:	680d      	ldr	r5, [r1, #0]
 800974a:	e003      	b.n	8009754 <_printf_i+0xc0>
 800974c:	066d      	lsls	r5, r5, #25
 800974e:	d5fb      	bpl.n	8009748 <_printf_i+0xb4>
 8009750:	680d      	ldr	r5, [r1, #0]
 8009752:	b2ad      	uxth	r5, r5
 8009754:	4b56      	ldr	r3, [pc, #344]	; (80098b0 <_printf_i+0x21c>)
 8009756:	270a      	movs	r7, #10
 8009758:	9303      	str	r3, [sp, #12]
 800975a:	2a6f      	cmp	r2, #111	; 0x6f
 800975c:	d117      	bne.n	800978e <_printf_i+0xfa>
 800975e:	2708      	movs	r7, #8
 8009760:	e015      	b.n	800978e <_printf_i+0xfa>
 8009762:	3145      	adds	r1, #69	; 0x45
 8009764:	700a      	strb	r2, [r1, #0]
 8009766:	4a52      	ldr	r2, [pc, #328]	; (80098b0 <_printf_i+0x21c>)
 8009768:	9203      	str	r2, [sp, #12]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	6821      	ldr	r1, [r4, #0]
 800976e:	ca20      	ldmia	r2!, {r5}
 8009770:	601a      	str	r2, [r3, #0]
 8009772:	0608      	lsls	r0, r1, #24
 8009774:	d550      	bpl.n	8009818 <_printf_i+0x184>
 8009776:	07cb      	lsls	r3, r1, #31
 8009778:	d502      	bpl.n	8009780 <_printf_i+0xec>
 800977a:	2320      	movs	r3, #32
 800977c:	4319      	orrs	r1, r3
 800977e:	6021      	str	r1, [r4, #0]
 8009780:	2710      	movs	r7, #16
 8009782:	2d00      	cmp	r5, #0
 8009784:	d103      	bne.n	800978e <_printf_i+0xfa>
 8009786:	2320      	movs	r3, #32
 8009788:	6822      	ldr	r2, [r4, #0]
 800978a:	439a      	bics	r2, r3
 800978c:	6022      	str	r2, [r4, #0]
 800978e:	0023      	movs	r3, r4
 8009790:	2200      	movs	r2, #0
 8009792:	3343      	adds	r3, #67	; 0x43
 8009794:	701a      	strb	r2, [r3, #0]
 8009796:	6863      	ldr	r3, [r4, #4]
 8009798:	60a3      	str	r3, [r4, #8]
 800979a:	2b00      	cmp	r3, #0
 800979c:	db03      	blt.n	80097a6 <_printf_i+0x112>
 800979e:	2204      	movs	r2, #4
 80097a0:	6821      	ldr	r1, [r4, #0]
 80097a2:	4391      	bics	r1, r2
 80097a4:	6021      	str	r1, [r4, #0]
 80097a6:	2d00      	cmp	r5, #0
 80097a8:	d102      	bne.n	80097b0 <_printf_i+0x11c>
 80097aa:	9e04      	ldr	r6, [sp, #16]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00c      	beq.n	80097ca <_printf_i+0x136>
 80097b0:	9e04      	ldr	r6, [sp, #16]
 80097b2:	0028      	movs	r0, r5
 80097b4:	0039      	movs	r1, r7
 80097b6:	f7f6 fd3f 	bl	8000238 <__aeabi_uidivmod>
 80097ba:	9b03      	ldr	r3, [sp, #12]
 80097bc:	3e01      	subs	r6, #1
 80097be:	5c5b      	ldrb	r3, [r3, r1]
 80097c0:	7033      	strb	r3, [r6, #0]
 80097c2:	002b      	movs	r3, r5
 80097c4:	0005      	movs	r5, r0
 80097c6:	429f      	cmp	r7, r3
 80097c8:	d9f3      	bls.n	80097b2 <_printf_i+0x11e>
 80097ca:	2f08      	cmp	r7, #8
 80097cc:	d109      	bne.n	80097e2 <_printf_i+0x14e>
 80097ce:	6823      	ldr	r3, [r4, #0]
 80097d0:	07db      	lsls	r3, r3, #31
 80097d2:	d506      	bpl.n	80097e2 <_printf_i+0x14e>
 80097d4:	6863      	ldr	r3, [r4, #4]
 80097d6:	6922      	ldr	r2, [r4, #16]
 80097d8:	4293      	cmp	r3, r2
 80097da:	dc02      	bgt.n	80097e2 <_printf_i+0x14e>
 80097dc:	2330      	movs	r3, #48	; 0x30
 80097de:	3e01      	subs	r6, #1
 80097e0:	7033      	strb	r3, [r6, #0]
 80097e2:	9b04      	ldr	r3, [sp, #16]
 80097e4:	1b9b      	subs	r3, r3, r6
 80097e6:	6123      	str	r3, [r4, #16]
 80097e8:	9b07      	ldr	r3, [sp, #28]
 80097ea:	0021      	movs	r1, r4
 80097ec:	9300      	str	r3, [sp, #0]
 80097ee:	9805      	ldr	r0, [sp, #20]
 80097f0:	9b06      	ldr	r3, [sp, #24]
 80097f2:	aa09      	add	r2, sp, #36	; 0x24
 80097f4:	f7ff fede 	bl	80095b4 <_printf_common>
 80097f8:	1c43      	adds	r3, r0, #1
 80097fa:	d135      	bne.n	8009868 <_printf_i+0x1d4>
 80097fc:	2001      	movs	r0, #1
 80097fe:	4240      	negs	r0, r0
 8009800:	b00b      	add	sp, #44	; 0x2c
 8009802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009804:	2220      	movs	r2, #32
 8009806:	6809      	ldr	r1, [r1, #0]
 8009808:	430a      	orrs	r2, r1
 800980a:	6022      	str	r2, [r4, #0]
 800980c:	0022      	movs	r2, r4
 800980e:	2178      	movs	r1, #120	; 0x78
 8009810:	3245      	adds	r2, #69	; 0x45
 8009812:	7011      	strb	r1, [r2, #0]
 8009814:	4a27      	ldr	r2, [pc, #156]	; (80098b4 <_printf_i+0x220>)
 8009816:	e7a7      	b.n	8009768 <_printf_i+0xd4>
 8009818:	0648      	lsls	r0, r1, #25
 800981a:	d5ac      	bpl.n	8009776 <_printf_i+0xe2>
 800981c:	b2ad      	uxth	r5, r5
 800981e:	e7aa      	b.n	8009776 <_printf_i+0xe2>
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	680d      	ldr	r5, [r1, #0]
 8009824:	1d10      	adds	r0, r2, #4
 8009826:	6949      	ldr	r1, [r1, #20]
 8009828:	6018      	str	r0, [r3, #0]
 800982a:	6813      	ldr	r3, [r2, #0]
 800982c:	062e      	lsls	r6, r5, #24
 800982e:	d501      	bpl.n	8009834 <_printf_i+0x1a0>
 8009830:	6019      	str	r1, [r3, #0]
 8009832:	e002      	b.n	800983a <_printf_i+0x1a6>
 8009834:	066d      	lsls	r5, r5, #25
 8009836:	d5fb      	bpl.n	8009830 <_printf_i+0x19c>
 8009838:	8019      	strh	r1, [r3, #0]
 800983a:	2300      	movs	r3, #0
 800983c:	9e04      	ldr	r6, [sp, #16]
 800983e:	6123      	str	r3, [r4, #16]
 8009840:	e7d2      	b.n	80097e8 <_printf_i+0x154>
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	1d11      	adds	r1, r2, #4
 8009846:	6019      	str	r1, [r3, #0]
 8009848:	6816      	ldr	r6, [r2, #0]
 800984a:	2100      	movs	r1, #0
 800984c:	0030      	movs	r0, r6
 800984e:	6862      	ldr	r2, [r4, #4]
 8009850:	f000 f832 	bl	80098b8 <memchr>
 8009854:	2800      	cmp	r0, #0
 8009856:	d001      	beq.n	800985c <_printf_i+0x1c8>
 8009858:	1b80      	subs	r0, r0, r6
 800985a:	6060      	str	r0, [r4, #4]
 800985c:	6863      	ldr	r3, [r4, #4]
 800985e:	6123      	str	r3, [r4, #16]
 8009860:	2300      	movs	r3, #0
 8009862:	9a04      	ldr	r2, [sp, #16]
 8009864:	7013      	strb	r3, [r2, #0]
 8009866:	e7bf      	b.n	80097e8 <_printf_i+0x154>
 8009868:	6923      	ldr	r3, [r4, #16]
 800986a:	0032      	movs	r2, r6
 800986c:	9906      	ldr	r1, [sp, #24]
 800986e:	9805      	ldr	r0, [sp, #20]
 8009870:	9d07      	ldr	r5, [sp, #28]
 8009872:	47a8      	blx	r5
 8009874:	1c43      	adds	r3, r0, #1
 8009876:	d0c1      	beq.n	80097fc <_printf_i+0x168>
 8009878:	6823      	ldr	r3, [r4, #0]
 800987a:	079b      	lsls	r3, r3, #30
 800987c:	d415      	bmi.n	80098aa <_printf_i+0x216>
 800987e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009880:	68e0      	ldr	r0, [r4, #12]
 8009882:	4298      	cmp	r0, r3
 8009884:	dabc      	bge.n	8009800 <_printf_i+0x16c>
 8009886:	0018      	movs	r0, r3
 8009888:	e7ba      	b.n	8009800 <_printf_i+0x16c>
 800988a:	0022      	movs	r2, r4
 800988c:	2301      	movs	r3, #1
 800988e:	9906      	ldr	r1, [sp, #24]
 8009890:	9805      	ldr	r0, [sp, #20]
 8009892:	9e07      	ldr	r6, [sp, #28]
 8009894:	3219      	adds	r2, #25
 8009896:	47b0      	blx	r6
 8009898:	1c43      	adds	r3, r0, #1
 800989a:	d0af      	beq.n	80097fc <_printf_i+0x168>
 800989c:	3501      	adds	r5, #1
 800989e:	68e3      	ldr	r3, [r4, #12]
 80098a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098a2:	1a9b      	subs	r3, r3, r2
 80098a4:	42ab      	cmp	r3, r5
 80098a6:	dcf0      	bgt.n	800988a <_printf_i+0x1f6>
 80098a8:	e7e9      	b.n	800987e <_printf_i+0x1ea>
 80098aa:	2500      	movs	r5, #0
 80098ac:	e7f7      	b.n	800989e <_printf_i+0x20a>
 80098ae:	46c0      	nop			; (mov r8, r8)
 80098b0:	0800a3f6 	.word	0x0800a3f6
 80098b4:	0800a407 	.word	0x0800a407

080098b8 <memchr>:
 80098b8:	b2c9      	uxtb	r1, r1
 80098ba:	1882      	adds	r2, r0, r2
 80098bc:	4290      	cmp	r0, r2
 80098be:	d101      	bne.n	80098c4 <memchr+0xc>
 80098c0:	2000      	movs	r0, #0
 80098c2:	4770      	bx	lr
 80098c4:	7803      	ldrb	r3, [r0, #0]
 80098c6:	428b      	cmp	r3, r1
 80098c8:	d0fb      	beq.n	80098c2 <memchr+0xa>
 80098ca:	3001      	adds	r0, #1
 80098cc:	e7f6      	b.n	80098bc <memchr+0x4>

080098ce <memmove>:
 80098ce:	b510      	push	{r4, lr}
 80098d0:	4288      	cmp	r0, r1
 80098d2:	d902      	bls.n	80098da <memmove+0xc>
 80098d4:	188b      	adds	r3, r1, r2
 80098d6:	4298      	cmp	r0, r3
 80098d8:	d303      	bcc.n	80098e2 <memmove+0x14>
 80098da:	2300      	movs	r3, #0
 80098dc:	e007      	b.n	80098ee <memmove+0x20>
 80098de:	5c8b      	ldrb	r3, [r1, r2]
 80098e0:	5483      	strb	r3, [r0, r2]
 80098e2:	3a01      	subs	r2, #1
 80098e4:	d2fb      	bcs.n	80098de <memmove+0x10>
 80098e6:	bd10      	pop	{r4, pc}
 80098e8:	5ccc      	ldrb	r4, [r1, r3]
 80098ea:	54c4      	strb	r4, [r0, r3]
 80098ec:	3301      	adds	r3, #1
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d1fa      	bne.n	80098e8 <memmove+0x1a>
 80098f2:	e7f8      	b.n	80098e6 <memmove+0x18>

080098f4 <_free_r>:
 80098f4:	b570      	push	{r4, r5, r6, lr}
 80098f6:	0005      	movs	r5, r0
 80098f8:	2900      	cmp	r1, #0
 80098fa:	d010      	beq.n	800991e <_free_r+0x2a>
 80098fc:	1f0c      	subs	r4, r1, #4
 80098fe:	6823      	ldr	r3, [r4, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	da00      	bge.n	8009906 <_free_r+0x12>
 8009904:	18e4      	adds	r4, r4, r3
 8009906:	0028      	movs	r0, r5
 8009908:	f000 f8d4 	bl	8009ab4 <__malloc_lock>
 800990c:	4a1d      	ldr	r2, [pc, #116]	; (8009984 <_free_r+0x90>)
 800990e:	6813      	ldr	r3, [r2, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d105      	bne.n	8009920 <_free_r+0x2c>
 8009914:	6063      	str	r3, [r4, #4]
 8009916:	6014      	str	r4, [r2, #0]
 8009918:	0028      	movs	r0, r5
 800991a:	f000 f8d3 	bl	8009ac4 <__malloc_unlock>
 800991e:	bd70      	pop	{r4, r5, r6, pc}
 8009920:	42a3      	cmp	r3, r4
 8009922:	d908      	bls.n	8009936 <_free_r+0x42>
 8009924:	6821      	ldr	r1, [r4, #0]
 8009926:	1860      	adds	r0, r4, r1
 8009928:	4283      	cmp	r3, r0
 800992a:	d1f3      	bne.n	8009914 <_free_r+0x20>
 800992c:	6818      	ldr	r0, [r3, #0]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	1841      	adds	r1, r0, r1
 8009932:	6021      	str	r1, [r4, #0]
 8009934:	e7ee      	b.n	8009914 <_free_r+0x20>
 8009936:	001a      	movs	r2, r3
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d001      	beq.n	8009942 <_free_r+0x4e>
 800993e:	42a3      	cmp	r3, r4
 8009940:	d9f9      	bls.n	8009936 <_free_r+0x42>
 8009942:	6811      	ldr	r1, [r2, #0]
 8009944:	1850      	adds	r0, r2, r1
 8009946:	42a0      	cmp	r0, r4
 8009948:	d10b      	bne.n	8009962 <_free_r+0x6e>
 800994a:	6820      	ldr	r0, [r4, #0]
 800994c:	1809      	adds	r1, r1, r0
 800994e:	1850      	adds	r0, r2, r1
 8009950:	6011      	str	r1, [r2, #0]
 8009952:	4283      	cmp	r3, r0
 8009954:	d1e0      	bne.n	8009918 <_free_r+0x24>
 8009956:	6818      	ldr	r0, [r3, #0]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	1841      	adds	r1, r0, r1
 800995c:	6011      	str	r1, [r2, #0]
 800995e:	6053      	str	r3, [r2, #4]
 8009960:	e7da      	b.n	8009918 <_free_r+0x24>
 8009962:	42a0      	cmp	r0, r4
 8009964:	d902      	bls.n	800996c <_free_r+0x78>
 8009966:	230c      	movs	r3, #12
 8009968:	602b      	str	r3, [r5, #0]
 800996a:	e7d5      	b.n	8009918 <_free_r+0x24>
 800996c:	6821      	ldr	r1, [r4, #0]
 800996e:	1860      	adds	r0, r4, r1
 8009970:	4283      	cmp	r3, r0
 8009972:	d103      	bne.n	800997c <_free_r+0x88>
 8009974:	6818      	ldr	r0, [r3, #0]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	1841      	adds	r1, r0, r1
 800997a:	6021      	str	r1, [r4, #0]
 800997c:	6063      	str	r3, [r4, #4]
 800997e:	6054      	str	r4, [r2, #4]
 8009980:	e7ca      	b.n	8009918 <_free_r+0x24>
 8009982:	46c0      	nop			; (mov r8, r8)
 8009984:	200004d4 	.word	0x200004d4

08009988 <_malloc_r>:
 8009988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998a:	2303      	movs	r3, #3
 800998c:	1ccd      	adds	r5, r1, #3
 800998e:	439d      	bics	r5, r3
 8009990:	3508      	adds	r5, #8
 8009992:	0006      	movs	r6, r0
 8009994:	2d0c      	cmp	r5, #12
 8009996:	d21f      	bcs.n	80099d8 <_malloc_r+0x50>
 8009998:	250c      	movs	r5, #12
 800999a:	42a9      	cmp	r1, r5
 800999c:	d81e      	bhi.n	80099dc <_malloc_r+0x54>
 800999e:	0030      	movs	r0, r6
 80099a0:	f000 f888 	bl	8009ab4 <__malloc_lock>
 80099a4:	4925      	ldr	r1, [pc, #148]	; (8009a3c <_malloc_r+0xb4>)
 80099a6:	680a      	ldr	r2, [r1, #0]
 80099a8:	0014      	movs	r4, r2
 80099aa:	2c00      	cmp	r4, #0
 80099ac:	d11a      	bne.n	80099e4 <_malloc_r+0x5c>
 80099ae:	4f24      	ldr	r7, [pc, #144]	; (8009a40 <_malloc_r+0xb8>)
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d104      	bne.n	80099c0 <_malloc_r+0x38>
 80099b6:	0021      	movs	r1, r4
 80099b8:	0030      	movs	r0, r6
 80099ba:	f000 f869 	bl	8009a90 <_sbrk_r>
 80099be:	6038      	str	r0, [r7, #0]
 80099c0:	0029      	movs	r1, r5
 80099c2:	0030      	movs	r0, r6
 80099c4:	f000 f864 	bl	8009a90 <_sbrk_r>
 80099c8:	1c43      	adds	r3, r0, #1
 80099ca:	d12b      	bne.n	8009a24 <_malloc_r+0x9c>
 80099cc:	230c      	movs	r3, #12
 80099ce:	0030      	movs	r0, r6
 80099d0:	6033      	str	r3, [r6, #0]
 80099d2:	f000 f877 	bl	8009ac4 <__malloc_unlock>
 80099d6:	e003      	b.n	80099e0 <_malloc_r+0x58>
 80099d8:	2d00      	cmp	r5, #0
 80099da:	dade      	bge.n	800999a <_malloc_r+0x12>
 80099dc:	230c      	movs	r3, #12
 80099de:	6033      	str	r3, [r6, #0]
 80099e0:	2000      	movs	r0, #0
 80099e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099e4:	6823      	ldr	r3, [r4, #0]
 80099e6:	1b5b      	subs	r3, r3, r5
 80099e8:	d419      	bmi.n	8009a1e <_malloc_r+0x96>
 80099ea:	2b0b      	cmp	r3, #11
 80099ec:	d903      	bls.n	80099f6 <_malloc_r+0x6e>
 80099ee:	6023      	str	r3, [r4, #0]
 80099f0:	18e4      	adds	r4, r4, r3
 80099f2:	6025      	str	r5, [r4, #0]
 80099f4:	e003      	b.n	80099fe <_malloc_r+0x76>
 80099f6:	6863      	ldr	r3, [r4, #4]
 80099f8:	42a2      	cmp	r2, r4
 80099fa:	d10e      	bne.n	8009a1a <_malloc_r+0x92>
 80099fc:	600b      	str	r3, [r1, #0]
 80099fe:	0030      	movs	r0, r6
 8009a00:	f000 f860 	bl	8009ac4 <__malloc_unlock>
 8009a04:	0020      	movs	r0, r4
 8009a06:	2207      	movs	r2, #7
 8009a08:	300b      	adds	r0, #11
 8009a0a:	1d23      	adds	r3, r4, #4
 8009a0c:	4390      	bics	r0, r2
 8009a0e:	1ac2      	subs	r2, r0, r3
 8009a10:	4298      	cmp	r0, r3
 8009a12:	d0e6      	beq.n	80099e2 <_malloc_r+0x5a>
 8009a14:	1a1b      	subs	r3, r3, r0
 8009a16:	50a3      	str	r3, [r4, r2]
 8009a18:	e7e3      	b.n	80099e2 <_malloc_r+0x5a>
 8009a1a:	6053      	str	r3, [r2, #4]
 8009a1c:	e7ef      	b.n	80099fe <_malloc_r+0x76>
 8009a1e:	0022      	movs	r2, r4
 8009a20:	6864      	ldr	r4, [r4, #4]
 8009a22:	e7c2      	b.n	80099aa <_malloc_r+0x22>
 8009a24:	2303      	movs	r3, #3
 8009a26:	1cc4      	adds	r4, r0, #3
 8009a28:	439c      	bics	r4, r3
 8009a2a:	42a0      	cmp	r0, r4
 8009a2c:	d0e1      	beq.n	80099f2 <_malloc_r+0x6a>
 8009a2e:	1a21      	subs	r1, r4, r0
 8009a30:	0030      	movs	r0, r6
 8009a32:	f000 f82d 	bl	8009a90 <_sbrk_r>
 8009a36:	1c43      	adds	r3, r0, #1
 8009a38:	d1db      	bne.n	80099f2 <_malloc_r+0x6a>
 8009a3a:	e7c7      	b.n	80099cc <_malloc_r+0x44>
 8009a3c:	200004d4 	.word	0x200004d4
 8009a40:	200004d8 	.word	0x200004d8

08009a44 <_realloc_r>:
 8009a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a46:	0007      	movs	r7, r0
 8009a48:	000d      	movs	r5, r1
 8009a4a:	0016      	movs	r6, r2
 8009a4c:	2900      	cmp	r1, #0
 8009a4e:	d105      	bne.n	8009a5c <_realloc_r+0x18>
 8009a50:	0011      	movs	r1, r2
 8009a52:	f7ff ff99 	bl	8009988 <_malloc_r>
 8009a56:	0004      	movs	r4, r0
 8009a58:	0020      	movs	r0, r4
 8009a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a5c:	2a00      	cmp	r2, #0
 8009a5e:	d103      	bne.n	8009a68 <_realloc_r+0x24>
 8009a60:	f7ff ff48 	bl	80098f4 <_free_r>
 8009a64:	0034      	movs	r4, r6
 8009a66:	e7f7      	b.n	8009a58 <_realloc_r+0x14>
 8009a68:	f000 f834 	bl	8009ad4 <_malloc_usable_size_r>
 8009a6c:	002c      	movs	r4, r5
 8009a6e:	42b0      	cmp	r0, r6
 8009a70:	d2f2      	bcs.n	8009a58 <_realloc_r+0x14>
 8009a72:	0031      	movs	r1, r6
 8009a74:	0038      	movs	r0, r7
 8009a76:	f7ff ff87 	bl	8009988 <_malloc_r>
 8009a7a:	1e04      	subs	r4, r0, #0
 8009a7c:	d0ec      	beq.n	8009a58 <_realloc_r+0x14>
 8009a7e:	0029      	movs	r1, r5
 8009a80:	0032      	movs	r2, r6
 8009a82:	f7ff fb19 	bl	80090b8 <memcpy>
 8009a86:	0029      	movs	r1, r5
 8009a88:	0038      	movs	r0, r7
 8009a8a:	f7ff ff33 	bl	80098f4 <_free_r>
 8009a8e:	e7e3      	b.n	8009a58 <_realloc_r+0x14>

08009a90 <_sbrk_r>:
 8009a90:	2300      	movs	r3, #0
 8009a92:	b570      	push	{r4, r5, r6, lr}
 8009a94:	4d06      	ldr	r5, [pc, #24]	; (8009ab0 <_sbrk_r+0x20>)
 8009a96:	0004      	movs	r4, r0
 8009a98:	0008      	movs	r0, r1
 8009a9a:	602b      	str	r3, [r5, #0]
 8009a9c:	f7f9 fb36 	bl	800310c <_sbrk>
 8009aa0:	1c43      	adds	r3, r0, #1
 8009aa2:	d103      	bne.n	8009aac <_sbrk_r+0x1c>
 8009aa4:	682b      	ldr	r3, [r5, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d000      	beq.n	8009aac <_sbrk_r+0x1c>
 8009aaa:	6023      	str	r3, [r4, #0]
 8009aac:	bd70      	pop	{r4, r5, r6, pc}
 8009aae:	46c0      	nop			; (mov r8, r8)
 8009ab0:	200004e0 	.word	0x200004e0

08009ab4 <__malloc_lock>:
 8009ab4:	b510      	push	{r4, lr}
 8009ab6:	4802      	ldr	r0, [pc, #8]	; (8009ac0 <__malloc_lock+0xc>)
 8009ab8:	f000 f814 	bl	8009ae4 <__retarget_lock_acquire_recursive>
 8009abc:	bd10      	pop	{r4, pc}
 8009abe:	46c0      	nop			; (mov r8, r8)
 8009ac0:	200004e8 	.word	0x200004e8

08009ac4 <__malloc_unlock>:
 8009ac4:	b510      	push	{r4, lr}
 8009ac6:	4802      	ldr	r0, [pc, #8]	; (8009ad0 <__malloc_unlock+0xc>)
 8009ac8:	f000 f80d 	bl	8009ae6 <__retarget_lock_release_recursive>
 8009acc:	bd10      	pop	{r4, pc}
 8009ace:	46c0      	nop			; (mov r8, r8)
 8009ad0:	200004e8 	.word	0x200004e8

08009ad4 <_malloc_usable_size_r>:
 8009ad4:	1f0b      	subs	r3, r1, #4
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	1f18      	subs	r0, r3, #4
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	da01      	bge.n	8009ae2 <_malloc_usable_size_r+0xe>
 8009ade:	580b      	ldr	r3, [r1, r0]
 8009ae0:	18c0      	adds	r0, r0, r3
 8009ae2:	4770      	bx	lr

08009ae4 <__retarget_lock_acquire_recursive>:
 8009ae4:	4770      	bx	lr

08009ae6 <__retarget_lock_release_recursive>:
 8009ae6:	4770      	bx	lr

08009ae8 <_init>:
 8009ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aea:	46c0      	nop			; (mov r8, r8)
 8009aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aee:	bc08      	pop	{r3}
 8009af0:	469e      	mov	lr, r3
 8009af2:	4770      	bx	lr

08009af4 <_fini>:
 8009af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af6:	46c0      	nop			; (mov r8, r8)
 8009af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009afa:	bc08      	pop	{r3}
 8009afc:	469e      	mov	lr, r3
 8009afe:	4770      	bx	lr
