
cats_tele_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2d0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000974  0800a38c  0800a38c  0001a38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad00  0800ad00  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad00  0800ad00  0001ad00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad08  0800ad08  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0800ad08  0800ad08  0001ad08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad1c  0800ad1c  0001ad1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800ad20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000624  20000070  0800ad90  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000694  0800ad90  00020694  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031294  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058e5  00000000  00000000  0005132c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e0  00000000  00000000  00056c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001738  00000000  00000000  000584f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e748  00000000  00000000  00059c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ebc6  00000000  00000000  00078378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b454d  00000000  00000000  00096f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014b48b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ec0  00000000  00000000  0014b4e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800a374 	.word	0x0800a374

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	0800a374 	.word	0x0800a374

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	1c08      	adds	r0, r1, #0
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f806 	bl	8000458 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__udivmoddi4>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	0004      	movs	r4, r0
 8000466:	000d      	movs	r5, r1
 8000468:	4692      	mov	sl, r2
 800046a:	4699      	mov	r9, r3
 800046c:	b083      	sub	sp, #12
 800046e:	428b      	cmp	r3, r1
 8000470:	d830      	bhi.n	80004d4 <__udivmoddi4+0x7c>
 8000472:	d02d      	beq.n	80004d0 <__udivmoddi4+0x78>
 8000474:	4649      	mov	r1, r9
 8000476:	4650      	mov	r0, sl
 8000478:	f000 f8d8 	bl	800062c <__clzdi2>
 800047c:	0029      	movs	r1, r5
 800047e:	0006      	movs	r6, r0
 8000480:	0020      	movs	r0, r4
 8000482:	f000 f8d3 	bl	800062c <__clzdi2>
 8000486:	1a33      	subs	r3, r6, r0
 8000488:	4698      	mov	r8, r3
 800048a:	3b20      	subs	r3, #32
 800048c:	469b      	mov	fp, r3
 800048e:	d433      	bmi.n	80004f8 <__udivmoddi4+0xa0>
 8000490:	465a      	mov	r2, fp
 8000492:	4653      	mov	r3, sl
 8000494:	4093      	lsls	r3, r2
 8000496:	4642      	mov	r2, r8
 8000498:	001f      	movs	r7, r3
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	001e      	movs	r6, r3
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d83a      	bhi.n	800051a <__udivmoddi4+0xc2>
 80004a4:	42af      	cmp	r7, r5
 80004a6:	d100      	bne.n	80004aa <__udivmoddi4+0x52>
 80004a8:	e078      	b.n	800059c <__udivmoddi4+0x144>
 80004aa:	465b      	mov	r3, fp
 80004ac:	1ba4      	subs	r4, r4, r6
 80004ae:	41bd      	sbcs	r5, r7
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	da00      	bge.n	80004b6 <__udivmoddi4+0x5e>
 80004b4:	e075      	b.n	80005a2 <__udivmoddi4+0x14a>
 80004b6:	2200      	movs	r2, #0
 80004b8:	2300      	movs	r3, #0
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	465a      	mov	r2, fp
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	4642      	mov	r2, r8
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	e028      	b.n	8000522 <__udivmoddi4+0xca>
 80004d0:	4282      	cmp	r2, r0
 80004d2:	d9cf      	bls.n	8000474 <__udivmoddi4+0x1c>
 80004d4:	2200      	movs	r2, #0
 80004d6:	2300      	movs	r3, #0
 80004d8:	9200      	str	r2, [sp, #0]
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <__udivmoddi4+0x8e>
 80004e2:	601c      	str	r4, [r3, #0]
 80004e4:	605d      	str	r5, [r3, #4]
 80004e6:	9800      	ldr	r0, [sp, #0]
 80004e8:	9901      	ldr	r1, [sp, #4]
 80004ea:	b003      	add	sp, #12
 80004ec:	bcf0      	pop	{r4, r5, r6, r7}
 80004ee:	46bb      	mov	fp, r7
 80004f0:	46b2      	mov	sl, r6
 80004f2:	46a9      	mov	r9, r5
 80004f4:	46a0      	mov	r8, r4
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	4642      	mov	r2, r8
 80004fa:	2320      	movs	r3, #32
 80004fc:	1a9b      	subs	r3, r3, r2
 80004fe:	4652      	mov	r2, sl
 8000500:	40da      	lsrs	r2, r3
 8000502:	4641      	mov	r1, r8
 8000504:	0013      	movs	r3, r2
 8000506:	464a      	mov	r2, r9
 8000508:	408a      	lsls	r2, r1
 800050a:	0017      	movs	r7, r2
 800050c:	4642      	mov	r2, r8
 800050e:	431f      	orrs	r7, r3
 8000510:	4653      	mov	r3, sl
 8000512:	4093      	lsls	r3, r2
 8000514:	001e      	movs	r6, r3
 8000516:	42af      	cmp	r7, r5
 8000518:	d9c4      	bls.n	80004a4 <__udivmoddi4+0x4c>
 800051a:	2200      	movs	r2, #0
 800051c:	2300      	movs	r3, #0
 800051e:	9200      	str	r2, [sp, #0]
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	4643      	mov	r3, r8
 8000524:	2b00      	cmp	r3, #0
 8000526:	d0d9      	beq.n	80004dc <__udivmoddi4+0x84>
 8000528:	07fb      	lsls	r3, r7, #31
 800052a:	0872      	lsrs	r2, r6, #1
 800052c:	431a      	orrs	r2, r3
 800052e:	4646      	mov	r6, r8
 8000530:	087b      	lsrs	r3, r7, #1
 8000532:	e00e      	b.n	8000552 <__udivmoddi4+0xfa>
 8000534:	42ab      	cmp	r3, r5
 8000536:	d101      	bne.n	800053c <__udivmoddi4+0xe4>
 8000538:	42a2      	cmp	r2, r4
 800053a:	d80c      	bhi.n	8000556 <__udivmoddi4+0xfe>
 800053c:	1aa4      	subs	r4, r4, r2
 800053e:	419d      	sbcs	r5, r3
 8000540:	2001      	movs	r0, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2100      	movs	r1, #0
 8000548:	3e01      	subs	r6, #1
 800054a:	1824      	adds	r4, r4, r0
 800054c:	414d      	adcs	r5, r1
 800054e:	2e00      	cmp	r6, #0
 8000550:	d006      	beq.n	8000560 <__udivmoddi4+0x108>
 8000552:	42ab      	cmp	r3, r5
 8000554:	d9ee      	bls.n	8000534 <__udivmoddi4+0xdc>
 8000556:	3e01      	subs	r6, #1
 8000558:	1924      	adds	r4, r4, r4
 800055a:	416d      	adcs	r5, r5
 800055c:	2e00      	cmp	r6, #0
 800055e:	d1f8      	bne.n	8000552 <__udivmoddi4+0xfa>
 8000560:	9800      	ldr	r0, [sp, #0]
 8000562:	9901      	ldr	r1, [sp, #4]
 8000564:	465b      	mov	r3, fp
 8000566:	1900      	adds	r0, r0, r4
 8000568:	4169      	adcs	r1, r5
 800056a:	2b00      	cmp	r3, #0
 800056c:	db24      	blt.n	80005b8 <__udivmoddi4+0x160>
 800056e:	002b      	movs	r3, r5
 8000570:	465a      	mov	r2, fp
 8000572:	4644      	mov	r4, r8
 8000574:	40d3      	lsrs	r3, r2
 8000576:	002a      	movs	r2, r5
 8000578:	40e2      	lsrs	r2, r4
 800057a:	001c      	movs	r4, r3
 800057c:	465b      	mov	r3, fp
 800057e:	0015      	movs	r5, r2
 8000580:	2b00      	cmp	r3, #0
 8000582:	db2a      	blt.n	80005da <__udivmoddi4+0x182>
 8000584:	0026      	movs	r6, r4
 8000586:	409e      	lsls	r6, r3
 8000588:	0033      	movs	r3, r6
 800058a:	0026      	movs	r6, r4
 800058c:	4647      	mov	r7, r8
 800058e:	40be      	lsls	r6, r7
 8000590:	0032      	movs	r2, r6
 8000592:	1a80      	subs	r0, r0, r2
 8000594:	4199      	sbcs	r1, r3
 8000596:	9000      	str	r0, [sp, #0]
 8000598:	9101      	str	r1, [sp, #4]
 800059a:	e79f      	b.n	80004dc <__udivmoddi4+0x84>
 800059c:	42a3      	cmp	r3, r4
 800059e:	d8bc      	bhi.n	800051a <__udivmoddi4+0xc2>
 80005a0:	e783      	b.n	80004aa <__udivmoddi4+0x52>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	2100      	movs	r1, #0
 80005a8:	1a9b      	subs	r3, r3, r2
 80005aa:	2200      	movs	r2, #0
 80005ac:	9100      	str	r1, [sp, #0]
 80005ae:	9201      	str	r2, [sp, #4]
 80005b0:	2201      	movs	r2, #1
 80005b2:	40da      	lsrs	r2, r3
 80005b4:	9201      	str	r2, [sp, #4]
 80005b6:	e786      	b.n	80004c6 <__udivmoddi4+0x6e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	2320      	movs	r3, #32
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	002a      	movs	r2, r5
 80005c0:	4646      	mov	r6, r8
 80005c2:	409a      	lsls	r2, r3
 80005c4:	0023      	movs	r3, r4
 80005c6:	40f3      	lsrs	r3, r6
 80005c8:	4644      	mov	r4, r8
 80005ca:	4313      	orrs	r3, r2
 80005cc:	002a      	movs	r2, r5
 80005ce:	40e2      	lsrs	r2, r4
 80005d0:	001c      	movs	r4, r3
 80005d2:	465b      	mov	r3, fp
 80005d4:	0015      	movs	r5, r2
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	dad4      	bge.n	8000584 <__udivmoddi4+0x12c>
 80005da:	4642      	mov	r2, r8
 80005dc:	002f      	movs	r7, r5
 80005de:	2320      	movs	r3, #32
 80005e0:	0026      	movs	r6, r4
 80005e2:	4097      	lsls	r7, r2
 80005e4:	1a9b      	subs	r3, r3, r2
 80005e6:	40de      	lsrs	r6, r3
 80005e8:	003b      	movs	r3, r7
 80005ea:	4333      	orrs	r3, r6
 80005ec:	e7cd      	b.n	800058a <__udivmoddi4+0x132>
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	; (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <__clzdi2>:
 800062c:	b510      	push	{r4, lr}
 800062e:	2900      	cmp	r1, #0
 8000630:	d103      	bne.n	800063a <__clzdi2+0xe>
 8000632:	f7ff ffdd 	bl	80005f0 <__clzsi2>
 8000636:	3020      	adds	r0, #32
 8000638:	e002      	b.n	8000640 <__clzdi2+0x14>
 800063a:	1c08      	adds	r0, r1, #0
 800063c:	f7ff ffd8 	bl	80005f0 <__clzsi2>
 8000640:	bd10      	pop	{r4, pc}
 8000642:	46c0      	nop			; (mov r8, r8)

08000644 <_Z8containsih>:

*/

uint16_t crc16(uint8_t const *data, int32_t size);

uint8_t contains(int current_pos, uint8_t value) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	000a      	movs	r2, r1
 800064e:	1cfb      	adds	r3, r7, #3
 8000650:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < current_pos; i++) {
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	68fa      	ldr	r2, [r7, #12]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	429a      	cmp	r2, r3
 800065c:	da0d      	bge.n	800067a <_Z8containsih+0x36>
    if (FHSSsequence[i] == value)
 800065e:	4a09      	ldr	r2, [pc, #36]	; (8000684 <_Z8containsih+0x40>)
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	18d3      	adds	r3, r2, r3
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	1cfa      	adds	r2, r7, #3
 8000668:	7812      	ldrb	r2, [r2, #0]
 800066a:	429a      	cmp	r2, r3
 800066c:	d101      	bne.n	8000672 <_Z8containsih+0x2e>
      return 1;
 800066e:	2301      	movs	r3, #1
 8000670:	e004      	b.n	800067c <_Z8containsih+0x38>
  for (int i = 0; i < current_pos; i++) {
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3301      	adds	r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	e7ed      	b.n	8000656 <_Z8containsih+0x12>
  }
  return 0;
 800067a:	2300      	movs	r3, #0
}
 800067c:	0018      	movs	r0, r3
 800067e:	46bd      	mov	sp, r7
 8000680:	b004      	add	sp, #16
 8000682:	bd80      	pop	{r7, pc}
 8000684:	2000008c 	.word	0x2000008c

08000688 <_Z25FHSSrandomiseFHSSsequencem>:

void FHSSrandomiseFHSSsequence(uint32_t crc) {
 8000688:	b5b0      	push	{r4, r5, r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  rngSeed(crc);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	0018      	movs	r0, r3
 8000694:	f000 f882 	bl	800079c <_Z7rngSeedm>
  int i = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
  while (i < FHSS_SEQUENCE_CNT) {
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	2b13      	cmp	r3, #19
 80006a0:	dc1e      	bgt.n	80006e0 <_Z25FHSSrandomiseFHSSsequencem+0x58>
    uint8_t next_freq = (uint8_t)rngN(FHSS_FREQ_CNT);
 80006a2:	250b      	movs	r5, #11
 80006a4:	197c      	adds	r4, r7, r5
 80006a6:	2050      	movs	r0, #80	; 0x50
 80006a8:	f000 f886 	bl	80007b8 <_Z4rngNh>
 80006ac:	0003      	movs	r3, r0
 80006ae:	7023      	strb	r3, [r4, #0]
    if (contains(i, next_freq) == 0) {
 80006b0:	002c      	movs	r4, r5
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	781a      	ldrb	r2, [r3, #0]
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	0011      	movs	r1, r2
 80006ba:	0018      	movs	r0, r3
 80006bc:	f7ff ffc2 	bl	8000644 <_Z8containsih>
 80006c0:	0003      	movs	r3, r0
 80006c2:	425a      	negs	r2, r3
 80006c4:	4153      	adcs	r3, r2
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d0e7      	beq.n	800069c <_Z25FHSSrandomiseFHSSsequencem+0x14>
      FHSSsequence[i] = next_freq;
 80006cc:	4a09      	ldr	r2, [pc, #36]	; (80006f4 <_Z25FHSSrandomiseFHSSsequencem+0x6c>)
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	18d3      	adds	r3, r2, r3
 80006d2:	193a      	adds	r2, r7, r4
 80006d4:	7812      	ldrb	r2, [r2, #0]
 80006d6:	701a      	strb	r2, [r3, #0]
      i++;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	3301      	adds	r3, #1
 80006dc:	60fb      	str	r3, [r7, #12]
  while (i < FHSS_SEQUENCE_CNT) {
 80006de:	e7dd      	b.n	800069c <_Z25FHSSrandomiseFHSSsequencem+0x14>
    }
  }
  sync_channel = FHSSsequence[0];
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <_Z25FHSSrandomiseFHSSsequencem+0x6c>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	001a      	movs	r2, r3
 80006e6:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <_Z25FHSSrandomiseFHSSsequencem+0x70>)
 80006e8:	601a      	str	r2, [r3, #0]
}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b004      	add	sp, #16
 80006f0:	bdb0      	pop	{r4, r5, r7, pc}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	2000008c 	.word	0x2000008c
 80006f8:	200000a4 	.word	0x200000a4

080006fc <_Z5crc32PKhj>:
    0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693,
    0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,
    0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d};

uint32_t crc32(const uint8_t *buf, size_t size) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	6039      	str	r1, [r7, #0]
  const uint8_t *p = buf;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	60fb      	str	r3, [r7, #12]
  uint32_t crc;

  crc = ~0U;
 800070a:	2301      	movs	r3, #1
 800070c:	425b      	negs	r3, r3
 800070e:	60bb      	str	r3, [r7, #8]
  while (size--)
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	1e5a      	subs	r2, r3, #1
 8000714:	603a      	str	r2, [r7, #0]
 8000716:	1e5a      	subs	r2, r3, #1
 8000718:	4193      	sbcs	r3, r2
 800071a:	b2db      	uxtb	r3, r3
 800071c:	2b00      	cmp	r3, #0
 800071e:	d010      	beq.n	8000742 <_Z5crc32PKhj+0x46>
    crc = crc32_tab[(crc ^ *p++) & 0xFF] ^ (crc >> 8);
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	1c5a      	adds	r2, r3, #1
 8000724:	60fa      	str	r2, [r7, #12]
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	001a      	movs	r2, r3
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	4053      	eors	r3, r2
 800072e:	22ff      	movs	r2, #255	; 0xff
 8000730:	401a      	ands	r2, r3
 8000732:	4b07      	ldr	r3, [pc, #28]	; (8000750 <_Z5crc32PKhj+0x54>)
 8000734:	0092      	lsls	r2, r2, #2
 8000736:	58d2      	ldr	r2, [r2, r3]
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	0a1b      	lsrs	r3, r3, #8
 800073c:	4053      	eors	r3, r2
 800073e:	60bb      	str	r3, [r7, #8]
  while (size--)
 8000740:	e7e6      	b.n	8000710 <_Z5crc32PKhj+0x14>
  return crc ^ ~0U;
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	43db      	mvns	r3, r3
}
 8000746:	0018      	movs	r0, r3
 8000748:	46bd      	mov	sp, r7
 800074a:	b004      	add	sp, #16
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	0800a5f0 	.word	0x0800a5f0

08000754 <_Z3rngv>:
static uint32_t seed = 0;

// returns values between 0 and 0x7FFF
// NB rngN depends on this output range, so if we change the
// behaviour rngN will need updating
uint16_t rng(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
  const uint32_t m = 2147483648;
 800075a:	2380      	movs	r3, #128	; 0x80
 800075c:	061b      	lsls	r3, r3, #24
 800075e:	60fb      	str	r3, [r7, #12]
  const uint32_t a = 214013;
 8000760:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <_Z3rngv+0x3c>)
 8000762:	60bb      	str	r3, [r7, #8]
  const uint32_t c = 2531011;
 8000764:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <_Z3rngv+0x40>)
 8000766:	607b      	str	r3, [r7, #4]
  seed = (a * seed + c) % m;
 8000768:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <_Z3rngv+0x44>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a08      	ldr	r2, [pc, #32]	; (8000790 <_Z3rngv+0x3c>)
 800076e:	4353      	muls	r3, r2
 8000770:	4a08      	ldr	r2, [pc, #32]	; (8000794 <_Z3rngv+0x40>)
 8000772:	4694      	mov	ip, r2
 8000774:	4463      	add	r3, ip
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	085a      	lsrs	r2, r3, #1
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <_Z3rngv+0x44>)
 800077c:	601a      	str	r2, [r3, #0]
  return seed >> 16;
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <_Z3rngv+0x44>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	0c1b      	lsrs	r3, r3, #16
 8000784:	b29b      	uxth	r3, r3
}
 8000786:	0018      	movs	r0, r3
 8000788:	46bd      	mov	sp, r7
 800078a:	b004      	add	sp, #16
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	000343fd 	.word	0x000343fd
 8000794:	00269ec3 	.word	0x00269ec3
 8000798:	200000a8 	.word	0x200000a8

0800079c <_Z7rngSeedm>:

void rngSeed(const uint32_t newSeed) { seed = newSeed; }
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	4b03      	ldr	r3, [pc, #12]	; (80007b4 <_Z7rngSeedm+0x18>)
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b002      	add	sp, #8
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	200000a8 	.word	0x200000a8

080007b8 <_Z4rngNh>:

// returns 0 <= x < max where max < 256
uint8_t rngN(const uint8_t max) { return rng() % max; }
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	0002      	movs	r2, r0
 80007c0:	1dfb      	adds	r3, r7, #7
 80007c2:	701a      	strb	r2, [r3, #0]
 80007c4:	f7ff ffc6 	bl	8000754 <_Z3rngv>
 80007c8:	0003      	movs	r3, r0
 80007ca:	001a      	movs	r2, r3
 80007cc:	1dfb      	adds	r3, r7, #7
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	0019      	movs	r1, r3
 80007d2:	0010      	movs	r0, r2
 80007d4:	f7ff fe1a 	bl	800040c <__aeabi_idivmod>
 80007d8:	000b      	movs	r3, r1
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	0018      	movs	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	b002      	add	sp, #8
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <_ZNK9SX1280Hal9BusyDelayEm>:
  void RXenable();
  void TXRXdisable();

  static void (*RadioIsrCallback)(); // function pointer for callback

  void BusyDelay(uint32_t duration) const { (void)duration; };
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b002      	add	sp, #8
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <_ZN12SX1280DriverC1Ev>:
#define RX_TIMEOUT_PERIOD_BASE SX1280_RADIO_TICK_SIZE_0015_US
#define RX_TIMEOUT_PERIOD_BASE_NANOS 15625

void nullCallback(void) {}

SX1280Driver::SX1280Driver() { instance = this; }
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2201      	movs	r2, #1
 8000804:	4252      	negs	r2, r2
 8000806:	861a      	strh	r2, [r3, #48]	; 0x30
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	223c      	movs	r2, #60	; 0x3c
 800080c:	2100      	movs	r1, #0
 800080e:	5499      	strb	r1, [r3, r2]
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <_ZN12SX1280DriverC1Ev+0x28>)
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	0018      	movs	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	b002      	add	sp, #8
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200000b0 	.word	0x200000b0

08000824 <_ZN12SX1280Driver5BeginEv>:
  RXdoneCallback = &nullCallback;
  currFreq = 2400000000;
  PayloadLength = 8; // Dummy default value which is overwritten during setup.
}

bool SX1280Driver::Begin() {
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b087      	sub	sp, #28
 8000828:	af02      	add	r7, sp, #8
 800082a:	6078      	str	r0, [r7, #4]
  hal.init();
 800082c:	4b41      	ldr	r3, [pc, #260]	; (8000934 <_ZN12SX1280Driver5BeginEv+0x110>)
 800082e:	0018      	movs	r0, r3
 8000830:	f000 fd7e 	bl	8001330 <_ZN9SX1280Hal4initEv>
  // hal.RadioIsrCallback = &SX1280Driver::IsrCallback;

  hal.reset();
 8000834:	4b3f      	ldr	r3, [pc, #252]	; (8000934 <_ZN12SX1280Driver5BeginEv+0x110>)
 8000836:	0018      	movs	r0, r3
 8000838:	f000 fd82 	bl	8001340 <_ZN9SX1280Hal5resetEv>
  // DBGLN("SX1280 Begin");
  HAL_Delay(100);
 800083c:	2064      	movs	r0, #100	; 0x64
 800083e:	f003 fdb3 	bl	80043a8 <HAL_Delay>
  uint16_t firmwareRev =
      (((hal.ReadRegister(REG_LR_FIRMWARE_VERSION_MSB)) << 8) |
 8000842:	2354      	movs	r3, #84	; 0x54
 8000844:	33ff      	adds	r3, #255	; 0xff
 8000846:	001a      	movs	r2, r3
 8000848:	4b3a      	ldr	r3, [pc, #232]	; (8000934 <_ZN12SX1280Driver5BeginEv+0x110>)
 800084a:	0011      	movs	r1, r2
 800084c:	0018      	movs	r0, r3
 800084e:	f000 ff23 	bl	8001698 <_ZN9SX1280Hal12ReadRegisterEt>
 8000852:	0003      	movs	r3, r0
 8000854:	021b      	lsls	r3, r3, #8
 8000856:	b21c      	sxth	r4, r3
       (hal.ReadRegister(REG_LR_FIRMWARE_VERSION_MSB + 1)));
 8000858:	23aa      	movs	r3, #170	; 0xaa
 800085a:	005a      	lsls	r2, r3, #1
 800085c:	4b35      	ldr	r3, [pc, #212]	; (8000934 <_ZN12SX1280Driver5BeginEv+0x110>)
 800085e:	0011      	movs	r1, r2
 8000860:	0018      	movs	r0, r3
 8000862:	f000 ff19 	bl	8001698 <_ZN9SX1280Hal12ReadRegisterEt>
 8000866:	0003      	movs	r3, r0
 8000868:	b21b      	sxth	r3, r3
      (((hal.ReadRegister(REG_LR_FIRMWARE_VERSION_MSB)) << 8) |
 800086a:	4323      	orrs	r3, r4
 800086c:	b21a      	sxth	r2, r3
       (hal.ReadRegister(REG_LR_FIRMWARE_VERSION_MSB + 1)));
 800086e:	210e      	movs	r1, #14
 8000870:	187b      	adds	r3, r7, r1
 8000872:	801a      	strh	r2, [r3, #0]
  // DBGLN("Read Vers: %d", firmwareRev);
  if ((firmwareRev == 0) || (firmwareRev == 65535)) {
 8000874:	000a      	movs	r2, r1
 8000876:	18bb      	adds	r3, r7, r2
 8000878:	881b      	ldrh	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d004      	beq.n	8000888 <_ZN12SX1280Driver5BeginEv+0x64>
 800087e:	18bb      	adds	r3, r7, r2
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	4a2d      	ldr	r2, [pc, #180]	; (8000938 <_ZN12SX1280Driver5BeginEv+0x114>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d101      	bne.n	800088c <_ZN12SX1280Driver5BeginEv+0x68>
    // SPI communication failed, just return without configuration
    return false;
 8000888:	2300      	movs	r3, #0
 800088a:	e04e      	b.n	800092a <_ZN12SX1280Driver5BeginEv+0x106>
  }

  SetMode(SX1280_MODE_STDBY_RC); // Put in STDBY_RC mode
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2102      	movs	r1, #2
 8000890:	0018      	movs	r0, r3
 8000892:	f000 f945 	bl	8000b20 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>
  hal.WriteCommand(SX1280_RADIO_SET_PACKETTYPE,
 8000896:	4b27      	ldr	r3, [pc, #156]	; (8000934 <_ZN12SX1280Driver5BeginEv+0x110>)
 8000898:	2201      	movs	r2, #1
 800089a:	218a      	movs	r1, #138	; 0x8a
 800089c:	0018      	movs	r0, r3
 800089e:	f000 fd57 	bl	8001350 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
                   SX1280_PACKET_TYPE_LORA); // Set packet type to LoRa
  ConfigModParamsLoRa(SX1280_LORA_BW_0800, SX1280_LORA_SF6,
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	2303      	movs	r3, #3
 80008a6:	2260      	movs	r2, #96	; 0x60
 80008a8:	2118      	movs	r1, #24
 80008aa:	f000 f9b9 	bl	8000c20 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh>
                      SX1280_LORA_CR_4_7); // Configure Modulation Params
  hal.WriteCommand(SX1280_RADIO_SET_AUTOFS, 0x01); // Enable auto FS
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <_ZN12SX1280Driver5BeginEv+0x110>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	219e      	movs	r1, #158	; 0x9e
 80008b4:	0018      	movs	r0, r3
 80008b6:	f000 fd4b 	bl	8001350 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
  hal.WriteRegister(
      0x0891,
      (hal.ReadRegister(0x0891) |
 80008ba:	4a20      	ldr	r2, [pc, #128]	; (800093c <_ZN12SX1280Driver5BeginEv+0x118>)
 80008bc:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <_ZN12SX1280Driver5BeginEv+0x110>)
 80008be:	0011      	movs	r1, r2
 80008c0:	0018      	movs	r0, r3
 80008c2:	f000 fee9 	bl	8001698 <_ZN9SX1280Hal12ReadRegisterEt>
 80008c6:	0003      	movs	r3, r0
 80008c8:	001a      	movs	r2, r3
  hal.WriteRegister(
 80008ca:	2340      	movs	r3, #64	; 0x40
 80008cc:	425b      	negs	r3, r3
 80008ce:	4313      	orrs	r3, r2
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	491a      	ldr	r1, [pc, #104]	; (800093c <_ZN12SX1280Driver5BeginEv+0x118>)
 80008d4:	4b17      	ldr	r3, [pc, #92]	; (8000934 <_ZN12SX1280Driver5BeginEv+0x110>)
 80008d6:	0018      	movs	r0, r3
 80008d8:	f000 fe76 	bl	80015c8 <_ZN9SX1280Hal13WriteRegisterEth>
       0xC0)); // default is low power mode, switch to high sensitivity instead
  SetPacketParamsLoRa(12, SX1280_LORA_PACKET_IMPLICIT, 8, SX1280_LORA_CRC_OFF,
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	2340      	movs	r3, #64	; 0x40
 80008e0:	9301      	str	r3, [sp, #4]
 80008e2:	2300      	movs	r3, #0
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	2308      	movs	r3, #8
 80008e8:	2280      	movs	r2, #128	; 0x80
 80008ea:	210c      	movs	r1, #12
 80008ec:	f000 f9e4 	bl	8000cb8 <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th>
                      SX1280_LORA_IQ_NORMAL); // default params
  SetFrequencyReg(currFreq);                  // Set Freq
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	0011      	movs	r1, r2
 80008f8:	0018      	movs	r0, r3
 80008fa:	f000 fadb 	bl	8000eb4 <_ZN12SX1280Driver15SetFrequencyRegEm>
  SetFIFOaddr(0x00, 0x00);                    // Config FIFO addr
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2200      	movs	r2, #0
 8000902:	2100      	movs	r1, #0
 8000904:	0018      	movs	r0, r3
 8000906:	f000 fb05 	bl	8000f14 <_ZN12SX1280Driver11SetFIFOaddrEhh>
  SetDioIrqParams(
 800090a:	490b      	ldr	r1, [pc, #44]	; (8000938 <_ZN12SX1280Driver5BeginEv+0x114>)
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	2300      	movs	r3, #0
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	2300      	movs	r3, #0
 8000914:	2203      	movs	r2, #3
 8000916:	f000 fb1f 	bl	8000f58 <_ZN12SX1280Driver15SetDioIrqParamsEtttt>
      SX1280_IRQ_RADIO_ALL,
      SX1280_IRQ_TX_DONE |
          SX1280_IRQ_RX_DONE); // set IRQ to both RXdone/TXdone on DIO1
  instance->ClearIrqStatus(SX1280_IRQ_RADIO_ALL);
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <_ZN12SX1280Driver5BeginEv+0x11c>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a06      	ldr	r2, [pc, #24]	; (8000938 <_ZN12SX1280Driver5BeginEv+0x114>)
 8000920:	0011      	movs	r1, r2
 8000922:	0018      	movs	r0, r3
 8000924:	f000 fb86 	bl	8001034 <_ZN12SX1280Driver14ClearIrqStatusEt>
  return true;
 8000928:	2301      	movs	r3, #1
}
 800092a:	0018      	movs	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	b005      	add	sp, #20
 8000930:	bd90      	pop	{r4, r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	200000ac 	.word	0x200000ac
 8000938:	0000ffff 	.word	0x0000ffff
 800093c:	00000891 	.word	0x00000891
 8000940:	200000b0 	.word	0x200000b0

08000944 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth>:

void SX1280Driver::Config(uint8_t bw, uint8_t sf, uint8_t cr, uint32_t freq,
                          uint8_t PreambleLength, bool InvertIQ,
                          uint8_t _PayloadLength, uint32_t interval,
                          uint32_t flrcSyncWord, uint16_t flrcCrcSeed,
                          uint8_t flrc) {
 8000944:	b5b0      	push	{r4, r5, r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af04      	add	r7, sp, #16
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	000c      	movs	r4, r1
 800094e:	0010      	movs	r0, r2
 8000950:	0019      	movs	r1, r3
 8000952:	1cfb      	adds	r3, r7, #3
 8000954:	1c22      	adds	r2, r4, #0
 8000956:	701a      	strb	r2, [r3, #0]
 8000958:	1cbb      	adds	r3, r7, #2
 800095a:	1c02      	adds	r2, r0, #0
 800095c:	701a      	strb	r2, [r3, #0]
 800095e:	1c7b      	adds	r3, r7, #1
 8000960:	1c0a      	adds	r2, r1, #0
 8000962:	701a      	strb	r2, [r3, #0]
  uint8_t irqs = SX1280_IRQ_TX_DONE | SX1280_IRQ_RX_DONE;
 8000964:	230f      	movs	r3, #15
 8000966:	18fb      	adds	r3, r7, r3
 8000968:	2203      	movs	r2, #3
 800096a:	701a      	strb	r2, [r3, #0]
  uint8_t const mode =
      (flrc) ? SX1280_PACKET_TYPE_FLRC : SX1280_PACKET_TYPE_LORA;
 800096c:	233c      	movs	r3, #60	; 0x3c
 800096e:	18fb      	adds	r3, r7, r3
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0x36>
 8000976:	2203      	movs	r2, #3
 8000978:	e000      	b.n	800097c <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0x38>
 800097a:	2201      	movs	r2, #1
  uint8_t const mode =
 800097c:	240e      	movs	r4, #14
 800097e:	193b      	adds	r3, r7, r4
 8000980:	701a      	strb	r2, [r3, #0]

  PayloadLength = _PayloadLength;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	252c      	movs	r5, #44	; 0x2c
 8000986:	197a      	adds	r2, r7, r5
 8000988:	2138      	movs	r1, #56	; 0x38
 800098a:	7812      	ldrb	r2, [r2, #0]
 800098c:	545a      	strb	r2, [r3, r1]
  IQinverted = InvertIQ;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2228      	movs	r2, #40	; 0x28
 8000992:	18ba      	adds	r2, r7, r2
 8000994:	2139      	movs	r1, #57	; 0x39
 8000996:	7812      	ldrb	r2, [r2, #0]
 8000998:	545a      	strb	r2, [r3, r1]
  SetMode(SX1280_MODE_STDBY_XOSC);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2103      	movs	r1, #3
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 f8be 	bl	8000b20 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>

  hal.WriteCommand(SX1280_RADIO_SET_PACKETTYPE, mode);
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	781a      	ldrb	r2, [r3, #0]
 80009a8:	4b31      	ldr	r3, [pc, #196]	; (8000a70 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0x12c>)
 80009aa:	218a      	movs	r1, #138	; 0x8a
 80009ac:	0018      	movs	r0, r3
 80009ae:	f000 fccf 	bl	8001350 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
  if (mode == SX1280_PACKET_TYPE_FLRC) {
 80009b2:	193b      	adds	r3, r7, r4
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b03      	cmp	r3, #3
 80009b8:	d123      	bne.n	8000a02 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0xbe>
    // DBGLN("Config FLRC");
    ConfigModParamsFLRC(bw, cr, sf);
 80009ba:	1cbb      	adds	r3, r7, #2
 80009bc:	781c      	ldrb	r4, [r3, #0]
 80009be:	1c7b      	adds	r3, r7, #1
 80009c0:	781a      	ldrb	r2, [r3, #0]
 80009c2:	1cfb      	adds	r3, r7, #3
 80009c4:	7819      	ldrb	r1, [r3, #0]
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	0023      	movs	r3, r4
 80009ca:	f000 f9b5 	bl	8000d38 <_ZN12SX1280Driver19ConfigModParamsFLRCEhhh>
    SetPacketParamsFLRC(SX1280_FLRC_PACKET_FIXED_LENGTH, /*crc=*/1,
 80009ce:	2324      	movs	r3, #36	; 0x24
 80009d0:	18fb      	adds	r3, r7, r3
 80009d2:	781a      	ldrb	r2, [r3, #0]
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	2338      	movs	r3, #56	; 0x38
 80009d8:	18fb      	adds	r3, r7, r3
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	9302      	str	r3, [sp, #8]
 80009de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e0:	9301      	str	r3, [sp, #4]
 80009e2:	197b      	adds	r3, r7, r5
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	0013      	movs	r3, r2
 80009ea:	2201      	movs	r2, #1
 80009ec:	2100      	movs	r1, #0
 80009ee:	f000 f9cd 	bl	8000d8c <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt>
                        PreambleLength, _PayloadLength, flrcSyncWord,
                        flrcCrcSeed);
    irqs |= SX1280_IRQ_CRC_ERROR;
 80009f2:	220f      	movs	r2, #15
 80009f4:	18bb      	adds	r3, r7, r2
 80009f6:	18ba      	adds	r2, r7, r2
 80009f8:	7812      	ldrb	r2, [r2, #0]
 80009fa:	2140      	movs	r1, #64	; 0x40
 80009fc:	430a      	orrs	r2, r1
 80009fe:	701a      	strb	r2, [r3, #0]
 8000a00:	e01a      	b.n	8000a38 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0xf4>
  } else {
    // DBGLN("Config LoRa");
    ConfigModParamsLoRa(bw, sf, cr);
 8000a02:	1c7b      	adds	r3, r7, #1
 8000a04:	781c      	ldrb	r4, [r3, #0]
 8000a06:	1cbb      	adds	r3, r7, #2
 8000a08:	781a      	ldrb	r2, [r3, #0]
 8000a0a:	1cfb      	adds	r3, r7, #3
 8000a0c:	7819      	ldrb	r1, [r3, #0]
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	0023      	movs	r3, r4
 8000a12:	f000 f905 	bl	8000c20 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh>
    SetPacketParamsLoRa(PreambleLength, SX1280_LORA_PACKET_IMPLICIT,
 8000a16:	2328      	movs	r3, #40	; 0x28
 8000a18:	18fb      	adds	r3, r7, r3
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	222c      	movs	r2, #44	; 0x2c
 8000a1e:	18ba      	adds	r2, r7, r2
 8000a20:	7814      	ldrb	r4, [r2, #0]
 8000a22:	2224      	movs	r2, #36	; 0x24
 8000a24:	18ba      	adds	r2, r7, r2
 8000a26:	7811      	ldrb	r1, [r2, #0]
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	9301      	str	r3, [sp, #4]
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	0023      	movs	r3, r4
 8000a32:	2280      	movs	r2, #128	; 0x80
 8000a34:	f000 f940 	bl	8000cb8 <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th>
                        _PayloadLength, SX1280_LORA_CRC_OFF, InvertIQ);
  }
  SetFrequencyReg(freq);
 8000a38:	6a3a      	ldr	r2, [r7, #32]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	0011      	movs	r1, r2
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f000 fa38 	bl	8000eb4 <_ZN12SX1280Driver15SetFrequencyRegEm>
  SetDioIrqParams(SX1280_IRQ_RADIO_ALL, irqs);
 8000a44:	230f      	movs	r3, #15
 8000a46:	18fb      	adds	r3, r7, r3
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	4909      	ldr	r1, [pc, #36]	; (8000a74 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0x130>)
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	2300      	movs	r3, #0
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	2300      	movs	r3, #0
 8000a56:	f000 fa7f 	bl	8000f58 <_ZN12SX1280Driver15SetDioIrqParamsEtttt>
  SetRxTimeoutUs(interval);
 8000a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	0011      	movs	r1, r2
 8000a60:	0018      	movs	r0, r3
 8000a62:	f000 f809 	bl	8000a78 <_ZN12SX1280Driver14SetRxTimeoutUsEm>
}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b004      	add	sp, #16
 8000a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	200000ac 	.word	0x200000ac
 8000a74:	0000ffff 	.word	0x0000ffff

08000a78 <_ZN12SX1280Driver14SetRxTimeoutUsEm>:

void SX1280Driver::SetRxTimeoutUs(uint32_t interval) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
  if (interval) {
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d00f      	beq.n	8000aa8 <_ZN12SX1280Driver14SetRxTimeoutUsEm+0x30>
    timeout =
        interval * 1000 / RX_TIMEOUT_PERIOD_BASE_NANOS; // number of periods for
 8000a88:	683a      	ldr	r2, [r7, #0]
 8000a8a:	0013      	movs	r3, r2
 8000a8c:	015b      	lsls	r3, r3, #5
 8000a8e:	1a9b      	subs	r3, r3, r2
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	189b      	adds	r3, r3, r2
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	4908      	ldr	r1, [pc, #32]	; (8000ab8 <_ZN12SX1280Driver14SetRxTimeoutUsEm+0x40>)
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f7ff fb47 	bl	800012c <__udivsi3>
 8000a9e:	0003      	movs	r3, r0
    timeout =
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	861a      	strh	r2, [r3, #48]	; 0x30
                                                        // the SX1280 to timeout
  } else {
    timeout = 0xFFFF; // no timeout, continuous mode
  }
}
 8000aa6:	e003      	b.n	8000ab0 <_ZN12SX1280Driver14SetRxTimeoutUsEm+0x38>
    timeout = 0xFFFF; // no timeout, continuous mode
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4252      	negs	r2, r2
 8000aae:	861a      	strh	r2, [r3, #48]	; 0x30
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b002      	add	sp, #8
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	00003d09 	.word	0x00003d09

08000abc <_ZN12SX1280Driver14SetOutputPowerEa>:

void SX1280Driver::SetOutputPower(int8_t power) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	000a      	movs	r2, r1
 8000ac6:	1cfb      	adds	r3, r7, #3
 8000ac8:	701a      	strb	r2, [r3, #0]
  if (power < -18)
 8000aca:	1cfb      	adds	r3, r7, #3
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	b25b      	sxtb	r3, r3
 8000ad0:	3312      	adds	r3, #18
 8000ad2:	da03      	bge.n	8000adc <_ZN12SX1280Driver14SetOutputPowerEa+0x20>
    power = -18;
 8000ad4:	1cfb      	adds	r3, r7, #3
 8000ad6:	22ee      	movs	r2, #238	; 0xee
 8000ad8:	701a      	strb	r2, [r3, #0]
 8000ada:	e007      	b.n	8000aec <_ZN12SX1280Driver14SetOutputPowerEa+0x30>
  else if (13 < power)
 8000adc:	1cfb      	adds	r3, r7, #3
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b25b      	sxtb	r3, r3
 8000ae2:	2b0d      	cmp	r3, #13
 8000ae4:	dd02      	ble.n	8000aec <_ZN12SX1280Driver14SetOutputPowerEa+0x30>
    power = 13;
 8000ae6:	1cfb      	adds	r3, r7, #3
 8000ae8:	220d      	movs	r2, #13
 8000aea:	701a      	strb	r2, [r3, #0]
  uint8_t buf[2] = {(uint8_t)(power + 18), (uint8_t)SX1280_RADIO_RAMP_04_US};
 8000aec:	210c      	movs	r1, #12
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2200      	movs	r2, #0
 8000af2:	801a      	strh	r2, [r3, #0]
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	2220      	movs	r2, #32
 8000af8:	705a      	strb	r2, [r3, #1]
 8000afa:	1cfb      	adds	r3, r7, #3
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	3312      	adds	r3, #18
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	701a      	strb	r2, [r3, #0]
  hal.WriteCommand(SX1280_RADIO_SET_TXPARAMS, buf, sizeof(buf));
 8000b06:	187a      	adds	r2, r7, r1
 8000b08:	4804      	ldr	r0, [pc, #16]	; (8000b1c <_ZN12SX1280Driver14SetOutputPowerEa+0x60>)
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	218e      	movs	r1, #142	; 0x8e
 8000b0e:	f000 fc59 	bl	80013c4 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
  // DBGLN("SetPower: %d", buf[0]);
  return;
 8000b12:	46c0      	nop			; (mov r8, r8)
}
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b004      	add	sp, #16
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	200000ac 	.word	0x200000ac

08000b20 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>:

void SX1280Driver::SetMode(SX1280_RadioOperatingModes_t OPmode) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	000a      	movs	r2, r1
 8000b2a:	1cfb      	adds	r3, r7, #3
 8000b2c:	701a      	strb	r2, [r3, #0]
  if (OPmode == currOpmode) {
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	223c      	movs	r2, #60	; 0x3c
 8000b32:	5c9b      	ldrb	r3, [r3, r2]
 8000b34:	1cfa      	adds	r2, r7, #3
 8000b36:	7812      	ldrb	r2, [r2, #0]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d066      	beq.n	8000c0a <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xea>
    return;
  }

  uint8_t buf[3];
  uint32_t switchDelay = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]

  switch (OPmode) {
 8000b40:	1cfb      	adds	r3, r7, #3
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b07      	cmp	r3, #7
 8000b46:	d851      	bhi.n	8000bec <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xcc>
 8000b48:	009a      	lsls	r2, r3, #2
 8000b4a:	4b32      	ldr	r3, [pc, #200]	; (8000c14 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf4>)
 8000b4c:	18d3      	adds	r3, r2, r3
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	469f      	mov	pc, r3

  case SX1280_MODE_SLEEP:
    hal.WriteCommand(SX1280_RADIO_SET_SLEEP, 0x01);
 8000b52:	4b31      	ldr	r3, [pc, #196]	; (8000c18 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	2184      	movs	r1, #132	; 0x84
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f000 fbf9 	bl	8001350 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
    break;
 8000b5e:	e048      	b.n	8000bf2 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd2>

  case SX1280_MODE_CALIBRATION:
    break;

  case SX1280_MODE_STDBY_RC:
    hal.WriteCommand(SX1280_RADIO_SET_STANDBY, SX1280_STDBY_RC);
 8000b60:	4b2d      	ldr	r3, [pc, #180]	; (8000c18 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	2180      	movs	r1, #128	; 0x80
 8000b66:	0018      	movs	r0, r3
 8000b68:	f000 fbf2 	bl	8001350 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
    switchDelay = 1500;
 8000b6c:	4b2b      	ldr	r3, [pc, #172]	; (8000c1c <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xfc>)
 8000b6e:	60fb      	str	r3, [r7, #12]
    break;
 8000b70:	e03f      	b.n	8000bf2 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd2>

  case SX1280_MODE_STDBY_XOSC:
    hal.WriteCommand(SX1280_RADIO_SET_STANDBY, SX1280_STDBY_XOSC);
 8000b72:	4b29      	ldr	r3, [pc, #164]	; (8000c18 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	2180      	movs	r1, #128	; 0x80
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f000 fbe9 	bl	8001350 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
    switchDelay = 50;
 8000b7e:	2332      	movs	r3, #50	; 0x32
 8000b80:	60fb      	str	r3, [r7, #12]
    break;
 8000b82:	e036      	b.n	8000bf2 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd2>

  case SX1280_MODE_FS:
    hal.WriteCommand(SX1280_RADIO_SET_FS, 0x00);
 8000b84:	4b24      	ldr	r3, [pc, #144]	; (8000c18 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	21c1      	movs	r1, #193	; 0xc1
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 fbe0 	bl	8001350 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
    switchDelay = 70;
 8000b90:	2346      	movs	r3, #70	; 0x46
 8000b92:	60fb      	str	r3, [r7, #12]
    break;
 8000b94:	e02d      	b.n	8000bf2 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd2>

  case SX1280_MODE_RX:
    buf[0] = RX_TIMEOUT_PERIOD_BASE;
 8000b96:	2108      	movs	r1, #8
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	701a      	strb	r2, [r3, #0]
    buf[1] = timeout >> 8;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000ba2:	121b      	asrs	r3, r3, #8
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	705a      	strb	r2, [r3, #1]
    buf[2] = timeout & 0xFF;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	709a      	strb	r2, [r3, #2]
    hal.WriteCommand(SX1280_RADIO_SET_RX, buf, sizeof(buf));
 8000bb4:	187a      	adds	r2, r7, r1
 8000bb6:	4818      	ldr	r0, [pc, #96]	; (8000c18 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8000bb8:	2303      	movs	r3, #3
 8000bba:	2182      	movs	r1, #130	; 0x82
 8000bbc:	f000 fc02 	bl	80013c4 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
    switchDelay = 100;
 8000bc0:	2364      	movs	r3, #100	; 0x64
 8000bc2:	60fb      	str	r3, [r7, #12]
    break;
 8000bc4:	e015      	b.n	8000bf2 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd2>

  case SX1280_MODE_TX:
    // uses timeout Time-out duration = periodBase * periodBaseCount
    buf[0] = RX_TIMEOUT_PERIOD_BASE;
 8000bc6:	2108      	movs	r1, #8
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
    buf[1] = 0xFF; // no timeout set for now
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	22ff      	movs	r2, #255	; 0xff
 8000bd2:	705a      	strb	r2, [r3, #1]
    buf[2] = 0xFF; // TODO dynamic timeout based on expected onairtime
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	22ff      	movs	r2, #255	; 0xff
 8000bd8:	709a      	strb	r2, [r3, #2]
    hal.WriteCommand(SX1280_RADIO_SET_TX, buf, sizeof(buf));
 8000bda:	187a      	adds	r2, r7, r1
 8000bdc:	480e      	ldr	r0, [pc, #56]	; (8000c18 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8000bde:	2303      	movs	r3, #3
 8000be0:	2183      	movs	r1, #131	; 0x83
 8000be2:	f000 fbef 	bl	80013c4 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
    switchDelay = 100;
 8000be6:	2364      	movs	r3, #100	; 0x64
 8000be8:	60fb      	str	r3, [r7, #12]
    break;
 8000bea:	e002      	b.n	8000bf2 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd2>

  case SX1280_MODE_CAD:
    break;

  default:
    break;
 8000bec:	46c0      	nop			; (mov r8, r8)
 8000bee:	e000      	b.n	8000bf2 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd2>
    break;
 8000bf0:	46c0      	nop			; (mov r8, r8)
  }
  hal.BusyDelay(switchDelay);
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8000bf6:	0011      	movs	r1, r2
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f7ff fdf3 	bl	80007e4 <_ZNK9SX1280Hal9BusyDelayEm>

  currOpmode = OPmode;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	1cfa      	adds	r2, r7, #3
 8000c02:	213c      	movs	r1, #60	; 0x3c
 8000c04:	7812      	ldrb	r2, [r2, #0]
 8000c06:	545a      	strb	r2, [r3, r1]
 8000c08:	e000      	b.n	8000c0c <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xec>
    return;
 8000c0a:	46c0      	nop			; (mov r8, r8)
}
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	b004      	add	sp, #16
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	0800a9f0 	.word	0x0800a9f0
 8000c18:	200000ac 	.word	0x200000ac
 8000c1c:	000005dc 	.word	0x000005dc

08000c20 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh>:

void SX1280Driver::ConfigModParamsLoRa(uint8_t bw, uint8_t sf, uint8_t cr) {
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	000c      	movs	r4, r1
 8000c2a:	0010      	movs	r0, r2
 8000c2c:	0019      	movs	r1, r3
 8000c2e:	1cfb      	adds	r3, r7, #3
 8000c30:	1c22      	adds	r2, r4, #0
 8000c32:	701a      	strb	r2, [r3, #0]
 8000c34:	1cbb      	adds	r3, r7, #2
 8000c36:	1c02      	adds	r2, r0, #0
 8000c38:	701a      	strb	r2, [r3, #0]
 8000c3a:	1c7b      	adds	r3, r7, #1
 8000c3c:	1c0a      	adds	r2, r1, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
  // Care must therefore be taken to ensure that modulation parameters are set
  // using the command SetModulationParam() only after defining the packet type
  // SetPacketType() to be used

  uint8_t rfparams[3] = {sf, bw, cr};
 8000c40:	210c      	movs	r1, #12
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	1cba      	adds	r2, r7, #2
 8000c46:	7812      	ldrb	r2, [r2, #0]
 8000c48:	701a      	strb	r2, [r3, #0]
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	1cfa      	adds	r2, r7, #3
 8000c4e:	7812      	ldrb	r2, [r2, #0]
 8000c50:	705a      	strb	r2, [r3, #1]
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	1c7a      	adds	r2, r7, #1
 8000c56:	7812      	ldrb	r2, [r2, #0]
 8000c58:	709a      	strb	r2, [r3, #2]

  hal.WriteCommand(SX1280_RADIO_SET_MODULATIONPARAMS, rfparams,
 8000c5a:	187a      	adds	r2, r7, r1
 8000c5c:	4814      	ldr	r0, [pc, #80]	; (8000cb0 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x90>)
 8000c5e:	2303      	movs	r3, #3
 8000c60:	218b      	movs	r1, #139	; 0x8b
 8000c62:	f000 fbaf 	bl	80013c4 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
                   sizeof(rfparams));

  switch (sf) {
 8000c66:	1cbb      	adds	r3, r7, #2
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b80      	cmp	r3, #128	; 0x80
 8000c6c:	d00e      	beq.n	8000c8c <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x6c>
 8000c6e:	dc14      	bgt.n	8000c9a <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x7a>
 8000c70:	2b70      	cmp	r3, #112	; 0x70
 8000c72:	d00b      	beq.n	8000c8c <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x6c>
 8000c74:	dc11      	bgt.n	8000c9a <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x7a>
 8000c76:	2b50      	cmp	r3, #80	; 0x50
 8000c78:	d001      	beq.n	8000c7e <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x5e>
 8000c7a:	2b60      	cmp	r3, #96	; 0x60
 8000c7c:	d10d      	bne.n	8000c9a <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x7a>
  case SX1280_LORA_SF5:
  case SX1280_LORA_SF6:
    hal.WriteRegister(0x925, 0x1E); // for SF5 or SF6
 8000c7e:	490d      	ldr	r1, [pc, #52]	; (8000cb4 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x94>)
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x90>)
 8000c82:	221e      	movs	r2, #30
 8000c84:	0018      	movs	r0, r3
 8000c86:	f000 fc9f 	bl	80015c8 <_ZN9SX1280Hal13WriteRegisterEth>
    break;
 8000c8a:	e00d      	b.n	8000ca8 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x88>
  case SX1280_LORA_SF7:
  case SX1280_LORA_SF8:
    hal.WriteRegister(0x925, 0x37); // for SF7 or SF8
 8000c8c:	4909      	ldr	r1, [pc, #36]	; (8000cb4 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x94>)
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x90>)
 8000c90:	2237      	movs	r2, #55	; 0x37
 8000c92:	0018      	movs	r0, r3
 8000c94:	f000 fc98 	bl	80015c8 <_ZN9SX1280Hal13WriteRegisterEth>
    break;
 8000c98:	e006      	b.n	8000ca8 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x88>
  default:
    hal.WriteRegister(0x925, 0x32); // for SF9, SF10, SF11, SF12
 8000c9a:	4906      	ldr	r1, [pc, #24]	; (8000cb4 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x94>)
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x90>)
 8000c9e:	2232      	movs	r2, #50	; 0x32
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f000 fc91 	bl	80015c8 <_ZN9SX1280Hal13WriteRegisterEth>
  }
}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46c0      	nop			; (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b005      	add	sp, #20
 8000cae:	bd90      	pop	{r4, r7, pc}
 8000cb0:	200000ac 	.word	0x200000ac
 8000cb4:	00000925 	.word	0x00000925

08000cb8 <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th>:

void SX1280Driver::SetPacketParamsLoRa(
    uint8_t PreambleLength, SX1280_RadioLoRaPacketLengthsModes_t HeaderType,
    uint8_t PayloadLength, SX1280_RadioLoRaCrcModes_t crc, uint8_t InvertIQ) {
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	000c      	movs	r4, r1
 8000cc2:	0010      	movs	r0, r2
 8000cc4:	0019      	movs	r1, r3
 8000cc6:	1cfb      	adds	r3, r7, #3
 8000cc8:	1c22      	adds	r2, r4, #0
 8000cca:	701a      	strb	r2, [r3, #0]
 8000ccc:	1cbb      	adds	r3, r7, #2
 8000cce:	1c02      	adds	r2, r0, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
 8000cd2:	1c7b      	adds	r3, r7, #1
 8000cd4:	1c0a      	adds	r2, r1, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
  uint8_t buf[7];

  buf[0] = PreambleLength;
 8000cd8:	2108      	movs	r1, #8
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	1cfa      	adds	r2, r7, #3
 8000cde:	7812      	ldrb	r2, [r2, #0]
 8000ce0:	701a      	strb	r2, [r3, #0]
  buf[1] = HeaderType;
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	1cba      	adds	r2, r7, #2
 8000ce6:	7812      	ldrb	r2, [r2, #0]
 8000ce8:	705a      	strb	r2, [r3, #1]
  buf[2] = PayloadLength;
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	1c7a      	adds	r2, r7, #1
 8000cee:	7812      	ldrb	r2, [r2, #0]
 8000cf0:	709a      	strb	r2, [r3, #2]
  buf[3] = crc;
 8000cf2:	187a      	adds	r2, r7, r1
 8000cf4:	2320      	movs	r3, #32
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	70d3      	strb	r3, [r2, #3]
  buf[4] = InvertIQ ? SX1280_LORA_IQ_INVERTED : SX1280_LORA_IQ_NORMAL;
 8000cfc:	2324      	movs	r3, #36	; 0x24
 8000cfe:	18fb      	adds	r3, r7, r3
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th+0x52>
 8000d06:	2200      	movs	r2, #0
 8000d08:	e000      	b.n	8000d0c <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th+0x54>
 8000d0a:	2240      	movs	r2, #64	; 0x40
 8000d0c:	2108      	movs	r1, #8
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	711a      	strb	r2, [r3, #4]
  buf[5] = 0x00;
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	2200      	movs	r2, #0
 8000d16:	715a      	strb	r2, [r3, #5]
  buf[6] = 0x00;
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	719a      	strb	r2, [r3, #6]

  hal.WriteCommand(SX1280_RADIO_SET_PACKETPARAMS, buf, sizeof(buf));
 8000d1e:	187a      	adds	r2, r7, r1
 8000d20:	4804      	ldr	r0, [pc, #16]	; (8000d34 <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th+0x7c>)
 8000d22:	2307      	movs	r3, #7
 8000d24:	218c      	movs	r1, #140	; 0x8c
 8000d26:	f000 fb4d 	bl	80013c4 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b005      	add	sp, #20
 8000d30:	bd90      	pop	{r4, r7, pc}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	200000ac 	.word	0x200000ac

08000d38 <_ZN12SX1280Driver19ConfigModParamsFLRCEhhh>:

void SX1280Driver::ConfigModParamsFLRC(uint8_t bw, uint8_t cr, uint8_t bt) {
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	000c      	movs	r4, r1
 8000d42:	0010      	movs	r0, r2
 8000d44:	0019      	movs	r1, r3
 8000d46:	1cfb      	adds	r3, r7, #3
 8000d48:	1c22      	adds	r2, r4, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
 8000d4c:	1cbb      	adds	r3, r7, #2
 8000d4e:	1c02      	adds	r2, r0, #0
 8000d50:	701a      	strb	r2, [r3, #0]
 8000d52:	1c7b      	adds	r3, r7, #1
 8000d54:	1c0a      	adds	r2, r1, #0
 8000d56:	701a      	strb	r2, [r3, #0]
  uint8_t rfparams[3] = {bw, cr, bt};
 8000d58:	210c      	movs	r1, #12
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	1cfa      	adds	r2, r7, #3
 8000d5e:	7812      	ldrb	r2, [r2, #0]
 8000d60:	701a      	strb	r2, [r3, #0]
 8000d62:	187b      	adds	r3, r7, r1
 8000d64:	1cba      	adds	r2, r7, #2
 8000d66:	7812      	ldrb	r2, [r2, #0]
 8000d68:	705a      	strb	r2, [r3, #1]
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	1c7a      	adds	r2, r7, #1
 8000d6e:	7812      	ldrb	r2, [r2, #0]
 8000d70:	709a      	strb	r2, [r3, #2]
  hal.WriteCommand(SX1280_RADIO_SET_MODULATIONPARAMS, rfparams,
 8000d72:	187a      	adds	r2, r7, r1
 8000d74:	4804      	ldr	r0, [pc, #16]	; (8000d88 <_ZN12SX1280Driver19ConfigModParamsFLRCEhhh+0x50>)
 8000d76:	2303      	movs	r3, #3
 8000d78:	218b      	movs	r1, #139	; 0x8b
 8000d7a:	f000 fb23 	bl	80013c4 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
                   sizeof(rfparams));
}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b005      	add	sp, #20
 8000d84:	bd90      	pop	{r4, r7, pc}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	200000ac 	.word	0x200000ac

08000d8c <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt>:

void SX1280Driver::SetPacketParamsFLRC(uint8_t HeaderType, uint8_t crc,
                                       uint8_t PreambleLength,
                                       uint8_t PayloadLength, uint32_t syncWord,
                                       uint16_t crcSeed) {
 8000d8c:	b590      	push	{r4, r7, lr}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	000c      	movs	r4, r1
 8000d96:	0010      	movs	r0, r2
 8000d98:	0019      	movs	r1, r3
 8000d9a:	1cfb      	adds	r3, r7, #3
 8000d9c:	1c22      	adds	r2, r4, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
 8000da0:	1cbb      	adds	r3, r7, #2
 8000da2:	1c02      	adds	r2, r0, #0
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	1c7b      	adds	r3, r7, #1
 8000da8:	1c0a      	adds	r2, r1, #0
 8000daa:	701a      	strb	r2, [r3, #0]
  if (PreambleLength < 8)
 8000dac:	1c7b      	adds	r3, r7, #1
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b07      	cmp	r3, #7
 8000db2:	d802      	bhi.n	8000dba <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x2e>
    PreambleLength = 8;
 8000db4:	1c7b      	adds	r3, r7, #1
 8000db6:	2208      	movs	r2, #8
 8000db8:	701a      	strb	r2, [r3, #0]
  PreambleLength = ((PreambleLength / 4) - 1) << 4;
 8000dba:	1c7b      	adds	r3, r7, #1
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	089b      	lsrs	r3, r3, #2
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	1c7b      	adds	r3, r7, #1
 8000dc8:	0112      	lsls	r2, r2, #4
 8000dca:	701a      	strb	r2, [r3, #0]
  crc = (crc) ? SX1280_FLRC_CRC_2_BYTE : SX1280_FLRC_CRC_OFF;
 8000dcc:	1cbb      	adds	r3, r7, #2
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x4c>
 8000dd4:	2220      	movs	r2, #32
 8000dd6:	e000      	b.n	8000dda <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x4e>
 8000dd8:	2200      	movs	r2, #0
 8000dda:	1cbb      	adds	r3, r7, #2
 8000ddc:	701a      	strb	r2, [r3, #0]

  uint8_t buf[7];
  buf[0] = PreambleLength;                   // AGCPreambleLength
 8000dde:	2108      	movs	r1, #8
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	1c7a      	adds	r2, r7, #1
 8000de4:	7812      	ldrb	r2, [r2, #0]
 8000de6:	701a      	strb	r2, [r3, #0]
  buf[1] = SX1280_FLRC_SYNC_WORD_LEN_P32S;   // SyncWordLength
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	2204      	movs	r2, #4
 8000dec:	705a      	strb	r2, [r3, #1]
  buf[2] = SX1280_FLRC_RX_MATCH_SYNC_WORD_1; // SyncWordMatch
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2210      	movs	r2, #16
 8000df2:	709a      	strb	r2, [r3, #2]
  buf[3] = HeaderType;                       // PacketType
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	1cfa      	adds	r2, r7, #3
 8000df8:	7812      	ldrb	r2, [r2, #0]
 8000dfa:	70da      	strb	r2, [r3, #3]
  buf[4] = PayloadLength;                    // PayloadLength
 8000dfc:	187a      	adds	r2, r7, r1
 8000dfe:	2320      	movs	r3, #32
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	7113      	strb	r3, [r2, #4]
  buf[5] = (crc << 4);                       // CrcLength
 8000e06:	1cbb      	adds	r3, r7, #2
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	011b      	lsls	r3, r3, #4
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	000c      	movs	r4, r1
 8000e10:	193b      	adds	r3, r7, r4
 8000e12:	715a      	strb	r2, [r3, #5]
  buf[6] = 0x08;                             // Must be whitening disabled
 8000e14:	193b      	adds	r3, r7, r4
 8000e16:	2208      	movs	r2, #8
 8000e18:	719a      	strb	r2, [r3, #6]
  hal.WriteCommand(SX1280_RADIO_SET_PACKETPARAMS, buf, sizeof(buf));
 8000e1a:	193a      	adds	r2, r7, r4
 8000e1c:	4821      	ldr	r0, [pc, #132]	; (8000ea4 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x118>)
 8000e1e:	2307      	movs	r3, #7
 8000e20:	218c      	movs	r1, #140	; 0x8c
 8000e22:	f000 facf 	bl	80013c4 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>

  // CRC seed (use dedicated cipher)
  buf[0] = (uint8_t)(crcSeed >> 8);
 8000e26:	2028      	movs	r0, #40	; 0x28
 8000e28:	183b      	adds	r3, r7, r0
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	121b      	asrs	r3, r3, #8
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	0021      	movs	r1, r4
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	701a      	strb	r2, [r3, #0]
  buf[1] = (uint8_t)crcSeed;
 8000e36:	183b      	adds	r3, r7, r0
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	705a      	strb	r2, [r3, #1]
  hal.WriteRegister(SX1280_REG_FLRC_CRC_SEED, buf, 2);
 8000e40:	000c      	movs	r4, r1
 8000e42:	193a      	adds	r2, r7, r4
 8000e44:	4918      	ldr	r1, [pc, #96]	; (8000ea8 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x11c>)
 8000e46:	4817      	ldr	r0, [pc, #92]	; (8000ea4 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x118>)
 8000e48:	2302      	movs	r3, #2
 8000e4a:	f000 fb6b 	bl	8001524 <_ZN9SX1280Hal13WriteRegisterEtPhh>

  // CRC POLY 0x3D65
  buf[0] = 0x3D;
 8000e4e:	193b      	adds	r3, r7, r4
 8000e50:	223d      	movs	r2, #61	; 0x3d
 8000e52:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x65;
 8000e54:	193b      	adds	r3, r7, r4
 8000e56:	2265      	movs	r2, #101	; 0x65
 8000e58:	705a      	strb	r2, [r3, #1]
  hal.WriteRegister(SX1280_REG_FLRC_CRC_POLY, buf, 2);
 8000e5a:	193a      	adds	r2, r7, r4
 8000e5c:	4913      	ldr	r1, [pc, #76]	; (8000eac <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x120>)
 8000e5e:	4811      	ldr	r0, [pc, #68]	; (8000ea4 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x118>)
 8000e60:	2302      	movs	r3, #2
 8000e62:	f000 fb5f 	bl	8001524 <_ZN9SX1280Hal13WriteRegisterEtPhh>

  // Set SyncWord1
  buf[0] = (uint8_t)(syncWord >> 24);
 8000e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e68:	0e1b      	lsrs	r3, r3, #24
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	0021      	movs	r1, r4
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	701a      	strb	r2, [r3, #0]
  buf[1] = (uint8_t)(syncWord >> 16);
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e74:	0c1b      	lsrs	r3, r3, #16
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	705a      	strb	r2, [r3, #1]
  buf[2] = (uint8_t)(syncWord >> 8);
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7e:	0a1b      	lsrs	r3, r3, #8
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	709a      	strb	r2, [r3, #2]
  buf[3] = (uint8_t)syncWord;
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	70da      	strb	r2, [r3, #3]
  hal.WriteRegister(SX1280_REG_FLRC_SYNC_WORD, buf, 4);
 8000e8e:	187a      	adds	r2, r7, r1
 8000e90:	4907      	ldr	r1, [pc, #28]	; (8000eb0 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x124>)
 8000e92:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x118>)
 8000e94:	2304      	movs	r3, #4
 8000e96:	f000 fb45 	bl	8001524 <_ZN9SX1280Hal13WriteRegisterEtPhh>
}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b005      	add	sp, #20
 8000ea0:	bd90      	pop	{r4, r7, pc}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	200000ac 	.word	0x200000ac
 8000ea8:	000009c8 	.word	0x000009c8
 8000eac:	000009c6 	.word	0x000009c6
 8000eb0:	000009cf 	.word	0x000009cf

08000eb4 <_ZN12SX1280Driver15SetFrequencyRegEm>:

  hal.WriteCommand(SX1280_RADIO_SET_RFFREQUENCY, buf, sizeof(buf));
  currFreq = Reqfreq;
}

void SX1280Driver::SetFrequencyReg(uint32_t freq) {
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  uint8_t buf[3] = {0};
 8000ebe:	240c      	movs	r4, #12
 8000ec0:	193b      	adds	r3, r7, r4
 8000ec2:	4a12      	ldr	r2, [pc, #72]	; (8000f0c <_ZN12SX1280Driver15SetFrequencyRegEm+0x58>)
 8000ec4:	7812      	ldrb	r2, [r2, #0]
 8000ec6:	701a      	strb	r2, [r3, #0]
 8000ec8:	2201      	movs	r2, #1
 8000eca:	189b      	adds	r3, r3, r2
 8000ecc:	2202      	movs	r2, #2
 8000ece:	2100      	movs	r1, #0
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f008 fd74 	bl	80099be <memset>

  buf[0] = (uint8_t)((freq >> 16) & 0xFF);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	0c1b      	lsrs	r3, r3, #16
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	193b      	adds	r3, r7, r4
 8000ede:	701a      	strb	r2, [r3, #0]
  buf[1] = (uint8_t)((freq >> 8) & 0xFF);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	0a1b      	lsrs	r3, r3, #8
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	193b      	adds	r3, r7, r4
 8000ee8:	705a      	strb	r2, [r3, #1]
  buf[2] = (uint8_t)(freq & 0xFF);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	193b      	adds	r3, r7, r4
 8000ef0:	709a      	strb	r2, [r3, #2]

  hal.WriteCommand(SX1280_RADIO_SET_RFFREQUENCY, buf, sizeof(buf));
 8000ef2:	193a      	adds	r2, r7, r4
 8000ef4:	4806      	ldr	r0, [pc, #24]	; (8000f10 <_ZN12SX1280Driver15SetFrequencyRegEm+0x5c>)
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	2186      	movs	r1, #134	; 0x86
 8000efa:	f000 fa63 	bl	80013c4 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
  currFreq = freq;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	683a      	ldr	r2, [r7, #0]
 8000f02:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f04:	46c0      	nop			; (mov r8, r8)
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b005      	add	sp, #20
 8000f0a:	bd90      	pop	{r4, r7, pc}
 8000f0c:	0800a38c 	.word	0x0800a38c
 8000f10:	200000ac 	.word	0x200000ac

08000f14 <_ZN12SX1280Driver11SetFIFOaddrEhh>:

  efeHz = 1.55 * efe / (1600.0f / 800000.0f);
  return efeHz;
}

void SX1280Driver::SetFIFOaddr(uint8_t txBaseAddr, uint8_t rxBaseAddr) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	0008      	movs	r0, r1
 8000f1e:	0011      	movs	r1, r2
 8000f20:	1cfb      	adds	r3, r7, #3
 8000f22:	1c02      	adds	r2, r0, #0
 8000f24:	701a      	strb	r2, [r3, #0]
 8000f26:	1cbb      	adds	r3, r7, #2
 8000f28:	1c0a      	adds	r2, r1, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
  uint8_t buf[2];

  buf[0] = txBaseAddr;
 8000f2c:	210c      	movs	r1, #12
 8000f2e:	187b      	adds	r3, r7, r1
 8000f30:	1cfa      	adds	r2, r7, #3
 8000f32:	7812      	ldrb	r2, [r2, #0]
 8000f34:	701a      	strb	r2, [r3, #0]
  buf[1] = rxBaseAddr;
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	1cba      	adds	r2, r7, #2
 8000f3a:	7812      	ldrb	r2, [r2, #0]
 8000f3c:	705a      	strb	r2, [r3, #1]
  hal.WriteCommand(SX1280_RADIO_SET_BUFFERBASEADDRESS, buf, sizeof(buf));
 8000f3e:	187a      	adds	r2, r7, r1
 8000f40:	4804      	ldr	r0, [pc, #16]	; (8000f54 <_ZN12SX1280Driver11SetFIFOaddrEhh+0x40>)
 8000f42:	2302      	movs	r3, #2
 8000f44:	218f      	movs	r1, #143	; 0x8f
 8000f46:	f000 fa3d 	bl	80013c4 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b004      	add	sp, #16
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	200000ac 	.word	0x200000ac

08000f58 <_ZN12SX1280Driver15SetDioIrqParamsEtttt>:

void SX1280Driver::SetDioIrqParams(uint16_t irqMask, uint16_t dio1Mask,
                                   uint16_t dio2Mask, uint16_t dio3Mask) {
 8000f58:	b5b0      	push	{r4, r5, r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	000c      	movs	r4, r1
 8000f62:	0010      	movs	r0, r2
 8000f64:	0019      	movs	r1, r3
 8000f66:	250a      	movs	r5, #10
 8000f68:	197b      	adds	r3, r7, r5
 8000f6a:	1c22      	adds	r2, r4, #0
 8000f6c:	801a      	strh	r2, [r3, #0]
 8000f6e:	2408      	movs	r4, #8
 8000f70:	193b      	adds	r3, r7, r4
 8000f72:	1c02      	adds	r2, r0, #0
 8000f74:	801a      	strh	r2, [r3, #0]
 8000f76:	1dbb      	adds	r3, r7, #6
 8000f78:	1c0a      	adds	r2, r1, #0
 8000f7a:	801a      	strh	r2, [r3, #0]
  uint8_t buf[8];

  buf[0] = (uint8_t)((irqMask >> 8) & 0x00FF);
 8000f7c:	0028      	movs	r0, r5
 8000f7e:	183b      	adds	r3, r7, r0
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	0a1b      	lsrs	r3, r3, #8
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	2110      	movs	r1, #16
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	701a      	strb	r2, [r3, #0]
  buf[1] = (uint8_t)(irqMask & 0x00FF);
 8000f8e:	183b      	adds	r3, r7, r0
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	705a      	strb	r2, [r3, #1]
  buf[2] = (uint8_t)((dio1Mask >> 8) & 0x00FF);
 8000f98:	193b      	adds	r3, r7, r4
 8000f9a:	881b      	ldrh	r3, [r3, #0]
 8000f9c:	0a1b      	lsrs	r3, r3, #8
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	709a      	strb	r2, [r3, #2]
  buf[3] = (uint8_t)(dio1Mask & 0x00FF);
 8000fa6:	193b      	adds	r3, r7, r4
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	70da      	strb	r2, [r3, #3]
  buf[4] = (uint8_t)((dio2Mask >> 8) & 0x00FF);
 8000fb0:	1dbb      	adds	r3, r7, #6
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	711a      	strb	r2, [r3, #4]
  buf[5] = (uint8_t)(dio2Mask & 0x00FF);
 8000fbe:	1dbb      	adds	r3, r7, #6
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	715a      	strb	r2, [r3, #5]
  buf[6] = (uint8_t)((dio3Mask >> 8) & 0x00FF);
 8000fc8:	2028      	movs	r0, #40	; 0x28
 8000fca:	183b      	adds	r3, r7, r0
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	0a1b      	lsrs	r3, r3, #8
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	719a      	strb	r2, [r3, #6]
  buf[7] = (uint8_t)(dio3Mask & 0x00FF);
 8000fd8:	183b      	adds	r3, r7, r0
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	71da      	strb	r2, [r3, #7]

  hal.WriteCommand(SX1280_RADIO_SET_DIOIRQPARAMS, buf, sizeof(buf));
 8000fe2:	187a      	adds	r2, r7, r1
 8000fe4:	4804      	ldr	r0, [pc, #16]	; (8000ff8 <_ZN12SX1280Driver15SetDioIrqParamsEtttt+0xa0>)
 8000fe6:	2308      	movs	r3, #8
 8000fe8:	218d      	movs	r1, #141	; 0x8d
 8000fea:	f000 f9eb 	bl	80013c4 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b006      	add	sp, #24
 8000ff4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	200000ac 	.word	0x200000ac

08000ffc <_ZN12SX1280Driver12GetIrqStatusEv>:

uint16_t SX1280Driver::GetIrqStatus() {
 8000ffc:	b590      	push	{r4, r7, lr}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint8_t status[2];

  hal.ReadCommand(SX1280_RADIO_GET_IRQSTATUS, status, 2);
 8001004:	240c      	movs	r4, #12
 8001006:	193a      	adds	r2, r7, r4
 8001008:	4809      	ldr	r0, [pc, #36]	; (8001030 <_ZN12SX1280Driver12GetIrqStatusEv+0x34>)
 800100a:	2302      	movs	r3, #2
 800100c:	2115      	movs	r1, #21
 800100e:	f000 fa1f 	bl	8001450 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh>
  return status[0] << 8 | status[1];
 8001012:	0021      	movs	r1, r4
 8001014:	187b      	adds	r3, r7, r1
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	b21a      	sxth	r2, r3
 800101c:	187b      	adds	r3, r7, r1
 800101e:	785b      	ldrb	r3, [r3, #1]
 8001020:	b21b      	sxth	r3, r3
 8001022:	4313      	orrs	r3, r2
 8001024:	b21b      	sxth	r3, r3
 8001026:	b29b      	uxth	r3, r3
}
 8001028:	0018      	movs	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	b005      	add	sp, #20
 800102e:	bd90      	pop	{r4, r7, pc}
 8001030:	200000ac 	.word	0x200000ac

08001034 <_ZN12SX1280Driver14ClearIrqStatusEt>:

void SX1280Driver::ClearIrqStatus(uint16_t irqMask) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	000a      	movs	r2, r1
 800103e:	1cbb      	adds	r3, r7, #2
 8001040:	801a      	strh	r2, [r3, #0]
  uint8_t buf[2];

  buf[0] = (uint8_t)(((uint16_t)irqMask >> 8) & 0x00FF);
 8001042:	1cbb      	adds	r3, r7, #2
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	0a1b      	lsrs	r3, r3, #8
 8001048:	b29b      	uxth	r3, r3
 800104a:	b2da      	uxtb	r2, r3
 800104c:	210c      	movs	r1, #12
 800104e:	187b      	adds	r3, r7, r1
 8001050:	701a      	strb	r2, [r3, #0]
  buf[1] = (uint8_t)((uint16_t)irqMask & 0x00FF);
 8001052:	1cbb      	adds	r3, r7, #2
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	187b      	adds	r3, r7, r1
 800105a:	705a      	strb	r2, [r3, #1]

  hal.WriteCommand(SX1280_RADIO_CLR_IRQSTATUS, buf, sizeof(buf));
 800105c:	187a      	adds	r2, r7, r1
 800105e:	4804      	ldr	r0, [pc, #16]	; (8001070 <_ZN12SX1280Driver14ClearIrqStatusEt+0x3c>)
 8001060:	2302      	movs	r3, #2
 8001062:	2197      	movs	r1, #151	; 0x97
 8001064:	f000 f9ae 	bl	80013c4 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
}
 8001068:	46c0      	nop			; (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	b004      	add	sp, #16
 800106e:	bd80      	pop	{r7, pc}
 8001070:	200000ac 	.word	0x200000ac

08001074 <_ZN12SX1280Driver7TXnbISREv>:

void SX1280Driver::TXnbISR() {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  currOpmode = SX1280_MODE_FS; // radio goes to FS after TX
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	223c      	movs	r2, #60	; 0x3c
 8001080:	2104      	movs	r1, #4
 8001082:	5499      	strb	r1, [r3, r2]
#ifdef DEBUG_SX1280_OTA_TIMING
  endTX = micros();
  DBGLN("TOA: %d", endTX - beginTX);
#endif
  if (TXdoneCallback)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d002      	beq.n	8001092 <_ZN12SX1280Driver7TXnbISREv+0x1e>
    TXdoneCallback();
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	4798      	blx	r3
}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	46bd      	mov	sp, r7
 8001096:	b002      	add	sp, #8
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <_ZN12SX1280Driver4TXnbEv>:

uint8_t FIFOaddr = 0;

void SX1280Driver::TXnb() {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if (currOpmode == SX1280_MODE_TX) // catch TX timeout
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	223c      	movs	r2, #60	; 0x3c
 80010a8:	5c9b      	ldrb	r3, [r3, r2]
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d109      	bne.n	80010c2 <_ZN12SX1280Driver4TXnbEv+0x26>
  {
    // DBGLN("Timeout!");
    SetMode(SX1280_MODE_FS);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2104      	movs	r1, #4
 80010b2:	0018      	movs	r0, r3
 80010b4:	f7ff fd34 	bl	8000b20 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>
    TXnbISR();
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	0018      	movs	r0, r3
 80010bc:	f7ff ffda 	bl	8001074 <_ZN12SX1280Driver7TXnbISREv>
    return;
 80010c0:	e02b      	b.n	800111a <_ZN12SX1280Driver4TXnbEv+0x7e>
  }
  hal.TXenable(); // do first to allow PA stablise
 80010c2:	4b17      	ldr	r3, [pc, #92]	; (8001120 <_ZN12SX1280Driver4TXnbEv+0x84>)
 80010c4:	0018      	movs	r0, r3
 80010c6:	f000 fbcd 	bl	8001864 <_ZN9SX1280Hal8TXenableEv>
  hal.TXenable();
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <_ZN12SX1280Driver4TXnbEv+0x84>)
 80010cc:	0018      	movs	r0, r3
 80010ce:	f000 fbc9 	bl	8001864 <_ZN9SX1280Hal8TXenableEv>
  hal.TXenable();
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <_ZN12SX1280Driver4TXnbEv+0x84>)
 80010d4:	0018      	movs	r0, r3
 80010d6:	f000 fbc5 	bl	8001864 <_ZN9SX1280Hal8TXenableEv>
  hal.TXenable();
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <_ZN12SX1280Driver4TXnbEv+0x84>)
 80010dc:	0018      	movs	r0, r3
 80010de:	f000 fbc1 	bl	8001864 <_ZN9SX1280Hal8TXenableEv>
  hal.TXenable();
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <_ZN12SX1280Driver4TXnbEv+0x84>)
 80010e4:	0018      	movs	r0, r3
 80010e6:	f000 fbbd 	bl	8001864 <_ZN9SX1280Hal8TXenableEv>
  hal.TXenable();
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <_ZN12SX1280Driver4TXnbEv+0x84>)
 80010ec:	0018      	movs	r0, r3
 80010ee:	f000 fbb9 	bl	8001864 <_ZN9SX1280Hal8TXenableEv>
  hal.TXenable();
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <_ZN12SX1280Driver4TXnbEv+0x84>)
 80010f4:	0018      	movs	r0, r3
 80010f6:	f000 fbb5 	bl	8001864 <_ZN9SX1280Hal8TXenableEv>
  hal.WriteBuffer(0x00, TXdataBuffer,
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3308      	adds	r3, #8
 80010fe:	001a      	movs	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2138      	movs	r1, #56	; 0x38
 8001104:	5c5b      	ldrb	r3, [r3, r1]
 8001106:	4806      	ldr	r0, [pc, #24]	; (8001120 <_ZN12SX1280Driver4TXnbEv+0x84>)
 8001108:	2100      	movs	r1, #0
 800110a:	f000 fadb 	bl	80016c4 <_ZN9SX1280Hal11WriteBufferEhPVhh>
                  PayloadLength); // todo fix offset to equal fifo addr
  instance->SetMode(SX1280_MODE_TX);
 800110e:	4b05      	ldr	r3, [pc, #20]	; (8001124 <_ZN12SX1280Driver4TXnbEv+0x88>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2106      	movs	r1, #6
 8001114:	0018      	movs	r0, r3
 8001116:	f7ff fd03 	bl	8000b20 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>
#ifdef DEBUG_SX1280_OTA_TIMING
  beginTX = micros();
#endif
}
 800111a:	46bd      	mov	sp, r7
 800111c:	b002      	add	sp, #8
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200000ac 	.word	0x200000ac
 8001124:	200000b0 	.word	0x200000b0

08001128 <_ZN12SX1280Driver7RXnbISREv>:

void SX1280Driver::RXnbISR() {
 8001128:	b5b0      	push	{r4, r5, r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  // In continuous receive mode, the device stays in Rx mode
  if (timeout != 0xFFFF) {
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001134:	4a14      	ldr	r2, [pc, #80]	; (8001188 <_ZN12SX1280Driver7RXnbISREv+0x60>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d003      	beq.n	8001142 <_ZN12SX1280Driver7RXnbISREv+0x1a>
    // From table 11-28, pg 81 datasheet rev 3.2
    // upon successsful receipt, when the timer is active or in single mode, it
    // returns to STDBY_RC but because we have AUTO_FS enabled we automatically
    // transition to state SX1280_MODE_FS
    currOpmode = SX1280_MODE_FS;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	223c      	movs	r2, #60	; 0x3c
 800113e:	2104      	movs	r1, #4
 8001140:	5499      	strb	r1, [r3, r2]
  }
  uint8_t FIFOaddr = GetRxBufferAddr();
 8001142:	250f      	movs	r5, #15
 8001144:	197c      	adds	r4, r7, r5
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	0018      	movs	r0, r3
 800114a:	f000 f835 	bl	80011b8 <_ZN12SX1280Driver15GetRxBufferAddrEv>
 800114e:	0003      	movs	r3, r0
 8001150:	7023      	strb	r3, [r4, #0]
  hal.ReadBuffer(FIFOaddr, RXdataBuffer, PayloadLength);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	331c      	adds	r3, #28
 8001156:	001a      	movs	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2138      	movs	r1, #56	; 0x38
 800115c:	5c5c      	ldrb	r4, [r3, r1]
 800115e:	197b      	adds	r3, r7, r5
 8001160:	7819      	ldrb	r1, [r3, #0]
 8001162:	480a      	ldr	r0, [pc, #40]	; (800118c <_ZN12SX1280Driver7RXnbISREv+0x64>)
 8001164:	0023      	movs	r3, r4
 8001166:	f000 faff 	bl	8001768 <_ZN9SX1280Hal10ReadBufferEhPVhh>
  GetLastPacketStats();
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	0018      	movs	r0, r3
 800116e:	f000 f83b 	bl	80011e8 <_ZN12SX1280Driver18GetLastPacketStatsEv>
  if (RXdoneCallback)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d002      	beq.n	8001180 <_ZN12SX1280Driver7RXnbISREv+0x58>
    RXdoneCallback();
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4798      	blx	r3
}
 8001180:	46c0      	nop			; (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	b004      	add	sp, #16
 8001186:	bdb0      	pop	{r4, r5, r7, pc}
 8001188:	0000ffff 	.word	0x0000ffff
 800118c:	200000ac 	.word	0x200000ac

08001190 <_ZN12SX1280Driver4RXnbEv>:

void SX1280Driver::RXnb() {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  hal.RXenable();
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <_ZN12SX1280Driver4RXnbEv+0x24>)
 800119a:	0018      	movs	r0, r3
 800119c:	f000 fb82 	bl	80018a4 <_ZN9SX1280Hal8RXenableEv>
  SetMode(SX1280_MODE_RX);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2105      	movs	r1, #5
 80011a4:	0018      	movs	r0, r3
 80011a6:	f7ff fcbb 	bl	8000b20 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>
}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	46bd      	mov	sp, r7
 80011ae:	b002      	add	sp, #8
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	200000ac 	.word	0x200000ac

080011b8 <_ZN12SX1280Driver15GetRxBufferAddrEv>:

uint8_t SX1280Driver::GetRxBufferAddr() {
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint8_t status[2] = {0};
 80011c0:	210c      	movs	r1, #12
 80011c2:	187b      	adds	r3, r7, r1
 80011c4:	2200      	movs	r2, #0
 80011c6:	801a      	strh	r2, [r3, #0]
  hal.ReadCommand(SX1280_RADIO_GET_RXBUFFERSTATUS, status, 2);
 80011c8:	000c      	movs	r4, r1
 80011ca:	187a      	adds	r2, r7, r1
 80011cc:	4805      	ldr	r0, [pc, #20]	; (80011e4 <_ZN12SX1280Driver15GetRxBufferAddrEv+0x2c>)
 80011ce:	2302      	movs	r3, #2
 80011d0:	2117      	movs	r1, #23
 80011d2:	f000 f93d 	bl	8001450 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh>
  return status[1];
 80011d6:	193b      	adds	r3, r7, r4
 80011d8:	785b      	ldrb	r3, [r3, #1]
}
 80011da:	0018      	movs	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	b005      	add	sp, #20
 80011e0:	bd90      	pop	{r4, r7, pc}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	200000ac 	.word	0x200000ac

080011e8 <_ZN12SX1280Driver18GetLastPacketStatsEv>:

  hal.ReadCommand(SX1280_RADIO_GET_RSSIINST, (uint8_t *)&status, 1);
  return -(int8_t)(status / 2);
}

void SX1280Driver::GetLastPacketStats() {
 80011e8:	b590      	push	{r4, r7, lr}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint8_t status[2];

  hal.ReadCommand(SX1280_RADIO_GET_PACKETSTATUS, status, 2);
 80011f0:	240c      	movs	r4, #12
 80011f2:	193a      	adds	r2, r7, r4
 80011f4:	481a      	ldr	r0, [pc, #104]	; (8001260 <_ZN12SX1280Driver18GetLastPacketStatsEv+0x78>)
 80011f6:	2302      	movs	r3, #2
 80011f8:	211d      	movs	r1, #29
 80011fa:	f000 f929 	bl	8001450 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh>
  LastPacketRSSI = -(int8_t)(status[0] / 2);
 80011fe:	0020      	movs	r0, r4
 8001200:	183b      	adds	r3, r7, r0
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	085b      	lsrs	r3, r3, #1
 8001206:	b2db      	uxtb	r3, r3
 8001208:	425b      	negs	r3, r3
 800120a:	b2db      	uxtb	r3, r3
 800120c:	b259      	sxtb	r1, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	223a      	movs	r2, #58	; 0x3a
 8001212:	5499      	strb	r1, [r3, r2]
  LastPacketSNR = (int8_t)status[1] / 4;
 8001214:	183b      	adds	r3, r7, r0
 8001216:	785b      	ldrb	r3, [r3, #1]
 8001218:	b25b      	sxtb	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	da00      	bge.n	8001220 <_ZN12SX1280Driver18GetLastPacketStatsEv+0x38>
 800121e:	3303      	adds	r3, #3
 8001220:	109b      	asrs	r3, r3, #2
 8001222:	b259      	sxtb	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	223b      	movs	r2, #59	; 0x3b
 8001228:	5499      	strb	r1, [r3, r2]
  // https://www.mouser.com/datasheet/2/761/DS_SX1280-1_V2.2-1511144.pdf
  // need to subtract SNR from RSSI when SNR <= 0;
  int8_t negOffset = (LastPacketSNR < 0) ? LastPacketSNR : 0;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	223b      	movs	r2, #59	; 0x3b
 800122e:	569b      	ldrsb	r3, [r3, r2]
 8001230:	220f      	movs	r2, #15
 8001232:	18ba      	adds	r2, r7, r2
 8001234:	b259      	sxtb	r1, r3
 8001236:	2900      	cmp	r1, #0
 8001238:	dd00      	ble.n	800123c <_ZN12SX1280Driver18GetLastPacketStatsEv+0x54>
 800123a:	2300      	movs	r3, #0
 800123c:	7013      	strb	r3, [r2, #0]
  LastPacketRSSI += negOffset;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	223a      	movs	r2, #58	; 0x3a
 8001242:	569b      	ldrsb	r3, [r3, r2]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	230f      	movs	r3, #15
 8001248:	18fb      	adds	r3, r7, r3
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	18d3      	adds	r3, r2, r3
 800124e:	b2db      	uxtb	r3, r3
 8001250:	b259      	sxtb	r1, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	223a      	movs	r2, #58	; 0x3a
 8001256:	5499      	strb	r1, [r3, r2]
}
 8001258:	46c0      	nop			; (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	b005      	add	sp, #20
 800125e:	bd90      	pop	{r4, r7, pc}
 8001260:	200000ac 	.word	0x200000ac

08001264 <_ZN12SX1280Driver11IsrCallbackEv>:

void SX1280Driver::IsrCallback() {
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
  uint16_t irqStatus = instance->GetIrqStatus();
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <_ZN12SX1280Driver11IsrCallbackEv+0x5c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	1dbc      	adds	r4, r7, #6
 8001270:	0018      	movs	r0, r3
 8001272:	f7ff fec3 	bl	8000ffc <_ZN12SX1280Driver12GetIrqStatusEv>
 8001276:	0003      	movs	r3, r0
 8001278:	8023      	strh	r3, [r4, #0]
  instance->ClearIrqStatus(SX1280_IRQ_RADIO_ALL);
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <_ZN12SX1280Driver11IsrCallbackEv+0x5c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a11      	ldr	r2, [pc, #68]	; (80012c4 <_ZN12SX1280Driver11IsrCallbackEv+0x60>)
 8001280:	0011      	movs	r1, r2
 8001282:	0018      	movs	r0, r3
 8001284:	f7ff fed6 	bl	8001034 <_ZN12SX1280Driver14ClearIrqStatusEt>
  if (irqStatus & SX1280_IRQ_TX_DONE) {
 8001288:	1dbb      	adds	r3, r7, #6
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	2201      	movs	r2, #1
 800128e:	4013      	ands	r3, r2
 8001290:	d008      	beq.n	80012a4 <_ZN12SX1280Driver11IsrCallbackEv+0x40>
    hal.TXRXdisable();
 8001292:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <_ZN12SX1280Driver11IsrCallbackEv+0x64>)
 8001294:	0018      	movs	r0, r3
 8001296:	f000 fb25 	bl	80018e4 <_ZN9SX1280Hal11TXRXdisableEv>
    instance->TXnbISR();
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <_ZN12SX1280Driver11IsrCallbackEv+0x5c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	0018      	movs	r0, r3
 80012a0:	f7ff fee8 	bl	8001074 <_ZN12SX1280Driver7TXnbISREv>
  }
  if (irqStatus & SX1280_IRQ_RX_DONE)
 80012a4:	1dbb      	adds	r3, r7, #6
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	2202      	movs	r2, #2
 80012aa:	4013      	ands	r3, r2
 80012ac:	d004      	beq.n	80012b8 <_ZN12SX1280Driver11IsrCallbackEv+0x54>
    instance->RXnbISR();
 80012ae:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <_ZN12SX1280Driver11IsrCallbackEv+0x5c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	0018      	movs	r0, r3
 80012b4:	f7ff ff38 	bl	8001128 <_ZN12SX1280Driver7RXnbISREv>
}
 80012b8:	46c0      	nop			; (mov r8, r8)
 80012ba:	46bd      	mov	sp, r7
 80012bc:	b003      	add	sp, #12
 80012be:	bd90      	pop	{r4, r7, pc}
 80012c0:	200000b0 	.word	0x200000b0
 80012c4:	0000ffff 	.word	0x0000ffff
 80012c8:	200000ac 	.word	0x200000ac

080012cc <_Z41__static_initialization_and_destruction_0ii>:
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d107      	bne.n	80012ec <_Z41__static_initialization_and_destruction_0ii+0x20>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d103      	bne.n	80012ec <_Z41__static_initialization_and_destruction_0ii+0x20>
SX1280Hal hal;
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80012e6:	0018      	movs	r0, r3
 80012e8:	f000 f814 	bl	8001314 <_ZN9SX1280HalC1Ev>
}
 80012ec:	46c0      	nop			; (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b002      	add	sp, #8
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	0000ffff 	.word	0x0000ffff
 80012f8:	200000ac 	.word	0x200000ac

080012fc <_GLOBAL__sub_I_hal>:
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <_GLOBAL__sub_I_hal+0x14>)
 8001302:	0019      	movs	r1, r3
 8001304:	2001      	movs	r0, #1
 8001306:	f7ff ffe1 	bl	80012cc <_Z41__static_initialization_and_destruction_0ii>
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	0000ffff 	.word	0x0000ffff

08001314 <_ZN9SX1280HalC1Ev>:

SX1280Hal *SX1280Hal::instance = NULL;

uint8_t OutBuffer[64];

SX1280Hal::SX1280Hal() { instance = this; }
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	4b03      	ldr	r3, [pc, #12]	; (800132c <_ZN9SX1280HalC1Ev+0x18>)
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	0018      	movs	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	b002      	add	sp, #8
 800132a:	bd80      	pop	{r7, pc}
 800132c:	200000b4 	.word	0x200000b4

08001330 <_ZN9SX1280Hal4initEv>:

void SX1280Hal::end() {
  TXRXdisable(); // make sure the RX/TX amp pins are disabled
}

void SX1280Hal::init() {}
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	46c0      	nop			; (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	b002      	add	sp, #8
 800133e:	bd80      	pop	{r7, pc}

08001340 <_ZN9SX1280Hal5resetEv>:

void SX1280Hal::reset(void) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  // We do not have this pin
}
 8001348:	46c0      	nop			; (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	b002      	add	sp, #8
 800134e:	bd80      	pop	{r7, pc}

08001350 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>:

void SX1280Hal::WriteCommand(SX1280_RadioCommands_t command, uint8_t val) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	0008      	movs	r0, r1
 800135a:	0011      	movs	r1, r2
 800135c:	1cfb      	adds	r3, r7, #3
 800135e:	1c02      	adds	r2, r0, #0
 8001360:	701a      	strb	r2, [r3, #0]
 8001362:	1cbb      	adds	r3, r7, #2
 8001364:	1c0a      	adds	r2, r1, #0
 8001366:	701a      	strb	r2, [r3, #0]
  WaitOnBusy();
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	0018      	movs	r0, r3
 800136c:	f000 fa50 	bl	8001810 <_ZN9SX1280Hal10WaitOnBusyEv>
  OutBuffer[0] = command;
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x68>)
 8001372:	1cfa      	adds	r2, r7, #3
 8001374:	7812      	ldrb	r2, [r2, #0]
 8001376:	701a      	strb	r2, [r3, #0]
  OutBuffer[1] = val;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x68>)
 800137a:	1cba      	adds	r2, r7, #2
 800137c:	7812      	ldrb	r2, [r2, #0]
 800137e:	705a      	strb	r2, [r3, #1]
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x6c>)
 8001382:	2200      	movs	r2, #0
 8001384:	2101      	movs	r1, #1
 8001386:	0018      	movs	r0, r3
 8001388:	f004 f811 	bl	80053ae <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(RADIO_SPI, OutBuffer, 2, 5);
 800138c:	490a      	ldr	r1, [pc, #40]	; (80013b8 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x68>)
 800138e:	480c      	ldr	r0, [pc, #48]	; (80013c0 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x70>)
 8001390:	2305      	movs	r3, #5
 8001392:	2202      	movs	r2, #2
 8001394:	f004 fffe 	bl	8006394 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x6c>)
 800139a:	2201      	movs	r2, #1
 800139c:	2101      	movs	r1, #1
 800139e:	0018      	movs	r0, r3
 80013a0:	f004 f805 	bl	80053ae <HAL_GPIO_WritePin>

  BusyDelay(12);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	210c      	movs	r1, #12
 80013a8:	0018      	movs	r0, r3
 80013aa:	f7ff fa1b 	bl	80007e4 <_ZNK9SX1280Hal9BusyDelayEm>
}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	46bd      	mov	sp, r7
 80013b2:	b002      	add	sp, #8
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	200000b8 	.word	0x200000b8
 80013bc:	50000400 	.word	0x50000400
 80013c0:	2000040c 	.word	0x2000040c

080013c4 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>:

void SX1280Hal::WriteCommand(SX1280_RadioCommands_t command, uint8_t *buffer,
                             uint8_t size) {
 80013c4:	b5b0      	push	{r4, r5, r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	0008      	movs	r0, r1
 80013ce:	607a      	str	r2, [r7, #4]
 80013d0:	0019      	movs	r1, r3
 80013d2:	250b      	movs	r5, #11
 80013d4:	197b      	adds	r3, r7, r5
 80013d6:	1c02      	adds	r2, r0, #0
 80013d8:	701a      	strb	r2, [r3, #0]
 80013da:	240a      	movs	r4, #10
 80013dc:	193b      	adds	r3, r7, r4
 80013de:	1c0a      	adds	r2, r1, #0
 80013e0:	701a      	strb	r2, [r3, #0]
  OutBuffer[0] = (uint8_t)command;
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x7c>)
 80013e4:	197a      	adds	r2, r7, r5
 80013e6:	7812      	ldrb	r2, [r2, #0]
 80013e8:	701a      	strb	r2, [r3, #0]
  memcpy(OutBuffer + 1, buffer, size);
 80013ea:	4816      	ldr	r0, [pc, #88]	; (8001444 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x80>)
 80013ec:	193b      	adds	r3, r7, r4
 80013ee:	781a      	ldrb	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	0019      	movs	r1, r3
 80013f4:	f008 fada 	bl	80099ac <memcpy>

  WaitOnBusy();
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	0018      	movs	r0, r3
 80013fc:	f000 fa08 	bl	8001810 <_ZN9SX1280Hal10WaitOnBusyEv>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x84>)
 8001402:	2200      	movs	r2, #0
 8001404:	2101      	movs	r1, #1
 8001406:	0018      	movs	r0, r3
 8001408:	f003 ffd1 	bl	80053ae <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(RADIO_SPI, OutBuffer, size + 1, 5);
 800140c:	193b      	adds	r3, r7, r4
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b29b      	uxth	r3, r3
 8001412:	3301      	adds	r3, #1
 8001414:	b29a      	uxth	r2, r3
 8001416:	490a      	ldr	r1, [pc, #40]	; (8001440 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x7c>)
 8001418:	480c      	ldr	r0, [pc, #48]	; (800144c <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x88>)
 800141a:	2305      	movs	r3, #5
 800141c:	f004 ffba 	bl	8006394 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x84>)
 8001422:	2201      	movs	r2, #1
 8001424:	2101      	movs	r1, #1
 8001426:	0018      	movs	r0, r3
 8001428:	f003 ffc1 	bl	80053ae <HAL_GPIO_WritePin>

  BusyDelay(12);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	210c      	movs	r1, #12
 8001430:	0018      	movs	r0, r3
 8001432:	f7ff f9d7 	bl	80007e4 <_ZNK9SX1280Hal9BusyDelayEm>
}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	46bd      	mov	sp, r7
 800143a:	b004      	add	sp, #16
 800143c:	bdb0      	pop	{r4, r5, r7, pc}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	200000b8 	.word	0x200000b8
 8001444:	200000b9 	.word	0x200000b9
 8001448:	50000400 	.word	0x50000400
 800144c:	2000040c 	.word	0x2000040c

08001450 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh>:

void SX1280Hal::ReadCommand(SX1280_RadioCommands_t command, uint8_t *buffer,
                            uint8_t size) {
 8001450:	b5b0      	push	{r4, r5, r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af02      	add	r7, sp, #8
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	0008      	movs	r0, r1
 800145a:	607a      	str	r2, [r7, #4]
 800145c:	0019      	movs	r1, r3
 800145e:	240b      	movs	r4, #11
 8001460:	193b      	adds	r3, r7, r4
 8001462:	1c02      	adds	r2, r0, #0
 8001464:	701a      	strb	r2, [r3, #0]
 8001466:	230a      	movs	r3, #10
 8001468:	18fb      	adds	r3, r7, r3
 800146a:	1c0a      	adds	r2, r1, #0
 800146c:	701a      	strb	r2, [r3, #0]
#define RADIO_GET_STATUS_BUF_SIZEOF                                            \
  3 // special case for command == SX1280_RADIO_GET_STATUS, fixed 3 bytes packet
    // size

  WaitOnBusy();
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	0018      	movs	r0, r3
 8001472:	f000 f9cd 	bl	8001810 <_ZN9SX1280Hal10WaitOnBusyEv>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001476:	4b27      	ldr	r3, [pc, #156]	; (8001514 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc4>)
 8001478:	2200      	movs	r2, #0
 800147a:	2101      	movs	r1, #1
 800147c:	0018      	movs	r0, r3
 800147e:	f003 ff96 	bl	80053ae <HAL_GPIO_WritePin>

  if (command == SX1280_RADIO_GET_STATUS) {
 8001482:	193b      	adds	r3, r7, r4
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2bc0      	cmp	r3, #192	; 0xc0
 8001488:	d116      	bne.n	80014b8 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0x68>
    OutBuffer[0] = (uint8_t)command;
 800148a:	4b23      	ldr	r3, [pc, #140]	; (8001518 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 800148c:	193a      	adds	r2, r7, r4
 800148e:	7812      	ldrb	r2, [r2, #0]
 8001490:	701a      	strb	r2, [r3, #0]
    OutBuffer[1] = 0x00;
 8001492:	4b21      	ldr	r3, [pc, #132]	; (8001518 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 8001494:	2200      	movs	r2, #0
 8001496:	705a      	strb	r2, [r3, #1]
    OutBuffer[2] = 0x00;
 8001498:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 800149a:	2200      	movs	r2, #0
 800149c:	709a      	strb	r2, [r3, #2]
    HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer,
 800149e:	4a1e      	ldr	r2, [pc, #120]	; (8001518 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 80014a0:	491d      	ldr	r1, [pc, #116]	; (8001518 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 80014a2:	481e      	ldr	r0, [pc, #120]	; (800151c <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xcc>)
 80014a4:	2305      	movs	r3, #5
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2303      	movs	r3, #3
 80014aa:	f005 f8cb 	bl	8006644 <HAL_SPI_TransmitReceive>
                            RADIO_GET_STATUS_BUF_SIZEOF, 5);
    buffer[0] = OutBuffer[0];
 80014ae:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 80014b0:	781a      	ldrb	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	701a      	strb	r2, [r3, #0]
 80014b6:	e022      	b.n	80014fe <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xae>
  } else {
    OutBuffer[0] = (uint8_t)command;
 80014b8:	4b17      	ldr	r3, [pc, #92]	; (8001518 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 80014ba:	220b      	movs	r2, #11
 80014bc:	18ba      	adds	r2, r7, r2
 80014be:	7812      	ldrb	r2, [r2, #0]
 80014c0:	701a      	strb	r2, [r3, #0]
    OutBuffer[1] = 0x00;
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	705a      	strb	r2, [r3, #1]
    memcpy(OutBuffer + 2, buffer, size);
 80014c8:	4815      	ldr	r0, [pc, #84]	; (8001520 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xd0>)
 80014ca:	250a      	movs	r5, #10
 80014cc:	197b      	adds	r3, r7, r5
 80014ce:	781a      	ldrb	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	0019      	movs	r1, r3
 80014d4:	f008 fa6a 	bl	80099ac <memcpy>
    HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer, size + 2, 5);
 80014d8:	197b      	adds	r3, r7, r5
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	3302      	adds	r3, #2
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	4a0d      	ldr	r2, [pc, #52]	; (8001518 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 80014e4:	490c      	ldr	r1, [pc, #48]	; (8001518 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 80014e6:	480d      	ldr	r0, [pc, #52]	; (800151c <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xcc>)
 80014e8:	2405      	movs	r4, #5
 80014ea:	9400      	str	r4, [sp, #0]
 80014ec:	f005 f8aa 	bl	8006644 <HAL_SPI_TransmitReceive>
    memcpy(buffer, OutBuffer + 2, size);
 80014f0:	490b      	ldr	r1, [pc, #44]	; (8001520 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xd0>)
 80014f2:	197b      	adds	r3, r7, r5
 80014f4:	781a      	ldrb	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	0018      	movs	r0, r3
 80014fa:	f008 fa57 	bl	80099ac <memcpy>
  }
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc4>)
 8001500:	2201      	movs	r2, #1
 8001502:	2101      	movs	r1, #1
 8001504:	0018      	movs	r0, r3
 8001506:	f003 ff52 	bl	80053ae <HAL_GPIO_WritePin>
}
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	46bd      	mov	sp, r7
 800150e:	b004      	add	sp, #16
 8001510:	bdb0      	pop	{r4, r5, r7, pc}
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	50000400 	.word	0x50000400
 8001518:	200000b8 	.word	0x200000b8
 800151c:	2000040c 	.word	0x2000040c
 8001520:	200000ba 	.word	0x200000ba

08001524 <_ZN9SX1280Hal13WriteRegisterEtPhh>:

void SX1280Hal::WriteRegister(uint16_t address, uint8_t *buffer, uint8_t size) {
 8001524:	b5b0      	push	{r4, r5, r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af02      	add	r7, sp, #8
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	0008      	movs	r0, r1
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	0019      	movs	r1, r3
 8001532:	240a      	movs	r4, #10
 8001534:	193b      	adds	r3, r7, r4
 8001536:	1c02      	adds	r2, r0, #0
 8001538:	801a      	strh	r2, [r3, #0]
 800153a:	2509      	movs	r5, #9
 800153c:	197b      	adds	r3, r7, r5
 800153e:	1c0a      	adds	r2, r1, #0
 8001540:	701a      	strb	r2, [r3, #0]
  OutBuffer[0] = (SX1280_RADIO_WRITE_REGISTER);
 8001542:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x94>)
 8001544:	2218      	movs	r2, #24
 8001546:	701a      	strb	r2, [r3, #0]
  OutBuffer[1] = ((address & 0xFF00) >> 8);
 8001548:	193b      	adds	r3, r7, r4
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	0a1b      	lsrs	r3, r3, #8
 800154e:	b29b      	uxth	r3, r3
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x94>)
 8001554:	705a      	strb	r2, [r3, #1]
  OutBuffer[2] = (address & 0x00FF);
 8001556:	193b      	adds	r3, r7, r4
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x94>)
 800155e:	709a      	strb	r2, [r3, #2]

  memcpy(OutBuffer + 3, buffer, size);
 8001560:	4816      	ldr	r0, [pc, #88]	; (80015bc <_ZN9SX1280Hal13WriteRegisterEtPhh+0x98>)
 8001562:	197b      	adds	r3, r7, r5
 8001564:	781a      	ldrb	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	0019      	movs	r1, r3
 800156a:	f008 fa1f 	bl	80099ac <memcpy>

  WaitOnBusy();
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	0018      	movs	r0, r3
 8001572:	f000 f94d 	bl	8001810 <_ZN9SX1280Hal10WaitOnBusyEv>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x9c>)
 8001578:	2200      	movs	r2, #0
 800157a:	2101      	movs	r1, #1
 800157c:	0018      	movs	r0, r3
 800157e:	f003 ff16 	bl	80053ae <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer, size + 3, 5);
 8001582:	197b      	adds	r3, r7, r5
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	b29b      	uxth	r3, r3
 8001588:	3303      	adds	r3, #3
 800158a:	b29b      	uxth	r3, r3
 800158c:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x94>)
 800158e:	490a      	ldr	r1, [pc, #40]	; (80015b8 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x94>)
 8001590:	480c      	ldr	r0, [pc, #48]	; (80015c4 <_ZN9SX1280Hal13WriteRegisterEtPhh+0xa0>)
 8001592:	2405      	movs	r4, #5
 8001594:	9400      	str	r4, [sp, #0]
 8001596:	f005 f855 	bl	8006644 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x9c>)
 800159c:	2201      	movs	r2, #1
 800159e:	2101      	movs	r1, #1
 80015a0:	0018      	movs	r0, r3
 80015a2:	f003 ff04 	bl	80053ae <HAL_GPIO_WritePin>

  BusyDelay(12);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	210c      	movs	r1, #12
 80015aa:	0018      	movs	r0, r3
 80015ac:	f7ff f91a 	bl	80007e4 <_ZNK9SX1280Hal9BusyDelayEm>
}
 80015b0:	46c0      	nop			; (mov r8, r8)
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b004      	add	sp, #16
 80015b6:	bdb0      	pop	{r4, r5, r7, pc}
 80015b8:	200000b8 	.word	0x200000b8
 80015bc:	200000bb 	.word	0x200000bb
 80015c0:	50000400 	.word	0x50000400
 80015c4:	2000040c 	.word	0x2000040c

080015c8 <_ZN9SX1280Hal13WriteRegisterEth>:

void SX1280Hal::WriteRegister(uint16_t address, uint8_t value) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	0008      	movs	r0, r1
 80015d2:	0011      	movs	r1, r2
 80015d4:	1cbb      	adds	r3, r7, #2
 80015d6:	1c02      	adds	r2, r0, #0
 80015d8:	801a      	strh	r2, [r3, #0]
 80015da:	1c7b      	adds	r3, r7, #1
 80015dc:	1c0a      	adds	r2, r1, #0
 80015de:	701a      	strb	r2, [r3, #0]
  WriteRegister(address, &value, 1);
 80015e0:	1c7a      	adds	r2, r7, #1
 80015e2:	1cbb      	adds	r3, r7, #2
 80015e4:	8819      	ldrh	r1, [r3, #0]
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	2301      	movs	r3, #1
 80015ea:	f7ff ff9b 	bl	8001524 <_ZN9SX1280Hal13WriteRegisterEtPhh>
}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b002      	add	sp, #8
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <_ZN9SX1280Hal12ReadRegisterEtPhh>:

void SX1280Hal::ReadRegister(uint16_t address, uint8_t *buffer, uint8_t size) {
 80015f8:	b5b0      	push	{r4, r5, r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	0008      	movs	r0, r1
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	0019      	movs	r1, r3
 8001606:	240a      	movs	r4, #10
 8001608:	193b      	adds	r3, r7, r4
 800160a:	1c02      	adds	r2, r0, #0
 800160c:	801a      	strh	r2, [r3, #0]
 800160e:	2509      	movs	r5, #9
 8001610:	197b      	adds	r3, r7, r5
 8001612:	1c0a      	adds	r2, r1, #0
 8001614:	701a      	strb	r2, [r3, #0]
  OutBuffer[0] = (SX1280_RADIO_READ_REGISTER);
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 8001618:	2219      	movs	r2, #25
 800161a:	701a      	strb	r2, [r3, #0]
  OutBuffer[1] = ((address & 0xFF00) >> 8);
 800161c:	193b      	adds	r3, r7, r4
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	b29b      	uxth	r3, r3
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4b18      	ldr	r3, [pc, #96]	; (8001688 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 8001628:	705a      	strb	r2, [r3, #1]
  OutBuffer[2] = (address & 0x00FF);
 800162a:	193b      	adds	r3, r7, r4
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	b2da      	uxtb	r2, r3
 8001630:	4b15      	ldr	r3, [pc, #84]	; (8001688 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 8001632:	709a      	strb	r2, [r3, #2]
  OutBuffer[3] = 0x00;
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 8001636:	2200      	movs	r2, #0
 8001638:	70da      	strb	r2, [r3, #3]

  WaitOnBusy();
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	0018      	movs	r0, r3
 800163e:	f000 f8e7 	bl	8001810 <_ZN9SX1280Hal10WaitOnBusyEv>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001642:	4b12      	ldr	r3, [pc, #72]	; (800168c <_ZN9SX1280Hal12ReadRegisterEtPhh+0x94>)
 8001644:	2200      	movs	r2, #0
 8001646:	2101      	movs	r1, #1
 8001648:	0018      	movs	r0, r3
 800164a:	f003 feb0 	bl	80053ae <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer, size + 4, 5);
 800164e:	197b      	adds	r3, r7, r5
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b29b      	uxth	r3, r3
 8001654:	3304      	adds	r3, #4
 8001656:	b29b      	uxth	r3, r3
 8001658:	4a0b      	ldr	r2, [pc, #44]	; (8001688 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 800165a:	490b      	ldr	r1, [pc, #44]	; (8001688 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 800165c:	480c      	ldr	r0, [pc, #48]	; (8001690 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x98>)
 800165e:	2405      	movs	r4, #5
 8001660:	9400      	str	r4, [sp, #0]
 8001662:	f004 ffef 	bl	8006644 <HAL_SPI_TransmitReceive>
  memcpy(buffer, OutBuffer + 4, size);
 8001666:	490b      	ldr	r1, [pc, #44]	; (8001694 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x9c>)
 8001668:	197b      	adds	r3, r7, r5
 800166a:	781a      	ldrb	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	0018      	movs	r0, r3
 8001670:	f008 f99c 	bl	80099ac <memcpy>

  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <_ZN9SX1280Hal12ReadRegisterEtPhh+0x94>)
 8001676:	2201      	movs	r2, #1
 8001678:	2101      	movs	r1, #1
 800167a:	0018      	movs	r0, r3
 800167c:	f003 fe97 	bl	80053ae <HAL_GPIO_WritePin>
}
 8001680:	46c0      	nop			; (mov r8, r8)
 8001682:	46bd      	mov	sp, r7
 8001684:	b004      	add	sp, #16
 8001686:	bdb0      	pop	{r4, r5, r7, pc}
 8001688:	200000b8 	.word	0x200000b8
 800168c:	50000400 	.word	0x50000400
 8001690:	2000040c 	.word	0x2000040c
 8001694:	200000bc 	.word	0x200000bc

08001698 <_ZN9SX1280Hal12ReadRegisterEt>:

uint8_t SX1280Hal::ReadRegister(uint16_t address) {
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	000a      	movs	r2, r1
 80016a2:	1cbb      	adds	r3, r7, #2
 80016a4:	801a      	strh	r2, [r3, #0]
  uint8_t data;
  ReadRegister(address, &data, 1);
 80016a6:	240f      	movs	r4, #15
 80016a8:	193a      	adds	r2, r7, r4
 80016aa:	1cbb      	adds	r3, r7, #2
 80016ac:	8819      	ldrh	r1, [r3, #0]
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	2301      	movs	r3, #1
 80016b2:	f7ff ffa1 	bl	80015f8 <_ZN9SX1280Hal12ReadRegisterEtPhh>
  return data;
 80016b6:	193b      	adds	r3, r7, r4
 80016b8:	781b      	ldrb	r3, [r3, #0]
}
 80016ba:	0018      	movs	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	b005      	add	sp, #20
 80016c0:	bd90      	pop	{r4, r7, pc}
	...

080016c4 <_ZN9SX1280Hal11WriteBufferEhPVhh>:

void SX1280Hal::WriteBuffer(uint8_t offset, volatile uint8_t *buffer,
                            uint8_t size) {
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b089      	sub	sp, #36	; 0x24
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	0008      	movs	r0, r1
 80016ce:	607a      	str	r2, [r7, #4]
 80016d0:	0019      	movs	r1, r3
 80016d2:	240b      	movs	r4, #11
 80016d4:	193b      	adds	r3, r7, r4
 80016d6:	1c02      	adds	r2, r0, #0
 80016d8:	701a      	strb	r2, [r3, #0]
 80016da:	230a      	movs	r3, #10
 80016dc:	18fb      	adds	r3, r7, r3
 80016de:	1c0a      	adds	r2, r1, #0
 80016e0:	701a      	strb	r2, [r3, #0]
  OutBuffer[0] = SX1280_RADIO_WRITE_BUFFER;
 80016e2:	4b1e      	ldr	r3, [pc, #120]	; (800175c <_ZN9SX1280Hal11WriteBufferEhPVhh+0x98>)
 80016e4:	221a      	movs	r2, #26
 80016e6:	701a      	strb	r2, [r3, #0]
  OutBuffer[1] = offset;
 80016e8:	4b1c      	ldr	r3, [pc, #112]	; (800175c <_ZN9SX1280Hal11WriteBufferEhPVhh+0x98>)
 80016ea:	193a      	adds	r2, r7, r4
 80016ec:	7812      	ldrb	r2, [r2, #0]
 80016ee:	705a      	strb	r2, [r3, #1]

  for (int i = 0; i < size; i++) {
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	230a      	movs	r3, #10
 80016f6:	18fb      	adds	r3, r7, r3
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	da0c      	bge.n	800171a <_ZN9SX1280Hal11WriteBufferEhPVhh+0x56>
    OutBuffer[i + 2] = buffer[i];
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	18d2      	adds	r2, r2, r3
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3302      	adds	r3, #2
 800170a:	7812      	ldrb	r2, [r2, #0]
 800170c:	b2d1      	uxtb	r1, r2
 800170e:	4a13      	ldr	r2, [pc, #76]	; (800175c <_ZN9SX1280Hal11WriteBufferEhPVhh+0x98>)
 8001710:	54d1      	strb	r1, [r2, r3]
  for (int i = 0; i < size; i++) {
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	3301      	adds	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	e7ec      	b.n	80016f4 <_ZN9SX1280Hal11WriteBufferEhPVhh+0x30>
  }

  WaitOnBusy();
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	0018      	movs	r0, r3
 800171e:	f000 f877 	bl	8001810 <_ZN9SX1280Hal10WaitOnBusyEv>

  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <_ZN9SX1280Hal11WriteBufferEhPVhh+0x9c>)
 8001724:	2200      	movs	r2, #0
 8001726:	2101      	movs	r1, #1
 8001728:	0018      	movs	r0, r3
 800172a:	f003 fe40 	bl	80053ae <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer, size + 2, 5);
 800172e:	230a      	movs	r3, #10
 8001730:	18fb      	adds	r3, r7, r3
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	b29b      	uxth	r3, r3
 8001736:	3302      	adds	r3, #2
 8001738:	b29b      	uxth	r3, r3
 800173a:	4a08      	ldr	r2, [pc, #32]	; (800175c <_ZN9SX1280Hal11WriteBufferEhPVhh+0x98>)
 800173c:	4907      	ldr	r1, [pc, #28]	; (800175c <_ZN9SX1280Hal11WriteBufferEhPVhh+0x98>)
 800173e:	4809      	ldr	r0, [pc, #36]	; (8001764 <_ZN9SX1280Hal11WriteBufferEhPVhh+0xa0>)
 8001740:	2405      	movs	r4, #5
 8001742:	9400      	str	r4, [sp, #0]
 8001744:	f004 ff7e 	bl	8006644 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <_ZN9SX1280Hal11WriteBufferEhPVhh+0x9c>)
 800174a:	2201      	movs	r2, #1
 800174c:	2101      	movs	r1, #1
 800174e:	0018      	movs	r0, r3
 8001750:	f003 fe2d 	bl	80053ae <HAL_GPIO_WritePin>
}
 8001754:	46c0      	nop			; (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	b007      	add	sp, #28
 800175a:	bd90      	pop	{r4, r7, pc}
 800175c:	200000b8 	.word	0x200000b8
 8001760:	50000400 	.word	0x50000400
 8001764:	2000040c 	.word	0x2000040c

08001768 <_ZN9SX1280Hal10ReadBufferEhPVhh>:

void SX1280Hal::ReadBuffer(uint8_t offset, volatile uint8_t *buffer,
                           uint8_t size) {
 8001768:	b5b0      	push	{r4, r5, r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af02      	add	r7, sp, #8
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	0008      	movs	r0, r1
 8001772:	607a      	str	r2, [r7, #4]
 8001774:	0019      	movs	r1, r3
 8001776:	240b      	movs	r4, #11
 8001778:	193b      	adds	r3, r7, r4
 800177a:	1c02      	adds	r2, r0, #0
 800177c:	701a      	strb	r2, [r3, #0]
 800177e:	250a      	movs	r5, #10
 8001780:	197b      	adds	r3, r7, r5
 8001782:	1c0a      	adds	r2, r1, #0
 8001784:	701a      	strb	r2, [r3, #0]
  OutBuffer[0] = SX1280_RADIO_READ_BUFFER;
 8001786:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 8001788:	221b      	movs	r2, #27
 800178a:	701a      	strb	r2, [r3, #0]
  OutBuffer[1] = offset;
 800178c:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 800178e:	193a      	adds	r2, r7, r4
 8001790:	7812      	ldrb	r2, [r2, #0]
 8001792:	705a      	strb	r2, [r3, #1]
  OutBuffer[2] = 0x00;
 8001794:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 8001796:	2200      	movs	r2, #0
 8001798:	709a      	strb	r2, [r3, #2]

  WaitOnBusy();
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	0018      	movs	r0, r3
 800179e:	f000 f837 	bl	8001810 <_ZN9SX1280Hal10WaitOnBusyEv>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80017a2:	4b19      	ldr	r3, [pc, #100]	; (8001808 <_ZN9SX1280Hal10ReadBufferEhPVhh+0xa0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	2101      	movs	r1, #1
 80017a8:	0018      	movs	r0, r3
 80017aa:	f003 fe00 	bl	80053ae <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer, size + 3, 5);
 80017ae:	197b      	adds	r3, r7, r5
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	3303      	adds	r3, #3
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	4a12      	ldr	r2, [pc, #72]	; (8001804 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 80017ba:	4912      	ldr	r1, [pc, #72]	; (8001804 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 80017bc:	4813      	ldr	r0, [pc, #76]	; (800180c <_ZN9SX1280Hal10ReadBufferEhPVhh+0xa4>)
 80017be:	2405      	movs	r4, #5
 80017c0:	9400      	str	r4, [sp, #0]
 80017c2:	f004 ff3f 	bl	8006644 <HAL_SPI_TransmitReceive>

  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <_ZN9SX1280Hal10ReadBufferEhPVhh+0xa0>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	2101      	movs	r1, #1
 80017cc:	0018      	movs	r0, r3
 80017ce:	f003 fdee 	bl	80053ae <HAL_GPIO_WritePin>

  for (int i = 0; i < size; i++) {
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	230a      	movs	r3, #10
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	429a      	cmp	r2, r3
 80017e0:	da0b      	bge.n	80017fa <_ZN9SX1280Hal10ReadBufferEhPVhh+0x92>
    buffer[i] = OutBuffer[i + 3];
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	1cda      	adds	r2, r3, #3
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	18cb      	adds	r3, r1, r3
 80017ec:	4905      	ldr	r1, [pc, #20]	; (8001804 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 80017ee:	5c8a      	ldrb	r2, [r1, r2]
 80017f0:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < size; i++) {
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3301      	adds	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	e7ed      	b.n	80017d6 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x6e>
  }
}
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b006      	add	sp, #24
 8001800:	bdb0      	pop	{r4, r5, r7, pc}
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	200000b8 	.word	0x200000b8
 8001808:	50000400 	.word	0x50000400
 800180c:	2000040c 	.word	0x2000040c

08001810 <_ZN9SX1280Hal10WaitOnBusyEv>:

bool SX1280Hal::WaitOnBusy() {
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t startTime = HAL_GetTick();
 8001818:	f002 fdbc 	bl	8004394 <HAL_GetTick>
 800181c:	0003      	movs	r3, r0
 800181e:	60fb      	str	r3, [r7, #12]

  while (HAL_GPIO_ReadPin(BUSY_GPIO_Port,
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <_ZN9SX1280Hal10WaitOnBusyEv+0x50>)
 8001822:	2102      	movs	r1, #2
 8001824:	0018      	movs	r0, r3
 8001826:	f003 fda5 	bl	8005374 <HAL_GPIO_ReadPin>
 800182a:	0003      	movs	r3, r0
                          BUSY_Pin)) // wait until not busy or until timeout
 800182c:	1e5a      	subs	r2, r3, #1
 800182e:	4193      	sbcs	r3, r2
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00f      	beq.n	8001856 <_ZN9SX1280Hal10WaitOnBusyEv+0x46>
  {
    if ((HAL_GetTick() - startTime) >= 2) // 2ms timeout
 8001836:	f002 fdad 	bl	8004394 <HAL_GetTick>
 800183a:	0002      	movs	r2, r0
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2201      	movs	r2, #1
 8001842:	429a      	cmp	r2, r3
 8001844:	419b      	sbcs	r3, r3
 8001846:	425b      	negs	r3, r3
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <_ZN9SX1280Hal10WaitOnBusyEv+0x42>
    {
      return false;
 800184e:	2300      	movs	r3, #0
 8001850:	e002      	b.n	8001858 <_ZN9SX1280Hal10WaitOnBusyEv+0x48>
    } else {
      asm("NOP");
 8001852:	46c0      	nop			; (mov r8, r8)
  while (HAL_GPIO_ReadPin(BUSY_GPIO_Port,
 8001854:	e7e4      	b.n	8001820 <_ZN9SX1280Hal10WaitOnBusyEv+0x10>
    }
  }
  return true;
 8001856:	2301      	movs	r3, #1
}
 8001858:	0018      	movs	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	b004      	add	sp, #16
 800185e:	bd80      	pop	{r7, pc}
 8001860:	50000400 	.word	0x50000400

08001864 <_ZN9SX1280Hal8TXenableEv>:

void SX1280Hal::TXenable() {
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  // Enable Front End
  HAL_GPIO_WritePin(FE_EN_GPIO_Port, FE_EN_Pin, GPIO_PIN_SET);
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	0059      	lsls	r1, r3, #1
 8001870:	23a0      	movs	r3, #160	; 0xa0
 8001872:	05db      	lsls	r3, r3, #23
 8001874:	2201      	movs	r2, #1
 8001876:	0018      	movs	r0, r3
 8001878:	f003 fd99 	bl	80053ae <HAL_GPIO_WritePin>

  // Enable TX
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_SET);
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <_ZN9SX1280Hal8TXenableEv+0x3c>)
 800187e:	2201      	movs	r2, #1
 8001880:	2140      	movs	r1, #64	; 0x40
 8001882:	0018      	movs	r0, r3
 8001884:	f003 fd93 	bl	80053ae <HAL_GPIO_WritePin>

  // Disable RX
  HAL_GPIO_WritePin(RX_EN_GPIO_Port, RX_EN_Pin, GPIO_PIN_RESET);
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	0119      	lsls	r1, r3, #4
 800188c:	23a0      	movs	r3, #160	; 0xa0
 800188e:	05db      	lsls	r3, r3, #23
 8001890:	2200      	movs	r2, #0
 8001892:	0018      	movs	r0, r3
 8001894:	f003 fd8b 	bl	80053ae <HAL_GPIO_WritePin>
}
 8001898:	46c0      	nop			; (mov r8, r8)
 800189a:	46bd      	mov	sp, r7
 800189c:	b002      	add	sp, #8
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	50000800 	.word	0x50000800

080018a4 <_ZN9SX1280Hal8RXenableEv>:

void SX1280Hal::RXenable() {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  // Enable Front End
  HAL_GPIO_WritePin(FE_EN_GPIO_Port, FE_EN_Pin, GPIO_PIN_SET);
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	0059      	lsls	r1, r3, #1
 80018b0:	23a0      	movs	r3, #160	; 0xa0
 80018b2:	05db      	lsls	r3, r3, #23
 80018b4:	2201      	movs	r2, #1
 80018b6:	0018      	movs	r0, r3
 80018b8:	f003 fd79 	bl	80053ae <HAL_GPIO_WritePin>

  // Disable TX
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <_ZN9SX1280Hal8RXenableEv+0x3c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	2140      	movs	r1, #64	; 0x40
 80018c2:	0018      	movs	r0, r3
 80018c4:	f003 fd73 	bl	80053ae <HAL_GPIO_WritePin>

  // Enable RX
  HAL_GPIO_WritePin(RX_EN_GPIO_Port, RX_EN_Pin, GPIO_PIN_SET);
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	0119      	lsls	r1, r3, #4
 80018cc:	23a0      	movs	r3, #160	; 0xa0
 80018ce:	05db      	lsls	r3, r3, #23
 80018d0:	2201      	movs	r2, #1
 80018d2:	0018      	movs	r0, r3
 80018d4:	f003 fd6b 	bl	80053ae <HAL_GPIO_WritePin>
}
 80018d8:	46c0      	nop			; (mov r8, r8)
 80018da:	46bd      	mov	sp, r7
 80018dc:	b002      	add	sp, #8
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	50000800 	.word	0x50000800

080018e4 <_ZN9SX1280Hal11TXRXdisableEv>:

void SX1280Hal::TXRXdisable() {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  // Disable Front End
  HAL_GPIO_WritePin(FE_EN_GPIO_Port, FE_EN_Pin, GPIO_PIN_RESET);
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	0059      	lsls	r1, r3, #1
 80018f0:	23a0      	movs	r3, #160	; 0xa0
 80018f2:	05db      	lsls	r3, r3, #23
 80018f4:	2200      	movs	r2, #0
 80018f6:	0018      	movs	r0, r3
 80018f8:	f003 fd59 	bl	80053ae <HAL_GPIO_WritePin>

  // Disable TX
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <_ZN9SX1280Hal11TXRXdisableEv+0x3c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	2140      	movs	r1, #64	; 0x40
 8001902:	0018      	movs	r0, r3
 8001904:	f003 fd53 	bl	80053ae <HAL_GPIO_WritePin>

  // Disable RX
  HAL_GPIO_WritePin(RX_EN_GPIO_Port, RX_EN_Pin, GPIO_PIN_RESET);
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	0119      	lsls	r1, r3, #4
 800190c:	23a0      	movs	r3, #160	; 0xa0
 800190e:	05db      	lsls	r3, r3, #23
 8001910:	2200      	movs	r2, #0
 8001912:	0018      	movs	r0, r3
 8001914:	f003 fd4b 	bl	80053ae <HAL_GPIO_WritePin>
}
 8001918:	46c0      	nop			; (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	b002      	add	sp, #8
 800191e:	bd80      	pop	{r7, pc}
 8001920:	50000800 	.word	0x50000800

08001924 <HAL_GPIO_EXTI_Rising_Callback>:

// EXTI External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	0002      	movs	r2, r0
 800192c:	1dbb      	adds	r3, r7, #6
 800192e:	801a      	strh	r2, [r3, #0]
  if (GPIO_Pin == DIO1_Pin) //
 8001930:	1dbb      	adds	r3, r7, #6
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	2b20      	cmp	r3, #32
 8001936:	d101      	bne.n	800193c <HAL_GPIO_EXTI_Rising_Callback+0x18>
  {
    SX1280Driver::IsrCallback();
 8001938:	f7ff fc94 	bl	8001264 <_ZN12SX1280Driver11IsrCallbackEv>
    // if (SX1280Hal::RadioIsrCallback) SX1280Hal::RadioIsrCallback();
  }
}
 800193c:	46c0      	nop			; (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	b002      	add	sp, #8
 8001942:	bd80      	pop	{r7, pc}

08001944 <_ZN6Parser5resetEv>:
  static void cmdGNSSLoc(uint8_t *args, uint32_t length);
  static void cmdGNSSTime(uint8_t *args, uint32_t length);
  static void cmdGNSSInfo(uint8_t *args, uint32_t length);

private:
  void reset() {
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
    bufferIndex = 0;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	615a      	str	r2, [r3, #20]
    validSize = false;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	761a      	strb	r2, [r3, #24]
    opCodeIndex = -1;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	4252      	negs	r2, r2
 800195e:	61da      	str	r2, [r3, #28]
  }
 8001960:	46c0      	nop			; (mov r8, r8)
 8001962:	46bd      	mov	sp, r7
 8001964:	b002      	add	sp, #8
 8001966:	bd80      	pop	{r7, pc}

08001968 <_ZN6Parser5parseEv>:

#include "Parser.h"
#include "common.h"

void Parser::parse() {
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

  cmd_table[opCodeIndex].cmd(buffer, bufferIndex);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	3304      	adds	r3, #4
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	18d3      	adds	r3, r2, r3
 800197c:	3308      	adds	r3, #8
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	0019      	movs	r1, r3
 8001988:	4790      	blx	r2

  /* Reset the parser buffer */
  reset();
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	0018      	movs	r0, r3
 800198e:	f7ff ffd9 	bl	8001944 <_ZN6Parser5resetEv>
}
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	46bd      	mov	sp, r7
 8001996:	b002      	add	sp, #8
 8001998:	bd80      	pop	{r7, pc}

0800199a <_ZN6Parser14getOpCodeIndexEh>:

int32_t Parser::getOpCodeIndex(uint8_t opCode) {
 800199a:	b580      	push	{r7, lr}
 800199c:	b084      	sub	sp, #16
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	000a      	movs	r2, r1
 80019a4:	1cfb      	adds	r3, r7, #3
 80019a6:	701a      	strb	r2, [r3, #0]
  for (int32_t i = 0; i < CMD_NUMBER; i++) {
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2b0d      	cmp	r3, #13
 80019b0:	dc10      	bgt.n	80019d4 <_ZN6Parser14getOpCodeIndexEh+0x3a>
    if (opCode == cmd_table[i].identifier)
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	3304      	adds	r3, #4
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	18d3      	adds	r3, r2, r3
 80019bc:	3304      	adds	r3, #4
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	1cfa      	adds	r2, r7, #3
 80019c2:	7812      	ldrb	r2, [r2, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d101      	bne.n	80019cc <_ZN6Parser14getOpCodeIndexEh+0x32>
      return i;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	e005      	b.n	80019d8 <_ZN6Parser14getOpCodeIndexEh+0x3e>
  for (int32_t i = 0; i < CMD_NUMBER; i++) {
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	3301      	adds	r3, #1
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	e7eb      	b.n	80019ac <_ZN6Parser14getOpCodeIndexEh+0x12>
  }
  return -1;
 80019d4:	2301      	movs	r3, #1
 80019d6:	425b      	negs	r3, r3
}
 80019d8:	0018      	movs	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	b004      	add	sp, #16
 80019de:	bd80      	pop	{r7, pc}

080019e0 <_ZN6Parser7processEh>:

void Parser::process(uint8_t ch) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	000a      	movs	r2, r1
 80019ea:	1cfb      	adds	r3, r7, #3
 80019ec:	701a      	strb	r2, [r3, #0]
  if (opCodeIndex < 0) {
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	da18      	bge.n	8001a28 <_ZN6Parser7processEh+0x48>
    opCode = ch;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	1cfa      	adds	r2, r7, #3
 80019fa:	2120      	movs	r1, #32
 80019fc:	7812      	ldrb	r2, [r2, #0]
 80019fe:	545a      	strb	r2, [r3, r1]
    opCodeIndex = getOpCodeIndex(opCode);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2220      	movs	r2, #32
 8001a04:	5c9a      	ldrb	r2, [r3, r2]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	0011      	movs	r1, r2
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f7ff ffc5 	bl	800199a <_ZN6Parser14getOpCodeIndexEh>
 8001a10:	0002      	movs	r2, r0
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	61da      	str	r2, [r3, #28]
    if (opCodeIndex < 0) {
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	da2e      	bge.n	8001a7c <_ZN6Parser7processEh+0x9c>
      reset();
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	0018      	movs	r0, r3
 8001a22:	f7ff ff8f 	bl	8001944 <_ZN6Parser5resetEv>
 8001a26:	e029      	b.n	8001a7c <_ZN6Parser7processEh+0x9c>
    }
  } else if (validSize == false) {
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	7e1b      	ldrb	r3, [r3, #24]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d112      	bne.n	8001a56 <_ZN6Parser7processEh+0x76>
    length = ch;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	1cfa      	adds	r2, r7, #3
 8001a34:	2121      	movs	r1, #33	; 0x21
 8001a36:	7812      	ldrb	r2, [r2, #0]
 8001a38:	545a      	strb	r2, [r3, r1]
    if (length <= 16)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2221      	movs	r2, #33	; 0x21
 8001a3e:	5c9b      	ldrb	r3, [r3, r2]
 8001a40:	2b10      	cmp	r3, #16
 8001a42:	d803      	bhi.n	8001a4c <_ZN6Parser7processEh+0x6c>
      validSize = true;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	761a      	strb	r2, [r3, #24]
 8001a4a:	e017      	b.n	8001a7c <_ZN6Parser7processEh+0x9c>
    else {
      reset();
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f7ff ff78 	bl	8001944 <_ZN6Parser5resetEv>
 8001a54:	e012      	b.n	8001a7c <_ZN6Parser7processEh+0x9c>
    }
  } else if ((length - bufferIndex) > 0) {
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2221      	movs	r2, #33	; 0x21
 8001a5a:	5c9b      	ldrb	r3, [r3, r2]
 8001a5c:	001a      	movs	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d00a      	beq.n	8001a7c <_ZN6Parser7processEh+0x9c>
    buffer[bufferIndex] = ch;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	1cf9      	adds	r1, r7, #3
 8001a6e:	7809      	ldrb	r1, [r1, #0]
 8001a70:	54d1      	strb	r1, [r2, r3]
    bufferIndex++;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	615a      	str	r2, [r3, #20]
  }

  if ((length - bufferIndex) == 0 && validSize) {
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2221      	movs	r2, #33	; 0x21
 8001a80:	5c9b      	ldrb	r3, [r3, r2]
 8001a82:	001a      	movs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d107      	bne.n	8001a9c <_ZN6Parser7processEh+0xbc>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	7e1b      	ldrb	r3, [r3, #24]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <_ZN6Parser7processEh+0xbc>
    parse();
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	0018      	movs	r0, r3
 8001a98:	f7ff ff66 	bl	8001968 <_ZN6Parser5parseEv>
  }
}
 8001a9c:	46c0      	nop			; (mov r8, r8)
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b002      	add	sp, #8
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <_ZN6Parser12cmdDirectionEPhm>:

void Parser::cmdDirection(uint8_t *args, uint32_t length) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  if (length != 1)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d10f      	bne.n	8001ad4 <_ZN6Parser12cmdDirectionEPhm+0x30>
    return;

  if (args[0] == TX || args[0] == RX) {
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <_ZN6Parser12cmdDirectionEPhm+0x20>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d108      	bne.n	8001ad6 <_ZN6Parser12cmdDirectionEPhm+0x32>
    Link.setDirection((transmission_direction_e)args[0]);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	781a      	ldrb	r2, [r3, #0]
 8001ac8:	4b04      	ldr	r3, [pc, #16]	; (8001adc <_ZN6Parser12cmdDirectionEPhm+0x38>)
 8001aca:	0011      	movs	r1, r2
 8001acc:	0018      	movs	r0, r3
 8001ace:	f001 f838 	bl	8002b42 <_ZN12Transmission12setDirectionE24transmission_direction_e>
 8001ad2:	e000      	b.n	8001ad6 <_ZN6Parser12cmdDirectionEPhm+0x32>
    return;
 8001ad4:	46c0      	nop			; (mov r8, r8)
  }
}
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b002      	add	sp, #8
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000100 	.word	0x20000100

08001ae0 <_ZN6Parser9cmdPAGainEPhm>:

void Parser::cmdPAGain(uint8_t *args, uint32_t length) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  if (length != 1)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d10c      	bne.n	8001b0a <_ZN6Parser9cmdPAGainEPhm+0x2a>
    return;

  if (args[0] < 50) {
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b31      	cmp	r3, #49	; 0x31
 8001af6:	d809      	bhi.n	8001b0c <_ZN6Parser9cmdPAGainEPhm+0x2c>
    Link.setPAGain(args[0]);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	b25a      	sxtb	r2, r3
 8001afe:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <_ZN6Parser9cmdPAGainEPhm+0x34>)
 8001b00:	0011      	movs	r1, r2
 8001b02:	0018      	movs	r0, r3
 8001b04:	f001 f84d 	bl	8002ba2 <_ZN12Transmission9setPAGainEa>
 8001b08:	e000      	b.n	8001b0c <_ZN6Parser9cmdPAGainEPhm+0x2c>
    return;
 8001b0a:	46c0      	nop			; (mov r8, r8)
  }
}
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b002      	add	sp, #8
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	20000100 	.word	0x20000100

08001b18 <_ZN6Parser13cmdPowerLevelEPhm>:

void Parser::cmdPowerLevel(uint8_t *args, uint32_t length) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  if (length != 1)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d108      	bne.n	8001b3a <_ZN6Parser13cmdPowerLevelEPhm+0x22>
    return;

  Link.setPowerLevel(args[0]);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	b25a      	sxtb	r2, r3
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <_ZN6Parser13cmdPowerLevelEPhm+0x2c>)
 8001b30:	0011      	movs	r1, r2
 8001b32:	0018      	movs	r0, r3
 8001b34:	f001 f859 	bl	8002bea <_ZN12Transmission13setPowerLevelEa>
 8001b38:	e000      	b.n	8001b3c <_ZN6Parser13cmdPowerLevelEPhm+0x24>
    return;
 8001b3a:	46c0      	nop			; (mov r8, r8)
}
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b002      	add	sp, #8
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	20000100 	.word	0x20000100

08001b48 <_ZN6Parser7cmdModeEPhm>:

void Parser::cmdMode(uint8_t *args, uint32_t length) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  if (length != 1)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d107      	bne.n	8001b68 <_ZN6Parser7cmdModeEPhm+0x20>
    return;

  Link.setMode((transmission_mode_e)args[0]);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	781a      	ldrb	r2, [r3, #0]
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <_ZN6Parser7cmdModeEPhm+0x28>)
 8001b5e:	0011      	movs	r1, r2
 8001b60:	0018      	movs	r0, r3
 8001b62:	f001 f80e 	bl	8002b82 <_ZN12Transmission7setModeE19transmission_mode_e>
 8001b66:	e000      	b.n	8001b6a <_ZN6Parser7cmdModeEPhm+0x22>
    return;
 8001b68:	46c0      	nop			; (mov r8, r8)
}
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	b002      	add	sp, #8
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000100 	.word	0x20000100

08001b74 <_ZN6Parser12cmdModeIndexEPhm>:

void Parser::cmdModeIndex(uint8_t *args, uint32_t length) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  // UNUSED
}
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	46bd      	mov	sp, r7
 8001b82:	b002      	add	sp, #8
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <_ZN6Parser13cmdLinkPhraseEPhm>:

void Parser::cmdLinkPhrase(uint8_t *args, uint32_t length) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  if (length > 8)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d80a      	bhi.n	8001bae <_ZN6Parser13cmdLinkPhraseEPhm+0x26>
    return;

  if (args[0] != 0) {
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d007      	beq.n	8001bb0 <_ZN6Parser13cmdLinkPhraseEPhm+0x28>
    Link.setLinkPhrase(args, length);
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <_ZN6Parser13cmdLinkPhraseEPhm+0x30>)
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f000 ffaa 	bl	8002b00 <_ZN12Transmission13setLinkPhraseEPKhm>
 8001bac:	e000      	b.n	8001bb0 <_ZN6Parser13cmdLinkPhraseEPhm+0x28>
    return;
 8001bae:	46c0      	nop			; (mov r8, r8)
  }
}
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b002      	add	sp, #8
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	20000100 	.word	0x20000100

08001bbc <_ZN6Parser9cmdEnableEPhm>:

void Parser::cmdEnable(uint8_t *args, uint32_t length) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  if (length != 0)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d104      	bne.n	8001bd6 <_ZN6Parser9cmdEnableEPhm+0x1a>
    return;
  Link.enableTransmission();
 8001bcc:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <_ZN6Parser9cmdEnableEPhm+0x24>)
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f001 f866 	bl	8002ca0 <_ZN12Transmission18enableTransmissionEv>
 8001bd4:	e000      	b.n	8001bd8 <_ZN6Parser9cmdEnableEPhm+0x1c>
    return;
 8001bd6:	46c0      	nop			; (mov r8, r8)
}
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	b002      	add	sp, #8
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	20000100 	.word	0x20000100

08001be4 <_ZN6Parser10cmdDisableEPhm>:

void Parser::cmdDisable(uint8_t *args, uint32_t length) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  if (length != 0)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d104      	bne.n	8001bfe <_ZN6Parser10cmdDisableEPhm+0x1a>
    return;
  Link.disableTransmission();
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <_ZN6Parser10cmdDisableEPhm+0x24>)
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f001 f922 	bl	8002e40 <_ZN12Transmission19disableTransmissionEv>
 8001bfc:	e000      	b.n	8001c00 <_ZN6Parser10cmdDisableEPhm+0x1c>
    return;
 8001bfe:	46c0      	nop			; (mov r8, r8)
}
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b002      	add	sp, #8
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	20000100 	.word	0x20000100

08001c0c <_ZN6Parser5cmdTXEPhm>:

void Parser::cmdTX(uint8_t *args, uint32_t length) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  Link.writeBytes(args, length);
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <_ZN6Parser5cmdTXEPhm+0x20>)
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f000 fff4 	bl	8002c0a <_ZN12Transmission10writeBytesEPKhm>
}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	46bd      	mov	sp, r7
 8001c26:	b002      	add	sp, #8
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	20000100 	.word	0x20000100

08001c30 <_ZN6Parser5cmdRXEPhm>:

void Parser::cmdRX(uint8_t *args, uint32_t length) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  // UNUSED
}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b002      	add	sp, #8
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <_ZN6Parser7cmdInfoEPhm>:

void Parser::cmdInfo(uint8_t *args, uint32_t length) {
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6039      	str	r1, [r7, #0]
  // UNUSED
}
 8001c4c:	46c0      	nop			; (mov r8, r8)
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b002      	add	sp, #8
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <_ZN6Parser10cmdGNSSLocEPhm>:

void Parser::cmdGNSSLoc(uint8_t *args, uint32_t length) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  // UNUSED
}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b002      	add	sp, #8
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <_ZN6Parser11cmdGNSSTimeEPhm>:

void Parser::cmdGNSSTime(uint8_t *args, uint32_t length) {
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	6039      	str	r1, [r7, #0]
  // UNUSED
}
 8001c70:	46c0      	nop			; (mov r8, r8)
 8001c72:	46bd      	mov	sp, r7
 8001c74:	b002      	add	sp, #8
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <_ZN6Parser11cmdGNSSInfoEPhm>:

void Parser::cmdGNSSInfo(uint8_t *args, uint32_t length) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  // UNUSED
}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	46bd      	mov	sp, r7
 8001c86:	b002      	add	sp, #8
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <_Z12start_serialv>:
extern TinyGPSPlus gps;

static uint8_t c2;
extern uint32_t lr2;

void start_serial() {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  lr2 = HAL_GetTick();
 8001c90:	f002 fb80 	bl	8004394 <HAL_GetTick>
 8001c94:	0002      	movs	r2, r0
 8001c96:	4b05      	ldr	r3, [pc, #20]	; (8001cac <_Z12start_serialv+0x20>)
 8001c98:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&c2, 1);
 8001c9a:	4905      	ldr	r1, [pc, #20]	; (8001cb0 <_Z12start_serialv+0x24>)
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <_Z12start_serialv+0x28>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f005 fed7 	bl	8007a54 <HAL_UART_Receive_IT>
}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000670 	.word	0x20000670
 8001cb0:	200000f8 	.word	0x200000f8
 8001cb4:	2000054c 	.word	0x2000054c

08001cb8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  if (huart == &huart1) {
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <HAL_UART_RxCpltCallback+0x68>)
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d111      	bne.n	8001cec <HAL_UART_RxCpltCallback+0x34>
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&c1, 1);
 8001cc8:	4916      	ldr	r1, [pc, #88]	; (8001d24 <HAL_UART_RxCpltCallback+0x6c>)
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <HAL_UART_RxCpltCallback+0x68>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f005 fec0 	bl	8007a54 <HAL_UART_Receive_IT>
    lr1 = HAL_GetTick();
 8001cd4:	f002 fb5e 	bl	8004394 <HAL_GetTick>
 8001cd8:	0002      	movs	r2, r0
 8001cda:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <HAL_UART_RxCpltCallback+0x70>)
 8001cdc:	601a      	str	r2, [r3, #0]
    Uart1Buffer.push(c1);
 8001cde:	4911      	ldr	r1, [pc, #68]	; (8001d24 <HAL_UART_RxCpltCallback+0x6c>)
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_UART_RxCpltCallback+0x74>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f000 f82b 	bl	8001d40 <_ZN10RingBufferIhLj128EE4pushERKhb>
  } else if (huart == &huart2) {
    HAL_UART_Receive_IT(&huart2, (uint8_t *)&c2, 1);
    lr2 = HAL_GetTick();
    Uart2Buffer.push(c2);
  }
}
 8001cea:	e014      	b.n	8001d16 <HAL_UART_RxCpltCallback+0x5e>
  } else if (huart == &huart2) {
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <HAL_UART_RxCpltCallback+0x78>)
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d110      	bne.n	8001d16 <HAL_UART_RxCpltCallback+0x5e>
    HAL_UART_Receive_IT(&huart2, (uint8_t *)&c2, 1);
 8001cf4:	490f      	ldr	r1, [pc, #60]	; (8001d34 <HAL_UART_RxCpltCallback+0x7c>)
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <HAL_UART_RxCpltCallback+0x78>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f005 feaa 	bl	8007a54 <HAL_UART_Receive_IT>
    lr2 = HAL_GetTick();
 8001d00:	f002 fb48 	bl	8004394 <HAL_GetTick>
 8001d04:	0002      	movs	r2, r0
 8001d06:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <HAL_UART_RxCpltCallback+0x80>)
 8001d08:	601a      	str	r2, [r3, #0]
    Uart2Buffer.push(c2);
 8001d0a:	490a      	ldr	r1, [pc, #40]	; (8001d34 <HAL_UART_RxCpltCallback+0x7c>)
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <HAL_UART_RxCpltCallback+0x84>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	0018      	movs	r0, r3
 8001d12:	f000 f815 	bl	8001d40 <_ZN10RingBufferIhLj128EE4pushERKhb>
}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	b002      	add	sp, #8
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	200004bc 	.word	0x200004bc
 8001d24:	200002c8 	.word	0x200002c8
 8001d28:	200002cc 	.word	0x200002cc
 8001d2c:	200001b8 	.word	0x200001b8
 8001d30:	2000054c 	.word	0x2000054c
 8001d34:	200000f8 	.word	0x200000f8
 8001d38:	20000670 	.word	0x20000670
 8001d3c:	20000240 	.word	0x20000240

08001d40 <_ZN10RingBufferIhLj128EE4pushERKhb>:
* the oldest element will either be overwritten (when overwrite is true) or
* this add will have no effect (when overwrite is false).
*
* Return: true if there was room in the buffer to add this element
*/
bool push(const Type &obj, bool overwrite=false)
 8001d40:	b5b0      	push	{r4, r5, r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	1dfb      	adds	r3, r7, #7
 8001d4c:	701a      	strb	r2, [r3, #0]
{
    bool full = false;
 8001d4e:	2517      	movs	r5, #23
 8001d50:	197b      	adds	r3, r7, r5
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]

    {
        full = isFull();
 8001d56:	197c      	adds	r4, r7, r5
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f000 f837 	bl	8001dce <_ZNK10RingBufferIhLj128EE6isFullEv>
 8001d60:	0003      	movs	r3, r0
 8001d62:	7023      	strb	r3, [r4, #0]
        if (!full || overwrite) {
 8001d64:	197b      	adds	r3, r7, r5
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	4053      	eors	r3, r2
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d103      	bne.n	8001d7a <_ZN10RingBufferIhLj128EE4pushERKhb+0x3a>
 8001d72:	1dfb      	adds	r3, r7, #7
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d01f      	beq.n	8001dba <_ZN10RingBufferIhLj128EE4pushERKhb+0x7a>
            _buf[_head] = obj;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2280      	movs	r2, #128	; 0x80
 8001d7e:	589b      	ldr	r3, [r3, r2]
 8001d80:	68ba      	ldr	r2, [r7, #8]
 8001d82:	7811      	ldrb	r1, [r2, #0]
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	54d1      	strb	r1, [r2, r3]
            _head = (_head + 1)%MaxElements;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2280      	movs	r2, #128	; 0x80
 8001d8c:	589b      	ldr	r3, [r3, r2]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	227f      	movs	r2, #127	; 0x7f
 8001d92:	401a      	ands	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2180      	movs	r1, #128	; 0x80
 8001d98:	505a      	str	r2, [r3, r1]
            _numElements = full ? _numElements : (_numElements + 1);
 8001d9a:	2317      	movs	r3, #23
 8001d9c:	18fb      	adds	r3, r7, r3
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <_ZN10RingBufferIhLj128EE4pushERKhb+0x6c>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2284      	movs	r2, #132	; 0x84
 8001da8:	589b      	ldr	r3, [r3, r2]
 8001daa:	e003      	b.n	8001db4 <_ZN10RingBufferIhLj128EE4pushERKhb+0x74>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2284      	movs	r2, #132	; 0x84
 8001db0:	589b      	ldr	r3, [r3, r2]
 8001db2:	3301      	adds	r3, #1
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	2184      	movs	r1, #132	; 0x84
 8001db8:	5053      	str	r3, [r2, r1]
        }
    }


    return !full;
 8001dba:	2317      	movs	r3, #23
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	4053      	eors	r3, r2
 8001dc4:	b2db      	uxtb	r3, r3
}
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b006      	add	sp, #24
 8001dcc:	bdb0      	pop	{r4, r5, r7, pc}

08001dce <_ZNK10RingBufferIhLj128EE6isFullEv>:


/**
* Return: true if buffer is full
*/
bool isFull() const
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b084      	sub	sp, #16
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
{
    bool ret;


    {
        ret = _numElements >= MaxElements;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2284      	movs	r2, #132	; 0x84
 8001dda:	589a      	ldr	r2, [r3, r2]
 8001ddc:	200f      	movs	r0, #15
 8001dde:	183b      	adds	r3, r7, r0
 8001de0:	217f      	movs	r1, #127	; 0x7f
 8001de2:	4291      	cmp	r1, r2
 8001de4:	4192      	sbcs	r2, r2
 8001de6:	4252      	negs	r2, r2
 8001de8:	701a      	strb	r2, [r3, #0]
    }


    return ret;
 8001dea:	183b      	adds	r3, r7, r0
 8001dec:	781b      	ldrb	r3, [r3, #0]
}
 8001dee:	0018      	movs	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	b004      	add	sp, #16
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <_ZN10RawDegreesC1Ev>:
  uint16_t deg;
  uint32_t billionths;
  bool negative;

public:
  RawDegrees() : deg(0), billionths(0), negative(false) {}
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	801a      	strh	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	721a      	strb	r2, [r3, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	0018      	movs	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	b002      	add	sp, #8
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <_ZN15TinyGPSLocationC1Ev>:
    return rawLngData;
  }
  double lat();
  double lng();

  TinyGPSLocation() : valid(false), updated(false) {}
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	705a      	strb	r2, [r3, #1]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3304      	adds	r3, #4
 8001e32:	0018      	movs	r0, r3
 8001e34:	f7ff ffdf 	bl	8001df6 <_ZN10RawDegreesC1Ev>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3310      	adds	r3, #16
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f7ff ffda 	bl	8001df6 <_ZN10RawDegreesC1Ev>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	331c      	adds	r3, #28
 8001e46:	0018      	movs	r0, r3
 8001e48:	f7ff ffd5 	bl	8001df6 <_ZN10RawDegreesC1Ev>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3328      	adds	r3, #40	; 0x28
 8001e50:	0018      	movs	r0, r3
 8001e52:	f7ff ffd0 	bl	8001df6 <_ZN10RawDegreesC1Ev>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	0018      	movs	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b002      	add	sp, #8
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <_ZN11TinyGPSDateC1Ev>:
  }
  uint16_t year();
  uint8_t month();
  uint8_t day();

  TinyGPSDate() : valid(false), updated(false), date(0) {}
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	705a      	strb	r2, [r3, #1]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b002      	add	sp, #8
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <_ZN11TinyGPSTimeC1Ev>:
  uint8_t hour();
  uint8_t minute();
  uint8_t second();
  uint8_t centisecond();

  TinyGPSTime() : valid(false), updated(false), time(0) {}
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	705a      	strb	r2, [r3, #1]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b002      	add	sp, #8
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <_ZN14TinyGPSDecimalC1Ev>:
  int32_t value() {
    updated = false;
    return val;
  }

  TinyGPSDecimal() : valid(false), updated(false), val(0) {}
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	701a      	strb	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	705a      	strb	r2, [r3, #1]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	b002      	add	sp, #8
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <_ZN14TinyGPSIntegerC1Ev>:
  uint32_t value() {
    updated = false;
    return val;
  }

  TinyGPSInteger() : valid(false), updated(false), val(0) {}
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	705a      	strb	r2, [r3, #1]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	0018      	movs	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	b002      	add	sp, #8
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <_ZN12TinyGPSSpeedC1Ev>:
  uint32_t val, newval;
  void commit();
  void set(const char *term);
};

struct TinyGPSSpeed : TinyGPSDecimal {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	0018      	movs	r0, r3
 8001efc:	f7ff ffd4 	bl	8001ea8 <_ZN14TinyGPSDecimalC1Ev>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	0018      	movs	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	b002      	add	sp, #8
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <_ZN13TinyGPSCourseC1Ev>:
  double mph() { return _GPS_MPH_PER_KNOT * value() / 100.0; }
  double mps() { return _GPS_MPS_PER_KNOT * value() / 100.0; }
  double kmph() { return _GPS_KMPH_PER_KNOT * value() / 100.0; }
};

struct TinyGPSCourse : public TinyGPSDecimal {
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7ff ffc7 	bl	8001ea8 <_ZN14TinyGPSDecimalC1Ev>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	b002      	add	sp, #8
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <_ZN15TinyGPSAltitudeC1Ev>:
  double deg() { return value() / 100.0; }
};

struct TinyGPSAltitude : TinyGPSDecimal {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f7ff ffba 	bl	8001ea8 <_ZN14TinyGPSDecimalC1Ev>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	0018      	movs	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	b002      	add	sp, #8
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <_ZN11TinyGPSHDOPC1Ev>:
  double miles() { return _GPS_MILES_PER_METER * value() / 100.0; }
  double kilometers() { return _GPS_KM_PER_METER * value() / 100.0; }
  double feet() { return _GPS_FEET_PER_METER * value() / 100.0; }
};

struct TinyGPSHDOP : TinyGPSDecimal {
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f7ff ffad 	bl	8001ea8 <_ZN14TinyGPSDecimalC1Ev>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	0018      	movs	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	b002      	add	sp, #8
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <_ZN11TinyGPSPlusC1Ev>:
#define _GPRMCterm "GPRMC"
#define _GPGGAterm "GPGGA"
#define _GNRMCterm "GNRMC"
#define _GNGGAterm "GNGGA"

TinyGPSPlus::TinyGPSPlus()
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
    : parity(0), isChecksumTerm(false), curSentenceType(GPS_SENTENCE_OTHER),
      curTermNumber(0), curTermOffset(0), sentenceHasFix(false), customElts(0),
      customCandidates(0), encodedCharCount(0), sentencesWithFixCount(0),
      failedChecksumCount(0), passedChecksumCount(0) {
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	0018      	movs	r0, r3
 8001f64:	f7ff ff59 	bl	8001e1a <_ZN15TinyGPSLocationC1Ev>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3338      	adds	r3, #56	; 0x38
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f7ff ff77 	bl	8001e60 <_ZN11TinyGPSDateC1Ev>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3348      	adds	r3, #72	; 0x48
 8001f76:	0018      	movs	r0, r3
 8001f78:	f7ff ff84 	bl	8001e84 <_ZN11TinyGPSTimeC1Ev>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3358      	adds	r3, #88	; 0x58
 8001f80:	0018      	movs	r0, r3
 8001f82:	f7ff ffb5 	bl	8001ef0 <_ZN12TinyGPSSpeedC1Ev>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3368      	adds	r3, #104	; 0x68
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f7ff ffbd 	bl	8001f0a <_ZN13TinyGPSCourseC1Ev>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3378      	adds	r3, #120	; 0x78
 8001f94:	0018      	movs	r0, r3
 8001f96:	f7ff ffc5 	bl	8001f24 <_ZN15TinyGPSAltitudeC1Ev>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3388      	adds	r3, #136	; 0x88
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	f7ff ff94 	bl	8001ecc <_ZN14TinyGPSIntegerC1Ev>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3398      	adds	r3, #152	; 0x98
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f7ff ffc8 	bl	8001f3e <_ZN11TinyGPSHDOPC1Ev>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	22a8      	movs	r2, #168	; 0xa8
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	5499      	strb	r1, [r3, r2]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	22a9      	movs	r2, #169	; 0xa9
 8001fba:	2100      	movs	r1, #0
 8001fbc:	5499      	strb	r1, [r3, r2]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	22b9      	movs	r2, #185	; 0xb9
 8001fc2:	2102      	movs	r1, #2
 8001fc4:	5499      	strb	r1, [r3, r2]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	22ba      	movs	r2, #186	; 0xba
 8001fca:	2100      	movs	r1, #0
 8001fcc:	5499      	strb	r1, [r3, r2]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	22bb      	movs	r2, #187	; 0xbb
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	5499      	strb	r1, [r3, r2]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	22bc      	movs	r2, #188	; 0xbc
 8001fda:	2100      	movs	r1, #0
 8001fdc:	5499      	strb	r1, [r3, r2]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	22c0      	movs	r2, #192	; 0xc0
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	5099      	str	r1, [r3, r2]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	22c4      	movs	r2, #196	; 0xc4
 8001fea:	2100      	movs	r1, #0
 8001fec:	5099      	str	r1, [r3, r2]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	22c8      	movs	r2, #200	; 0xc8
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	5099      	str	r1, [r3, r2]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	22cc      	movs	r2, #204	; 0xcc
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	5099      	str	r1, [r3, r2]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	22d0      	movs	r2, #208	; 0xd0
 8002002:	2100      	movs	r1, #0
 8002004:	5099      	str	r1, [r3, r2]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	22d4      	movs	r2, #212	; 0xd4
 800200a:	2100      	movs	r1, #0
 800200c:	5099      	str	r1, [r3, r2]
  term[0] = '\0';
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	22aa      	movs	r2, #170	; 0xaa
 8002012:	2100      	movs	r1, #0
 8002014:	5499      	strb	r1, [r3, r2]
}
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	0018      	movs	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	b002      	add	sp, #8
 800201e:	bd80      	pop	{r7, pc}

08002020 <_ZN11TinyGPSPlus6encodeEc>:

//
// public methods
//

bool TinyGPSPlus::encode(char c) {
 8002020:	b590      	push	{r4, r7, lr}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	000a      	movs	r2, r1
 800202a:	1cfb      	adds	r3, r7, #3
 800202c:	701a      	strb	r2, [r3, #0]
  ++encodedCharCount;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	22c8      	movs	r2, #200	; 0xc8
 8002032:	589b      	ldr	r3, [r3, r2]
 8002034:	1c5a      	adds	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	21c8      	movs	r1, #200	; 0xc8
 800203a:	505a      	str	r2, [r3, r1]

  switch (c) {
 800203c:	1cfb      	adds	r3, r7, #3
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	3b0a      	subs	r3, #10
 8002042:	2b22      	cmp	r3, #34	; 0x22
 8002044:	d85d      	bhi.n	8002102 <_ZN11TinyGPSPlus6encodeEc+0xe2>
 8002046:	009a      	lsls	r2, r3, #2
 8002048:	4b44      	ldr	r3, [pc, #272]	; (800215c <_ZN11TinyGPSPlus6encodeEc+0x13c>)
 800204a:	18d3      	adds	r3, r2, r3
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	469f      	mov	pc, r3
  case ',': // term terminators
    parity ^= (uint8_t)c;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	22a8      	movs	r2, #168	; 0xa8
 8002054:	5c9a      	ldrb	r2, [r3, r2]
 8002056:	1cfb      	adds	r3, r7, #3
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	4053      	eors	r3, r2
 800205c:	b2d9      	uxtb	r1, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	22a8      	movs	r2, #168	; 0xa8
 8002062:	5499      	strb	r1, [r3, r2]
  case '\r':
  case '\n':
  case '*': {
    bool isValidSentence = false;
 8002064:	200f      	movs	r0, #15
 8002066:	183b      	adds	r3, r7, r0
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
    if (curTermOffset < sizeof(term)) {
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	22bb      	movs	r2, #187	; 0xbb
 8002070:	5c9b      	ldrb	r3, [r3, r2]
 8002072:	2b0e      	cmp	r3, #14
 8002074:	d810      	bhi.n	8002098 <_ZN11TinyGPSPlus6encodeEc+0x78>
      term[curTermOffset] = 0;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	22bb      	movs	r2, #187	; 0xbb
 800207a:	5c9b      	ldrb	r3, [r3, r2]
 800207c:	0019      	movs	r1, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	22aa      	movs	r2, #170	; 0xaa
 8002082:	185b      	adds	r3, r3, r1
 8002084:	189b      	adds	r3, r3, r2
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
      isValidSentence = endOfTermHandler();
 800208a:	183c      	adds	r4, r7, r0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	0018      	movs	r0, r3
 8002090:	f000 f964 	bl	800235c <_ZN11TinyGPSPlus16endOfTermHandlerEv>
 8002094:	0003      	movs	r3, r0
 8002096:	7023      	strb	r3, [r4, #0]
    }
    ++curTermNumber;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	22ba      	movs	r2, #186	; 0xba
 800209c:	5c9b      	ldrb	r3, [r3, r2]
 800209e:	3301      	adds	r3, #1
 80020a0:	b2d9      	uxtb	r1, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	22ba      	movs	r2, #186	; 0xba
 80020a6:	5499      	strb	r1, [r3, r2]
    curTermOffset = 0;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	22bb      	movs	r2, #187	; 0xbb
 80020ac:	2100      	movs	r1, #0
 80020ae:	5499      	strb	r1, [r3, r2]
    isChecksumTerm = c == '*';
 80020b0:	1cfb      	adds	r3, r7, #3
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	3b2a      	subs	r3, #42	; 0x2a
 80020b6:	425a      	negs	r2, r3
 80020b8:	4153      	adcs	r3, r2
 80020ba:	b2d9      	uxtb	r1, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	22a9      	movs	r2, #169	; 0xa9
 80020c0:	5499      	strb	r1, [r3, r2]
    return isValidSentence;
 80020c2:	230f      	movs	r3, #15
 80020c4:	18fb      	adds	r3, r7, r3
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	e043      	b.n	8002152 <_ZN11TinyGPSPlus6encodeEc+0x132>
  } break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	22bb      	movs	r2, #187	; 0xbb
 80020ce:	2100      	movs	r1, #0
 80020d0:	5499      	strb	r1, [r3, r2]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	22bb      	movs	r2, #187	; 0xbb
 80020d6:	5c99      	ldrb	r1, [r3, r2]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	22ba      	movs	r2, #186	; 0xba
 80020dc:	5499      	strb	r1, [r3, r2]
    parity = 0;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	22a8      	movs	r2, #168	; 0xa8
 80020e2:	2100      	movs	r1, #0
 80020e4:	5499      	strb	r1, [r3, r2]
    curSentenceType = GPS_SENTENCE_OTHER;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	22b9      	movs	r2, #185	; 0xb9
 80020ea:	2102      	movs	r1, #2
 80020ec:	5499      	strb	r1, [r3, r2]
    isChecksumTerm = false;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	22a9      	movs	r2, #169	; 0xa9
 80020f2:	2100      	movs	r1, #0
 80020f4:	5499      	strb	r1, [r3, r2]
    sentenceHasFix = false;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	22bc      	movs	r2, #188	; 0xbc
 80020fa:	2100      	movs	r1, #0
 80020fc:	5499      	strb	r1, [r3, r2]
    return false;
 80020fe:	2300      	movs	r3, #0
 8002100:	e027      	b.n	8002152 <_ZN11TinyGPSPlus6encodeEc+0x132>

  default: // ordinary characters
    if (curTermOffset < sizeof(term) - 1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	22bb      	movs	r2, #187	; 0xbb
 8002106:	5c9b      	ldrb	r3, [r3, r2]
 8002108:	2b0d      	cmp	r3, #13
 800210a:	d80f      	bhi.n	800212c <_ZN11TinyGPSPlus6encodeEc+0x10c>
      term[curTermOffset++] = c;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	22bb      	movs	r2, #187	; 0xbb
 8002110:	5c9b      	ldrb	r3, [r3, r2]
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	b2d0      	uxtb	r0, r2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	21bb      	movs	r1, #187	; 0xbb
 800211a:	5450      	strb	r0, [r2, r1]
 800211c:	0019      	movs	r1, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	22aa      	movs	r2, #170	; 0xaa
 8002122:	185b      	adds	r3, r3, r1
 8002124:	189b      	adds	r3, r3, r2
 8002126:	1cfa      	adds	r2, r7, #3
 8002128:	7812      	ldrb	r2, [r2, #0]
 800212a:	701a      	strb	r2, [r3, #0]
    if (!isChecksumTerm)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	22a9      	movs	r2, #169	; 0xa9
 8002130:	5c9b      	ldrb	r3, [r3, r2]
 8002132:	2201      	movs	r2, #1
 8002134:	4053      	eors	r3, r2
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d009      	beq.n	8002150 <_ZN11TinyGPSPlus6encodeEc+0x130>
      parity ^= c;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	22a8      	movs	r2, #168	; 0xa8
 8002140:	5c9a      	ldrb	r2, [r3, r2]
 8002142:	1cfb      	adds	r3, r7, #3
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	4053      	eors	r3, r2
 8002148:	b2d9      	uxtb	r1, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	22a8      	movs	r2, #168	; 0xa8
 800214e:	5499      	strb	r1, [r3, r2]
    return false;
 8002150:	2300      	movs	r3, #0
  }

  return false;
}
 8002152:	0018      	movs	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	b005      	add	sp, #20
 8002158:	bd90      	pop	{r4, r7, pc}
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	0800aa10 	.word	0x0800aa10

08002160 <_ZN11TinyGPSPlus7fromHexEc>:

//
// internal utilities
//
int TinyGPSPlus::fromHex(char a) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	000a      	movs	r2, r1
 800216a:	1cfb      	adds	r3, r7, #3
 800216c:	701a      	strb	r2, [r3, #0]
  if (a >= 'A' && a <= 'F')
 800216e:	1cfb      	adds	r3, r7, #3
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b40      	cmp	r3, #64	; 0x40
 8002174:	d907      	bls.n	8002186 <_ZN11TinyGPSPlus7fromHexEc+0x26>
 8002176:	1cfb      	adds	r3, r7, #3
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b46      	cmp	r3, #70	; 0x46
 800217c:	d803      	bhi.n	8002186 <_ZN11TinyGPSPlus7fromHexEc+0x26>
    return a - 'A' + 10;
 800217e:	1cfb      	adds	r3, r7, #3
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	3b37      	subs	r3, #55	; 0x37
 8002184:	e00e      	b.n	80021a4 <_ZN11TinyGPSPlus7fromHexEc+0x44>
  else if (a >= 'a' && a <= 'f')
 8002186:	1cfb      	adds	r3, r7, #3
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b60      	cmp	r3, #96	; 0x60
 800218c:	d907      	bls.n	800219e <_ZN11TinyGPSPlus7fromHexEc+0x3e>
 800218e:	1cfb      	adds	r3, r7, #3
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b66      	cmp	r3, #102	; 0x66
 8002194:	d803      	bhi.n	800219e <_ZN11TinyGPSPlus7fromHexEc+0x3e>
    return a - 'a' + 10;
 8002196:	1cfb      	adds	r3, r7, #3
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	3b57      	subs	r3, #87	; 0x57
 800219c:	e002      	b.n	80021a4 <_ZN11TinyGPSPlus7fromHexEc+0x44>
  else
    return a - '0';
 800219e:	1cfb      	adds	r3, r7, #3
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	3b30      	subs	r3, #48	; 0x30
}
 80021a4:	0018      	movs	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b002      	add	sp, #8
 80021aa:	bd80      	pop	{r7, pc}

080021ac <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  bool negative = *term == '-';
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	781a      	ldrb	r2, [r3, #0]
 80021b8:	200b      	movs	r0, #11
 80021ba:	183b      	adds	r3, r7, r0
 80021bc:	3a2d      	subs	r2, #45	; 0x2d
 80021be:	4251      	negs	r1, r2
 80021c0:	414a      	adcs	r2, r1
 80021c2:	701a      	strb	r2, [r3, #0]
  if (negative)
 80021c4:	183b      	adds	r3, r7, r0
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d002      	beq.n	80021d2 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x26>
    ++term;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3301      	adds	r3, #1
 80021d0:	607b      	str	r3, [r7, #4]
  int32_t ret = 100 * (int32_t)atol(term);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	0018      	movs	r0, r3
 80021d6:	f007 fbb9 	bl	800994c <atol>
 80021da:	0003      	movs	r3, r0
 80021dc:	2264      	movs	r2, #100	; 0x64
 80021de:	4353      	muls	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
  while (isdigit(*term))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	3b30      	subs	r3, #48	; 0x30
 80021e8:	001a      	movs	r2, r3
 80021ea:	2109      	movs	r1, #9
 80021ec:	2300      	movs	r3, #0
 80021ee:	4291      	cmp	r1, r2
 80021f0:	415b      	adcs	r3, r3
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x54>
    ++term;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3301      	adds	r3, #1
 80021fc:	607b      	str	r3, [r7, #4]
  while (isdigit(*term))
 80021fe:	e7f0      	b.n	80021e2 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x36>
  if (*term == '.' && isdigit(term[1])) {
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b2e      	cmp	r3, #46	; 0x2e
 8002206:	d12b      	bne.n	8002260 <_ZN11TinyGPSPlus12parseDecimalEPKc+0xb4>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3301      	adds	r3, #1
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	3b30      	subs	r3, #48	; 0x30
 8002210:	001a      	movs	r2, r3
 8002212:	2109      	movs	r1, #9
 8002214:	2300      	movs	r3, #0
 8002216:	4291      	cmp	r1, r2
 8002218:	415b      	adcs	r3, r3
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d01f      	beq.n	8002260 <_ZN11TinyGPSPlus12parseDecimalEPKc+0xb4>
    ret += 10 * (term[1] - '0');
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3301      	adds	r3, #1
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	3b30      	subs	r3, #48	; 0x30
 8002228:	001a      	movs	r2, r3
 800222a:	0013      	movs	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	189b      	adds	r3, r3, r2
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	001a      	movs	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	189b      	adds	r3, r3, r2
 8002238:	60fb      	str	r3, [r7, #12]
    if (isdigit(term[2]))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3302      	adds	r3, #2
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	3b30      	subs	r3, #48	; 0x30
 8002242:	001a      	movs	r2, r3
 8002244:	2109      	movs	r1, #9
 8002246:	2300      	movs	r3, #0
 8002248:	4291      	cmp	r1, r2
 800224a:	415b      	adcs	r3, r3
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d006      	beq.n	8002260 <_ZN11TinyGPSPlus12parseDecimalEPKc+0xb4>
      ret += term[2] - '0';
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3302      	adds	r3, #2
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	3b30      	subs	r3, #48	; 0x30
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	18d3      	adds	r3, r2, r3
 800225e:	60fb      	str	r3, [r7, #12]
  }
  return negative ? -ret : ret;
 8002260:	230b      	movs	r3, #11
 8002262:	18fb      	adds	r3, r7, r3
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <_ZN11TinyGPSPlus12parseDecimalEPKc+0xc4>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	425b      	negs	r3, r3
 800226e:	e000      	b.n	8002272 <_ZN11TinyGPSPlus12parseDecimalEPKc+0xc6>
 8002270:	68fb      	ldr	r3, [r7, #12]
}
 8002272:	0018      	movs	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	b004      	add	sp, #16
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg) {
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t leftOfDecimal = (uint32_t)atol(term);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	0018      	movs	r0, r3
 800228a:	f007 fb5f 	bl	800994c <atol>
 800228e:	0003      	movs	r3, r0
 8002290:	60fb      	str	r3, [r7, #12]
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2164      	movs	r1, #100	; 0x64
 8002296:	0018      	movs	r0, r3
 8002298:	f7fd ffce 	bl	8000238 <__aeabi_uidivmod>
 800229c:	000b      	movs	r3, r1
 800229e:	001a      	movs	r2, r3
 80022a0:	210a      	movs	r1, #10
 80022a2:	187b      	adds	r3, r7, r1
 80022a4:	801a      	strh	r2, [r3, #0]
  uint32_t multiplier = 10000000UL;
 80022a6:	4b2c      	ldr	r3, [pc, #176]	; (8002358 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0xdc>)
 80022a8:	617b      	str	r3, [r7, #20]
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
 80022aa:	187b      	adds	r3, r7, r1
 80022ac:	881a      	ldrh	r2, [r3, #0]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	4353      	muls	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]

  deg.deg = (int16_t)(leftOfDecimal / 100);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2164      	movs	r1, #100	; 0x64
 80022b8:	0018      	movs	r0, r3
 80022ba:	f7fd ff37 	bl	800012c <__udivsi3>
 80022be:	0003      	movs	r3, r0
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	801a      	strh	r2, [r3, #0]

  while (isdigit(*term))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	3b30      	subs	r3, #48	; 0x30
 80022cc:	001a      	movs	r2, r3
 80022ce:	2109      	movs	r1, #9
 80022d0:	2300      	movs	r3, #0
 80022d2:	4291      	cmp	r1, r2
 80022d4:	415b      	adcs	r3, r3
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x68>
    ++term;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3301      	adds	r3, #1
 80022e0:	607b      	str	r3, [r7, #4]
  while (isdigit(*term))
 80022e2:	e7f0      	b.n	80022c6 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x4a>

  if (*term == '.')
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b2e      	cmp	r3, #46	; 0x2e
 80022ea:	d121      	bne.n	8002330 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0xb4>
    while (isdigit(*++term)) {
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3301      	adds	r3, #1
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	3b30      	subs	r3, #48	; 0x30
 80022f8:	001a      	movs	r2, r3
 80022fa:	2109      	movs	r1, #9
 80022fc:	2300      	movs	r3, #0
 80022fe:	4291      	cmp	r1, r2
 8002300:	415b      	adcs	r3, r3
 8002302:	b2db      	uxtb	r3, r3
 8002304:	1e5a      	subs	r2, r3, #1
 8002306:	4193      	sbcs	r3, r2
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d010      	beq.n	8002330 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0xb4>
      multiplier /= 10;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	210a      	movs	r1, #10
 8002312:	0018      	movs	r0, r3
 8002314:	f7fd ff0a 	bl	800012c <__udivsi3>
 8002318:	0003      	movs	r3, r0
 800231a:	617b      	str	r3, [r7, #20]
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	3b30      	subs	r3, #48	; 0x30
 8002322:	001a      	movs	r2, r3
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	4353      	muls	r3, r2
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	18d3      	adds	r3, r2, r3
 800232c:	613b      	str	r3, [r7, #16]
    while (isdigit(*++term)) {
 800232e:	e7dd      	b.n	80022ec <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x70>
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	0013      	movs	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	189b      	adds	r3, r3, r2
 8002338:	3301      	adds	r3, #1
 800233a:	2103      	movs	r1, #3
 800233c:	0018      	movs	r0, r3
 800233e:	f7fd fef5 	bl	800012c <__udivsi3>
 8002342:	0003      	movs	r3, r0
 8002344:	001a      	movs	r2, r3
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	605a      	str	r2, [r3, #4]
  deg.negative = false;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2200      	movs	r2, #0
 800234e:	721a      	strb	r2, [r3, #8]
}
 8002350:	46c0      	nop			; (mov r8, r8)
 8002352:	46bd      	mov	sp, r7
 8002354:	b006      	add	sp, #24
 8002356:	bd80      	pop	{r7, pc}
 8002358:	00989680 	.word	0x00989680

0800235c <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
#define COMBINE(sentence_type, term_number)                                    \
  (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler() {
 800235c:	b590      	push	{r4, r7, lr}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm) {
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	22a9      	movs	r2, #169	; 0xa9
 8002368:	5c9b      	ldrb	r3, [r3, r2]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d100      	bne.n	8002370 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x14>
 800236e:	e09e      	b.n	80024ae <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x152>
    uint8_t checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	22aa      	movs	r2, #170	; 0xaa
 8002374:	5c9a      	ldrb	r2, [r3, r2]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	0011      	movs	r1, r2
 800237a:	0018      	movs	r0, r3
 800237c:	f7ff fef0 	bl	8002160 <_ZN11TinyGPSPlus7fromHexEc>
 8002380:	0003      	movs	r3, r0
 8002382:	b2db      	uxtb	r3, r3
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	b2dc      	uxtb	r4, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	22ab      	movs	r2, #171	; 0xab
 800238c:	5c9a      	ldrb	r2, [r3, r2]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	0011      	movs	r1, r2
 8002392:	0018      	movs	r0, r3
 8002394:	f7ff fee4 	bl	8002160 <_ZN11TinyGPSPlus7fromHexEc>
 8002398:	0003      	movs	r3, r0
 800239a:	b2da      	uxtb	r2, r3
 800239c:	210f      	movs	r1, #15
 800239e:	187b      	adds	r3, r7, r1
 80023a0:	18a2      	adds	r2, r4, r2
 80023a2:	701a      	strb	r2, [r3, #0]
    if (checksum == parity) {
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	22a8      	movs	r2, #168	; 0xa8
 80023a8:	5c9b      	ldrb	r3, [r3, r2]
 80023aa:	187a      	adds	r2, r7, r1
 80023ac:	7812      	ldrb	r2, [r2, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d000      	beq.n	80023b4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x58>
 80023b2:	e073      	b.n	800249c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x140>
      passedChecksumCount++;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	22d4      	movs	r2, #212	; 0xd4
 80023b8:	589b      	ldr	r3, [r3, r2]
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	21d4      	movs	r1, #212	; 0xd4
 80023c0:	505a      	str	r2, [r3, r1]
      if (sentenceHasFix)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	22bc      	movs	r2, #188	; 0xbc
 80023c6:	5c9b      	ldrb	r3, [r3, r2]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d006      	beq.n	80023da <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7e>
        ++sentencesWithFixCount;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	22cc      	movs	r2, #204	; 0xcc
 80023d0:	589b      	ldr	r3, [r3, r2]
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	21cc      	movs	r1, #204	; 0xcc
 80023d8:	505a      	str	r2, [r3, r1]

      switch (curSentenceType) {
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	22b9      	movs	r2, #185	; 0xb9
 80023de:	5c9b      	ldrb	r3, [r3, r2]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d01f      	beq.n	8002424 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xc8>
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d13c      	bne.n	8002462 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x106>
      case GPS_SENTENCE_GPRMC:
        date.commit();
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3338      	adds	r3, #56	; 0x38
 80023ec:	0018      	movs	r0, r3
 80023ee:	f000 f9ee 	bl	80027ce <_ZN11TinyGPSDate6commitEv>
        time.commit();
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3348      	adds	r3, #72	; 0x48
 80023f6:	0018      	movs	r0, r3
 80023f8:	f000 fa01 	bl	80027fe <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix) {
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	22bc      	movs	r2, #188	; 0xbc
 8002400:	5c9b      	ldrb	r3, [r3, r2]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d02c      	beq.n	8002460 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x104>
          location.commit();
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	0018      	movs	r0, r3
 800240a:	f000 f999 	bl	8002740 <_ZN15TinyGPSLocation6commitEv>
          speed.commit();
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3358      	adds	r3, #88	; 0x58
 8002412:	0018      	movs	r0, r3
 8002414:	f000 fa2d 	bl	8002872 <_ZN14TinyGPSDecimal6commitEv>
          course.commit();
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3368      	adds	r3, #104	; 0x68
 800241c:	0018      	movs	r0, r3
 800241e:	f000 fa28 	bl	8002872 <_ZN14TinyGPSDecimal6commitEv>
        }
        break;
 8002422:	e01d      	b.n	8002460 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x104>
      case GPS_SENTENCE_GPGGA:
        time.commit();
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3348      	adds	r3, #72	; 0x48
 8002428:	0018      	movs	r0, r3
 800242a:	f000 f9e8 	bl	80027fe <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix) {
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	22bc      	movs	r2, #188	; 0xbc
 8002432:	5c9b      	ldrb	r3, [r3, r2]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d008      	beq.n	800244a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xee>
          location.commit();
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	0018      	movs	r0, r3
 800243c:	f000 f980 	bl	8002740 <_ZN15TinyGPSLocation6commitEv>
          altitude.commit();
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3378      	adds	r3, #120	; 0x78
 8002444:	0018      	movs	r0, r3
 8002446:	f000 fa14 	bl	8002872 <_ZN14TinyGPSDecimal6commitEv>
        }
        satellites.commit();
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3388      	adds	r3, #136	; 0x88
 800244e:	0018      	movs	r0, r3
 8002450:	f000 fa37 	bl	80028c2 <_ZN14TinyGPSInteger6commitEv>
        hdop.commit();
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3398      	adds	r3, #152	; 0x98
 8002458:	0018      	movs	r0, r3
 800245a:	f000 fa0a 	bl	8002872 <_ZN14TinyGPSDecimal6commitEv>
        break;
 800245e:	e000      	b.n	8002462 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x106>
        break;
 8002460:	46c0      	nop			; (mov r8, r8)
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	22c4      	movs	r2, #196	; 0xc4
 8002466:	589b      	ldr	r3, [r3, r2]
 8002468:	617b      	str	r3, [r7, #20]
           p != NULL &&
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d013      	beq.n	8002498 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x13c>
           strcmp(p->sentenceName, customCandidates->sentenceName) == 0;
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	21c4      	movs	r1, #196	; 0xc4
 8002478:	585b      	ldr	r3, [r3, r1]
 800247a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247c:	0019      	movs	r1, r3
 800247e:	0010      	movs	r0, r2
 8002480:	f7fd fe40 	bl	8000104 <strcmp>
 8002484:	1e03      	subs	r3, r0, #0
           p != NULL &&
 8002486:	d107      	bne.n	8002498 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x13c>
           p = p->next)
        p->commit();
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	0018      	movs	r0, r3
 800248c:	f000 fa42 	bl	8002914 <_ZN13TinyGPSCustom6commitEv>
           p = p->next)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	617b      	str	r3, [r7, #20]
      for (TinyGPSCustom *p = customCandidates;
 8002496:	e7e8      	b.n	800246a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x10e>
      return true;
 8002498:	2301      	movs	r3, #1
 800249a:	e143      	b.n	8002724 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c8>
    }

    else {
      ++failedChecksumCount;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	22d0      	movs	r2, #208	; 0xd0
 80024a0:	589b      	ldr	r3, [r3, r2]
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	21d0      	movs	r1, #208	; 0xd0
 80024a8:	505a      	str	r2, [r3, r1]
    }

    return false;
 80024aa:	2300      	movs	r3, #0
 80024ac:	e13a      	b.n	8002724 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c8>
  }

  // the first term determines the sentence type
  if (curTermNumber == 0) {
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	22ba      	movs	r2, #186	; 0xba
 80024b2:	5c9b      	ldrb	r3, [r3, r2]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d000      	beq.n	80024ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x15e>
 80024b8:	e067      	b.n	800258a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x22e>
    if (!strcmp(term, _GPRMCterm) || !strcmp(term, _GNRMCterm))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	33aa      	adds	r3, #170	; 0xaa
 80024be:	4a9b      	ldr	r2, [pc, #620]	; (800272c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3d0>)
 80024c0:	0011      	movs	r1, r2
 80024c2:	0018      	movs	r0, r3
 80024c4:	f7fd fe1e 	bl	8000104 <strcmp>
 80024c8:	1e03      	subs	r3, r0, #0
 80024ca:	d008      	beq.n	80024de <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x182>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	33aa      	adds	r3, #170	; 0xaa
 80024d0:	4a97      	ldr	r2, [pc, #604]	; (8002730 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3d4>)
 80024d2:	0011      	movs	r1, r2
 80024d4:	0018      	movs	r0, r3
 80024d6:	f7fd fe15 	bl	8000104 <strcmp>
 80024da:	1e03      	subs	r3, r0, #0
 80024dc:	d104      	bne.n	80024e8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x18c>
      curSentenceType = GPS_SENTENCE_GPRMC;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	22b9      	movs	r2, #185	; 0xb9
 80024e2:	2101      	movs	r1, #1
 80024e4:	5499      	strb	r1, [r3, r2]
 80024e6:	e01a      	b.n	800251e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1c2>
    else if (!strcmp(term, _GPGGAterm) || !strcmp(term, _GNGGAterm))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	33aa      	adds	r3, #170	; 0xaa
 80024ec:	4a91      	ldr	r2, [pc, #580]	; (8002734 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3d8>)
 80024ee:	0011      	movs	r1, r2
 80024f0:	0018      	movs	r0, r3
 80024f2:	f7fd fe07 	bl	8000104 <strcmp>
 80024f6:	1e03      	subs	r3, r0, #0
 80024f8:	d008      	beq.n	800250c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1b0>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	33aa      	adds	r3, #170	; 0xaa
 80024fe:	4a8e      	ldr	r2, [pc, #568]	; (8002738 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3dc>)
 8002500:	0011      	movs	r1, r2
 8002502:	0018      	movs	r0, r3
 8002504:	f7fd fdfe 	bl	8000104 <strcmp>
 8002508:	1e03      	subs	r3, r0, #0
 800250a:	d104      	bne.n	8002516 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ba>
      curSentenceType = GPS_SENTENCE_GPGGA;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	22b9      	movs	r2, #185	; 0xb9
 8002510:	2100      	movs	r1, #0
 8002512:	5499      	strb	r1, [r3, r2]
 8002514:	e003      	b.n	800251e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1c2>
    else
      curSentenceType = GPS_SENTENCE_OTHER;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	22b9      	movs	r2, #185	; 0xb9
 800251a:	2102      	movs	r1, #2
 800251c:	5499      	strb	r1, [r3, r2]

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	22c0      	movs	r2, #192	; 0xc0
 8002522:	589a      	ldr	r2, [r3, r2]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	21c4      	movs	r1, #196	; 0xc4
 8002528:	505a      	str	r2, [r3, r1]
         customCandidates != NULL &&
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	22c4      	movs	r2, #196	; 0xc4
 800252e:	589b      	ldr	r3, [r3, r2]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d013      	beq.n	800255c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
         strcmp(customCandidates->sentenceName, term) < 0;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	22c4      	movs	r2, #196	; 0xc4
 8002538:	589b      	ldr	r3, [r3, r2]
 800253a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	33aa      	adds	r3, #170	; 0xaa
 8002540:	0019      	movs	r1, r3
 8002542:	0010      	movs	r0, r2
 8002544:	f7fd fdde 	bl	8000104 <strcmp>
 8002548:	1e03      	subs	r3, r0, #0
         customCandidates != NULL &&
 800254a:	da07      	bge.n	800255c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
         customCandidates = customCandidates->next)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	22c4      	movs	r2, #196	; 0xc4
 8002550:	589b      	ldr	r3, [r3, r2]
 8002552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	21c4      	movs	r1, #196	; 0xc4
 8002558:	505a      	str	r2, [r3, r1]
    for (customCandidates = customElts;
 800255a:	e7e6      	b.n	800252a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ce>
      ;
    if (customCandidates != NULL &&
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	22c4      	movs	r2, #196	; 0xc4
 8002560:	589b      	ldr	r3, [r3, r2]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00f      	beq.n	8002586 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x22a>
        strcmp(customCandidates->sentenceName, term) > 0)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	22c4      	movs	r2, #196	; 0xc4
 800256a:	589b      	ldr	r3, [r3, r2]
 800256c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	33aa      	adds	r3, #170	; 0xaa
 8002572:	0019      	movs	r1, r3
 8002574:	0010      	movs	r0, r2
 8002576:	f7fd fdc5 	bl	8000104 <strcmp>
 800257a:	1e03      	subs	r3, r0, #0
    if (customCandidates != NULL &&
 800257c:	dd03      	ble.n	8002586 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x22a>
      customCandidates = NULL;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	22c4      	movs	r2, #196	; 0xc4
 8002582:	2100      	movs	r1, #0
 8002584:	5099      	str	r1, [r3, r2]

    return false;
 8002586:	2300      	movs	r3, #0
 8002588:	e0cc      	b.n	8002724 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c8>
  }

  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	22b9      	movs	r2, #185	; 0xb9
 800258e:	5c9b      	ldrb	r3, [r3, r2]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d100      	bne.n	8002596 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23a>
 8002594:	e098      	b.n	80026c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	22aa      	movs	r2, #170	; 0xaa
 800259a:	5c9b      	ldrb	r3, [r3, r2]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d100      	bne.n	80025a2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x246>
 80025a0:	e092      	b.n	80026c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    switch (COMBINE(curSentenceType, curTermNumber)) {
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	22b9      	movs	r2, #185	; 0xb9
 80025a6:	5c9b      	ldrb	r3, [r3, r2]
 80025a8:	015b      	lsls	r3, r3, #5
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	21ba      	movs	r1, #186	; 0xba
 80025ae:	5c52      	ldrb	r2, [r2, r1]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	2b29      	cmp	r3, #41	; 0x29
 80025b4:	d900      	bls.n	80025b8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x25c>
 80025b6:	e087      	b.n	80026c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
 80025b8:	009a      	lsls	r2, r3, #2
 80025ba:	4b60      	ldr	r3, [pc, #384]	; (800273c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3e0>)
 80025bc:	18d3      	adds	r3, r2, r3
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	469f      	mov	pc, r3
    case COMBINE(GPS_SENTENCE_GPRMC, 1): // Time in both sentences
    case COMBINE(GPS_SENTENCE_GPGGA, 1):
      time.setTime(term);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3348      	adds	r3, #72	; 0x48
 80025c6:	001a      	movs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	33aa      	adds	r3, #170	; 0xaa
 80025cc:	0019      	movs	r1, r3
 80025ce:	0010      	movs	r0, r2
 80025d0:	f000 f92d 	bl	800282e <_ZN11TinyGPSTime7setTimeEPKc>
      break;
 80025d4:	e078      	b.n	80026c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 2): // GPRMC validity
      sentenceHasFix = term[0] == 'A';
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	22aa      	movs	r2, #170	; 0xaa
 80025da:	5c9b      	ldrb	r3, [r3, r2]
 80025dc:	3b41      	subs	r3, #65	; 0x41
 80025de:	425a      	negs	r2, r3
 80025e0:	4153      	adcs	r3, r2
 80025e2:	b2d9      	uxtb	r1, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	22bc      	movs	r2, #188	; 0xbc
 80025e8:	5499      	strb	r1, [r3, r2]
      break;
 80025ea:	e06d      	b.n	80026c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 3): // Latitude
    case COMBINE(GPS_SENTENCE_GPGGA, 2):
      location.setLatitude(term);
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	33aa      	adds	r3, #170	; 0xaa
 80025f2:	0019      	movs	r1, r3
 80025f4:	0010      	movs	r0, r2
 80025f6:	f000 f8c8 	bl	800278a <_ZN15TinyGPSLocation11setLatitudeEPKc>
      break;
 80025fa:	e065      	b.n	80026c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 4): // N/S
    case COMBINE(GPS_SENTENCE_GPGGA, 3):
      location.rawNewLatData.negative = term[0] == 'S';
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	22aa      	movs	r2, #170	; 0xaa
 8002600:	5c9b      	ldrb	r3, [r3, r2]
 8002602:	3b53      	subs	r3, #83	; 0x53
 8002604:	425a      	negs	r2, r3
 8002606:	4153      	adcs	r3, r2
 8002608:	b2d9      	uxtb	r1, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2224      	movs	r2, #36	; 0x24
 800260e:	5499      	strb	r1, [r3, r2]
      break;
 8002610:	e05a      	b.n	80026c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 5): // Longitude
    case COMBINE(GPS_SENTENCE_GPGGA, 4):
      location.setLongitude(term);
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	33aa      	adds	r3, #170	; 0xaa
 8002618:	0019      	movs	r1, r3
 800261a:	0010      	movs	r0, r2
 800261c:	f000 f8c6 	bl	80027ac <_ZN15TinyGPSLocation12setLongitudeEPKc>
      break;
 8002620:	e052      	b.n	80026c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 6): // E/W
    case COMBINE(GPS_SENTENCE_GPGGA, 5):
      location.rawNewLngData.negative = term[0] == 'W';
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	22aa      	movs	r2, #170	; 0xaa
 8002626:	5c9b      	ldrb	r3, [r3, r2]
 8002628:	3b57      	subs	r3, #87	; 0x57
 800262a:	425a      	negs	r2, r3
 800262c:	4153      	adcs	r3, r2
 800262e:	b2d9      	uxtb	r1, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2230      	movs	r2, #48	; 0x30
 8002634:	5499      	strb	r1, [r3, r2]
      break;
 8002636:	e047      	b.n	80026c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 7): // Speed (GPRMC)
      speed.set(term);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3358      	adds	r3, #88	; 0x58
 800263c:	001a      	movs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	33aa      	adds	r3, #170	; 0xaa
 8002642:	0019      	movs	r1, r3
 8002644:	0010      	movs	r0, r2
 8002646:	f000 f92c 	bl	80028a2 <_ZN14TinyGPSDecimal3setEPKc>
      break;
 800264a:	e03d      	b.n	80026c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
      course.set(term);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3368      	adds	r3, #104	; 0x68
 8002650:	001a      	movs	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	33aa      	adds	r3, #170	; 0xaa
 8002656:	0019      	movs	r1, r3
 8002658:	0010      	movs	r0, r2
 800265a:	f000 f922 	bl	80028a2 <_ZN14TinyGPSDecimal3setEPKc>
      break;
 800265e:	e033      	b.n	80026c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
      date.setDate(term);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3338      	adds	r3, #56	; 0x38
 8002664:	001a      	movs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	33aa      	adds	r3, #170	; 0xaa
 800266a:	0019      	movs	r1, r3
 800266c:	0010      	movs	r0, r2
 800266e:	f000 f8ef 	bl	8002850 <_ZN11TinyGPSDate7setDateEPKc>
      break;
 8002672:	e029      	b.n	80026c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPGGA, 6): // Fix data (GPGGA)
      sentenceHasFix = term[0] > '0';
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	22aa      	movs	r2, #170	; 0xaa
 8002678:	5c9b      	ldrb	r3, [r3, r2]
 800267a:	2230      	movs	r2, #48	; 0x30
 800267c:	429a      	cmp	r2, r3
 800267e:	419b      	sbcs	r3, r3
 8002680:	425b      	negs	r3, r3
 8002682:	b2d9      	uxtb	r1, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	22bc      	movs	r2, #188	; 0xbc
 8002688:	5499      	strb	r1, [r3, r2]
      break;
 800268a:	e01d      	b.n	80026c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPGGA, 7): // Satellites used (GPGGA)
      satellites.set(term);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3388      	adds	r3, #136	; 0x88
 8002690:	001a      	movs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	33aa      	adds	r3, #170	; 0xaa
 8002696:	0019      	movs	r1, r3
 8002698:	0010      	movs	r0, r2
 800269a:	f000 f92a 	bl	80028f2 <_ZN14TinyGPSInteger3setEPKc>
      break;
 800269e:	e013      	b.n	80026c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPGGA, 8): // HDOP
      hdop.set(term);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3398      	adds	r3, #152	; 0x98
 80026a4:	001a      	movs	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	33aa      	adds	r3, #170	; 0xaa
 80026aa:	0019      	movs	r1, r3
 80026ac:	0010      	movs	r0, r2
 80026ae:	f000 f8f8 	bl	80028a2 <_ZN14TinyGPSDecimal3setEPKc>
      break;
 80026b2:	e009      	b.n	80026c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPGGA, 9): // Altitude (GPGGA)
      altitude.set(term);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3378      	adds	r3, #120	; 0x78
 80026b8:	001a      	movs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	33aa      	adds	r3, #170	; 0xaa
 80026be:	0019      	movs	r1, r3
 80026c0:	0010      	movs	r0, r2
 80026c2:	f000 f8ee 	bl	80028a2 <_ZN14TinyGPSDecimal3setEPKc>
      break;
 80026c6:	46c0      	nop			; (mov r8, r8)
    }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	22c4      	movs	r2, #196	; 0xc4
 80026cc:	589b      	ldr	r3, [r3, r2]
 80026ce:	613b      	str	r3, [r7, #16]
       p != NULL &&
       strcmp(p->sentenceName, customCandidates->sentenceName) == 0 &&
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d025      	beq.n	8002722 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c6>
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	21c4      	movs	r1, #196	; 0xc4
 80026de:	585b      	ldr	r3, [r3, r1]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	0019      	movs	r1, r3
 80026e4:	0010      	movs	r0, r2
 80026e6:	f7fd fd0d 	bl	8000104 <strcmp>
 80026ea:	1e03      	subs	r3, r0, #0
       p != NULL &&
 80026ec:	d119      	bne.n	8002722 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c6>
       p->termNumber <= curTermNumber;
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	21ba      	movs	r1, #186	; 0xba
 80026f6:	5c52      	ldrb	r2, [r2, r1]
       strcmp(p->sentenceName, customCandidates->sentenceName) == 0 &&
 80026f8:	4293      	cmp	r3, r2
 80026fa:	dc12      	bgt.n	8002722 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c6>
       p = p->next)
    if (p->termNumber == curTermNumber)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	21ba      	movs	r1, #186	; 0xba
 8002704:	5c52      	ldrb	r2, [r2, r1]
 8002706:	4293      	cmp	r3, r2
 8002708:	d107      	bne.n	800271a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3be>
      p->set(term);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	33aa      	adds	r3, #170	; 0xaa
 800270e:	001a      	movs	r2, r3
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	0011      	movs	r1, r2
 8002714:	0018      	movs	r0, r3
 8002716:	f000 f91b 	bl	8002950 <_ZN13TinyGPSCustom3setEPKc>
       p = p->next)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	613b      	str	r3, [r7, #16]
  for (TinyGPSCustom *p = customCandidates;
 8002720:	e7d6      	b.n	80026d0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x374>

  return false;
 8002722:	2300      	movs	r3, #0
}
 8002724:	0018      	movs	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	b007      	add	sp, #28
 800272a:	bd90      	pop	{r4, r7, pc}
 800272c:	0800a390 	.word	0x0800a390
 8002730:	0800a398 	.word	0x0800a398
 8002734:	0800a3a0 	.word	0x0800a3a0
 8002738:	0800a3a8 	.word	0x0800a3a8
 800273c:	0800aa9c 	.word	0x0800aa9c

08002740 <_ZN15TinyGPSLocation6commitEv>:
                                     "W",  "WNW", "NW", "NNW"};
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit() {
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  rawLatData = rawNewLatData;
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	1d10      	adds	r0, r2, #4
 800274e:	331c      	adds	r3, #28
 8002750:	2209      	movs	r2, #9
 8002752:	0019      	movs	r1, r3
 8002754:	f007 f92a 	bl	80099ac <memcpy>
  rawLngData = rawNewLngData;
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3210      	adds	r2, #16
 800275e:	0010      	movs	r0, r2
 8002760:	3328      	adds	r3, #40	; 0x28
 8002762:	2209      	movs	r2, #9
 8002764:	0019      	movs	r1, r3
 8002766:	f007 f921 	bl	80099ac <memcpy>
  lastCommitTime = HAL_GetTick();
 800276a:	f001 fe13 	bl	8004394 <HAL_GetTick>
 800276e:	0002      	movs	r2, r0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	635a      	str	r2, [r3, #52]	; 0x34
  valid = updated = true;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	705a      	strb	r2, [r3, #1]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	785a      	ldrb	r2, [r3, #1]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	701a      	strb	r2, [r3, #0]
}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	46bd      	mov	sp, r7
 8002786:	b002      	add	sp, #8
 8002788:	bd80      	pop	{r7, pc}

0800278a <_ZN15TinyGPSLocation11setLatitudeEPKc>:

void TinyGPSLocation::setLatitude(const char *term) {
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	6039      	str	r1, [r7, #0]
  TinyGPSPlus::parseDegrees(term, rawNewLatData);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	331c      	adds	r3, #28
 8002798:	001a      	movs	r2, r3
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	0011      	movs	r1, r2
 800279e:	0018      	movs	r0, r3
 80027a0:	f7ff fd6c 	bl	800227c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
}
 80027a4:	46c0      	nop			; (mov r8, r8)
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b002      	add	sp, #8
 80027aa:	bd80      	pop	{r7, pc}

080027ac <_ZN15TinyGPSLocation12setLongitudeEPKc>:

void TinyGPSLocation::setLongitude(const char *term) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  TinyGPSPlus::parseDegrees(term, rawNewLngData);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3328      	adds	r3, #40	; 0x28
 80027ba:	001a      	movs	r2, r3
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	0011      	movs	r1, r2
 80027c0:	0018      	movs	r0, r3
 80027c2:	f7ff fd5b 	bl	800227c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	46bd      	mov	sp, r7
 80027ca:	b002      	add	sp, #8
 80027cc:	bd80      	pop	{r7, pc}

080027ce <_ZN11TinyGPSDate6commitEv>:
  updated = false;
  double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
  return rawLngData.negative ? -ret : ret;
}

void TinyGPSDate::commit() {
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  date = newDate;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	605a      	str	r2, [r3, #4]
  lastCommitTime = HAL_GetTick();
 80027de:	f001 fdd9 	bl	8004394 <HAL_GetTick>
 80027e2:	0002      	movs	r2, r0
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	60da      	str	r2, [r3, #12]
  valid = updated = true;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	705a      	strb	r2, [r3, #1]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	785a      	ldrb	r2, [r3, #1]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	701a      	strb	r2, [r3, #0]
}
 80027f6:	46c0      	nop			; (mov r8, r8)
 80027f8:	46bd      	mov	sp, r7
 80027fa:	b002      	add	sp, #8
 80027fc:	bd80      	pop	{r7, pc}

080027fe <_ZN11TinyGPSTime6commitEv>:

void TinyGPSTime::commit() {
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  time = newTime;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	605a      	str	r2, [r3, #4]
  lastCommitTime = HAL_GetTick();
 800280e:	f001 fdc1 	bl	8004394 <HAL_GetTick>
 8002812:	0002      	movs	r2, r0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	60da      	str	r2, [r3, #12]
  valid = updated = true;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	705a      	strb	r2, [r3, #1]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	785a      	ldrb	r2, [r3, #1]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	701a      	strb	r2, [r3, #0]
}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	46bd      	mov	sp, r7
 800282a:	b002      	add	sp, #8
 800282c:	bd80      	pop	{r7, pc}

0800282e <_ZN11TinyGPSTime7setTimeEPKc>:

void TinyGPSTime::setTime(const char *term) {
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	6039      	str	r1, [r7, #0]
  newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	0018      	movs	r0, r3
 800283c:	f7ff fcb6 	bl	80021ac <_ZN11TinyGPSPlus12parseDecimalEPKc>
 8002840:	0003      	movs	r3, r0
 8002842:	001a      	movs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	609a      	str	r2, [r3, #8]
}
 8002848:	46c0      	nop			; (mov r8, r8)
 800284a:	46bd      	mov	sp, r7
 800284c:	b002      	add	sp, #8
 800284e:	bd80      	pop	{r7, pc}

08002850 <_ZN11TinyGPSDate7setDateEPKc>:

void TinyGPSDate::setDate(const char *term) { newDate = atol(term); }
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	0018      	movs	r0, r3
 800285e:	f007 f875 	bl	800994c <atol>
 8002862:	0003      	movs	r3, r0
 8002864:	001a      	movs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	46bd      	mov	sp, r7
 800286e:	b002      	add	sp, #8
 8002870:	bd80      	pop	{r7, pc}

08002872 <_ZN14TinyGPSDecimal6commitEv>:
uint8_t TinyGPSTime::centisecond() {
  updated = false;
  return time % 100;
}

void TinyGPSDecimal::commit() {
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  val = newval;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	609a      	str	r2, [r3, #8]
  lastCommitTime = HAL_GetTick();
 8002882:	f001 fd87 	bl	8004394 <HAL_GetTick>
 8002886:	0002      	movs	r2, r0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	605a      	str	r2, [r3, #4]
  valid = updated = true;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	705a      	strb	r2, [r3, #1]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	785a      	ldrb	r2, [r3, #1]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	701a      	strb	r2, [r3, #0]
}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	46bd      	mov	sp, r7
 800289e:	b002      	add	sp, #8
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <_ZN14TinyGPSDecimal3setEPKc>:

void TinyGPSDecimal::set(const char *term) {
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
 80028aa:	6039      	str	r1, [r7, #0]
  newval = TinyGPSPlus::parseDecimal(term);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	0018      	movs	r0, r3
 80028b0:	f7ff fc7c 	bl	80021ac <_ZN11TinyGPSPlus12parseDecimalEPKc>
 80028b4:	0002      	movs	r2, r0
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	60da      	str	r2, [r3, #12]
}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	46bd      	mov	sp, r7
 80028be:	b002      	add	sp, #8
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <_ZN14TinyGPSInteger6commitEv>:

void TinyGPSInteger::commit() {
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  val = newval;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	609a      	str	r2, [r3, #8]
  lastCommitTime = HAL_GetTick();
 80028d2:	f001 fd5f 	bl	8004394 <HAL_GetTick>
 80028d6:	0002      	movs	r2, r0
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	605a      	str	r2, [r3, #4]
  valid = updated = true;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	705a      	strb	r2, [r3, #1]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	785a      	ldrb	r2, [r3, #1]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	701a      	strb	r2, [r3, #0]
}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b002      	add	sp, #8
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <_ZN14TinyGPSInteger3setEPKc>:

void TinyGPSInteger::set(const char *term) { newval = atol(term); }
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	0018      	movs	r0, r3
 8002900:	f007 f824 	bl	800994c <atol>
 8002904:	0003      	movs	r3, r0
 8002906:	001a      	movs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	60da      	str	r2, [r3, #12]
 800290c:	46c0      	nop			; (mov r8, r8)
 800290e:	46bd      	mov	sp, r7
 8002910:	b002      	add	sp, #8
 8002912:	bd80      	pop	{r7, pc}

08002914 <_ZN13TinyGPSCustom6commitEv>:

  // Insert this item into the GPS tree
  gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit() {
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  strcpy(this->buffer, this->stagingBuffer);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3310      	adds	r3, #16
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	0011      	movs	r1, r2
 8002924:	0018      	movs	r0, r3
 8002926:	f007 f873 	bl	8009a10 <strcpy>
  lastCommitTime = HAL_GetTick();
 800292a:	f001 fd33 	bl	8004394 <HAL_GetTick>
 800292e:	0002      	movs	r2, r0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	621a      	str	r2, [r3, #32]
  valid = updated = true;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2225      	movs	r2, #37	; 0x25
 8002938:	2101      	movs	r1, #1
 800293a:	5499      	strb	r1, [r3, r2]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2225      	movs	r2, #37	; 0x25
 8002940:	5c99      	ldrb	r1, [r3, r2]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2224      	movs	r2, #36	; 0x24
 8002946:	5499      	strb	r1, [r3, r2]
}
 8002948:	46c0      	nop			; (mov r8, r8)
 800294a:	46bd      	mov	sp, r7
 800294c:	b002      	add	sp, #8
 800294e:	bd80      	pop	{r7, pc}

08002950 <_ZN13TinyGPSCustom3setEPKc>:

void TinyGPSCustom::set(const char *term) {
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6839      	ldr	r1, [r7, #0]
 800295e:	2210      	movs	r2, #16
 8002960:	0018      	movs	r0, r3
 8002962:	f007 f85d 	bl	8009a20 <strncpy>
}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	46bd      	mov	sp, r7
 800296a:	b002      	add	sp, #8
 800296c:	bd80      	pop	{r7, pc}

0800296e <_ZN12SX1280Driver11SetIdleModeEv>:

  ////////////////Configuration Functions/////////////
  SX1280Driver();
  bool Begin();
  void End();
  void SetIdleMode() {
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
    SetMode(SX1280_MODE_FS);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2104      	movs	r1, #4
 800297a:	0018      	movs	r0, r3
 800297c:	f7fe f8d0 	bl	8000b20 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>
  }; // set Idle mode used when switching from RX to TX
 8002980:	46c0      	nop			; (mov r8, r8)
 8002982:	46bd      	mov	sp, r7
 8002984:	b002      	add	sp, #8
 8002986:	bd80      	pop	{r7, pc}

08002988 <_ZN12Transmission17resetTransmissionEv>:
  void txDoneISR();

private:
  void processRFPacket();

  void resetTransmission() {
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
    disableTransmission();
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	0018      	movs	r0, r3
 8002994:	f000 fa54 	bl	8002e40 <_ZN12Transmission19disableTransmissionEv>
    HAL_Delay(10);
 8002998:	200a      	movs	r0, #10
 800299a:	f001 fd05 	bl	80043a8 <HAL_Delay>
    enableTransmission();
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	0018      	movs	r0, r3
 80029a2:	f000 f97d 	bl	8002ca0 <_ZN12Transmission18enableTransmissionEv>
  }
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b002      	add	sp, #8
 80029ac:	bd80      	pop	{r7, pc}
	...

080029b0 <_ZL14GetInitialFreqv>:
void FHSSrandomiseFHSSsequence(uint32_t crc);
// The number of frequencies for this regulatory domain
uint32_t FHSSgetChannelCount(void);

// get the initial frequency, which is also the sync channel
static inline uint32_t GetInitialFreq() { return FHSSfreqs[sync_channel]; }
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	4b03      	ldr	r3, [pc, #12]	; (80029c4 <_ZL14GetInitialFreqv+0x14>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4b03      	ldr	r3, [pc, #12]	; (80029c8 <_ZL14GetInitialFreqv+0x18>)
 80029ba:	0092      	lsls	r2, r2, #2
 80029bc:	58d3      	ldr	r3, [r2, r3]
 80029be:	0018      	movs	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	200000a4 	.word	0x200000a4
 80029c8:	0800a4ac 	.word	0x0800a4ac

080029cc <_ZL16FHSSsetCurrIndexh>:

// Get the current sequence pointer
static inline uint8_t FHSSgetCurrIndex() { return FHSSptr; }

// Set the sequence pointer, used by RX on SYNC
static inline void FHSSsetCurrIndex(const uint8_t value) {
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	0002      	movs	r2, r0
 80029d4:	1dfb      	adds	r3, r7, #7
 80029d6:	701a      	strb	r2, [r3, #0]
  FHSSptr = value % FHSS_SEQUENCE_CNT;
 80029d8:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <_ZL16FHSSsetCurrIndexh+0x2c>)
 80029da:	781a      	ldrb	r2, [r3, #0]
 80029dc:	1dfb      	adds	r3, r7, #7
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	0011      	movs	r1, r2
 80029e2:	0018      	movs	r0, r3
 80029e4:	f7fd fc28 	bl	8000238 <__aeabi_uidivmod>
 80029e8:	000b      	movs	r3, r1
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	4b03      	ldr	r3, [pc, #12]	; (80029fc <_ZL16FHSSsetCurrIndexh+0x30>)
 80029ee:	701a      	strb	r2, [r3, #0]
}
 80029f0:	46c0      	nop			; (mov r8, r8)
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b002      	add	sp, #8
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	0800a5ec 	.word	0x0800a5ec
 80029fc:	200000a0 	.word	0x200000a0

08002a00 <_ZL15FHSSgetNextFreqv>:

// Advance the pointer to the next hop and return the frequency of that channel
static inline uint32_t FHSSgetNextFreq() {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
  FHSSptr = (FHSSptr + 1) % FHSS_SEQUENCE_CNT;
 8002a06:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <_ZL15FHSSgetNextFreqv+0x44>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <_ZL15FHSSgetNextFreqv+0x48>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	0019      	movs	r1, r3
 8002a14:	0010      	movs	r0, r2
 8002a16:	f7fd fcf9 	bl	800040c <__aeabi_idivmod>
 8002a1a:	000b      	movs	r3, r1
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <_ZL15FHSSgetNextFreqv+0x44>)
 8002a20:	701a      	strb	r2, [r3, #0]
  uint32_t freq = FHSSfreqs[FHSSsequence[FHSSptr]];
 8002a22:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <_ZL15FHSSgetNextFreqv+0x44>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	001a      	movs	r2, r3
 8002a2a:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <_ZL15FHSSgetNextFreqv+0x4c>)
 8002a2c:	5c9b      	ldrb	r3, [r3, r2]
 8002a2e:	001a      	movs	r2, r3
 8002a30:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <_ZL15FHSSgetNextFreqv+0x50>)
 8002a32:	0092      	lsls	r2, r2, #2
 8002a34:	58d3      	ldr	r3, [r2, r3]
 8002a36:	607b      	str	r3, [r7, #4]
  return freq;
 8002a38:	687b      	ldr	r3, [r7, #4]
}
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b002      	add	sp, #8
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	200000a0 	.word	0x200000a0
 8002a48:	0800a5ec 	.word	0x0800a5ec
 8002a4c:	2000008c 	.word	0x2000008c
 8002a50:	0800a4ac 	.word	0x0800a4ac

08002a54 <_ZL10rxCallbackv>:
#include "main.h"
#include <cstring>

static Transmission *pTransmission;

static inline void rxCallback() { pTransmission->rxDoneISR(); }
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <_ZL10rxCallbackv+0x14>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f000 fa76 	bl	8002f4e <_ZN12Transmission9rxDoneISREv>
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	200000fc 	.word	0x200000fc

08002a6c <_ZL10txCallbackv>:

static inline void txCallback() { pTransmission->txDoneISR(); }
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <_ZL10txCallbackv+0x14>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	0018      	movs	r0, r3
 8002a76:	f000 faa1 	bl	8002fbc <_ZN12Transmission9txDoneISREv>
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	200000fc 	.word	0x200000fc

08002a84 <_ZN12Transmission5beginEP17TIM_HandleTypeDef>:

bool Transmission::begin(TIM_HandleTypeDef *t) {
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]

  /* Catch if already initalized */
  if (radioInitialized == true)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2280      	movs	r2, #128	; 0x80
 8002a92:	5c9b      	ldrb	r3, [r3, r2]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d103      	bne.n	8002aa0 <_ZN12Transmission5beginEP17TIM_HandleTypeDef+0x1c>
    return radioInitialized;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2280      	movs	r2, #128	; 0x80
 8002a9c:	5c9b      	ldrb	r3, [r3, r2]
 8002a9e:	e025      	b.n	8002aec <_ZN12Transmission5beginEP17TIM_HandleTypeDef+0x68>

  timer = t;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	679a      	str	r2, [r3, #120]	; 0x78
  pTransmission = this;
 8002aa6:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <_ZN12Transmission5beginEP17TIM_HandleTypeDef+0x70>)
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	601a      	str	r2, [r3, #0]
  Radio.RXdoneCallback = &rxCallback;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a12      	ldr	r2, [pc, #72]	; (8002af8 <_ZN12Transmission5beginEP17TIM_HandleTypeDef+0x74>)
 8002ab0:	601a      	str	r2, [r3, #0]
  Radio.TXdoneCallback = &txCallback;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a11      	ldr	r2, [pc, #68]	; (8002afc <_ZN12Transmission5beginEP17TIM_HandleTypeDef+0x78>)
 8002ab6:	605a      	str	r2, [r3, #4]

  if (Radio.Begin() == true) {
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	0018      	movs	r0, r3
 8002abc:	f7fd feb2 	bl	8000824 <_ZN12SX1280Driver5BeginEv>
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	425a      	negs	r2, r3
 8002ac6:	4153      	adcs	r3, r2
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00b      	beq.n	8002ae6 <_ZN12Transmission5beginEP17TIM_HandleTypeDef+0x62>
    radioInitialized = true;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2280      	movs	r2, #128	; 0x80
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	5499      	strb	r1, [r3, r2]
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002ad6:	2380      	movs	r3, #128	; 0x80
 8002ad8:	0219      	lsls	r1, r3, #8
 8002ada:	23a0      	movs	r3, #160	; 0xa0
 8002adc:	05db      	lsls	r3, r3, #23
 8002ade:	2201      	movs	r2, #1
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	f002 fc64 	bl	80053ae <HAL_GPIO_WritePin>
  }

  return radioInitialized;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2280      	movs	r2, #128	; 0x80
 8002aea:	5c9b      	ldrb	r3, [r3, r2]
}
 8002aec:	0018      	movs	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	b002      	add	sp, #8
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	200000fc 	.word	0x200000fc
 8002af8:	08002a55 	.word	0x08002a55
 8002afc:	08002a6d 	.word	0x08002a6d

08002b00 <_ZN12Transmission13setLinkPhraseEPKhm>:

void Transmission::setLinkPhrase(const uint8_t *linkPhrase, uint32_t length) {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  // Reset the linkPhrase
  memset(Settings.linkPhrase, 0, 8);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	3350      	adds	r3, #80	; 0x50
 8002b10:	2208      	movs	r2, #8
 8002b12:	2100      	movs	r1, #0
 8002b14:	0018      	movs	r0, r3
 8002b16:	f006 ff52 	bl	80099be <memset>
  // Copy new linkPhrase
  memcpy(Settings.linkPhrase, linkPhrase, length);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	3350      	adds	r3, #80	; 0x50
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	0018      	movs	r0, r3
 8002b24:	f006 ff42 	bl	80099ac <memcpy>

  /* If the transmission was already enabled, restart it */
  if (Settings.transmissionEnabled) {
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2258      	movs	r2, #88	; 0x58
 8002b2c:	5c9b      	ldrb	r3, [r3, r2]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <_ZN12Transmission13setLinkPhraseEPKhm+0x3a>
    resetTransmission();
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	0018      	movs	r0, r3
 8002b36:	f7ff ff27 	bl	8002988 <_ZN12Transmission17resetTransmissionEv>
  }
}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b004      	add	sp, #16
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <_ZN12Transmission12setDirectionE24transmission_direction_e>:

void Transmission::setDirection(
    transmission_direction_e transmissionDirection) {
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	000a      	movs	r2, r1
 8002b4c:	1cfb      	adds	r3, r7, #3
 8002b4e:	701a      	strb	r2, [r3, #0]
  if (Settings.transmissionDirection != transmissionDirection) {
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	224c      	movs	r2, #76	; 0x4c
 8002b54:	5c9b      	ldrb	r3, [r3, r2]
 8002b56:	1cfa      	adds	r2, r7, #3
 8002b58:	7812      	ldrb	r2, [r2, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d00d      	beq.n	8002b7a <_ZN12Transmission12setDirectionE24transmission_direction_e+0x38>
    Settings.transmissionDirection = transmissionDirection;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	1cfa      	adds	r2, r7, #3
 8002b62:	214c      	movs	r1, #76	; 0x4c
 8002b64:	7812      	ldrb	r2, [r2, #0]
 8002b66:	545a      	strb	r2, [r3, r1]
    if (Settings.transmissionEnabled) {
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2258      	movs	r2, #88	; 0x58
 8002b6c:	5c9b      	ldrb	r3, [r3, r2]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <_ZN12Transmission12setDirectionE24transmission_direction_e+0x38>
      resetTransmission();
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	0018      	movs	r0, r3
 8002b76:	f7ff ff07 	bl	8002988 <_ZN12Transmission17resetTransmissionEv>
    }
  }
}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	b002      	add	sp, #8
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <_ZN12Transmission7setModeE19transmission_mode_e>:

void Transmission::setMode(transmission_mode_e transmissionMode) {
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b082      	sub	sp, #8
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	000a      	movs	r2, r1
 8002b8c:	1cfb      	adds	r3, r7, #3
 8002b8e:	701a      	strb	r2, [r3, #0]
  Settings.transmissionMode = transmissionMode;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	1cfa      	adds	r2, r7, #3
 8002b94:	214d      	movs	r1, #77	; 0x4d
 8002b96:	7812      	ldrb	r2, [r2, #0]
 8002b98:	545a      	strb	r2, [r3, r1]
}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	b002      	add	sp, #8
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <_ZN12Transmission9setPAGainEa>:

void Transmission::setPAGain(int8_t gain) {
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	000a      	movs	r2, r1
 8002bac:	1cfb      	adds	r3, r7, #3
 8002bae:	701a      	strb	r2, [r3, #0]
  Settings.paGain = gain;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	1cfa      	adds	r2, r7, #3
 8002bb4:	214e      	movs	r1, #78	; 0x4e
 8002bb6:	7812      	ldrb	r2, [r2, #0]
 8002bb8:	545a      	strb	r2, [r3, r1]

  if (Settings.transmissionEnabled) {
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2258      	movs	r2, #88	; 0x58
 8002bbe:	5c9b      	ldrb	r3, [r3, r2]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00e      	beq.n	8002be2 <_ZN12Transmission9setPAGainEa+0x40>
    Radio.SetOutputPower(Settings.powerLevel - Settings.paGain);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	224f      	movs	r2, #79	; 0x4f
 8002bca:	569b      	ldrsb	r3, [r3, r2]
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	214e      	movs	r1, #78	; 0x4e
 8002bd2:	565b      	ldrsb	r3, [r3, r1]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	b25b      	sxtb	r3, r3
 8002bdc:	0019      	movs	r1, r3
 8002bde:	f7fd ff6d 	bl	8000abc <_ZN12SX1280Driver14SetOutputPowerEa>
  }
}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	46bd      	mov	sp, r7
 8002be6:	b002      	add	sp, #8
 8002be8:	bd80      	pop	{r7, pc}

08002bea <_ZN12Transmission13setPowerLevelEa>:

void Transmission::setPowerLevel(int8_t gain) { Settings.powerLevel = gain; }
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	000a      	movs	r2, r1
 8002bf4:	1cfb      	adds	r3, r7, #3
 8002bf6:	701a      	strb	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	1cfa      	adds	r2, r7, #3
 8002bfc:	214f      	movs	r1, #79	; 0x4f
 8002bfe:	7812      	ldrb	r2, [r2, #0]
 8002c00:	545a      	strb	r2, [r3, r1]
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	46bd      	mov	sp, r7
 8002c06:	b002      	add	sp, #8
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <_ZN12Transmission10writeBytesEPKhm>:

void Transmission::writeBytes(const uint8_t *data, uint32_t length) {
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
  if (length > payloadLength)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	228c      	movs	r2, #140	; 0x8c
 8002c1a:	589b      	ldr	r3, [r3, r2]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d80f      	bhi.n	8002c42 <_ZN12Transmission10writeBytesEPKhm+0x38>
    return;
  memcpy(txData, data, length);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	3390      	adds	r3, #144	; 0x90
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	68b9      	ldr	r1, [r7, #8]
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f006 febe 	bl	80099ac <memcpy>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002c30:	2380      	movs	r3, #128	; 0x80
 8002c32:	021a      	lsls	r2, r3, #8
 8002c34:	23a0      	movs	r3, #160	; 0xa0
 8002c36:	05db      	lsls	r3, r3, #23
 8002c38:	0011      	movs	r1, r2
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f002 fbd4 	bl	80053e8 <HAL_GPIO_TogglePin>
 8002c40:	e000      	b.n	8002c44 <_ZN12Transmission10writeBytesEPKhm+0x3a>
    return;
 8002c42:	46c0      	nop			; (mov r8, r8)
}
 8002c44:	46bd      	mov	sp, r7
 8002c46:	b004      	add	sp, #16
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <_ZN12Transmission9availableEv>:

bool Transmission::available() { return dataAvailable; }
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2288      	movs	r2, #136	; 0x88
 8002c56:	5c9b      	ldrb	r3, [r3, r2]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b002      	add	sp, #8
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <_ZN12Transmission9readBytesEPhm>:

bool Transmission::readBytes(uint8_t *buffer, uint32_t length) {
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b084      	sub	sp, #16
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
  if (dataAvailable) {
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2288      	movs	r2, #136	; 0x88
 8002c72:	5c9b      	ldrb	r3, [r3, r2]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00d      	beq.n	8002c96 <_ZN12Transmission9readBytesEPhm+0x34>
    memcpy(buffer, rxData, length);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	33a4      	adds	r3, #164	; 0xa4
 8002c7e:	0019      	movs	r1, r3
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	0018      	movs	r0, r3
 8002c86:	f006 fe91 	bl	80099ac <memcpy>
    dataAvailable = false;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2288      	movs	r2, #136	; 0x88
 8002c8e:	2100      	movs	r1, #0
 8002c90:	5499      	strb	r1, [r3, r2]
    return true;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <_ZN12Transmission9readBytesEPhm+0x36>
  }
  return false;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	0018      	movs	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	b004      	add	sp, #16
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <_ZN12Transmission18enableTransmissionEv>:

void Transmission::enableTransmission() {
 8002ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ca2:	46ce      	mov	lr, r9
 8002ca4:	4647      	mov	r7, r8
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b08d      	sub	sp, #52	; 0x34
 8002caa:	af08      	add	r7, sp, #32
 8002cac:	6078      	str	r0, [r7, #4]

  if (radioInitialized == false)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2280      	movs	r2, #128	; 0x80
 8002cb2:	5c9b      	ldrb	r3, [r3, r2]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d100      	bne.n	8002cba <_ZN12Transmission18enableTransmissionEv+0x1a>
 8002cb8:	e0b6      	b.n	8002e28 <_ZN12Transmission18enableTransmissionEv+0x188>
    return;

  if (Settings.transmissionEnabled)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2258      	movs	r2, #88	; 0x58
 8002cbe:	5c9b      	ldrb	r3, [r3, r2]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d000      	beq.n	8002cc6 <_ZN12Transmission18enableTransmissionEv+0x26>
 8002cc4:	e0b2      	b.n	8002e2c <_ZN12Transmission18enableTransmissionEv+0x18c>
    return;

  Settings.transmissionEnabled = true;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2258      	movs	r2, #88	; 0x58
 8002cca:	2101      	movs	r1, #1
 8002ccc:	5499      	strb	r1, [r3, r2]

  linkCRC = crc32(Settings.linkPhrase, 8);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3350      	adds	r3, #80	; 0x50
 8002cd2:	2108      	movs	r1, #8
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f7fd fd11 	bl	80006fc <_Z5crc32PKhj>
 8002cda:	0002      	movs	r2, r0
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2184      	movs	r1, #132	; 0x84
 8002ce0:	505a      	str	r2, [r3, r1]
  linkXOR = linkCRC & 0xFF;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2284      	movs	r2, #132	; 0x84
 8002ce6:	589b      	ldr	r3, [r3, r2]
 8002ce8:	b2d9      	uxtb	r1, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2283      	movs	r2, #131	; 0x83
 8002cee:	5499      	strb	r1, [r3, r2]

  FHSSrandomiseFHSSsequence(linkCRC);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2284      	movs	r2, #132	; 0x84
 8002cf4:	589b      	ldr	r3, [r3, r2]
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f7fd fcc6 	bl	8000688 <_Z25FHSSrandomiseFHSSsequencem>

  Radio.SetOutputPower(Settings.powerLevel - Settings.paGain);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	224f      	movs	r2, #79	; 0x4f
 8002d02:	569b      	ldrsb	r3, [r3, r2]
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	214e      	movs	r1, #78	; 0x4e
 8002d0a:	565b      	ldrsb	r3, [r3, r1]
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	b25b      	sxtb	r3, r3
 8002d14:	0019      	movs	r1, r3
 8002d16:	f7fd fed1 	bl	8000abc <_ZN12SX1280Driver14SetOutputPowerEa>

  HAL_Delay(10);
 8002d1a:	200a      	movs	r0, #10
 8002d1c:	f001 fb44 	bl	80043a8 <HAL_Delay>

  /* Get the modulation settings */
  modulation_settings_s *const modParams =
      &Settings.modulationConfig[Settings.modeIndex];
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  modulation_settings_s *const modParams =
 8002d24:	0013      	movs	r3, r2
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	189b      	adds	r3, r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	3358      	adds	r3, #88	; 0x58
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	18d3      	adds	r3, r2, r3
 8002d32:	3308      	adds	r3, #8
 8002d34:	60fb      	str	r3, [r7, #12]

  if (Settings.transmissionDirection == TX) {
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	224c      	movs	r2, #76	; 0x4c
 8002d3a:	5c9b      	ldrb	r3, [r3, r2]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d12a      	bne.n	8002d96 <_ZN12Transmission18enableTransmissionEv+0xf6>
    Radio.Config(modParams->bw, modParams->sf, modParams->cr, GetInitialFreq(),
 8002d40:	687c      	ldr	r4, [r7, #4]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	781d      	ldrb	r5, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	785e      	ldrb	r6, [r3, #1]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	789b      	ldrb	r3, [r3, #2]
 8002d4e:	4698      	mov	r8, r3
 8002d50:	f7ff fe2e 	bl	80029b0 <_ZL14GetInitialFreqv>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	7a1a      	ldrb	r2, [r3, #8]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	7a59      	ldrb	r1, [r3, #9]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	4699      	mov	r9, r3
 8002d62:	2300      	movs	r3, #0
 8002d64:	469c      	mov	ip, r3
 8002d66:	4663      	mov	r3, ip
 8002d68:	9307      	str	r3, [sp, #28]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	469c      	mov	ip, r3
 8002d6e:	4663      	mov	r3, ip
 8002d70:	9306      	str	r3, [sp, #24]
 8002d72:	2300      	movs	r3, #0
 8002d74:	469c      	mov	ip, r3
 8002d76:	4663      	mov	r3, ip
 8002d78:	9305      	str	r3, [sp, #20]
 8002d7a:	464b      	mov	r3, r9
 8002d7c:	9304      	str	r3, [sp, #16]
 8002d7e:	9103      	str	r1, [sp, #12]
 8002d80:	2300      	movs	r3, #0
 8002d82:	9302      	str	r3, [sp, #8]
 8002d84:	9201      	str	r2, [sp, #4]
 8002d86:	9000      	str	r0, [sp, #0]
 8002d88:	4643      	mov	r3, r8
 8002d8a:	0032      	movs	r2, r6
 8002d8c:	0029      	movs	r1, r5
 8002d8e:	0020      	movs	r0, r4
 8002d90:	f7fd fdd8 	bl	8000944 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth>
 8002d94:	e021      	b.n	8002dda <_ZN12Transmission18enableTransmissionEv+0x13a>
                 modParams->PreambleLen, 0, modParams->PayloadLength,
                 modParams->interval);
  } else {
    Radio.Config(modParams->bw, modParams->sf, modParams->cr, GetInitialFreq(),
 8002d96:	687c      	ldr	r4, [r7, #4]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	781d      	ldrb	r5, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	785e      	ldrb	r6, [r3, #1]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	789b      	ldrb	r3, [r3, #2]
 8002da4:	4698      	mov	r8, r3
 8002da6:	f7ff fe03 	bl	80029b0 <_ZL14GetInitialFreqv>
 8002daa:	0001      	movs	r1, r0
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	7a1b      	ldrb	r3, [r3, #8]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	7a52      	ldrb	r2, [r2, #9]
 8002db4:	2000      	movs	r0, #0
 8002db6:	9007      	str	r0, [sp, #28]
 8002db8:	2000      	movs	r0, #0
 8002dba:	9006      	str	r0, [sp, #24]
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	9005      	str	r0, [sp, #20]
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	9004      	str	r0, [sp, #16]
 8002dc4:	9203      	str	r2, [sp, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	9202      	str	r2, [sp, #8]
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	9100      	str	r1, [sp, #0]
 8002dce:	4643      	mov	r3, r8
 8002dd0:	0032      	movs	r2, r6
 8002dd2:	0029      	movs	r1, r5
 8002dd4:	0020      	movs	r0, r4
 8002dd6:	f7fd fdb5 	bl	8000944 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth>
                 modParams->PreambleLen, 0, modParams->PayloadLength, 0);
  }

  payloadLength = modParams->PayloadLength;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	7a5b      	ldrb	r3, [r3, #9]
 8002dde:	0019      	movs	r1, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	228c      	movs	r2, #140	; 0x8c
 8002de4:	5099      	str	r1, [r3, r2]

  HAL_Delay(10);
 8002de6:	200a      	movs	r0, #10
 8002de8:	f001 fade 	bl	80043a8 <HAL_Delay>

  if (Settings.transmissionDirection == TX) {
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	224c      	movs	r2, #76	; 0x4c
 8002df0:	5c9b      	ldrb	r3, [r3, r2]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10a      	bne.n	8002e0c <_ZN12Transmission18enableTransmissionEv+0x16c>
    TIM2->ARR = 1000;
 8002df6:	2380      	movs	r3, #128	; 0x80
 8002df8:	05db      	lsls	r3, r3, #23
 8002dfa:	22fa      	movs	r2, #250	; 0xfa
 8002dfc:	0092      	lsls	r2, r2, #2
 8002dfe:	62da      	str	r2, [r3, #44]	; 0x2c
    HAL_TIM_Base_Start_IT(timer);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e04:	0018      	movs	r0, r3
 8002e06:	f004 f8d9 	bl	8006fbc <HAL_TIM_Base_Start_IT>
 8002e0a:	e010      	b.n	8002e2e <_ZN12Transmission18enableTransmissionEv+0x18e>
  } else {
    TIM2->ARR = 1005;
 8002e0c:	2380      	movs	r3, #128	; 0x80
 8002e0e:	05db      	lsls	r3, r3, #23
 8002e10:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <_ZN12Transmission18enableTransmissionEv+0x19c>)
 8002e12:	62da      	str	r2, [r3, #44]	; 0x2c
    Radio.RXnb();
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	0018      	movs	r0, r3
 8002e18:	f7fe f9ba 	bl	8001190 <_ZN12SX1280Driver4RXnbEv>
    HAL_TIM_Base_Start_IT(timer);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e20:	0018      	movs	r0, r3
 8002e22:	f004 f8cb 	bl	8006fbc <HAL_TIM_Base_Start_IT>
 8002e26:	e002      	b.n	8002e2e <_ZN12Transmission18enableTransmissionEv+0x18e>
    return;
 8002e28:	46c0      	nop			; (mov r8, r8)
 8002e2a:	e000      	b.n	8002e2e <_ZN12Transmission18enableTransmissionEv+0x18e>
    return;
 8002e2c:	46c0      	nop			; (mov r8, r8)
  }
}
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b005      	add	sp, #20
 8002e32:	bcc0      	pop	{r6, r7}
 8002e34:	46b9      	mov	r9, r7
 8002e36:	46b0      	mov	r8, r6
 8002e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	000003ed 	.word	0x000003ed

08002e40 <_ZN12Transmission19disableTransmissionEv>:

void Transmission::disableTransmission() {
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Wait until done transmitting / receiving*/
  while (busyTransmitting)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2282      	movs	r2, #130	; 0x82
 8002e4c:	5c9b      	ldrb	r3, [r3, r2]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d000      	beq.n	8002e56 <_ZN12Transmission19disableTransmissionEv+0x16>
 8002e54:	e7f8      	b.n	8002e48 <_ZN12Transmission19disableTransmissionEv+0x8>
    ;

  if (!Settings.transmissionEnabled)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2258      	movs	r2, #88	; 0x58
 8002e5a:	5c9b      	ldrb	r3, [r3, r2]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	4053      	eors	r3, r2
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d122      	bne.n	8002eac <_ZN12Transmission19disableTransmissionEv+0x6c>
    return;

  Settings.transmissionEnabled = false;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2258      	movs	r2, #88	; 0x58
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	5499      	strb	r1, [r3, r2]

  /* Disable Timer */
  HAL_TIM_Base_Stop_IT(timer);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e72:	0018      	movs	r0, r3
 8002e74:	f004 f8fe 	bl	8007074 <HAL_TIM_Base_Stop_IT>
  TIM2->CNT = 0;
 8002e78:	2380      	movs	r3, #128	; 0x80
 8002e7a:	05db      	lsls	r3, r3, #23
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Put Radio in Idle Mode */
  Radio.SetIdleMode();
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	0018      	movs	r0, r3
 8002e84:	f7ff fd73 	bl	800296e <_ZN12SX1280Driver11SetIdleModeEv>

  LQCalc.reset();
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3340      	adds	r3, #64	; 0x40
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f000 f967 	bl	8003160 <_ZN6LQCALCILh30EE5resetEv>
  connectionState = disconnected;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2281      	movs	r2, #129	; 0x81
 8002e96:	2102      	movs	r1, #2
 8002e98:	5499      	strb	r1, [r3, r2]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002e9a:	2380      	movs	r3, #128	; 0x80
 8002e9c:	0219      	lsls	r1, r3, #8
 8002e9e:	23a0      	movs	r3, #160	; 0xa0
 8002ea0:	05db      	lsls	r3, r3, #23
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f002 fa82 	bl	80053ae <HAL_GPIO_WritePin>
 8002eaa:	e000      	b.n	8002eae <_ZN12Transmission19disableTransmissionEv+0x6e>
    return;
 8002eac:	46c0      	nop			; (mov r8, r8)
}
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b002      	add	sp, #8
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <_ZN12Transmission15processRFPacketEv>:

void Transmission::processRFPacket() {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  LQCalc.inc();
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3340      	adds	r3, #64	; 0x40
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f000 f974 	bl	80031ae <_ZN6LQCALCILh30EE3incEv>

  uint8_t crc =
      (uint8_t)crc32((const uint8_t *)Radio.RXdataBuffer, payloadLength - 1);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	331c      	adds	r3, #28
 8002eca:	001a      	movs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	218c      	movs	r1, #140	; 0x8c
 8002ed0:	585b      	ldr	r3, [r3, r1]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	0019      	movs	r1, r3
 8002ed6:	0010      	movs	r0, r2
 8002ed8:	f7fd fc10 	bl	80006fc <_Z5crc32PKhj>
 8002edc:	0002      	movs	r2, r0
 8002ede:	210f      	movs	r1, #15
 8002ee0:	187b      	adds	r3, r7, r1
 8002ee2:	701a      	strb	r2, [r3, #0]

  if ((linkXOR ^ crc) == Radio.RXdataBuffer[payloadLength - 1]) {
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2283      	movs	r2, #131	; 0x83
 8002ee8:	5c9a      	ldrb	r2, [r3, r2]
 8002eea:	187b      	adds	r3, r7, r1
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	4053      	eors	r3, r2
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	218c      	movs	r1, #140	; 0x8c
 8002ef6:	585b      	ldr	r3, [r3, r1]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	18cb      	adds	r3, r1, r3
 8002efe:	7f1b      	ldrb	r3, [r3, #28]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	425a      	negs	r2, r3
 8002f06:	4153      	adcs	r3, r2
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d01b      	beq.n	8002f46 <_ZN12Transmission15processRFPacketEv+0x92>
    connectionState = connected;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2281      	movs	r2, #129	; 0x81
 8002f12:	2100      	movs	r1, #0
 8002f14:	5499      	strb	r1, [r3, r2]
    dataAvailable = true;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2288      	movs	r2, #136	; 0x88
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	5499      	strb	r1, [r3, r2]
    timeout = 0;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	67da      	str	r2, [r3, #124]	; 0x7c

    memcpy(rxData, (const uint8_t *)Radio.RXdataBuffer, payloadLength);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	33a4      	adds	r3, #164	; 0xa4
 8002f28:	0018      	movs	r0, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	331c      	adds	r3, #28
 8002f2e:	0019      	movs	r1, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	228c      	movs	r2, #140	; 0x8c
 8002f34:	589b      	ldr	r3, [r3, r2]
 8002f36:	001a      	movs	r2, r3
 8002f38:	f006 fd38 	bl	80099ac <memcpy>

    LQCalc.add();
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3340      	adds	r3, #64	; 0x40
 8002f40:	0018      	movs	r0, r3
 8002f42:	f000 f98c 	bl	800325e <_ZN6LQCALCILh30EE3addEv>
  }
}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	b004      	add	sp, #16
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <_ZN12Transmission9rxDoneISREv>:

void Transmission::rxDoneISR() {
 8002f4e:	b590      	push	{r4, r7, lr}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  busyTransmitting = false;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2282      	movs	r2, #130	; 0x82
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	5499      	strb	r1, [r3, r2]

  /* Reset the timer */
  HAL_TIM_Base_Stop_IT(timer);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f62:	0018      	movs	r0, r3
 8002f64:	f004 f886 	bl	8007074 <HAL_TIM_Base_Stop_IT>
  TIM2->CNT = 0;
 8002f68:	2380      	movs	r3, #128	; 0x80
 8002f6a:	05db      	lsls	r3, r3, #23
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start_IT(timer);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f74:	0018      	movs	r0, r3
 8002f76:	f004 f821 	bl	8006fbc <HAL_TIM_Base_Start_IT>

  processRFPacket();
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f7ff ff99 	bl	8002eb4 <_ZN12Transmission15processRFPacketEv>

  if (connectionState == connected) {
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2281      	movs	r2, #129	; 0x81
 8002f86:	5c9b      	ldrb	r3, [r3, r2]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d107      	bne.n	8002f9c <_ZN12Transmission9rxDoneISREv+0x4e>
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	021a      	lsls	r2, r3, #8
 8002f90:	23a0      	movs	r3, #160	; 0xa0
 8002f92:	05db      	lsls	r3, r3, #23
 8002f94:	0011      	movs	r1, r2
 8002f96:	0018      	movs	r0, r3
 8002f98:	f002 fa26 	bl	80053e8 <HAL_GPIO_TogglePin>
  }

  Radio.SetFrequencyReg(FHSSgetNextFreq());
 8002f9c:	687c      	ldr	r4, [r7, #4]
 8002f9e:	f7ff fd2f 	bl	8002a00 <_ZL15FHSSgetNextFreqv>
 8002fa2:	0003      	movs	r3, r0
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	0020      	movs	r0, r4
 8002fa8:	f7fd ff84 	bl	8000eb4 <_ZN12SX1280Driver15SetFrequencyRegEm>

  Radio.RXnb();
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f7fe f8ee 	bl	8001190 <_ZN12SX1280Driver4RXnbEv>
}
 8002fb4:	46c0      	nop			; (mov r8, r8)
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b003      	add	sp, #12
 8002fba:	bd90      	pop	{r4, r7, pc}

08002fbc <_ZN12Transmission9txDoneISREv>:

void Transmission::txDoneISR() {
 8002fbc:	b590      	push	{r4, r7, lr}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  busyTransmitting = false;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2282      	movs	r2, #130	; 0x82
 8002fc8:	2100      	movs	r1, #0
 8002fca:	5499      	strb	r1, [r3, r2]

  Radio.SetFrequencyReg(FHSSgetNextFreq());
 8002fcc:	687c      	ldr	r4, [r7, #4]
 8002fce:	f7ff fd17 	bl	8002a00 <_ZL15FHSSgetNextFreqv>
 8002fd2:	0003      	movs	r3, r0
 8002fd4:	0019      	movs	r1, r3
 8002fd6:	0020      	movs	r0, r4
 8002fd8:	f7fd ff6c 	bl	8000eb4 <_ZN12SX1280Driver15SetFrequencyRegEm>
}
 8002fdc:	46c0      	nop			; (mov r8, r8)
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b003      	add	sp, #12
 8002fe2:	bd90      	pop	{r4, r7, pc}

08002fe4 <_ZN12Transmission9rxTimeoutEv>:

void Transmission::rxTimeout() {
 8002fe4:	b590      	push	{r4, r7, lr}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]

  if (timeout == 50) {
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ff0:	2b32      	cmp	r3, #50	; 0x32
 8002ff2:	d11b      	bne.n	800302c <_ZN12Transmission9rxTimeoutEv+0x48>
    LQCalc.reset();
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3340      	adds	r3, #64	; 0x40
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f000 f8b1 	bl	8003160 <_ZN6LQCALCILh30EE5resetEv>
    connectionState = disconnected;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2281      	movs	r2, #129	; 0x81
 8003002:	2102      	movs	r1, #2
 8003004:	5499      	strb	r1, [r3, r2]
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003006:	2380      	movs	r3, #128	; 0x80
 8003008:	0219      	lsls	r1, r3, #8
 800300a:	23a0      	movs	r3, #160	; 0xa0
 800300c:	05db      	lsls	r3, r3, #23
 800300e:	2201      	movs	r2, #1
 8003010:	0018      	movs	r0, r3
 8003012:	f002 f9cc 	bl	80053ae <HAL_GPIO_WritePin>
    FHSSsetCurrIndex(0);
 8003016:	2000      	movs	r0, #0
 8003018:	f7ff fcd8 	bl	80029cc <_ZL16FHSSsetCurrIndexh>
    Radio.SetFrequencyReg(GetInitialFreq());
 800301c:	687c      	ldr	r4, [r7, #4]
 800301e:	f7ff fcc7 	bl	80029b0 <_ZL14GetInitialFreqv>
 8003022:	0003      	movs	r3, r0
 8003024:	0019      	movs	r1, r3
 8003026:	0020      	movs	r0, r4
 8003028:	f7fd ff44 	bl	8000eb4 <_ZN12SX1280Driver15SetFrequencyRegEm>
  }

  if (connectionState == connected) {
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2281      	movs	r2, #129	; 0x81
 8003030:	5c9b      	ldrb	r3, [r3, r2]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10d      	bne.n	8003052 <_ZN12Transmission9rxTimeoutEv+0x6e>
    LQCalc.inc();
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3340      	adds	r3, #64	; 0x40
 800303a:	0018      	movs	r0, r3
 800303c:	f000 f8b7 	bl	80031ae <_ZN6LQCALCILh30EE3incEv>
    Radio.SetFrequencyReg(FHSSgetNextFreq());
 8003040:	687c      	ldr	r4, [r7, #4]
 8003042:	f7ff fcdd 	bl	8002a00 <_ZL15FHSSgetNextFreqv>
 8003046:	0003      	movs	r3, r0
 8003048:	0019      	movs	r1, r3
 800304a:	0020      	movs	r0, r4
 800304c:	f7fd ff32 	bl	8000eb4 <_ZN12SX1280Driver15SetFrequencyRegEm>
 8003050:	e006      	b.n	8003060 <_ZN12Transmission9rxTimeoutEv+0x7c>
  } else {
    if (timeout > 5) {
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003056:	2b05      	cmp	r3, #5
 8003058:	d902      	bls.n	8003060 <_ZN12Transmission9rxTimeoutEv+0x7c>
      timeout = 0;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	67da      	str	r2, [r3, #124]	; 0x7c
      // Radio.SetFrequencyReg(FHSSgetNextFreq());
    }
  }

  timeout++;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	46bd      	mov	sp, r7
 800306e:	b003      	add	sp, #12
 8003070:	bd90      	pop	{r4, r7, pc}

08003072 <_ZN12Transmission10txTransmitEv>:

void Transmission::txTransmit() {
 8003072:	b580      	push	{r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  /* Add payload to tx buffer */
  for (uint32_t i = 0; i < payloadLength - 1; i++) {
 800307a:	2300      	movs	r3, #0
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	228c      	movs	r2, #140	; 0x8c
 8003082:	589b      	ldr	r3, [r3, r2]
 8003084:	3b01      	subs	r3, #1
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	429a      	cmp	r2, r3
 800308a:	d20f      	bcs.n	80030ac <_ZN12Transmission10txTransmitEv+0x3a>
    Radio.TXdataBuffer[i] = txData[i];
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	2190      	movs	r1, #144	; 0x90
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	18d3      	adds	r3, r2, r3
 8003094:	185b      	adds	r3, r3, r1
 8003096:	7819      	ldrb	r1, [r3, #0]
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	18d3      	adds	r3, r2, r3
 800309e:	3308      	adds	r3, #8
 80030a0:	1c0a      	adds	r2, r1, #0
 80030a2:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < payloadLength - 1; i++) {
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	3301      	adds	r3, #1
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	e7e8      	b.n	800307e <_ZN12Transmission10txTransmitEv+0xc>
  }

  /* Calculate CRC and store in last position */
  uint8_t crc = (uint8_t)crc32((const uint8_t *)txData, payloadLength - 1);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3390      	adds	r3, #144	; 0x90
 80030b0:	001a      	movs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	218c      	movs	r1, #140	; 0x8c
 80030b6:	585b      	ldr	r3, [r3, r1]
 80030b8:	3b01      	subs	r3, #1
 80030ba:	0019      	movs	r1, r3
 80030bc:	0010      	movs	r0, r2
 80030be:	f7fd fb1d 	bl	80006fc <_Z5crc32PKhj>
 80030c2:	0002      	movs	r2, r0
 80030c4:	200b      	movs	r0, #11
 80030c6:	183b      	adds	r3, r7, r0
 80030c8:	701a      	strb	r2, [r3, #0]
  Radio.TXdataBuffer[payloadLength - 1] = linkXOR ^ crc;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2283      	movs	r2, #131	; 0x83
 80030ce:	5c99      	ldrb	r1, [r3, r2]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	228c      	movs	r2, #140	; 0x8c
 80030d4:	589b      	ldr	r3, [r3, r2]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	183a      	adds	r2, r7, r0
 80030da:	7812      	ldrb	r2, [r2, #0]
 80030dc:	404a      	eors	r2, r1
 80030de:	b2d1      	uxtb	r1, r2
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	18d3      	adds	r3, r2, r3
 80030e4:	1c0a      	adds	r2, r1, #0
 80030e6:	721a      	strb	r2, [r3, #8]

  /* Transmit message */
  if (!busyTransmitting)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2282      	movs	r2, #130	; 0x82
 80030ec:	5c9b      	ldrb	r3, [r3, r2]
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2201      	movs	r2, #1
 80030f2:	4053      	eors	r3, r2
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <_ZN12Transmission10txTransmitEv+0x90>
    Radio.TXnb();
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	0018      	movs	r0, r3
 80030fe:	f7fd ffcd 	bl	800109c <_ZN12SX1280Driver4TXnbEv>
}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	46bd      	mov	sp, r7
 8003106:	b004      	add	sp, #16
 8003108:	bd80      	pop	{r7, pc}

0800310a <_ZN12Transmission12getDirectionEv>:

transmission_direction_e Transmission::getDirection() {
 800310a:	b580      	push	{r7, lr}
 800310c:	b082      	sub	sp, #8
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  return Settings.transmissionDirection;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	224c      	movs	r2, #76	; 0x4c
 8003116:	5c9b      	ldrb	r3, [r3, r2]
}
 8003118:	0018      	movs	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	b002      	add	sp, #8
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  if (pTransmission->getDirection() == TX) {
 8003128:	4b0c      	ldr	r3, [pc, #48]	; (800315c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	0018      	movs	r0, r3
 800312e:	f7ff ffec 	bl	800310a <_ZN12Transmission12getDirectionEv>
 8003132:	0003      	movs	r3, r0
 8003134:	425a      	negs	r2, r3
 8003136:	4153      	adcs	r3, r2
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d005      	beq.n	800314a <HAL_TIM_PeriodElapsedCallback+0x2a>
    pTransmission->txTransmit();
 800313e:	4b07      	ldr	r3, [pc, #28]	; (800315c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	0018      	movs	r0, r3
 8003144:	f7ff ff95 	bl	8003072 <_ZN12Transmission10txTransmitEv>
  } else {
    pTransmission->rxTimeout();
  }
}
 8003148:	e004      	b.n	8003154 <HAL_TIM_PeriodElapsedCallback+0x34>
    pTransmission->rxTimeout();
 800314a:	4b04      	ldr	r3, [pc, #16]	; (800315c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	0018      	movs	r0, r3
 8003150:	f7ff ff48 	bl	8002fe4 <_ZN12Transmission9rxTimeoutEv>
}
 8003154:	46c0      	nop			; (mov r8, r8)
 8003156:	46bd      	mov	sp, r7
 8003158:	b002      	add	sp, #8
 800315a:	bd80      	pop	{r7, pc}
 800315c:	200000fc 	.word	0x200000fc

08003160 <_ZN6LQCALCILh30EE5resetEv>:

  /* Return N, the size of the LQ history */
  uint8_t getSize() const { return N; }

  /* Initialize and zero the history */
  void reset() {
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
    // count is intentonally not zeroed here to start LQ counting up from 0
    // after a failsafe, instead of down from 100
    LQ = 0;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	701a      	strb	r2, [r3, #0]
    index = 0;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	705a      	strb	r2, [r3, #1]
    LQmask = (1 << 0);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	605a      	str	r2, [r3, #4]
    for (uint8_t i = 0; i < (sizeof(LQArray) / sizeof(LQArray[0])); i++)
 800317a:	230f      	movs	r3, #15
 800317c:	18fb      	adds	r3, r7, r3
 800317e:	2200      	movs	r2, #0
 8003180:	701a      	strb	r2, [r3, #0]
 8003182:	200f      	movs	r0, #15
 8003184:	183b      	adds	r3, r7, r0
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10c      	bne.n	80031a6 <_ZN6LQCALCILh30EE5resetEv+0x46>
      LQArray[i] = 0;
 800318c:	183b      	adds	r3, r7, r0
 800318e:	781a      	ldrb	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3202      	adds	r2, #2
 8003194:	0092      	lsls	r2, r2, #2
 8003196:	2100      	movs	r1, #0
 8003198:	50d1      	str	r1, [r2, r3]
    for (uint8_t i = 0; i < (sizeof(LQArray) / sizeof(LQArray[0])); i++)
 800319a:	183b      	adds	r3, r7, r0
 800319c:	781a      	ldrb	r2, [r3, #0]
 800319e:	183b      	adds	r3, r7, r0
 80031a0:	3201      	adds	r2, #1
 80031a2:	701a      	strb	r2, [r3, #0]
 80031a4:	e7ed      	b.n	8003182 <_ZN6LQCALCILh30EE5resetEv+0x22>
  }
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	46bd      	mov	sp, r7
 80031aa:	b004      	add	sp, #16
 80031ac:	bd80      	pop	{r7, pc}

080031ae <_ZN6LQCALCILh30EE3incEv>:
  void inc() {
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
    LQmask = LQmask << 1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	005a      	lsls	r2, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	605a      	str	r2, [r3, #4]
    if (LQmask == 0) {
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d108      	bne.n	80031da <_ZN6LQCALCILh30EE3incEv+0x2c>
      LQmask = (1 << 0);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	605a      	str	r2, [r3, #4]
      index += 1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	785b      	ldrb	r3, [r3, #1]
 80031d2:	3301      	adds	r3, #1
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	705a      	strb	r2, [r3, #1]
    if ((index == (N / 32)) && (LQmask & (1 << (N % 32)))) {
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	785b      	ldrb	r3, [r3, #1]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10b      	bne.n	80031fa <_ZN6LQCALCILh30EE3incEv+0x4c>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	2380      	movs	r3, #128	; 0x80
 80031e8:	05db      	lsls	r3, r3, #23
 80031ea:	4013      	ands	r3, r2
 80031ec:	d005      	beq.n	80031fa <_ZN6LQCALCILh30EE3incEv+0x4c>
      index = 0;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	705a      	strb	r2, [r3, #1]
      LQmask = (1 << 0);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	605a      	str	r2, [r3, #4]
    if ((LQArray[index] & LQmask) != 0) {
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	785b      	ldrb	r3, [r3, #1]
 80031fe:	001a      	movs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3202      	adds	r2, #2
 8003204:	0092      	lsls	r2, r2, #2
 8003206:	58d2      	ldr	r2, [r2, r3]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	4013      	ands	r3, r2
 800320e:	d018      	beq.n	8003242 <_ZN6LQCALCILh30EE3incEv+0x94>
      LQArray[index] &= ~LQmask;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	785b      	ldrb	r3, [r3, #1]
 8003214:	001a      	movs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3202      	adds	r2, #2
 800321a:	0092      	lsls	r2, r2, #2
 800321c:	58d2      	ldr	r2, [r2, r3]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	43db      	mvns	r3, r3
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	7849      	ldrb	r1, [r1, #1]
 8003228:	0008      	movs	r0, r1
 800322a:	4013      	ands	r3, r2
 800322c:	0019      	movs	r1, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	1c82      	adds	r2, r0, #2
 8003232:	0092      	lsls	r2, r2, #2
 8003234:	50d1      	str	r1, [r2, r3]
      LQ -= 1;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	3b01      	subs	r3, #1
 800323c:	b2da      	uxtb	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	701a      	strb	r2, [r3, #0]
    if (count < N)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	789b      	ldrb	r3, [r3, #2]
 8003246:	2b1d      	cmp	r3, #29
 8003248:	d805      	bhi.n	8003256 <_ZN6LQCALCILh30EE3incEv+0xa8>
      ++count;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	789b      	ldrb	r3, [r3, #2]
 800324e:	3301      	adds	r3, #1
 8003250:	b2da      	uxtb	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	709a      	strb	r2, [r3, #2]
  }
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	46bd      	mov	sp, r7
 800325a:	b002      	add	sp, #8
 800325c:	bd80      	pop	{r7, pc}

0800325e <_ZN6LQCALCILh30EE3addEv>:
  void add() {
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
    if (currentIsSet())
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	0018      	movs	r0, r3
 800326a:	f000 f81f 	bl	80032ac <_ZNK6LQCALCILh30EE12currentIsSetEv>
 800326e:	1e03      	subs	r3, r0, #0
 8003270:	d118      	bne.n	80032a4 <_ZN6LQCALCILh30EE3addEv+0x46>
    LQArray[index] |= LQmask;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	785b      	ldrb	r3, [r3, #1]
 8003276:	001a      	movs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3202      	adds	r2, #2
 800327c:	0092      	lsls	r2, r2, #2
 800327e:	58d2      	ldr	r2, [r2, r3]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	7849      	ldrb	r1, [r1, #1]
 8003288:	0008      	movs	r0, r1
 800328a:	431a      	orrs	r2, r3
 800328c:	0011      	movs	r1, r2
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	1c82      	adds	r2, r0, #2
 8003292:	0092      	lsls	r2, r2, #2
 8003294:	50d1      	str	r1, [r2, r3]
    LQ += 1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	3301      	adds	r3, #1
 800329c:	b2da      	uxtb	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	701a      	strb	r2, [r3, #0]
 80032a2:	e000      	b.n	80032a6 <_ZN6LQCALCILh30EE3addEv+0x48>
      return;
 80032a4:	46c0      	nop			; (mov r8, r8)
  }
 80032a6:	46bd      	mov	sp, r7
 80032a8:	b002      	add	sp, #8
 80032aa:	bd80      	pop	{r7, pc}

080032ac <_ZNK6LQCALCILh30EE12currentIsSetEv>:

  /*  Return true if the current period was add()ed */
  bool currentIsSet() const { return LQArray[index] & LQmask; }
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	785b      	ldrb	r3, [r3, #1]
 80032b8:	001a      	movs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3202      	adds	r2, #2
 80032be:	0092      	lsls	r2, r2, #2
 80032c0:	58d2      	ldr	r2, [r2, r3]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4013      	ands	r3, r2
 80032c8:	1e5a      	subs	r2, r3, #1
 80032ca:	4193      	sbcs	r3, r2
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	0018      	movs	r0, r3
 80032d0:	46bd      	mov	sp, r7
 80032d2:	b002      	add	sp, #8
 80032d4:	bd80      	pop	{r7, pc}
	...

080032d8 <_ZN20TransmissionSettingsC1Ev>:

#include "SX1280Driver/SX1280_Regs.h"
#include "telemetry_reg.h"
#include <cstdint>

class TransmissionSettings {
 80032d8:	b590      	push	{r4, r7, lr}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	701a      	strb	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	705a      	strb	r2, [r3, #1]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2222      	movs	r2, #34	; 0x22
 80032f0:	709a      	strb	r2, [r3, #2]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2214      	movs	r2, #20
 80032f6:	70da      	strb	r2, [r3, #3]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	731a      	strb	r2, [r3, #12]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	611a      	str	r2, [r3, #16]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a05      	ldr	r2, [pc, #20]	; (800331c <_ZN20TransmissionSettingsC1Ev+0x44>)
 8003308:	3314      	adds	r3, #20
 800330a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800330c:	c313      	stmia	r3!, {r0, r1, r4}
 800330e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003310:	c313      	stmia	r3!, {r0, r1, r4}
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	0018      	movs	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	b003      	add	sp, #12
 800331a:	bd90      	pop	{r4, r7, pc}
 800331c:	0800a3f0 	.word	0x0800a3f0

08003320 <_ZN12TransmissionC1Ev>:
class Transmission {
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	0018      	movs	r0, r3
 800332c:	f7fd fa64 	bl	80007f8 <_ZN12SX1280DriverC1Ev>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3340      	adds	r3, #64	; 0x40
 8003334:	0018      	movs	r0, r3
 8003336:	f000 f819 	bl	800336c <_ZN6LQCALCILh30EEC1Ev>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	334c      	adds	r3, #76	; 0x4c
 800333e:	0018      	movs	r0, r3
 8003340:	f7ff ffca 	bl	80032d8 <_ZN20TransmissionSettingsC1Ev>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	67da      	str	r2, [r3, #124]	; 0x7c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2280      	movs	r2, #128	; 0x80
 800334e:	2100      	movs	r1, #0
 8003350:	5499      	strb	r1, [r3, r2]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2288      	movs	r2, #136	; 0x88
 8003356:	2100      	movs	r1, #0
 8003358:	5499      	strb	r1, [r3, r2]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	228c      	movs	r2, #140	; 0x8c
 800335e:	2100      	movs	r1, #0
 8003360:	5099      	str	r1, [r3, r2]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	0018      	movs	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	b002      	add	sp, #8
 800336a:	bd80      	pop	{r7, pc}

0800336c <_ZN6LQCALCILh30EEC1Ev>:
  LQCALC(void) {
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
    reset();
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	0018      	movs	r0, r3
 8003378:	f7ff fef2 	bl	8003160 <_ZN6LQCALCILh30EE5resetEv>
    count = 1;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	709a      	strb	r2, [r3, #2]
  }
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	0018      	movs	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	b002      	add	sp, #8
 800338a:	bd80      	pop	{r7, pc}

0800338c <_ZN10RingBufferIhLj128EEC1Ev>:
RingBuffer()
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
         _numElements = 0;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2284      	movs	r2, #132	; 0x84
 8003398:	2100      	movs	r1, #0
 800339a:	5099      	str	r1, [r3, r2]
         _head = 0;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2280      	movs	r2, #128	; 0x80
 80033a0:	2100      	movs	r1, #0
 80033a2:	5099      	str	r1, [r3, r2]
}
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	0018      	movs	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b002      	add	sp, #8
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <_Z41__static_initialization_and_destruction_0ii>:
#include "common.h"

Transmission Link;

RingBuffer<uint8_t, 128> Uart1Buffer;
RingBuffer<uint8_t, 128> Uart2Buffer;
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d10f      	bne.n	80033e0 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	4a09      	ldr	r2, [pc, #36]	; (80033e8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d10b      	bne.n	80033e0 <_Z41__static_initialization_and_destruction_0ii+0x30>
Transmission Link;
 80033c8:	4b08      	ldr	r3, [pc, #32]	; (80033ec <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80033ca:	0018      	movs	r0, r3
 80033cc:	f7ff ffa8 	bl	8003320 <_ZN12TransmissionC1Ev>
RingBuffer<uint8_t, 128> Uart1Buffer;
 80033d0:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80033d2:	0018      	movs	r0, r3
 80033d4:	f7ff ffda 	bl	800338c <_ZN10RingBufferIhLj128EEC1Ev>
RingBuffer<uint8_t, 128> Uart2Buffer;
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80033da:	0018      	movs	r0, r3
 80033dc:	f7ff ffd6 	bl	800338c <_ZN10RingBufferIhLj128EEC1Ev>
 80033e0:	46c0      	nop			; (mov r8, r8)
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b002      	add	sp, #8
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	0000ffff 	.word	0x0000ffff
 80033ec:	20000100 	.word	0x20000100
 80033f0:	200001b8 	.word	0x200001b8
 80033f4:	20000240 	.word	0x20000240

080033f8 <_GLOBAL__sub_I_Link>:
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	4b03      	ldr	r3, [pc, #12]	; (800340c <_GLOBAL__sub_I_Link+0x14>)
 80033fe:	0019      	movs	r1, r3
 8003400:	2001      	movs	r0, #1
 8003402:	f7ff ffd5 	bl	80033b0 <_Z41__static_initialization_and_destruction_0ii>
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	0000ffff 	.word	0x0000ffff

08003410 <_ZNK15TinyGPSLocation7isValidEv>:
  bool isValid() const { return valid; }
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	0018      	movs	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	b002      	add	sp, #8
 8003422:	bd80      	pop	{r7, pc}

08003424 <_Z8gpsSetupv>:

TinyGPSPlus gps;

extern UART_HandleTypeDef huart1;

void gpsSetup() {
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0

  uint8_t command[20];

  /* Request UART speed of 115200 */
  sprintf((char *)command, "$PCAS01,5*19\r\n");
 800342a:	4a23      	ldr	r2, [pc, #140]	; (80034b8 <_Z8gpsSetupv+0x94>)
 800342c:	1d3b      	adds	r3, r7, #4
 800342e:	0011      	movs	r1, r2
 8003430:	0018      	movs	r0, r3
 8003432:	f006 facd 	bl	80099d0 <siprintf>
  HAL_UART_Transmit(&huart1, command, 14, 100);
 8003436:	1d39      	adds	r1, r7, #4
 8003438:	4820      	ldr	r0, [pc, #128]	; (80034bc <_Z8gpsSetupv+0x98>)
 800343a:	2364      	movs	r3, #100	; 0x64
 800343c:	220e      	movs	r2, #14
 800343e:	f004 fa5d 	bl	80078fc <HAL_UART_Transmit>

  HAL_Delay(200);
 8003442:	20c8      	movs	r0, #200	; 0xc8
 8003444:	f000 ffb0 	bl	80043a8 <HAL_Delay>

  /* Change bus speed to 115200 */
  USART1->CR1 &= ~(USART_CR1_UE);
 8003448:	4b1d      	ldr	r3, [pc, #116]	; (80034c0 <_Z8gpsSetupv+0x9c>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	4b1c      	ldr	r3, [pc, #112]	; (80034c0 <_Z8gpsSetupv+0x9c>)
 800344e:	2101      	movs	r1, #1
 8003450:	438a      	bics	r2, r1
 8003452:	601a      	str	r2, [r3, #0]
  USART1->BRR = 417; // Set baud to 115200
 8003454:	4b1a      	ldr	r3, [pc, #104]	; (80034c0 <_Z8gpsSetupv+0x9c>)
 8003456:	22a2      	movs	r2, #162	; 0xa2
 8003458:	32ff      	adds	r2, #255	; 0xff
 800345a:	60da      	str	r2, [r3, #12]
  USART1->CR1 |= USART_CR1_UE;
 800345c:	4b18      	ldr	r3, [pc, #96]	; (80034c0 <_Z8gpsSetupv+0x9c>)
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	4b17      	ldr	r3, [pc, #92]	; (80034c0 <_Z8gpsSetupv+0x9c>)
 8003462:	2101      	movs	r1, #1
 8003464:	430a      	orrs	r2, r1
 8003466:	601a      	str	r2, [r3, #0]

  HAL_Delay(200);
 8003468:	20c8      	movs	r0, #200	; 0xc8
 800346a:	f000 ff9d 	bl	80043a8 <HAL_Delay>

  /* Request 10Hz update rate */
  sprintf((char *)command, "$PCAS02,100*1E\r\n");
 800346e:	4a15      	ldr	r2, [pc, #84]	; (80034c4 <_Z8gpsSetupv+0xa0>)
 8003470:	1d3b      	adds	r3, r7, #4
 8003472:	0011      	movs	r1, r2
 8003474:	0018      	movs	r0, r3
 8003476:	f006 faab 	bl	80099d0 <siprintf>
  HAL_UART_Transmit(&huart1, command, 16, 100);
 800347a:	1d39      	adds	r1, r7, #4
 800347c:	480f      	ldr	r0, [pc, #60]	; (80034bc <_Z8gpsSetupv+0x98>)
 800347e:	2364      	movs	r3, #100	; 0x64
 8003480:	2210      	movs	r2, #16
 8003482:	f004 fa3b 	bl	80078fc <HAL_UART_Transmit>

  HAL_Delay(10);
 8003486:	200a      	movs	r0, #10
 8003488:	f000 ff8e 	bl	80043a8 <HAL_Delay>

  /* Request airbourne <4g mode*/
  sprintf((char *)command, "$PCAS11,7*1A\r\n");
 800348c:	4a0e      	ldr	r2, [pc, #56]	; (80034c8 <_Z8gpsSetupv+0xa4>)
 800348e:	1d3b      	adds	r3, r7, #4
 8003490:	0011      	movs	r1, r2
 8003492:	0018      	movs	r0, r3
 8003494:	f006 fa9c 	bl	80099d0 <siprintf>
  HAL_UART_Transmit(&huart1, command, 14, 100);
 8003498:	1d39      	adds	r1, r7, #4
 800349a:	4808      	ldr	r0, [pc, #32]	; (80034bc <_Z8gpsSetupv+0x98>)
 800349c:	2364      	movs	r3, #100	; 0x64
 800349e:	220e      	movs	r2, #14
 80034a0:	f004 fa2c 	bl	80078fc <HAL_UART_Transmit>

  /* Start receiving data from the module */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&c1, 1);
 80034a4:	4909      	ldr	r1, [pc, #36]	; (80034cc <_Z8gpsSetupv+0xa8>)
 80034a6:	4b05      	ldr	r3, [pc, #20]	; (80034bc <_Z8gpsSetupv+0x98>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	0018      	movs	r0, r3
 80034ac:	f004 fad2 	bl	8007a54 <HAL_UART_Receive_IT>
}
 80034b0:	46c0      	nop			; (mov r8, r8)
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b006      	add	sp, #24
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	0800a408 	.word	0x0800a408
 80034bc:	200004bc 	.word	0x200004bc
 80034c0:	40013800 	.word	0x40013800
 80034c4:	0800a418 	.word	0x0800a418
 80034c8:	0800a42c 	.word	0x0800a42c
 80034cc:	200002c8 	.word	0x200002c8

080034d0 <_Z6gpsRunv>:

bool gpsRun() {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  if (HAL_GetTick() > (lr1 + 100)) {
 80034d4:	f000 ff5e 	bl	8004394 <HAL_GetTick>
 80034d8:	0002      	movs	r2, r0
 80034da:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <_Z6gpsRunv+0x38>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	3364      	adds	r3, #100	; 0x64
 80034e0:	4293      	cmp	r3, r2
 80034e2:	419b      	sbcs	r3, r3
 80034e4:	425b      	negs	r3, r3
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d005      	beq.n	80034f8 <_Z6gpsRunv+0x28>
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&c1, 1);
 80034ec:	4907      	ldr	r1, [pc, #28]	; (800350c <_Z6gpsRunv+0x3c>)
 80034ee:	4b08      	ldr	r3, [pc, #32]	; (8003510 <_Z6gpsRunv+0x40>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	0018      	movs	r0, r3
 80034f4:	f004 faae 	bl	8007a54 <HAL_UART_Receive_IT>
  }

  return gps.location.isValid();
 80034f8:	4b06      	ldr	r3, [pc, #24]	; (8003514 <_Z6gpsRunv+0x44>)
 80034fa:	0018      	movs	r0, r3
 80034fc:	f7ff ff88 	bl	8003410 <_ZNK15TinyGPSLocation7isValidEv>
 8003500:	0003      	movs	r3, r0
}
 8003502:	0018      	movs	r0, r3
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	200002cc 	.word	0x200002cc
 800350c:	200002c8 	.word	0x200002c8
 8003510:	200004bc 	.word	0x200004bc
 8003514:	200002d0 	.word	0x200002d0

08003518 <_Z41__static_initialization_and_destruction_0ii>:
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d107      	bne.n	8003538 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	4a05      	ldr	r2, [pc, #20]	; (8003540 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d103      	bne.n	8003538 <_Z41__static_initialization_and_destruction_0ii+0x20>
TinyGPSPlus gps;
 8003530:	4b04      	ldr	r3, [pc, #16]	; (8003544 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8003532:	0018      	movs	r0, r3
 8003534:	f7fe fd10 	bl	8001f58 <_ZN11TinyGPSPlusC1Ev>
}
 8003538:	46c0      	nop			; (mov r8, r8)
 800353a:	46bd      	mov	sp, r7
 800353c:	b002      	add	sp, #8
 800353e:	bd80      	pop	{r7, pc}
 8003540:	0000ffff 	.word	0x0000ffff
 8003544:	200002d0 	.word	0x200002d0

08003548 <_GLOBAL__sub_I_c1>:
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
 800354c:	4b03      	ldr	r3, [pc, #12]	; (800355c <_GLOBAL__sub_I_c1+0x14>)
 800354e:	0019      	movs	r1, r3
 8003550:	2001      	movs	r0, #1
 8003552:	f7ff ffe1 	bl	8003518 <_Z41__static_initialization_and_destruction_0ii>
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	0000ffff 	.word	0x0000ffff

08003560 <_ZN6ParserC1Ev>:
class Parser {
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	615a      	str	r2, [r3, #20]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	761a      	strb	r2, [r3, #24]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	4252      	negs	r2, r2
 800357a:	61da      	str	r2, [r3, #28]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a06      	ldr	r2, [pc, #24]	; (8003598 <_ZN6ParserC1Ev+0x38>)
 8003580:	3324      	adds	r3, #36	; 0x24
 8003582:	0011      	movs	r1, r2
 8003584:	2270      	movs	r2, #112	; 0x70
 8003586:	0018      	movs	r0, r3
 8003588:	f006 fa10 	bl	80099ac <memcpy>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	0018      	movs	r0, r3
 8003590:	46bd      	mov	sp, r7
 8003592:	b002      	add	sp, #8
 8003594:	bd80      	pop	{r7, pc}
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	0800a43c 	.word	0x0800a43c

0800359c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800359c:	b590      	push	{r4, r7, lr}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 80035a2:	f000 fe7b 	bl	800429c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035a6:	f000 f89f 	bl	80036e8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035aa:	f000 fad3 	bl	8003b54 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 80035ae:	f000 f901 	bl	80037b4 <_ZL12MX_ADC1_Initv>
  MX_SPI1_Init();
 80035b2:	f000 f971 	bl	8003898 <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 80035b6:	f000 fa11 	bl	80039dc <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 80035ba:	f000 fa6d 	bl	8003a98 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 80035be:	f000 f9ad 	bl	800391c <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  HAL_Delay(4000);
 80035c2:	23fa      	movs	r3, #250	; 0xfa
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	0018      	movs	r0, r3
 80035c8:	f000 feee 	bl	80043a8 <HAL_Delay>
  start_serial();
 80035cc:	f7fe fb5e 	bl	8001c8c <_Z12start_serialv>
  gpsSetup();
 80035d0:	f7ff ff28 	bl	8003424 <_Z8gpsSetupv>

  while (Link.begin(&htim2) == false) {
 80035d4:	4a3c      	ldr	r2, [pc, #240]	; (80036c8 <main+0x12c>)
 80035d6:	4b3d      	ldr	r3, [pc, #244]	; (80036cc <main+0x130>)
 80035d8:	0011      	movs	r1, r2
 80035da:	0018      	movs	r0, r3
 80035dc:	f7ff fa52 	bl	8002a84 <_ZN12Transmission5beginEP17TIM_HandleTypeDef>
 80035e0:	0003      	movs	r3, r0
 80035e2:	425a      	negs	r2, r3
 80035e4:	4153      	adcs	r3, r2
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <main+0x58>
    HAL_Delay(10);
 80035ec:	200a      	movs	r0, #10
 80035ee:	f000 fedb 	bl	80043a8 <HAL_Delay>
  while (Link.begin(&htim2) == false) {
 80035f2:	e7ef      	b.n	80035d4 <main+0x38>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // if(gpsRun()){

    gpsRun();
 80035f4:	f7ff ff6c 	bl	80034d0 <_Z6gpsRunv>
    /* Transmit GPS info */

    if (!Uart1Buffer.isEmpty()) {
 80035f8:	4b35      	ldr	r3, [pc, #212]	; (80036d0 <main+0x134>)
 80035fa:	0018      	movs	r0, r3
 80035fc:	f000 fb63 	bl	8003cc6 <_ZNK10RingBufferIhLj128EE7isEmptyEv>
 8003600:	0003      	movs	r3, r0
 8003602:	001a      	movs	r2, r3
 8003604:	2301      	movs	r3, #1
 8003606:	4053      	eors	r3, r2
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00d      	beq.n	800362a <main+0x8e>
      uint8_t data;
      Uart1Buffer.pop(&data);
 800360e:	2417      	movs	r4, #23
 8003610:	193a      	adds	r2, r7, r4
 8003612:	4b2f      	ldr	r3, [pc, #188]	; (80036d0 <main+0x134>)
 8003614:	0011      	movs	r1, r2
 8003616:	0018      	movs	r0, r3
 8003618:	f000 fb67 	bl	8003cea <_ZN10RingBufferIhLj128EE3popEPh>
      gps.encode(data);
 800361c:	193b      	adds	r3, r7, r4
 800361e:	781a      	ldrb	r2, [r3, #0]
 8003620:	4b2c      	ldr	r3, [pc, #176]	; (80036d4 <main+0x138>)
 8003622:	0011      	movs	r1, r2
 8003624:	0018      	movs	r0, r3
 8003626:	f7fe fcfb 	bl	8002020 <_ZN11TinyGPSPlus6encodeEc>
    }

    if (!Uart2Buffer.isEmpty()) {
 800362a:	4b2b      	ldr	r3, [pc, #172]	; (80036d8 <main+0x13c>)
 800362c:	0018      	movs	r0, r3
 800362e:	f000 fb4a 	bl	8003cc6 <_ZNK10RingBufferIhLj128EE7isEmptyEv>
 8003632:	0003      	movs	r3, r0
 8003634:	001a      	movs	r2, r3
 8003636:	2301      	movs	r3, #1
 8003638:	4053      	eors	r3, r2
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00d      	beq.n	800365c <main+0xc0>
      uint8_t data;
      Uart2Buffer.pop(&data);
 8003640:	2416      	movs	r4, #22
 8003642:	193a      	adds	r2, r7, r4
 8003644:	4b24      	ldr	r3, [pc, #144]	; (80036d8 <main+0x13c>)
 8003646:	0011      	movs	r1, r2
 8003648:	0018      	movs	r0, r3
 800364a:	f000 fb4e 	bl	8003cea <_ZN10RingBufferIhLj128EE3popEPh>
      p.process(data);
 800364e:	193b      	adds	r3, r7, r4
 8003650:	781a      	ldrb	r2, [r3, #0]
 8003652:	4b22      	ldr	r3, [pc, #136]	; (80036dc <main+0x140>)
 8003654:	0011      	movs	r1, r2
 8003656:	0018      	movs	r0, r3
 8003658:	f7fe f9c2 	bl	80019e0 <_ZN6Parser7processEh>
    }

    if (HAL_GetTick() > (lr2 + 500)) {
 800365c:	f000 fe9a 	bl	8004394 <HAL_GetTick>
 8003660:	0002      	movs	r2, r0
 8003662:	4b1f      	ldr	r3, [pc, #124]	; (80036e0 <main+0x144>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	33f5      	adds	r3, #245	; 0xf5
 8003668:	33ff      	adds	r3, #255	; 0xff
 800366a:	4293      	cmp	r3, r2
 800366c:	419b      	sbcs	r3, r3
 800366e:	425b      	negs	r3, r3
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <main+0xde>
      start_serial();
 8003676:	f7fe fb09 	bl	8001c8c <_Z12start_serialv>
    }

    if (Link.available()) {
 800367a:	4b14      	ldr	r3, [pc, #80]	; (80036cc <main+0x130>)
 800367c:	0018      	movs	r0, r3
 800367e:	f7ff fae4 	bl	8002c4a <_ZN12Transmission9availableEv>
 8003682:	1e03      	subs	r3, r0, #0
 8003684:	d0b6      	beq.n	80035f4 <main+0x58>
      uint8_t rx_data[16];
      Link.readBytes(rx_data, 16);
 8003686:	1d39      	adds	r1, r7, #4
 8003688:	4b10      	ldr	r3, [pc, #64]	; (80036cc <main+0x130>)
 800368a:	2210      	movs	r2, #16
 800368c:	0018      	movs	r0, r3
 800368e:	f7ff fae8 	bl	8002c62 <_ZN12Transmission9readBytesEPhm>

      uint8_t command = CMD_RX;
 8003692:	1cfb      	adds	r3, r7, #3
 8003694:	2231      	movs	r2, #49	; 0x31
 8003696:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, &command, 1, 2);
 8003698:	1cf9      	adds	r1, r7, #3
 800369a:	4812      	ldr	r0, [pc, #72]	; (80036e4 <main+0x148>)
 800369c:	2302      	movs	r3, #2
 800369e:	2201      	movs	r2, #1
 80036a0:	f004 f92c 	bl	80078fc <HAL_UART_Transmit>
      uint8_t length = 16;
 80036a4:	1cbb      	adds	r3, r7, #2
 80036a6:	2210      	movs	r2, #16
 80036a8:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, &length, 1, 2);
 80036aa:	1cb9      	adds	r1, r7, #2
 80036ac:	480d      	ldr	r0, [pc, #52]	; (80036e4 <main+0x148>)
 80036ae:	2302      	movs	r3, #2
 80036b0:	2201      	movs	r2, #1
 80036b2:	f004 f923 	bl	80078fc <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart2, rx_data, length, 2);
 80036b6:	1cbb      	adds	r3, r7, #2
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	1d39      	adds	r1, r7, #4
 80036be:	4809      	ldr	r0, [pc, #36]	; (80036e4 <main+0x148>)
 80036c0:	2302      	movs	r3, #2
 80036c2:	f004 f91b 	bl	80078fc <HAL_UART_Transmit>
    //}

    // HAL_Delay(100);

    // HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
  }
 80036c6:	e795      	b.n	80035f4 <main+0x58>
 80036c8:	20000470 	.word	0x20000470
 80036cc:	20000100 	.word	0x20000100
 80036d0:	200001b8 	.word	0x200001b8
 80036d4:	200002d0 	.word	0x200002d0
 80036d8:	20000240 	.word	0x20000240
 80036dc:	200005dc 	.word	0x200005dc
 80036e0:	20000670 	.word	0x20000670
 80036e4:	2000054c 	.word	0x2000054c

080036e8 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80036e8:	b590      	push	{r4, r7, lr}
 80036ea:	b093      	sub	sp, #76	; 0x4c
 80036ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036ee:	2410      	movs	r4, #16
 80036f0:	193b      	adds	r3, r7, r4
 80036f2:	0018      	movs	r0, r3
 80036f4:	2338      	movs	r3, #56	; 0x38
 80036f6:	001a      	movs	r2, r3
 80036f8:	2100      	movs	r1, #0
 80036fa:	f006 f960 	bl	80099be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036fe:	003b      	movs	r3, r7
 8003700:	0018      	movs	r0, r3
 8003702:	2310      	movs	r3, #16
 8003704:	001a      	movs	r2, r3
 8003706:	2100      	movs	r1, #0
 8003708:	f006 f959 	bl	80099be <memset>

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800370c:	2380      	movs	r3, #128	; 0x80
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	0018      	movs	r0, r3
 8003712:	f001 feb9 	bl	8005488 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003716:	193b      	adds	r3, r7, r4
 8003718:	2202      	movs	r2, #2
 800371a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800371c:	193b      	adds	r3, r7, r4
 800371e:	2280      	movs	r2, #128	; 0x80
 8003720:	0052      	lsls	r2, r2, #1
 8003722:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003724:	0021      	movs	r1, r4
 8003726:	187b      	adds	r3, r7, r1
 8003728:	2200      	movs	r2, #0
 800372a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800372c:	187b      	adds	r3, r7, r1
 800372e:	2240      	movs	r2, #64	; 0x40
 8003730:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003732:	187b      	adds	r3, r7, r1
 8003734:	2202      	movs	r2, #2
 8003736:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003738:	187b      	adds	r3, r7, r1
 800373a:	2202      	movs	r2, #2
 800373c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800373e:	187b      	adds	r3, r7, r1
 8003740:	2200      	movs	r2, #0
 8003742:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 9;
 8003744:	187b      	adds	r3, r7, r1
 8003746:	2209      	movs	r2, #9
 8003748:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800374a:	187b      	adds	r3, r7, r1
 800374c:	2280      	movs	r2, #128	; 0x80
 800374e:	0292      	lsls	r2, r2, #10
 8003750:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003752:	187b      	adds	r3, r7, r1
 8003754:	2280      	movs	r2, #128	; 0x80
 8003756:	0492      	lsls	r2, r2, #18
 8003758:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 800375a:	187b      	adds	r3, r7, r1
 800375c:	2280      	movs	r2, #128	; 0x80
 800375e:	05d2      	lsls	r2, r2, #23
 8003760:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003762:	187b      	adds	r3, r7, r1
 8003764:	0018      	movs	r0, r3
 8003766:	f001 fedb 	bl	8005520 <HAL_RCC_OscConfig>
 800376a:	0003      	movs	r3, r0
 800376c:	1e5a      	subs	r2, r3, #1
 800376e:	4193      	sbcs	r3, r2
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <_Z18SystemClock_Configv+0x92>
    Error_Handler();
 8003776:	f000 faa1 	bl	8003cbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType =
 800377a:	003b      	movs	r3, r7
 800377c:	2207      	movs	r2, #7
 800377e:	601a      	str	r2, [r3, #0]
      RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003780:	003b      	movs	r3, r7
 8003782:	2202      	movs	r2, #2
 8003784:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003786:	003b      	movs	r3, r7
 8003788:	2200      	movs	r2, #0
 800378a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800378c:	003b      	movs	r3, r7
 800378e:	2200      	movs	r2, #0
 8003790:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8003792:	003b      	movs	r3, r7
 8003794:	2101      	movs	r1, #1
 8003796:	0018      	movs	r0, r3
 8003798:	f002 f9e2 	bl	8005b60 <HAL_RCC_ClockConfig>
 800379c:	0003      	movs	r3, r0
 800379e:	1e5a      	subs	r2, r3, #1
 80037a0:	4193      	sbcs	r3, r2
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <_Z18SystemClock_Configv+0xc4>
    Error_Handler();
 80037a8:	f000 fa88 	bl	8003cbc <Error_Handler>
  }
}
 80037ac:	46c0      	nop			; (mov r8, r8)
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b013      	add	sp, #76	; 0x4c
 80037b2:	bd90      	pop	{r4, r7, pc}

080037b4 <_ZL12MX_ADC1_Initv>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80037ba:	1d3b      	adds	r3, r7, #4
 80037bc:	0018      	movs	r0, r3
 80037be:	230c      	movs	r3, #12
 80037c0:	001a      	movs	r2, r3
 80037c2:	2100      	movs	r1, #0
 80037c4:	f006 f8fb 	bl	80099be <memset>

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data
   * Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 80037c8:	4b31      	ldr	r3, [pc, #196]	; (8003890 <_ZL12MX_ADC1_Initv+0xdc>)
 80037ca:	4a32      	ldr	r2, [pc, #200]	; (8003894 <_ZL12MX_ADC1_Initv+0xe0>)
 80037cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80037ce:	4b30      	ldr	r3, [pc, #192]	; (8003890 <_ZL12MX_ADC1_Initv+0xdc>)
 80037d0:	2280      	movs	r2, #128	; 0x80
 80037d2:	05d2      	lsls	r2, r2, #23
 80037d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80037d6:	4b2e      	ldr	r3, [pc, #184]	; (8003890 <_ZL12MX_ADC1_Initv+0xdc>)
 80037d8:	2200      	movs	r2, #0
 80037da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80037dc:	4b2c      	ldr	r3, [pc, #176]	; (8003890 <_ZL12MX_ADC1_Initv+0xdc>)
 80037de:	2200      	movs	r2, #0
 80037e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80037e2:	4b2b      	ldr	r3, [pc, #172]	; (8003890 <_ZL12MX_ADC1_Initv+0xdc>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80037e8:	4b29      	ldr	r3, [pc, #164]	; (8003890 <_ZL12MX_ADC1_Initv+0xdc>)
 80037ea:	2204      	movs	r2, #4
 80037ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80037ee:	4b28      	ldr	r3, [pc, #160]	; (8003890 <_ZL12MX_ADC1_Initv+0xdc>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80037f4:	4b26      	ldr	r3, [pc, #152]	; (8003890 <_ZL12MX_ADC1_Initv+0xdc>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80037fa:	4b25      	ldr	r3, [pc, #148]	; (8003890 <_ZL12MX_ADC1_Initv+0xdc>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8003800:	4b23      	ldr	r3, [pc, #140]	; (8003890 <_ZL12MX_ADC1_Initv+0xdc>)
 8003802:	2201      	movs	r2, #1
 8003804:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003806:	4b22      	ldr	r3, [pc, #136]	; (8003890 <_ZL12MX_ADC1_Initv+0xdc>)
 8003808:	2220      	movs	r2, #32
 800380a:	2100      	movs	r1, #0
 800380c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800380e:	4b20      	ldr	r3, [pc, #128]	; (8003890 <_ZL12MX_ADC1_Initv+0xdc>)
 8003810:	2200      	movs	r2, #0
 8003812:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003814:	4b1e      	ldr	r3, [pc, #120]	; (8003890 <_ZL12MX_ADC1_Initv+0xdc>)
 8003816:	2200      	movs	r2, #0
 8003818:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800381a:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <_ZL12MX_ADC1_Initv+0xdc>)
 800381c:	222c      	movs	r2, #44	; 0x2c
 800381e:	2100      	movs	r1, #0
 8003820:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003822:	4b1b      	ldr	r3, [pc, #108]	; (8003890 <_ZL12MX_ADC1_Initv+0xdc>)
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8003828:	4b19      	ldr	r3, [pc, #100]	; (8003890 <_ZL12MX_ADC1_Initv+0xdc>)
 800382a:	2200      	movs	r2, #0
 800382c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800382e:	4b18      	ldr	r3, [pc, #96]	; (8003890 <_ZL12MX_ADC1_Initv+0xdc>)
 8003830:	2200      	movs	r2, #0
 8003832:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003834:	4b16      	ldr	r3, [pc, #88]	; (8003890 <_ZL12MX_ADC1_Initv+0xdc>)
 8003836:	223c      	movs	r2, #60	; 0x3c
 8003838:	2100      	movs	r1, #0
 800383a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800383c:	4b14      	ldr	r3, [pc, #80]	; (8003890 <_ZL12MX_ADC1_Initv+0xdc>)
 800383e:	2200      	movs	r2, #0
 8003840:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8003842:	4b13      	ldr	r3, [pc, #76]	; (8003890 <_ZL12MX_ADC1_Initv+0xdc>)
 8003844:	0018      	movs	r0, r3
 8003846:	f000 fed1 	bl	80045ec <HAL_ADC_Init>
 800384a:	0003      	movs	r3, r0
 800384c:	1e5a      	subs	r2, r3, #1
 800384e:	4193      	sbcs	r3, r2
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <_ZL12MX_ADC1_Initv+0xa6>
    Error_Handler();
 8003856:	f000 fa31 	bl	8003cbc <Error_Handler>
  }
  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_0;
 800385a:	1d3b      	adds	r3, r7, #4
 800385c:	2201      	movs	r2, #1
 800385e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003860:	1d3b      	adds	r3, r7, #4
 8003862:	2200      	movs	r2, #0
 8003864:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003866:	1d3b      	adds	r3, r7, #4
 8003868:	2200      	movs	r2, #0
 800386a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800386c:	1d3a      	adds	r2, r7, #4
 800386e:	4b08      	ldr	r3, [pc, #32]	; (8003890 <_ZL12MX_ADC1_Initv+0xdc>)
 8003870:	0011      	movs	r1, r2
 8003872:	0018      	movs	r0, r3
 8003874:	f001 f898 	bl	80049a8 <HAL_ADC_ConfigChannel>
 8003878:	0003      	movs	r3, r0
 800387a:	1e5a      	subs	r2, r3, #1
 800387c:	4193      	sbcs	r3, r2
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <_ZL12MX_ADC1_Initv+0xd4>
    Error_Handler();
 8003884:	f000 fa1a 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8003888:	46c0      	nop			; (mov r8, r8)
 800388a:	46bd      	mov	sp, r7
 800388c:	b004      	add	sp, #16
 800388e:	bd80      	pop	{r7, pc}
 8003890:	200003a8 	.word	0x200003a8
 8003894:	40012400 	.word	0x40012400

08003898 <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800389c:	4b1d      	ldr	r3, [pc, #116]	; (8003914 <_ZL12MX_SPI1_Initv+0x7c>)
 800389e:	4a1e      	ldr	r2, [pc, #120]	; (8003918 <_ZL12MX_SPI1_Initv+0x80>)
 80038a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80038a2:	4b1c      	ldr	r3, [pc, #112]	; (8003914 <_ZL12MX_SPI1_Initv+0x7c>)
 80038a4:	2282      	movs	r2, #130	; 0x82
 80038a6:	0052      	lsls	r2, r2, #1
 80038a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80038aa:	4b1a      	ldr	r3, [pc, #104]	; (8003914 <_ZL12MX_SPI1_Initv+0x7c>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80038b0:	4b18      	ldr	r3, [pc, #96]	; (8003914 <_ZL12MX_SPI1_Initv+0x7c>)
 80038b2:	22e0      	movs	r2, #224	; 0xe0
 80038b4:	00d2      	lsls	r2, r2, #3
 80038b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038b8:	4b16      	ldr	r3, [pc, #88]	; (8003914 <_ZL12MX_SPI1_Initv+0x7c>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038be:	4b15      	ldr	r3, [pc, #84]	; (8003914 <_ZL12MX_SPI1_Initv+0x7c>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80038c4:	4b13      	ldr	r3, [pc, #76]	; (8003914 <_ZL12MX_SPI1_Initv+0x7c>)
 80038c6:	2280      	movs	r2, #128	; 0x80
 80038c8:	0092      	lsls	r2, r2, #2
 80038ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80038cc:	4b11      	ldr	r3, [pc, #68]	; (8003914 <_ZL12MX_SPI1_Initv+0x7c>)
 80038ce:	2210      	movs	r2, #16
 80038d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038d2:	4b10      	ldr	r3, [pc, #64]	; (8003914 <_ZL12MX_SPI1_Initv+0x7c>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80038d8:	4b0e      	ldr	r3, [pc, #56]	; (8003914 <_ZL12MX_SPI1_Initv+0x7c>)
 80038da:	2200      	movs	r2, #0
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038de:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <_ZL12MX_SPI1_Initv+0x7c>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80038e4:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <_ZL12MX_SPI1_Initv+0x7c>)
 80038e6:	2207      	movs	r2, #7
 80038e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80038ea:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <_ZL12MX_SPI1_Initv+0x7c>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80038f0:	4b08      	ldr	r3, [pc, #32]	; (8003914 <_ZL12MX_SPI1_Initv+0x7c>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80038f6:	4b07      	ldr	r3, [pc, #28]	; (8003914 <_ZL12MX_SPI1_Initv+0x7c>)
 80038f8:	0018      	movs	r0, r3
 80038fa:	f002 fc93 	bl	8006224 <HAL_SPI_Init>
 80038fe:	0003      	movs	r3, r0
 8003900:	1e5a      	subs	r2, r3, #1
 8003902:	4193      	sbcs	r3, r2
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <_ZL12MX_SPI1_Initv+0x76>
    Error_Handler();
 800390a:	f000 f9d7 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	2000040c 	.word	0x2000040c
 8003918:	40013000 	.word	0x40013000

0800391c <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003922:	2310      	movs	r3, #16
 8003924:	18fb      	adds	r3, r7, r3
 8003926:	0018      	movs	r0, r3
 8003928:	2310      	movs	r3, #16
 800392a:	001a      	movs	r2, r3
 800392c:	2100      	movs	r1, #0
 800392e:	f006 f846 	bl	80099be <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003932:	1d3b      	adds	r3, r7, #4
 8003934:	0018      	movs	r0, r3
 8003936:	230c      	movs	r3, #12
 8003938:	001a      	movs	r2, r3
 800393a:	2100      	movs	r1, #0
 800393c:	f006 f83f 	bl	80099be <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003940:	4b25      	ldr	r3, [pc, #148]	; (80039d8 <_ZL12MX_TIM2_Initv+0xbc>)
 8003942:	2280      	movs	r2, #128	; 0x80
 8003944:	05d2      	lsls	r2, r2, #23
 8003946:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4800;
 8003948:	4b23      	ldr	r3, [pc, #140]	; (80039d8 <_ZL12MX_TIM2_Initv+0xbc>)
 800394a:	2296      	movs	r2, #150	; 0x96
 800394c:	0152      	lsls	r2, r2, #5
 800394e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003950:	4b21      	ldr	r3, [pc, #132]	; (80039d8 <_ZL12MX_TIM2_Initv+0xbc>)
 8003952:	2200      	movs	r2, #0
 8003954:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8003956:	4b20      	ldr	r3, [pc, #128]	; (80039d8 <_ZL12MX_TIM2_Initv+0xbc>)
 8003958:	22fa      	movs	r2, #250	; 0xfa
 800395a:	0092      	lsls	r2, r2, #2
 800395c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800395e:	4b1e      	ldr	r3, [pc, #120]	; (80039d8 <_ZL12MX_TIM2_Initv+0xbc>)
 8003960:	2200      	movs	r2, #0
 8003962:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003964:	4b1c      	ldr	r3, [pc, #112]	; (80039d8 <_ZL12MX_TIM2_Initv+0xbc>)
 8003966:	2280      	movs	r2, #128	; 0x80
 8003968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800396a:	4b1b      	ldr	r3, [pc, #108]	; (80039d8 <_ZL12MX_TIM2_Initv+0xbc>)
 800396c:	0018      	movs	r0, r3
 800396e:	f003 facd 	bl	8006f0c <HAL_TIM_Base_Init>
 8003972:	0003      	movs	r3, r0
 8003974:	1e5a      	subs	r2, r3, #1
 8003976:	4193      	sbcs	r3, r2
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <_ZL12MX_TIM2_Initv+0x66>
    Error_Handler();
 800397e:	f000 f99d 	bl	8003cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003982:	2110      	movs	r1, #16
 8003984:	187b      	adds	r3, r7, r1
 8003986:	2280      	movs	r2, #128	; 0x80
 8003988:	0152      	lsls	r2, r2, #5
 800398a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800398c:	187a      	adds	r2, r7, r1
 800398e:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <_ZL12MX_TIM2_Initv+0xbc>)
 8003990:	0011      	movs	r1, r2
 8003992:	0018      	movs	r0, r3
 8003994:	f003 fcce 	bl	8007334 <HAL_TIM_ConfigClockSource>
 8003998:	0003      	movs	r3, r0
 800399a:	1e5a      	subs	r2, r3, #1
 800399c:	4193      	sbcs	r3, r2
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <_ZL12MX_TIM2_Initv+0x8c>
    Error_Handler();
 80039a4:	f000 f98a 	bl	8003cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80039a8:	1d3b      	adds	r3, r7, #4
 80039aa:	2220      	movs	r2, #32
 80039ac:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039ae:	1d3b      	adds	r3, r7, #4
 80039b0:	2200      	movs	r2, #0
 80039b2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 80039b4:	1d3a      	adds	r2, r7, #4
 80039b6:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <_ZL12MX_TIM2_Initv+0xbc>)
 80039b8:	0011      	movs	r1, r2
 80039ba:	0018      	movs	r0, r3
 80039bc:	f003 fec2 	bl	8007744 <HAL_TIMEx_MasterConfigSynchronization>
 80039c0:	0003      	movs	r3, r0
 80039c2:	1e5a      	subs	r2, r3, #1
 80039c4:	4193      	sbcs	r3, r2
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <_ZL12MX_TIM2_Initv+0xb4>
    Error_Handler();
 80039cc:	f000 f976 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 80039d0:	46c0      	nop			; (mov r8, r8)
 80039d2:	46bd      	mov	sp, r7
 80039d4:	b008      	add	sp, #32
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	20000470 	.word	0x20000470

080039dc <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80039e0:	4b2b      	ldr	r3, [pc, #172]	; (8003a90 <_ZL19MX_USART1_UART_Initv+0xb4>)
 80039e2:	4a2c      	ldr	r2, [pc, #176]	; (8003a94 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80039e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80039e6:	4b2a      	ldr	r3, [pc, #168]	; (8003a90 <_ZL19MX_USART1_UART_Initv+0xb4>)
 80039e8:	2296      	movs	r2, #150	; 0x96
 80039ea:	0192      	lsls	r2, r2, #6
 80039ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80039ee:	4b28      	ldr	r3, [pc, #160]	; (8003a90 <_ZL19MX_USART1_UART_Initv+0xb4>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80039f4:	4b26      	ldr	r3, [pc, #152]	; (8003a90 <_ZL19MX_USART1_UART_Initv+0xb4>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80039fa:	4b25      	ldr	r3, [pc, #148]	; (8003a90 <_ZL19MX_USART1_UART_Initv+0xb4>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a00:	4b23      	ldr	r3, [pc, #140]	; (8003a90 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8003a02:	220c      	movs	r2, #12
 8003a04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a06:	4b22      	ldr	r3, [pc, #136]	; (8003a90 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a0c:	4b20      	ldr	r3, [pc, #128]	; (8003a90 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a12:	4b1f      	ldr	r3, [pc, #124]	; (8003a90 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003a18:	4b1d      	ldr	r3, [pc, #116]	; (8003a90 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a1e:	4b1c      	ldr	r3, [pc, #112]	; (8003a90 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK) {
 8003a24:	4b1a      	ldr	r3, [pc, #104]	; (8003a90 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8003a26:	0018      	movs	r0, r3
 8003a28:	f003 ff12 	bl	8007850 <HAL_UART_Init>
 8003a2c:	0003      	movs	r3, r0
 8003a2e:	1e5a      	subs	r2, r3, #1
 8003a30:	4193      	sbcs	r3, r2
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <_ZL19MX_USART1_UART_Initv+0x60>
    Error_Handler();
 8003a38:	f000 f940 	bl	8003cbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) !=
 8003a3c:	4b14      	ldr	r3, [pc, #80]	; (8003a90 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8003a3e:	2100      	movs	r1, #0
 8003a40:	0018      	movs	r0, r3
 8003a42:	f005 fea3 	bl	800978c <HAL_UARTEx_SetTxFifoThreshold>
 8003a46:	0003      	movs	r3, r0
 8003a48:	1e5a      	subs	r2, r3, #1
 8003a4a:	4193      	sbcs	r3, r2
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <_ZL19MX_USART1_UART_Initv+0x7a>
      HAL_OK) {
    Error_Handler();
 8003a52:	f000 f933 	bl	8003cbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) !=
 8003a56:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8003a58:	2100      	movs	r1, #0
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f005 fed6 	bl	800980c <HAL_UARTEx_SetRxFifoThreshold>
 8003a60:	0003      	movs	r3, r0
 8003a62:	1e5a      	subs	r2, r3, #1
 8003a64:	4193      	sbcs	r3, r2
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <_ZL19MX_USART1_UART_Initv+0x94>
      HAL_OK) {
    Error_Handler();
 8003a6c:	f000 f926 	bl	8003cbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8003a70:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8003a72:	0018      	movs	r0, r3
 8003a74:	f005 fe50 	bl	8009718 <HAL_UARTEx_DisableFifoMode>
 8003a78:	0003      	movs	r3, r0
 8003a7a:	1e5a      	subs	r2, r3, #1
 8003a7c:	4193      	sbcs	r3, r2
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <_ZL19MX_USART1_UART_Initv+0xac>
    Error_Handler();
 8003a84:	f000 f91a 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8003a88:	46c0      	nop			; (mov r8, r8)
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	200004bc 	.word	0x200004bc
 8003a94:	40013800 	.word	0x40013800

08003a98 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003a9c:	4b2b      	ldr	r3, [pc, #172]	; (8003b4c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8003a9e:	4a2c      	ldr	r2, [pc, #176]	; (8003b50 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8003aa0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003aa2:	4b2a      	ldr	r3, [pc, #168]	; (8003b4c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8003aa4:	22e1      	movs	r2, #225	; 0xe1
 8003aa6:	0252      	lsls	r2, r2, #9
 8003aa8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003aaa:	4b28      	ldr	r3, [pc, #160]	; (8003b4c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ab0:	4b26      	ldr	r3, [pc, #152]	; (8003b4c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003ab6:	4b25      	ldr	r3, [pc, #148]	; (8003b4c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003abc:	4b23      	ldr	r3, [pc, #140]	; (8003b4c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8003abe:	220c      	movs	r2, #12
 8003ac0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ac2:	4b22      	ldr	r3, [pc, #136]	; (8003b4c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ac8:	4b20      	ldr	r3, [pc, #128]	; (8003b4c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ace:	4b1f      	ldr	r3, [pc, #124]	; (8003b4c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ad4:	4b1d      	ldr	r3, [pc, #116]	; (8003b4c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ada:	4b1c      	ldr	r3, [pc, #112]	; (8003b4c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK) {
 8003ae0:	4b1a      	ldr	r3, [pc, #104]	; (8003b4c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f003 feb4 	bl	8007850 <HAL_UART_Init>
 8003ae8:	0003      	movs	r3, r0
 8003aea:	1e5a      	subs	r2, r3, #1
 8003aec:	4193      	sbcs	r3, r2
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <_ZL19MX_USART2_UART_Initv+0x60>
    Error_Handler();
 8003af4:	f000 f8e2 	bl	8003cbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) !=
 8003af8:	4b14      	ldr	r3, [pc, #80]	; (8003b4c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8003afa:	2100      	movs	r1, #0
 8003afc:	0018      	movs	r0, r3
 8003afe:	f005 fe45 	bl	800978c <HAL_UARTEx_SetTxFifoThreshold>
 8003b02:	0003      	movs	r3, r0
 8003b04:	1e5a      	subs	r2, r3, #1
 8003b06:	4193      	sbcs	r3, r2
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <_ZL19MX_USART2_UART_Initv+0x7a>
      HAL_OK) {
    Error_Handler();
 8003b0e:	f000 f8d5 	bl	8003cbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) !=
 8003b12:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8003b14:	2100      	movs	r1, #0
 8003b16:	0018      	movs	r0, r3
 8003b18:	f005 fe78 	bl	800980c <HAL_UARTEx_SetRxFifoThreshold>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	1e5a      	subs	r2, r3, #1
 8003b20:	4193      	sbcs	r3, r2
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <_ZL19MX_USART2_UART_Initv+0x94>
      HAL_OK) {
    Error_Handler();
 8003b28:	f000 f8c8 	bl	8003cbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8003b2c:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8003b2e:	0018      	movs	r0, r3
 8003b30:	f005 fdf2 	bl	8009718 <HAL_UARTEx_DisableFifoMode>
 8003b34:	0003      	movs	r3, r0
 8003b36:	1e5a      	subs	r2, r3, #1
 8003b38:	4193      	sbcs	r3, r2
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <_ZL19MX_USART2_UART_Initv+0xac>
    Error_Handler();
 8003b40:	f000 f8bc 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8003b44:	46c0      	nop			; (mov r8, r8)
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	2000054c 	.word	0x2000054c
 8003b50:	40004400 	.word	0x40004400

08003b54 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003b54:	b590      	push	{r4, r7, lr}
 8003b56:	b089      	sub	sp, #36	; 0x24
 8003b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b5a:	240c      	movs	r4, #12
 8003b5c:	193b      	adds	r3, r7, r4
 8003b5e:	0018      	movs	r0, r3
 8003b60:	2314      	movs	r3, #20
 8003b62:	001a      	movs	r2, r3
 8003b64:	2100      	movs	r1, #0
 8003b66:	f005 ff2a 	bl	80099be <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b6a:	4b51      	ldr	r3, [pc, #324]	; (8003cb0 <_ZL12MX_GPIO_Initv+0x15c>)
 8003b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b6e:	4b50      	ldr	r3, [pc, #320]	; (8003cb0 <_ZL12MX_GPIO_Initv+0x15c>)
 8003b70:	2101      	movs	r1, #1
 8003b72:	430a      	orrs	r2, r1
 8003b74:	635a      	str	r2, [r3, #52]	; 0x34
 8003b76:	4b4e      	ldr	r3, [pc, #312]	; (8003cb0 <_ZL12MX_GPIO_Initv+0x15c>)
 8003b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	60bb      	str	r3, [r7, #8]
 8003b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b82:	4b4b      	ldr	r3, [pc, #300]	; (8003cb0 <_ZL12MX_GPIO_Initv+0x15c>)
 8003b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b86:	4b4a      	ldr	r3, [pc, #296]	; (8003cb0 <_ZL12MX_GPIO_Initv+0x15c>)
 8003b88:	2102      	movs	r1, #2
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	635a      	str	r2, [r3, #52]	; 0x34
 8003b8e:	4b48      	ldr	r3, [pc, #288]	; (8003cb0 <_ZL12MX_GPIO_Initv+0x15c>)
 8003b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b92:	2202      	movs	r2, #2
 8003b94:	4013      	ands	r3, r2
 8003b96:	607b      	str	r3, [r7, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b9a:	4b45      	ldr	r3, [pc, #276]	; (8003cb0 <_ZL12MX_GPIO_Initv+0x15c>)
 8003b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b9e:	4b44      	ldr	r3, [pc, #272]	; (8003cb0 <_ZL12MX_GPIO_Initv+0x15c>)
 8003ba0:	2104      	movs	r1, #4
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	635a      	str	r2, [r3, #52]	; 0x34
 8003ba6:	4b42      	ldr	r3, [pc, #264]	; (8003cb0 <_ZL12MX_GPIO_Initv+0x15c>)
 8003ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003baa:	2204      	movs	r2, #4
 8003bac:	4013      	ands	r3, r2
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin | INT2_Pin | INT1_Pin, GPIO_PIN_RESET);
 8003bb2:	2322      	movs	r3, #34	; 0x22
 8003bb4:	33ff      	adds	r3, #255	; 0xff
 8003bb6:	483f      	ldr	r0, [pc, #252]	; (8003cb4 <_ZL12MX_GPIO_Initv+0x160>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	0019      	movs	r1, r3
 8003bbc:	f001 fbf7 	bl	80053ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FE_EN_Pin | RX_EN_Pin | LED_Pin, GPIO_PIN_RESET);
 8003bc0:	2389      	movs	r3, #137	; 0x89
 8003bc2:	0219      	lsls	r1, r3, #8
 8003bc4:	23a0      	movs	r3, #160	; 0xa0
 8003bc6:	05db      	lsls	r3, r3, #23
 8003bc8:	2200      	movs	r2, #0
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f001 fbef 	bl	80053ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 8003bd0:	4b39      	ldr	r3, [pc, #228]	; (8003cb8 <_ZL12MX_GPIO_Initv+0x164>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	2140      	movs	r1, #64	; 0x40
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f001 fbe9 	bl	80053ae <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIO2_Pin DIO1_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin | DIO1_Pin;
 8003bdc:	193b      	adds	r3, r7, r4
 8003bde:	2230      	movs	r2, #48	; 0x30
 8003be0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003be2:	193b      	adds	r3, r7, r4
 8003be4:	2288      	movs	r2, #136	; 0x88
 8003be6:	0352      	lsls	r2, r2, #13
 8003be8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bea:	193b      	adds	r3, r7, r4
 8003bec:	2200      	movs	r2, #0
 8003bee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bf0:	193a      	adds	r2, r7, r4
 8003bf2:	23a0      	movs	r3, #160	; 0xa0
 8003bf4:	05db      	lsls	r3, r3, #23
 8003bf6:	0011      	movs	r1, r2
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f001 fa57 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin INT2_Pin INT1_Pin */
  GPIO_InitStruct.Pin = CS_Pin | INT2_Pin | INT1_Pin;
 8003bfe:	0021      	movs	r1, r4
 8003c00:	187b      	adds	r3, r7, r1
 8003c02:	2222      	movs	r2, #34	; 0x22
 8003c04:	32ff      	adds	r2, #255	; 0xff
 8003c06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c08:	000c      	movs	r4, r1
 8003c0a:	193b      	adds	r3, r7, r4
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c10:	193b      	adds	r3, r7, r4
 8003c12:	2200      	movs	r2, #0
 8003c14:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c16:	193b      	adds	r3, r7, r4
 8003c18:	2200      	movs	r2, #0
 8003c1a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c1c:	193b      	adds	r3, r7, r4
 8003c1e:	4a25      	ldr	r2, [pc, #148]	; (8003cb4 <_ZL12MX_GPIO_Initv+0x160>)
 8003c20:	0019      	movs	r1, r3
 8003c22:	0010      	movs	r0, r2
 8003c24:	f001 fa42 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8003c28:	193b      	adds	r3, r7, r4
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c2e:	193b      	adds	r3, r7, r4
 8003c30:	2200      	movs	r2, #0
 8003c32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c34:	193b      	adds	r3, r7, r4
 8003c36:	2201      	movs	r2, #1
 8003c38:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8003c3a:	193b      	adds	r3, r7, r4
 8003c3c:	4a1d      	ldr	r2, [pc, #116]	; (8003cb4 <_ZL12MX_GPIO_Initv+0x160>)
 8003c3e:	0019      	movs	r1, r3
 8003c40:	0010      	movs	r0, r2
 8003c42:	f001 fa33 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_EN_Pin RX_EN_Pin LED_Pin */
  GPIO_InitStruct.Pin = FE_EN_Pin | RX_EN_Pin | LED_Pin;
 8003c46:	0021      	movs	r1, r4
 8003c48:	187b      	adds	r3, r7, r1
 8003c4a:	2289      	movs	r2, #137	; 0x89
 8003c4c:	0212      	lsls	r2, r2, #8
 8003c4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c50:	000c      	movs	r4, r1
 8003c52:	193b      	adds	r3, r7, r4
 8003c54:	2201      	movs	r2, #1
 8003c56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c58:	193b      	adds	r3, r7, r4
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c5e:	193b      	adds	r3, r7, r4
 8003c60:	2200      	movs	r2, #0
 8003c62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c64:	193a      	adds	r2, r7, r4
 8003c66:	23a0      	movs	r3, #160	; 0xa0
 8003c68:	05db      	lsls	r3, r3, #23
 8003c6a:	0011      	movs	r1, r2
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	f001 fa1d 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pin : TX_EN_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
 8003c72:	0021      	movs	r1, r4
 8003c74:	187b      	adds	r3, r7, r1
 8003c76:	2240      	movs	r2, #64	; 0x40
 8003c78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c7a:	187b      	adds	r3, r7, r1
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c80:	187b      	adds	r3, r7, r1
 8003c82:	2200      	movs	r2, #0
 8003c84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c86:	187b      	adds	r3, r7, r1
 8003c88:	2200      	movs	r2, #0
 8003c8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 8003c8c:	187b      	adds	r3, r7, r1
 8003c8e:	4a0a      	ldr	r2, [pc, #40]	; (8003cb8 <_ZL12MX_GPIO_Initv+0x164>)
 8003c90:	0019      	movs	r1, r3
 8003c92:	0010      	movs	r0, r2
 8003c94:	f001 fa0a 	bl	80050ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	2007      	movs	r0, #7
 8003c9e:	f001 f907 	bl	8004eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003ca2:	2007      	movs	r0, #7
 8003ca4:	f001 f919 	bl	8004eda <HAL_NVIC_EnableIRQ>
}
 8003ca8:	46c0      	nop			; (mov r8, r8)
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b009      	add	sp, #36	; 0x24
 8003cae:	bd90      	pop	{r4, r7, pc}
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	50000400 	.word	0x50000400
 8003cb8:	50000800 	.word	0x50000800

08003cbc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cc0:	b672      	cpsid	i
}
 8003cc2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8003cc4:	e7fe      	b.n	8003cc4 <Error_Handler+0x8>

08003cc6 <_ZNK10RingBufferIhLj128EE7isEmptyEv>:


/**
* Return: true if buffer is empty
*/
bool isEmpty() const
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b084      	sub	sp, #16
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
{
    bool ret;
    {
        ret = !_numElements;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2284      	movs	r2, #132	; 0x84
 8003cd2:	589a      	ldr	r2, [r3, r2]
 8003cd4:	200f      	movs	r0, #15
 8003cd6:	183b      	adds	r3, r7, r0
 8003cd8:	4251      	negs	r1, r2
 8003cda:	414a      	adcs	r2, r1
 8003cdc:	701a      	strb	r2, [r3, #0]
    }

    return ret;
 8003cde:	183b      	adds	r3, r7, r0
 8003ce0:	781b      	ldrb	r3, [r3, #0]
}
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	b004      	add	sp, #16
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <_ZN10RingBufferIhLj128EE3popEPh>:
bool pop(Type *dest)
 8003cea:	b590      	push	{r4, r7, lr}
 8003cec:	b085      	sub	sp, #20
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	6039      	str	r1, [r7, #0]
    bool ret = false;
 8003cf4:	240f      	movs	r4, #15
 8003cf6:	193b      	adds	r3, r7, r4
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	701a      	strb	r2, [r3, #0]
        if (!isEmpty()) {
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f7ff ffe1 	bl	8003cc6 <_ZNK10RingBufferIhLj128EE7isEmptyEv>
 8003d04:	0003      	movs	r3, r0
 8003d06:	001a      	movs	r2, r3
 8003d08:	2301      	movs	r3, #1
 8003d0a:	4053      	eors	r3, r2
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d015      	beq.n	8003d3e <_ZN10RingBufferIhLj128EE3popEPh+0x54>
            tail = getTail();
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	0018      	movs	r0, r3
 8003d16:	f000 f819 	bl	8003d4c <_ZNK10RingBufferIhLj128EE7getTailEv>
 8003d1a:	0003      	movs	r3, r0
 8003d1c:	60bb      	str	r3, [r7, #8]
            *dest = _buf[tail];
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	18d3      	adds	r3, r2, r3
 8003d24:	781a      	ldrb	r2, [r3, #0]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	701a      	strb	r2, [r3, #0]
            _numElements--;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2284      	movs	r2, #132	; 0x84
 8003d2e:	589b      	ldr	r3, [r3, r2]
 8003d30:	1e5a      	subs	r2, r3, #1
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2184      	movs	r1, #132	; 0x84
 8003d36:	505a      	str	r2, [r3, r1]
            ret = true;
 8003d38:	193b      	adds	r3, r7, r4
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	701a      	strb	r2, [r3, #0]
    return ret;
 8003d3e:	230f      	movs	r3, #15
 8003d40:	18fb      	adds	r3, r7, r3
 8003d42:	781b      	ldrb	r3, [r3, #0]
}
 8003d44:	0018      	movs	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b005      	add	sp, #20
 8003d4a:	bd90      	pop	{r4, r7, pc}

08003d4c <_ZNK10RingBufferIhLj128EE7getTailEv>:
protected:
/**
* Calculates the index in the array of the oldest element
* Return: index in array of element
*/
size_t getTail() const
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
{
    return (_head + (MaxElements - _numElements))%MaxElements;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2280      	movs	r2, #128	; 0x80
 8003d58:	589a      	ldr	r2, [r3, r2]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2184      	movs	r1, #132	; 0x84
 8003d5e:	585b      	ldr	r3, [r3, r1]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	227f      	movs	r2, #127	; 0x7f
 8003d64:	4013      	ands	r3, r2
}
 8003d66:	0018      	movs	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	b002      	add	sp, #8
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <_Z41__static_initialization_and_destruction_0ii>:
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d107      	bne.n	8003d90 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	4a05      	ldr	r2, [pc, #20]	; (8003d98 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d103      	bne.n	8003d90 <_Z41__static_initialization_and_destruction_0ii+0x20>
Parser p;
 8003d88:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f7ff fbe8 	bl	8003560 <_ZN6ParserC1Ev>
}
 8003d90:	46c0      	nop			; (mov r8, r8)
 8003d92:	46bd      	mov	sp, r7
 8003d94:	b002      	add	sp, #8
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	0000ffff 	.word	0x0000ffff
 8003d9c:	200005dc 	.word	0x200005dc

08003da0 <_GLOBAL__sub_I_hadc1>:
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	4b03      	ldr	r3, [pc, #12]	; (8003db4 <_GLOBAL__sub_I_hadc1+0x14>)
 8003da6:	0019      	movs	r1, r3
 8003da8:	2001      	movs	r0, #1
 8003daa:	f7ff ffe1 	bl	8003d70 <_Z41__static_initialization_and_destruction_0ii>
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	0000ffff 	.word	0x0000ffff

08003db8 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dbe:	4b11      	ldr	r3, [pc, #68]	; (8003e04 <HAL_MspInit+0x4c>)
 8003dc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dc2:	4b10      	ldr	r3, [pc, #64]	; (8003e04 <HAL_MspInit+0x4c>)
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	641a      	str	r2, [r3, #64]	; 0x40
 8003dca:	4b0e      	ldr	r3, [pc, #56]	; (8003e04 <HAL_MspInit+0x4c>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	2201      	movs	r2, #1
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	607b      	str	r3, [r7, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dd6:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <HAL_MspInit+0x4c>)
 8003dd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dda:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <HAL_MspInit+0x4c>)
 8003ddc:	2180      	movs	r1, #128	; 0x80
 8003dde:	0549      	lsls	r1, r1, #21
 8003de0:	430a      	orrs	r2, r1
 8003de2:	63da      	str	r2, [r3, #60]	; 0x3c
 8003de4:	4b07      	ldr	r3, [pc, #28]	; (8003e04 <HAL_MspInit+0x4c>)
 8003de6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003de8:	2380      	movs	r3, #128	; 0x80
 8003dea:	055b      	lsls	r3, r3, #21
 8003dec:	4013      	ands	r3, r2
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8003df2:	2380      	movs	r3, #128	; 0x80
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	0018      	movs	r0, r3
 8003df8:	f000 fafa 	bl	80043f0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dfc:	46c0      	nop			; (mov r8, r8)
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	b002      	add	sp, #8
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40021000 	.word	0x40021000

08003e08 <HAL_ADC_MspInit>:
 * @brief ADC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hadc: ADC handle pointer
 * @retval None
 */
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc) {
 8003e08:	b590      	push	{r4, r7, lr}
 8003e0a:	b097      	sub	sp, #92	; 0x5c
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e10:	2344      	movs	r3, #68	; 0x44
 8003e12:	18fb      	adds	r3, r7, r3
 8003e14:	0018      	movs	r0, r3
 8003e16:	2314      	movs	r3, #20
 8003e18:	001a      	movs	r2, r3
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	f005 fdcf 	bl	80099be <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e20:	2410      	movs	r4, #16
 8003e22:	193b      	adds	r3, r7, r4
 8003e24:	0018      	movs	r0, r3
 8003e26:	2334      	movs	r3, #52	; 0x34
 8003e28:	001a      	movs	r2, r3
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	f005 fdc7 	bl	80099be <memset>
  if (hadc->Instance == ADC1) {
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a20      	ldr	r2, [pc, #128]	; (8003eb8 <HAL_ADC_MspInit+0xb0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d139      	bne.n	8003eae <HAL_ADC_MspInit+0xa6>
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /** Initializes the peripherals clocks
     */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003e3a:	193b      	adds	r3, r7, r4
 8003e3c:	2280      	movs	r2, #128	; 0x80
 8003e3e:	01d2      	lsls	r2, r2, #7
 8003e40:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8003e42:	193b      	adds	r3, r7, r4
 8003e44:	2200      	movs	r2, #0
 8003e46:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8003e48:	193b      	adds	r3, r7, r4
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	f002 f832 	bl	8005eb4 <HAL_RCCEx_PeriphCLKConfig>
 8003e50:	1e03      	subs	r3, r0, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_ADC_MspInit+0x50>
      Error_Handler();
 8003e54:	f7ff ff32 	bl	8003cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003e58:	4b18      	ldr	r3, [pc, #96]	; (8003ebc <HAL_ADC_MspInit+0xb4>)
 8003e5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e5c:	4b17      	ldr	r3, [pc, #92]	; (8003ebc <HAL_ADC_MspInit+0xb4>)
 8003e5e:	2180      	movs	r1, #128	; 0x80
 8003e60:	0349      	lsls	r1, r1, #13
 8003e62:	430a      	orrs	r2, r1
 8003e64:	641a      	str	r2, [r3, #64]	; 0x40
 8003e66:	4b15      	ldr	r3, [pc, #84]	; (8003ebc <HAL_ADC_MspInit+0xb4>)
 8003e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e6a:	2380      	movs	r3, #128	; 0x80
 8003e6c:	035b      	lsls	r3, r3, #13
 8003e6e:	4013      	ands	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e74:	4b11      	ldr	r3, [pc, #68]	; (8003ebc <HAL_ADC_MspInit+0xb4>)
 8003e76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e78:	4b10      	ldr	r3, [pc, #64]	; (8003ebc <HAL_ADC_MspInit+0xb4>)
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	635a      	str	r2, [r3, #52]	; 0x34
 8003e80:	4b0e      	ldr	r3, [pc, #56]	; (8003ebc <HAL_ADC_MspInit+0xb4>)
 8003e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e84:	2201      	movs	r2, #1
 8003e86:	4013      	ands	r3, r2
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003e8c:	2144      	movs	r1, #68	; 0x44
 8003e8e:	187b      	adds	r3, r7, r1
 8003e90:	2201      	movs	r2, #1
 8003e92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e94:	187b      	adds	r3, r7, r1
 8003e96:	2203      	movs	r2, #3
 8003e98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9a:	187b      	adds	r3, r7, r1
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ea0:	187a      	adds	r2, r7, r1
 8003ea2:	23a0      	movs	r3, #160	; 0xa0
 8003ea4:	05db      	lsls	r3, r3, #23
 8003ea6:	0011      	movs	r1, r2
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f001 f8ff 	bl	80050ac <HAL_GPIO_Init>

    /* USER CODE BEGIN ADC1_MspInit 1 */

    /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003eae:	46c0      	nop			; (mov r8, r8)
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	b017      	add	sp, #92	; 0x5c
 8003eb4:	bd90      	pop	{r4, r7, pc}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	40012400 	.word	0x40012400
 8003ebc:	40021000 	.word	0x40021000

08003ec0 <HAL_SPI_MspInit>:
 * @brief SPI MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 8003ec0:	b590      	push	{r4, r7, lr}
 8003ec2:	b08b      	sub	sp, #44	; 0x2c
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec8:	2414      	movs	r4, #20
 8003eca:	193b      	adds	r3, r7, r4
 8003ecc:	0018      	movs	r0, r3
 8003ece:	2314      	movs	r3, #20
 8003ed0:	001a      	movs	r2, r3
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	f005 fd73 	bl	80099be <memset>
  if (hspi->Instance == SPI1) {
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a1f      	ldr	r2, [pc, #124]	; (8003f5c <HAL_SPI_MspInit+0x9c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d138      	bne.n	8003f54 <HAL_SPI_MspInit+0x94>
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ee2:	4b1f      	ldr	r3, [pc, #124]	; (8003f60 <HAL_SPI_MspInit+0xa0>)
 8003ee4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ee6:	4b1e      	ldr	r3, [pc, #120]	; (8003f60 <HAL_SPI_MspInit+0xa0>)
 8003ee8:	2180      	movs	r1, #128	; 0x80
 8003eea:	0149      	lsls	r1, r1, #5
 8003eec:	430a      	orrs	r2, r1
 8003eee:	641a      	str	r2, [r3, #64]	; 0x40
 8003ef0:	4b1b      	ldr	r3, [pc, #108]	; (8003f60 <HAL_SPI_MspInit+0xa0>)
 8003ef2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ef4:	2380      	movs	r3, #128	; 0x80
 8003ef6:	015b      	lsls	r3, r3, #5
 8003ef8:	4013      	ands	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
 8003efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003efe:	4b18      	ldr	r3, [pc, #96]	; (8003f60 <HAL_SPI_MspInit+0xa0>)
 8003f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f02:	4b17      	ldr	r3, [pc, #92]	; (8003f60 <HAL_SPI_MspInit+0xa0>)
 8003f04:	2101      	movs	r1, #1
 8003f06:	430a      	orrs	r2, r1
 8003f08:	635a      	str	r2, [r3, #52]	; 0x34
 8003f0a:	4b15      	ldr	r3, [pc, #84]	; (8003f60 <HAL_SPI_MspInit+0xa0>)
 8003f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0e:	2201      	movs	r2, #1
 8003f10:	4013      	ands	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_6 | GPIO_PIN_7;
 8003f16:	0021      	movs	r1, r4
 8003f18:	187b      	adds	r3, r7, r1
 8003f1a:	22c2      	movs	r2, #194	; 0xc2
 8003f1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1e:	187b      	adds	r3, r7, r1
 8003f20:	2202      	movs	r2, #2
 8003f22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f24:	187b      	adds	r3, r7, r1
 8003f26:	2200      	movs	r2, #0
 8003f28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f2a:	187b      	adds	r3, r7, r1
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003f30:	187b      	adds	r3, r7, r1
 8003f32:	2200      	movs	r2, #0
 8003f34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f36:	187a      	adds	r2, r7, r1
 8003f38:	23a0      	movs	r3, #160	; 0xa0
 8003f3a:	05db      	lsls	r3, r3, #23
 8003f3c:	0011      	movs	r1, r2
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f001 f8b4 	bl	80050ac <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003f44:	2200      	movs	r2, #0
 8003f46:	2100      	movs	r1, #0
 8003f48:	2019      	movs	r0, #25
 8003f4a:	f000 ffb1 	bl	8004eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003f4e:	2019      	movs	r0, #25
 8003f50:	f000 ffc3 	bl	8004eda <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI1_MspInit 1 */

    /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003f54:	46c0      	nop			; (mov r8, r8)
 8003f56:	46bd      	mov	sp, r7
 8003f58:	b00b      	add	sp, #44	; 0x2c
 8003f5a:	bd90      	pop	{r4, r7, pc}
 8003f5c:	40013000 	.word	0x40013000
 8003f60:	40021000 	.word	0x40021000

08003f64 <HAL_TIM_Base_MspInit>:
 * @brief TIM_Base MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base) {
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  if (htim_base->Instance == TIM2) {
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	2380      	movs	r3, #128	; 0x80
 8003f72:	05db      	lsls	r3, r3, #23
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d113      	bne.n	8003fa0 <HAL_TIM_Base_MspInit+0x3c>
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f78:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <HAL_TIM_Base_MspInit+0x44>)
 8003f7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f7c:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <HAL_TIM_Base_MspInit+0x44>)
 8003f7e:	2101      	movs	r1, #1
 8003f80:	430a      	orrs	r2, r1
 8003f82:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f84:	4b08      	ldr	r3, [pc, #32]	; (8003fa8 <HAL_TIM_Base_MspInit+0x44>)
 8003f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f88:	2201      	movs	r2, #1
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8003f90:	2200      	movs	r2, #0
 8003f92:	2101      	movs	r1, #1
 8003f94:	200f      	movs	r0, #15
 8003f96:	f000 ff8b 	bl	8004eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003f9a:	200f      	movs	r0, #15
 8003f9c:	f000 ff9d 	bl	8004eda <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003fa0:	46c0      	nop			; (mov r8, r8)
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b004      	add	sp, #16
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40021000 	.word	0x40021000

08003fac <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8003fac:	b590      	push	{r4, r7, lr}
 8003fae:	b099      	sub	sp, #100	; 0x64
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fb4:	234c      	movs	r3, #76	; 0x4c
 8003fb6:	18fb      	adds	r3, r7, r3
 8003fb8:	0018      	movs	r0, r3
 8003fba:	2314      	movs	r3, #20
 8003fbc:	001a      	movs	r2, r3
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	f005 fcfd 	bl	80099be <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003fc4:	2418      	movs	r4, #24
 8003fc6:	193b      	adds	r3, r7, r4
 8003fc8:	0018      	movs	r0, r3
 8003fca:	2334      	movs	r3, #52	; 0x34
 8003fcc:	001a      	movs	r2, r3
 8003fce:	2100      	movs	r1, #0
 8003fd0:	f005 fcf5 	bl	80099be <memset>
  if (huart->Instance == USART1) {
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a4d      	ldr	r2, [pc, #308]	; (8004110 <HAL_UART_MspInit+0x164>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d146      	bne.n	800406c <HAL_UART_MspInit+0xc0>
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /** Initializes the peripherals clocks
     */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003fde:	193b      	adds	r3, r7, r4
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003fe4:	193b      	adds	r3, r7, r4
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8003fea:	193b      	adds	r3, r7, r4
 8003fec:	0018      	movs	r0, r3
 8003fee:	f001 ff61 	bl	8005eb4 <HAL_RCCEx_PeriphCLKConfig>
 8003ff2:	1e03      	subs	r3, r0, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_UART_MspInit+0x4e>
      Error_Handler();
 8003ff6:	f7ff fe61 	bl	8003cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ffa:	4b46      	ldr	r3, [pc, #280]	; (8004114 <HAL_UART_MspInit+0x168>)
 8003ffc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ffe:	4b45      	ldr	r3, [pc, #276]	; (8004114 <HAL_UART_MspInit+0x168>)
 8004000:	2180      	movs	r1, #128	; 0x80
 8004002:	01c9      	lsls	r1, r1, #7
 8004004:	430a      	orrs	r2, r1
 8004006:	641a      	str	r2, [r3, #64]	; 0x40
 8004008:	4b42      	ldr	r3, [pc, #264]	; (8004114 <HAL_UART_MspInit+0x168>)
 800400a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800400c:	2380      	movs	r3, #128	; 0x80
 800400e:	01db      	lsls	r3, r3, #7
 8004010:	4013      	ands	r3, r2
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004016:	4b3f      	ldr	r3, [pc, #252]	; (8004114 <HAL_UART_MspInit+0x168>)
 8004018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800401a:	4b3e      	ldr	r3, [pc, #248]	; (8004114 <HAL_UART_MspInit+0x168>)
 800401c:	2102      	movs	r1, #2
 800401e:	430a      	orrs	r2, r1
 8004020:	635a      	str	r2, [r3, #52]	; 0x34
 8004022:	4b3c      	ldr	r3, [pc, #240]	; (8004114 <HAL_UART_MspInit+0x168>)
 8004024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004026:	2202      	movs	r2, #2
 8004028:	4013      	ands	r3, r2
 800402a:	613b      	str	r3, [r7, #16]
 800402c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 800402e:	214c      	movs	r1, #76	; 0x4c
 8004030:	187b      	adds	r3, r7, r1
 8004032:	22c0      	movs	r2, #192	; 0xc0
 8004034:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004036:	187b      	adds	r3, r7, r1
 8004038:	2202      	movs	r2, #2
 800403a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403c:	187b      	adds	r3, r7, r1
 800403e:	2200      	movs	r2, #0
 8004040:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004042:	187b      	adds	r3, r7, r1
 8004044:	2200      	movs	r2, #0
 8004046:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8004048:	187b      	adds	r3, r7, r1
 800404a:	2200      	movs	r2, #0
 800404c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800404e:	187b      	adds	r3, r7, r1
 8004050:	4a31      	ldr	r2, [pc, #196]	; (8004118 <HAL_UART_MspInit+0x16c>)
 8004052:	0019      	movs	r1, r3
 8004054:	0010      	movs	r0, r2
 8004056:	f001 f829 	bl	80050ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800405a:	2200      	movs	r2, #0
 800405c:	2102      	movs	r1, #2
 800405e:	201b      	movs	r0, #27
 8004060:	f000 ff26 	bl	8004eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004064:	201b      	movs	r0, #27
 8004066:	f000 ff38 	bl	8004eda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
}
 800406a:	e04c      	b.n	8004106 <HAL_UART_MspInit+0x15a>
  } else if (huart->Instance == USART2) {
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a2a      	ldr	r2, [pc, #168]	; (800411c <HAL_UART_MspInit+0x170>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d147      	bne.n	8004106 <HAL_UART_MspInit+0x15a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004076:	2118      	movs	r1, #24
 8004078:	187b      	adds	r3, r7, r1
 800407a:	2202      	movs	r2, #2
 800407c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800407e:	187b      	adds	r3, r7, r1
 8004080:	2200      	movs	r2, #0
 8004082:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8004084:	187b      	adds	r3, r7, r1
 8004086:	0018      	movs	r0, r3
 8004088:	f001 ff14 	bl	8005eb4 <HAL_RCCEx_PeriphCLKConfig>
 800408c:	1e03      	subs	r3, r0, #0
 800408e:	d001      	beq.n	8004094 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8004090:	f7ff fe14 	bl	8003cbc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004094:	4b1f      	ldr	r3, [pc, #124]	; (8004114 <HAL_UART_MspInit+0x168>)
 8004096:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004098:	4b1e      	ldr	r3, [pc, #120]	; (8004114 <HAL_UART_MspInit+0x168>)
 800409a:	2180      	movs	r1, #128	; 0x80
 800409c:	0289      	lsls	r1, r1, #10
 800409e:	430a      	orrs	r2, r1
 80040a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80040a2:	4b1c      	ldr	r3, [pc, #112]	; (8004114 <HAL_UART_MspInit+0x168>)
 80040a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040a6:	2380      	movs	r3, #128	; 0x80
 80040a8:	029b      	lsls	r3, r3, #10
 80040aa:	4013      	ands	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040b0:	4b18      	ldr	r3, [pc, #96]	; (8004114 <HAL_UART_MspInit+0x168>)
 80040b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040b4:	4b17      	ldr	r3, [pc, #92]	; (8004114 <HAL_UART_MspInit+0x168>)
 80040b6:	2101      	movs	r1, #1
 80040b8:	430a      	orrs	r2, r1
 80040ba:	635a      	str	r2, [r3, #52]	; 0x34
 80040bc:	4b15      	ldr	r3, [pc, #84]	; (8004114 <HAL_UART_MspInit+0x168>)
 80040be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c0:	2201      	movs	r2, #1
 80040c2:	4013      	ands	r3, r2
 80040c4:	60bb      	str	r3, [r7, #8]
 80040c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80040c8:	214c      	movs	r1, #76	; 0x4c
 80040ca:	187b      	adds	r3, r7, r1
 80040cc:	220c      	movs	r2, #12
 80040ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d0:	187b      	adds	r3, r7, r1
 80040d2:	2202      	movs	r2, #2
 80040d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d6:	187b      	adds	r3, r7, r1
 80040d8:	2200      	movs	r2, #0
 80040da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040dc:	187b      	adds	r3, r7, r1
 80040de:	2200      	movs	r2, #0
 80040e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80040e2:	187b      	adds	r3, r7, r1
 80040e4:	2201      	movs	r2, #1
 80040e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040e8:	187a      	adds	r2, r7, r1
 80040ea:	23a0      	movs	r3, #160	; 0xa0
 80040ec:	05db      	lsls	r3, r3, #23
 80040ee:	0011      	movs	r1, r2
 80040f0:	0018      	movs	r0, r3
 80040f2:	f000 ffdb 	bl	80050ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80040f6:	2200      	movs	r2, #0
 80040f8:	2102      	movs	r1, #2
 80040fa:	201c      	movs	r0, #28
 80040fc:	f000 fed8 	bl	8004eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004100:	201c      	movs	r0, #28
 8004102:	f000 feea 	bl	8004eda <HAL_NVIC_EnableIRQ>
}
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	46bd      	mov	sp, r7
 800410a:	b019      	add	sp, #100	; 0x64
 800410c:	bd90      	pop	{r4, r7, pc}
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	40013800 	.word	0x40013800
 8004114:	40021000 	.word	0x40021000
 8004118:	50000400 	.word	0x50000400
 800411c:	40004400 	.word	0x40004400

08004120 <NMI_Handler>:
/*           Cortex-M0+ Processor Interruption and Exception Handlers */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8004124:	e7fe      	b.n	8004124 <NMI_Handler+0x4>

08004126 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8004126:	b580      	push	{r7, lr}
 8004128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1) {
 800412a:	e7fe      	b.n	800412a <HardFault_Handler+0x4>

0800412c <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004130:	46c0      	nop			; (mov r8, r8)
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8004136:	b580      	push	{r7, lr}
 8004138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004144:	f000 f914 	bl	8004370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004148:	46c0      	nop			; (mov r8, r8)
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <EXTI4_15_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line 4 to 15 interrupts.
 */
void EXTI4_15_IRQHandler(void) {
 800414e:	b580      	push	{r7, lr}
 8004150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO2_Pin);
 8004152:	2010      	movs	r0, #16
 8004154:	f001 f964 	bl	8005420 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 8004158:	2020      	movs	r0, #32
 800415a:	f001 f961 	bl	8005420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004168:	4b03      	ldr	r3, [pc, #12]	; (8004178 <TIM2_IRQHandler+0x14>)
 800416a:	0018      	movs	r0, r3
 800416c:	f002 ffb0 	bl	80070d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004170:	46c0      	nop			; (mov r8, r8)
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	20000470 	.word	0x20000470

0800417c <SPI1_IRQHandler>:

/**
 * @brief This function handles SPI1 global interrupt.
 */
void SPI1_IRQHandler(void) {
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004180:	4b03      	ldr	r3, [pc, #12]	; (8004190 <SPI1_IRQHandler+0x14>)
 8004182:	0018      	movs	r0, r3
 8004184:	f002 fc30 	bl	80069e8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004188:	46c0      	nop			; (mov r8, r8)
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	2000040c 	.word	0x2000040c

08004194 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt / USART1 wake-up
 * interrupt through EXTI line 25.
 */
void USART1_IRQHandler(void) {
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004198:	4b03      	ldr	r3, [pc, #12]	; (80041a8 <USART1_IRQHandler+0x14>)
 800419a:	0018      	movs	r0, r3
 800419c:	f003 fcc4 	bl	8007b28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80041a0:	46c0      	nop			; (mov r8, r8)
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	200004bc 	.word	0x200004bc

080041ac <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt / USART2 wake-up
 * interrupt through EXTI line 26.
 */
void USART2_IRQHandler(void) {
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80041b0:	4b03      	ldr	r3, [pc, #12]	; (80041c0 <USART2_IRQHandler+0x14>)
 80041b2:	0018      	movs	r0, r3
 80041b4:	f003 fcb8 	bl	8007b28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80041b8:	46c0      	nop			; (mov r8, r8)
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	2000054c 	.word	0x2000054c

080041c4 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr) {
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end;             /* Symbol defined in the linker script */
  extern uint8_t _estack;          /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041cc:	4a14      	ldr	r2, [pc, #80]	; (8004220 <_sbrk+0x5c>)
 80041ce:	4b15      	ldr	r3, [pc, #84]	; (8004224 <_sbrk+0x60>)
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end) {
 80041d8:	4b13      	ldr	r3, [pc, #76]	; (8004228 <_sbrk+0x64>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d102      	bne.n	80041e6 <_sbrk+0x22>
    __sbrk_heap_end = &_end;
 80041e0:	4b11      	ldr	r3, [pc, #68]	; (8004228 <_sbrk+0x64>)
 80041e2:	4a12      	ldr	r2, [pc, #72]	; (800422c <_sbrk+0x68>)
 80041e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap) {
 80041e6:	4b10      	ldr	r3, [pc, #64]	; (8004228 <_sbrk+0x64>)
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	18d3      	adds	r3, r2, r3
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d207      	bcs.n	8004204 <_sbrk+0x40>
    errno = ENOMEM;
 80041f4:	f005 fbb0 	bl	8009958 <__errno>
 80041f8:	0003      	movs	r3, r0
 80041fa:	220c      	movs	r2, #12
 80041fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041fe:	2301      	movs	r3, #1
 8004200:	425b      	negs	r3, r3
 8004202:	e009      	b.n	8004218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004204:	4b08      	ldr	r3, [pc, #32]	; (8004228 <_sbrk+0x64>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800420a:	4b07      	ldr	r3, [pc, #28]	; (8004228 <_sbrk+0x64>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	18d2      	adds	r2, r2, r3
 8004212:	4b05      	ldr	r3, [pc, #20]	; (8004228 <_sbrk+0x64>)
 8004214:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004216:	68fb      	ldr	r3, [r7, #12]
}
 8004218:	0018      	movs	r0, r3
 800421a:	46bd      	mov	sp, r7
 800421c:	b006      	add	sp, #24
 800421e:	bd80      	pop	{r7, pc}
 8004220:	20009000 	.word	0x20009000
 8004224:	00000400 	.word	0x00000400
 8004228:	20000674 	.word	0x20000674
 800422c:	20000698 	.word	0x20000698

08004230 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR =
 8004234:	4b03      	ldr	r3, [pc, #12]	; (8004244 <SystemInit+0x14>)
 8004236:	2280      	movs	r2, #128	; 0x80
 8004238:	0512      	lsls	r2, r2, #20
 800423a:	609a      	str	r2, [r3, #8]
      VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif                                         /* USER_VECT_TAB_ADDRESS */
}
 800423c:	46c0      	nop			; (mov r8, r8)
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	46c0      	nop			; (mov r8, r8)
 8004244:	e000ed00 	.word	0xe000ed00

08004248 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004248:	480d      	ldr	r0, [pc, #52]	; (8004280 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800424a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800424c:	f7ff fff0 	bl	8004230 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004250:	480c      	ldr	r0, [pc, #48]	; (8004284 <LoopForever+0x6>)
  ldr r1, =_edata
 8004252:	490d      	ldr	r1, [pc, #52]	; (8004288 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004254:	4a0d      	ldr	r2, [pc, #52]	; (800428c <LoopForever+0xe>)
  movs r3, #0
 8004256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004258:	e002      	b.n	8004260 <LoopCopyDataInit>

0800425a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800425a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800425c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800425e:	3304      	adds	r3, #4

08004260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004264:	d3f9      	bcc.n	800425a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004266:	4a0a      	ldr	r2, [pc, #40]	; (8004290 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004268:	4c0a      	ldr	r4, [pc, #40]	; (8004294 <LoopForever+0x16>)
  movs r3, #0
 800426a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800426c:	e001      	b.n	8004272 <LoopFillZerobss>

0800426e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800426e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004270:	3204      	adds	r2, #4

08004272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004274:	d3fb      	bcc.n	800426e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004276:	f005 fb75 	bl	8009964 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800427a:	f7ff f98f 	bl	800359c <main>

0800427e <LoopForever>:

LoopForever:
  b LoopForever
 800427e:	e7fe      	b.n	800427e <LoopForever>
  ldr   r0, =_estack
 8004280:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8004284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004288:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800428c:	0800ad20 	.word	0x0800ad20
  ldr r2, =_sbss
 8004290:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8004294:	20000694 	.word	0x20000694

08004298 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004298:	e7fe      	b.n	8004298 <ADC1_COMP_IRQHandler>
	...

0800429c <HAL_Init>:
 * incrementing: the tick variable counter is incremented each 1ms in the
 * SysTick_Handler() interrupt handler.
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80042a2:	1dfb      	adds	r3, r7, #7
 80042a4:	2200      	movs	r2, #0
 80042a6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042a8:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <HAL_Init+0x3c>)
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <HAL_Init+0x3c>)
 80042ae:	2180      	movs	r1, #128	; 0x80
 80042b0:	0049      	lsls	r1, r1, #1
 80042b2:	430a      	orrs	r2, r1
 80042b4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after
   * Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK) {
 80042b6:	2001      	movs	r0, #1
 80042b8:	f000 f810 	bl	80042dc <HAL_InitTick>
 80042bc:	1e03      	subs	r3, r0, #0
 80042be:	d003      	beq.n	80042c8 <HAL_Init+0x2c>
    status = HAL_ERROR;
 80042c0:	1dfb      	adds	r3, r7, #7
 80042c2:	2201      	movs	r2, #1
 80042c4:	701a      	strb	r2, [r3, #0]
 80042c6:	e001      	b.n	80042cc <HAL_Init+0x30>
  } else {
    /* Init the low level hardware */
    HAL_MspInit();
 80042c8:	f7ff fd76 	bl	8003db8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80042cc:	1dfb      	adds	r3, r7, #7
 80042ce:	781b      	ldrb	r3, [r3, #0]
}
 80042d0:	0018      	movs	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	b002      	add	sp, #8
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40022000 	.word	0x40022000

080042dc <HAL_InitTick>:
 * declared as __weak  to be overwritten  in case of other implementation  in
 * user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 80042dc:	b590      	push	{r4, r7, lr}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042e4:	230f      	movs	r3, #15
 80042e6:	18fb      	adds	r3, r7, r3
 80042e8:	2200      	movs	r2, #0
 80042ea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that
   * doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U) {
 80042ec:	4b1d      	ldr	r3, [pc, #116]	; (8004364 <HAL_InitTick+0x88>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d02b      	beq.n	800434c <HAL_InitTick+0x70>
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) ==
 80042f4:	4b1c      	ldr	r3, [pc, #112]	; (8004368 <HAL_InitTick+0x8c>)
 80042f6:	681c      	ldr	r4, [r3, #0]
 80042f8:	4b1a      	ldr	r3, [pc, #104]	; (8004364 <HAL_InitTick+0x88>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	0019      	movs	r1, r3
 80042fe:	23fa      	movs	r3, #250	; 0xfa
 8004300:	0098      	lsls	r0, r3, #2
 8004302:	f7fb ff13 	bl	800012c <__udivsi3>
 8004306:	0003      	movs	r3, r0
 8004308:	0019      	movs	r1, r3
 800430a:	0020      	movs	r0, r4
 800430c:	f7fb ff0e 	bl	800012c <__udivsi3>
 8004310:	0003      	movs	r3, r0
 8004312:	0018      	movs	r0, r3
 8004314:	f000 fdf1 	bl	8004efa <HAL_SYSTICK_Config>
 8004318:	1e03      	subs	r3, r0, #0
 800431a:	d112      	bne.n	8004342 <HAL_InitTick+0x66>
        0U) {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b03      	cmp	r3, #3
 8004320:	d80a      	bhi.n	8004338 <HAL_InitTick+0x5c>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	2301      	movs	r3, #1
 8004326:	425b      	negs	r3, r3
 8004328:	2200      	movs	r2, #0
 800432a:	0018      	movs	r0, r3
 800432c:	f000 fdc0 	bl	8004eb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004330:	4b0e      	ldr	r3, [pc, #56]	; (800436c <HAL_InitTick+0x90>)
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	e00d      	b.n	8004354 <HAL_InitTick+0x78>
      } else {
        status = HAL_ERROR;
 8004338:	230f      	movs	r3, #15
 800433a:	18fb      	adds	r3, r7, r3
 800433c:	2201      	movs	r2, #1
 800433e:	701a      	strb	r2, [r3, #0]
 8004340:	e008      	b.n	8004354 <HAL_InitTick+0x78>
      }
    } else {
      status = HAL_ERROR;
 8004342:	230f      	movs	r3, #15
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	2201      	movs	r2, #1
 8004348:	701a      	strb	r2, [r3, #0]
 800434a:	e003      	b.n	8004354 <HAL_InitTick+0x78>
    }
  } else {
    status = HAL_ERROR;
 800434c:	230f      	movs	r3, #15
 800434e:	18fb      	adds	r3, r7, r3
 8004350:	2201      	movs	r2, #1
 8004352:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004354:	230f      	movs	r3, #15
 8004356:	18fb      	adds	r3, r7, r3
 8004358:	781b      	ldrb	r3, [r3, #0]
}
 800435a:	0018      	movs	r0, r3
 800435c:	46bd      	mov	sp, r7
 800435e:	b005      	add	sp, #20
 8004360:	bd90      	pop	{r4, r7, pc}
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	20000008 	.word	0x20000008
 8004368:	20000000 	.word	0x20000000
 800436c:	20000004 	.word	0x20000004

08004370 <HAL_IncTick>:
 *       in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) { uwTick += (uint32_t)uwTickFreq; }
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
 8004374:	4b05      	ldr	r3, [pc, #20]	; (800438c <HAL_IncTick+0x1c>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	001a      	movs	r2, r3
 800437a:	4b05      	ldr	r3, [pc, #20]	; (8004390 <HAL_IncTick+0x20>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	18d2      	adds	r2, r2, r3
 8004380:	4b03      	ldr	r3, [pc, #12]	; (8004390 <HAL_IncTick+0x20>)
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	46c0      	nop			; (mov r8, r8)
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	20000008 	.word	0x20000008
 8004390:	20000680 	.word	0x20000680

08004394 <HAL_GetTick>:
 * @brief Provides a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) { return uwTick; }
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
 8004398:	4b02      	ldr	r3, [pc, #8]	; (80043a4 <HAL_GetTick+0x10>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	0018      	movs	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	20000680 	.word	0x20000680

080043a8 <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay  specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043b0:	f7ff fff0 	bl	8004394 <HAL_GetTick>
 80043b4:	0003      	movs	r3, r0
 80043b6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY) {
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	3301      	adds	r3, #1
 80043c0:	d005      	beq.n	80043ce <HAL_Delay+0x26>
    wait += (uint32_t)(uwTickFreq);
 80043c2:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <HAL_Delay+0x44>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	001a      	movs	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	189b      	adds	r3, r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait) {
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	f7ff ffe0 	bl	8004394 <HAL_GetTick>
 80043d4:	0002      	movs	r2, r0
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d8f7      	bhi.n	80043d0 <HAL_Delay+0x28>
  }
}
 80043e0:	46c0      	nop			; (mov r8, r8)
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	46bd      	mov	sp, r7
 80043e6:	b004      	add	sp, #16
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	20000008 	.word	0x20000008

080043f0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
 * following values:
 *         @arg @ref SYSCFG_UCPD1_STROBE
 *         @arg @ref SYSCFG_UCPD2_STROBE
 * @retval None
 */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery) {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery
   * settings */
  MODIFY_REG(SYSCFG->CFGR1,
 80043f8:	4b06      	ldr	r3, [pc, #24]	; (8004414 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a06      	ldr	r2, [pc, #24]	; (8004418 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80043fe:	4013      	ands	r3, r2
 8004400:	0019      	movs	r1, r3
 8004402:	4b04      	ldr	r3, [pc, #16]	; (8004414 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	430a      	orrs	r2, r1
 8004408:	601a      	str	r2, [r3, #0]
             (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE),
             ConfigDeadBattery);
}
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	46bd      	mov	sp, r7
 800440e:	b002      	add	sp, #8
 8004410:	bd80      	pop	{r7, pc}
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	40010000 	.word	0x40010000
 8004418:	fffff9ff 	.word	0xfffff9ff

0800441c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a05      	ldr	r2, [pc, #20]	; (8004440 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800442c:	401a      	ands	r2, r3
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	431a      	orrs	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	601a      	str	r2, [r3, #0]
}
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	46bd      	mov	sp, r7
 800443a:	b002      	add	sp, #8
 800443c:	bd80      	pop	{r7, pc}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	fe3fffff 	.word	0xfe3fffff

08004444 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	23e0      	movs	r3, #224	; 0xe0
 8004452:	045b      	lsls	r3, r3, #17
 8004454:	4013      	ands	r3, r2
}
 8004456:	0018      	movs	r0, r3
 8004458:	46bd      	mov	sp, r7
 800445a:	b002      	add	sp, #8
 800445c:	bd80      	pop	{r7, pc}

0800445e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b084      	sub	sp, #16
 8004462:	af00      	add	r7, sp, #0
 8004464:	60f8      	str	r0, [r7, #12]
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	2104      	movs	r1, #4
 8004472:	400a      	ands	r2, r1
 8004474:	2107      	movs	r1, #7
 8004476:	4091      	lsls	r1, r2
 8004478:	000a      	movs	r2, r1
 800447a:	43d2      	mvns	r2, r2
 800447c:	401a      	ands	r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2104      	movs	r1, #4
 8004482:	400b      	ands	r3, r1
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	4099      	lsls	r1, r3
 8004488:	000b      	movs	r3, r1
 800448a:	431a      	orrs	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004490:	46c0      	nop			; (mov r8, r8)
 8004492:	46bd      	mov	sp, r7
 8004494:	b004      	add	sp, #16
 8004496:	bd80      	pop	{r7, pc}

08004498 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	211f      	movs	r1, #31
 80044ac:	400a      	ands	r2, r1
 80044ae:	210f      	movs	r1, #15
 80044b0:	4091      	lsls	r1, r2
 80044b2:	000a      	movs	r2, r1
 80044b4:	43d2      	mvns	r2, r2
 80044b6:	401a      	ands	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	0e9b      	lsrs	r3, r3, #26
 80044bc:	210f      	movs	r1, #15
 80044be:	4019      	ands	r1, r3
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	201f      	movs	r0, #31
 80044c4:	4003      	ands	r3, r0
 80044c6:	4099      	lsls	r1, r3
 80044c8:	000b      	movs	r3, r1
 80044ca:	431a      	orrs	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80044d0:	46c0      	nop			; (mov r8, r8)
 80044d2:	46bd      	mov	sp, r7
 80044d4:	b004      	add	sp, #16
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	035b      	lsls	r3, r3, #13
 80044ea:	0b5b      	lsrs	r3, r3, #13
 80044ec:	431a      	orrs	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	46bd      	mov	sp, r7
 80044f6:	b002      	add	sp, #8
 80044f8:	bd80      	pop	{r7, pc}

080044fa <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b082      	sub	sp, #8
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
 8004502:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	0352      	lsls	r2, r2, #13
 800450c:	0b52      	lsrs	r2, r2, #13
 800450e:	43d2      	mvns	r2, r2
 8004510:	401a      	ands	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	46bd      	mov	sp, r7
 800451a:	b002      	add	sp, #8
 800451c:	bd80      	pop	{r7, pc}
	...

08004520 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	0212      	lsls	r2, r2, #8
 8004534:	43d2      	mvns	r2, r2
 8004536:	401a      	ands	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	021b      	lsls	r3, r3, #8
 800453c:	6879      	ldr	r1, [r7, #4]
 800453e:	400b      	ands	r3, r1
 8004540:	4904      	ldr	r1, [pc, #16]	; (8004554 <LL_ADC_SetChannelSamplingTime+0x34>)
 8004542:	400b      	ands	r3, r1
 8004544:	431a      	orrs	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800454a:	46c0      	nop			; (mov r8, r8)
 800454c:	46bd      	mov	sp, r7
 800454e:	b004      	add	sp, #16
 8004550:	bd80      	pop	{r7, pc}
 8004552:	46c0      	nop			; (mov r8, r8)
 8004554:	07ffff00 	.word	0x07ffff00

08004558 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	4a05      	ldr	r2, [pc, #20]	; (800457c <LL_ADC_EnableInternalRegulator+0x24>)
 8004566:	4013      	ands	r3, r2
 8004568:	2280      	movs	r2, #128	; 0x80
 800456a:	0552      	lsls	r2, r2, #21
 800456c:	431a      	orrs	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	46bd      	mov	sp, r7
 8004576:	b002      	add	sp, #8
 8004578:	bd80      	pop	{r7, pc}
 800457a:	46c0      	nop			; (mov r8, r8)
 800457c:	6fffffe8 	.word	0x6fffffe8

08004580 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	2380      	movs	r3, #128	; 0x80
 800458e:	055b      	lsls	r3, r3, #21
 8004590:	401a      	ands	r2, r3
 8004592:	2380      	movs	r3, #128	; 0x80
 8004594:	055b      	lsls	r3, r3, #21
 8004596:	429a      	cmp	r2, r3
 8004598:	d101      	bne.n	800459e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800459e:	2300      	movs	r3, #0
}
 80045a0:	0018      	movs	r0, r3
 80045a2:	46bd      	mov	sp, r7
 80045a4:	b002      	add	sp, #8
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2201      	movs	r2, #1
 80045b6:	4013      	ands	r3, r2
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d101      	bne.n	80045c0 <LL_ADC_IsEnabled+0x18>
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <LL_ADC_IsEnabled+0x1a>
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	0018      	movs	r0, r3
 80045c4:	46bd      	mov	sp, r7
 80045c6:	b002      	add	sp, #8
 80045c8:	bd80      	pop	{r7, pc}

080045ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b082      	sub	sp, #8
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	2204      	movs	r2, #4
 80045d8:	4013      	ands	r3, r2
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d101      	bne.n	80045e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	0018      	movs	r0, r3
 80045e6:	46bd      	mov	sp, r7
 80045e8:	b002      	add	sp, #8
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_ADC_Init>:
 *         ADC and scope of regular group. For parameters details, see comments
 *         of structure "ADC_InitTypeDef".
 * @param hadc ADC handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc) {
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045f4:	231f      	movs	r3, #31
 80045f6:	18fb      	adds	r3, r7, r3
 80045f8:	2200      	movs	r2, #0
 80045fa:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80045fc:	2300      	movs	r3, #0
 80045fe:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8004600:	2300      	movs	r3, #0
 8004602:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004604:	2300      	movs	r3, #0
 8004606:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL) {
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_ADC_Init+0x26>
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e1b1      	b.n	8004976 <HAL_ADC_Init+0x38a>
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) &&
                 (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET) {
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10a      	bne.n	8004630 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	0018      	movs	r0, r3
 800461e:	f7ff fbf3 	bl	8003e08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2254      	movs	r2, #84	; 0x54
 800462c:	2100      	movs	r1, #0
 800462e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL) {
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	0018      	movs	r0, r3
 8004636:	f7ff ffa3 	bl	8004580 <LL_ADC_IsInternalRegulatorEnabled>
 800463a:	1e03      	subs	r3, r0, #0
 800463c:	d115      	bne.n	800466a <HAL_ADC_Init+0x7e>
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	0018      	movs	r0, r3
 8004644:	f7ff ff88 	bl	8004558 <LL_ADC_EnableInternalRegulator>
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) *
                       ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004648:	4bcd      	ldr	r3, [pc, #820]	; (8004980 <HAL_ADC_Init+0x394>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	49cd      	ldr	r1, [pc, #820]	; (8004984 <HAL_ADC_Init+0x398>)
 800464e:	0018      	movs	r0, r3
 8004650:	f7fb fd6c 	bl	800012c <__udivsi3>
 8004654:	0003      	movs	r3, r0
 8004656:	3301      	adds	r3, #1
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) *
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL) {
 800465c:	e002      	b.n	8004664 <HAL_ADC_Init+0x78>
      wait_loop_index--;
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	3b01      	subs	r3, #1
 8004662:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL) {
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f9      	bne.n	800465e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL) {
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	0018      	movs	r0, r3
 8004670:	f7ff ff86 	bl	8004580 <LL_ADC_IsInternalRegulatorEnabled>
 8004674:	1e03      	subs	r3, r0, #0
 8004676:	d10f      	bne.n	8004698 <HAL_ADC_Init+0xac>
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467c:	2210      	movs	r2, #16
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004688:	2201      	movs	r2, #1
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004690:	231f      	movs	r3, #31
 8004692:	18fb      	adds	r3, r7, r3
 8004694:	2201      	movs	r2, #1
 8004696:	701a      	strb	r2, [r3, #0]
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going =
      LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	0018      	movs	r0, r3
 800469e:	f7ff ff94 	bl	80045ca <LL_ADC_REG_IsConversionOngoing>
 80046a2:	0003      	movs	r3, r0
 80046a4:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL) &&
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046aa:	2210      	movs	r2, #16
 80046ac:	4013      	ands	r3, r2
 80046ae:	d000      	beq.n	80046b2 <HAL_ADC_Init+0xc6>
 80046b0:	e154      	b.n	800495c <HAL_ADC_Init+0x370>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d000      	beq.n	80046ba <HAL_ADC_Init+0xce>
 80046b8:	e150      	b.n	800495c <HAL_ADC_Init+0x370>
      (tmp_adc_reg_is_conversion_on_going == 0UL)) {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY,
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046be:	4ab2      	ldr	r2, [pc, #712]	; (8004988 <HAL_ADC_Init+0x39c>)
 80046c0:	4013      	ands	r3, r2
 80046c2:	2202      	movs	r2, #2
 80046c4:	431a      	orrs	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL) {
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	0018      	movs	r0, r3
 80046d0:	f7ff ff6a 	bl	80045a8 <LL_ADC_IsEnabled>
 80046d4:	1e03      	subs	r3, r0, #0
 80046d6:	d156      	bne.n	8004786 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_RES, hadc->Init.Resolution);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	2218      	movs	r2, #24
 80046e0:	4393      	bics	r3, r2
 80046e2:	0019      	movs	r1, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	60da      	str	r2, [r3, #12]

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	0f9b      	lsrs	r3, r3, #30
 80046f6:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80046fc:	4313      	orrs	r3, r2
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	4313      	orrs	r3, r2
 8004702:	617b      	str	r3, [r7, #20]

      if (hadc->Init.OversamplingMode == ENABLE) {
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	223c      	movs	r2, #60	; 0x3c
 8004708:	5c9b      	ldrb	r3, [r3, r2]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d111      	bne.n	8004732 <HAL_ADC_Init+0x146>
        tmpCFGR2 |=
            (ADC_CFGR2_OVSE | (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	0f9b      	lsrs	r3, r3, #30
 8004714:	079a      	lsls	r2, r3, #30
             hadc->Init.Oversampling.Ratio |
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (ADC_CFGR2_OVSE | (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800471a:	431a      	orrs	r2, r3
             hadc->Init.Oversampling.RightBitShift |
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
             hadc->Init.Oversampling.Ratio |
 8004720:	431a      	orrs	r2, r3
             hadc->Init.Oversampling.TriggeredMode);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
             hadc->Init.Oversampling.RightBitShift |
 8004726:	431a      	orrs	r2, r3
        tmpCFGR2 |=
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	4313      	orrs	r3, r2
 800472c:	2201      	movs	r2, #1
 800472e:	4313      	orrs	r3, r2
 8004730:	617b      	str	r3, [r7, #20]
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	4a94      	ldr	r2, [pc, #592]	; (800498c <HAL_ADC_Init+0x3a0>)
 800473a:	4013      	ands	r3, r2
 800473c:	0019      	movs	r1, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	430a      	orrs	r2, r1
 8004746:	611a      	str	r2, [r3, #16]
                     ADC_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	23c0      	movs	r3, #192	; 0xc0
 800474e:	061b      	lsls	r3, r3, #24
 8004750:	429a      	cmp	r2, r3
 8004752:	d018      	beq.n	8004786 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004758:	2380      	movs	r3, #128	; 0x80
 800475a:	05db      	lsls	r3, r3, #23
 800475c:	429a      	cmp	r2, r3
 800475e:	d012      	beq.n	8004786 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4)) {
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004764:	2380      	movs	r3, #128	; 0x80
 8004766:	061b      	lsls	r3, r3, #24
 8004768:	429a      	cmp	r2, r3
 800476a:	d00c      	beq.n	8004786 <HAL_ADC_Init+0x19a>
        MODIFY_REG(ADC1_COMMON->CCR, ADC_CCR_PRESC,
 800476c:	4b88      	ldr	r3, [pc, #544]	; (8004990 <HAL_ADC_Init+0x3a4>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a88      	ldr	r2, [pc, #544]	; (8004994 <HAL_ADC_Init+0x3a8>)
 8004772:	4013      	ands	r3, r2
 8004774:	0019      	movs	r1, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	23f0      	movs	r3, #240	; 0xf0
 800477c:	039b      	lsls	r3, r3, #14
 800477e:	401a      	ands	r2, r3
 8004780:	4b83      	ldr	r3, [pc, #524]	; (8004990 <HAL_ADC_Init+0x3a4>)
 8004782:	430a      	orrs	r2, r1
 8004784:	601a      	str	r2, [r3, #0]
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |=
        (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	7e1b      	ldrb	r3, [r3, #24]
 800478a:	039a      	lsls	r2, r3, #14
         ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff) |
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	7e5b      	ldrb	r3, [r3, #25]
 8004790:	03db      	lsls	r3, r3, #15
        (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8004792:	431a      	orrs	r2, r3
         ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	7e9b      	ldrb	r3, [r3, #26]
 8004798:	035b      	lsls	r3, r3, #13
         ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff) |
 800479a:	431a      	orrs	r2, r3
         ADC_CFGR1_OVERRUN(hadc->Init.Overrun) | hadc->Init.DataAlign |
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d002      	beq.n	80047aa <HAL_ADC_Init+0x1be>
 80047a4:	2380      	movs	r3, #128	; 0x80
 80047a6:	015b      	lsls	r3, r3, #5
 80047a8:	e000      	b.n	80047ac <HAL_ADC_Init+0x1c0>
 80047aa:	2300      	movs	r3, #0
         ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80047ac:	431a      	orrs	r2, r3
         ADC_CFGR1_OVERRUN(hadc->Init.Overrun) | hadc->Init.DataAlign |
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	431a      	orrs	r2, r3
         ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode) |
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	da04      	bge.n	80047c6 <HAL_ADC_Init+0x1da>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	085b      	lsrs	r3, r3, #1
 80047c4:	e001      	b.n	80047ca <HAL_ADC_Init+0x1de>
 80047c6:	2380      	movs	r3, #128	; 0x80
 80047c8:	039b      	lsls	r3, r3, #14
         ADC_CFGR1_OVERRUN(hadc->Init.Overrun) | hadc->Init.DataAlign |
 80047ca:	431a      	orrs	r2, r3
         ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	212c      	movs	r1, #44	; 0x2c
 80047d0:	5c5b      	ldrb	r3, [r3, r1]
 80047d2:	005b      	lsls	r3, r3, #1
         ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode) |
 80047d4:	4313      	orrs	r3, r2
    tmpCFGR1 |=
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	4313      	orrs	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled
     */
    if (hadc->Init.DiscontinuousConvMode == ENABLE) {
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2220      	movs	r2, #32
 80047e0:	5c9b      	ldrb	r3, [r3, r2]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d115      	bne.n	8004812 <HAL_ADC_Init+0x226>
      if (hadc->Init.ContinuousConvMode == DISABLE) {
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	7e9b      	ldrb	r3, [r3, #26]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d105      	bne.n	80047fa <HAL_ADC_Init+0x20e>
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	2280      	movs	r2, #128	; 0x80
 80047f2:	0252      	lsls	r2, r2, #9
 80047f4:	4313      	orrs	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
 80047f8:	e00b      	b.n	8004812 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fe:	2220      	movs	r2, #32
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480a:	2201      	movs	r2, #1
 800480c:	431a      	orrs	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <HAL_ADC_Init+0x244>
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800481e:	23e0      	movs	r3, #224	; 0xe0
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004828:	4313      	orrs	r3, r2
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	4313      	orrs	r3, r2
 800482e:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	4a58      	ldr	r2, [pc, #352]	; (8004998 <HAL_ADC_Init+0x3ac>)
 8004838:	4013      	ands	r3, r2
 800483a:	0019      	movs	r1, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	430a      	orrs	r2, r1
 8004844:	60da      	str	r2, [r3, #12]
                   ADC_CFGR1_CONT | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTSEL |
                   ADC_CFGR1_EXTEN | ADC_CFGR1_ALIGN | ADC_CFGR1_SCANDIR |
                   ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	4a53      	ldr	r2, [pc, #332]	; (800499c <HAL_ADC_Init+0x3b0>)
 800484e:	4013      	ands	r3, r2
 8004850:	0019      	movs	r1, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	430a      	orrs	r2, r1
 800485a:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_LFTRIG | ADC_CFGR2_OVSE | ADC_CFGR2_OVSR |
                   ADC_CFGR2_OVSS | ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance,
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6818      	ldr	r0, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004864:	001a      	movs	r2, r3
 8004866:	2100      	movs	r1, #0
 8004868:	f7ff fdf9 	bl	800445e <LL_ADC_SetSamplingTimeCommonChannels>
                                         LL_ADC_SAMPLINGTIME_COMMON_1,
                                         hadc->Init.SamplingTimeCommon1);
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance,
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	494a      	ldr	r1, [pc, #296]	; (80049a0 <HAL_ADC_Init+0x3b4>)
 8004876:	001a      	movs	r2, r3
 8004878:	f7ff fdf1 	bl	800445e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE) {
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d109      	bne.n	8004898 <HAL_ADC_Init+0x2ac>
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2110      	movs	r1, #16
 8004890:	4249      	negs	r1, r1
 8004892:	430a      	orrs	r2, r1
 8004894:	629a      	str	r2, [r3, #40]	; 0x28
 8004896:	e03a      	b.n	800490e <HAL_ADC_Init+0x322>
    } else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE) {
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691a      	ldr	r2, [r3, #16]
 800489c:	2380      	movs	r3, #128	; 0x80
 800489e:	039b      	lsls	r3, r3, #14
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d134      	bne.n	800490e <HAL_ADC_Init+0x322>
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL;
 80048a4:	2300      	movs	r3, #0
 80048a6:	613b      	str	r3, [r7, #16]
 80048a8:	e00c      	b.n	80048c4 <HAL_ADC_Init+0x2d8>
           ADCGroupRegularSequencerRanksCount < (8UL);
           ADCGroupRegularSequencerRanksCount++) {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
              (ADCGroupRegularSequencerRanksCount * 4UL)) &
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	009b      	lsls	r3, r3, #2
        if (((hadc->ADCGroupRegularSequencerRanks >>
 80048b2:	40da      	lsrs	r2, r3
 80048b4:	0013      	movs	r3, r2
              (ADCGroupRegularSequencerRanksCount * 4UL)) &
 80048b6:	220f      	movs	r2, #15
 80048b8:	4013      	ands	r3, r2
        if (((hadc->ADCGroupRegularSequencerRanks >>
 80048ba:	2b0f      	cmp	r3, #15
 80048bc:	d006      	beq.n	80048cc <HAL_ADC_Init+0x2e0>
           ADCGroupRegularSequencerRanksCount++) {
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	3301      	adds	r3, #1
 80048c2:	613b      	str	r3, [r7, #16]
      for (ADCGroupRegularSequencerRanksCount = 0UL;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	2b07      	cmp	r3, #7
 80048c8:	d9ef      	bls.n	80048aa <HAL_ADC_Init+0x2be>
 80048ca:	e000      	b.n	80048ce <HAL_ADC_Init+0x2e2>
             ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1) {
          break;
 80048cc:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL) {
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d109      	bne.n	80048e8 <HAL_ADC_Init+0x2fc>
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2110      	movs	r1, #16
 80048e0:	4249      	negs	r1, r1
 80048e2:	430a      	orrs	r2, r1
 80048e4:	629a      	str	r2, [r3, #40]	; 0x28
 80048e6:	e012      	b.n	800490e <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	3b01      	subs	r3, #1
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	221c      	movs	r2, #28
 80048f8:	4013      	ands	r3, r2
 80048fa:	2210      	movs	r2, #16
 80048fc:	4252      	negs	r2, r2
 80048fe:	409a      	lsls	r2, r3
 8004900:	0011      	movs	r1, r2
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN |
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	4a23      	ldr	r2, [pc, #140]	; (80049a4 <HAL_ADC_Init+0x3b8>)
 8004916:	4013      	ands	r3, r2
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	429a      	cmp	r2, r3
 800491c:	d10b      	bne.n	8004936 <HAL_ADC_Init+0x34a>
                                   ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES)) ==
        tmpCFGR1) {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL,
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004928:	2203      	movs	r2, #3
 800492a:	4393      	bics	r3, r2
 800492c:	2201      	movs	r2, #1
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN |
 8004934:	e01c      	b.n	8004970 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    } else {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL,
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493a:	2212      	movs	r2, #18
 800493c:	4393      	bics	r3, r2
 800493e:	2210      	movs	r2, #16
 8004940:	431a      	orrs	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494a:	2201      	movs	r2, #1
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8004952:	231f      	movs	r3, #31
 8004954:	18fb      	adds	r3, r7, r3
 8004956:	2201      	movs	r2, #1
 8004958:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN |
 800495a:	e009      	b.n	8004970 <HAL_ADC_Init+0x384>
    }

  } else {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004960:	2210      	movs	r2, #16
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004968:	231f      	movs	r3, #31
 800496a:	18fb      	adds	r3, r7, r3
 800496c:	2201      	movs	r2, #1
 800496e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004970:	231f      	movs	r3, #31
 8004972:	18fb      	adds	r3, r7, r3
 8004974:	781b      	ldrb	r3, [r3, #0]
}
 8004976:	0018      	movs	r0, r3
 8004978:	46bd      	mov	sp, r7
 800497a:	b008      	add	sp, #32
 800497c:	bd80      	pop	{r7, pc}
 800497e:	46c0      	nop			; (mov r8, r8)
 8004980:	20000000 	.word	0x20000000
 8004984:	00030d40 	.word	0x00030d40
 8004988:	fffffefd 	.word	0xfffffefd
 800498c:	1ffffc02 	.word	0x1ffffc02
 8004990:	40012708 	.word	0x40012708
 8004994:	ffc3ffff 	.word	0xffc3ffff
 8004998:	fffe0219 	.word	0xfffe0219
 800499c:	dffffc02 	.word	0xdffffc02
 80049a0:	07ffff04 	.word	0x07ffff04
 80049a4:	833fffe7 	.word	0x833fffe7

080049a8 <HAL_ADC_ConfigChannel>:
 * @param hadc ADC handle
 * @param pConfig Structure of ADC channel assigned to ADC group regular.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc,
                                        ADC_ChannelConfTypeDef *pConfig) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049b2:	2317      	movs	r3, #23
 80049b4:	18fb      	adds	r3, r7, r3
 80049b6:	2200      	movs	r2, #0
 80049b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2254      	movs	r2, #84	; 0x54
 80049c2:	5c9b      	ldrb	r3, [r3, r2]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_ADC_ConfigChannel+0x24>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e1c0      	b.n	8004d4e <HAL_ADC_ConfigChannel+0x3a6>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2254      	movs	r2, #84	; 0x54
 80049d0:	2101      	movs	r1, #1
 80049d2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL) {
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	0018      	movs	r0, r3
 80049da:	f7ff fdf6 	bl	80045ca <LL_ADC_REG_IsConversionOngoing>
 80049de:	1e03      	subs	r3, r0, #0
 80049e0:	d000      	beq.n	80049e4 <HAL_ADC_ConfigChannel+0x3c>
 80049e2:	e1a3      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE) {
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d100      	bne.n	80049ee <HAL_ADC_ConfigChannel+0x46>
 80049ec:	e143      	b.n	8004c76 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED) ||
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691a      	ldr	r2, [r3, #16]
 80049f2:	2380      	movs	r3, #128	; 0x80
 80049f4:	061b      	lsls	r3, r3, #24
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d004      	beq.n	8004a04 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)) {
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED) ||
 80049fe:	4ac1      	ldr	r2, [pc, #772]	; (8004d04 <HAL_ADC_ConfigChannel+0x35c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d108      	bne.n	8004a16 <HAL_ADC_ConfigChannel+0x6e>
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	0019      	movs	r1, r3
 8004a0e:	0010      	movs	r0, r2
 8004a10:	f7ff fd62 	bl	80044d8 <LL_ADC_REG_SetSequencerChAdd>
 8004a14:	e0c9      	b.n	8004baa <HAL_ADC_ConfigChannel+0x202>
      } else {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	211f      	movs	r1, #31
 8004a20:	400b      	ands	r3, r1
 8004a22:	210f      	movs	r1, #15
 8004a24:	4099      	lsls	r1, r3
 8004a26:	000b      	movs	r3, r1
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	0019      	movs	r1, r3
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	035b      	lsls	r3, r3, #13
 8004a34:	0b5b      	lsrs	r3, r3, #13
 8004a36:	d105      	bne.n	8004a44 <HAL_ADC_ConfigChannel+0x9c>
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	0e9b      	lsrs	r3, r3, #26
 8004a3e:	221f      	movs	r2, #31
 8004a40:	4013      	ands	r3, r2
 8004a42:	e098      	b.n	8004b76 <HAL_ADC_ConfigChannel+0x1ce>
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	d000      	beq.n	8004a50 <HAL_ADC_ConfigChannel+0xa8>
 8004a4e:	e091      	b.n	8004b74 <HAL_ADC_ConfigChannel+0x1cc>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2202      	movs	r2, #2
 8004a56:	4013      	ands	r3, r2
 8004a58:	d000      	beq.n	8004a5c <HAL_ADC_ConfigChannel+0xb4>
 8004a5a:	e089      	b.n	8004b70 <HAL_ADC_ConfigChannel+0x1c8>
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2204      	movs	r2, #4
 8004a62:	4013      	ands	r3, r2
 8004a64:	d000      	beq.n	8004a68 <HAL_ADC_ConfigChannel+0xc0>
 8004a66:	e081      	b.n	8004b6c <HAL_ADC_ConfigChannel+0x1c4>
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2208      	movs	r2, #8
 8004a6e:	4013      	ands	r3, r2
 8004a70:	d000      	beq.n	8004a74 <HAL_ADC_ConfigChannel+0xcc>
 8004a72:	e079      	b.n	8004b68 <HAL_ADC_ConfigChannel+0x1c0>
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2210      	movs	r2, #16
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	d000      	beq.n	8004a80 <HAL_ADC_ConfigChannel+0xd8>
 8004a7e:	e071      	b.n	8004b64 <HAL_ADC_ConfigChannel+0x1bc>
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2220      	movs	r2, #32
 8004a86:	4013      	ands	r3, r2
 8004a88:	d000      	beq.n	8004a8c <HAL_ADC_ConfigChannel+0xe4>
 8004a8a:	e069      	b.n	8004b60 <HAL_ADC_ConfigChannel+0x1b8>
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2240      	movs	r2, #64	; 0x40
 8004a92:	4013      	ands	r3, r2
 8004a94:	d000      	beq.n	8004a98 <HAL_ADC_ConfigChannel+0xf0>
 8004a96:	e061      	b.n	8004b5c <HAL_ADC_ConfigChannel+0x1b4>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2280      	movs	r2, #128	; 0x80
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	d000      	beq.n	8004aa4 <HAL_ADC_ConfigChannel+0xfc>
 8004aa2:	e059      	b.n	8004b58 <HAL_ADC_ConfigChannel+0x1b0>
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	2380      	movs	r3, #128	; 0x80
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	4013      	ands	r3, r2
 8004aae:	d151      	bne.n	8004b54 <HAL_ADC_ConfigChannel+0x1ac>
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	2380      	movs	r3, #128	; 0x80
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4013      	ands	r3, r2
 8004aba:	d149      	bne.n	8004b50 <HAL_ADC_ConfigChannel+0x1a8>
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	2380      	movs	r3, #128	; 0x80
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	d141      	bne.n	8004b4c <HAL_ADC_ConfigChannel+0x1a4>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	2380      	movs	r3, #128	; 0x80
 8004ace:	011b      	lsls	r3, r3, #4
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	d139      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x1a0>
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	2380      	movs	r3, #128	; 0x80
 8004ada:	015b      	lsls	r3, r3, #5
 8004adc:	4013      	ands	r3, r2
 8004ade:	d131      	bne.n	8004b44 <HAL_ADC_ConfigChannel+0x19c>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	2380      	movs	r3, #128	; 0x80
 8004ae6:	019b      	lsls	r3, r3, #6
 8004ae8:	4013      	ands	r3, r2
 8004aea:	d129      	bne.n	8004b40 <HAL_ADC_ConfigChannel+0x198>
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	2380      	movs	r3, #128	; 0x80
 8004af2:	01db      	lsls	r3, r3, #7
 8004af4:	4013      	ands	r3, r2
 8004af6:	d121      	bne.n	8004b3c <HAL_ADC_ConfigChannel+0x194>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	2380      	movs	r3, #128	; 0x80
 8004afe:	021b      	lsls	r3, r3, #8
 8004b00:	4013      	ands	r3, r2
 8004b02:	d119      	bne.n	8004b38 <HAL_ADC_ConfigChannel+0x190>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	2380      	movs	r3, #128	; 0x80
 8004b0a:	025b      	lsls	r3, r3, #9
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	d111      	bne.n	8004b34 <HAL_ADC_ConfigChannel+0x18c>
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	2380      	movs	r3, #128	; 0x80
 8004b16:	029b      	lsls	r3, r3, #10
 8004b18:	4013      	ands	r3, r2
 8004b1a:	d109      	bne.n	8004b30 <HAL_ADC_ConfigChannel+0x188>
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	2380      	movs	r3, #128	; 0x80
 8004b22:	02db      	lsls	r3, r3, #11
 8004b24:	4013      	ands	r3, r2
 8004b26:	d001      	beq.n	8004b2c <HAL_ADC_ConfigChannel+0x184>
 8004b28:	2312      	movs	r3, #18
 8004b2a:	e024      	b.n	8004b76 <HAL_ADC_ConfigChannel+0x1ce>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	e022      	b.n	8004b76 <HAL_ADC_ConfigChannel+0x1ce>
 8004b30:	2311      	movs	r3, #17
 8004b32:	e020      	b.n	8004b76 <HAL_ADC_ConfigChannel+0x1ce>
 8004b34:	2310      	movs	r3, #16
 8004b36:	e01e      	b.n	8004b76 <HAL_ADC_ConfigChannel+0x1ce>
 8004b38:	230f      	movs	r3, #15
 8004b3a:	e01c      	b.n	8004b76 <HAL_ADC_ConfigChannel+0x1ce>
 8004b3c:	230e      	movs	r3, #14
 8004b3e:	e01a      	b.n	8004b76 <HAL_ADC_ConfigChannel+0x1ce>
 8004b40:	230d      	movs	r3, #13
 8004b42:	e018      	b.n	8004b76 <HAL_ADC_ConfigChannel+0x1ce>
 8004b44:	230c      	movs	r3, #12
 8004b46:	e016      	b.n	8004b76 <HAL_ADC_ConfigChannel+0x1ce>
 8004b48:	230b      	movs	r3, #11
 8004b4a:	e014      	b.n	8004b76 <HAL_ADC_ConfigChannel+0x1ce>
 8004b4c:	230a      	movs	r3, #10
 8004b4e:	e012      	b.n	8004b76 <HAL_ADC_ConfigChannel+0x1ce>
 8004b50:	2309      	movs	r3, #9
 8004b52:	e010      	b.n	8004b76 <HAL_ADC_ConfigChannel+0x1ce>
 8004b54:	2308      	movs	r3, #8
 8004b56:	e00e      	b.n	8004b76 <HAL_ADC_ConfigChannel+0x1ce>
 8004b58:	2307      	movs	r3, #7
 8004b5a:	e00c      	b.n	8004b76 <HAL_ADC_ConfigChannel+0x1ce>
 8004b5c:	2306      	movs	r3, #6
 8004b5e:	e00a      	b.n	8004b76 <HAL_ADC_ConfigChannel+0x1ce>
 8004b60:	2305      	movs	r3, #5
 8004b62:	e008      	b.n	8004b76 <HAL_ADC_ConfigChannel+0x1ce>
 8004b64:	2304      	movs	r3, #4
 8004b66:	e006      	b.n	8004b76 <HAL_ADC_ConfigChannel+0x1ce>
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e004      	b.n	8004b76 <HAL_ADC_ConfigChannel+0x1ce>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	e002      	b.n	8004b76 <HAL_ADC_ConfigChannel+0x1ce>
 8004b70:	2301      	movs	r3, #1
 8004b72:	e000      	b.n	8004b76 <HAL_ADC_ConfigChannel+0x1ce>
 8004b74:	2300      	movs	r3, #0
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	6852      	ldr	r2, [r2, #4]
 8004b7a:	201f      	movs	r0, #31
 8004b7c:	4002      	ands	r2, r0
 8004b7e:	4093      	lsls	r3, r2
 8004b80:	000a      	movs	r2, r1
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion) {
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	089b      	lsrs	r3, r3, #2
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d808      	bhi.n	8004baa <HAL_ADC_ConfigChannel+0x202>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank,
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6818      	ldr	r0, [r3, #0]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	6859      	ldr	r1, [r3, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	001a      	movs	r2, r3
 8004ba6:	f7ff fc77 	bl	8004498 <LL_ADC_REG_SetSequencerRanks>
                                       pConfig->Channel);
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel,
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6818      	ldr	r0, [r3, #0]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	6819      	ldr	r1, [r3, #0]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	001a      	movs	r2, r3
 8004bb8:	f7ff fcb2 	bl	8004520 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel)) {
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	db00      	blt.n	8004bc6 <HAL_ADC_ConfigChannel+0x21e>
 8004bc4:	e0bc      	b.n	8004d40 <HAL_ADC_ConfigChannel+0x398>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(
 8004bc6:	4b50      	ldr	r3, [pc, #320]	; (8004d08 <HAL_ADC_ConfigChannel+0x360>)
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f7ff fc3b 	bl	8004444 <LL_ADC_GetCommonPathInternalCh>
 8004bce:	0003      	movs	r3, r0
 8004bd0:	613b      	str	r3, [r7, #16]
            __LL_ADC_COMMON_INSTANCE(hadc->Instance));

        /* If the requested internal measurement path has already been enabled,
         */
        /* bypass the configuration processing. */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a4d      	ldr	r2, [pc, #308]	; (8004d0c <HAL_ADC_ConfigChannel+0x364>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d122      	bne.n	8004c22 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) ==
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	2380      	movs	r3, #128	; 0x80
 8004be0:	041b      	lsls	r3, r3, #16
 8004be2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004be4:	d11d      	bne.n	8004c22 <HAL_ADC_ConfigChannel+0x27a>
             0UL)) {
          LL_ADC_SetCommonPathInternalCh(
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	2280      	movs	r2, #128	; 0x80
 8004bea:	0412      	lsls	r2, r2, #16
 8004bec:	4313      	orrs	r3, r2
 8004bee:	4a46      	ldr	r2, [pc, #280]	; (8004d08 <HAL_ADC_ConfigChannel+0x360>)
 8004bf0:	0019      	movs	r1, r3
 8004bf2:	0010      	movs	r0, r2
 8004bf4:	f7ff fc12 	bl	800441c <LL_ADC_SetCommonPathInternalCh>
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) *
                             ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004bf8:	4b45      	ldr	r3, [pc, #276]	; (8004d10 <HAL_ADC_ConfigChannel+0x368>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4945      	ldr	r1, [pc, #276]	; (8004d14 <HAL_ADC_ConfigChannel+0x36c>)
 8004bfe:	0018      	movs	r0, r3
 8004c00:	f7fb fa94 	bl	800012c <__udivsi3>
 8004c04:	0003      	movs	r3, r0
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) *
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	0013      	movs	r3, r2
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	189b      	adds	r3, r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL) {
 8004c12:	e002      	b.n	8004c1a <HAL_ADC_ConfigChannel+0x272>
            wait_loop_index--;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL) {
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1f9      	bne.n	8004c14 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004c20:	e08e      	b.n	8004d40 <HAL_ADC_ConfigChannel+0x398>
          }
        } else if ((pConfig->Channel == ADC_CHANNEL_VBAT) &&
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a3c      	ldr	r2, [pc, #240]	; (8004d18 <HAL_ADC_ConfigChannel+0x370>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d10e      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x2a2>
                   ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) ==
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	2380      	movs	r3, #128	; 0x80
 8004c30:	045b      	lsls	r3, r3, #17
 8004c32:	4013      	ands	r3, r2
        } else if ((pConfig->Channel == ADC_CHANNEL_VBAT) &&
 8004c34:	d109      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x2a2>
                    0UL)) {
          LL_ADC_SetCommonPathInternalCh(
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	2280      	movs	r2, #128	; 0x80
 8004c3a:	0452      	lsls	r2, r2, #17
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	4a32      	ldr	r2, [pc, #200]	; (8004d08 <HAL_ADC_ConfigChannel+0x360>)
 8004c40:	0019      	movs	r1, r3
 8004c42:	0010      	movs	r0, r2
 8004c44:	f7ff fbea 	bl	800441c <LL_ADC_SetCommonPathInternalCh>
 8004c48:	e07a      	b.n	8004d40 <HAL_ADC_ConfigChannel+0x398>
              __LL_ADC_COMMON_INSTANCE(hadc->Instance),
              LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        } else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a33      	ldr	r2, [pc, #204]	; (8004d1c <HAL_ADC_ConfigChannel+0x374>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d000      	beq.n	8004c56 <HAL_ADC_ConfigChannel+0x2ae>
 8004c54:	e074      	b.n	8004d40 <HAL_ADC_ConfigChannel+0x398>
                   ((tmp_config_internal_channel &
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	2380      	movs	r3, #128	; 0x80
 8004c5a:	03db      	lsls	r3, r3, #15
 8004c5c:	4013      	ands	r3, r2
        } else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004c5e:	d000      	beq.n	8004c62 <HAL_ADC_ConfigChannel+0x2ba>
 8004c60:	e06e      	b.n	8004d40 <HAL_ADC_ConfigChannel+0x398>
                     LL_ADC_PATH_INTERNAL_VREFINT) == 0UL)) {
          LL_ADC_SetCommonPathInternalCh(
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	2280      	movs	r2, #128	; 0x80
 8004c66:	03d2      	lsls	r2, r2, #15
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	4a27      	ldr	r2, [pc, #156]	; (8004d08 <HAL_ADC_ConfigChannel+0x360>)
 8004c6c:	0019      	movs	r1, r3
 8004c6e:	0010      	movs	r0, r2
 8004c70:	f7ff fbd4 	bl	800441c <LL_ADC_SetCommonPathInternalCh>
 8004c74:	e064      	b.n	8004d40 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED) ||
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691a      	ldr	r2, [r3, #16]
 8004c7a:	2380      	movs	r3, #128	; 0x80
 8004c7c:	061b      	lsls	r3, r3, #24
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d004      	beq.n	8004c8c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)) {
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED) ||
 8004c86:	4a1f      	ldr	r2, [pc, #124]	; (8004d04 <HAL_ADC_ConfigChannel+0x35c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d107      	bne.n	8004c9c <HAL_ADC_ConfigChannel+0x2f4>
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	0019      	movs	r1, r3
 8004c96:	0010      	movs	r0, r2
 8004c98:	f7ff fc2f 	bl	80044fa <LL_ADC_REG_SetSequencerChRem>

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.
       */
      /* If internal channel selected, enable dedicated internal buffers and */
      /* paths. */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel)) {
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	da4d      	bge.n	8004d40 <HAL_ADC_ConfigChannel+0x398>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(
 8004ca4:	4b18      	ldr	r3, [pc, #96]	; (8004d08 <HAL_ADC_ConfigChannel+0x360>)
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	f7ff fbcc 	bl	8004444 <LL_ADC_GetCommonPathInternalCh>
 8004cac:	0003      	movs	r3, r0
 8004cae:	613b      	str	r3, [r7, #16]
            __LL_ADC_COMMON_INSTANCE(hadc->Instance));

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) {
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a15      	ldr	r2, [pc, #84]	; (8004d0c <HAL_ADC_ConfigChannel+0x364>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d108      	bne.n	8004ccc <HAL_ADC_ConfigChannel+0x324>
          LL_ADC_SetCommonPathInternalCh(
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	4a18      	ldr	r2, [pc, #96]	; (8004d20 <HAL_ADC_ConfigChannel+0x378>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	4a11      	ldr	r2, [pc, #68]	; (8004d08 <HAL_ADC_ConfigChannel+0x360>)
 8004cc2:	0019      	movs	r1, r3
 8004cc4:	0010      	movs	r0, r2
 8004cc6:	f7ff fba9 	bl	800441c <LL_ADC_SetCommonPathInternalCh>
 8004cca:	e039      	b.n	8004d40 <HAL_ADC_ConfigChannel+0x398>
              __LL_ADC_COMMON_INSTANCE(hadc->Instance),
              ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        } else if (pConfig->Channel == ADC_CHANNEL_VBAT) {
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a11      	ldr	r2, [pc, #68]	; (8004d18 <HAL_ADC_ConfigChannel+0x370>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d108      	bne.n	8004ce8 <HAL_ADC_ConfigChannel+0x340>
          LL_ADC_SetCommonPathInternalCh(
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	4a12      	ldr	r2, [pc, #72]	; (8004d24 <HAL_ADC_ConfigChannel+0x37c>)
 8004cda:	4013      	ands	r3, r2
 8004cdc:	4a0a      	ldr	r2, [pc, #40]	; (8004d08 <HAL_ADC_ConfigChannel+0x360>)
 8004cde:	0019      	movs	r1, r3
 8004ce0:	0010      	movs	r0, r2
 8004ce2:	f7ff fb9b 	bl	800441c <LL_ADC_SetCommonPathInternalCh>
 8004ce6:	e02b      	b.n	8004d40 <HAL_ADC_ConfigChannel+0x398>
              __LL_ADC_COMMON_INSTANCE(hadc->Instance),
              ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        } else if (pConfig->Channel == ADC_CHANNEL_VREFINT) {
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a0b      	ldr	r2, [pc, #44]	; (8004d1c <HAL_ADC_ConfigChannel+0x374>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d126      	bne.n	8004d40 <HAL_ADC_ConfigChannel+0x398>
          LL_ADC_SetCommonPathInternalCh(
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	4a0c      	ldr	r2, [pc, #48]	; (8004d28 <HAL_ADC_ConfigChannel+0x380>)
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	4a03      	ldr	r2, [pc, #12]	; (8004d08 <HAL_ADC_ConfigChannel+0x360>)
 8004cfa:	0019      	movs	r1, r3
 8004cfc:	0010      	movs	r0, r2
 8004cfe:	f7ff fb8d 	bl	800441c <LL_ADC_SetCommonPathInternalCh>
 8004d02:	e01d      	b.n	8004d40 <HAL_ADC_ConfigChannel+0x398>
 8004d04:	80000004 	.word	0x80000004
 8004d08:	40012708 	.word	0x40012708
 8004d0c:	b0001000 	.word	0xb0001000
 8004d10:	20000000 	.word	0x20000000
 8004d14:	00030d40 	.word	0x00030d40
 8004d18:	b8004000 	.word	0xb8004000
 8004d1c:	b4002000 	.word	0xb4002000
 8004d20:	ff7fffff 	.word	0xff7fffff
 8004d24:	feffffff 	.word	0xfeffffff
 8004d28:	ffbfffff 	.word	0xffbfffff
  /* If a conversion is on going on regular group, no update on regular       */
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d30:	2220      	movs	r2, #32
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004d38:	2317      	movs	r3, #23
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2254      	movs	r2, #84	; 0x54
 8004d44:	2100      	movs	r1, #0
 8004d46:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004d48:	2317      	movs	r3, #23
 8004d4a:	18fb      	adds	r3, r7, r3
 8004d4c:	781b      	ldrb	r3, [r3, #0]
}
 8004d4e:	0018      	movs	r0, r3
 8004d50:	46bd      	mov	sp, r7
 8004d52:	b006      	add	sp, #24
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	46c0      	nop			; (mov r8, r8)

08004d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	0002      	movs	r2, r0
 8004d60:	1dfb      	adds	r3, r7, #7
 8004d62:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004d64:	1dfb      	adds	r3, r7, #7
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b7f      	cmp	r3, #127	; 0x7f
 8004d6a:	d809      	bhi.n	8004d80 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d6c:	1dfb      	adds	r3, r7, #7
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	001a      	movs	r2, r3
 8004d72:	231f      	movs	r3, #31
 8004d74:	401a      	ands	r2, r3
 8004d76:	4b04      	ldr	r3, [pc, #16]	; (8004d88 <__NVIC_EnableIRQ+0x30>)
 8004d78:	2101      	movs	r1, #1
 8004d7a:	4091      	lsls	r1, r2
 8004d7c:	000a      	movs	r2, r1
 8004d7e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004d80:	46c0      	nop			; (mov r8, r8)
 8004d82:	46bd      	mov	sp, r7
 8004d84:	b002      	add	sp, #8
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	e000e100 	.word	0xe000e100

08004d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d8c:	b590      	push	{r4, r7, lr}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	0002      	movs	r2, r0
 8004d94:	6039      	str	r1, [r7, #0]
 8004d96:	1dfb      	adds	r3, r7, #7
 8004d98:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004d9a:	1dfb      	adds	r3, r7, #7
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8004da0:	d828      	bhi.n	8004df4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004da2:	4a2f      	ldr	r2, [pc, #188]	; (8004e60 <__NVIC_SetPriority+0xd4>)
 8004da4:	1dfb      	adds	r3, r7, #7
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	b25b      	sxtb	r3, r3
 8004daa:	089b      	lsrs	r3, r3, #2
 8004dac:	33c0      	adds	r3, #192	; 0xc0
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	589b      	ldr	r3, [r3, r2]
 8004db2:	1dfa      	adds	r2, r7, #7
 8004db4:	7812      	ldrb	r2, [r2, #0]
 8004db6:	0011      	movs	r1, r2
 8004db8:	2203      	movs	r2, #3
 8004dba:	400a      	ands	r2, r1
 8004dbc:	00d2      	lsls	r2, r2, #3
 8004dbe:	21ff      	movs	r1, #255	; 0xff
 8004dc0:	4091      	lsls	r1, r2
 8004dc2:	000a      	movs	r2, r1
 8004dc4:	43d2      	mvns	r2, r2
 8004dc6:	401a      	ands	r2, r3
 8004dc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	019b      	lsls	r3, r3, #6
 8004dce:	22ff      	movs	r2, #255	; 0xff
 8004dd0:	401a      	ands	r2, r3
 8004dd2:	1dfb      	adds	r3, r7, #7
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	2303      	movs	r3, #3
 8004dda:	4003      	ands	r3, r0
 8004ddc:	00db      	lsls	r3, r3, #3
 8004dde:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004de0:	481f      	ldr	r0, [pc, #124]	; (8004e60 <__NVIC_SetPriority+0xd4>)
 8004de2:	1dfb      	adds	r3, r7, #7
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	b25b      	sxtb	r3, r3
 8004de8:	089b      	lsrs	r3, r3, #2
 8004dea:	430a      	orrs	r2, r1
 8004dec:	33c0      	adds	r3, #192	; 0xc0
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004df2:	e031      	b.n	8004e58 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004df4:	4a1b      	ldr	r2, [pc, #108]	; (8004e64 <__NVIC_SetPriority+0xd8>)
 8004df6:	1dfb      	adds	r3, r7, #7
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	0019      	movs	r1, r3
 8004dfc:	230f      	movs	r3, #15
 8004dfe:	400b      	ands	r3, r1
 8004e00:	3b08      	subs	r3, #8
 8004e02:	089b      	lsrs	r3, r3, #2
 8004e04:	3306      	adds	r3, #6
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	18d3      	adds	r3, r2, r3
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	1dfa      	adds	r2, r7, #7
 8004e10:	7812      	ldrb	r2, [r2, #0]
 8004e12:	0011      	movs	r1, r2
 8004e14:	2203      	movs	r2, #3
 8004e16:	400a      	ands	r2, r1
 8004e18:	00d2      	lsls	r2, r2, #3
 8004e1a:	21ff      	movs	r1, #255	; 0xff
 8004e1c:	4091      	lsls	r1, r2
 8004e1e:	000a      	movs	r2, r1
 8004e20:	43d2      	mvns	r2, r2
 8004e22:	401a      	ands	r2, r3
 8004e24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	019b      	lsls	r3, r3, #6
 8004e2a:	22ff      	movs	r2, #255	; 0xff
 8004e2c:	401a      	ands	r2, r3
 8004e2e:	1dfb      	adds	r3, r7, #7
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	0018      	movs	r0, r3
 8004e34:	2303      	movs	r3, #3
 8004e36:	4003      	ands	r3, r0
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e3c:	4809      	ldr	r0, [pc, #36]	; (8004e64 <__NVIC_SetPriority+0xd8>)
 8004e3e:	1dfb      	adds	r3, r7, #7
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	001c      	movs	r4, r3
 8004e44:	230f      	movs	r3, #15
 8004e46:	4023      	ands	r3, r4
 8004e48:	3b08      	subs	r3, #8
 8004e4a:	089b      	lsrs	r3, r3, #2
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	3306      	adds	r3, #6
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	18c3      	adds	r3, r0, r3
 8004e54:	3304      	adds	r3, #4
 8004e56:	601a      	str	r2, [r3, #0]
}
 8004e58:	46c0      	nop			; (mov r8, r8)
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	b003      	add	sp, #12
 8004e5e:	bd90      	pop	{r4, r7, pc}
 8004e60:	e000e100 	.word	0xe000e100
 8004e64:	e000ed00 	.word	0xe000ed00

08004e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	1e5a      	subs	r2, r3, #1
 8004e74:	2380      	movs	r3, #128	; 0x80
 8004e76:	045b      	lsls	r3, r3, #17
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d301      	bcc.n	8004e80 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e010      	b.n	8004ea2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e80:	4b0a      	ldr	r3, [pc, #40]	; (8004eac <SysTick_Config+0x44>)
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	3a01      	subs	r2, #1
 8004e86:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e88:	2301      	movs	r3, #1
 8004e8a:	425b      	negs	r3, r3
 8004e8c:	2103      	movs	r1, #3
 8004e8e:	0018      	movs	r0, r3
 8004e90:	f7ff ff7c 	bl	8004d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <SysTick_Config+0x44>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e9a:	4b04      	ldr	r3, [pc, #16]	; (8004eac <SysTick_Config+0x44>)
 8004e9c:	2207      	movs	r2, #7
 8004e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	0018      	movs	r0, r3
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	b002      	add	sp, #8
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	46c0      	nop			; (mov r8, r8)
 8004eac:	e000e010 	.word	0xe000e010

08004eb0 <HAL_NVIC_SetPriority>:
 *         with stm32g0xx devices, this parameter is a dummy value and it is
 * ignored, because no subpriority supported in Cortex M0+ based products.
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
                          uint32_t SubPriority) {
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	607a      	str	r2, [r7, #4]
 8004eba:	210f      	movs	r1, #15
 8004ebc:	187b      	adds	r3, r7, r1
 8004ebe:	1c02      	adds	r2, r0, #0
 8004ec0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	187b      	adds	r3, r7, r1
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	b25b      	sxtb	r3, r3
 8004eca:	0011      	movs	r1, r2
 8004ecc:	0018      	movs	r0, r3
 8004ece:	f7ff ff5d 	bl	8004d8c <__NVIC_SetPriority>
}
 8004ed2:	46c0      	nop			; (mov r8, r8)
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	b004      	add	sp, #16
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <HAL_NVIC_EnableIRQ>:
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to
 * the appropriate CMSIS device file (stm32g0xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn) {
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b082      	sub	sp, #8
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	0002      	movs	r2, r0
 8004ee2:	1dfb      	adds	r3, r7, #7
 8004ee4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ee6:	1dfb      	adds	r3, r7, #7
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	b25b      	sxtb	r3, r3
 8004eec:	0018      	movs	r0, r3
 8004eee:	f7ff ff33 	bl	8004d58 <__NVIC_EnableIRQ>
}
 8004ef2:	46c0      	nop			; (mov r8, r8)
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	b002      	add	sp, #8
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <HAL_SYSTICK_Config>:
 * periodic interrupts.
 * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b082      	sub	sp, #8
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	0018      	movs	r0, r3
 8004f06:	f7ff ffaf 	bl	8004e68 <SysTick_Config>
 8004f0a:	0003      	movs	r3, r0
}
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	b002      	add	sp, #8
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <HAL_DMA_Abort>:
 * @brief Abort the DMA Transfer.
 * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
 *             the configuration information for the specified DMA Channel.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma) {
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma) {
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_DMA_Abort+0x12>
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e050      	b.n	8004fc8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY) {
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2225      	movs	r2, #37	; 0x25
 8004f2a:	5c9b      	ldrb	r3, [r3, r2]
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d008      	beq.n	8004f44 <HAL_DMA_Abort+0x30>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2204      	movs	r2, #4
 8004f36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2224      	movs	r2, #36	; 0x24
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e041      	b.n	8004fc8 <HAL_DMA_Abort+0xb4>
  } else {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	210e      	movs	r1, #14
 8004f50:	438a      	bics	r2, r1
 8004f52:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5e:	491c      	ldr	r1, [pc, #112]	; (8004fd0 <HAL_DMA_Abort+0xbc>)
 8004f60:	400a      	ands	r2, r1
 8004f62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2101      	movs	r1, #1
 8004f70:	438a      	bics	r2, r1
 8004f72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma,
 8004f74:	4b17      	ldr	r3, [pc, #92]	; (8004fd4 <HAL_DMA_Abort+0xc0>)
 8004f76:	6859      	ldr	r1, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7c:	221c      	movs	r2, #28
 8004f7e:	4013      	ands	r3, r2
 8004f80:	2201      	movs	r2, #1
 8004f82:	409a      	lsls	r2, r3
 8004f84:	4b13      	ldr	r3, [pc, #76]	; (8004fd4 <HAL_DMA_Abort+0xc0>)
 8004f86:	430a      	orrs	r2, r1
 8004f88:	605a      	str	r2, [r3, #4]
                         ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004f92:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U) {
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00c      	beq.n	8004fb6 <HAL_DMA_Abort+0xa2>
      /* if using DMAMUX request generator, disable the DMAMUX request generator
       * overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa6:	490a      	ldr	r1, [pc, #40]	; (8004fd0 <HAL_DMA_Abort+0xbc>)
 8004fa8:	400a      	ands	r2, r1
 8004faa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004fb4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2225      	movs	r2, #37	; 0x25
 8004fba:	2101      	movs	r1, #1
 8004fbc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2224      	movs	r2, #36	; 0x24
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	0018      	movs	r0, r3
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	b002      	add	sp, #8
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	fffffeff 	.word	0xfffffeff
 8004fd4:	40020000 	.word	0x40020000

08004fd8 <HAL_DMA_Abort_IT>:
 * @brief Aborts the DMA Transfer in Interrupt mode.
 * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
 *             the configuration information for the specified DMA Channel.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma) {
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fe0:	210f      	movs	r1, #15
 8004fe2:	187b      	adds	r3, r7, r1
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY) {
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2225      	movs	r2, #37	; 0x25
 8004fec:	5c9b      	ldrb	r3, [r3, r2]
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d006      	beq.n	8005002 <HAL_DMA_Abort_IT+0x2a>
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2204      	movs	r2, #4
 8004ff8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004ffa:	187b      	adds	r3, r7, r1
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	701a      	strb	r2, [r3, #0]
 8005000:	e049      	b.n	8005096 <HAL_DMA_Abort_IT+0xbe>
  } else {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	210e      	movs	r1, #14
 800500e:	438a      	bics	r2, r1
 8005010:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2101      	movs	r1, #1
 800501e:	438a      	bics	r2, r1
 8005020:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502c:	491d      	ldr	r1, [pc, #116]	; (80050a4 <HAL_DMA_Abort_IT+0xcc>)
 800502e:	400a      	ands	r2, r1
 8005030:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma,
 8005032:	4b1d      	ldr	r3, [pc, #116]	; (80050a8 <HAL_DMA_Abort_IT+0xd0>)
 8005034:	6859      	ldr	r1, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	221c      	movs	r2, #28
 800503c:	4013      	ands	r3, r2
 800503e:	2201      	movs	r2, #1
 8005040:	409a      	lsls	r2, r3
 8005042:	4b19      	ldr	r3, [pc, #100]	; (80050a8 <HAL_DMA_Abort_IT+0xd0>)
 8005044:	430a      	orrs	r2, r1
 8005046:	605a      	str	r2, [r3, #4]
                         ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005050:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U) {
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00c      	beq.n	8005074 <HAL_DMA_Abort_IT+0x9c>
      /* if using DMAMUX request generator, disable the DMAMUX request generator
       * overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005064:	490f      	ldr	r1, [pc, #60]	; (80050a4 <HAL_DMA_Abort_IT+0xcc>)
 8005066:	400a      	ands	r2, r1
 8005068:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005072:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2225      	movs	r2, #37	; 0x25
 8005078:	2101      	movs	r1, #1
 800507a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2224      	movs	r2, #36	; 0x24
 8005080:	2100      	movs	r1, #0
 8005082:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL) {
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005088:	2b00      	cmp	r3, #0
 800508a:	d004      	beq.n	8005096 <HAL_DMA_Abort_IT+0xbe>
      hdma->XferAbortCallback(hdma);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	0010      	movs	r0, r2
 8005094:	4798      	blx	r3
    }
  }
  return status;
 8005096:	230f      	movs	r3, #15
 8005098:	18fb      	adds	r3, r7, r3
 800509a:	781b      	ldrb	r3, [r3, #0]
}
 800509c:	0018      	movs	r0, r3
 800509e:	46bd      	mov	sp, r7
 80050a0:	b004      	add	sp, #16
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	fffffeff 	.word	0xfffffeff
 80050a8:	40020000 	.word	0x40020000

080050ac <HAL_GPIO_Init>:
 * STM32G0xx family
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050b6:	2300      	movs	r3, #0
 80050b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u) {
 80050ba:	e147      	b.n	800534c <HAL_GPIO_Init+0x2a0>
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2101      	movs	r1, #1
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	4091      	lsls	r1, r2
 80050c6:	000a      	movs	r2, r1
 80050c8:	4013      	ands	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u) {
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d100      	bne.n	80050d4 <HAL_GPIO_Init+0x28>
 80050d2:	e138      	b.n	8005346 <HAL_GPIO_Init+0x29a>
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2203      	movs	r2, #3
 80050da:	4013      	ands	r3, r2
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d005      	beq.n	80050ec <HAL_GPIO_Init+0x40>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)) {
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2203      	movs	r2, #3
 80050e6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d130      	bne.n	800514e <HAL_GPIO_Init+0xa2>
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	2203      	movs	r2, #3
 80050f8:	409a      	lsls	r2, r3
 80050fa:	0013      	movs	r3, r2
 80050fc:	43da      	mvns	r2, r3
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	4013      	ands	r3, r2
 8005102:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	409a      	lsls	r2, r3
 800510e:	0013      	movs	r3, r2
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	4313      	orrs	r3, r2
 8005114:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position);
 8005122:	2201      	movs	r2, #1
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	409a      	lsls	r2, r3
 8005128:	0013      	movs	r3, r2
 800512a:	43da      	mvns	r2, r3
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	4013      	ands	r3, r2
 8005130:	613b      	str	r3, [r7, #16]
        temp |=
            (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	091b      	lsrs	r3, r3, #4
 8005138:	2201      	movs	r2, #1
 800513a:	401a      	ands	r2, r3
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	409a      	lsls	r2, r3
 8005140:	0013      	movs	r3, r2
        temp |=
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2203      	movs	r2, #3
 8005154:	4013      	ands	r3, r2
 8005156:	2b03      	cmp	r3, #3
 8005158:	d017      	beq.n	800518a <HAL_GPIO_Init+0xde>
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	2203      	movs	r2, #3
 8005166:	409a      	lsls	r2, r3
 8005168:	0013      	movs	r3, r2
 800516a:	43da      	mvns	r2, r3
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	4013      	ands	r3, r2
 8005170:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	689a      	ldr	r2, [r3, #8]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	409a      	lsls	r2, r3
 800517c:	0013      	movs	r3, r2
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	4313      	orrs	r3, r2
 8005182:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2203      	movs	r2, #3
 8005190:	4013      	ands	r3, r2
 8005192:	2b02      	cmp	r3, #2
 8005194:	d123      	bne.n	80051de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	08da      	lsrs	r2, r3, #3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	3208      	adds	r2, #8
 800519e:	0092      	lsls	r2, r2, #2
 80051a0:	58d3      	ldr	r3, [r2, r3]
 80051a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	2207      	movs	r2, #7
 80051a8:	4013      	ands	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	220f      	movs	r2, #15
 80051ae:	409a      	lsls	r2, r3
 80051b0:	0013      	movs	r3, r2
 80051b2:	43da      	mvns	r2, r3
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	4013      	ands	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	691a      	ldr	r2, [r3, #16]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2107      	movs	r1, #7
 80051c2:	400b      	ands	r3, r1
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	409a      	lsls	r2, r3
 80051c8:	0013      	movs	r3, r2
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	08da      	lsrs	r2, r3, #3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3208      	adds	r2, #8
 80051d8:	0092      	lsls	r2, r2, #2
 80051da:	6939      	ldr	r1, [r7, #16]
 80051dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	2203      	movs	r2, #3
 80051ea:	409a      	lsls	r2, r3
 80051ec:	0013      	movs	r3, r2
 80051ee:	43da      	mvns	r2, r3
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	4013      	ands	r3, r2
 80051f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	2203      	movs	r2, #3
 80051fc:	401a      	ands	r2, r3
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	409a      	lsls	r2, r3
 8005204:	0013      	movs	r3, r2
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	4313      	orrs	r3, r2
 800520a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u) {
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	23c0      	movs	r3, #192	; 0xc0
 8005218:	029b      	lsls	r3, r3, #10
 800521a:	4013      	ands	r3, r2
 800521c:	d100      	bne.n	8005220 <HAL_GPIO_Init+0x174>
 800521e:	e092      	b.n	8005346 <HAL_GPIO_Init+0x29a>
        temp = EXTI->EXTICR[position >> 2u];
 8005220:	4a50      	ldr	r2, [pc, #320]	; (8005364 <HAL_GPIO_Init+0x2b8>)
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	089b      	lsrs	r3, r3, #2
 8005226:	3318      	adds	r3, #24
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	589b      	ldr	r3, [r3, r2]
 800522c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2203      	movs	r2, #3
 8005232:	4013      	ands	r3, r2
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	220f      	movs	r2, #15
 8005238:	409a      	lsls	r2, r3
 800523a:	0013      	movs	r3, r2
 800523c:	43da      	mvns	r2, r3
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	4013      	ands	r3, r2
 8005242:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	23a0      	movs	r3, #160	; 0xa0
 8005248:	05db      	lsls	r3, r3, #23
 800524a:	429a      	cmp	r2, r3
 800524c:	d013      	beq.n	8005276 <HAL_GPIO_Init+0x1ca>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a45      	ldr	r2, [pc, #276]	; (8005368 <HAL_GPIO_Init+0x2bc>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d00d      	beq.n	8005272 <HAL_GPIO_Init+0x1c6>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a44      	ldr	r2, [pc, #272]	; (800536c <HAL_GPIO_Init+0x2c0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d007      	beq.n	800526e <HAL_GPIO_Init+0x1c2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a43      	ldr	r2, [pc, #268]	; (8005370 <HAL_GPIO_Init+0x2c4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d101      	bne.n	800526a <HAL_GPIO_Init+0x1be>
 8005266:	2303      	movs	r3, #3
 8005268:	e006      	b.n	8005278 <HAL_GPIO_Init+0x1cc>
 800526a:	2305      	movs	r3, #5
 800526c:	e004      	b.n	8005278 <HAL_GPIO_Init+0x1cc>
 800526e:	2302      	movs	r3, #2
 8005270:	e002      	b.n	8005278 <HAL_GPIO_Init+0x1cc>
 8005272:	2301      	movs	r3, #1
 8005274:	e000      	b.n	8005278 <HAL_GPIO_Init+0x1cc>
 8005276:	2300      	movs	r3, #0
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	2103      	movs	r1, #3
 800527c:	400a      	ands	r2, r1
 800527e:	00d2      	lsls	r2, r2, #3
 8005280:	4093      	lsls	r3, r2
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	4313      	orrs	r3, r2
 8005286:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005288:	4936      	ldr	r1, [pc, #216]	; (8005364 <HAL_GPIO_Init+0x2b8>)
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	089b      	lsrs	r3, r3, #2
 800528e:	3318      	adds	r3, #24
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005296:	4a33      	ldr	r2, [pc, #204]	; (8005364 <HAL_GPIO_Init+0x2b8>)
 8005298:	2380      	movs	r3, #128	; 0x80
 800529a:	58d3      	ldr	r3, [r2, r3]
 800529c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	43da      	mvns	r2, r3
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	4013      	ands	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u) {
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	2380      	movs	r3, #128	; 0x80
 80052ae:	025b      	lsls	r3, r3, #9
 80052b0:	4013      	ands	r3, r2
 80052b2:	d003      	beq.n	80052bc <HAL_GPIO_Init+0x210>
          temp |= iocurrent;
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80052bc:	4929      	ldr	r1, [pc, #164]	; (8005364 <HAL_GPIO_Init+0x2b8>)
 80052be:	2280      	movs	r2, #128	; 0x80
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80052c4:	4a27      	ldr	r2, [pc, #156]	; (8005364 <HAL_GPIO_Init+0x2b8>)
 80052c6:	2384      	movs	r3, #132	; 0x84
 80052c8:	58d3      	ldr	r3, [r2, r3]
 80052ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	43da      	mvns	r2, r3
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	4013      	ands	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u) {
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	2380      	movs	r3, #128	; 0x80
 80052dc:	029b      	lsls	r3, r3, #10
 80052de:	4013      	ands	r3, r2
 80052e0:	d003      	beq.n	80052ea <HAL_GPIO_Init+0x23e>
          temp |= iocurrent;
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80052ea:	491e      	ldr	r1, [pc, #120]	; (8005364 <HAL_GPIO_Init+0x2b8>)
 80052ec:	2284      	movs	r2, #132	; 0x84
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052f2:	4b1c      	ldr	r3, [pc, #112]	; (8005364 <HAL_GPIO_Init+0x2b8>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	43da      	mvns	r2, r3
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	4013      	ands	r3, r2
 8005300:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u) {
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	2380      	movs	r3, #128	; 0x80
 8005308:	035b      	lsls	r3, r3, #13
 800530a:	4013      	ands	r3, r2
 800530c:	d003      	beq.n	8005316 <HAL_GPIO_Init+0x26a>
          temp |= iocurrent;
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4313      	orrs	r3, r2
 8005314:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005316:	4b13      	ldr	r3, [pc, #76]	; (8005364 <HAL_GPIO_Init+0x2b8>)
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800531c:	4b11      	ldr	r3, [pc, #68]	; (8005364 <HAL_GPIO_Init+0x2b8>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	43da      	mvns	r2, r3
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	4013      	ands	r3, r2
 800532a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u) {
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	2380      	movs	r3, #128	; 0x80
 8005332:	039b      	lsls	r3, r3, #14
 8005334:	4013      	ands	r3, r2
 8005336:	d003      	beq.n	8005340 <HAL_GPIO_Init+0x294>
          temp |= iocurrent;
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	4313      	orrs	r3, r2
 800533e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005340:	4b08      	ldr	r3, [pc, #32]	; (8005364 <HAL_GPIO_Init+0x2b8>)
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	3301      	adds	r3, #1
 800534a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u) {
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	40da      	lsrs	r2, r3
 8005354:	1e13      	subs	r3, r2, #0
 8005356:	d000      	beq.n	800535a <HAL_GPIO_Init+0x2ae>
 8005358:	e6b0      	b.n	80050bc <HAL_GPIO_Init+0x10>
  }
}
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	46c0      	nop			; (mov r8, r8)
 800535e:	46bd      	mov	sp, r7
 8005360:	b006      	add	sp, #24
 8005362:	bd80      	pop	{r7, pc}
 8005364:	40021800 	.word	0x40021800
 8005368:	50000400 	.word	0x50000400
 800536c:	50000800 	.word	0x50000800
 8005370:	50000c00 	.word	0x50000c00

08005374 <HAL_GPIO_ReadPin>:
 * @param  GPIO_Pin specifies the port bit to read.
 *         This parameter can be any combination of GPIO_Pin_x where x can be
 * (0..15).
 * @retval The input port pin value.
 */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	000a      	movs	r2, r1
 800537e:	1cbb      	adds	r3, r7, #2
 8005380:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u) {
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	1cba      	adds	r2, r7, #2
 8005388:	8812      	ldrh	r2, [r2, #0]
 800538a:	4013      	ands	r3, r2
 800538c:	d004      	beq.n	8005398 <HAL_GPIO_ReadPin+0x24>
    bitstatus = GPIO_PIN_SET;
 800538e:	230f      	movs	r3, #15
 8005390:	18fb      	adds	r3, r7, r3
 8005392:	2201      	movs	r2, #1
 8005394:	701a      	strb	r2, [r3, #0]
 8005396:	e003      	b.n	80053a0 <HAL_GPIO_ReadPin+0x2c>
  } else {
    bitstatus = GPIO_PIN_RESET;
 8005398:	230f      	movs	r3, #15
 800539a:	18fb      	adds	r3, r7, r3
 800539c:	2200      	movs	r2, #0
 800539e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80053a0:	230f      	movs	r3, #15
 80053a2:	18fb      	adds	r3, r7, r3
 80053a4:	781b      	ldrb	r3, [r3, #0]
}
 80053a6:	0018      	movs	r0, r3
 80053a8:	46bd      	mov	sp, r7
 80053aa:	b004      	add	sp, #16
 80053ac:	bd80      	pop	{r7, pc}

080053ae <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
                       GPIO_PinState PinState) {
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b082      	sub	sp, #8
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	0008      	movs	r0, r1
 80053b8:	0011      	movs	r1, r2
 80053ba:	1cbb      	adds	r3, r7, #2
 80053bc:	1c02      	adds	r2, r0, #0
 80053be:	801a      	strh	r2, [r3, #0]
 80053c0:	1c7b      	adds	r3, r7, #1
 80053c2:	1c0a      	adds	r2, r1, #0
 80053c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET) {
 80053c6:	1c7b      	adds	r3, r7, #1
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d004      	beq.n	80053d8 <HAL_GPIO_WritePin+0x2a>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053ce:	1cbb      	adds	r3, r7, #2
 80053d0:	881a      	ldrh	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	619a      	str	r2, [r3, #24]
  } else {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053d6:	e003      	b.n	80053e0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053d8:	1cbb      	adds	r3, r7, #2
 80053da:	881a      	ldrh	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80053e0:	46c0      	nop			; (mov r8, r8)
 80053e2:	46bd      	mov	sp, r7
 80053e4:	b002      	add	sp, #8
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_GPIO_TogglePin>:
 * @param  GPIO_Pin specifies the pin to be toggled.
 *         This parameter can be any combination of GPIO_Pin_x where x can be
 * (0..15).
 * @retval None
 */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	000a      	movs	r2, r1
 80053f2:	1cbb      	adds	r3, r7, #2
 80053f4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053fc:	1cbb      	adds	r3, r7, #2
 80053fe:	881b      	ldrh	r3, [r3, #0]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	4013      	ands	r3, r2
 8005404:	041a      	lsls	r2, r3, #16
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	43db      	mvns	r3, r3
 800540a:	1cb9      	adds	r1, r7, #2
 800540c:	8809      	ldrh	r1, [r1, #0]
 800540e:	400b      	ands	r3, r1
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	619a      	str	r2, [r3, #24]
}
 8005416:	46c0      	nop			; (mov r8, r8)
 8005418:	46bd      	mov	sp, r7
 800541a:	b004      	add	sp, #16
 800541c:	bd80      	pop	{r7, pc}
	...

08005420 <HAL_GPIO_EXTI_IRQHandler>:
/**
 * @brief  Handle EXTI interrupt request.
 * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin) {
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	0002      	movs	r2, r0
 8005428:	1dbb      	adds	r3, r7, #6
 800542a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u) {
 800542c:	4b10      	ldr	r3, [pc, #64]	; (8005470 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	1dba      	adds	r2, r7, #6
 8005432:	8812      	ldrh	r2, [r2, #0]
 8005434:	4013      	ands	r3, r2
 8005436:	d008      	beq.n	800544a <HAL_GPIO_EXTI_IRQHandler+0x2a>
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8005438:	4b0d      	ldr	r3, [pc, #52]	; (8005470 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800543a:	1dba      	adds	r2, r7, #6
 800543c:	8812      	ldrh	r2, [r2, #0]
 800543e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8005440:	1dbb      	adds	r3, r7, #6
 8005442:	881b      	ldrh	r3, [r3, #0]
 8005444:	0018      	movs	r0, r3
 8005446:	f7fc fa6d 	bl	8001924 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u) {
 800544a:	4b09      	ldr	r3, [pc, #36]	; (8005470 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	1dba      	adds	r2, r7, #6
 8005450:	8812      	ldrh	r2, [r2, #0]
 8005452:	4013      	ands	r3, r2
 8005454:	d008      	beq.n	8005468 <HAL_GPIO_EXTI_IRQHandler+0x48>
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8005456:	4b06      	ldr	r3, [pc, #24]	; (8005470 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005458:	1dba      	adds	r2, r7, #6
 800545a:	8812      	ldrh	r2, [r2, #0]
 800545c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800545e:	1dbb      	adds	r3, r7, #6
 8005460:	881b      	ldrh	r3, [r3, #0]
 8005462:	0018      	movs	r0, r3
 8005464:	f000 f806 	bl	8005474 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8005468:	46c0      	nop			; (mov r8, r8)
 800546a:	46bd      	mov	sp, r7
 800546c:	b002      	add	sp, #8
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40021800 	.word	0x40021800

08005474 <HAL_GPIO_EXTI_Falling_Callback>:
/**
 * @brief  EXTI line detection callback.
 * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	0002      	movs	r2, r0
 800547c:	1dbb      	adds	r3, r7, #6
 800547e:	801a      	strh	r2, [r3, #0]

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user
     file
   */
}
 8005480:	46c0      	nop			; (mov r8, r8)
 8005482:	46bd      	mov	sp, r7
 8005484:	b002      	add	sp, #8
 8005486:	bd80      	pop	{r7, pc}

08005488 <HAL_PWREx_ControlVoltageScaling>:
 * @note  When moving from Range 2 to Range 1, the API waits for VOSF flag to be
 *        cleared before returning the status. If the flag is not cleared within
 *        6 microseconds, HAL_TIMEOUT status is reported.
 * @retval HAL Status
 */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling) {
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005490:	4b19      	ldr	r3, [pc, #100]	; (80054f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a19      	ldr	r2, [pc, #100]	; (80054fc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005496:	4013      	ands	r3, r2
 8005498:	0019      	movs	r1, r3
 800549a:	4b17      	ldr	r3, [pc, #92]	; (80054f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	430a      	orrs	r2, r1
 80054a0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches
   * new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1) {
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	2380      	movs	r3, #128	; 0x80
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d11f      	bne.n	80054ec <HAL_PWREx_ControlVoltageScaling+0x64>
    /* Set timeout value */
    wait_loop_index =
        ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80054ac:	4b14      	ldr	r3, [pc, #80]	; (8005500 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	0013      	movs	r3, r2
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	189b      	adds	r3, r3, r2
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	4912      	ldr	r1, [pc, #72]	; (8005504 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80054ba:	0018      	movs	r0, r3
 80054bc:	f7fa fe36 	bl	800012c <__udivsi3>
 80054c0:	0003      	movs	r3, r0
    wait_loop_index =
 80054c2:	3301      	adds	r3, #1
 80054c4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) {
 80054c6:	e008      	b.n	80054da <HAL_PWREx_ControlVoltageScaling+0x52>
      if (wait_loop_index != 0U) {
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_PWREx_ControlVoltageScaling+0x4e>
        wait_loop_index--;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	3b01      	subs	r3, #1
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	e001      	b.n	80054da <HAL_PWREx_ControlVoltageScaling+0x52>
      } else {
        return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e009      	b.n	80054ee <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) {
 80054da:	4b07      	ldr	r3, [pc, #28]	; (80054f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80054dc:	695a      	ldr	r2, [r3, #20]
 80054de:	2380      	movs	r3, #128	; 0x80
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	401a      	ands	r2, r3
 80054e4:	2380      	movs	r3, #128	; 0x80
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d0ed      	beq.n	80054c8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	0018      	movs	r0, r3
 80054f0:	46bd      	mov	sp, r7
 80054f2:	b004      	add	sp, #16
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	46c0      	nop			; (mov r8, r8)
 80054f8:	40007000 	.word	0x40007000
 80054fc:	fffff9ff 	.word	0xfffff9ff
 8005500:	20000000 	.word	0x20000000
 8005504:	000f4240 	.word	0x000f4240

08005508 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800550c:	4b03      	ldr	r3, [pc, #12]	; (800551c <LL_RCC_GetAPB1Prescaler+0x14>)
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	23e0      	movs	r3, #224	; 0xe0
 8005512:	01db      	lsls	r3, r3, #7
 8005514:	4013      	ands	r3, r2
}
 8005516:	0018      	movs	r0, r3
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	40021000 	.word	0x40021000

08005520 <HAL_RCC_OscConfig>:
 * @note   Transition LSE Bypass to LSE On and LSE On to LSE Bypass are not
 *         supported by this function. User should request a transition to LSE
 * Off first and then to LSE On or LSE Bypass.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct) {
 8005520:	b580      	push	{r7, lr}
 8005522:	b088      	sub	sp, #32
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL) {
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_RCC_OscConfig+0x12>
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e304      	b.n	8005b3c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) ==
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2201      	movs	r2, #1
 8005538:	4013      	ands	r3, r2
 800553a:	d100      	bne.n	800553e <HAL_RCC_OscConfig+0x1e>
 800553c:	e07c      	b.n	8005638 <HAL_RCC_OscConfig+0x118>
      RCC_OSCILLATORTYPE_HSE) {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800553e:	4bc3      	ldr	r3, [pc, #780]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	2238      	movs	r2, #56	; 0x38
 8005544:	4013      	ands	r3, r2
 8005546:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005548:	4bc0      	ldr	r3, [pc, #768]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	2203      	movs	r2, #3
 800554e:	4013      	ands	r3, r2
 8005550:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these
     * cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) &&
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	2b10      	cmp	r3, #16
 8005556:	d102      	bne.n	800555e <HAL_RCC_OscConfig+0x3e>
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	2b03      	cmp	r3, #3
 800555c:	d002      	beq.n	8005564 <HAL_RCC_OscConfig+0x44>
         (temp_pllckcfg == RCC_PLLSOURCE_HSE)) ||
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	2b08      	cmp	r3, #8
 8005562:	d10b      	bne.n	800557c <HAL_RCC_OscConfig+0x5c>
        (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)) {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) &&
 8005564:	4bb9      	ldr	r3, [pc, #740]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	2380      	movs	r3, #128	; 0x80
 800556a:	029b      	lsls	r3, r3, #10
 800556c:	4013      	ands	r3, r2
 800556e:	d062      	beq.n	8005636 <HAL_RCC_OscConfig+0x116>
          (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) &&
 8005574:	2b00      	cmp	r3, #0
 8005576:	d15e      	bne.n	8005636 <HAL_RCC_OscConfig+0x116>
        return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e2df      	b.n	8005b3c <HAL_RCC_OscConfig+0x61c>
      }
    } else {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	2380      	movs	r3, #128	; 0x80
 8005582:	025b      	lsls	r3, r3, #9
 8005584:	429a      	cmp	r2, r3
 8005586:	d107      	bne.n	8005598 <HAL_RCC_OscConfig+0x78>
 8005588:	4bb0      	ldr	r3, [pc, #704]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	4baf      	ldr	r3, [pc, #700]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 800558e:	2180      	movs	r1, #128	; 0x80
 8005590:	0249      	lsls	r1, r1, #9
 8005592:	430a      	orrs	r2, r1
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	e020      	b.n	80055da <HAL_RCC_OscConfig+0xba>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	23a0      	movs	r3, #160	; 0xa0
 800559e:	02db      	lsls	r3, r3, #11
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d10e      	bne.n	80055c2 <HAL_RCC_OscConfig+0xa2>
 80055a4:	4ba9      	ldr	r3, [pc, #676]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	4ba8      	ldr	r3, [pc, #672]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 80055aa:	2180      	movs	r1, #128	; 0x80
 80055ac:	02c9      	lsls	r1, r1, #11
 80055ae:	430a      	orrs	r2, r1
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	4ba6      	ldr	r3, [pc, #664]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	4ba5      	ldr	r3, [pc, #660]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 80055b8:	2180      	movs	r1, #128	; 0x80
 80055ba:	0249      	lsls	r1, r1, #9
 80055bc:	430a      	orrs	r2, r1
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	e00b      	b.n	80055da <HAL_RCC_OscConfig+0xba>
 80055c2:	4ba2      	ldr	r3, [pc, #648]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	4ba1      	ldr	r3, [pc, #644]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 80055c8:	49a1      	ldr	r1, [pc, #644]	; (8005850 <HAL_RCC_OscConfig+0x330>)
 80055ca:	400a      	ands	r2, r1
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	4b9f      	ldr	r3, [pc, #636]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	4b9e      	ldr	r3, [pc, #632]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 80055d4:	499f      	ldr	r1, [pc, #636]	; (8005854 <HAL_RCC_OscConfig+0x334>)
 80055d6:	400a      	ands	r2, r1
 80055d8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF) {
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d014      	beq.n	800560c <HAL_RCC_OscConfig+0xec>
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e2:	f7fe fed7 	bl	8004394 <HAL_GetTick>
 80055e6:	0003      	movs	r3, r0
 80055e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U) {
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0xde>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 80055ec:	f7fe fed2 	bl	8004394 <HAL_GetTick>
 80055f0:	0002      	movs	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b64      	cmp	r3, #100	; 0x64
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e29e      	b.n	8005b3c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U) {
 80055fe:	4b93      	ldr	r3, [pc, #588]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	2380      	movs	r3, #128	; 0x80
 8005604:	029b      	lsls	r3, r3, #10
 8005606:	4013      	ands	r3, r2
 8005608:	d0f0      	beq.n	80055ec <HAL_RCC_OscConfig+0xcc>
 800560a:	e015      	b.n	8005638 <HAL_RCC_OscConfig+0x118>
          }
        }
      } else {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800560c:	f7fe fec2 	bl	8004394 <HAL_GetTick>
 8005610:	0003      	movs	r3, r0
 8005612:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) {
 8005614:	e008      	b.n	8005628 <HAL_RCC_OscConfig+0x108>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8005616:	f7fe febd 	bl	8004394 <HAL_GetTick>
 800561a:	0002      	movs	r2, r0
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	2b64      	cmp	r3, #100	; 0x64
 8005622:	d901      	bls.n	8005628 <HAL_RCC_OscConfig+0x108>
            return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e289      	b.n	8005b3c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) {
 8005628:	4b88      	ldr	r3, [pc, #544]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	2380      	movs	r3, #128	; 0x80
 800562e:	029b      	lsls	r3, r3, #10
 8005630:	4013      	ands	r3, r2
 8005632:	d1f0      	bne.n	8005616 <HAL_RCC_OscConfig+0xf6>
 8005634:	e000      	b.n	8005638 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) &&
 8005636:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) ==
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2202      	movs	r2, #2
 800563e:	4013      	ands	r3, r2
 8005640:	d100      	bne.n	8005644 <HAL_RCC_OscConfig+0x124>
 8005642:	e099      	b.n	8005778 <HAL_RCC_OscConfig+0x258>
        IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is
     * selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005644:	4b81      	ldr	r3, [pc, #516]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	2238      	movs	r2, #56	; 0x38
 800564a:	4013      	ands	r3, r2
 800564c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800564e:	4b7f      	ldr	r3, [pc, #508]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	2203      	movs	r2, #3
 8005654:	4013      	ands	r3, r2
 8005656:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) &&
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	2b10      	cmp	r3, #16
 800565c:	d102      	bne.n	8005664 <HAL_RCC_OscConfig+0x144>
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2b02      	cmp	r3, #2
 8005662:	d002      	beq.n	800566a <HAL_RCC_OscConfig+0x14a>
         (temp_pllckcfg == RCC_PLLSOURCE_HSI)) ||
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d135      	bne.n	80056d6 <HAL_RCC_OscConfig+0x1b6>
        (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)) {
      /* When HSI is used as system clock or as PLL input clock it can not be
       * disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) &&
 800566a:	4b78      	ldr	r3, [pc, #480]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	2380      	movs	r3, #128	; 0x80
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	4013      	ands	r3, r2
 8005674:	d005      	beq.n	8005682 <HAL_RCC_OscConfig+0x162>
          (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)) {
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) &&
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_RCC_OscConfig+0x162>
        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e25c      	b.n	8005b3c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8005682:	4b72      	ldr	r3, [pc, #456]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	4a74      	ldr	r2, [pc, #464]	; (8005858 <HAL_RCC_OscConfig+0x338>)
 8005688:	4013      	ands	r3, r2
 800568a:	0019      	movs	r1, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	021a      	lsls	r2, r3, #8
 8005692:	4b6e      	ldr	r3, [pc, #440]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 8005694:	430a      	orrs	r2, r1
 8005696:	605a      	str	r2, [r3, #4]
            RCC_OscInitStruct->HSICalibrationValue);

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) {
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d112      	bne.n	80056c4 <HAL_RCC_OscConfig+0x1a4>
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800569e:	4b6b      	ldr	r3, [pc, #428]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a6e      	ldr	r2, [pc, #440]	; (800585c <HAL_RCC_OscConfig+0x33c>)
 80056a4:	4013      	ands	r3, r2
 80056a6:	0019      	movs	r1, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691a      	ldr	r2, [r3, #16]
 80056ac:	4b67      	ldr	r3, [pc, #412]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 80056ae:	430a      	orrs	r2, r1
 80056b0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock =
              (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >>
 80056b2:	4b66      	ldr	r3, [pc, #408]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	0adb      	lsrs	r3, r3, #11
 80056b8:	2207      	movs	r2, #7
 80056ba:	4013      	ands	r3, r2
 80056bc:	4a68      	ldr	r2, [pc, #416]	; (8005860 <HAL_RCC_OscConfig+0x340>)
 80056be:	40da      	lsrs	r2, r3
          SystemCoreClock =
 80056c0:	4b68      	ldr	r3, [pc, #416]	; (8005864 <HAL_RCC_OscConfig+0x344>)
 80056c2:	601a      	str	r2, [r3, #0]
                                    RCC_CR_HSIDIV_Pos)));
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK) {
 80056c4:	4b68      	ldr	r3, [pc, #416]	; (8005868 <HAL_RCC_OscConfig+0x348>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	0018      	movs	r0, r3
 80056ca:	f7fe fe07 	bl	80042dc <HAL_InitTick>
 80056ce:	1e03      	subs	r3, r0, #0
 80056d0:	d051      	beq.n	8005776 <HAL_RCC_OscConfig+0x256>
          return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e232      	b.n	8005b3c <HAL_RCC_OscConfig+0x61c>
        }
      }
    } else {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF) {
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d030      	beq.n	8005740 <HAL_RCC_OscConfig+0x220>
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80056de:	4b5b      	ldr	r3, [pc, #364]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a5e      	ldr	r2, [pc, #376]	; (800585c <HAL_RCC_OscConfig+0x33c>)
 80056e4:	4013      	ands	r3, r2
 80056e6:	0019      	movs	r1, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	691a      	ldr	r2, [r3, #16]
 80056ec:	4b57      	ldr	r3, [pc, #348]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 80056ee:	430a      	orrs	r2, r1
 80056f0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80056f2:	4b56      	ldr	r3, [pc, #344]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	4b55      	ldr	r3, [pc, #340]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 80056f8:	2180      	movs	r1, #128	; 0x80
 80056fa:	0049      	lsls	r1, r1, #1
 80056fc:	430a      	orrs	r2, r1
 80056fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005700:	f7fe fe48 	bl	8004394 <HAL_GetTick>
 8005704:	0003      	movs	r3, r0
 8005706:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U) {
 8005708:	e008      	b.n	800571c <HAL_RCC_OscConfig+0x1fc>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 800570a:	f7fe fe43 	bl	8004394 <HAL_GetTick>
 800570e:	0002      	movs	r2, r0
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	2b02      	cmp	r3, #2
 8005716:	d901      	bls.n	800571c <HAL_RCC_OscConfig+0x1fc>
            return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e20f      	b.n	8005b3c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U) {
 800571c:	4b4b      	ldr	r3, [pc, #300]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	2380      	movs	r3, #128	; 0x80
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	4013      	ands	r3, r2
 8005726:	d0f0      	beq.n	800570a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8005728:	4b48      	ldr	r3, [pc, #288]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	4a4a      	ldr	r2, [pc, #296]	; (8005858 <HAL_RCC_OscConfig+0x338>)
 800572e:	4013      	ands	r3, r2
 8005730:	0019      	movs	r1, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	021a      	lsls	r2, r3, #8
 8005738:	4b44      	ldr	r3, [pc, #272]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 800573a:	430a      	orrs	r2, r1
 800573c:	605a      	str	r2, [r3, #4]
 800573e:	e01b      	b.n	8005778 <HAL_RCC_OscConfig+0x258>
            RCC_OscInitStruct->HSICalibrationValue);
      } else {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005740:	4b42      	ldr	r3, [pc, #264]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	4b41      	ldr	r3, [pc, #260]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 8005746:	4949      	ldr	r1, [pc, #292]	; (800586c <HAL_RCC_OscConfig+0x34c>)
 8005748:	400a      	ands	r2, r1
 800574a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800574c:	f7fe fe22 	bl	8004394 <HAL_GetTick>
 8005750:	0003      	movs	r3, r0
 8005752:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) {
 8005754:	e008      	b.n	8005768 <HAL_RCC_OscConfig+0x248>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8005756:	f7fe fe1d 	bl	8004394 <HAL_GetTick>
 800575a:	0002      	movs	r2, r0
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x248>
            return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e1e9      	b.n	8005b3c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) {
 8005768:	4b38      	ldr	r3, [pc, #224]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	2380      	movs	r3, #128	; 0x80
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	4013      	ands	r3, r2
 8005772:	d1f0      	bne.n	8005756 <HAL_RCC_OscConfig+0x236>
 8005774:	e000      	b.n	8005778 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) &&
 8005776:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) ==
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2208      	movs	r2, #8
 800577e:	4013      	ands	r3, r2
 8005780:	d047      	beq.n	8005812 <HAL_RCC_OscConfig+0x2f2>
      RCC_OSCILLATORTYPE_LSI) {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI) {
 8005782:	4b32      	ldr	r3, [pc, #200]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	2238      	movs	r2, #56	; 0x38
 8005788:	4013      	ands	r3, r2
 800578a:	2b18      	cmp	r3, #24
 800578c:	d10a      	bne.n	80057a4 <HAL_RCC_OscConfig+0x284>
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) &&
 800578e:	4b2f      	ldr	r3, [pc, #188]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 8005790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005792:	2202      	movs	r2, #2
 8005794:	4013      	ands	r3, r2
 8005796:	d03c      	beq.n	8005812 <HAL_RCC_OscConfig+0x2f2>
          (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)) {
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	699b      	ldr	r3, [r3, #24]
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) &&
 800579c:	2b00      	cmp	r3, #0
 800579e:	d138      	bne.n	8005812 <HAL_RCC_OscConfig+0x2f2>
        return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e1cb      	b.n	8005b3c <HAL_RCC_OscConfig+0x61c>
      }
    } else {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF) {
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d019      	beq.n	80057e0 <HAL_RCC_OscConfig+0x2c0>
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80057ac:	4b27      	ldr	r3, [pc, #156]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 80057ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80057b0:	4b26      	ldr	r3, [pc, #152]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 80057b2:	2101      	movs	r1, #1
 80057b4:	430a      	orrs	r2, r1
 80057b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b8:	f7fe fdec 	bl	8004394 <HAL_GetTick>
 80057bc:	0003      	movs	r3, r0
 80057be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U) {
 80057c0:	e008      	b.n	80057d4 <HAL_RCC_OscConfig+0x2b4>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 80057c2:	f7fe fde7 	bl	8004394 <HAL_GetTick>
 80057c6:	0002      	movs	r2, r0
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d901      	bls.n	80057d4 <HAL_RCC_OscConfig+0x2b4>
            return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e1b3      	b.n	8005b3c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U) {
 80057d4:	4b1d      	ldr	r3, [pc, #116]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 80057d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057d8:	2202      	movs	r2, #2
 80057da:	4013      	ands	r3, r2
 80057dc:	d0f1      	beq.n	80057c2 <HAL_RCC_OscConfig+0x2a2>
 80057de:	e018      	b.n	8005812 <HAL_RCC_OscConfig+0x2f2>
          }
        }
      } else {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80057e0:	4b1a      	ldr	r3, [pc, #104]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 80057e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80057e4:	4b19      	ldr	r3, [pc, #100]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 80057e6:	2101      	movs	r1, #1
 80057e8:	438a      	bics	r2, r1
 80057ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ec:	f7fe fdd2 	bl	8004394 <HAL_GetTick>
 80057f0:	0003      	movs	r3, r0
 80057f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U) {
 80057f4:	e008      	b.n	8005808 <HAL_RCC_OscConfig+0x2e8>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 80057f6:	f7fe fdcd 	bl	8004394 <HAL_GetTick>
 80057fa:	0002      	movs	r2, r0
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d901      	bls.n	8005808 <HAL_RCC_OscConfig+0x2e8>
            return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e199      	b.n	8005b3c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U) {
 8005808:	4b10      	ldr	r3, [pc, #64]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 800580a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800580c:	2202      	movs	r2, #2
 800580e:	4013      	ands	r3, r2
 8005810:	d1f1      	bne.n	80057f6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) ==
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2204      	movs	r2, #4
 8005818:	4013      	ands	r3, r2
 800581a:	d100      	bne.n	800581e <HAL_RCC_OscConfig+0x2fe>
 800581c:	e0c6      	b.n	80059ac <HAL_RCC_OscConfig+0x48c>
      RCC_OSCILLATORTYPE_LSE) {
    FlagStatus pwrclkchanged = RESET;
 800581e:	231f      	movs	r3, #31
 8005820:	18fb      	adds	r3, r7, r3
 8005822:	2200      	movs	r2, #0
 8005824:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE) {
 8005826:	4b09      	ldr	r3, [pc, #36]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	2238      	movs	r2, #56	; 0x38
 800582c:	4013      	ands	r3, r2
 800582e:	2b20      	cmp	r3, #32
 8005830:	d11e      	bne.n	8005870 <HAL_RCC_OscConfig+0x350>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) &&
 8005832:	4b06      	ldr	r3, [pc, #24]	; (800584c <HAL_RCC_OscConfig+0x32c>)
 8005834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005836:	2202      	movs	r2, #2
 8005838:	4013      	ands	r3, r2
 800583a:	d100      	bne.n	800583e <HAL_RCC_OscConfig+0x31e>
 800583c:	e0b6      	b.n	80059ac <HAL_RCC_OscConfig+0x48c>
          (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)) {
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	689b      	ldr	r3, [r3, #8]
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) &&
 8005842:	2b00      	cmp	r3, #0
 8005844:	d000      	beq.n	8005848 <HAL_RCC_OscConfig+0x328>
 8005846:	e0b1      	b.n	80059ac <HAL_RCC_OscConfig+0x48c>
        return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e177      	b.n	8005b3c <HAL_RCC_OscConfig+0x61c>
 800584c:	40021000 	.word	0x40021000
 8005850:	fffeffff 	.word	0xfffeffff
 8005854:	fffbffff 	.word	0xfffbffff
 8005858:	ffff80ff 	.word	0xffff80ff
 800585c:	ffffc7ff 	.word	0xffffc7ff
 8005860:	00f42400 	.word	0x00f42400
 8005864:	20000000 	.word	0x20000000
 8005868:	20000004 	.word	0x20000004
 800586c:	fffffeff 	.word	0xfffffeff
      }
    } else {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U) {
 8005870:	4bb4      	ldr	r3, [pc, #720]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 8005872:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005874:	2380      	movs	r3, #128	; 0x80
 8005876:	055b      	lsls	r3, r3, #21
 8005878:	4013      	ands	r3, r2
 800587a:	d101      	bne.n	8005880 <HAL_RCC_OscConfig+0x360>
 800587c:	2301      	movs	r3, #1
 800587e:	e000      	b.n	8005882 <HAL_RCC_OscConfig+0x362>
 8005880:	2300      	movs	r3, #0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d011      	beq.n	80058aa <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_PWR_CLK_ENABLE();
 8005886:	4baf      	ldr	r3, [pc, #700]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 8005888:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800588a:	4bae      	ldr	r3, [pc, #696]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 800588c:	2180      	movs	r1, #128	; 0x80
 800588e:	0549      	lsls	r1, r1, #21
 8005890:	430a      	orrs	r2, r1
 8005892:	63da      	str	r2, [r3, #60]	; 0x3c
 8005894:	4bab      	ldr	r3, [pc, #684]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 8005896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005898:	2380      	movs	r3, #128	; 0x80
 800589a:	055b      	lsls	r3, r3, #21
 800589c:	4013      	ands	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80058a2:	231f      	movs	r3, #31
 80058a4:	18fb      	adds	r3, r7, r3
 80058a6:	2201      	movs	r2, #1
 80058a8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 80058aa:	4ba7      	ldr	r3, [pc, #668]	; (8005b48 <HAL_RCC_OscConfig+0x628>)
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	2380      	movs	r3, #128	; 0x80
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	4013      	ands	r3, r2
 80058b4:	d11a      	bne.n	80058ec <HAL_RCC_OscConfig+0x3cc>
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058b6:	4ba4      	ldr	r3, [pc, #656]	; (8005b48 <HAL_RCC_OscConfig+0x628>)
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	4ba3      	ldr	r3, [pc, #652]	; (8005b48 <HAL_RCC_OscConfig+0x628>)
 80058bc:	2180      	movs	r1, #128	; 0x80
 80058be:	0049      	lsls	r1, r1, #1
 80058c0:	430a      	orrs	r2, r1
 80058c2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80058c4:	f7fe fd66 	bl	8004394 <HAL_GetTick>
 80058c8:	0003      	movs	r3, r0
 80058ca:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 80058cc:	e008      	b.n	80058e0 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 80058ce:	f7fe fd61 	bl	8004394 <HAL_GetTick>
 80058d2:	0002      	movs	r2, r0
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d901      	bls.n	80058e0 <HAL_RCC_OscConfig+0x3c0>
            return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e12d      	b.n	8005b3c <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 80058e0:	4b99      	ldr	r3, [pc, #612]	; (8005b48 <HAL_RCC_OscConfig+0x628>)
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	2380      	movs	r3, #128	; 0x80
 80058e6:	005b      	lsls	r3, r3, #1
 80058e8:	4013      	ands	r3, r2
 80058ea:	d0f0      	beq.n	80058ce <HAL_RCC_OscConfig+0x3ae>
        }
      }

      /* Set the new LSE configuration
       * -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d106      	bne.n	8005902 <HAL_RCC_OscConfig+0x3e2>
 80058f4:	4b93      	ldr	r3, [pc, #588]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 80058f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058f8:	4b92      	ldr	r3, [pc, #584]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 80058fa:	2101      	movs	r1, #1
 80058fc:	430a      	orrs	r2, r1
 80058fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8005900:	e01c      	b.n	800593c <HAL_RCC_OscConfig+0x41c>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	2b05      	cmp	r3, #5
 8005908:	d10c      	bne.n	8005924 <HAL_RCC_OscConfig+0x404>
 800590a:	4b8e      	ldr	r3, [pc, #568]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 800590c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800590e:	4b8d      	ldr	r3, [pc, #564]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 8005910:	2104      	movs	r1, #4
 8005912:	430a      	orrs	r2, r1
 8005914:	65da      	str	r2, [r3, #92]	; 0x5c
 8005916:	4b8b      	ldr	r3, [pc, #556]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 8005918:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800591a:	4b8a      	ldr	r3, [pc, #552]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 800591c:	2101      	movs	r1, #1
 800591e:	430a      	orrs	r2, r1
 8005920:	65da      	str	r2, [r3, #92]	; 0x5c
 8005922:	e00b      	b.n	800593c <HAL_RCC_OscConfig+0x41c>
 8005924:	4b87      	ldr	r3, [pc, #540]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 8005926:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005928:	4b86      	ldr	r3, [pc, #536]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 800592a:	2101      	movs	r1, #1
 800592c:	438a      	bics	r2, r1
 800592e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005930:	4b84      	ldr	r3, [pc, #528]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 8005932:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005934:	4b83      	ldr	r3, [pc, #524]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 8005936:	2104      	movs	r1, #4
 8005938:	438a      	bics	r2, r1
 800593a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF) {
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d014      	beq.n	800596e <HAL_RCC_OscConfig+0x44e>
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005944:	f7fe fd26 	bl	8004394 <HAL_GetTick>
 8005948:	0003      	movs	r3, r0
 800594a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 800594c:	e009      	b.n	8005962 <HAL_RCC_OscConfig+0x442>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 800594e:	f7fe fd21 	bl	8004394 <HAL_GetTick>
 8005952:	0002      	movs	r2, r0
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	4a7c      	ldr	r2, [pc, #496]	; (8005b4c <HAL_RCC_OscConfig+0x62c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_OscConfig+0x442>
            return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e0ec      	b.n	8005b3c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 8005962:	4b78      	ldr	r3, [pc, #480]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 8005964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005966:	2202      	movs	r2, #2
 8005968:	4013      	ands	r3, r2
 800596a:	d0f0      	beq.n	800594e <HAL_RCC_OscConfig+0x42e>
 800596c:	e013      	b.n	8005996 <HAL_RCC_OscConfig+0x476>
          }
        }
      } else {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800596e:	f7fe fd11 	bl	8004394 <HAL_GetTick>
 8005972:	0003      	movs	r3, r0
 8005974:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U) {
 8005976:	e009      	b.n	800598c <HAL_RCC_OscConfig+0x46c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8005978:	f7fe fd0c 	bl	8004394 <HAL_GetTick>
 800597c:	0002      	movs	r2, r0
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	4a72      	ldr	r2, [pc, #456]	; (8005b4c <HAL_RCC_OscConfig+0x62c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x46c>
            return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e0d7      	b.n	8005b3c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U) {
 800598c:	4b6d      	ldr	r3, [pc, #436]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 800598e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005990:	2202      	movs	r2, #2
 8005992:	4013      	ands	r3, r2
 8005994:	d1f0      	bne.n	8005978 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET) {
 8005996:	231f      	movs	r3, #31
 8005998:	18fb      	adds	r3, r7, r3
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d105      	bne.n	80059ac <HAL_RCC_OscConfig+0x48c>
        __HAL_RCC_PWR_CLK_DISABLE();
 80059a0:	4b68      	ldr	r3, [pc, #416]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 80059a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059a4:	4b67      	ldr	r3, [pc, #412]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 80059a6:	496a      	ldr	r1, [pc, #424]	; (8005b50 <HAL_RCC_OscConfig+0x630>)
 80059a8:	400a      	ands	r2, r1
 80059aa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE) {
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d100      	bne.n	80059b6 <HAL_RCC_OscConfig+0x496>
 80059b4:	e0c1      	b.n	8005b3a <HAL_RCC_OscConfig+0x61a>
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
 80059b6:	4b63      	ldr	r3, [pc, #396]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	2238      	movs	r2, #56	; 0x38
 80059bc:	4013      	ands	r3, r2
 80059be:	2b10      	cmp	r3, #16
 80059c0:	d100      	bne.n	80059c4 <HAL_RCC_OscConfig+0x4a4>
 80059c2:	e081      	b.n	8005ac8 <HAL_RCC_OscConfig+0x5a8>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON) {
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	69db      	ldr	r3, [r3, #28]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d156      	bne.n	8005a7a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059cc:	4b5d      	ldr	r3, [pc, #372]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	4b5c      	ldr	r3, [pc, #368]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 80059d2:	4960      	ldr	r1, [pc, #384]	; (8005b54 <HAL_RCC_OscConfig+0x634>)
 80059d4:	400a      	ands	r2, r1
 80059d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d8:	f7fe fcdc 	bl	8004394 <HAL_GetTick>
 80059dc:	0003      	movs	r3, r0
 80059de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U) {
 80059e0:	e008      	b.n	80059f4 <HAL_RCC_OscConfig+0x4d4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80059e2:	f7fe fcd7 	bl	8004394 <HAL_GetTick>
 80059e6:	0002      	movs	r2, r0
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d901      	bls.n	80059f4 <HAL_RCC_OscConfig+0x4d4>
            return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e0a3      	b.n	8005b3c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U) {
 80059f4:	4b53      	ldr	r3, [pc, #332]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	2380      	movs	r3, #128	; 0x80
 80059fa:	049b      	lsls	r3, r3, #18
 80059fc:	4013      	ands	r3, r2
 80059fe:	d1f0      	bne.n	80059e2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division
         * factors. */
        __HAL_RCC_PLL_CONFIG(
 8005a00:	4b50      	ldr	r3, [pc, #320]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	4a54      	ldr	r2, [pc, #336]	; (8005b58 <HAL_RCC_OscConfig+0x638>)
 8005a06:	4013      	ands	r3, r2
 8005a08:	0019      	movs	r1, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1a      	ldr	r2, [r3, #32]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a18:	021b      	lsls	r3, r3, #8
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	431a      	orrs	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	4b45      	ldr	r3, [pc, #276]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 8005a30:	430a      	orrs	r2, r1
 8005a32:	60da      	str	r2, [r3, #12]
            RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
            RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a34:	4b43      	ldr	r3, [pc, #268]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	4b42      	ldr	r3, [pc, #264]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 8005a3a:	2180      	movs	r1, #128	; 0x80
 8005a3c:	0449      	lsls	r1, r1, #17
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005a42:	4b40      	ldr	r3, [pc, #256]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	4b3f      	ldr	r3, [pc, #252]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 8005a48:	2180      	movs	r1, #128	; 0x80
 8005a4a:	0549      	lsls	r1, r1, #21
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a50:	f7fe fca0 	bl	8004394 <HAL_GetTick>
 8005a54:	0003      	movs	r3, r0
 8005a56:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 8005a58:	e008      	b.n	8005a6c <HAL_RCC_OscConfig+0x54c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8005a5a:	f7fe fc9b 	bl	8004394 <HAL_GetTick>
 8005a5e:	0002      	movs	r2, r0
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d901      	bls.n	8005a6c <HAL_RCC_OscConfig+0x54c>
            return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e067      	b.n	8005b3c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 8005a6c:	4b35      	ldr	r3, [pc, #212]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	2380      	movs	r3, #128	; 0x80
 8005a72:	049b      	lsls	r3, r3, #18
 8005a74:	4013      	ands	r3, r2
 8005a76:	d0f0      	beq.n	8005a5a <HAL_RCC_OscConfig+0x53a>
 8005a78:	e05f      	b.n	8005b3a <HAL_RCC_OscConfig+0x61a>
          }
        }
      } else {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a7a:	4b32      	ldr	r3, [pc, #200]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	4b31      	ldr	r3, [pc, #196]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 8005a80:	4934      	ldr	r1, [pc, #208]	; (8005b54 <HAL_RCC_OscConfig+0x634>)
 8005a82:	400a      	ands	r2, r1
 8005a84:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005a86:	4b2f      	ldr	r3, [pc, #188]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 8005a88:	68da      	ldr	r2, [r3, #12]
 8005a8a:	4b2e      	ldr	r3, [pc, #184]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 8005a8c:	2103      	movs	r1, #3
 8005a8e:	438a      	bics	r2, r1
 8005a90:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN |
 8005a92:	4b2c      	ldr	r3, [pc, #176]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	4b2b      	ldr	r3, [pc, #172]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 8005a98:	4930      	ldr	r1, [pc, #192]	; (8005b5c <HAL_RCC_OscConfig+0x63c>)
 8005a9a:	400a      	ands	r2, r1
 8005a9c:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a9e:	f7fe fc79 	bl	8004394 <HAL_GetTick>
 8005aa2:	0003      	movs	r3, r0
 8005aa4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U) {
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0x59a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8005aa8:	f7fe fc74 	bl	8004394 <HAL_GetTick>
 8005aac:	0002      	movs	r2, r0
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x59a>
            return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e040      	b.n	8005b3c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U) {
 8005aba:	4b22      	ldr	r3, [pc, #136]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	2380      	movs	r3, #128	; 0x80
 8005ac0:	049b      	lsls	r3, r3, #18
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	d1f0      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x588>
 8005ac6:	e038      	b.n	8005b3a <HAL_RCC_OscConfig+0x61a>
        }
      }
    } else {
      /* Check if there is a request to disable the PLL used as System clock
       * source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) {
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d101      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x5b4>
        return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e033      	b.n	8005b3c <HAL_RCC_OscConfig+0x61c>
      } else {
        /* Do not return HAL_ERROR if request repeats the current configuration
         */
        temp_pllckcfg = RCC->PLLCFGR;
 8005ad4:	4b1b      	ldr	r3, [pc, #108]	; (8005b44 <HAL_RCC_OscConfig+0x624>)
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) !=
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2203      	movs	r2, #3
 8005ade:	401a      	ands	r2, r3
             RCC_OscInitStruct->PLL.PLLSource) ||
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) !=
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d126      	bne.n	8005b36 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) !=
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	2270      	movs	r2, #112	; 0x70
 8005aec:	401a      	ands	r2, r3
             RCC_OscInitStruct->PLL.PLLM) ||
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             RCC_OscInitStruct->PLL.PLLSource) ||
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d11f      	bne.n	8005b36 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) !=
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	23fe      	movs	r3, #254	; 0xfe
 8005afa:	01db      	lsls	r3, r3, #7
 8005afc:	401a      	ands	r2, r3
             (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b02:	021b      	lsls	r3, r3, #8
             RCC_OscInitStruct->PLL.PLLM) ||
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d116      	bne.n	8005b36 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) !=
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	23f8      	movs	r3, #248	; 0xf8
 8005b0c:	039b      	lsls	r3, r3, #14
 8005b0e:	401a      	ands	r2, r3
             RCC_OscInitStruct->PLL.PLLP) ||
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
             (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d10e      	bne.n	8005b36 <HAL_RCC_OscConfig+0x616>
#if defined(RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) !=
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	23e0      	movs	r3, #224	; 0xe0
 8005b1c:	051b      	lsls	r3, r3, #20
 8005b1e:	401a      	ands	r2, r3
             RCC_OscInitStruct->PLL.PLLQ) ||
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
             RCC_OscInitStruct->PLL.PLLP) ||
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d106      	bne.n	8005b36 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) !=
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	0f5b      	lsrs	r3, r3, #29
 8005b2c:	075a      	lsls	r2, r3, #29
             RCC_OscInitStruct->PLL.PLLR)) {
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
             RCC_OscInitStruct->PLL.PLLQ) ||
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d001      	beq.n	8005b3a <HAL_RCC_OscConfig+0x61a>
          return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e000      	b.n	8005b3c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	0018      	movs	r0, r3
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	b008      	add	sp, #32
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	40021000 	.word	0x40021000
 8005b48:	40007000 	.word	0x40007000
 8005b4c:	00001388 	.word	0x00001388
 8005b50:	efffffff 	.word	0xefffffff
 8005b54:	feffffff 	.word	0xfeffffff
 8005b58:	11c1808c 	.word	0x11c1808c
 8005b5c:	eefeffff 	.word	0xeefeffff

08005b60 <HAL_RCC_ClockConfig>:
 * frequency (for more details refer to section above
 * "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
                                      uint32_t FLatency) {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL) {
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <HAL_RCC_ClockConfig+0x14>
    return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e0e9      	b.n	8005d48 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states
    (LATENCY) must be correctly programmed according to the frequency of the
    FLASH clock (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 8005b74:	4b76      	ldr	r3, [pc, #472]	; (8005d50 <HAL_RCC_ClockConfig+0x1f0>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2207      	movs	r2, #7
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d91e      	bls.n	8005bc0 <HAL_RCC_ClockConfig+0x60>
    /* Program the new number of wait states to the LATENCY bits in the
     * FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b82:	4b73      	ldr	r3, [pc, #460]	; (8005d50 <HAL_RCC_ClockConfig+0x1f0>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2207      	movs	r2, #7
 8005b88:	4393      	bics	r3, r2
 8005b8a:	0019      	movs	r1, r3
 8005b8c:	4b70      	ldr	r3, [pc, #448]	; (8005d50 <HAL_RCC_ClockConfig+0x1f0>)
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access
    the Flash memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b94:	f7fe fbfe 	bl	8004394 <HAL_GetTick>
 8005b98:	0003      	movs	r3, r0
 8005b9a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency) {
 8005b9c:	e009      	b.n	8005bb2 <HAL_RCC_ClockConfig+0x52>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8005b9e:	f7fe fbf9 	bl	8004394 <HAL_GetTick>
 8005ba2:	0002      	movs	r2, r0
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	4a6a      	ldr	r2, [pc, #424]	; (8005d54 <HAL_RCC_ClockConfig+0x1f4>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d901      	bls.n	8005bb2 <HAL_RCC_ClockConfig+0x52>
        return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e0ca      	b.n	8005d48 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency) {
 8005bb2:	4b67      	ldr	r3, [pc, #412]	; (8005d50 <HAL_RCC_ClockConfig+0x1f0>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2207      	movs	r2, #7
 8005bb8:	4013      	ands	r3, r2
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d1ee      	bne.n	8005b9e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) ==
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2202      	movs	r2, #2
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	d015      	beq.n	8005bf6 <HAL_RCC_ClockConfig+0x96>
      RCC_CLOCKTYPE_HCLK) {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) ==
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2204      	movs	r2, #4
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	d006      	beq.n	8005be2 <HAL_RCC_ClockConfig+0x82>
        RCC_CLOCKTYPE_PCLK1) {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005bd4:	4b60      	ldr	r3, [pc, #384]	; (8005d58 <HAL_RCC_ClockConfig+0x1f8>)
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	4b5f      	ldr	r3, [pc, #380]	; (8005d58 <HAL_RCC_ClockConfig+0x1f8>)
 8005bda:	21e0      	movs	r1, #224	; 0xe0
 8005bdc:	01c9      	lsls	r1, r1, #7
 8005bde:	430a      	orrs	r2, r1
 8005be0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005be2:	4b5d      	ldr	r3, [pc, #372]	; (8005d58 <HAL_RCC_ClockConfig+0x1f8>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	4a5d      	ldr	r2, [pc, #372]	; (8005d5c <HAL_RCC_ClockConfig+0x1fc>)
 8005be8:	4013      	ands	r3, r2
 8005bea:	0019      	movs	r1, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	4b59      	ldr	r3, [pc, #356]	; (8005d58 <HAL_RCC_ClockConfig+0x1f8>)
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) ==
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	d057      	beq.n	8005cb0 <HAL_RCC_ClockConfig+0x150>
      RCC_CLOCKTYPE_SYSCLK) {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d107      	bne.n	8005c18 <HAL_RCC_ClockConfig+0xb8>
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U) {
 8005c08:	4b53      	ldr	r3, [pc, #332]	; (8005d58 <HAL_RCC_ClockConfig+0x1f8>)
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	2380      	movs	r3, #128	; 0x80
 8005c0e:	029b      	lsls	r3, r3, #10
 8005c10:	4013      	ands	r3, r2
 8005c12:	d12b      	bne.n	8005c6c <HAL_RCC_ClockConfig+0x10c>
        return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e097      	b.n	8005d48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d107      	bne.n	8005c30 <HAL_RCC_ClockConfig+0xd0>
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 8005c20:	4b4d      	ldr	r3, [pc, #308]	; (8005d58 <HAL_RCC_ClockConfig+0x1f8>)
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	2380      	movs	r3, #128	; 0x80
 8005c26:	049b      	lsls	r3, r3, #18
 8005c28:	4013      	ands	r3, r2
 8005c2a:	d11f      	bne.n	8005c6c <HAL_RCC_ClockConfig+0x10c>
        return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e08b      	b.n	8005d48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI) {
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d107      	bne.n	8005c48 <HAL_RCC_ClockConfig+0xe8>
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U) {
 8005c38:	4b47      	ldr	r3, [pc, #284]	; (8005d58 <HAL_RCC_ClockConfig+0x1f8>)
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	2380      	movs	r3, #128	; 0x80
 8005c3e:	00db      	lsls	r3, r3, #3
 8005c40:	4013      	ands	r3, r2
 8005c42:	d113      	bne.n	8005c6c <HAL_RCC_ClockConfig+0x10c>
        return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e07f      	b.n	8005d48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI) {
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b03      	cmp	r3, #3
 8005c4e:	d106      	bne.n	8005c5e <HAL_RCC_ClockConfig+0xfe>
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U) {
 8005c50:	4b41      	ldr	r3, [pc, #260]	; (8005d58 <HAL_RCC_ClockConfig+0x1f8>)
 8005c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c54:	2202      	movs	r2, #2
 8005c56:	4013      	ands	r3, r2
 8005c58:	d108      	bne.n	8005c6c <HAL_RCC_ClockConfig+0x10c>
        return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e074      	b.n	8005d48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSE is selected as System Clock Source */
    else {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 8005c5e:	4b3e      	ldr	r3, [pc, #248]	; (8005d58 <HAL_RCC_ClockConfig+0x1f8>)
 8005c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c62:	2202      	movs	r2, #2
 8005c64:	4013      	ands	r3, r2
 8005c66:	d101      	bne.n	8005c6c <HAL_RCC_ClockConfig+0x10c>
        return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e06d      	b.n	8005d48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c6c:	4b3a      	ldr	r3, [pc, #232]	; (8005d58 <HAL_RCC_ClockConfig+0x1f8>)
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	2207      	movs	r2, #7
 8005c72:	4393      	bics	r3, r2
 8005c74:	0019      	movs	r1, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	4b37      	ldr	r3, [pc, #220]	; (8005d58 <HAL_RCC_ClockConfig+0x1f8>)
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c80:	f7fe fb88 	bl	8004394 <HAL_GetTick>
 8005c84:	0003      	movs	r3, r0
 8005c86:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() !=
 8005c88:	e009      	b.n	8005c9e <HAL_RCC_ClockConfig+0x13e>
           (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8005c8a:	f7fe fb83 	bl	8004394 <HAL_GetTick>
 8005c8e:	0002      	movs	r2, r0
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	4a2f      	ldr	r2, [pc, #188]	; (8005d54 <HAL_RCC_ClockConfig+0x1f4>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_ClockConfig+0x13e>
        return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e054      	b.n	8005d48 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() !=
 8005c9e:	4b2e      	ldr	r3, [pc, #184]	; (8005d58 <HAL_RCC_ClockConfig+0x1f8>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	2238      	movs	r2, #56	; 0x38
 8005ca4:	401a      	ands	r2, r3
           (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	00db      	lsls	r3, r3, #3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() !=
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d1ec      	bne.n	8005c8a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 8005cb0:	4b27      	ldr	r3, [pc, #156]	; (8005d50 <HAL_RCC_ClockConfig+0x1f0>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2207      	movs	r2, #7
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d21e      	bcs.n	8005cfc <HAL_RCC_ClockConfig+0x19c>
    /* Program the new number of wait states to the LATENCY bits in the
     * FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cbe:	4b24      	ldr	r3, [pc, #144]	; (8005d50 <HAL_RCC_ClockConfig+0x1f0>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2207      	movs	r2, #7
 8005cc4:	4393      	bics	r3, r2
 8005cc6:	0019      	movs	r1, r3
 8005cc8:	4b21      	ldr	r3, [pc, #132]	; (8005d50 <HAL_RCC_ClockConfig+0x1f0>)
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access
    the Flash memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005cd0:	f7fe fb60 	bl	8004394 <HAL_GetTick>
 8005cd4:	0003      	movs	r3, r0
 8005cd6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency) {
 8005cd8:	e009      	b.n	8005cee <HAL_RCC_ClockConfig+0x18e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8005cda:	f7fe fb5b 	bl	8004394 <HAL_GetTick>
 8005cde:	0002      	movs	r2, r0
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	4a1b      	ldr	r2, [pc, #108]	; (8005d54 <HAL_RCC_ClockConfig+0x1f4>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_ClockConfig+0x18e>
        return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e02c      	b.n	8005d48 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency) {
 8005cee:	4b18      	ldr	r3, [pc, #96]	; (8005d50 <HAL_RCC_ClockConfig+0x1f0>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2207      	movs	r2, #7
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d1ee      	bne.n	8005cda <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) ==
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2204      	movs	r2, #4
 8005d02:	4013      	ands	r3, r2
 8005d04:	d009      	beq.n	8005d1a <HAL_RCC_ClockConfig+0x1ba>
      RCC_CLOCKTYPE_PCLK1) {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005d06:	4b14      	ldr	r3, [pc, #80]	; (8005d58 <HAL_RCC_ClockConfig+0x1f8>)
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	4a15      	ldr	r2, [pc, #84]	; (8005d60 <HAL_RCC_ClockConfig+0x200>)
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	0019      	movs	r1, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68da      	ldr	r2, [r3, #12]
 8005d14:	4b10      	ldr	r3, [pc, #64]	; (8005d58 <HAL_RCC_ClockConfig+0x1f8>)
 8005d16:	430a      	orrs	r2, r1
 8005d18:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock =
      (HAL_RCC_GetSysClockFreq() >>
 8005d1a:	f000 f829 	bl	8005d70 <HAL_RCC_GetSysClockFreq>
 8005d1e:	0001      	movs	r1, r0
       ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) &
 8005d20:	4b0d      	ldr	r3, [pc, #52]	; (8005d58 <HAL_RCC_ClockConfig+0x1f8>)
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	0a1b      	lsrs	r3, r3, #8
 8005d26:	220f      	movs	r2, #15
 8005d28:	401a      	ands	r2, r3
 8005d2a:	4b0e      	ldr	r3, [pc, #56]	; (8005d64 <HAL_RCC_ClockConfig+0x204>)
 8005d2c:	0092      	lsls	r2, r2, #2
 8005d2e:	58d3      	ldr	r3, [r2, r3]
 8005d30:	221f      	movs	r2, #31
 8005d32:	4013      	ands	r3, r2
      (HAL_RCC_GetSysClockFreq() >>
 8005d34:	000a      	movs	r2, r1
 8005d36:	40da      	lsrs	r2, r3
  SystemCoreClock =
 8005d38:	4b0b      	ldr	r3, [pc, #44]	; (8005d68 <HAL_RCC_ClockConfig+0x208>)
 8005d3a:	601a      	str	r2, [r3, #0]
        0x1FU));

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005d3c:	4b0b      	ldr	r3, [pc, #44]	; (8005d6c <HAL_RCC_ClockConfig+0x20c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	0018      	movs	r0, r3
 8005d42:	f7fe facb 	bl	80042dc <HAL_InitTick>
 8005d46:	0003      	movs	r3, r0
}
 8005d48:	0018      	movs	r0, r3
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	b004      	add	sp, #16
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	40022000 	.word	0x40022000
 8005d54:	00001388 	.word	0x00001388
 8005d58:	40021000 	.word	0x40021000
 8005d5c:	fffff0ff 	.word	0xfffff0ff
 8005d60:	ffff8fff 	.word	0xffff8fff
 8005d64:	0800ab44 	.word	0x0800ab44
 8005d68:	20000000 	.word	0x20000000
 8005d6c:	20000004 	.word	0x20000004

08005d70 <HAL_RCC_GetSysClockFreq>:
 * function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
uint32_t HAL_RCC_GetSysClockFreq(void) {
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) {
 8005d76:	4b3c      	ldr	r3, [pc, #240]	; (8005e68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	2238      	movs	r2, #56	; 0x38
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	d10f      	bne.n	8005da0 <HAL_RCC_GetSysClockFreq+0x30>
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005d80:	4b39      	ldr	r3, [pc, #228]	; (8005e68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	0adb      	lsrs	r3, r3, #11
 8005d86:	2207      	movs	r2, #7
 8005d88:	4013      	ands	r3, r2
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	409a      	lsls	r2, r3
 8005d8e:	0013      	movs	r3, r2
 8005d90:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005d92:	6839      	ldr	r1, [r7, #0]
 8005d94:	4835      	ldr	r0, [pc, #212]	; (8005e6c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005d96:	f7fa f9c9 	bl	800012c <__udivsi3>
 8005d9a:	0003      	movs	r3, r0
 8005d9c:	613b      	str	r3, [r7, #16]
 8005d9e:	e05d      	b.n	8005e5c <HAL_RCC_GetSysClockFreq+0xec>
  } else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) {
 8005da0:	4b31      	ldr	r3, [pc, #196]	; (8005e68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	2238      	movs	r2, #56	; 0x38
 8005da6:	4013      	ands	r3, r2
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d102      	bne.n	8005db2 <HAL_RCC_GetSysClockFreq+0x42>
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005dac:	4b30      	ldr	r3, [pc, #192]	; (8005e70 <HAL_RCC_GetSysClockFreq+0x100>)
 8005dae:	613b      	str	r3, [r7, #16]
 8005db0:	e054      	b.n	8005e5c <HAL_RCC_GetSysClockFreq+0xec>
  } else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
 8005db2:	4b2d      	ldr	r3, [pc, #180]	; (8005e68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	2238      	movs	r2, #56	; 0x38
 8005db8:	4013      	ands	r3, r2
 8005dba:	2b10      	cmp	r3, #16
 8005dbc:	d138      	bne.n	8005e30 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005dbe:	4b2a      	ldr	r3, [pc, #168]	; (8005e68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	2203      	movs	r2, #3
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8005dc8:	4b27      	ldr	r3, [pc, #156]	; (8005e68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	091b      	lsrs	r3, r3, #4
 8005dce:	2207      	movs	r2, #7
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	60bb      	str	r3, [r7, #8]

    switch (pllsource) {
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2b03      	cmp	r3, #3
 8005dda:	d10d      	bne.n	8005df8 <HAL_RCC_GetSysClockFreq+0x88>
    case RCC_PLLSOURCE_HSE: /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) *
 8005ddc:	68b9      	ldr	r1, [r7, #8]
 8005dde:	4824      	ldr	r0, [pc, #144]	; (8005e70 <HAL_RCC_GetSysClockFreq+0x100>)
 8005de0:	f7fa f9a4 	bl	800012c <__udivsi3>
 8005de4:	0003      	movs	r3, r0
 8005de6:	0019      	movs	r1, r3
               ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005de8:	4b1f      	ldr	r3, [pc, #124]	; (8005e68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	0a1b      	lsrs	r3, r3, #8
 8005dee:	227f      	movs	r2, #127	; 0x7f
 8005df0:	4013      	ands	r3, r2
      pllvco = (HSE_VALUE / pllm) *
 8005df2:	434b      	muls	r3, r1
 8005df4:	617b      	str	r3, [r7, #20]
      break;
 8005df6:	e00d      	b.n	8005e14 <HAL_RCC_GetSysClockFreq+0xa4>

    case RCC_PLLSOURCE_HSI: /* HSI16 used as PLL clock source */
    default:                /* HSI16 used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) *
 8005df8:	68b9      	ldr	r1, [r7, #8]
 8005dfa:	481c      	ldr	r0, [pc, #112]	; (8005e6c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005dfc:	f7fa f996 	bl	800012c <__udivsi3>
 8005e00:	0003      	movs	r3, r0
 8005e02:	0019      	movs	r1, r3
               ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e04:	4b18      	ldr	r3, [pc, #96]	; (8005e68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	0a1b      	lsrs	r3, r3, #8
 8005e0a:	227f      	movs	r2, #127	; 0x7f
 8005e0c:	4013      	ands	r3, r2
      pllvco = (HSI_VALUE / pllm) *
 8005e0e:	434b      	muls	r3, r1
 8005e10:	617b      	str	r3, [r7, #20]
      break;
 8005e12:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005e14:	4b14      	ldr	r3, [pc, #80]	; (8005e68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	0f5b      	lsrs	r3, r3, #29
 8005e1a:	2207      	movs	r2, #7
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	3301      	adds	r3, #1
 8005e20:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005e22:	6879      	ldr	r1, [r7, #4]
 8005e24:	6978      	ldr	r0, [r7, #20]
 8005e26:	f7fa f981 	bl	800012c <__udivsi3>
 8005e2a:	0003      	movs	r3, r0
 8005e2c:	613b      	str	r3, [r7, #16]
 8005e2e:	e015      	b.n	8005e5c <HAL_RCC_GetSysClockFreq+0xec>
  } else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE) {
 8005e30:	4b0d      	ldr	r3, [pc, #52]	; (8005e68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	2238      	movs	r2, #56	; 0x38
 8005e36:	4013      	ands	r3, r2
 8005e38:	2b20      	cmp	r3, #32
 8005e3a:	d103      	bne.n	8005e44 <HAL_RCC_GetSysClockFreq+0xd4>
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005e3c:	2380      	movs	r3, #128	; 0x80
 8005e3e:	021b      	lsls	r3, r3, #8
 8005e40:	613b      	str	r3, [r7, #16]
 8005e42:	e00b      	b.n	8005e5c <HAL_RCC_GetSysClockFreq+0xec>
  } else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI) {
 8005e44:	4b08      	ldr	r3, [pc, #32]	; (8005e68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	2238      	movs	r2, #56	; 0x38
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	2b18      	cmp	r3, #24
 8005e4e:	d103      	bne.n	8005e58 <HAL_RCC_GetSysClockFreq+0xe8>
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005e50:	23fa      	movs	r3, #250	; 0xfa
 8005e52:	01db      	lsls	r3, r3, #7
 8005e54:	613b      	str	r3, [r7, #16]
 8005e56:	e001      	b.n	8005e5c <HAL_RCC_GetSysClockFreq+0xec>
  } else {
    sysclockfreq = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005e5c:	693b      	ldr	r3, [r7, #16]
}
 8005e5e:	0018      	movs	r0, r3
 8005e60:	46bd      	mov	sp, r7
 8005e62:	b006      	add	sp, #24
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	46c0      	nop			; (mov r8, r8)
 8005e68:	40021000 	.word	0x40021000
 8005e6c:	00f42400 	.word	0x00f42400
 8005e70:	007a1200 	.word	0x007a1200

08005e74 <HAL_RCC_GetHCLKFreq>:
 *
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock
 * Frequency.
 * @retval HCLK frequency in Hz
 */
uint32_t HAL_RCC_GetHCLKFreq(void) { return SystemCoreClock; }
 8005e74:	b580      	push	{r7, lr}
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	4b02      	ldr	r3, [pc, #8]	; (8005e84 <HAL_RCC_GetHCLKFreq+0x10>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	0018      	movs	r0, r3
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	46c0      	nop			; (mov r8, r8)
 8005e84:	20000000 	.word	0x20000000

08005e88 <HAL_RCC_GetPCLK1Freq>:
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this
 * function will be incorrect.
 * @retval PCLK1 frequency in Hz
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 8005e88:	b5b0      	push	{r4, r5, r7, lr}
 8005e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(),
 8005e8c:	f7ff fff2 	bl	8005e74 <HAL_RCC_GetHCLKFreq>
 8005e90:	0004      	movs	r4, r0
 8005e92:	f7ff fb39 	bl	8005508 <LL_RCC_GetAPB1Prescaler>
 8005e96:	0003      	movs	r3, r0
 8005e98:	0b1a      	lsrs	r2, r3, #12
 8005e9a:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e9c:	0092      	lsls	r2, r2, #2
 8005e9e:	58d3      	ldr	r3, [r2, r3]
 8005ea0:	221f      	movs	r2, #31
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	40dc      	lsrs	r4, r3
 8005ea6:	0023      	movs	r3, r4
                                              LL_RCC_GetAPB1Prescaler())));
}
 8005ea8:	0018      	movs	r0, r3
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bdb0      	pop	{r4, r5, r7, pc}
 8005eae:	46c0      	nop			; (mov r8, r8)
 8005eb0:	0800ab84 	.word	0x0800ab84

08005eb4 <HAL_RCCEx_PeriphCLKConfig>:
 * enabled.
 *
 * @retval HAL status
 */
HAL_StatusTypeDef
HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef *PeriphClkInit) {
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;    /* Intermediate status */
 8005ebc:	2313      	movs	r3, #19
 8005ebe:	18fb      	adds	r3, r7, r3
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK; /* Final status */
 8005ec4:	2312      	movs	r3, #18
 8005ec6:	18fb      	adds	r3, r7, r3
 8005ec8:	2200      	movs	r2, #0
 8005eca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration
   * ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) ==
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	2380      	movs	r3, #128	; 0x80
 8005ed2:	029b      	lsls	r3, r3, #10
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	d100      	bne.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005ed8:	e0a3      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x16e>
      RCC_PERIPHCLK_RTC) {
    FlagStatus pwrclkchanged = RESET;
 8005eda:	2011      	movs	r0, #17
 8005edc:	183b      	adds	r3, r7, r0
 8005ede:	2200      	movs	r2, #0
 8005ee0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 8005ee2:	4bc3      	ldr	r3, [pc, #780]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ee4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ee6:	2380      	movs	r3, #128	; 0x80
 8005ee8:	055b      	lsls	r3, r3, #21
 8005eea:	4013      	ands	r3, r2
 8005eec:	d110      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eee:	4bc0      	ldr	r3, [pc, #768]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ef0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ef2:	4bbf      	ldr	r3, [pc, #764]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ef4:	2180      	movs	r1, #128	; 0x80
 8005ef6:	0549      	lsls	r1, r1, #21
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	63da      	str	r2, [r3, #60]	; 0x3c
 8005efc:	4bbc      	ldr	r3, [pc, #752]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005efe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f00:	2380      	movs	r3, #128	; 0x80
 8005f02:	055b      	lsls	r3, r3, #21
 8005f04:	4013      	ands	r3, r2
 8005f06:	60bb      	str	r3, [r7, #8]
 8005f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f0a:	183b      	adds	r3, r7, r0
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f10:	4bb8      	ldr	r3, [pc, #736]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	4bb7      	ldr	r3, [pc, #732]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005f16:	2180      	movs	r1, #128	; 0x80
 8005f18:	0049      	lsls	r1, r1, #1
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f1e:	f7fe fa39 	bl	8004394 <HAL_GetTick>
 8005f22:	0003      	movs	r3, r0
 8005f24:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U) {
 8005f26:	e00b      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8005f28:	f7fe fa34 	bl	8004394 <HAL_GetTick>
 8005f2c:	0002      	movs	r2, r0
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d904      	bls.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        ret = HAL_TIMEOUT;
 8005f36:	2313      	movs	r3, #19
 8005f38:	18fb      	adds	r3, r7, r3
 8005f3a:	2203      	movs	r2, #3
 8005f3c:	701a      	strb	r2, [r3, #0]
        break;
 8005f3e:	e005      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U) {
 8005f40:	4bac      	ldr	r3, [pc, #688]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	2380      	movs	r3, #128	; 0x80
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	4013      	ands	r3, r2
 8005f4a:	d0ed      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK) {
 8005f4c:	2313      	movs	r3, #19
 8005f4e:	18fb      	adds	r3, r7, r3
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d154      	bne.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      /* Reset the Backup domain only if the RTC Clock source selection is
       * modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f56:	4ba6      	ldr	r3, [pc, #664]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f5a:	23c0      	movs	r3, #192	; 0xc0
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4013      	ands	r3, r2
 8005f60:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is
       * modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) &&
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d019      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          (tmpregister != PeriphClkInit->RTCClockSelection)) {
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) &&
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d014      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        /* Store the content of BDCR register before the reset of Backup Domain
         */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f72:	4b9f      	ldr	r3, [pc, #636]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f76:	4aa0      	ldr	r2, [pc, #640]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005f78:	4013      	ands	r3, r2
 8005f7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset
         */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f7c:	4b9c      	ldr	r3, [pc, #624]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f80:	4b9b      	ldr	r3, [pc, #620]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f82:	2180      	movs	r1, #128	; 0x80
 8005f84:	0249      	lsls	r1, r1, #9
 8005f86:	430a      	orrs	r2, r1
 8005f88:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f8a:	4b99      	ldr	r3, [pc, #612]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f8e:	4b98      	ldr	r3, [pc, #608]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f90:	499a      	ldr	r1, [pc, #616]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005f92:	400a      	ands	r2, r1
 8005f94:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f96:	4b96      	ldr	r3, [pc, #600]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain
       * reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON)) {
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	d016      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa4:	f7fe f9f6 	bl	8004394 <HAL_GetTick>
 8005fa8:	0003      	movs	r3, r0
 8005faa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 8005fac:	e00c      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8005fae:	f7fe f9f1 	bl	8004394 <HAL_GetTick>
 8005fb2:	0002      	movs	r2, r0
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	4a91      	ldr	r2, [pc, #580]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d904      	bls.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x114>
            ret = HAL_TIMEOUT;
 8005fbe:	2313      	movs	r3, #19
 8005fc0:	18fb      	adds	r3, r7, r3
 8005fc2:	2203      	movs	r2, #3
 8005fc4:	701a      	strb	r2, [r3, #0]
            break;
 8005fc6:	e004      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 8005fc8:	4b89      	ldr	r3, [pc, #548]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fcc:	2202      	movs	r2, #2
 8005fce:	4013      	ands	r3, r2
 8005fd0:	d0ed      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK) {
 8005fd2:	2313      	movs	r3, #19
 8005fd4:	18fb      	adds	r3, r7, r3
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10a      	bne.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fdc:	4b84      	ldr	r3, [pc, #528]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe0:	4a85      	ldr	r2, [pc, #532]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	0019      	movs	r1, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fea:	4b81      	ldr	r3, [pc, #516]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fec:	430a      	orrs	r2, r1
 8005fee:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ff0:	e00c      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x158>
      } else {
        /* set overall return value */
        status = ret;
 8005ff2:	2312      	movs	r3, #18
 8005ff4:	18fb      	adds	r3, r7, r3
 8005ff6:	2213      	movs	r2, #19
 8005ff8:	18ba      	adds	r2, r7, r2
 8005ffa:	7812      	ldrb	r2, [r2, #0]
 8005ffc:	701a      	strb	r2, [r3, #0]
 8005ffe:	e005      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    } else {
      /* set overall return value */
      status = ret;
 8006000:	2312      	movs	r3, #18
 8006002:	18fb      	adds	r3, r7, r3
 8006004:	2213      	movs	r2, #19
 8006006:	18ba      	adds	r2, r7, r2
 8006008:	7812      	ldrb	r2, [r2, #0]
 800600a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET) {
 800600c:	2311      	movs	r3, #17
 800600e:	18fb      	adds	r3, r7, r3
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d105      	bne.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x16e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006016:	4b76      	ldr	r3, [pc, #472]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006018:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800601a:	4b75      	ldr	r3, [pc, #468]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800601c:	4979      	ldr	r1, [pc, #484]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800601e:	400a      	ands	r2, r1
 8006020:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration
   * -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) ==
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2201      	movs	r2, #1
 8006028:	4013      	ands	r3, r2
 800602a:	d009      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      RCC_PERIPHCLK_USART1) {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800602c:	4b70      	ldr	r3, [pc, #448]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800602e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006030:	2203      	movs	r2, #3
 8006032:	4393      	bics	r3, r2
 8006034:	0019      	movs	r1, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	4b6d      	ldr	r3, [pc, #436]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800603c:	430a      	orrs	r2, r1
 800603e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration
   * -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) ==
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2202      	movs	r2, #2
 8006046:	4013      	ands	r3, r2
 8006048:	d009      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      RCC_PERIPHCLK_USART2) {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800604a:	4b69      	ldr	r3, [pc, #420]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800604c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800604e:	220c      	movs	r2, #12
 8006050:	4393      	bics	r3, r2
 8006052:	0019      	movs	r1, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	4b65      	ldr	r3, [pc, #404]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800605a:	430a      	orrs	r2, r1
 800605c:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration
   * ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) ==
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2210      	movs	r2, #16
 8006064:	4013      	ands	r3, r2
 8006066:	d009      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      RCC_PERIPHCLK_LPUART1) {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006068:	4b61      	ldr	r3, [pc, #388]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800606a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800606c:	4a66      	ldr	r2, [pc, #408]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800606e:	4013      	ands	r3, r2
 8006070:	0019      	movs	r1, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68da      	ldr	r2, [r3, #12]
 8006076:	4b5e      	ldr	r3, [pc, #376]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006078:	430a      	orrs	r2, r1
 800607a:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration
   * -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) ==
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	2380      	movs	r3, #128	; 0x80
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4013      	ands	r3, r2
 8006086:	d009      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      (RCC_PERIPHCLK_LPTIM1)) {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006088:	4b59      	ldr	r3, [pc, #356]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800608a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800608c:	4a5f      	ldr	r2, [pc, #380]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800608e:	4013      	ands	r3, r2
 8006090:	0019      	movs	r1, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	699a      	ldr	r2, [r3, #24]
 8006096:	4b56      	ldr	r3, [pc, #344]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006098:	430a      	orrs	r2, r1
 800609a:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration
   * -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) ==
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	2380      	movs	r3, #128	; 0x80
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	4013      	ands	r3, r2
 80060a6:	d009      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x208>
      (RCC_PERIPHCLK_LPTIM2)) {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80060a8:	4b51      	ldr	r3, [pc, #324]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ac:	4a58      	ldr	r2, [pc, #352]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060ae:	4013      	ands	r3, r2
 80060b0:	0019      	movs	r1, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	69da      	ldr	r2, [r3, #28]
 80060b6:	4b4e      	ldr	r3, [pc, #312]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060b8:	430a      	orrs	r2, r1
 80060ba:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration
   * ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) ==
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2220      	movs	r2, #32
 80060c2:	4013      	ands	r3, r2
 80060c4:	d009      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x226>
      RCC_PERIPHCLK_I2C1) {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060c6:	4b4a      	ldr	r3, [pc, #296]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ca:	4a52      	ldr	r2, [pc, #328]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80060cc:	4013      	ands	r3, r2
 80060ce:	0019      	movs	r1, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	691a      	ldr	r2, [r3, #16]
 80060d4:	4b46      	ldr	r3, [pc, #280]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060d6:	430a      	orrs	r2, r1
 80060d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration
   * ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) ==
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	2380      	movs	r3, #128	; 0x80
 80060e0:	01db      	lsls	r3, r3, #7
 80060e2:	4013      	ands	r3, r2
 80060e4:	d015      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x25e>
      RCC_PERIPHCLK_ADC) {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060e6:	4b42      	ldr	r3, [pc, #264]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	0899      	lsrs	r1, r3, #2
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a1a      	ldr	r2, [r3, #32]
 80060f2:	4b3f      	ldr	r3, [pc, #252]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060f4:	430a      	orrs	r2, r1
 80060f6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC) {
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a1a      	ldr	r2, [r3, #32]
 80060fc:	2380      	movs	r3, #128	; 0x80
 80060fe:	05db      	lsls	r3, r3, #23
 8006100:	429a      	cmp	r2, r3
 8006102:	d106      	bne.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x25e>
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006104:	4b3a      	ldr	r3, [pc, #232]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	4b39      	ldr	r3, [pc, #228]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800610a:	2180      	movs	r1, #128	; 0x80
 800610c:	0249      	lsls	r1, r1, #9
 800610e:	430a      	orrs	r2, r1
 8006110:	60da      	str	r2, [r3, #12]
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration
   * ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) ==
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	2380      	movs	r3, #128	; 0x80
 8006118:	031b      	lsls	r3, r3, #12
 800611a:	4013      	ands	r3, r2
 800611c:	d009      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x27e>
      RCC_PERIPHCLK_CEC) {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800611e:	4b34      	ldr	r3, [pc, #208]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006122:	2240      	movs	r2, #64	; 0x40
 8006124:	4393      	bics	r3, r2
 8006126:	0019      	movs	r1, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800612c:	4b30      	ldr	r3, [pc, #192]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800612e:	430a      	orrs	r2, r1
 8006130:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration
   * ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) ==
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	2380      	movs	r3, #128	; 0x80
 8006138:	039b      	lsls	r3, r3, #14
 800613a:	4013      	ands	r3, r2
 800613c:	d016      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      RCC_PERIPHCLK_TIM1) {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800613e:	4b2c      	ldr	r3, [pc, #176]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006142:	4a35      	ldr	r2, [pc, #212]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006144:	4013      	ands	r3, r2
 8006146:	0019      	movs	r1, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800614c:	4b28      	ldr	r3, [pc, #160]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800614e:	430a      	orrs	r2, r1
 8006150:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL) {
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006156:	2380      	movs	r3, #128	; 0x80
 8006158:	03db      	lsls	r3, r3, #15
 800615a:	429a      	cmp	r2, r3
 800615c:	d106      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800615e:	4b24      	ldr	r3, [pc, #144]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006160:	68da      	ldr	r2, [r3, #12]
 8006162:	4b23      	ldr	r3, [pc, #140]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006164:	2180      	movs	r1, #128	; 0x80
 8006166:	0449      	lsls	r1, r1, #17
 8006168:	430a      	orrs	r2, r1
 800616a:	60da      	str	r2, [r3, #12]
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration
   * ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) ==
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	2380      	movs	r3, #128	; 0x80
 8006172:	03db      	lsls	r3, r3, #15
 8006174:	4013      	ands	r3, r2
 8006176:	d016      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
      RCC_PERIPHCLK_TIM15) {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006178:	4b1d      	ldr	r3, [pc, #116]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800617a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800617c:	4a27      	ldr	r2, [pc, #156]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800617e:	4013      	ands	r3, r2
 8006180:	0019      	movs	r1, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006186:	4b1a      	ldr	r3, [pc, #104]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006188:	430a      	orrs	r2, r1
 800618a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL) {
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006190:	2380      	movs	r3, #128	; 0x80
 8006192:	045b      	lsls	r3, r3, #17
 8006194:	429a      	cmp	r2, r3
 8006196:	d106      	bne.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006198:	4b15      	ldr	r3, [pc, #84]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800619a:	68da      	ldr	r2, [r3, #12]
 800619c:	4b14      	ldr	r3, [pc, #80]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800619e:	2180      	movs	r1, #128	; 0x80
 80061a0:	0449      	lsls	r1, r1, #17
 80061a2:	430a      	orrs	r2, r1
 80061a4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration
   * ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) ==
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	2380      	movs	r3, #128	; 0x80
 80061ac:	011b      	lsls	r3, r3, #4
 80061ae:	4013      	ands	r3, r2
 80061b0:	d016      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      RCC_PERIPHCLK_I2S1) {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80061b2:	4b0f      	ldr	r3, [pc, #60]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b6:	4a1a      	ldr	r2, [pc, #104]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80061b8:	4013      	ands	r3, r2
 80061ba:	0019      	movs	r1, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	695a      	ldr	r2, [r3, #20]
 80061c0:	4b0b      	ldr	r3, [pc, #44]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061c2:	430a      	orrs	r2, r1
 80061c4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL) {
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	695a      	ldr	r2, [r3, #20]
 80061ca:	2380      	movs	r3, #128	; 0x80
 80061cc:	01db      	lsls	r3, r3, #7
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d106      	bne.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80061d2:	4b07      	ldr	r3, [pc, #28]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	4b06      	ldr	r3, [pc, #24]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061d8:	2180      	movs	r1, #128	; 0x80
 80061da:	0249      	lsls	r1, r1, #9
 80061dc:	430a      	orrs	r2, r1
 80061de:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80061e0:	2312      	movs	r3, #18
 80061e2:	18fb      	adds	r3, r7, r3
 80061e4:	781b      	ldrb	r3, [r3, #0]
}
 80061e6:	0018      	movs	r0, r3
 80061e8:	46bd      	mov	sp, r7
 80061ea:	b006      	add	sp, #24
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	46c0      	nop			; (mov r8, r8)
 80061f0:	40021000 	.word	0x40021000
 80061f4:	40007000 	.word	0x40007000
 80061f8:	fffffcff 	.word	0xfffffcff
 80061fc:	fffeffff 	.word	0xfffeffff
 8006200:	00001388 	.word	0x00001388
 8006204:	efffffff 	.word	0xefffffff
 8006208:	fffff3ff 	.word	0xfffff3ff
 800620c:	fff3ffff 	.word	0xfff3ffff
 8006210:	ffcfffff 	.word	0xffcfffff
 8006214:	ffffcfff 	.word	0xffffcfff
 8006218:	ffbfffff 	.word	0xffbfffff
 800621c:	feffffff 	.word	0xfeffffff
 8006220:	ffff3fff 	.word	0xffff3fff

08006224 <HAL_SPI_Init>:
 *         in the SPI_InitTypeDef and initialize the associated handle.
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi) {
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL) {
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_SPI_Init+0x12>
    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e0a8      	b.n	8006388 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE) {
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623a:	2b00      	cmp	r3, #0
 800623c:	d109      	bne.n	8006252 <HAL_SPI_Init+0x2e>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER) {
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	2382      	movs	r3, #130	; 0x82
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	429a      	cmp	r2, r3
 8006248:	d009      	beq.n	800625e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    } else {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default
       * value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	61da      	str	r2, [r3, #28]
 8006250:	e005      	b.n	800625e <HAL_SPI_Init+0x3a>
    }
  } else {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET) {
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	225d      	movs	r2, #93	; 0x5d
 8006268:	5c9b      	ldrb	r3, [r3, r2]
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	d107      	bne.n	8006280 <HAL_SPI_Init+0x5c>
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	225c      	movs	r2, #92	; 0x5c
 8006274:	2100      	movs	r1, #0
 8006276:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	0018      	movs	r0, r3
 800627c:	f7fd fe20 	bl	8003ec0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	225d      	movs	r2, #93	; 0x5d
 8006284:	2102      	movs	r1, #2
 8006286:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2140      	movs	r1, #64	; 0x40
 8006294:	438a      	bics	r2, r1
 8006296:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT) {
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68da      	ldr	r2, [r3, #12]
 800629c:	23e0      	movs	r3, #224	; 0xe0
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d902      	bls.n	80062aa <HAL_SPI_Init+0x86>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80062a4:	2300      	movs	r3, #0
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	e002      	b.n	80062b0 <HAL_SPI_Init+0x8c>
  } else {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80062aa:	2380      	movs	r3, #128	; 0x80
 80062ac:	015b      	lsls	r3, r3, #5
 80062ae:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) &&
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68da      	ldr	r2, [r3, #12]
 80062b4:	23f0      	movs	r3, #240	; 0xf0
 80062b6:	011b      	lsls	r3, r3, #4
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d008      	beq.n	80062ce <HAL_SPI_Init+0xaa>
      (hspi->Init.DataSize != SPI_DATASIZE_8BIT)) {
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68da      	ldr	r2, [r3, #12]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) &&
 80062c0:	23e0      	movs	r3, #224	; 0xe0
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d002      	beq.n	80062ce <HAL_SPI_Init+0xaa>
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS
  management, Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1,
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	2382      	movs	r3, #130	; 0x82
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	401a      	ands	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6899      	ldr	r1, [r3, #8]
 80062dc:	2384      	movs	r3, #132	; 0x84
 80062de:	021b      	lsls	r3, r3, #8
 80062e0:	400b      	ands	r3, r1
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	2102      	movs	r1, #2
 80062ea:	400b      	ands	r3, r1
 80062ec:	431a      	orrs	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	2101      	movs	r1, #1
 80062f4:	400b      	ands	r3, r1
 80062f6:	431a      	orrs	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6999      	ldr	r1, [r3, #24]
 80062fc:	2380      	movs	r3, #128	; 0x80
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	400b      	ands	r3, r1
 8006302:	431a      	orrs	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	69db      	ldr	r3, [r3, #28]
 8006308:	2138      	movs	r1, #56	; 0x38
 800630a:	400b      	ands	r3, r1
 800630c:	431a      	orrs	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	2180      	movs	r1, #128	; 0x80
 8006314:	400b      	ands	r3, r1
 8006316:	431a      	orrs	r2, r3
 8006318:	0011      	movs	r1, r2
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800631e:	2380      	movs	r3, #128	; 0x80
 8006320:	019b      	lsls	r3, r3, #6
 8006322:	401a      	ands	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	430a      	orrs	r2, r1
 800632a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo
   * threshold */
  WRITE_REG(hspi->Instance->CR2,
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	0c1b      	lsrs	r3, r3, #16
 8006332:	2204      	movs	r2, #4
 8006334:	401a      	ands	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	2110      	movs	r1, #16
 800633c:	400b      	ands	r3, r1
 800633e:	431a      	orrs	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006344:	2108      	movs	r1, #8
 8006346:	400b      	ands	r3, r1
 8006348:	431a      	orrs	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68d9      	ldr	r1, [r3, #12]
 800634e:	23f0      	movs	r3, #240	; 0xf0
 8006350:	011b      	lsls	r3, r3, #4
 8006352:	400b      	ands	r3, r1
 8006354:	431a      	orrs	r2, r3
 8006356:	0011      	movs	r1, r2
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	2380      	movs	r3, #128	; 0x80
 800635c:	015b      	lsls	r3, r3, #5
 800635e:	401a      	ands	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	430a      	orrs	r2, r1
 8006366:	605a      	str	r2, [r3, #4]
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is
   * reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	69da      	ldr	r2, [r3, #28]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4907      	ldr	r1, [pc, #28]	; (8006390 <HAL_SPI_Init+0x16c>)
 8006374:	400a      	ands	r2, r1
 8006376:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	225d      	movs	r2, #93	; 0x5d
 8006382:	2101      	movs	r1, #1
 8006384:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	0018      	movs	r0, r3
 800638a:	46bd      	mov	sp, r7
 800638c:	b004      	add	sp, #16
 800638e:	bd80      	pop	{r7, pc}
 8006390:	fffff7ff 	.word	0xfffff7ff

08006394 <HAL_SPI_Transmit>:
 * @param  Size amount of data to be sent
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData,
                                   uint16_t Size, uint32_t Timeout) {
 8006394:	b580      	push	{r7, lr}
 8006396:	b088      	sub	sp, #32
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	603b      	str	r3, [r7, #0]
 80063a0:	1dbb      	adds	r3, r7, #6
 80063a2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063a4:	231f      	movs	r3, #31
 80063a6:	18fb      	adds	r3, r7, r3
 80063a8:	2200      	movs	r2, #0
 80063aa:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	225c      	movs	r2, #92	; 0x5c
 80063b0:	5c9b      	ldrb	r3, [r3, r2]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d101      	bne.n	80063ba <HAL_SPI_Transmit+0x26>
 80063b6:	2302      	movs	r3, #2
 80063b8:	e140      	b.n	800663c <HAL_SPI_Transmit+0x2a8>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	225c      	movs	r2, #92	; 0x5c
 80063be:	2101      	movs	r1, #1
 80063c0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063c2:	f7fd ffe7 	bl	8004394 <HAL_GetTick>
 80063c6:	0003      	movs	r3, r0
 80063c8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80063ca:	2316      	movs	r3, #22
 80063cc:	18fb      	adds	r3, r7, r3
 80063ce:	1dba      	adds	r2, r7, #6
 80063d0:	8812      	ldrh	r2, [r2, #0]
 80063d2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY) {
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	225d      	movs	r2, #93	; 0x5d
 80063d8:	5c9b      	ldrb	r3, [r3, r2]
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d004      	beq.n	80063ea <HAL_SPI_Transmit+0x56>
    errorcode = HAL_BUSY;
 80063e0:	231f      	movs	r3, #31
 80063e2:	18fb      	adds	r3, r7, r3
 80063e4:	2202      	movs	r2, #2
 80063e6:	701a      	strb	r2, [r3, #0]
    goto error;
 80063e8:	e11d      	b.n	8006626 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U)) {
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d003      	beq.n	80063f8 <HAL_SPI_Transmit+0x64>
 80063f0:	1dbb      	adds	r3, r7, #6
 80063f2:	881b      	ldrh	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d104      	bne.n	8006402 <HAL_SPI_Transmit+0x6e>
    errorcode = HAL_ERROR;
 80063f8:	231f      	movs	r3, #31
 80063fa:	18fb      	adds	r3, r7, r3
 80063fc:	2201      	movs	r2, #1
 80063fe:	701a      	strb	r2, [r3, #0]
    goto error;
 8006400:	e111      	b.n	8006626 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State = HAL_SPI_STATE_BUSY_TX;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	225d      	movs	r2, #93	; 0x5d
 8006406:	2103      	movs	r1, #3
 8006408:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr = (uint8_t *)pData;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize = Size;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	1dba      	adds	r2, r7, #6
 800641a:	8812      	ldrh	r2, [r2, #0]
 800641c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	1dba      	adds	r2, r7, #6
 8006422:	8812      	ldrh	r2, [r2, #0]
 8006424:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr = (uint8_t *)NULL;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize = 0U;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2244      	movs	r2, #68	; 0x44
 8006430:	2100      	movs	r1, #0
 8006432:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2246      	movs	r2, #70	; 0x46
 8006438:	2100      	movs	r1, #0
 800643a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR = NULL;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR = NULL;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE) {
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	2380      	movs	r3, #128	; 0x80
 800644e:	021b      	lsls	r3, r3, #8
 8006450:	429a      	cmp	r2, r3
 8006452:	d110      	bne.n	8006476 <HAL_SPI_Transmit+0xe2>
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2140      	movs	r1, #64	; 0x40
 8006460:	438a      	bics	r2, r1
 8006462:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2180      	movs	r1, #128	; 0x80
 8006470:	01c9      	lsls	r1, r1, #7
 8006472:	430a      	orrs	r2, r1
 8006474:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2240      	movs	r2, #64	; 0x40
 800647e:	4013      	ands	r3, r2
 8006480:	2b40      	cmp	r3, #64	; 0x40
 8006482:	d007      	beq.n	8006494 <HAL_SPI_Transmit+0x100>
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2140      	movs	r1, #64	; 0x40
 8006490:	430a      	orrs	r2, r1
 8006492:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT) {
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	23e0      	movs	r3, #224	; 0xe0
 800649a:	00db      	lsls	r3, r3, #3
 800649c:	429a      	cmp	r2, r3
 800649e:	d94e      	bls.n	800653e <HAL_SPI_Transmit+0x1aa>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U)) {
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d004      	beq.n	80064b2 <HAL_SPI_Transmit+0x11e>
 80064a8:	2316      	movs	r3, #22
 80064aa:	18fb      	adds	r3, r7, r3
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d13f      	bne.n	8006532 <HAL_SPI_Transmit+0x19e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b6:	881a      	ldrh	r2, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c2:	1c9a      	adds	r2, r3, #2
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	3b01      	subs	r3, #1
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U) {
 80064d6:	e02c      	b.n	8006532 <HAL_SPI_Transmit+0x19e>
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) {
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	2202      	movs	r2, #2
 80064e0:	4013      	ands	r3, r2
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d112      	bne.n	800650c <HAL_SPI_Transmit+0x178>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ea:	881a      	ldrh	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f6:	1c9a      	adds	r2, r3, #2
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006500:	b29b      	uxth	r3, r3
 8006502:	3b01      	subs	r3, #1
 8006504:	b29a      	uxth	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	87da      	strh	r2, [r3, #62]	; 0x3e
 800650a:	e012      	b.n	8006532 <HAL_SPI_Transmit+0x19e>
      } else {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >= Timeout) &&
 800650c:	f7fd ff42 	bl	8004394 <HAL_GetTick>
 8006510:	0002      	movs	r2, r0
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	429a      	cmp	r2, r3
 800651a:	d802      	bhi.n	8006522 <HAL_SPI_Transmit+0x18e>
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	3301      	adds	r3, #1
 8006520:	d102      	bne.n	8006528 <HAL_SPI_Transmit+0x194>
             (Timeout != HAL_MAX_DELAY)) ||
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d104      	bne.n	8006532 <HAL_SPI_Transmit+0x19e>
            (Timeout == 0U)) {
          errorcode = HAL_TIMEOUT;
 8006528:	231f      	movs	r3, #31
 800652a:	18fb      	adds	r3, r7, r3
 800652c:	2203      	movs	r2, #3
 800652e:	701a      	strb	r2, [r3, #0]
          goto error;
 8006530:	e079      	b.n	8006626 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U) {
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006536:	b29b      	uxth	r3, r3
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1cd      	bne.n	80064d8 <HAL_SPI_Transmit+0x144>
 800653c:	e04f      	b.n	80065de <HAL_SPI_Transmit+0x24a>
      }
    }
  }
  /* Transmit data in 8 Bit mode */
  else {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U)) {
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d004      	beq.n	8006550 <HAL_SPI_Transmit+0x1bc>
 8006546:	2316      	movs	r3, #22
 8006548:	18fb      	adds	r3, r7, r3
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d141      	bne.n	80065d4 <HAL_SPI_Transmit+0x240>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	330c      	adds	r3, #12
 800655a:	7812      	ldrb	r2, [r2, #0]
 800655c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006562:	1c5a      	adds	r2, r3, #1
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800656c:	b29b      	uxth	r3, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U) {
 8006576:	e02d      	b.n	80065d4 <HAL_SPI_Transmit+0x240>
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) {
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	2202      	movs	r2, #2
 8006580:	4013      	ands	r3, r2
 8006582:	2b02      	cmp	r3, #2
 8006584:	d113      	bne.n	80065ae <HAL_SPI_Transmit+0x21a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	330c      	adds	r3, #12
 8006590:	7812      	ldrb	r2, [r2, #0]
 8006592:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006598:	1c5a      	adds	r2, r3, #1
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	3b01      	subs	r3, #1
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065ac:	e012      	b.n	80065d4 <HAL_SPI_Transmit+0x240>
      } else {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >= Timeout) &&
 80065ae:	f7fd fef1 	bl	8004394 <HAL_GetTick>
 80065b2:	0002      	movs	r2, r0
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d802      	bhi.n	80065c4 <HAL_SPI_Transmit+0x230>
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	3301      	adds	r3, #1
 80065c2:	d102      	bne.n	80065ca <HAL_SPI_Transmit+0x236>
             (Timeout != HAL_MAX_DELAY)) ||
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d104      	bne.n	80065d4 <HAL_SPI_Transmit+0x240>
            (Timeout == 0U)) {
          errorcode = HAL_TIMEOUT;
 80065ca:	231f      	movs	r3, #31
 80065cc:	18fb      	adds	r3, r7, r3
 80065ce:	2203      	movs	r2, #3
 80065d0:	701a      	strb	r2, [r3, #0]
          goto error;
 80065d2:	e028      	b.n	8006626 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U) {
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065d8:	b29b      	uxth	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1cc      	bne.n	8006578 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK) {
 80065de:	69ba      	ldr	r2, [r7, #24]
 80065e0:	6839      	ldr	r1, [r7, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	0018      	movs	r0, r3
 80065e6:	f000 fc4b 	bl	8006e80 <SPI_EndRxTxTransaction>
 80065ea:	1e03      	subs	r3, r0, #0
 80065ec:	d002      	beq.n	80065f4 <HAL_SPI_Transmit+0x260>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2220      	movs	r2, #32
 80065f2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not
   * read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES) {
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10a      	bne.n	8006612 <HAL_SPI_Transmit+0x27e>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065fc:	2300      	movs	r3, #0
 80065fe:	613b      	str	r3, [r7, #16]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	613b      	str	r3, [r7, #16]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	613b      	str	r3, [r7, #16]
 8006610:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE) {
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006616:	2b00      	cmp	r3, #0
 8006618:	d004      	beq.n	8006624 <HAL_SPI_Transmit+0x290>
    errorcode = HAL_ERROR;
 800661a:	231f      	movs	r3, #31
 800661c:	18fb      	adds	r3, r7, r3
 800661e:	2201      	movs	r2, #1
 8006620:	701a      	strb	r2, [r3, #0]
 8006622:	e000      	b.n	8006626 <HAL_SPI_Transmit+0x292>
  }

error:
 8006624:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	225d      	movs	r2, #93	; 0x5d
 800662a:	2101      	movs	r1, #1
 800662c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	225c      	movs	r2, #92	; 0x5c
 8006632:	2100      	movs	r1, #0
 8006634:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006636:	231f      	movs	r3, #31
 8006638:	18fb      	adds	r3, r7, r3
 800663a:	781b      	ldrb	r3, [r3, #0]
}
 800663c:	0018      	movs	r0, r3
 800663e:	46bd      	mov	sp, r7
 8006640:	b008      	add	sp, #32
 8006642:	bd80      	pop	{r7, pc}

08006644 <HAL_SPI_TransmitReceive>:
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi,
                                          uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout) {
 8006644:	b580      	push	{r7, lr}
 8006646:	b08a      	sub	sp, #40	; 0x28
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
 8006650:	001a      	movs	r2, r3
 8006652:	1cbb      	adds	r3, r7, #2
 8006654:	801a      	strh	r2, [r3, #0]
  __IO uint8_t *ptmpreg8;
  __IO uint8_t tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8006656:	2301      	movs	r3, #1
 8006658:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 800665a:	2323      	movs	r3, #35	; 0x23
 800665c:	18fb      	adds	r3, r7, r3
 800665e:	2200      	movs	r2, #0
 8006660:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	225c      	movs	r2, #92	; 0x5c
 8006666:	5c9b      	ldrb	r3, [r3, r2]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d101      	bne.n	8006670 <HAL_SPI_TransmitReceive+0x2c>
 800666c:	2302      	movs	r3, #2
 800666e:	e1b5      	b.n	80069dc <HAL_SPI_TransmitReceive+0x398>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	225c      	movs	r2, #92	; 0x5c
 8006674:	2101      	movs	r1, #1
 8006676:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006678:	f7fd fe8c 	bl	8004394 <HAL_GetTick>
 800667c:	0003      	movs	r3, r0
 800667e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state = hspi->State;
 8006680:	201b      	movs	r0, #27
 8006682:	183b      	adds	r3, r7, r0
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	215d      	movs	r1, #93	; 0x5d
 8006688:	5c52      	ldrb	r2, [r2, r1]
 800668a:	701a      	strb	r2, [r3, #0]
  tmp_mode = hspi->Init.Mode;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006692:	2312      	movs	r3, #18
 8006694:	18fb      	adds	r3, r7, r3
 8006696:	1cba      	adds	r2, r7, #2
 8006698:	8812      	ldrh	r2, [r2, #0]
 800669a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1 = READ_REG(hspi->Instance->CR1);
  spi_cr2 = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800669c:	183b      	adds	r3, r7, r0
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d011      	beq.n	80066c8 <HAL_SPI_TransmitReceive+0x84>
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	2382      	movs	r3, #130	; 0x82
 80066a8:	005b      	lsls	r3, r3, #1
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d107      	bne.n	80066be <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) &&
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) &&
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d103      	bne.n	80066be <HAL_SPI_TransmitReceive+0x7a>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80066b6:	183b      	adds	r3, r7, r0
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	2b04      	cmp	r3, #4
 80066bc:	d004      	beq.n	80066c8 <HAL_SPI_TransmitReceive+0x84>
         (tmp_state == HAL_SPI_STATE_BUSY_RX)))) {
    errorcode = HAL_BUSY;
 80066be:	2323      	movs	r3, #35	; 0x23
 80066c0:	18fb      	adds	r3, r7, r3
 80066c2:	2202      	movs	r2, #2
 80066c4:	701a      	strb	r2, [r3, #0]
    goto error;
 80066c6:	e17e      	b.n	80069c6 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U)) {
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d006      	beq.n	80066dc <HAL_SPI_TransmitReceive+0x98>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d003      	beq.n	80066dc <HAL_SPI_TransmitReceive+0x98>
 80066d4:	1cbb      	adds	r3, r7, #2
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d104      	bne.n	80066e6 <HAL_SPI_TransmitReceive+0xa2>
    errorcode = HAL_ERROR;
 80066dc:	2323      	movs	r3, #35	; 0x23
 80066de:	18fb      	adds	r3, r7, r3
 80066e0:	2201      	movs	r2, #1
 80066e2:	701a      	strb	r2, [r3, #0]
    goto error;
 80066e4:	e16f      	b.n	80069c6 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX) {
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	225d      	movs	r2, #93	; 0x5d
 80066ea:	5c9b      	ldrb	r3, [r3, r2]
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d003      	beq.n	80066fa <HAL_SPI_TransmitReceive+0xb6>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	225d      	movs	r2, #93	; 0x5d
 80066f6:	2105      	movs	r1, #5
 80066f8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr = (uint8_t *)pRxData;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	1cba      	adds	r2, r7, #2
 800670a:	2146      	movs	r1, #70	; 0x46
 800670c:	8812      	ldrh	r2, [r2, #0]
 800670e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize = Size;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	1cba      	adds	r2, r7, #2
 8006714:	2144      	movs	r1, #68	; 0x44
 8006716:	8812      	ldrh	r2, [r2, #0]
 8006718:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr = (uint8_t *)pTxData;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	1cba      	adds	r2, r7, #2
 8006724:	8812      	ldrh	r2, [r2, #0]
 8006726:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize = Size;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	1cba      	adds	r2, r7, #2
 800672c:	8812      	ldrh	r2, [r2, #0]
 800672e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR = NULL;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR = NULL;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT) {
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	23e0      	movs	r3, #224	; 0xe0
 8006742:	00db      	lsls	r3, r3, #3
 8006744:	429a      	cmp	r2, r3
 8006746:	d908      	bls.n	800675a <HAL_SPI_TransmitReceive+0x116>
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	685a      	ldr	r2, [r3, #4]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	49a4      	ldr	r1, [pc, #656]	; (80069e4 <HAL_SPI_TransmitReceive+0x3a0>)
 8006754:	400a      	ands	r2, r1
 8006756:	605a      	str	r2, [r3, #4]
 8006758:	e008      	b.n	800676c <HAL_SPI_TransmitReceive+0x128>
  } else {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685a      	ldr	r2, [r3, #4]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2180      	movs	r1, #128	; 0x80
 8006766:	0149      	lsls	r1, r1, #5
 8006768:	430a      	orrs	r2, r1
 800676a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2240      	movs	r2, #64	; 0x40
 8006774:	4013      	ands	r3, r2
 8006776:	2b40      	cmp	r3, #64	; 0x40
 8006778:	d007      	beq.n	800678a <HAL_SPI_TransmitReceive+0x146>
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2140      	movs	r1, #64	; 0x40
 8006786:	430a      	orrs	r2, r1
 8006788:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT) {
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	68da      	ldr	r2, [r3, #12]
 800678e:	23e0      	movs	r3, #224	; 0xe0
 8006790:	00db      	lsls	r3, r3, #3
 8006792:	429a      	cmp	r2, r3
 8006794:	d800      	bhi.n	8006798 <HAL_SPI_TransmitReceive+0x154>
 8006796:	e07f      	b.n	8006898 <HAL_SPI_TransmitReceive+0x254>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U)) {
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d005      	beq.n	80067ac <HAL_SPI_TransmitReceive+0x168>
 80067a0:	2312      	movs	r3, #18
 80067a2:	18fb      	adds	r3, r7, r3
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d000      	beq.n	80067ac <HAL_SPI_TransmitReceive+0x168>
 80067aa:	e069      	b.n	8006880 <HAL_SPI_TransmitReceive+0x23c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b0:	881a      	ldrh	r2, [r3, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067bc:	1c9a      	adds	r2, r3, #2
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	3b01      	subs	r3, #1
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 80067d0:	e056      	b.n	8006880 <HAL_SPI_TransmitReceive+0x23c>
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) &&
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	2202      	movs	r2, #2
 80067da:	4013      	ands	r3, r2
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d11b      	bne.n	8006818 <HAL_SPI_TransmitReceive+0x1d4>
          (hspi->TxXferCount > 0U) && (txallowed == 1U)) {
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067e4:	b29b      	uxth	r3, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) &&
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d016      	beq.n	8006818 <HAL_SPI_TransmitReceive+0x1d4>
          (hspi->TxXferCount > 0U) && (txallowed == 1U)) {
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d113      	bne.n	8006818 <HAL_SPI_TransmitReceive+0x1d4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f4:	881a      	ldrh	r2, [r3, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006800:	1c9a      	adds	r2, r3, #2
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800680a:	b29b      	uxth	r3, r3
 800680c:	3b01      	subs	r3, #1
 800680e:	b29a      	uxth	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006814:	2300      	movs	r3, #0
 8006816:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) &&
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	2201      	movs	r2, #1
 8006820:	4013      	ands	r3, r2
 8006822:	2b01      	cmp	r3, #1
 8006824:	d11c      	bne.n	8006860 <HAL_SPI_TransmitReceive+0x21c>
          (hspi->RxXferCount > 0U)) {
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2246      	movs	r2, #70	; 0x46
 800682a:	5a9b      	ldrh	r3, [r3, r2]
 800682c:	b29b      	uxth	r3, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) &&
 800682e:	2b00      	cmp	r3, #0
 8006830:	d016      	beq.n	8006860 <HAL_SPI_TransmitReceive+0x21c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68da      	ldr	r2, [r3, #12]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683c:	b292      	uxth	r2, r2
 800683e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006844:	1c9a      	adds	r2, r3, #2
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2246      	movs	r2, #70	; 0x46
 800684e:	5a9b      	ldrh	r3, [r3, r2]
 8006850:	b29b      	uxth	r3, r3
 8006852:	3b01      	subs	r3, #1
 8006854:	b299      	uxth	r1, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2246      	movs	r2, #70	; 0x46
 800685a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800685c:	2301      	movs	r3, #1
 800685e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >= Timeout) &&
 8006860:	f7fd fd98 	bl	8004394 <HAL_GetTick>
 8006864:	0002      	movs	r2, r0
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800686c:	429a      	cmp	r2, r3
 800686e:	d807      	bhi.n	8006880 <HAL_SPI_TransmitReceive+0x23c>
 8006870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006872:	3301      	adds	r3, #1
 8006874:	d004      	beq.n	8006880 <HAL_SPI_TransmitReceive+0x23c>
          (Timeout != HAL_MAX_DELAY)) {
        errorcode = HAL_TIMEOUT;
 8006876:	2323      	movs	r3, #35	; 0x23
 8006878:	18fb      	adds	r3, r7, r3
 800687a:	2203      	movs	r2, #3
 800687c:	701a      	strb	r2, [r3, #0]
        goto error;
 800687e:	e0a2      	b.n	80069c6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006884:	b29b      	uxth	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1a3      	bne.n	80067d2 <HAL_SPI_TransmitReceive+0x18e>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2246      	movs	r2, #70	; 0x46
 800688e:	5a9b      	ldrh	r3, [r3, r2]
 8006890:	b29b      	uxth	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d19d      	bne.n	80067d2 <HAL_SPI_TransmitReceive+0x18e>
 8006896:	e085      	b.n	80069a4 <HAL_SPI_TransmitReceive+0x360>
      }
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U)) {
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d005      	beq.n	80068ac <HAL_SPI_TransmitReceive+0x268>
 80068a0:	2312      	movs	r3, #18
 80068a2:	18fb      	adds	r3, r7, r3
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d000      	beq.n	80068ac <HAL_SPI_TransmitReceive+0x268>
 80068aa:	e070      	b.n	800698e <HAL_SPI_TransmitReceive+0x34a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	330c      	adds	r3, #12
 80068b6:	7812      	ldrb	r2, [r2, #0]
 80068b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068be:	1c5a      	adds	r2, r3, #1
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	3b01      	subs	r3, #1
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 80068d2:	e05c      	b.n	800698e <HAL_SPI_TransmitReceive+0x34a>
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) &&
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	2202      	movs	r2, #2
 80068dc:	4013      	ands	r3, r2
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d11c      	bne.n	800691c <HAL_SPI_TransmitReceive+0x2d8>
          (hspi->TxXferCount > 0U) && (txallowed == 1U)) {
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068e6:	b29b      	uxth	r3, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) &&
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d017      	beq.n	800691c <HAL_SPI_TransmitReceive+0x2d8>
          (hspi->TxXferCount > 0U) && (txallowed == 1U)) {
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d114      	bne.n	800691c <HAL_SPI_TransmitReceive+0x2d8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	330c      	adds	r3, #12
 80068fc:	7812      	ldrb	r2, [r2, #0]
 80068fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006904:	1c5a      	adds	r2, r3, #1
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800690e:	b29b      	uxth	r3, r3
 8006910:	3b01      	subs	r3, #1
 8006912:	b29a      	uxth	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006918:	2300      	movs	r3, #0
 800691a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) &&
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	2201      	movs	r2, #1
 8006924:	4013      	ands	r3, r2
 8006926:	2b01      	cmp	r3, #1
 8006928:	d11e      	bne.n	8006968 <HAL_SPI_TransmitReceive+0x324>
          (hspi->RxXferCount > 0U)) {
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2246      	movs	r2, #70	; 0x46
 800692e:	5a9b      	ldrh	r3, [r3, r2]
 8006930:	b29b      	uxth	r3, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) &&
 8006932:	2b00      	cmp	r3, #0
 8006934:	d018      	beq.n	8006968 <HAL_SPI_TransmitReceive+0x324>
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	330c      	adds	r3, #12
 800693c:	001a      	movs	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006942:	7812      	ldrb	r2, [r2, #0]
 8006944:	b2d2      	uxtb	r2, r2
 8006946:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694c:	1c5a      	adds	r2, r3, #1
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2246      	movs	r2, #70	; 0x46
 8006956:	5a9b      	ldrh	r3, [r3, r2]
 8006958:	b29b      	uxth	r3, r3
 800695a:	3b01      	subs	r3, #1
 800695c:	b299      	uxth	r1, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2246      	movs	r2, #70	; 0x46
 8006962:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006964:	2301      	movs	r3, #1
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >= Timeout) &&
 8006968:	f7fd fd14 	bl	8004394 <HAL_GetTick>
 800696c:	0002      	movs	r2, r0
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006974:	429a      	cmp	r2, r3
 8006976:	d802      	bhi.n	800697e <HAL_SPI_TransmitReceive+0x33a>
 8006978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697a:	3301      	adds	r3, #1
 800697c:	d102      	bne.n	8006984 <HAL_SPI_TransmitReceive+0x340>
           ((Timeout != HAL_MAX_DELAY))) ||
 800697e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006980:	2b00      	cmp	r3, #0
 8006982:	d104      	bne.n	800698e <HAL_SPI_TransmitReceive+0x34a>
          (Timeout == 0U)) {
        errorcode = HAL_TIMEOUT;
 8006984:	2323      	movs	r3, #35	; 0x23
 8006986:	18fb      	adds	r3, r7, r3
 8006988:	2203      	movs	r2, #3
 800698a:	701a      	strb	r2, [r3, #0]
        goto error;
 800698c:	e01b      	b.n	80069c6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006992:	b29b      	uxth	r3, r3
 8006994:	2b00      	cmp	r3, #0
 8006996:	d19d      	bne.n	80068d4 <HAL_SPI_TransmitReceive+0x290>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2246      	movs	r2, #70	; 0x46
 800699c:	5a9b      	ldrh	r3, [r3, r2]
 800699e:	b29b      	uxth	r3, r3
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d197      	bne.n	80068d4 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK) {
 80069a4:	69fa      	ldr	r2, [r7, #28]
 80069a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	0018      	movs	r0, r3
 80069ac:	f000 fa68 	bl	8006e80 <SPI_EndRxTxTransaction>
 80069b0:	1e03      	subs	r3, r0, #0
 80069b2:	d007      	beq.n	80069c4 <HAL_SPI_TransmitReceive+0x380>
    errorcode = HAL_ERROR;
 80069b4:	2323      	movs	r3, #35	; 0x23
 80069b6:	18fb      	adds	r3, r7, r3
 80069b8:	2201      	movs	r2, #1
 80069ba:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2220      	movs	r2, #32
 80069c0:	661a      	str	r2, [r3, #96]	; 0x60
 80069c2:	e000      	b.n	80069c6 <HAL_SPI_TransmitReceive+0x382>
  }

error:
 80069c4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	225d      	movs	r2, #93	; 0x5d
 80069ca:	2101      	movs	r1, #1
 80069cc:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	225c      	movs	r2, #92	; 0x5c
 80069d2:	2100      	movs	r1, #0
 80069d4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80069d6:	2323      	movs	r3, #35	; 0x23
 80069d8:	18fb      	adds	r3, r7, r3
 80069da:	781b      	ldrb	r3, [r3, #0]
}
 80069dc:	0018      	movs	r0, r3
 80069de:	46bd      	mov	sp, r7
 80069e0:	b00a      	add	sp, #40	; 0x28
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	ffffefff 	.word	0xffffefff

080069e8 <HAL_SPI_IRQHandler>:
 * @brief  Handle SPI interrupt request.
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for the specified SPI module.
 * @retval None
 */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi) {
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b088      	sub	sp, #32
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag = hspi->Instance->SR;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	099b      	lsrs	r3, r3, #6
 8006a04:	001a      	movs	r2, r3
 8006a06:	2301      	movs	r3, #1
 8006a08:	4013      	ands	r3, r2
 8006a0a:	d10f      	bne.n	8006a2c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) &&
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006a12:	d00b      	beq.n	8006a2c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET)) {
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	099b      	lsrs	r3, r3, #6
 8006a18:	001a      	movs	r2, r3
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	4013      	ands	r3, r2
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) &&
 8006a1e:	d005      	beq.n	8006a2c <HAL_SPI_IRQHandler+0x44>
    hspi->RxISR(hspi);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	0010      	movs	r0, r2
 8006a28:	4798      	blx	r3
    return;
 8006a2a:	e0d5      	b.n	8006bd8 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) &&
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	085b      	lsrs	r3, r3, #1
 8006a30:	001a      	movs	r2, r3
 8006a32:	2301      	movs	r3, #1
 8006a34:	4013      	ands	r3, r2
 8006a36:	d00b      	beq.n	8006a50 <HAL_SPI_IRQHandler+0x68>
      (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET)) {
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	09db      	lsrs	r3, r3, #7
 8006a3c:	001a      	movs	r2, r3
 8006a3e:	2301      	movs	r3, #1
 8006a40:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) &&
 8006a42:	d005      	beq.n	8006a50 <HAL_SPI_IRQHandler+0x68>
    hspi->TxISR(hspi);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	0010      	movs	r0, r2
 8006a4c:	4798      	blx	r3
    return;
 8006a4e:	e0c3      	b.n	8006bd8 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) ||
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	095b      	lsrs	r3, r3, #5
 8006a54:	001a      	movs	r2, r3
 8006a56:	2301      	movs	r3, #1
 8006a58:	4013      	ands	r3, r2
 8006a5a:	d10c      	bne.n	8006a76 <HAL_SPI_IRQHandler+0x8e>
       (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) ||
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	099b      	lsrs	r3, r3, #6
 8006a60:	001a      	movs	r2, r3
 8006a62:	2301      	movs	r3, #1
 8006a64:	4013      	ands	r3, r2
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) ||
 8006a66:	d106      	bne.n	8006a76 <HAL_SPI_IRQHandler+0x8e>
       (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) &&
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	0a1b      	lsrs	r3, r3, #8
 8006a6c:	001a      	movs	r2, r3
 8006a6e:	2301      	movs	r3, #1
 8006a70:	4013      	ands	r3, r2
       (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) ||
 8006a72:	d100      	bne.n	8006a76 <HAL_SPI_IRQHandler+0x8e>
 8006a74:	e0b0      	b.n	8006bd8 <HAL_SPI_IRQHandler+0x1f0>
      (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET)) {
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	095b      	lsrs	r3, r3, #5
 8006a7a:	001a      	movs	r2, r3
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	4013      	ands	r3, r2
       (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) &&
 8006a80:	d100      	bne.n	8006a84 <HAL_SPI_IRQHandler+0x9c>
 8006a82:	e0a9      	b.n	8006bd8 <HAL_SPI_IRQHandler+0x1f0>
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) {
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	099b      	lsrs	r3, r3, #6
 8006a88:	001a      	movs	r2, r3
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	d023      	beq.n	8006ad8 <HAL_SPI_IRQHandler+0xf0>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX) {
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	225d      	movs	r2, #93	; 0x5d
 8006a94:	5c9b      	ldrb	r3, [r3, r2]
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	2b03      	cmp	r3, #3
 8006a9a:	d011      	beq.n	8006ac0 <HAL_SPI_IRQHandler+0xd8>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aa0:	2204      	movs	r2, #4
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	617b      	str	r3, [r7, #20]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	617b      	str	r3, [r7, #20]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	617b      	str	r3, [r7, #20]
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	e00b      	b.n	8006ad8 <HAL_SPI_IRQHandler+0xf0>
      } else {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	613b      	str	r3, [r7, #16]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	613b      	str	r3, [r7, #16]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	613b      	str	r3, [r7, #16]
 8006ad4:	693b      	ldr	r3, [r7, #16]
        return;
 8006ad6:	e07f      	b.n	8006bd8 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) {
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	095b      	lsrs	r3, r3, #5
 8006adc:	001a      	movs	r2, r3
 8006ade:	2301      	movs	r3, #1
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	d014      	beq.n	8006b0e <HAL_SPI_IRQHandler+0x126>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ae8:	2201      	movs	r2, #1
 8006aea:	431a      	orrs	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006af0:	2300      	movs	r3, #0
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2140      	movs	r1, #64	; 0x40
 8006b08:	438a      	bics	r2, r1
 8006b0a:	601a      	str	r2, [r3, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET) {
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	0a1b      	lsrs	r3, r3, #8
 8006b12:	001a      	movs	r2, r3
 8006b14:	2301      	movs	r3, #1
 8006b16:	4013      	ands	r3, r2
 8006b18:	d00c      	beq.n	8006b34 <HAL_SPI_IRQHandler+0x14c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b1e:	2208      	movs	r2, #8
 8006b20:	431a      	orrs	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006b26:	2300      	movs	r3, #0
 8006b28:	60bb      	str	r3, [r7, #8]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	60bb      	str	r3, [r7, #8]
 8006b32:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE) {
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d04c      	beq.n	8006bd6 <HAL_SPI_IRQHandler+0x1ee>
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	21e0      	movs	r1, #224	; 0xe0
 8006b48:	438a      	bics	r2, r1
 8006b4a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	225d      	movs	r2, #93	; 0x5d
 8006b50:	2101      	movs	r1, #1
 8006b52:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) ||
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	2202      	movs	r2, #2
 8006b58:	4013      	ands	r3, r2
 8006b5a:	d103      	bne.n	8006b64 <HAL_SPI_IRQHandler+0x17c>
          (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN))) {
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) ||
 8006b62:	d032      	beq.n	8006bca <HAL_SPI_IRQHandler+0x1e2>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685a      	ldr	r2, [r3, #4]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2103      	movs	r1, #3
 8006b70:	438a      	bics	r2, r1
 8006b72:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL) {
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d010      	beq.n	8006b9e <HAL_SPI_IRQHandler+0x1b6>
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort
          procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b80:	4a17      	ldr	r2, [pc, #92]	; (8006be0 <HAL_SPI_IRQHandler+0x1f8>)
 8006b82:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx)) {
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b88:	0018      	movs	r0, r3
 8006b8a:	f7fe fa25 	bl	8004fd8 <HAL_DMA_Abort_IT>
 8006b8e:	1e03      	subs	r3, r0, #0
 8006b90:	d005      	beq.n	8006b9e <HAL_SPI_IRQHandler+0x1b6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b96:	2240      	movs	r2, #64	; 0x40
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL) {
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d016      	beq.n	8006bd4 <HAL_SPI_IRQHandler+0x1ec>
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort
          procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006baa:	4a0d      	ldr	r2, [pc, #52]	; (8006be0 <HAL_SPI_IRQHandler+0x1f8>)
 8006bac:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx)) {
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	f7fe fa10 	bl	8004fd8 <HAL_DMA_Abort_IT>
 8006bb8:	1e03      	subs	r3, r0, #0
 8006bba:	d00b      	beq.n	8006bd4 <HAL_SPI_IRQHandler+0x1ec>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bc0:	2240      	movs	r2, #64	; 0x40
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL) {
 8006bc8:	e004      	b.n	8006bd4 <HAL_SPI_IRQHandler+0x1ec>
      } else {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	0018      	movs	r0, r3
 8006bce:	f000 f809 	bl	8006be4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006bd2:	e000      	b.n	8006bd6 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL) {
 8006bd4:	46c0      	nop			; (mov r8, r8)
    return;
 8006bd6:	46c0      	nop			; (mov r8, r8)
  }
}
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	b008      	add	sp, #32
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	46c0      	nop			; (mov r8, r8)
 8006be0:	08006bf5 	.word	0x08006bf5

08006be4 <HAL_SPI_ErrorCallback>:
 * @brief  SPI error callback.
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval None
 */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI
     processes and user can use HAL_SPI_GetError() API to check the latest error
     occurred
   */
}
 8006bec:	46c0      	nop			; (mov r8, r8)
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	b002      	add	sp, #8
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <SPI_DMAAbortOnError>:
 * on Error (To be called at end of DMA Abort procedure following error
 * occurrence).
 * @param  hdma DMA handle.
 * @retval None
 */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma) {
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi =
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c00:	60fb      	str	r3, [r7, #12]
      (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)
                                ->Parent); /* Derogation MISRAC2012-Rule-11.5 */
  hspi->RxXferCount = 0U;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2246      	movs	r2, #70	; 0x46
 8006c06:	2100      	movs	r1, #0
 8006c08:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	0018      	movs	r0, r3
 8006c14:	f7ff ffe6 	bl	8006be4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c18:	46c0      	nop			; (mov r8, r8)
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	b004      	add	sp, #16
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <SPI_WaitFlagStateUntilTimeout>:
 */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi,
                                                       uint32_t Flag,
                                                       FlagStatus State,
                                                       uint32_t Timeout,
                                                       uint32_t Tickstart) {
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b088      	sub	sp, #32
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	603b      	str	r3, [r7, #0]
 8006c2c:	1dfb      	adds	r3, r7, #7
 8006c2e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006c30:	f7fd fbb0 	bl	8004394 <HAL_GetTick>
 8006c34:	0002      	movs	r2, r0
 8006c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c38:	1a9b      	subs	r3, r3, r2
 8006c3a:	683a      	ldr	r2, [r7, #0]
 8006c3c:	18d3      	adds	r3, r2, r3
 8006c3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c40:	f7fd fba8 	bl	8004394 <HAL_GetTick>
 8006c44:	0003      	movs	r3, r0
 8006c46:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if
   * Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c48:	4b3a      	ldr	r3, [pc, #232]	; (8006d34 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	015b      	lsls	r3, r3, #5
 8006c4e:	0d1b      	lsrs	r3, r3, #20
 8006c50:	69fa      	ldr	r2, [r7, #28]
 8006c52:	4353      	muls	r3, r2
 8006c54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State) {
 8006c56:	e058      	b.n	8006d0a <SPI_WaitFlagStateUntilTimeout+0xea>
    if (Timeout != HAL_MAX_DELAY) {
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	d055      	beq.n	8006d0a <SPI_WaitFlagStateUntilTimeout+0xea>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) ||
 8006c5e:	f7fd fb99 	bl	8004394 <HAL_GetTick>
 8006c62:	0002      	movs	r2, r0
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	69fa      	ldr	r2, [r7, #28]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d902      	bls.n	8006c74 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d142      	bne.n	8006cfa <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685a      	ldr	r2, [r3, #4]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	21e0      	movs	r1, #224	; 0xe0
 8006c80:	438a      	bics	r2, r1
 8006c82:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) &&
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	685a      	ldr	r2, [r3, #4]
 8006c88:	2382      	movs	r3, #130	; 0x82
 8006c8a:	005b      	lsls	r3, r3, #1
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d113      	bne.n	8006cb8 <SPI_WaitFlagStateUntilTimeout+0x98>
            ((hspi->Init.Direction == SPI_DIRECTION_1LINE) ||
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	689a      	ldr	r2, [r3, #8]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) &&
 8006c94:	2380      	movs	r3, #128	; 0x80
 8006c96:	021b      	lsls	r3, r3, #8
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d005      	beq.n	8006ca8 <SPI_WaitFlagStateUntilTimeout+0x88>
             (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))) {
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	689a      	ldr	r2, [r3, #8]
            ((hspi->Init.Direction == SPI_DIRECTION_1LINE) ||
 8006ca0:	2380      	movs	r3, #128	; 0x80
 8006ca2:	00db      	lsls	r3, r3, #3
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d107      	bne.n	8006cb8 <SPI_WaitFlagStateUntilTimeout+0x98>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2140      	movs	r1, #64	; 0x40
 8006cb4:	438a      	bics	r2, r1
 8006cb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) {
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cbc:	2380      	movs	r3, #128	; 0x80
 8006cbe:	019b      	lsls	r3, r3, #6
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d110      	bne.n	8006ce6 <SPI_WaitFlagStateUntilTimeout+0xc6>
          SPI_RESET_CRC(hspi);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	491a      	ldr	r1, [pc, #104]	; (8006d38 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006cd0:	400a      	ands	r2, r1
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2180      	movs	r1, #128	; 0x80
 8006ce0:	0189      	lsls	r1, r1, #6
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	225d      	movs	r2, #93	; 0x5d
 8006cea:	2101      	movs	r1, #1
 8006cec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	225c      	movs	r2, #92	; 0x5c
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e017      	b.n	8006d2a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in
       * disable loop procedure */
      if (count == 0U) {
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d101      	bne.n	8006d04 <SPI_WaitFlagStateUntilTimeout+0xe4>
        tmp_timeout = 0U;
 8006d00:	2300      	movs	r3, #0
 8006d02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	3b01      	subs	r3, #1
 8006d08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State) {
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	4013      	ands	r3, r2
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	425a      	negs	r2, r3
 8006d1a:	4153      	adcs	r3, r2
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	001a      	movs	r2, r3
 8006d20:	1dfb      	adds	r3, r7, #7
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d197      	bne.n	8006c58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	0018      	movs	r0, r3
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	b008      	add	sp, #32
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	46c0      	nop			; (mov r8, r8)
 8006d34:	20000000 	.word	0x20000000
 8006d38:	ffffdfff 	.word	0xffffdfff

08006d3c <SPI_WaitFifoStateUntilTimeout>:
 */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi,
                                                       uint32_t Fifo,
                                                       uint32_t State,
                                                       uint32_t Timeout,
                                                       uint32_t Tickstart) {
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b08a      	sub	sp, #40	; 0x28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
 8006d48:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t *ptmpreg8;
  __IO uint8_t tmpreg8 = 0;
 8006d4a:	2317      	movs	r3, #23
 8006d4c:	18fb      	adds	r3, r7, r3
 8006d4e:	2200      	movs	r2, #0
 8006d50:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006d52:	f7fd fb1f 	bl	8004394 <HAL_GetTick>
 8006d56:	0002      	movs	r2, r0
 8006d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5a:	1a9b      	subs	r3, r3, r2
 8006d5c:	683a      	ldr	r2, [r7, #0]
 8006d5e:	18d3      	adds	r3, r2, r3
 8006d60:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006d62:	f7fd fb17 	bl	8004394 <HAL_GetTick>
 8006d66:	0003      	movs	r3, r0
 8006d68:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	330c      	adds	r3, #12
 8006d70:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if
   * Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006d72:	4b41      	ldr	r3, [pc, #260]	; (8006e78 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	0013      	movs	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	189b      	adds	r3, r3, r2
 8006d7c:	00da      	lsls	r2, r3, #3
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	0d1b      	lsrs	r3, r3, #20
 8006d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d84:	4353      	muls	r3, r2
 8006d86:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State) {
 8006d88:	e068      	b.n	8006e5c <SPI_WaitFifoStateUntilTimeout+0x120>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY)) {
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	23c0      	movs	r3, #192	; 0xc0
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d10a      	bne.n	8006daa <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d107      	bne.n	8006daa <SPI_WaitFifoStateUntilTimeout+0x6e>
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	2117      	movs	r1, #23
 8006da2:	187b      	adds	r3, r7, r1
 8006da4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006da6:	187b      	adds	r3, r7, r1
 8006da8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY) {
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	3301      	adds	r3, #1
 8006dae:	d055      	beq.n	8006e5c <SPI_WaitFifoStateUntilTimeout+0x120>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) ||
 8006db0:	f7fd faf0 	bl	8004394 <HAL_GetTick>
 8006db4:	0002      	movs	r2, r0
 8006db6:	6a3b      	ldr	r3, [r7, #32]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d902      	bls.n	8006dc6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d142      	bne.n	8006e4c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	21e0      	movs	r1, #224	; 0xe0
 8006dd2:	438a      	bics	r2, r1
 8006dd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) &&
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	2382      	movs	r3, #130	; 0x82
 8006ddc:	005b      	lsls	r3, r3, #1
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d113      	bne.n	8006e0a <SPI_WaitFifoStateUntilTimeout+0xce>
            ((hspi->Init.Direction == SPI_DIRECTION_1LINE) ||
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	689a      	ldr	r2, [r3, #8]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) &&
 8006de6:	2380      	movs	r3, #128	; 0x80
 8006de8:	021b      	lsls	r3, r3, #8
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d005      	beq.n	8006dfa <SPI_WaitFifoStateUntilTimeout+0xbe>
             (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))) {
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	689a      	ldr	r2, [r3, #8]
            ((hspi->Init.Direction == SPI_DIRECTION_1LINE) ||
 8006df2:	2380      	movs	r3, #128	; 0x80
 8006df4:	00db      	lsls	r3, r3, #3
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d107      	bne.n	8006e0a <SPI_WaitFifoStateUntilTimeout+0xce>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2140      	movs	r1, #64	; 0x40
 8006e06:	438a      	bics	r2, r1
 8006e08:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) {
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e0e:	2380      	movs	r3, #128	; 0x80
 8006e10:	019b      	lsls	r3, r3, #6
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d110      	bne.n	8006e38 <SPI_WaitFifoStateUntilTimeout+0xfc>
          SPI_RESET_CRC(hspi);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4916      	ldr	r1, [pc, #88]	; (8006e7c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006e22:	400a      	ands	r2, r1
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2180      	movs	r1, #128	; 0x80
 8006e32:	0189      	lsls	r1, r1, #6
 8006e34:	430a      	orrs	r2, r1
 8006e36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	225d      	movs	r2, #93	; 0x5d
 8006e3c:	2101      	movs	r1, #1
 8006e3e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	225c      	movs	r2, #92	; 0x5c
 8006e44:	2100      	movs	r1, #0
 8006e46:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e010      	b.n	8006e6e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in
       * disable loop procedure */
      if (count == 0U) {
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <SPI_WaitFifoStateUntilTimeout+0x11a>
        tmp_timeout = 0U;
 8006e52:	2300      	movs	r3, #0
 8006e54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State) {
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	4013      	ands	r3, r2
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d18e      	bne.n	8006d8a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	0018      	movs	r0, r3
 8006e70:	46bd      	mov	sp, r7
 8006e72:	b00a      	add	sp, #40	; 0x28
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	46c0      	nop			; (mov r8, r8)
 8006e78:	20000000 	.word	0x20000000
 8006e7c:	ffffdfff 	.word	0xffffdfff

08006e80 <SPI_EndRxTxTransaction>:
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi,
                                                uint32_t Timeout,
                                                uint32_t Tickstart) {
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af02      	add	r7, sp, #8
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY,
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	23c0      	movs	r3, #192	; 0xc0
 8006e90:	0159      	lsls	r1, r3, #5
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	0013      	movs	r3, r2
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f7ff ff4e 	bl	8006d3c <SPI_WaitFifoStateUntilTimeout>
 8006ea0:	1e03      	subs	r3, r0, #0
 8006ea2:	d007      	beq.n	8006eb4 <SPI_EndRxTxTransaction+0x34>
                                    Timeout, Tickstart) != HAL_OK) {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ea8:	2220      	movs	r2, #32
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e027      	b.n	8006f04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout,
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	9300      	str	r3, [sp, #0]
 8006ebc:	0013      	movs	r3, r2
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	2180      	movs	r1, #128	; 0x80
 8006ec2:	f7ff fead 	bl	8006c20 <SPI_WaitFlagStateUntilTimeout>
 8006ec6:	1e03      	subs	r3, r0, #0
 8006ec8:	d007      	beq.n	8006eda <SPI_EndRxTxTransaction+0x5a>
                                    Tickstart) != HAL_OK) {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ece:	2220      	movs	r2, #32
 8006ed0:	431a      	orrs	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e014      	b.n	8006f04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY,
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	23c0      	movs	r3, #192	; 0xc0
 8006ede:	00d9      	lsls	r1, r3, #3
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	0013      	movs	r3, r2
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f7ff ff27 	bl	8006d3c <SPI_WaitFifoStateUntilTimeout>
 8006eee:	1e03      	subs	r3, r0, #0
 8006ef0:	d007      	beq.n	8006f02 <SPI_EndRxTxTransaction+0x82>
                                    Timeout, Tickstart) != HAL_OK) {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	431a      	orrs	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e000      	b.n	8006f04 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	0018      	movs	r0, r3
 8006f06:	46bd      	mov	sp, r7
 8006f08:	b004      	add	sp, #16
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <HAL_TIM_Base_Init>:
 * readonly in center aligned mode. Ex: call @ref HAL_TIM_Base_DeInit() before
 * HAL_TIM_Base_Init()
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim) {
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL) {
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d101      	bne.n	8006f1e <HAL_TIM_Base_Init+0x12>
    return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e04a      	b.n	8006fb4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET) {
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	223d      	movs	r2, #61	; 0x3d
 8006f22:	5c9b      	ldrb	r3, [r3, r2]
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d107      	bne.n	8006f3a <HAL_TIM_Base_Init+0x2e>
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	223c      	movs	r2, #60	; 0x3c
 8006f2e:	2100      	movs	r1, #0
 8006f30:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	0018      	movs	r0, r3
 8006f36:	f7fd f815 	bl	8003f64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	223d      	movs	r2, #61	; 0x3d
 8006f3e:	2102      	movs	r1, #2
 8006f40:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	3304      	adds	r3, #4
 8006f4a:	0019      	movs	r1, r3
 8006f4c:	0010      	movs	r0, r2
 8006f4e:	f000 fadd 	bl	800750c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2248      	movs	r2, #72	; 0x48
 8006f56:	2101      	movs	r1, #1
 8006f58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	223e      	movs	r2, #62	; 0x3e
 8006f5e:	2101      	movs	r1, #1
 8006f60:	5499      	strb	r1, [r3, r2]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	223f      	movs	r2, #63	; 0x3f
 8006f66:	2101      	movs	r1, #1
 8006f68:	5499      	strb	r1, [r3, r2]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2240      	movs	r2, #64	; 0x40
 8006f6e:	2101      	movs	r1, #1
 8006f70:	5499      	strb	r1, [r3, r2]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2241      	movs	r2, #65	; 0x41
 8006f76:	2101      	movs	r1, #1
 8006f78:	5499      	strb	r1, [r3, r2]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2242      	movs	r2, #66	; 0x42
 8006f7e:	2101      	movs	r1, #1
 8006f80:	5499      	strb	r1, [r3, r2]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2243      	movs	r2, #67	; 0x43
 8006f86:	2101      	movs	r1, #1
 8006f88:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2244      	movs	r2, #68	; 0x44
 8006f8e:	2101      	movs	r1, #1
 8006f90:	5499      	strb	r1, [r3, r2]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2245      	movs	r2, #69	; 0x45
 8006f96:	2101      	movs	r1, #1
 8006f98:	5499      	strb	r1, [r3, r2]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2246      	movs	r2, #70	; 0x46
 8006f9e:	2101      	movs	r1, #1
 8006fa0:	5499      	strb	r1, [r3, r2]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2247      	movs	r2, #71	; 0x47
 8006fa6:	2101      	movs	r1, #1
 8006fa8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	223d      	movs	r2, #61	; 0x3d
 8006fae:	2101      	movs	r1, #1
 8006fb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	0018      	movs	r0, r3
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	b002      	add	sp, #8
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <HAL_TIM_Base_Start_IT>:
/**
 * @brief  Starts the TIM Base generation in interrupt mode.
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim) {
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY) {
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	223d      	movs	r2, #61	; 0x3d
 8006fc8:	5c9b      	ldrb	r3, [r3, r2]
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d001      	beq.n	8006fd4 <HAL_TIM_Base_Start_IT+0x18>
    return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e042      	b.n	800705a <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	223d      	movs	r2, #61	; 0x3d
 8006fd8:	2102      	movs	r1, #2
 8006fda:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68da      	ldr	r2, [r3, #12]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2101      	movs	r1, #1
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically
   * done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance)) {
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a1c      	ldr	r2, [pc, #112]	; (8007064 <HAL_TIM_Base_Start_IT+0xa8>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d00f      	beq.n	8007016 <HAL_TIM_Base_Start_IT+0x5a>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	2380      	movs	r3, #128	; 0x80
 8006ffc:	05db      	lsls	r3, r3, #23
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d009      	beq.n	8007016 <HAL_TIM_Base_Start_IT+0x5a>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a18      	ldr	r2, [pc, #96]	; (8007068 <HAL_TIM_Base_Start_IT+0xac>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d004      	beq.n	8007016 <HAL_TIM_Base_Start_IT+0x5a>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a16      	ldr	r2, [pc, #88]	; (800706c <HAL_TIM_Base_Start_IT+0xb0>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d116      	bne.n	8007044 <HAL_TIM_Base_Start_IT+0x88>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	4a14      	ldr	r2, [pc, #80]	; (8007070 <HAL_TIM_Base_Start_IT+0xb4>)
 800701e:	4013      	ands	r3, r2
 8007020:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2b06      	cmp	r3, #6
 8007026:	d016      	beq.n	8007056 <HAL_TIM_Base_Start_IT+0x9a>
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	2380      	movs	r3, #128	; 0x80
 800702c:	025b      	lsls	r3, r3, #9
 800702e:	429a      	cmp	r2, r3
 8007030:	d011      	beq.n	8007056 <HAL_TIM_Base_Start_IT+0x9a>
      __HAL_TIM_ENABLE(htim);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2101      	movs	r1, #1
 800703e:	430a      	orrs	r2, r1
 8007040:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 8007042:	e008      	b.n	8007056 <HAL_TIM_Base_Start_IT+0x9a>
    }
  } else {
    __HAL_TIM_ENABLE(htim);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2101      	movs	r1, #1
 8007050:	430a      	orrs	r2, r1
 8007052:	601a      	str	r2, [r3, #0]
 8007054:	e000      	b.n	8007058 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 8007056:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	0018      	movs	r0, r3
 800705c:	46bd      	mov	sp, r7
 800705e:	b004      	add	sp, #16
 8007060:	bd80      	pop	{r7, pc}
 8007062:	46c0      	nop			; (mov r8, r8)
 8007064:	40012c00 	.word	0x40012c00
 8007068:	40000400 	.word	0x40000400
 800706c:	40014000 	.word	0x40014000
 8007070:	00010007 	.word	0x00010007

08007074 <HAL_TIM_Base_Stop_IT>:
/**
 * @brief  Stops the TIM Base generation in interrupt mode.
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim) {
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68da      	ldr	r2, [r3, #12]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2101      	movs	r1, #1
 8007088:	438a      	bics	r2, r1
 800708a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	4a0d      	ldr	r2, [pc, #52]	; (80070c8 <HAL_TIM_Base_Stop_IT+0x54>)
 8007094:	4013      	ands	r3, r2
 8007096:	d10d      	bne.n	80070b4 <HAL_TIM_Base_Stop_IT+0x40>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	4a0b      	ldr	r2, [pc, #44]	; (80070cc <HAL_TIM_Base_Stop_IT+0x58>)
 80070a0:	4013      	ands	r3, r2
 80070a2:	d107      	bne.n	80070b4 <HAL_TIM_Base_Stop_IT+0x40>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2101      	movs	r1, #1
 80070b0:	438a      	bics	r2, r1
 80070b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	223d      	movs	r2, #61	; 0x3d
 80070b8:	2101      	movs	r1, #1
 80070ba:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	0018      	movs	r0, r3
 80070c0:	46bd      	mov	sp, r7
 80070c2:	b002      	add	sp, #8
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	46c0      	nop			; (mov r8, r8)
 80070c8:	00001111 	.word	0x00001111
 80070cc:	00000444 	.word	0x00000444

080070d0 <HAL_TIM_IRQHandler>:
/**
 * @brief  This function handles TIM interrupts requests.
 * @param  htim TIM  handle
 * @retval None
 */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim) {
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET) {
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	2202      	movs	r2, #2
 80070e0:	4013      	ands	r3, r2
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d124      	bne.n	8007130 <HAL_TIM_IRQHandler+0x60>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET) {
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	2202      	movs	r2, #2
 80070ee:	4013      	ands	r3, r2
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d11d      	bne.n	8007130 <HAL_TIM_IRQHandler+0x60>
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2203      	movs	r2, #3
 80070fa:	4252      	negs	r2, r2
 80070fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U) {
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	2203      	movs	r2, #3
 800710c:	4013      	ands	r3, r2
 800710e:	d004      	beq.n	800711a <HAL_TIM_IRQHandler+0x4a>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	0018      	movs	r0, r3
 8007114:	f000 f9e2 	bl	80074dc <HAL_TIM_IC_CaptureCallback>
 8007118:	e007      	b.n	800712a <HAL_TIM_IRQHandler+0x5a>
        else {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	0018      	movs	r0, r3
 800711e:	f000 f9d5 	bl	80074cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	0018      	movs	r0, r3
 8007126:	f000 f9e1 	bl	80074ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET) {
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	2204      	movs	r2, #4
 8007138:	4013      	ands	r3, r2
 800713a:	2b04      	cmp	r3, #4
 800713c:	d125      	bne.n	800718a <HAL_TIM_IRQHandler+0xba>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET) {
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	2204      	movs	r2, #4
 8007146:	4013      	ands	r3, r2
 8007148:	2b04      	cmp	r3, #4
 800714a:	d11e      	bne.n	800718a <HAL_TIM_IRQHandler+0xba>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2205      	movs	r2, #5
 8007152:	4252      	negs	r2, r2
 8007154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2202      	movs	r2, #2
 800715a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U) {
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	699a      	ldr	r2, [r3, #24]
 8007162:	23c0      	movs	r3, #192	; 0xc0
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4013      	ands	r3, r2
 8007168:	d004      	beq.n	8007174 <HAL_TIM_IRQHandler+0xa4>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	0018      	movs	r0, r3
 800716e:	f000 f9b5 	bl	80074dc <HAL_TIM_IC_CaptureCallback>
 8007172:	e007      	b.n	8007184 <HAL_TIM_IRQHandler+0xb4>
      else {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	0018      	movs	r0, r3
 8007178:	f000 f9a8 	bl	80074cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	0018      	movs	r0, r3
 8007180:	f000 f9b4 	bl	80074ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET) {
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	2208      	movs	r2, #8
 8007192:	4013      	ands	r3, r2
 8007194:	2b08      	cmp	r3, #8
 8007196:	d124      	bne.n	80071e2 <HAL_TIM_IRQHandler+0x112>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET) {
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	2208      	movs	r2, #8
 80071a0:	4013      	ands	r3, r2
 80071a2:	2b08      	cmp	r3, #8
 80071a4:	d11d      	bne.n	80071e2 <HAL_TIM_IRQHandler+0x112>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2209      	movs	r2, #9
 80071ac:	4252      	negs	r2, r2
 80071ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2204      	movs	r2, #4
 80071b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U) {
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	2203      	movs	r2, #3
 80071be:	4013      	ands	r3, r2
 80071c0:	d004      	beq.n	80071cc <HAL_TIM_IRQHandler+0xfc>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	0018      	movs	r0, r3
 80071c6:	f000 f989 	bl	80074dc <HAL_TIM_IC_CaptureCallback>
 80071ca:	e007      	b.n	80071dc <HAL_TIM_IRQHandler+0x10c>
      else {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	0018      	movs	r0, r3
 80071d0:	f000 f97c 	bl	80074cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	0018      	movs	r0, r3
 80071d8:	f000 f988 	bl	80074ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET) {
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	2210      	movs	r2, #16
 80071ea:	4013      	ands	r3, r2
 80071ec:	2b10      	cmp	r3, #16
 80071ee:	d125      	bne.n	800723c <HAL_TIM_IRQHandler+0x16c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET) {
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	2210      	movs	r2, #16
 80071f8:	4013      	ands	r3, r2
 80071fa:	2b10      	cmp	r3, #16
 80071fc:	d11e      	bne.n	800723c <HAL_TIM_IRQHandler+0x16c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2211      	movs	r2, #17
 8007204:	4252      	negs	r2, r2
 8007206:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2208      	movs	r2, #8
 800720c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U) {
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	69da      	ldr	r2, [r3, #28]
 8007214:	23c0      	movs	r3, #192	; 0xc0
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4013      	ands	r3, r2
 800721a:	d004      	beq.n	8007226 <HAL_TIM_IRQHandler+0x156>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	0018      	movs	r0, r3
 8007220:	f000 f95c 	bl	80074dc <HAL_TIM_IC_CaptureCallback>
 8007224:	e007      	b.n	8007236 <HAL_TIM_IRQHandler+0x166>
      else {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	0018      	movs	r0, r3
 800722a:	f000 f94f 	bl	80074cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	0018      	movs	r0, r3
 8007232:	f000 f95b 	bl	80074ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET) {
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	2201      	movs	r2, #1
 8007244:	4013      	ands	r3, r2
 8007246:	2b01      	cmp	r3, #1
 8007248:	d10f      	bne.n	800726a <HAL_TIM_IRQHandler+0x19a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET) {
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	2201      	movs	r2, #1
 8007252:	4013      	ands	r3, r2
 8007254:	2b01      	cmp	r3, #1
 8007256:	d108      	bne.n	800726a <HAL_TIM_IRQHandler+0x19a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2202      	movs	r2, #2
 800725e:	4252      	negs	r2, r2
 8007260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	0018      	movs	r0, r3
 8007266:	f7fb ff5b 	bl	8003120 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET) {
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	2280      	movs	r2, #128	; 0x80
 8007272:	4013      	ands	r3, r2
 8007274:	2b80      	cmp	r3, #128	; 0x80
 8007276:	d10f      	bne.n	8007298 <HAL_TIM_IRQHandler+0x1c8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET) {
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	2280      	movs	r2, #128	; 0x80
 8007280:	4013      	ands	r3, r2
 8007282:	2b80      	cmp	r3, #128	; 0x80
 8007284:	d108      	bne.n	8007298 <HAL_TIM_IRQHandler+0x1c8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2281      	movs	r2, #129	; 0x81
 800728c:	4252      	negs	r2, r2
 800728e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	0018      	movs	r0, r3
 8007294:	f000 facc 	bl	8007830 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET) {
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	691a      	ldr	r2, [r3, #16]
 800729e:	2380      	movs	r3, #128	; 0x80
 80072a0:	005b      	lsls	r3, r3, #1
 80072a2:	401a      	ands	r2, r3
 80072a4:	2380      	movs	r3, #128	; 0x80
 80072a6:	005b      	lsls	r3, r3, #1
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d10e      	bne.n	80072ca <HAL_TIM_IRQHandler+0x1fa>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET) {
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	2280      	movs	r2, #128	; 0x80
 80072b4:	4013      	ands	r3, r2
 80072b6:	2b80      	cmp	r3, #128	; 0x80
 80072b8:	d107      	bne.n	80072ca <HAL_TIM_IRQHandler+0x1fa>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a1c      	ldr	r2, [pc, #112]	; (8007330 <HAL_TIM_IRQHandler+0x260>)
 80072c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	0018      	movs	r0, r3
 80072c6:	f000 fabb 	bl	8007840 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET) {
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	2240      	movs	r2, #64	; 0x40
 80072d2:	4013      	ands	r3, r2
 80072d4:	2b40      	cmp	r3, #64	; 0x40
 80072d6:	d10f      	bne.n	80072f8 <HAL_TIM_IRQHandler+0x228>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET) {
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	2240      	movs	r2, #64	; 0x40
 80072e0:	4013      	ands	r3, r2
 80072e2:	2b40      	cmp	r3, #64	; 0x40
 80072e4:	d108      	bne.n	80072f8 <HAL_TIM_IRQHandler+0x228>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2241      	movs	r2, #65	; 0x41
 80072ec:	4252      	negs	r2, r2
 80072ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	0018      	movs	r0, r3
 80072f4:	f000 f902 	bl	80074fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET) {
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	2220      	movs	r2, #32
 8007300:	4013      	ands	r3, r2
 8007302:	2b20      	cmp	r3, #32
 8007304:	d10f      	bne.n	8007326 <HAL_TIM_IRQHandler+0x256>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET) {
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	2220      	movs	r2, #32
 800730e:	4013      	ands	r3, r2
 8007310:	2b20      	cmp	r3, #32
 8007312:	d108      	bne.n	8007326 <HAL_TIM_IRQHandler+0x256>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2221      	movs	r2, #33	; 0x21
 800731a:	4252      	negs	r2, r2
 800731c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	0018      	movs	r0, r3
 8007322:	f000 fa7d 	bl	8007820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007326:	46c0      	nop			; (mov r8, r8)
 8007328:	46bd      	mov	sp, r7
 800732a:	b002      	add	sp, #8
 800732c:	bd80      	pop	{r7, pc}
 800732e:	46c0      	nop			; (mov r8, r8)
 8007330:	fffffeff 	.word	0xfffffeff

08007334 <HAL_TIM_ConfigClockSource>:
 *         contains the clock source information for the TIM peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef
HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim,
                          TIM_ClockConfigTypeDef *sClockSourceConfig) {
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	223c      	movs	r2, #60	; 0x3c
 8007342:	5c9b      	ldrb	r3, [r3, r2]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d101      	bne.n	800734c <HAL_TIM_ConfigClockSource+0x18>
 8007348:	2302      	movs	r3, #2
 800734a:	e0b7      	b.n	80074bc <HAL_TIM_ConfigClockSource+0x188>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	223c      	movs	r2, #60	; 0x3c
 8007350:	2101      	movs	r1, #1
 8007352:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	223d      	movs	r2, #61	; 0x3d
 8007358:	2102      	movs	r1, #2
 800735a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	4a57      	ldr	r2, [pc, #348]	; (80074c4 <HAL_TIM_ConfigClockSource+0x190>)
 8007368:	4013      	ands	r3, r2
 800736a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4a56      	ldr	r2, [pc, #344]	; (80074c8 <HAL_TIM_ConfigClockSource+0x194>)
 8007370:	4013      	ands	r3, r2
 8007372:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource) {
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2280      	movs	r2, #128	; 0x80
 8007382:	0192      	lsls	r2, r2, #6
 8007384:	4293      	cmp	r3, r2
 8007386:	d040      	beq.n	800740a <HAL_TIM_ConfigClockSource+0xd6>
 8007388:	2280      	movs	r2, #128	; 0x80
 800738a:	0192      	lsls	r2, r2, #6
 800738c:	4293      	cmp	r3, r2
 800738e:	d900      	bls.n	8007392 <HAL_TIM_ConfigClockSource+0x5e>
 8007390:	e088      	b.n	80074a4 <HAL_TIM_ConfigClockSource+0x170>
 8007392:	2280      	movs	r2, #128	; 0x80
 8007394:	0152      	lsls	r2, r2, #5
 8007396:	4293      	cmp	r3, r2
 8007398:	d100      	bne.n	800739c <HAL_TIM_ConfigClockSource+0x68>
 800739a:	e085      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x174>
 800739c:	2280      	movs	r2, #128	; 0x80
 800739e:	0152      	lsls	r2, r2, #5
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d900      	bls.n	80073a6 <HAL_TIM_ConfigClockSource+0x72>
 80073a4:	e07e      	b.n	80074a4 <HAL_TIM_ConfigClockSource+0x170>
 80073a6:	2b70      	cmp	r3, #112	; 0x70
 80073a8:	d018      	beq.n	80073dc <HAL_TIM_ConfigClockSource+0xa8>
 80073aa:	d900      	bls.n	80073ae <HAL_TIM_ConfigClockSource+0x7a>
 80073ac:	e07a      	b.n	80074a4 <HAL_TIM_ConfigClockSource+0x170>
 80073ae:	2b60      	cmp	r3, #96	; 0x60
 80073b0:	d04f      	beq.n	8007452 <HAL_TIM_ConfigClockSource+0x11e>
 80073b2:	d900      	bls.n	80073b6 <HAL_TIM_ConfigClockSource+0x82>
 80073b4:	e076      	b.n	80074a4 <HAL_TIM_ConfigClockSource+0x170>
 80073b6:	2b50      	cmp	r3, #80	; 0x50
 80073b8:	d03b      	beq.n	8007432 <HAL_TIM_ConfigClockSource+0xfe>
 80073ba:	d900      	bls.n	80073be <HAL_TIM_ConfigClockSource+0x8a>
 80073bc:	e072      	b.n	80074a4 <HAL_TIM_ConfigClockSource+0x170>
 80073be:	2b40      	cmp	r3, #64	; 0x40
 80073c0:	d057      	beq.n	8007472 <HAL_TIM_ConfigClockSource+0x13e>
 80073c2:	d900      	bls.n	80073c6 <HAL_TIM_ConfigClockSource+0x92>
 80073c4:	e06e      	b.n	80074a4 <HAL_TIM_ConfigClockSource+0x170>
 80073c6:	2b30      	cmp	r3, #48	; 0x30
 80073c8:	d063      	beq.n	8007492 <HAL_TIM_ConfigClockSource+0x15e>
 80073ca:	d86b      	bhi.n	80074a4 <HAL_TIM_ConfigClockSource+0x170>
 80073cc:	2b20      	cmp	r3, #32
 80073ce:	d060      	beq.n	8007492 <HAL_TIM_ConfigClockSource+0x15e>
 80073d0:	d868      	bhi.n	80074a4 <HAL_TIM_ConfigClockSource+0x170>
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d05d      	beq.n	8007492 <HAL_TIM_ConfigClockSource+0x15e>
 80073d6:	2b10      	cmp	r3, #16
 80073d8:	d05b      	beq.n	8007492 <HAL_TIM_ConfigClockSource+0x15e>
    TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
    break;
  }

  default:
    break;
 80073da:	e063      	b.n	80074a4 <HAL_TIM_ConfigClockSource+0x170>
    TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6818      	ldr	r0, [r3, #0]
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	6899      	ldr	r1, [r3, #8]
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	685a      	ldr	r2, [r3, #4]
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	f000 f98a 	bl	8007704 <TIM_ETR_SetConfig>
    tmpsmcr = htim->Instance->SMCR;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	60fb      	str	r3, [r7, #12]
    tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2277      	movs	r2, #119	; 0x77
 80073fc:	4313      	orrs	r3, r2
 80073fe:	60fb      	str	r3, [r7, #12]
    htim->Instance->SMCR = tmpsmcr;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	609a      	str	r2, [r3, #8]
    break;
 8007408:	e04f      	b.n	80074aa <HAL_TIM_ConfigClockSource+0x176>
    TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6818      	ldr	r0, [r3, #0]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	6899      	ldr	r1, [r3, #8]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	f000 f973 	bl	8007704 <TIM_ETR_SetConfig>
    htim->Instance->SMCR |= TIM_SMCR_ECE;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689a      	ldr	r2, [r3, #8]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2180      	movs	r1, #128	; 0x80
 800742a:	01c9      	lsls	r1, r1, #7
 800742c:	430a      	orrs	r2, r1
 800742e:	609a      	str	r2, [r3, #8]
    break;
 8007430:	e03b      	b.n	80074aa <HAL_TIM_ConfigClockSource+0x176>
    TIM_TI1_ConfigInputStage(htim->Instance, sClockSourceConfig->ClockPolarity,
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6818      	ldr	r0, [r3, #0]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	6859      	ldr	r1, [r3, #4]
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	001a      	movs	r2, r3
 8007440:	f000 f8e4 	bl	800760c <TIM_TI1_ConfigInputStage>
    TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2150      	movs	r1, #80	; 0x50
 800744a:	0018      	movs	r0, r3
 800744c:	f000 f93e 	bl	80076cc <TIM_ITRx_SetConfig>
    break;
 8007450:	e02b      	b.n	80074aa <HAL_TIM_ConfigClockSource+0x176>
    TIM_TI2_ConfigInputStage(htim->Instance, sClockSourceConfig->ClockPolarity,
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6818      	ldr	r0, [r3, #0]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	6859      	ldr	r1, [r3, #4]
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	001a      	movs	r2, r3
 8007460:	f000 f902 	bl	8007668 <TIM_TI2_ConfigInputStage>
    TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2160      	movs	r1, #96	; 0x60
 800746a:	0018      	movs	r0, r3
 800746c:	f000 f92e 	bl	80076cc <TIM_ITRx_SetConfig>
    break;
 8007470:	e01b      	b.n	80074aa <HAL_TIM_ConfigClockSource+0x176>
    TIM_TI1_ConfigInputStage(htim->Instance, sClockSourceConfig->ClockPolarity,
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6818      	ldr	r0, [r3, #0]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	6859      	ldr	r1, [r3, #4]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	001a      	movs	r2, r3
 8007480:	f000 f8c4 	bl	800760c <TIM_TI1_ConfigInputStage>
    TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2140      	movs	r1, #64	; 0x40
 800748a:	0018      	movs	r0, r3
 800748c:	f000 f91e 	bl	80076cc <TIM_ITRx_SetConfig>
    break;
 8007490:	e00b      	b.n	80074aa <HAL_TIM_ConfigClockSource+0x176>
    TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	0019      	movs	r1, r3
 800749c:	0010      	movs	r0, r2
 800749e:	f000 f915 	bl	80076cc <TIM_ITRx_SetConfig>
    break;
 80074a2:	e002      	b.n	80074aa <HAL_TIM_ConfigClockSource+0x176>
    break;
 80074a4:	46c0      	nop			; (mov r8, r8)
 80074a6:	e000      	b.n	80074aa <HAL_TIM_ConfigClockSource+0x176>
    break;
 80074a8:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	223d      	movs	r2, #61	; 0x3d
 80074ae:	2101      	movs	r1, #1
 80074b0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	223c      	movs	r2, #60	; 0x3c
 80074b6:	2100      	movs	r1, #0
 80074b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	0018      	movs	r0, r3
 80074be:	46bd      	mov	sp, r7
 80074c0:	b004      	add	sp, #16
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	ffceff88 	.word	0xffceff88
 80074c8:	ffff00ff 	.word	0xffff00ff

080074cc <HAL_TIM_OC_DelayElapsedCallback>:
/**
 * @brief  Output Compare callback in non-blocking mode
 * @param  htim TIM OC handle
 * @retval None
 */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user
     file
   */
}
 80074d4:	46c0      	nop			; (mov r8, r8)
 80074d6:	46bd      	mov	sp, r7
 80074d8:	b002      	add	sp, #8
 80074da:	bd80      	pop	{r7, pc}

080074dc <HAL_TIM_IC_CaptureCallback>:
/**
 * @brief  Input Capture callback in non-blocking mode
 * @param  htim TIM IC handle
 * @retval None
 */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074e4:	46c0      	nop			; (mov r8, r8)
 80074e6:	46bd      	mov	sp, r7
 80074e8:	b002      	add	sp, #8
 80074ea:	bd80      	pop	{r7, pc}

080074ec <HAL_TIM_PWM_PulseFinishedCallback>:
/**
 * @brief  PWM Pulse finished callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the
     user file
   */
}
 80074f4:	46c0      	nop			; (mov r8, r8)
 80074f6:	46bd      	mov	sp, r7
 80074f8:	b002      	add	sp, #8
 80074fa:	bd80      	pop	{r7, pc}

080074fc <HAL_TIM_TriggerCallback>:
/**
 * @brief  Hall Trigger detection callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim) {
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007504:	46c0      	nop			; (mov r8, r8)
 8007506:	46bd      	mov	sp, r7
 8007508:	b002      	add	sp, #8
 800750a:	bd80      	pop	{r7, pc}

0800750c <TIM_Base_SetConfig>:
 * @brief  Time Base configuration
 * @param  TIMx TIM peripheral
 * @param  Structure TIM Base configuration structure
 * @retval None
 */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure) {
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx)) {
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a34      	ldr	r2, [pc, #208]	; (80075f0 <TIM_Base_SetConfig+0xe4>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d008      	beq.n	8007536 <TIM_Base_SetConfig+0x2a>
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	2380      	movs	r3, #128	; 0x80
 8007528:	05db      	lsls	r3, r3, #23
 800752a:	429a      	cmp	r2, r3
 800752c:	d003      	beq.n	8007536 <TIM_Base_SetConfig+0x2a>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a30      	ldr	r2, [pc, #192]	; (80075f4 <TIM_Base_SetConfig+0xe8>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d108      	bne.n	8007548 <TIM_Base_SetConfig+0x3c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2270      	movs	r2, #112	; 0x70
 800753a:	4393      	bics	r3, r2
 800753c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	4313      	orrs	r3, r2
 8007546:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx)) {
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a29      	ldr	r2, [pc, #164]	; (80075f0 <TIM_Base_SetConfig+0xe4>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d018      	beq.n	8007582 <TIM_Base_SetConfig+0x76>
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	2380      	movs	r3, #128	; 0x80
 8007554:	05db      	lsls	r3, r3, #23
 8007556:	429a      	cmp	r2, r3
 8007558:	d013      	beq.n	8007582 <TIM_Base_SetConfig+0x76>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a25      	ldr	r2, [pc, #148]	; (80075f4 <TIM_Base_SetConfig+0xe8>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d00f      	beq.n	8007582 <TIM_Base_SetConfig+0x76>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a24      	ldr	r2, [pc, #144]	; (80075f8 <TIM_Base_SetConfig+0xec>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d00b      	beq.n	8007582 <TIM_Base_SetConfig+0x76>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a23      	ldr	r2, [pc, #140]	; (80075fc <TIM_Base_SetConfig+0xf0>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d007      	beq.n	8007582 <TIM_Base_SetConfig+0x76>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a22      	ldr	r2, [pc, #136]	; (8007600 <TIM_Base_SetConfig+0xf4>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d003      	beq.n	8007582 <TIM_Base_SetConfig+0x76>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a21      	ldr	r2, [pc, #132]	; (8007604 <TIM_Base_SetConfig+0xf8>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d108      	bne.n	8007594 <TIM_Base_SetConfig+0x88>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	4a20      	ldr	r2, [pc, #128]	; (8007608 <TIM_Base_SetConfig+0xfc>)
 8007586:	4013      	ands	r3, r2
 8007588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	4313      	orrs	r3, r2
 8007592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2280      	movs	r2, #128	; 0x80
 8007598:	4393      	bics	r3, r2
 800759a:	001a      	movs	r2, r3
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	695b      	ldr	r3, [r3, #20]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period;
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	689a      	ldr	r2, [r3, #8]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx)) {
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a0c      	ldr	r2, [pc, #48]	; (80075f0 <TIM_Base_SetConfig+0xe4>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d00b      	beq.n	80075da <TIM_Base_SetConfig+0xce>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a0d      	ldr	r2, [pc, #52]	; (80075fc <TIM_Base_SetConfig+0xf0>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d007      	beq.n	80075da <TIM_Base_SetConfig+0xce>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a0c      	ldr	r2, [pc, #48]	; (8007600 <TIM_Base_SetConfig+0xf4>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d003      	beq.n	80075da <TIM_Base_SetConfig+0xce>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a0b      	ldr	r2, [pc, #44]	; (8007604 <TIM_Base_SetConfig+0xf8>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d103      	bne.n	80075e2 <TIM_Base_SetConfig+0xd6>
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	691a      	ldr	r2, [r3, #16]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2201      	movs	r2, #1
 80075e6:	615a      	str	r2, [r3, #20]
}
 80075e8:	46c0      	nop			; (mov r8, r8)
 80075ea:	46bd      	mov	sp, r7
 80075ec:	b004      	add	sp, #16
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	40012c00 	.word	0x40012c00
 80075f4:	40000400 	.word	0x40000400
 80075f8:	40002000 	.word	0x40002000
 80075fc:	40014000 	.word	0x40014000
 8007600:	40014400 	.word	0x40014400
 8007604:	40014800 	.word	0x40014800
 8007608:	fffffcff 	.word	0xfffffcff

0800760c <TIM_TI1_ConfigInputStage>:
 * @param  TIM_ICFilter Specifies the Input Capture Filter.
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity,
                                     uint32_t TIM_ICFilter) {
 800760c:	b580      	push	{r7, lr}
 800760e:	b086      	sub	sp, #24
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	2201      	movs	r2, #1
 8007624:	4393      	bics	r3, r2
 8007626:	001a      	movs	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	22f0      	movs	r2, #240	; 0xf0
 8007636:	4393      	bics	r3, r2
 8007638:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	011b      	lsls	r3, r3, #4
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	4313      	orrs	r3, r2
 8007642:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	220a      	movs	r2, #10
 8007648:	4393      	bics	r3, r2
 800764a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800764c:	697a      	ldr	r2, [r7, #20]
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	4313      	orrs	r3, r2
 8007652:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	621a      	str	r2, [r3, #32]
}
 8007660:	46c0      	nop			; (mov r8, r8)
 8007662:	46bd      	mov	sp, r7
 8007664:	b006      	add	sp, #24
 8007666:	bd80      	pop	{r7, pc}

08007668 <TIM_TI2_ConfigInputStage>:
 * @param  TIM_ICFilter Specifies the Input Capture Filter.
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity,
                                     uint32_t TIM_ICFilter) {
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6a1b      	ldr	r3, [r3, #32]
 8007678:	2210      	movs	r2, #16
 800767a:	4393      	bics	r3, r2
 800767c:	001a      	movs	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6a1b      	ldr	r3, [r3, #32]
 800768c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	4a0d      	ldr	r2, [pc, #52]	; (80076c8 <TIM_TI2_ConfigInputStage+0x60>)
 8007692:	4013      	ands	r3, r2
 8007694:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	031b      	lsls	r3, r3, #12
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	4313      	orrs	r3, r2
 800769e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	22a0      	movs	r2, #160	; 0xa0
 80076a4:	4393      	bics	r3, r2
 80076a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	011b      	lsls	r3, r3, #4
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	697a      	ldr	r2, [r7, #20]
 80076b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	621a      	str	r2, [r3, #32]
}
 80076be:	46c0      	nop			; (mov r8, r8)
 80076c0:	46bd      	mov	sp, r7
 80076c2:	b006      	add	sp, #24
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	46c0      	nop			; (mov r8, r8)
 80076c8:	ffff0fff 	.word	0xffff0fff

080076cc <TIM_ITRx_SetConfig>:
 *            @arg TIM_TS_TI1FP1: Filtered Timer Input 1
 *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
 *            @arg TIM_TS_ETRF: External Trigger input
 * @retval None
 */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource) {
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	4a08      	ldr	r2, [pc, #32]	; (8007700 <TIM_ITRx_SetConfig+0x34>)
 80076e0:	4013      	ands	r3, r2
 80076e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076e4:	683a      	ldr	r2, [r7, #0]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	2207      	movs	r2, #7
 80076ec:	4313      	orrs	r3, r2
 80076ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	609a      	str	r2, [r3, #8]
}
 80076f6:	46c0      	nop			; (mov r8, r8)
 80076f8:	46bd      	mov	sp, r7
 80076fa:	b004      	add	sp, #16
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	46c0      	nop			; (mov r8, r8)
 8007700:	ffcfff8f 	.word	0xffcfff8f

08007704 <TIM_ETR_SetConfig>:
 * @param  ExtTRGFilter External Trigger Filter.
 *          This parameter must be a value between 0x00 and 0x0F
 * @retval None
 */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter) {
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
 8007710:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	4a09      	ldr	r2, [pc, #36]	; (8007740 <TIM_ETR_SetConfig+0x3c>)
 800771c:	4013      	ands	r3, r2
 800771e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler |
                        (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	021a      	lsls	r2, r3, #8
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	431a      	orrs	r2, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler |
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	4313      	orrs	r3, r2
 800772c:	697a      	ldr	r2, [r7, #20]
 800772e:	4313      	orrs	r3, r2
 8007730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	609a      	str	r2, [r3, #8]
}
 8007738:	46c0      	nop			; (mov r8, r8)
 800773a:	46bd      	mov	sp, r7
 800773c:	b006      	add	sp, #24
 800773e:	bd80      	pop	{r7, pc}
 8007740:	ffff00ff 	.word	0xffff00ff

08007744 <HAL_TIMEx_MasterConfigSynchronization>:
 *         mode.
 * @retval HAL status
 */
HAL_StatusTypeDef
HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                      TIM_MasterConfigTypeDef *sMasterConfig) {
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	223c      	movs	r2, #60	; 0x3c
 8007752:	5c9b      	ldrb	r3, [r3, r2]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d101      	bne.n	800775c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007758:	2302      	movs	r3, #2
 800775a:	e055      	b.n	8007808 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	223c      	movs	r2, #60	; 0x3c
 8007760:	2101      	movs	r1, #1
 8007762:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	223d      	movs	r2, #61	; 0x3d
 8007768:	2102      	movs	r1, #2
 800776a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master
   * mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance)) {
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a23      	ldr	r2, [pc, #140]	; (8007810 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d108      	bne.n	8007798 <HAL_TIMEx_MasterConfigSynchronization+0x54>
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	4a22      	ldr	r2, [pc, #136]	; (8007814 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800778a:	4013      	ands	r3, r2
 800778c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	4313      	orrs	r3, r2
 8007796:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2270      	movs	r2, #112	; 0x70
 800779c:	4393      	bics	r3, r2
 800779e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |= sMasterConfig->MasterOutputTrigger;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance)) {
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a16      	ldr	r2, [pc, #88]	; (8007810 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d00f      	beq.n	80077dc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	2380      	movs	r3, #128	; 0x80
 80077c2:	05db      	lsls	r3, r3, #23
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d009      	beq.n	80077dc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a12      	ldr	r2, [pc, #72]	; (8007818 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d004      	beq.n	80077dc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a11      	ldr	r2, [pc, #68]	; (800781c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d10c      	bne.n	80077f6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2280      	movs	r2, #128	; 0x80
 80077e0:	4393      	bics	r3, r2
 80077e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	223d      	movs	r2, #61	; 0x3d
 80077fa:	2101      	movs	r1, #1
 80077fc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	223c      	movs	r2, #60	; 0x3c
 8007802:	2100      	movs	r1, #0
 8007804:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	0018      	movs	r0, r3
 800780a:	46bd      	mov	sp, r7
 800780c:	b004      	add	sp, #16
 800780e:	bd80      	pop	{r7, pc}
 8007810:	40012c00 	.word	0x40012c00
 8007814:	ff0fffff 	.word	0xff0fffff
 8007818:	40000400 	.word	0x40000400
 800781c:	40014000 	.word	0x40014000

08007820 <HAL_TIMEx_CommutCallback>:
/**
 * @brief  Hall commutation changed callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim) {
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007828:	46c0      	nop			; (mov r8, r8)
 800782a:	46bd      	mov	sp, r7
 800782c:	b002      	add	sp, #8
 800782e:	bd80      	pop	{r7, pc}

08007830 <HAL_TIMEx_BreakCallback>:
/**
 * @brief  Hall Break detection callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim) {
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007838:	46c0      	nop			; (mov r8, r8)
 800783a:	46bd      	mov	sp, r7
 800783c:	b002      	add	sp, #8
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_TIMEx_Break2Callback>:
/**
 * @brief  Hall Break2 detection callback in non blocking mode
 * @param  htim: TIM handle
 * @retval None
 */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim) {
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007848:	46c0      	nop			; (mov r8, r8)
 800784a:	46bd      	mov	sp, r7
 800784c:	b002      	add	sp, #8
 800784e:	bd80      	pop	{r7, pc}

08007850 <HAL_UART_Init>:
 *        parameters in the UART_InitTypeDef and initialize the associated
 * handle.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL) {
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <HAL_UART_Init+0x12>
    return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e046      	b.n	80078f0 <HAL_UART_Init+0xa0>
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) ||
                 (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET) {
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2284      	movs	r2, #132	; 0x84
 8007866:	589b      	ldr	r3, [r3, r2]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d107      	bne.n	800787c <HAL_UART_Init+0x2c>
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2280      	movs	r2, #128	; 0x80
 8007870:	2100      	movs	r1, #0
 8007872:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	0018      	movs	r0, r3
 8007878:	f7fc fb98 	bl	8003fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2284      	movs	r2, #132	; 0x84
 8007880:	2124      	movs	r1, #36	; 0x24
 8007882:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2101      	movs	r1, #1
 8007890:	438a      	bics	r2, r1
 8007892:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR) {
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	0018      	movs	r0, r3
 8007898:	f000 fc7c 	bl	8008194 <UART_SetConfig>
 800789c:	0003      	movs	r3, r0
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d101      	bne.n	80078a6 <HAL_UART_Init+0x56>
    return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e024      	b.n	80078f0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT) {
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d003      	beq.n	80078b6 <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	0018      	movs	r0, r3
 80078b2:	f000 ff4d 	bl	8008750 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	490d      	ldr	r1, [pc, #52]	; (80078f8 <HAL_UART_Init+0xa8>)
 80078c2:	400a      	ands	r2, r1
 80078c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3,
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	689a      	ldr	r2, [r3, #8]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	212a      	movs	r1, #42	; 0x2a
 80078d2:	438a      	bics	r2, r1
 80078d4:	609a      	str	r2, [r3, #8]
            (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

  __HAL_UART_ENABLE(huart);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2101      	movs	r1, #1
 80078e2:	430a      	orrs	r2, r1
 80078e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState
   * to Ready */
  return (UART_CheckIdleState(huart));
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	0018      	movs	r0, r3
 80078ea:	f000 ffe5 	bl	80088b8 <UART_CheckIdleState>
 80078ee:	0003      	movs	r3, r0
}
 80078f0:	0018      	movs	r0, r3
 80078f2:	46bd      	mov	sp, r7
 80078f4:	b002      	add	sp, #8
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	ffffb7ff 	.word	0xffffb7ff

080078fc <HAL_UART_Transmit>:
 * @param Size    Amount of data elements (u8 or u16) to be sent.
 * @param Timeout Timeout duration.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData,
                                    uint16_t Size, uint32_t Timeout) {
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b08a      	sub	sp, #40	; 0x28
 8007900:	af02      	add	r7, sp, #8
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	603b      	str	r3, [r7, #0]
 8007908:	1dbb      	adds	r3, r7, #6
 800790a:	801a      	strh	r2, [r3, #0]
  uint8_t *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY) {
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2284      	movs	r2, #132	; 0x84
 8007910:	589b      	ldr	r3, [r3, r2]
 8007912:	2b20      	cmp	r3, #32
 8007914:	d000      	beq.n	8007918 <HAL_UART_Transmit+0x1c>
 8007916:	e097      	b.n	8007a48 <HAL_UART_Transmit+0x14c>
    if ((pData == NULL) || (Size == 0U)) {
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d003      	beq.n	8007926 <HAL_UART_Transmit+0x2a>
 800791e:	1dbb      	adds	r3, r7, #6
 8007920:	881b      	ldrh	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d101      	bne.n	800792a <HAL_UART_Transmit+0x2e>
      return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e08f      	b.n	8007a4a <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input
       parameter should be aligned on a u16 frontier, as data to be filled into
       TDR will be handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) &&
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	689a      	ldr	r2, [r3, #8]
 800792e:	2380      	movs	r3, #128	; 0x80
 8007930:	015b      	lsls	r3, r3, #5
 8007932:	429a      	cmp	r2, r3
 8007934:	d109      	bne.n	800794a <HAL_UART_Transmit+0x4e>
        (huart->Init.Parity == UART_PARITY_NONE)) {
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	691b      	ldr	r3, [r3, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) &&
 800793a:	2b00      	cmp	r3, #0
 800793c:	d105      	bne.n	800794a <HAL_UART_Transmit+0x4e>
      if ((((uint32_t)pData) & 1U) != 0U) {
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	2201      	movs	r2, #1
 8007942:	4013      	ands	r3, r2
 8007944:	d001      	beq.n	800794a <HAL_UART_Transmit+0x4e>
        return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e07f      	b.n	8007a4a <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2280      	movs	r2, #128	; 0x80
 800794e:	5c9b      	ldrb	r3, [r3, r2]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d101      	bne.n	8007958 <HAL_UART_Transmit+0x5c>
 8007954:	2302      	movs	r3, #2
 8007956:	e078      	b.n	8007a4a <HAL_UART_Transmit+0x14e>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2280      	movs	r2, #128	; 0x80
 800795c:	2101      	movs	r1, #1
 800795e:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	228c      	movs	r2, #140	; 0x8c
 8007964:	2100      	movs	r1, #0
 8007966:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2284      	movs	r2, #132	; 0x84
 800796c:	2121      	movs	r1, #33	; 0x21
 800796e:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007970:	f7fc fd10 	bl	8004394 <HAL_GetTick>
 8007974:	0003      	movs	r3, r0
 8007976:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	1dba      	adds	r2, r7, #6
 800797c:	2154      	movs	r1, #84	; 0x54
 800797e:	8812      	ldrh	r2, [r2, #0]
 8007980:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	1dba      	adds	r2, r7, #6
 8007986:	2156      	movs	r1, #86	; 0x56
 8007988:	8812      	ldrh	r2, [r2, #0]
 800798a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a
     * uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) &&
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	689a      	ldr	r2, [r3, #8]
 8007990:	2380      	movs	r3, #128	; 0x80
 8007992:	015b      	lsls	r3, r3, #5
 8007994:	429a      	cmp	r2, r3
 8007996:	d108      	bne.n	80079aa <HAL_UART_Transmit+0xae>
        (huart->Init.Parity == UART_PARITY_NONE)) {
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	691b      	ldr	r3, [r3, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) &&
 800799c:	2b00      	cmp	r3, #0
 800799e:	d104      	bne.n	80079aa <HAL_UART_Transmit+0xae>
      pdata8bits = NULL;
 80079a0:	2300      	movs	r3, #0
 80079a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *)pData;
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	61bb      	str	r3, [r7, #24]
 80079a8:	e003      	b.n	80079b2 <HAL_UART_Transmit+0xb6>
    } else {
      pdata8bits = pData;
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079ae:	2300      	movs	r3, #0
 80079b0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2280      	movs	r2, #128	; 0x80
 80079b6:	2100      	movs	r1, #0
 80079b8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U) {
 80079ba:	e02c      	b.n	8007a16 <HAL_UART_Transmit+0x11a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart,
 80079bc:	697a      	ldr	r2, [r7, #20]
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	9300      	str	r3, [sp, #0]
 80079c4:	0013      	movs	r3, r2
 80079c6:	2200      	movs	r2, #0
 80079c8:	2180      	movs	r1, #128	; 0x80
 80079ca:	f000 ffbf 	bl	800894c <UART_WaitOnFlagUntilTimeout>
 80079ce:	1e03      	subs	r3, r0, #0
 80079d0:	d001      	beq.n	80079d6 <HAL_UART_Transmit+0xda>
                                      Timeout) != HAL_OK) {
        return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e039      	b.n	8007a4a <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL) {
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d10b      	bne.n	80079f4 <HAL_UART_Transmit+0xf8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	881b      	ldrh	r3, [r3, #0]
 80079e0:	001a      	movs	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	05d2      	lsls	r2, r2, #23
 80079e8:	0dd2      	lsrs	r2, r2, #23
 80079ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	3302      	adds	r3, #2
 80079f0:	61bb      	str	r3, [r7, #24]
 80079f2:	e007      	b.n	8007a04 <HAL_UART_Transmit+0x108>
      } else {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	781a      	ldrb	r2, [r3, #0]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	3301      	adds	r3, #1
 8007a02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2256      	movs	r2, #86	; 0x56
 8007a08:	5a9b      	ldrh	r3, [r3, r2]
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	b299      	uxth	r1, r3
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2256      	movs	r2, #86	; 0x56
 8007a14:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U) {
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2256      	movs	r2, #86	; 0x56
 8007a1a:	5a9b      	ldrh	r3, [r3, r2]
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1cc      	bne.n	80079bc <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart,
 8007a22:	697a      	ldr	r2, [r7, #20]
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	0013      	movs	r3, r2
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	2140      	movs	r1, #64	; 0x40
 8007a30:	f000 ff8c 	bl	800894c <UART_WaitOnFlagUntilTimeout>
 8007a34:	1e03      	subs	r3, r0, #0
 8007a36:	d001      	beq.n	8007a3c <HAL_UART_Transmit+0x140>
                                    Timeout) != HAL_OK) {
      return HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e006      	b.n	8007a4a <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2284      	movs	r2, #132	; 0x84
 8007a40:	2120      	movs	r1, #32
 8007a42:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007a44:	2300      	movs	r3, #0
 8007a46:	e000      	b.n	8007a4a <HAL_UART_Transmit+0x14e>
  } else {
    return HAL_BUSY;
 8007a48:	2302      	movs	r3, #2
  }
}
 8007a4a:	0018      	movs	r0, r3
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	b008      	add	sp, #32
 8007a50:	bd80      	pop	{r7, pc}
	...

08007a54 <HAL_UART_Receive_IT>:
 * @param pData Pointer to data buffer (u8 or u16 data elements).
 * @param Size  Amount of data elements (u8 or u16) to be received.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData,
                                      uint16_t Size) {
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b088      	sub	sp, #32
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	1dbb      	adds	r3, r7, #6
 8007a60:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY) {
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2288      	movs	r2, #136	; 0x88
 8007a66:	589b      	ldr	r3, [r3, r2]
 8007a68:	2b20      	cmp	r3, #32
 8007a6a:	d155      	bne.n	8007b18 <HAL_UART_Receive_IT+0xc4>
    if ((pData == NULL) || (Size == 0U)) {
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <HAL_UART_Receive_IT+0x26>
 8007a72:	1dbb      	adds	r3, r7, #6
 8007a74:	881b      	ldrh	r3, [r3, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d101      	bne.n	8007a7e <HAL_UART_Receive_IT+0x2a>
      return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e04d      	b.n	8007b1a <HAL_UART_Receive_IT+0xc6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input
       parameter should be aligned on a u16 frontier, as data to be received
       from RDR will be handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) &&
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	689a      	ldr	r2, [r3, #8]
 8007a82:	2380      	movs	r3, #128	; 0x80
 8007a84:	015b      	lsls	r3, r3, #5
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d109      	bne.n	8007a9e <HAL_UART_Receive_IT+0x4a>
        (huart->Init.Parity == UART_PARITY_NONE)) {
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	691b      	ldr	r3, [r3, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) &&
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d105      	bne.n	8007a9e <HAL_UART_Receive_IT+0x4a>
      if ((((uint32_t)pData) & 1U) != 0U) {
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	2201      	movs	r2, #1
 8007a96:	4013      	ands	r3, r2
 8007a98:	d001      	beq.n	8007a9e <HAL_UART_Receive_IT+0x4a>
        return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e03d      	b.n	8007b1a <HAL_UART_Receive_IT+0xc6>
      }
    }

    __HAL_LOCK(huart);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2280      	movs	r2, #128	; 0x80
 8007aa2:	5c9b      	ldrb	r3, [r3, r2]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d101      	bne.n	8007aac <HAL_UART_Receive_IT+0x58>
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	e036      	b.n	8007b1a <HAL_UART_Receive_IT+0xc6>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2280      	movs	r2, #128	; 0x80
 8007ab0:	2101      	movs	r1, #1
 8007ab2:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance))) {
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a19      	ldr	r2, [pc, #100]	; (8007b24 <HAL_UART_Receive_IT+0xd0>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d020      	beq.n	8007b06 <HAL_UART_Receive_IT+0xb2>
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U) {
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	2380      	movs	r3, #128	; 0x80
 8007acc:	041b      	lsls	r3, r3, #16
 8007ace:	4013      	ands	r3, r2
 8007ad0:	d019      	beq.n	8007b06 <HAL_UART_Receive_IT+0xb2>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ad2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ad6:	613b      	str	r3, [r7, #16]
  return(result);
 8007ad8:	693b      	ldr	r3, [r7, #16]
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ada:	61fb      	str	r3, [r7, #28]
 8007adc:	2301      	movs	r3, #1
 8007ade:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	f383 8810 	msr	PRIMASK, r3
}
 8007ae6:	46c0      	nop			; (mov r8, r8)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2180      	movs	r1, #128	; 0x80
 8007af4:	04c9      	lsls	r1, r1, #19
 8007af6:	430a      	orrs	r2, r1
 8007af8:	601a      	str	r2, [r3, #0]
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	f383 8810 	msr	PRIMASK, r3
}
 8007b04:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007b06:	1dbb      	adds	r3, r7, #6
 8007b08:	881a      	ldrh	r2, [r3, #0]
 8007b0a:	68b9      	ldr	r1, [r7, #8]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	0018      	movs	r0, r3
 8007b10:	f000 ffe4 	bl	8008adc <UART_Start_Receive_IT>
 8007b14:	0003      	movs	r3, r0
 8007b16:	e000      	b.n	8007b1a <HAL_UART_Receive_IT+0xc6>
  } else {
    return HAL_BUSY;
 8007b18:	2302      	movs	r3, #2
  }
}
 8007b1a:	0018      	movs	r0, r3
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	b008      	add	sp, #32
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	46c0      	nop			; (mov r8, r8)
 8007b24:	40008000 	.word	0x40008000

08007b28 <HAL_UART_IRQHandler>:
/**
 * @brief Handle UART interrupt request.
 * @param huart UART handle.
 * @retval None
 */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart) {
 8007b28:	b5b0      	push	{r4, r5, r7, lr}
 8007b2a:	b0aa      	sub	sp, #168	; 0xa8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(huart->Instance->ISR);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	69db      	ldr	r3, [r3, #28]
 8007b36:	22a4      	movs	r2, #164	; 0xa4
 8007b38:	18b9      	adds	r1, r7, r2
 8007b3a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its = READ_REG(huart->Instance->CR1);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	20a0      	movs	r0, #160	; 0xa0
 8007b44:	1839      	adds	r1, r7, r0
 8007b46:	600b      	str	r3, [r1, #0]
  uint32_t cr3its = READ_REG(huart->Instance->CR3);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	249c      	movs	r4, #156	; 0x9c
 8007b50:	1939      	adds	r1, r7, r4
 8007b52:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags =
 8007b54:	0011      	movs	r1, r2
 8007b56:	18bb      	adds	r3, r7, r2
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4aa0      	ldr	r2, [pc, #640]	; (8007ddc <HAL_UART_IRQHandler+0x2b4>)
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	2298      	movs	r2, #152	; 0x98
 8007b60:	18bd      	adds	r5, r7, r2
 8007b62:	602b      	str	r3, [r5, #0]
      (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE |
                             USART_ISR_NE | USART_ISR_RTOF));
  if (errorflags == 0U) {
 8007b64:	18bb      	adds	r3, r7, r2
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d11a      	bne.n	8007ba2 <HAL_UART_IRQHandler+0x7a>
    /* UART in mode Receiver
     * ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U) &&
 8007b6c:	187b      	adds	r3, r7, r1
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2220      	movs	r2, #32
 8007b72:	4013      	ands	r3, r2
 8007b74:	d015      	beq.n	8007ba2 <HAL_UART_IRQHandler+0x7a>
        (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007b76:	183b      	adds	r3, r7, r0
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2220      	movs	r2, #32
 8007b7c:	4013      	ands	r3, r2
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U) &&
 8007b7e:	d105      	bne.n	8007b8c <HAL_UART_IRQHandler+0x64>
         ((cr3its & USART_CR3_RXFTIE) != 0U))) {
 8007b80:	193b      	adds	r3, r7, r4
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	2380      	movs	r3, #128	; 0x80
 8007b86:	055b      	lsls	r3, r3, #21
 8007b88:	4013      	ands	r3, r2
        (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007b8a:	d00a      	beq.n	8007ba2 <HAL_UART_IRQHandler+0x7a>
      if (huart->RxISR != NULL) {
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d100      	bne.n	8007b96 <HAL_UART_IRQHandler+0x6e>
 8007b94:	e2cf      	b.n	8008136 <HAL_UART_IRQHandler+0x60e>
        huart->RxISR(huart);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	0010      	movs	r0, r2
 8007b9e:	4798      	blx	r3
      }
      return;
 8007ba0:	e2c9      	b.n	8008136 <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U) &&
 8007ba2:	2398      	movs	r3, #152	; 0x98
 8007ba4:	18fb      	adds	r3, r7, r3
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d100      	bne.n	8007bae <HAL_UART_IRQHandler+0x86>
 8007bac:	e11e      	b.n	8007dec <HAL_UART_IRQHandler+0x2c4>
      ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U) ||
 8007bae:	239c      	movs	r3, #156	; 0x9c
 8007bb0:	18fb      	adds	r3, r7, r3
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a8a      	ldr	r2, [pc, #552]	; (8007de0 <HAL_UART_IRQHandler+0x2b8>)
 8007bb6:	4013      	ands	r3, r2
  if ((errorflags != 0U) &&
 8007bb8:	d106      	bne.n	8007bc8 <HAL_UART_IRQHandler+0xa0>
        ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007bba:	23a0      	movs	r3, #160	; 0xa0
 8007bbc:	18fb      	adds	r3, r7, r3
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a88      	ldr	r2, [pc, #544]	; (8007de4 <HAL_UART_IRQHandler+0x2bc>)
 8007bc2:	4013      	ands	r3, r2
      ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U) ||
 8007bc4:	d100      	bne.n	8007bc8 <HAL_UART_IRQHandler+0xa0>
 8007bc6:	e111      	b.n	8007dec <HAL_UART_IRQHandler+0x2c4>
                    USART_CR1_RTOIE)) != 0U)))) {
    /* UART parity error interrupt occurred
     * -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) &&
 8007bc8:	23a4      	movs	r3, #164	; 0xa4
 8007bca:	18fb      	adds	r3, r7, r3
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	d012      	beq.n	8007bfa <HAL_UART_IRQHandler+0xd2>
        ((cr1its & USART_CR1_PEIE) != 0U)) {
 8007bd4:	23a0      	movs	r3, #160	; 0xa0
 8007bd6:	18fb      	adds	r3, r7, r3
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	2380      	movs	r3, #128	; 0x80
 8007bdc:	005b      	lsls	r3, r3, #1
 8007bde:	4013      	ands	r3, r2
    if (((isrflags & USART_ISR_PE) != 0U) &&
 8007be0:	d00b      	beq.n	8007bfa <HAL_UART_IRQHandler+0xd2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2201      	movs	r2, #1
 8007be8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	228c      	movs	r2, #140	; 0x8c
 8007bee:	589b      	ldr	r3, [r3, r2]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	218c      	movs	r1, #140	; 0x8c
 8007bf8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred
     * --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U)) {
 8007bfa:	23a4      	movs	r3, #164	; 0xa4
 8007bfc:	18fb      	adds	r3, r7, r3
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2202      	movs	r2, #2
 8007c02:	4013      	ands	r3, r2
 8007c04:	d011      	beq.n	8007c2a <HAL_UART_IRQHandler+0x102>
 8007c06:	239c      	movs	r3, #156	; 0x9c
 8007c08:	18fb      	adds	r3, r7, r3
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	4013      	ands	r3, r2
 8007c10:	d00b      	beq.n	8007c2a <HAL_UART_IRQHandler+0x102>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2202      	movs	r2, #2
 8007c18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	228c      	movs	r2, #140	; 0x8c
 8007c1e:	589b      	ldr	r3, [r3, r2]
 8007c20:	2204      	movs	r2, #4
 8007c22:	431a      	orrs	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	218c      	movs	r1, #140	; 0x8c
 8007c28:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred
     * --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U)) {
 8007c2a:	23a4      	movs	r3, #164	; 0xa4
 8007c2c:	18fb      	adds	r3, r7, r3
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2204      	movs	r2, #4
 8007c32:	4013      	ands	r3, r2
 8007c34:	d011      	beq.n	8007c5a <HAL_UART_IRQHandler+0x132>
 8007c36:	239c      	movs	r3, #156	; 0x9c
 8007c38:	18fb      	adds	r3, r7, r3
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	4013      	ands	r3, r2
 8007c40:	d00b      	beq.n	8007c5a <HAL_UART_IRQHandler+0x132>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2204      	movs	r2, #4
 8007c48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	228c      	movs	r2, #140	; 0x8c
 8007c4e:	589b      	ldr	r3, [r3, r2]
 8007c50:	2202      	movs	r2, #2
 8007c52:	431a      	orrs	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	218c      	movs	r1, #140	; 0x8c
 8007c58:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred
     * -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U) &&
 8007c5a:	23a4      	movs	r3, #164	; 0xa4
 8007c5c:	18fb      	adds	r3, r7, r3
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2208      	movs	r2, #8
 8007c62:	4013      	ands	r3, r2
 8007c64:	d017      	beq.n	8007c96 <HAL_UART_IRQHandler+0x16e>
        (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c66:	23a0      	movs	r3, #160	; 0xa0
 8007c68:	18fb      	adds	r3, r7, r3
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2220      	movs	r2, #32
 8007c6e:	4013      	ands	r3, r2
    if (((isrflags & USART_ISR_ORE) != 0U) &&
 8007c70:	d105      	bne.n	8007c7e <HAL_UART_IRQHandler+0x156>
         ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U))) {
 8007c72:	239c      	movs	r3, #156	; 0x9c
 8007c74:	18fb      	adds	r3, r7, r3
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a59      	ldr	r2, [pc, #356]	; (8007de0 <HAL_UART_IRQHandler+0x2b8>)
 8007c7a:	4013      	ands	r3, r2
        (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c7c:	d00b      	beq.n	8007c96 <HAL_UART_IRQHandler+0x16e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2208      	movs	r2, #8
 8007c84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	228c      	movs	r2, #140	; 0x8c
 8007c8a:	589b      	ldr	r3, [r3, r2]
 8007c8c:	2208      	movs	r2, #8
 8007c8e:	431a      	orrs	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	218c      	movs	r1, #140	; 0x8c
 8007c94:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred
     * ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) &&
 8007c96:	23a4      	movs	r3, #164	; 0xa4
 8007c98:	18fb      	adds	r3, r7, r3
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	2380      	movs	r3, #128	; 0x80
 8007c9e:	011b      	lsls	r3, r3, #4
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	d013      	beq.n	8007ccc <HAL_UART_IRQHandler+0x1a4>
        ((cr1its & USART_CR1_RTOIE) != 0U)) {
 8007ca4:	23a0      	movs	r3, #160	; 0xa0
 8007ca6:	18fb      	adds	r3, r7, r3
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	2380      	movs	r3, #128	; 0x80
 8007cac:	04db      	lsls	r3, r3, #19
 8007cae:	4013      	ands	r3, r2
    if (((isrflags & USART_ISR_RTOF) != 0U) &&
 8007cb0:	d00c      	beq.n	8007ccc <HAL_UART_IRQHandler+0x1a4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2280      	movs	r2, #128	; 0x80
 8007cb8:	0112      	lsls	r2, r2, #4
 8007cba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	228c      	movs	r2, #140	; 0x8c
 8007cc0:	589b      	ldr	r3, [r3, r2]
 8007cc2:	2220      	movs	r2, #32
 8007cc4:	431a      	orrs	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	218c      	movs	r1, #140	; 0x8c
 8007cca:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be
     * ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE) {
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	228c      	movs	r2, #140	; 0x8c
 8007cd0:	589b      	ldr	r3, [r3, r2]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d100      	bne.n	8007cd8 <HAL_UART_IRQHandler+0x1b0>
 8007cd6:	e230      	b.n	800813a <HAL_UART_IRQHandler+0x612>
      /* UART in mode Receiver
       * --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U) &&
 8007cd8:	23a4      	movs	r3, #164	; 0xa4
 8007cda:	18fb      	adds	r3, r7, r3
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2220      	movs	r2, #32
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	d015      	beq.n	8007d10 <HAL_UART_IRQHandler+0x1e8>
          (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ce4:	23a0      	movs	r3, #160	; 0xa0
 8007ce6:	18fb      	adds	r3, r7, r3
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2220      	movs	r2, #32
 8007cec:	4013      	ands	r3, r2
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U) &&
 8007cee:	d106      	bne.n	8007cfe <HAL_UART_IRQHandler+0x1d6>
           ((cr3its & USART_CR3_RXFTIE) != 0U))) {
 8007cf0:	239c      	movs	r3, #156	; 0x9c
 8007cf2:	18fb      	adds	r3, r7, r3
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	2380      	movs	r3, #128	; 0x80
 8007cf8:	055b      	lsls	r3, r3, #21
 8007cfa:	4013      	ands	r3, r2
          (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007cfc:	d008      	beq.n	8007d10 <HAL_UART_IRQHandler+0x1e8>
        if (huart->RxISR != NULL) {
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d004      	beq.n	8007d10 <HAL_UART_IRQHandler+0x1e8>
          huart->RxISR(huart);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	0010      	movs	r0, r2
 8007d0e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	228c      	movs	r2, #140	; 0x8c
 8007d14:	589b      	ldr	r3, [r3, r2]
 8007d16:	2194      	movs	r1, #148	; 0x94
 8007d18:	187a      	adds	r2, r7, r1
 8007d1a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	2240      	movs	r2, #64	; 0x40
 8007d24:	4013      	ands	r3, r2
 8007d26:	2b40      	cmp	r3, #64	; 0x40
 8007d28:	d004      	beq.n	8007d34 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U)) {
 8007d2a:	187b      	adds	r3, r7, r1
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2228      	movs	r2, #40	; 0x28
 8007d30:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d32:	d047      	beq.n	8007dc4 <HAL_UART_IRQHandler+0x29c>
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	0018      	movs	r0, r3
 8007d38:	f000 ffdc 	bl	8008cf4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	2240      	movs	r2, #64	; 0x40
 8007d44:	4013      	ands	r3, r2
 8007d46:	2b40      	cmp	r3, #64	; 0x40
 8007d48:	d137      	bne.n	8007dba <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8007d4e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007d50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d52:	2090      	movs	r0, #144	; 0x90
 8007d54:	183a      	adds	r2, r7, r0
 8007d56:	6013      	str	r3, [r2, #0]
 8007d58:	2301      	movs	r3, #1
 8007d5a:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d5e:	f383 8810 	msr	PRIMASK, r3
}
 8007d62:	46c0      	nop			; (mov r8, r8)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	689a      	ldr	r2, [r3, #8]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2140      	movs	r1, #64	; 0x40
 8007d70:	438a      	bics	r2, r1
 8007d72:	609a      	str	r2, [r3, #8]
 8007d74:	183b      	adds	r3, r7, r0
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d7c:	f383 8810 	msr	PRIMASK, r3
}
 8007d80:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL) {
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d012      	beq.n	8007db0 <HAL_UART_IRQHandler+0x288>
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort
               procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d8e:	4a16      	ldr	r2, [pc, #88]	; (8007de8 <HAL_UART_IRQHandler+0x2c0>)
 8007d90:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK) {
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d96:	0018      	movs	r0, r3
 8007d98:	f7fd f91e 	bl	8004fd8 <HAL_DMA_Abort_IT>
 8007d9c:	1e03      	subs	r3, r0, #0
 8007d9e:	d01a      	beq.n	8007dd6 <HAL_UART_IRQHandler+0x2ae>
              /* Call Directly huart->hdmarx->XferAbortCallback function in case
               * of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007da4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007daa:	0018      	movs	r0, r3
 8007dac:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8007dae:	e012      	b.n	8007dd6 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	0018      	movs	r0, r3
 8007db4:	f000 f9da 	bl	800816c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8007db8:	e00d      	b.n	8007dd6 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	0018      	movs	r0, r3
 8007dbe:	f000 f9d5 	bl	800816c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8007dc2:	e008      	b.n	8007dd6 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	0018      	movs	r0, r3
 8007dc8:	f000 f9d0 	bl	800816c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	228c      	movs	r2, #140	; 0x8c
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8007dd4:	e1b1      	b.n	800813a <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8007dd6:	46c0      	nop			; (mov r8, r8)
    return;
 8007dd8:	e1af      	b.n	800813a <HAL_UART_IRQHandler+0x612>
 8007dda:	46c0      	nop			; (mov r8, r8)
 8007ddc:	0000080f 	.word	0x0000080f
 8007de0:	10000001 	.word	0x10000001
 8007de4:	04000120 	.word	0x04000120
 8007de8:	08008dc1 	.word	0x08008dc1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) &&
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d000      	beq.n	8007df6 <HAL_UART_IRQHandler+0x2ce>
 8007df4:	e135      	b.n	8008062 <HAL_UART_IRQHandler+0x53a>
      ((isrflags & USART_ISR_IDLE) != 0U) &&
 8007df6:	23a4      	movs	r3, #164	; 0xa4
 8007df8:	18fb      	adds	r3, r7, r3
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2210      	movs	r2, #16
 8007dfe:	4013      	ands	r3, r2
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) &&
 8007e00:	d100      	bne.n	8007e04 <HAL_UART_IRQHandler+0x2dc>
 8007e02:	e12e      	b.n	8008062 <HAL_UART_IRQHandler+0x53a>
      ((cr1its & USART_ISR_IDLE) != 0U)) {
 8007e04:	23a0      	movs	r3, #160	; 0xa0
 8007e06:	18fb      	adds	r3, r7, r3
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2210      	movs	r2, #16
 8007e0c:	4013      	ands	r3, r2
      ((isrflags & USART_ISR_IDLE) != 0U) &&
 8007e0e:	d100      	bne.n	8007e12 <HAL_UART_IRQHandler+0x2ea>
 8007e10:	e127      	b.n	8008062 <HAL_UART_IRQHandler+0x53a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2210      	movs	r2, #16
 8007e18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	2240      	movs	r2, #64	; 0x40
 8007e22:	4013      	ands	r3, r2
 8007e24:	2b40      	cmp	r3, #64	; 0x40
 8007e26:	d000      	beq.n	8007e2a <HAL_UART_IRQHandler+0x302>
 8007e28:	e09e      	b.n	8007f68 <HAL_UART_IRQHandler+0x440>
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event
         is to be notified to user */
      uint16_t nb_remaining_rx_data =
          (uint16_t)__HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	685a      	ldr	r2, [r3, #4]
      uint16_t nb_remaining_rx_data =
 8007e32:	217e      	movs	r1, #126	; 0x7e
 8007e34:	187b      	adds	r3, r7, r1
 8007e36:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U) &&
 8007e38:	187b      	adds	r3, r7, r1
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d100      	bne.n	8007e42 <HAL_UART_IRQHandler+0x31a>
 8007e40:	e17d      	b.n	800813e <HAL_UART_IRQHandler+0x616>
          (nb_remaining_rx_data < huart->RxXferSize)) {
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	225c      	movs	r2, #92	; 0x5c
 8007e46:	5a9b      	ldrh	r3, [r3, r2]
      if ((nb_remaining_rx_data > 0U) &&
 8007e48:	187a      	adds	r2, r7, r1
 8007e4a:	8812      	ldrh	r2, [r2, #0]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d300      	bcc.n	8007e52 <HAL_UART_IRQHandler+0x32a>
 8007e50:	e175      	b.n	800813e <HAL_UART_IRQHandler+0x616>
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	187a      	adds	r2, r7, r1
 8007e56:	215e      	movs	r1, #94	; 0x5e
 8007e58:	8812      	ldrh	r2, [r2, #0]
 8007e5a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC)) {
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2220      	movs	r2, #32
 8007e66:	4013      	ands	r3, r2
 8007e68:	d16f      	bne.n	8007f4a <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e6a:	f3ef 8310 	mrs	r3, PRIMASK
 8007e6e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
          /* Disable PE and ERR (Frame error, noise error, overrun error)
           * interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e72:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e74:	2301      	movs	r3, #1
 8007e76:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e7a:	f383 8810 	msr	PRIMASK, r3
}
 8007e7e:	46c0      	nop			; (mov r8, r8)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	49b1      	ldr	r1, [pc, #708]	; (8008150 <HAL_UART_IRQHandler+0x628>)
 8007e8c:	400a      	ands	r2, r1
 8007e8e:	601a      	str	r2, [r3, #0]
 8007e90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e92:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e96:	f383 8810 	msr	PRIMASK, r3
}
 8007e9a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8007ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ea4:	677b      	str	r3, [r7, #116]	; 0x74
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eac:	f383 8810 	msr	PRIMASK, r3
}
 8007eb0:	46c0      	nop			; (mov r8, r8)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	689a      	ldr	r2, [r3, #8]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	438a      	bics	r2, r1
 8007ec0:	609a      	str	r2, [r3, #8]
 8007ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ec4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ec8:	f383 8810 	msr	PRIMASK, r3
}
 8007ecc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ece:	f3ef 8310 	mrs	r3, PRIMASK
 8007ed2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the
             DMAR bit in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ed6:	673b      	str	r3, [r7, #112]	; 0x70
 8007ed8:	2301      	movs	r3, #1
 8007eda:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ede:	f383 8810 	msr	PRIMASK, r3
}
 8007ee2:	46c0      	nop			; (mov r8, r8)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	689a      	ldr	r2, [r3, #8]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2140      	movs	r1, #64	; 0x40
 8007ef0:	438a      	bics	r2, r1
 8007ef2:	609a      	str	r2, [r3, #8]
 8007ef4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ef6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007efa:	f383 8810 	msr	PRIMASK, r3
}
 8007efe:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2288      	movs	r2, #136	; 0x88
 8007f04:	2120      	movs	r1, #32
 8007f06:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8007f12:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f18:	2301      	movs	r3, #1
 8007f1a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f1e:	f383 8810 	msr	PRIMASK, r3
}
 8007f22:	46c0      	nop			; (mov r8, r8)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2110      	movs	r1, #16
 8007f30:	438a      	bics	r2, r1
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f36:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f3a:	f383 8810 	msr	PRIMASK, r3
}
 8007f3e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f44:	0018      	movs	r0, r3
 8007f46:	f7fc ffe5 	bl	8004f14 <HAL_DMA_Abort>
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart,
                                   (huart->RxXferSize - huart->RxXferCount));
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	225c      	movs	r2, #92	; 0x5c
 8007f4e:	5a9a      	ldrh	r2, [r3, r2]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	215e      	movs	r1, #94	; 0x5e
 8007f54:	5a5b      	ldrh	r3, [r3, r1]
 8007f56:	b29b      	uxth	r3, r3
        HAL_UARTEx_RxEventCallback(huart,
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	0011      	movs	r1, r2
 8007f60:	0018      	movs	r0, r3
 8007f62:	f000 f90b 	bl	800817c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f66:	e0ea      	b.n	800813e <HAL_UART_IRQHandler+0x616>
    } else {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event
         is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	225c      	movs	r2, #92	; 0x5c
 8007f6c:	5a99      	ldrh	r1, [r3, r2]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	225e      	movs	r2, #94	; 0x5e
 8007f72:	5a9b      	ldrh	r3, [r3, r2]
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	208e      	movs	r0, #142	; 0x8e
 8007f78:	183b      	adds	r3, r7, r0
 8007f7a:	1a8a      	subs	r2, r1, r2
 8007f7c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U) && (nb_rx_data > 0U)) {
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	225e      	movs	r2, #94	; 0x5e
 8007f82:	5a9b      	ldrh	r3, [r3, r2]
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d100      	bne.n	8007f8c <HAL_UART_IRQHandler+0x464>
 8007f8a:	e0da      	b.n	8008142 <HAL_UART_IRQHandler+0x61a>
 8007f8c:	183b      	adds	r3, r7, r0
 8007f8e:	881b      	ldrh	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d100      	bne.n	8007f96 <HAL_UART_IRQHandler+0x46e>
 8007f94:	e0d5      	b.n	8008142 <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f96:	f3ef 8310 	mrs	r3, PRIMASK
 8007f9a:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8007f9e:	2488      	movs	r4, #136	; 0x88
 8007fa0:	193a      	adds	r2, r7, r4
 8007fa2:	6013      	str	r3, [r2, #0]
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	f383 8810 	msr	PRIMASK, r3
}
 8007fae:	46c0      	nop			; (mov r8, r8)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4966      	ldr	r1, [pc, #408]	; (8008154 <HAL_UART_IRQHandler+0x62c>)
 8007fbc:	400a      	ands	r2, r1
 8007fbe:	601a      	str	r2, [r3, #0]
 8007fc0:	193b      	adds	r3, r7, r4
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	f383 8810 	msr	PRIMASK, r3
}
 8007fcc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fce:	f3ef 8310 	mrs	r3, PRIMASK
 8007fd2:	61bb      	str	r3, [r7, #24]
  return(result);
 8007fd4:	69bb      	ldr	r3, [r7, #24]
                         (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun
         * error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3,
 8007fd6:	2484      	movs	r4, #132	; 0x84
 8007fd8:	193a      	adds	r2, r7, r4
 8007fda:	6013      	str	r3, [r2, #0]
 8007fdc:	2301      	movs	r3, #1
 8007fde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	f383 8810 	msr	PRIMASK, r3
}
 8007fe6:	46c0      	nop			; (mov r8, r8)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689a      	ldr	r2, [r3, #8]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4959      	ldr	r1, [pc, #356]	; (8008158 <HAL_UART_IRQHandler+0x630>)
 8007ff4:	400a      	ands	r2, r1
 8007ff6:	609a      	str	r2, [r3, #8]
 8007ff8:	193b      	adds	r3, r7, r4
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ffe:	6a3b      	ldr	r3, [r7, #32]
 8008000:	f383 8810 	msr	PRIMASK, r3
}
 8008004:	46c0      	nop			; (mov r8, r8)
                         (USART_CR3_EIE | USART_CR3_RXFTIE));

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2288      	movs	r2, #136	; 0x88
 800800a:	2120      	movs	r1, #32
 800800c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800801a:	f3ef 8310 	mrs	r3, PRIMASK
 800801e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008020:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008022:	2480      	movs	r4, #128	; 0x80
 8008024:	193a      	adds	r2, r7, r4
 8008026:	6013      	str	r3, [r2, #0]
 8008028:	2301      	movs	r3, #1
 800802a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800802c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802e:	f383 8810 	msr	PRIMASK, r3
}
 8008032:	46c0      	nop			; (mov r8, r8)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2110      	movs	r1, #16
 8008040:	438a      	bics	r2, r1
 8008042:	601a      	str	r2, [r3, #0]
 8008044:	193b      	adds	r3, r7, r4
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800804a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804c:	f383 8810 	msr	PRIMASK, r3
}
 8008050:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008052:	183b      	adds	r3, r7, r0
 8008054:	881a      	ldrh	r2, [r3, #0]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	0011      	movs	r1, r2
 800805a:	0018      	movs	r0, r3
 800805c:	f000 f88e 	bl	800817c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008060:	e06f      	b.n	8008142 <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) &&
 8008062:	23a4      	movs	r3, #164	; 0xa4
 8008064:	18fb      	adds	r3, r7, r3
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	2380      	movs	r3, #128	; 0x80
 800806a:	035b      	lsls	r3, r3, #13
 800806c:	4013      	ands	r3, r2
 800806e:	d010      	beq.n	8008092 <HAL_UART_IRQHandler+0x56a>
      ((cr3its & USART_CR3_WUFIE) != 0U)) {
 8008070:	239c      	movs	r3, #156	; 0x9c
 8008072:	18fb      	adds	r3, r7, r3
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	2380      	movs	r3, #128	; 0x80
 8008078:	03db      	lsls	r3, r3, #15
 800807a:	4013      	ands	r3, r2
  if (((isrflags & USART_ISR_WUF) != 0U) &&
 800807c:	d009      	beq.n	8008092 <HAL_UART_IRQHandler+0x56a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2280      	movs	r2, #128	; 0x80
 8008084:	0352      	lsls	r2, r2, #13
 8008086:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	0018      	movs	r0, r3
 800808c:	f001 fb2c 	bl	80096e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008090:	e05a      	b.n	8008148 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U) &&
 8008092:	23a4      	movs	r3, #164	; 0xa4
 8008094:	18fb      	adds	r3, r7, r3
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2280      	movs	r2, #128	; 0x80
 800809a:	4013      	ands	r3, r2
 800809c:	d016      	beq.n	80080cc <HAL_UART_IRQHandler+0x5a4>
      (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U) ||
 800809e:	23a0      	movs	r3, #160	; 0xa0
 80080a0:	18fb      	adds	r3, r7, r3
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2280      	movs	r2, #128	; 0x80
 80080a6:	4013      	ands	r3, r2
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U) &&
 80080a8:	d106      	bne.n	80080b8 <HAL_UART_IRQHandler+0x590>
       ((cr3its & USART_CR3_TXFTIE) != 0U))) {
 80080aa:	239c      	movs	r3, #156	; 0x9c
 80080ac:	18fb      	adds	r3, r7, r3
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	2380      	movs	r3, #128	; 0x80
 80080b2:	041b      	lsls	r3, r3, #16
 80080b4:	4013      	ands	r3, r2
      (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U) ||
 80080b6:	d009      	beq.n	80080cc <HAL_UART_IRQHandler+0x5a4>
    if (huart->TxISR != NULL) {
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d042      	beq.n	8008146 <HAL_UART_IRQHandler+0x61e>
      huart->TxISR(huart);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	0010      	movs	r0, r2
 80080c8:	4798      	blx	r3
    }
    return;
 80080ca:	e03c      	b.n	8008146 <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U)) {
 80080cc:	23a4      	movs	r3, #164	; 0xa4
 80080ce:	18fb      	adds	r3, r7, r3
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2240      	movs	r2, #64	; 0x40
 80080d4:	4013      	ands	r3, r2
 80080d6:	d00a      	beq.n	80080ee <HAL_UART_IRQHandler+0x5c6>
 80080d8:	23a0      	movs	r3, #160	; 0xa0
 80080da:	18fb      	adds	r3, r7, r3
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2240      	movs	r2, #64	; 0x40
 80080e0:	4013      	ands	r3, r2
 80080e2:	d004      	beq.n	80080ee <HAL_UART_IRQHandler+0x5c6>
    UART_EndTransmit_IT(huart);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	0018      	movs	r0, r3
 80080e8:	f000 fe81 	bl	8008dee <UART_EndTransmit_IT>
    return;
 80080ec:	e02c      	b.n	8008148 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred
   * ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) &&
 80080ee:	23a4      	movs	r3, #164	; 0xa4
 80080f0:	18fb      	adds	r3, r7, r3
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	2380      	movs	r3, #128	; 0x80
 80080f6:	041b      	lsls	r3, r3, #16
 80080f8:	4013      	ands	r3, r2
 80080fa:	d00b      	beq.n	8008114 <HAL_UART_IRQHandler+0x5ec>
      ((cr1its & USART_CR1_TXFEIE) != 0U)) {
 80080fc:	23a0      	movs	r3, #160	; 0xa0
 80080fe:	18fb      	adds	r3, r7, r3
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	2380      	movs	r3, #128	; 0x80
 8008104:	05db      	lsls	r3, r3, #23
 8008106:	4013      	ands	r3, r2
  if (((isrflags & USART_ISR_TXFE) != 0U) &&
 8008108:	d004      	beq.n	8008114 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	0018      	movs	r0, r3
 800810e:	f001 fafb 	bl	8009708 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008112:	e019      	b.n	8008148 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) &&
 8008114:	23a4      	movs	r3, #164	; 0xa4
 8008116:	18fb      	adds	r3, r7, r3
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	2380      	movs	r3, #128	; 0x80
 800811c:	045b      	lsls	r3, r3, #17
 800811e:	4013      	ands	r3, r2
 8008120:	d012      	beq.n	8008148 <HAL_UART_IRQHandler+0x620>
      ((cr1its & USART_CR1_RXFFIE) != 0U)) {
 8008122:	23a0      	movs	r3, #160	; 0xa0
 8008124:	18fb      	adds	r3, r7, r3
 8008126:	681b      	ldr	r3, [r3, #0]
  if (((isrflags & USART_ISR_RXFF) != 0U) &&
 8008128:	2b00      	cmp	r3, #0
 800812a:	da0d      	bge.n	8008148 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	0018      	movs	r0, r3
 8008130:	f001 fae2 	bl	80096f8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008134:	e008      	b.n	8008148 <HAL_UART_IRQHandler+0x620>
      return;
 8008136:	46c0      	nop			; (mov r8, r8)
 8008138:	e006      	b.n	8008148 <HAL_UART_IRQHandler+0x620>
    return;
 800813a:	46c0      	nop			; (mov r8, r8)
 800813c:	e004      	b.n	8008148 <HAL_UART_IRQHandler+0x620>
      return;
 800813e:	46c0      	nop			; (mov r8, r8)
 8008140:	e002      	b.n	8008148 <HAL_UART_IRQHandler+0x620>
      return;
 8008142:	46c0      	nop			; (mov r8, r8)
 8008144:	e000      	b.n	8008148 <HAL_UART_IRQHandler+0x620>
    return;
 8008146:	46c0      	nop			; (mov r8, r8)
  }
}
 8008148:	46bd      	mov	sp, r7
 800814a:	b02a      	add	sp, #168	; 0xa8
 800814c:	bdb0      	pop	{r4, r5, r7, pc}
 800814e:	46c0      	nop			; (mov r8, r8)
 8008150:	fffffeff 	.word	0xfffffeff
 8008154:	fffffedf 	.word	0xfffffedf
 8008158:	effffffe 	.word	0xeffffffe

0800815c <HAL_UART_TxCpltCallback>:
/**
 * @brief Tx Transfer completed callback.
 * @param huart UART handle.
 * @retval None
 */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008164:	46c0      	nop			; (mov r8, r8)
 8008166:	46bd      	mov	sp, r7
 8008168:	b002      	add	sp, #8
 800816a:	bd80      	pop	{r7, pc}

0800816c <HAL_UART_ErrorCallback>:
/**
 * @brief  UART error callback.
 * @param  huart UART handle.
 * @retval None
 */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008174:	46c0      	nop			; (mov r8, r8)
 8008176:	46bd      	mov	sp, r7
 8008178:	b002      	add	sp, #8
 800817a:	bd80      	pop	{r7, pc}

0800817c <HAL_UARTEx_RxEventCallback>:
 * @param  Size  Number of data available in application reception buffer
 * (indicates a position in reception buffer until which, data are available)
 * @retval None
 */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart,
                                       uint16_t Size) {
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	000a      	movs	r2, r1
 8008186:	1cbb      	adds	r3, r7, #2
 8008188:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800818a:	46c0      	nop			; (mov r8, r8)
 800818c:	46bd      	mov	sp, r7
 800818e:	b002      	add	sp, #8
 8008190:	bd80      	pop	{r7, pc}
	...

08008194 <UART_SetConfig>:
/**
 * @brief Configure the UART peripheral.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart) {
 8008194:	b5b0      	push	{r4, r5, r7, lr}
 8008196:	b090      	sub	sp, #64	; 0x40
 8008198:	af00      	add	r7, sp, #0
 800819a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret = HAL_OK;
 800819c:	231a      	movs	r3, #26
 800819e:	2220      	movs	r2, #32
 80081a0:	4694      	mov	ip, r2
 80081a2:	44bc      	add	ip, r7
 80081a4:	4463      	add	r3, ip
 80081a6:	2200      	movs	r2, #0
 80081a8:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity |
 80081aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ac:	689a      	ldr	r2, [r3, #8]
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	431a      	orrs	r2, r3
           huart->Init.Mode | huart->Init.OverSampling;
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	695b      	ldr	r3, [r3, #20]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity |
 80081b8:	431a      	orrs	r2, r3
           huart->Init.Mode | huart->Init.OverSampling;
 80081ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081bc:	69db      	ldr	r3, [r3, #28]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity |
 80081be:	4313      	orrs	r3, r2
 80081c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4ab9      	ldr	r2, [pc, #740]	; (80084b0 <UART_SetConfig+0x31c>)
 80081ca:	4013      	ands	r3, r2
 80081cc:	0019      	movs	r1, r3
 80081ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081d4:	430b      	orrs	r3, r1
 80081d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	4ab5      	ldr	r2, [pc, #724]	; (80084b4 <UART_SetConfig+0x320>)
 80081e0:	4013      	ands	r3, r2
 80081e2:	0018      	movs	r0, r3
 80081e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e6:	68d9      	ldr	r1, [r3, #12]
 80081e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	0003      	movs	r3, r0
 80081ee:	430b      	orrs	r3, r1
 80081f0:	6053      	str	r3, [r2, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f4:	699b      	ldr	r3, [r3, #24]
 80081f6:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart))) {
 80081f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4aae      	ldr	r2, [pc, #696]	; (80084b8 <UART_SetConfig+0x324>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d004      	beq.n	800820c <UART_SetConfig+0x78>
    tmpreg |= huart->Init.OneBitSampling;
 8008202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008208:	4313      	orrs	r3, r2
 800820a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800820c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	4aaa      	ldr	r2, [pc, #680]	; (80084bc <UART_SetConfig+0x328>)
 8008214:	4013      	ands	r3, r2
 8008216:	0019      	movs	r1, r3
 8008218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800821e:	430b      	orrs	r3, r1
 8008220:	6093      	str	r3, [r2, #8]
  /*-------------------------- USART PRESC Configuration
   * -----------------------*/
  /* Configure
   * - UART Clock Prescaler : set PRESCALER according to
   * huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER,
 8008222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008228:	220f      	movs	r2, #15
 800822a:	4393      	bics	r3, r2
 800822c:	0018      	movs	r0, r3
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	0003      	movs	r3, r0
 8008238:	430b      	orrs	r3, r1
 800823a:	62d3      	str	r3, [r2, #44]	; 0x2c
             huart->Init.ClockPrescaler);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800823c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a9f      	ldr	r2, [pc, #636]	; (80084c0 <UART_SetConfig+0x32c>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d136      	bne.n	80082b4 <UART_SetConfig+0x120>
 8008246:	4b9f      	ldr	r3, [pc, #636]	; (80084c4 <UART_SetConfig+0x330>)
 8008248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800824a:	2203      	movs	r2, #3
 800824c:	4013      	ands	r3, r2
 800824e:	2b03      	cmp	r3, #3
 8008250:	d020      	beq.n	8008294 <UART_SetConfig+0x100>
 8008252:	d827      	bhi.n	80082a4 <UART_SetConfig+0x110>
 8008254:	2b02      	cmp	r3, #2
 8008256:	d00d      	beq.n	8008274 <UART_SetConfig+0xe0>
 8008258:	d824      	bhi.n	80082a4 <UART_SetConfig+0x110>
 800825a:	2b00      	cmp	r3, #0
 800825c:	d002      	beq.n	8008264 <UART_SetConfig+0xd0>
 800825e:	2b01      	cmp	r3, #1
 8008260:	d010      	beq.n	8008284 <UART_SetConfig+0xf0>
 8008262:	e01f      	b.n	80082a4 <UART_SetConfig+0x110>
 8008264:	231b      	movs	r3, #27
 8008266:	2220      	movs	r2, #32
 8008268:	4694      	mov	ip, r2
 800826a:	44bc      	add	ip, r7
 800826c:	4463      	add	r3, ip
 800826e:	2200      	movs	r2, #0
 8008270:	701a      	strb	r2, [r3, #0]
 8008272:	e0c5      	b.n	8008400 <UART_SetConfig+0x26c>
 8008274:	231b      	movs	r3, #27
 8008276:	2220      	movs	r2, #32
 8008278:	4694      	mov	ip, r2
 800827a:	44bc      	add	ip, r7
 800827c:	4463      	add	r3, ip
 800827e:	2202      	movs	r2, #2
 8008280:	701a      	strb	r2, [r3, #0]
 8008282:	e0bd      	b.n	8008400 <UART_SetConfig+0x26c>
 8008284:	231b      	movs	r3, #27
 8008286:	2220      	movs	r2, #32
 8008288:	4694      	mov	ip, r2
 800828a:	44bc      	add	ip, r7
 800828c:	4463      	add	r3, ip
 800828e:	2204      	movs	r2, #4
 8008290:	701a      	strb	r2, [r3, #0]
 8008292:	e0b5      	b.n	8008400 <UART_SetConfig+0x26c>
 8008294:	231b      	movs	r3, #27
 8008296:	2220      	movs	r2, #32
 8008298:	4694      	mov	ip, r2
 800829a:	44bc      	add	ip, r7
 800829c:	4463      	add	r3, ip
 800829e:	2208      	movs	r2, #8
 80082a0:	701a      	strb	r2, [r3, #0]
 80082a2:	e0ad      	b.n	8008400 <UART_SetConfig+0x26c>
 80082a4:	231b      	movs	r3, #27
 80082a6:	2220      	movs	r2, #32
 80082a8:	4694      	mov	ip, r2
 80082aa:	44bc      	add	ip, r7
 80082ac:	4463      	add	r3, ip
 80082ae:	2210      	movs	r2, #16
 80082b0:	701a      	strb	r2, [r3, #0]
 80082b2:	e0a5      	b.n	8008400 <UART_SetConfig+0x26c>
 80082b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a83      	ldr	r2, [pc, #524]	; (80084c8 <UART_SetConfig+0x334>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d136      	bne.n	800832c <UART_SetConfig+0x198>
 80082be:	4b81      	ldr	r3, [pc, #516]	; (80084c4 <UART_SetConfig+0x330>)
 80082c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c2:	220c      	movs	r2, #12
 80082c4:	4013      	ands	r3, r2
 80082c6:	2b0c      	cmp	r3, #12
 80082c8:	d020      	beq.n	800830c <UART_SetConfig+0x178>
 80082ca:	d827      	bhi.n	800831c <UART_SetConfig+0x188>
 80082cc:	2b08      	cmp	r3, #8
 80082ce:	d00d      	beq.n	80082ec <UART_SetConfig+0x158>
 80082d0:	d824      	bhi.n	800831c <UART_SetConfig+0x188>
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d002      	beq.n	80082dc <UART_SetConfig+0x148>
 80082d6:	2b04      	cmp	r3, #4
 80082d8:	d010      	beq.n	80082fc <UART_SetConfig+0x168>
 80082da:	e01f      	b.n	800831c <UART_SetConfig+0x188>
 80082dc:	231b      	movs	r3, #27
 80082de:	2220      	movs	r2, #32
 80082e0:	4694      	mov	ip, r2
 80082e2:	44bc      	add	ip, r7
 80082e4:	4463      	add	r3, ip
 80082e6:	2200      	movs	r2, #0
 80082e8:	701a      	strb	r2, [r3, #0]
 80082ea:	e089      	b.n	8008400 <UART_SetConfig+0x26c>
 80082ec:	231b      	movs	r3, #27
 80082ee:	2220      	movs	r2, #32
 80082f0:	4694      	mov	ip, r2
 80082f2:	44bc      	add	ip, r7
 80082f4:	4463      	add	r3, ip
 80082f6:	2202      	movs	r2, #2
 80082f8:	701a      	strb	r2, [r3, #0]
 80082fa:	e081      	b.n	8008400 <UART_SetConfig+0x26c>
 80082fc:	231b      	movs	r3, #27
 80082fe:	2220      	movs	r2, #32
 8008300:	4694      	mov	ip, r2
 8008302:	44bc      	add	ip, r7
 8008304:	4463      	add	r3, ip
 8008306:	2204      	movs	r2, #4
 8008308:	701a      	strb	r2, [r3, #0]
 800830a:	e079      	b.n	8008400 <UART_SetConfig+0x26c>
 800830c:	231b      	movs	r3, #27
 800830e:	2220      	movs	r2, #32
 8008310:	4694      	mov	ip, r2
 8008312:	44bc      	add	ip, r7
 8008314:	4463      	add	r3, ip
 8008316:	2208      	movs	r2, #8
 8008318:	701a      	strb	r2, [r3, #0]
 800831a:	e071      	b.n	8008400 <UART_SetConfig+0x26c>
 800831c:	231b      	movs	r3, #27
 800831e:	2220      	movs	r2, #32
 8008320:	4694      	mov	ip, r2
 8008322:	44bc      	add	ip, r7
 8008324:	4463      	add	r3, ip
 8008326:	2210      	movs	r2, #16
 8008328:	701a      	strb	r2, [r3, #0]
 800832a:	e069      	b.n	8008400 <UART_SetConfig+0x26c>
 800832c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a66      	ldr	r2, [pc, #408]	; (80084cc <UART_SetConfig+0x338>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d107      	bne.n	8008346 <UART_SetConfig+0x1b2>
 8008336:	231b      	movs	r3, #27
 8008338:	2220      	movs	r2, #32
 800833a:	4694      	mov	ip, r2
 800833c:	44bc      	add	ip, r7
 800833e:	4463      	add	r3, ip
 8008340:	2200      	movs	r2, #0
 8008342:	701a      	strb	r2, [r3, #0]
 8008344:	e05c      	b.n	8008400 <UART_SetConfig+0x26c>
 8008346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a61      	ldr	r2, [pc, #388]	; (80084d0 <UART_SetConfig+0x33c>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d107      	bne.n	8008360 <UART_SetConfig+0x1cc>
 8008350:	231b      	movs	r3, #27
 8008352:	2220      	movs	r2, #32
 8008354:	4694      	mov	ip, r2
 8008356:	44bc      	add	ip, r7
 8008358:	4463      	add	r3, ip
 800835a:	2200      	movs	r2, #0
 800835c:	701a      	strb	r2, [r3, #0]
 800835e:	e04f      	b.n	8008400 <UART_SetConfig+0x26c>
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a54      	ldr	r2, [pc, #336]	; (80084b8 <UART_SetConfig+0x324>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d143      	bne.n	80083f2 <UART_SetConfig+0x25e>
 800836a:	4b56      	ldr	r3, [pc, #344]	; (80084c4 <UART_SetConfig+0x330>)
 800836c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800836e:	23c0      	movs	r3, #192	; 0xc0
 8008370:	011b      	lsls	r3, r3, #4
 8008372:	4013      	ands	r3, r2
 8008374:	22c0      	movs	r2, #192	; 0xc0
 8008376:	0112      	lsls	r2, r2, #4
 8008378:	4293      	cmp	r3, r2
 800837a:	d02a      	beq.n	80083d2 <UART_SetConfig+0x23e>
 800837c:	22c0      	movs	r2, #192	; 0xc0
 800837e:	0112      	lsls	r2, r2, #4
 8008380:	4293      	cmp	r3, r2
 8008382:	d82e      	bhi.n	80083e2 <UART_SetConfig+0x24e>
 8008384:	2280      	movs	r2, #128	; 0x80
 8008386:	0112      	lsls	r2, r2, #4
 8008388:	4293      	cmp	r3, r2
 800838a:	d012      	beq.n	80083b2 <UART_SetConfig+0x21e>
 800838c:	2280      	movs	r2, #128	; 0x80
 800838e:	0112      	lsls	r2, r2, #4
 8008390:	4293      	cmp	r3, r2
 8008392:	d826      	bhi.n	80083e2 <UART_SetConfig+0x24e>
 8008394:	2b00      	cmp	r3, #0
 8008396:	d004      	beq.n	80083a2 <UART_SetConfig+0x20e>
 8008398:	2280      	movs	r2, #128	; 0x80
 800839a:	00d2      	lsls	r2, r2, #3
 800839c:	4293      	cmp	r3, r2
 800839e:	d010      	beq.n	80083c2 <UART_SetConfig+0x22e>
 80083a0:	e01f      	b.n	80083e2 <UART_SetConfig+0x24e>
 80083a2:	231b      	movs	r3, #27
 80083a4:	2220      	movs	r2, #32
 80083a6:	4694      	mov	ip, r2
 80083a8:	44bc      	add	ip, r7
 80083aa:	4463      	add	r3, ip
 80083ac:	2200      	movs	r2, #0
 80083ae:	701a      	strb	r2, [r3, #0]
 80083b0:	e026      	b.n	8008400 <UART_SetConfig+0x26c>
 80083b2:	231b      	movs	r3, #27
 80083b4:	2220      	movs	r2, #32
 80083b6:	4694      	mov	ip, r2
 80083b8:	44bc      	add	ip, r7
 80083ba:	4463      	add	r3, ip
 80083bc:	2202      	movs	r2, #2
 80083be:	701a      	strb	r2, [r3, #0]
 80083c0:	e01e      	b.n	8008400 <UART_SetConfig+0x26c>
 80083c2:	231b      	movs	r3, #27
 80083c4:	2220      	movs	r2, #32
 80083c6:	4694      	mov	ip, r2
 80083c8:	44bc      	add	ip, r7
 80083ca:	4463      	add	r3, ip
 80083cc:	2204      	movs	r2, #4
 80083ce:	701a      	strb	r2, [r3, #0]
 80083d0:	e016      	b.n	8008400 <UART_SetConfig+0x26c>
 80083d2:	231b      	movs	r3, #27
 80083d4:	2220      	movs	r2, #32
 80083d6:	4694      	mov	ip, r2
 80083d8:	44bc      	add	ip, r7
 80083da:	4463      	add	r3, ip
 80083dc:	2208      	movs	r2, #8
 80083de:	701a      	strb	r2, [r3, #0]
 80083e0:	e00e      	b.n	8008400 <UART_SetConfig+0x26c>
 80083e2:	231b      	movs	r3, #27
 80083e4:	2220      	movs	r2, #32
 80083e6:	4694      	mov	ip, r2
 80083e8:	44bc      	add	ip, r7
 80083ea:	4463      	add	r3, ip
 80083ec:	2210      	movs	r2, #16
 80083ee:	701a      	strb	r2, [r3, #0]
 80083f0:	e006      	b.n	8008400 <UART_SetConfig+0x26c>
 80083f2:	231b      	movs	r3, #27
 80083f4:	2220      	movs	r2, #32
 80083f6:	4694      	mov	ip, r2
 80083f8:	44bc      	add	ip, r7
 80083fa:	4463      	add	r3, ip
 80083fc:	2210      	movs	r2, #16
 80083fe:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart)) {
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a2c      	ldr	r2, [pc, #176]	; (80084b8 <UART_SetConfig+0x324>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d000      	beq.n	800840c <UART_SetConfig+0x278>
 800840a:	e0ad      	b.n	8008568 <UART_SetConfig+0x3d4>
    /* Retrieve frequency clock */
    switch (clocksource) {
 800840c:	231b      	movs	r3, #27
 800840e:	2220      	movs	r2, #32
 8008410:	4694      	mov	ip, r2
 8008412:	44bc      	add	ip, r7
 8008414:	4463      	add	r3, ip
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	2b08      	cmp	r3, #8
 800841a:	d015      	beq.n	8008448 <UART_SetConfig+0x2b4>
 800841c:	dc18      	bgt.n	8008450 <UART_SetConfig+0x2bc>
 800841e:	2b04      	cmp	r3, #4
 8008420:	d00d      	beq.n	800843e <UART_SetConfig+0x2aa>
 8008422:	dc15      	bgt.n	8008450 <UART_SetConfig+0x2bc>
 8008424:	2b00      	cmp	r3, #0
 8008426:	d002      	beq.n	800842e <UART_SetConfig+0x29a>
 8008428:	2b02      	cmp	r3, #2
 800842a:	d005      	beq.n	8008438 <UART_SetConfig+0x2a4>
 800842c:	e010      	b.n	8008450 <UART_SetConfig+0x2bc>
    case UART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800842e:	f7fd fd2b 	bl	8005e88 <HAL_RCC_GetPCLK1Freq>
 8008432:	0003      	movs	r3, r0
 8008434:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8008436:	e015      	b.n	8008464 <UART_SetConfig+0x2d0>
    case UART_CLOCKSOURCE_HSI:
      pclk = (uint32_t)HSI_VALUE;
 8008438:	4b26      	ldr	r3, [pc, #152]	; (80084d4 <UART_SetConfig+0x340>)
 800843a:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800843c:	e012      	b.n	8008464 <UART_SetConfig+0x2d0>
    case UART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800843e:	f7fd fc97 	bl	8005d70 <HAL_RCC_GetSysClockFreq>
 8008442:	0003      	movs	r3, r0
 8008444:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8008446:	e00d      	b.n	8008464 <UART_SetConfig+0x2d0>
    case UART_CLOCKSOURCE_LSE:
      pclk = (uint32_t)LSE_VALUE;
 8008448:	2380      	movs	r3, #128	; 0x80
 800844a:	021b      	lsls	r3, r3, #8
 800844c:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800844e:	e009      	b.n	8008464 <UART_SetConfig+0x2d0>
    default:
      pclk = 0U;
 8008450:	2300      	movs	r3, #0
 8008452:	637b      	str	r3, [r7, #52]	; 0x34
      ret = HAL_ERROR;
 8008454:	231a      	movs	r3, #26
 8008456:	2220      	movs	r2, #32
 8008458:	4694      	mov	ip, r2
 800845a:	44bc      	add	ip, r7
 800845c:	4463      	add	r3, ip
 800845e:	2201      	movs	r2, #1
 8008460:	701a      	strb	r2, [r3, #0]
      break;
 8008462:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U) {
 8008464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008466:	2b00      	cmp	r3, #0
 8008468:	d100      	bne.n	800846c <UART_SetConfig+0x2d8>
 800846a:	e154      	b.n	8008716 <UART_SetConfig+0x582>
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800846c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008470:	4b19      	ldr	r3, [pc, #100]	; (80084d8 <UART_SetConfig+0x344>)
 8008472:	0052      	lsls	r2, r2, #1
 8008474:	5ad3      	ldrh	r3, [r2, r3]
 8008476:	0019      	movs	r1, r3
 8008478:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800847a:	f7f7 fe57 	bl	800012c <__udivsi3>
 800847e:	0003      	movs	r3, r0
 8008480:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 *
       * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008484:	685a      	ldr	r2, [r3, #4]
 8008486:	0013      	movs	r3, r2
 8008488:	005b      	lsls	r3, r3, #1
 800848a:	189b      	adds	r3, r3, r2
 800848c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800848e:	429a      	cmp	r2, r3
 8008490:	d305      	bcc.n	800849e <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate))) {
 8008492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008498:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800849a:	429a      	cmp	r2, r3
 800849c:	d91e      	bls.n	80084dc <UART_SetConfig+0x348>
        ret = HAL_ERROR;
 800849e:	231a      	movs	r3, #26
 80084a0:	2220      	movs	r2, #32
 80084a2:	4694      	mov	ip, r2
 80084a4:	44bc      	add	ip, r7
 80084a6:	4463      	add	r3, ip
 80084a8:	2201      	movs	r2, #1
 80084aa:	701a      	strb	r2, [r3, #0]
 80084ac:	e133      	b.n	8008716 <UART_SetConfig+0x582>
 80084ae:	46c0      	nop			; (mov r8, r8)
 80084b0:	cfff69f3 	.word	0xcfff69f3
 80084b4:	ffffcfff 	.word	0xffffcfff
 80084b8:	40008000 	.word	0x40008000
 80084bc:	11fff4ff 	.word	0x11fff4ff
 80084c0:	40013800 	.word	0x40013800
 80084c4:	40021000 	.word	0x40021000
 80084c8:	40004400 	.word	0x40004400
 80084cc:	40004800 	.word	0x40004800
 80084d0:	40004c00 	.word	0x40004c00
 80084d4:	00f42400 	.word	0x00f42400
 80084d8:	0800aba4 	.word	0x0800aba4
      } else {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR
           register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate,
 80084dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084de:	61bb      	str	r3, [r7, #24]
 80084e0:	2300      	movs	r3, #0
 80084e2:	61fb      	str	r3, [r7, #28]
 80084e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084e8:	4b97      	ldr	r3, [pc, #604]	; (8008748 <UART_SetConfig+0x5b4>)
 80084ea:	0052      	lsls	r2, r2, #1
 80084ec:	5ad3      	ldrh	r3, [r2, r3]
 80084ee:	613b      	str	r3, [r7, #16]
 80084f0:	2300      	movs	r3, #0
 80084f2:	617b      	str	r3, [r7, #20]
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	69b8      	ldr	r0, [r7, #24]
 80084fa:	69f9      	ldr	r1, [r7, #28]
 80084fc:	f7f7 ff8c 	bl	8000418 <__aeabi_uldivmod>
 8008500:	0002      	movs	r2, r0
 8008502:	000b      	movs	r3, r1
 8008504:	0e11      	lsrs	r1, r2, #24
 8008506:	021d      	lsls	r5, r3, #8
 8008508:	430d      	orrs	r5, r1
 800850a:	0214      	lsls	r4, r2, #8
 800850c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	085b      	lsrs	r3, r3, #1
 8008512:	60bb      	str	r3, [r7, #8]
 8008514:	2300      	movs	r3, #0
 8008516:	60fb      	str	r3, [r7, #12]
 8008518:	68b8      	ldr	r0, [r7, #8]
 800851a:	68f9      	ldr	r1, [r7, #12]
 800851c:	1900      	adds	r0, r0, r4
 800851e:	4169      	adcs	r1, r5
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	603b      	str	r3, [r7, #0]
 8008526:	2300      	movs	r3, #0
 8008528:	607b      	str	r3, [r7, #4]
 800852a:	683a      	ldr	r2, [r7, #0]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f7f7 ff73 	bl	8000418 <__aeabi_uldivmod>
 8008532:	0002      	movs	r2, r0
 8008534:	000b      	movs	r3, r1
 8008536:	0013      	movs	r3, r2
 8008538:	633b      	str	r3, [r7, #48]	; 0x30
                                              huart->Init.ClockPrescaler));
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX)) {
 800853a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800853c:	23c0      	movs	r3, #192	; 0xc0
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	429a      	cmp	r2, r3
 8008542:	d309      	bcc.n	8008558 <UART_SetConfig+0x3c4>
 8008544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008546:	2380      	movs	r3, #128	; 0x80
 8008548:	035b      	lsls	r3, r3, #13
 800854a:	429a      	cmp	r2, r3
 800854c:	d204      	bcs.n	8008558 <UART_SetConfig+0x3c4>
          huart->Instance->BRR = usartdiv;
 800854e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008554:	60da      	str	r2, [r3, #12]
 8008556:	e0de      	b.n	8008716 <UART_SetConfig+0x582>
        } else {
          ret = HAL_ERROR;
 8008558:	231a      	movs	r3, #26
 800855a:	2220      	movs	r2, #32
 800855c:	4694      	mov	ip, r2
 800855e:	44bc      	add	ip, r7
 8008560:	4463      	add	r3, ip
 8008562:	2201      	movs	r2, #1
 8008564:	701a      	strb	r2, [r3, #0]
 8008566:	e0d6      	b.n	8008716 <UART_SetConfig+0x582>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    }   /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8008568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856a:	69da      	ldr	r2, [r3, #28]
 800856c:	2380      	movs	r3, #128	; 0x80
 800856e:	021b      	lsls	r3, r3, #8
 8008570:	429a      	cmp	r2, r3
 8008572:	d000      	beq.n	8008576 <UART_SetConfig+0x3e2>
 8008574:	e074      	b.n	8008660 <UART_SetConfig+0x4cc>
    switch (clocksource) {
 8008576:	231b      	movs	r3, #27
 8008578:	2220      	movs	r2, #32
 800857a:	4694      	mov	ip, r2
 800857c:	44bc      	add	ip, r7
 800857e:	4463      	add	r3, ip
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	2b08      	cmp	r3, #8
 8008584:	d015      	beq.n	80085b2 <UART_SetConfig+0x41e>
 8008586:	dc18      	bgt.n	80085ba <UART_SetConfig+0x426>
 8008588:	2b04      	cmp	r3, #4
 800858a:	d00d      	beq.n	80085a8 <UART_SetConfig+0x414>
 800858c:	dc15      	bgt.n	80085ba <UART_SetConfig+0x426>
 800858e:	2b00      	cmp	r3, #0
 8008590:	d002      	beq.n	8008598 <UART_SetConfig+0x404>
 8008592:	2b02      	cmp	r3, #2
 8008594:	d005      	beq.n	80085a2 <UART_SetConfig+0x40e>
 8008596:	e010      	b.n	80085ba <UART_SetConfig+0x426>
    case UART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8008598:	f7fd fc76 	bl	8005e88 <HAL_RCC_GetPCLK1Freq>
 800859c:	0003      	movs	r3, r0
 800859e:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80085a0:	e015      	b.n	80085ce <UART_SetConfig+0x43a>
    case UART_CLOCKSOURCE_HSI:
      pclk = (uint32_t)HSI_VALUE;
 80085a2:	4b6a      	ldr	r3, [pc, #424]	; (800874c <UART_SetConfig+0x5b8>)
 80085a4:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80085a6:	e012      	b.n	80085ce <UART_SetConfig+0x43a>
    case UART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 80085a8:	f7fd fbe2 	bl	8005d70 <HAL_RCC_GetSysClockFreq>
 80085ac:	0003      	movs	r3, r0
 80085ae:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80085b0:	e00d      	b.n	80085ce <UART_SetConfig+0x43a>
    case UART_CLOCKSOURCE_LSE:
      pclk = (uint32_t)LSE_VALUE;
 80085b2:	2380      	movs	r3, #128	; 0x80
 80085b4:	021b      	lsls	r3, r3, #8
 80085b6:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80085b8:	e009      	b.n	80085ce <UART_SetConfig+0x43a>
    default:
      pclk = 0U;
 80085ba:	2300      	movs	r3, #0
 80085bc:	637b      	str	r3, [r7, #52]	; 0x34
      ret = HAL_ERROR;
 80085be:	231a      	movs	r3, #26
 80085c0:	2220      	movs	r2, #32
 80085c2:	4694      	mov	ip, r2
 80085c4:	44bc      	add	ip, r7
 80085c6:	4463      	add	r3, ip
 80085c8:	2201      	movs	r2, #1
 80085ca:	701a      	strb	r2, [r3, #0]
      break;
 80085cc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U) {
 80085ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d100      	bne.n	80085d6 <UART_SetConfig+0x442>
 80085d4:	e09f      	b.n	8008716 <UART_SetConfig+0x582>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate,
 80085d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085da:	4b5b      	ldr	r3, [pc, #364]	; (8008748 <UART_SetConfig+0x5b4>)
 80085dc:	0052      	lsls	r2, r2, #1
 80085de:	5ad3      	ldrh	r3, [r2, r3]
 80085e0:	0019      	movs	r1, r3
 80085e2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80085e4:	f7f7 fda2 	bl	800012c <__udivsi3>
 80085e8:	0003      	movs	r3, r0
 80085ea:	005a      	lsls	r2, r3, #1
 80085ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	085b      	lsrs	r3, r3, #1
 80085f2:	18d2      	adds	r2, r2, r3
 80085f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	0019      	movs	r1, r3
 80085fa:	0010      	movs	r0, r2
 80085fc:	f7f7 fd96 	bl	800012c <__udivsi3>
 8008600:	0003      	movs	r3, r0
 8008602:	b29b      	uxth	r3, r3
 8008604:	633b      	str	r3, [r7, #48]	; 0x30
                                               huart->Init.ClockPrescaler));
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 8008606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008608:	2b0f      	cmp	r3, #15
 800860a:	d921      	bls.n	8008650 <UART_SetConfig+0x4bc>
 800860c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800860e:	2380      	movs	r3, #128	; 0x80
 8008610:	025b      	lsls	r3, r3, #9
 8008612:	429a      	cmp	r2, r3
 8008614:	d21c      	bcs.n	8008650 <UART_SetConfig+0x4bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008618:	b29a      	uxth	r2, r3
 800861a:	200e      	movs	r0, #14
 800861c:	2420      	movs	r4, #32
 800861e:	193b      	adds	r3, r7, r4
 8008620:	181b      	adds	r3, r3, r0
 8008622:	210f      	movs	r1, #15
 8008624:	438a      	bics	r2, r1
 8008626:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862a:	085b      	lsrs	r3, r3, #1
 800862c:	b29b      	uxth	r3, r3
 800862e:	2207      	movs	r2, #7
 8008630:	4013      	ands	r3, r2
 8008632:	b299      	uxth	r1, r3
 8008634:	193b      	adds	r3, r7, r4
 8008636:	181b      	adds	r3, r3, r0
 8008638:	193a      	adds	r2, r7, r4
 800863a:	1812      	adds	r2, r2, r0
 800863c:	8812      	ldrh	r2, [r2, #0]
 800863e:	430a      	orrs	r2, r1
 8008640:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	193a      	adds	r2, r7, r4
 8008648:	1812      	adds	r2, r2, r0
 800864a:	8812      	ldrh	r2, [r2, #0]
 800864c:	60da      	str	r2, [r3, #12]
 800864e:	e062      	b.n	8008716 <UART_SetConfig+0x582>
      } else {
        ret = HAL_ERROR;
 8008650:	231a      	movs	r3, #26
 8008652:	2220      	movs	r2, #32
 8008654:	4694      	mov	ip, r2
 8008656:	44bc      	add	ip, r7
 8008658:	4463      	add	r3, ip
 800865a:	2201      	movs	r2, #1
 800865c:	701a      	strb	r2, [r3, #0]
 800865e:	e05a      	b.n	8008716 <UART_SetConfig+0x582>
      }
    }
  } else {
    switch (clocksource) {
 8008660:	231b      	movs	r3, #27
 8008662:	2220      	movs	r2, #32
 8008664:	4694      	mov	ip, r2
 8008666:	44bc      	add	ip, r7
 8008668:	4463      	add	r3, ip
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	2b08      	cmp	r3, #8
 800866e:	d015      	beq.n	800869c <UART_SetConfig+0x508>
 8008670:	dc18      	bgt.n	80086a4 <UART_SetConfig+0x510>
 8008672:	2b04      	cmp	r3, #4
 8008674:	d00d      	beq.n	8008692 <UART_SetConfig+0x4fe>
 8008676:	dc15      	bgt.n	80086a4 <UART_SetConfig+0x510>
 8008678:	2b00      	cmp	r3, #0
 800867a:	d002      	beq.n	8008682 <UART_SetConfig+0x4ee>
 800867c:	2b02      	cmp	r3, #2
 800867e:	d005      	beq.n	800868c <UART_SetConfig+0x4f8>
 8008680:	e010      	b.n	80086a4 <UART_SetConfig+0x510>
    case UART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8008682:	f7fd fc01 	bl	8005e88 <HAL_RCC_GetPCLK1Freq>
 8008686:	0003      	movs	r3, r0
 8008688:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800868a:	e015      	b.n	80086b8 <UART_SetConfig+0x524>
    case UART_CLOCKSOURCE_HSI:
      pclk = (uint32_t)HSI_VALUE;
 800868c:	4b2f      	ldr	r3, [pc, #188]	; (800874c <UART_SetConfig+0x5b8>)
 800868e:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8008690:	e012      	b.n	80086b8 <UART_SetConfig+0x524>
    case UART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8008692:	f7fd fb6d 	bl	8005d70 <HAL_RCC_GetSysClockFreq>
 8008696:	0003      	movs	r3, r0
 8008698:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800869a:	e00d      	b.n	80086b8 <UART_SetConfig+0x524>
    case UART_CLOCKSOURCE_LSE:
      pclk = (uint32_t)LSE_VALUE;
 800869c:	2380      	movs	r3, #128	; 0x80
 800869e:	021b      	lsls	r3, r3, #8
 80086a0:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80086a2:	e009      	b.n	80086b8 <UART_SetConfig+0x524>
    default:
      pclk = 0U;
 80086a4:	2300      	movs	r3, #0
 80086a6:	637b      	str	r3, [r7, #52]	; 0x34
      ret = HAL_ERROR;
 80086a8:	231a      	movs	r3, #26
 80086aa:	2220      	movs	r2, #32
 80086ac:	4694      	mov	ip, r2
 80086ae:	44bc      	add	ip, r7
 80086b0:	4463      	add	r3, ip
 80086b2:	2201      	movs	r2, #1
 80086b4:	701a      	strb	r2, [r3, #0]
      break;
 80086b6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U) {
 80086b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d02b      	beq.n	8008716 <UART_SetConfig+0x582>
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate,
 80086be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086c2:	4b21      	ldr	r3, [pc, #132]	; (8008748 <UART_SetConfig+0x5b4>)
 80086c4:	0052      	lsls	r2, r2, #1
 80086c6:	5ad3      	ldrh	r3, [r2, r3]
 80086c8:	0019      	movs	r1, r3
 80086ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80086cc:	f7f7 fd2e 	bl	800012c <__udivsi3>
 80086d0:	0003      	movs	r3, r0
 80086d2:	001a      	movs	r2, r3
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	085b      	lsrs	r3, r3, #1
 80086da:	18d2      	adds	r2, r2, r3
 80086dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	0019      	movs	r1, r3
 80086e2:	0010      	movs	r0, r2
 80086e4:	f7f7 fd22 	bl	800012c <__udivsi3>
 80086e8:	0003      	movs	r3, r0
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	633b      	str	r3, [r7, #48]	; 0x30
                                                huart->Init.ClockPrescaler));
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 80086ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f0:	2b0f      	cmp	r3, #15
 80086f2:	d909      	bls.n	8008708 <UART_SetConfig+0x574>
 80086f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086f6:	2380      	movs	r3, #128	; 0x80
 80086f8:	025b      	lsls	r3, r3, #9
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d204      	bcs.n	8008708 <UART_SetConfig+0x574>
        huart->Instance->BRR = usartdiv;
 80086fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008704:	60da      	str	r2, [r3, #12]
 8008706:	e006      	b.n	8008716 <UART_SetConfig+0x582>
      } else {
        ret = HAL_ERROR;
 8008708:	231a      	movs	r3, #26
 800870a:	2220      	movs	r2, #32
 800870c:	4694      	mov	ip, r2
 800870e:	44bc      	add	ip, r7
 8008710:	4463      	add	r3, ip
 8008712:	2201      	movs	r2, #1
 8008714:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008718:	226a      	movs	r2, #106	; 0x6a
 800871a:	2101      	movs	r1, #1
 800871c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800871e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008720:	2268      	movs	r2, #104	; 0x68
 8008722:	2101      	movs	r1, #1
 8008724:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008728:	2200      	movs	r2, #0
 800872a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800872c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872e:	2200      	movs	r2, #0
 8008730:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008732:	231a      	movs	r3, #26
 8008734:	2220      	movs	r2, #32
 8008736:	4694      	mov	ip, r2
 8008738:	44bc      	add	ip, r7
 800873a:	4463      	add	r3, ip
 800873c:	781b      	ldrb	r3, [r3, #0]
}
 800873e:	0018      	movs	r0, r3
 8008740:	46bd      	mov	sp, r7
 8008742:	b010      	add	sp, #64	; 0x40
 8008744:	bdb0      	pop	{r4, r5, r7, pc}
 8008746:	46c0      	nop			; (mov r8, r8)
 8008748:	0800aba4 	.word	0x0800aba4
 800874c:	00f42400 	.word	0x00f42400

08008750 <UART_AdvFeatureConfig>:
/**
 * @brief Configure the UART peripheral advanced features.
 * @param huart UART handle.
 * @retval None
 */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart) {
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875c:	2201      	movs	r2, #1
 800875e:	4013      	ands	r3, r2
 8008760:	d00b      	beq.n	800877a <UART_AdvFeatureConfig+0x2a>
                     UART_ADVFEATURE_TXINVERT_INIT)) {
    assert_param(
        IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV,
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	4a4a      	ldr	r2, [pc, #296]	; (8008894 <UART_AdvFeatureConfig+0x144>)
 800876a:	4013      	ands	r3, r2
 800876c:	0019      	movs	r1, r3
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	430a      	orrs	r2, r1
 8008778:	605a      	str	r2, [r3, #4]
               huart->AdvancedInit.TxPinLevelInvert);
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877e:	2202      	movs	r2, #2
 8008780:	4013      	ands	r3, r2
 8008782:	d00b      	beq.n	800879c <UART_AdvFeatureConfig+0x4c>
                     UART_ADVFEATURE_RXINVERT_INIT)) {
    assert_param(
        IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV,
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	4a43      	ldr	r2, [pc, #268]	; (8008898 <UART_AdvFeatureConfig+0x148>)
 800878c:	4013      	ands	r3, r2
 800878e:	0019      	movs	r1, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	430a      	orrs	r2, r1
 800879a:	605a      	str	r2, [r3, #4]
               huart->AdvancedInit.RxPinLevelInvert);
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a0:	2204      	movs	r2, #4
 80087a2:	4013      	ands	r3, r2
 80087a4:	d00b      	beq.n	80087be <UART_AdvFeatureConfig+0x6e>
                     UART_ADVFEATURE_DATAINVERT_INIT)) {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV,
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	4a3b      	ldr	r2, [pc, #236]	; (800889c <UART_AdvFeatureConfig+0x14c>)
 80087ae:	4013      	ands	r3, r2
 80087b0:	0019      	movs	r1, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	430a      	orrs	r2, r1
 80087bc:	605a      	str	r2, [r3, #4]
               huart->AdvancedInit.DataInvert);
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c2:	2208      	movs	r2, #8
 80087c4:	4013      	ands	r3, r2
 80087c6:	d00b      	beq.n	80087e0 <UART_AdvFeatureConfig+0x90>
                     UART_ADVFEATURE_SWAP_INIT)) {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	4a34      	ldr	r2, [pc, #208]	; (80088a0 <UART_AdvFeatureConfig+0x150>)
 80087d0:	4013      	ands	r3, r2
 80087d2:	0019      	movs	r1, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	430a      	orrs	r2, r1
 80087de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e4:	2210      	movs	r2, #16
 80087e6:	4013      	ands	r3, r2
 80087e8:	d00b      	beq.n	8008802 <UART_AdvFeatureConfig+0xb2>
                     UART_ADVFEATURE_RXOVERRUNDISABLE_INIT)) {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS,
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	4a2c      	ldr	r2, [pc, #176]	; (80088a4 <UART_AdvFeatureConfig+0x154>)
 80087f2:	4013      	ands	r3, r2
 80087f4:	0019      	movs	r1, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	430a      	orrs	r2, r1
 8008800:	609a      	str	r2, [r3, #8]
               huart->AdvancedInit.OverrunDisable);
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008806:	2220      	movs	r2, #32
 8008808:	4013      	ands	r3, r2
 800880a:	d00b      	beq.n	8008824 <UART_AdvFeatureConfig+0xd4>
                     UART_ADVFEATURE_DMADISABLEONERROR_INIT)) {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(
        huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE,
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	4a25      	ldr	r2, [pc, #148]	; (80088a8 <UART_AdvFeatureConfig+0x158>)
 8008814:	4013      	ands	r3, r2
 8008816:	0019      	movs	r1, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	430a      	orrs	r2, r1
 8008822:	609a      	str	r2, [r3, #8]
               huart->AdvancedInit.DMADisableonRxError);
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008828:	2240      	movs	r2, #64	; 0x40
 800882a:	4013      	ands	r3, r2
 800882c:	d01d      	beq.n	800886a <UART_AdvFeatureConfig+0x11a>
                     UART_ADVFEATURE_AUTOBAUDRATE_INIT)) {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(
        huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN,
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	4a1d      	ldr	r2, [pc, #116]	; (80088ac <UART_AdvFeatureConfig+0x15c>)
 8008836:	4013      	ands	r3, r2
 8008838:	0019      	movs	r1, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	430a      	orrs	r2, r1
 8008844:	605a      	str	r2, [r3, #4]
               huart->AdvancedInit.AutoBaudRateEnable);
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable ==
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800884a:	2380      	movs	r3, #128	; 0x80
 800884c:	035b      	lsls	r3, r3, #13
 800884e:	429a      	cmp	r2, r3
 8008850:	d10b      	bne.n	800886a <UART_AdvFeatureConfig+0x11a>
        UART_ADVFEATURE_AUTOBAUDRATE_ENABLE) {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(
          huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE,
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	4a15      	ldr	r2, [pc, #84]	; (80088b0 <UART_AdvFeatureConfig+0x160>)
 800885a:	4013      	ands	r3, r2
 800885c:	0019      	movs	r1, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	430a      	orrs	r2, r1
 8008868:	605a      	str	r2, [r3, #4]
                 huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886e:	2280      	movs	r2, #128	; 0x80
 8008870:	4013      	ands	r3, r2
 8008872:	d00b      	beq.n	800888c <UART_AdvFeatureConfig+0x13c>
                     UART_ADVFEATURE_MSBFIRST_INIT)) {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST,
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	4a0e      	ldr	r2, [pc, #56]	; (80088b4 <UART_AdvFeatureConfig+0x164>)
 800887c:	4013      	ands	r3, r2
 800887e:	0019      	movs	r1, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	430a      	orrs	r2, r1
 800888a:	605a      	str	r2, [r3, #4]
               huart->AdvancedInit.MSBFirst);
  }
}
 800888c:	46c0      	nop			; (mov r8, r8)
 800888e:	46bd      	mov	sp, r7
 8008890:	b002      	add	sp, #8
 8008892:	bd80      	pop	{r7, pc}
 8008894:	fffdffff 	.word	0xfffdffff
 8008898:	fffeffff 	.word	0xfffeffff
 800889c:	fffbffff 	.word	0xfffbffff
 80088a0:	ffff7fff 	.word	0xffff7fff
 80088a4:	ffffefff 	.word	0xffffefff
 80088a8:	ffffdfff 	.word	0xffffdfff
 80088ac:	ffefffff 	.word	0xffefffff
 80088b0:	ff9fffff 	.word	0xff9fffff
 80088b4:	fff7ffff 	.word	0xfff7ffff

080088b8 <UART_CheckIdleState>:
/**
 * @brief Check the UART Idle State.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart) {
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b086      	sub	sp, #24
 80088bc:	af02      	add	r7, sp, #8
 80088be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	228c      	movs	r2, #140	; 0x8c
 80088c4:	2100      	movs	r1, #0
 80088c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088c8:	f7fb fd64 	bl	8004394 <HAL_GetTick>
 80088cc:	0003      	movs	r3, r0
 80088ce:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE) {
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2208      	movs	r2, #8
 80088d8:	4013      	ands	r3, r2
 80088da:	2b08      	cmp	r3, #8
 80088dc:	d10c      	bne.n	80088f8 <UART_CheckIdleState+0x40>
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart,
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2280      	movs	r2, #128	; 0x80
 80088e2:	0391      	lsls	r1, r2, #14
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	4a18      	ldr	r2, [pc, #96]	; (8008948 <UART_CheckIdleState+0x90>)
 80088e8:	9200      	str	r2, [sp, #0]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f000 f82e 	bl	800894c <UART_WaitOnFlagUntilTimeout>
 80088f0:	1e03      	subs	r3, r0, #0
 80088f2:	d001      	beq.n	80088f8 <UART_CheckIdleState+0x40>
                                    HAL_UART_TIMEOUT_VALUE) != HAL_OK) {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088f4:	2303      	movs	r3, #3
 80088f6:	e023      	b.n	8008940 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE) {
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2204      	movs	r2, #4
 8008900:	4013      	ands	r3, r2
 8008902:	2b04      	cmp	r3, #4
 8008904:	d10c      	bne.n	8008920 <UART_CheckIdleState+0x68>
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart,
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2280      	movs	r2, #128	; 0x80
 800890a:	03d1      	lsls	r1, r2, #15
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	4a0e      	ldr	r2, [pc, #56]	; (8008948 <UART_CheckIdleState+0x90>)
 8008910:	9200      	str	r2, [sp, #0]
 8008912:	2200      	movs	r2, #0
 8008914:	f000 f81a 	bl	800894c <UART_WaitOnFlagUntilTimeout>
 8008918:	1e03      	subs	r3, r0, #0
 800891a:	d001      	beq.n	8008920 <UART_CheckIdleState+0x68>
                                    HAL_UART_TIMEOUT_VALUE) != HAL_OK) {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800891c:	2303      	movs	r3, #3
 800891e:	e00f      	b.n	8008940 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2284      	movs	r2, #132	; 0x84
 8008924:	2120      	movs	r1, #32
 8008926:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2288      	movs	r2, #136	; 0x88
 800892c:	2120      	movs	r1, #32
 800892e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2280      	movs	r2, #128	; 0x80
 800893a:	2100      	movs	r1, #0
 800893c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	0018      	movs	r0, r3
 8008942:	46bd      	mov	sp, r7
 8008944:	b004      	add	sp, #16
 8008946:	bd80      	pop	{r7, pc}
 8008948:	01ffffff 	.word	0x01ffffff

0800894c <UART_WaitOnFlagUntilTimeout>:
 * @retval HAL status
 */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart,
                                              uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart,
                                              uint32_t Timeout) {
 800894c:	b580      	push	{r7, lr}
 800894e:	b094      	sub	sp, #80	; 0x50
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	603b      	str	r3, [r7, #0]
 8008958:	1dfb      	adds	r3, r7, #7
 800895a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 800895c:	e0a7      	b.n	8008aae <UART_WaitOnFlagUntilTimeout+0x162>
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY) {
 800895e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008960:	3301      	adds	r3, #1
 8008962:	d100      	bne.n	8008966 <UART_WaitOnFlagUntilTimeout+0x1a>
 8008964:	e0a3      	b.n	8008aae <UART_WaitOnFlagUntilTimeout+0x162>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8008966:	f7fb fd15 	bl	8004394 <HAL_GetTick>
 800896a:	0002      	movs	r2, r0
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008972:	429a      	cmp	r2, r3
 8008974:	d302      	bcc.n	800897c <UART_WaitOnFlagUntilTimeout+0x30>
 8008976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008978:	2b00      	cmp	r3, #0
 800897a:	d13f      	bne.n	80089fc <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800897c:	f3ef 8310 	mrs	r3, PRIMASK
 8008980:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008982:	6abb      	ldr	r3, [r7, #40]	; 0x28
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun
           error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8008984:	647b      	str	r3, [r7, #68]	; 0x44
 8008986:	2301      	movs	r3, #1
 8008988:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800898a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898c:	f383 8810 	msr	PRIMASK, r3
}
 8008990:	46c0      	nop			; (mov r8, r8)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	494e      	ldr	r1, [pc, #312]	; (8008ad8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800899e:	400a      	ands	r2, r1
 80089a0:	601a      	str	r2, [r3, #0]
 80089a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089a4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a8:	f383 8810 	msr	PRIMASK, r3
}
 80089ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089ae:	f3ef 8310 	mrs	r3, PRIMASK
 80089b2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80089b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                         (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                          USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089b6:	643b      	str	r3, [r7, #64]	; 0x40
 80089b8:	2301      	movs	r3, #1
 80089ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089be:	f383 8810 	msr	PRIMASK, r3
}
 80089c2:	46c0      	nop			; (mov r8, r8)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	689a      	ldr	r2, [r3, #8]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2101      	movs	r1, #1
 80089d0:	438a      	bics	r2, r1
 80089d2:	609a      	str	r2, [r3, #8]
 80089d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089da:	f383 8810 	msr	PRIMASK, r3
}
 80089de:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2284      	movs	r2, #132	; 0x84
 80089e4:	2120      	movs	r1, #32
 80089e6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2288      	movs	r2, #136	; 0x88
 80089ec:	2120      	movs	r1, #32
 80089ee:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2280      	movs	r2, #128	; 0x80
 80089f4:	2100      	movs	r1, #0
 80089f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e069      	b.n	8008ad0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) {
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2204      	movs	r2, #4
 8008a04:	4013      	ands	r3, r2
 8008a06:	d052      	beq.n	8008aae <UART_WaitOnFlagUntilTimeout+0x162>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET) {
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	69da      	ldr	r2, [r3, #28]
 8008a0e:	2380      	movs	r3, #128	; 0x80
 8008a10:	011b      	lsls	r3, r3, #4
 8008a12:	401a      	ands	r2, r3
 8008a14:	2380      	movs	r3, #128	; 0x80
 8008a16:	011b      	lsls	r3, r3, #4
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d148      	bne.n	8008aae <UART_WaitOnFlagUntilTimeout+0x162>
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2280      	movs	r2, #128	; 0x80
 8008a22:	0112      	lsls	r2, r2, #4
 8008a24:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a26:	f3ef 8310 	mrs	r3, PRIMASK
 8008a2a:	613b      	str	r3, [r7, #16]
  return(result);
 8008a2c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun
             error) interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8008a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a30:	2301      	movs	r3, #1
 8008a32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	f383 8810 	msr	PRIMASK, r3
}
 8008a3a:	46c0      	nop			; (mov r8, r8)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4924      	ldr	r1, [pc, #144]	; (8008ad8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008a48:	400a      	ands	r2, r1
 8008a4a:	601a      	str	r2, [r3, #0]
 8008a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	f383 8810 	msr	PRIMASK, r3
}
 8008a56:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a58:	f3ef 8310 	mrs	r3, PRIMASK
 8008a5c:	61fb      	str	r3, [r7, #28]
  return(result);
 8008a5e:	69fb      	ldr	r3, [r7, #28]
                           (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                            USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a60:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a62:	2301      	movs	r3, #1
 8008a64:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a66:	6a3b      	ldr	r3, [r7, #32]
 8008a68:	f383 8810 	msr	PRIMASK, r3
}
 8008a6c:	46c0      	nop			; (mov r8, r8)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	689a      	ldr	r2, [r3, #8]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2101      	movs	r1, #1
 8008a7a:	438a      	bics	r2, r1
 8008a7c:	609a      	str	r2, [r3, #8]
 8008a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a80:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a84:	f383 8810 	msr	PRIMASK, r3
}
 8008a88:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2284      	movs	r2, #132	; 0x84
 8008a8e:	2120      	movs	r1, #32
 8008a90:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2288      	movs	r2, #136	; 0x88
 8008a96:	2120      	movs	r1, #32
 8008a98:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	228c      	movs	r2, #140	; 0x8c
 8008a9e:	2120      	movs	r1, #32
 8008aa0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2280      	movs	r2, #128	; 0x80
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e010      	b.n	8008ad0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	69db      	ldr	r3, [r3, #28]
 8008ab4:	68ba      	ldr	r2, [r7, #8]
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	425a      	negs	r2, r3
 8008abe:	4153      	adcs	r3, r2
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	001a      	movs	r2, r3
 8008ac4:	1dfb      	adds	r3, r7, #7
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d100      	bne.n	8008ace <UART_WaitOnFlagUntilTimeout+0x182>
 8008acc:	e747      	b.n	800895e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	0018      	movs	r0, r3
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	b014      	add	sp, #80	; 0x50
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	fffffe5f 	.word	0xfffffe5f

08008adc <UART_Start_Receive_IT>:
 * @param  pData Pointer to data buffer (u8 or u16 data elements).
 * @param  Size  Amount of data elements (u8 or u16) to be received.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart,
                                        uint8_t *pData, uint16_t Size) {
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b094      	sub	sp, #80	; 0x50
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	1dbb      	adds	r3, r7, #6
 8008ae8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	1dba      	adds	r2, r7, #6
 8008af4:	215c      	movs	r1, #92	; 0x5c
 8008af6:	8812      	ldrh	r2, [r2, #0]
 8008af8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	1dba      	adds	r2, r7, #6
 8008afe:	215e      	movs	r1, #94	; 0x5e
 8008b00:	8812      	ldrh	r2, [r2, #0]
 8008b02:	525a      	strh	r2, [r3, r1]
  huart->RxISR = NULL;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	689a      	ldr	r2, [r3, #8]
 8008b0e:	2380      	movs	r3, #128	; 0x80
 8008b10:	015b      	lsls	r3, r3, #5
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d10d      	bne.n	8008b32 <UART_Start_Receive_IT+0x56>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d104      	bne.n	8008b28 <UART_Start_Receive_IT+0x4c>
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2260      	movs	r2, #96	; 0x60
 8008b22:	496f      	ldr	r1, [pc, #444]	; (8008ce0 <UART_Start_Receive_IT+0x204>)
 8008b24:	5299      	strh	r1, [r3, r2]
 8008b26:	e02e      	b.n	8008b86 <UART_Start_Receive_IT+0xaa>
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2260      	movs	r2, #96	; 0x60
 8008b2c:	21ff      	movs	r1, #255	; 0xff
 8008b2e:	5299      	strh	r1, [r3, r2]
 8008b30:	e029      	b.n	8008b86 <UART_Start_Receive_IT+0xaa>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10d      	bne.n	8008b56 <UART_Start_Receive_IT+0x7a>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d104      	bne.n	8008b4c <UART_Start_Receive_IT+0x70>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2260      	movs	r2, #96	; 0x60
 8008b46:	21ff      	movs	r1, #255	; 0xff
 8008b48:	5299      	strh	r1, [r3, r2]
 8008b4a:	e01c      	b.n	8008b86 <UART_Start_Receive_IT+0xaa>
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2260      	movs	r2, #96	; 0x60
 8008b50:	217f      	movs	r1, #127	; 0x7f
 8008b52:	5299      	strh	r1, [r3, r2]
 8008b54:	e017      	b.n	8008b86 <UART_Start_Receive_IT+0xaa>
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	689a      	ldr	r2, [r3, #8]
 8008b5a:	2380      	movs	r3, #128	; 0x80
 8008b5c:	055b      	lsls	r3, r3, #21
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d10d      	bne.n	8008b7e <UART_Start_Receive_IT+0xa2>
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d104      	bne.n	8008b74 <UART_Start_Receive_IT+0x98>
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2260      	movs	r2, #96	; 0x60
 8008b6e:	217f      	movs	r1, #127	; 0x7f
 8008b70:	5299      	strh	r1, [r3, r2]
 8008b72:	e008      	b.n	8008b86 <UART_Start_Receive_IT+0xaa>
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2260      	movs	r2, #96	; 0x60
 8008b78:	213f      	movs	r1, #63	; 0x3f
 8008b7a:	5299      	strh	r1, [r3, r2]
 8008b7c:	e003      	b.n	8008b86 <UART_Start_Receive_IT+0xaa>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2260      	movs	r2, #96	; 0x60
 8008b82:	2100      	movs	r1, #0
 8008b84:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	228c      	movs	r2, #140	; 0x8c
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2288      	movs	r2, #136	; 0x88
 8008b92:	2122      	movs	r1, #34	; 0x22
 8008b94:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b96:	f3ef 8310 	mrs	r3, PRIMASK
 8008b9a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error)
   */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba6:	f383 8810 	msr	PRIMASK, r3
}
 8008baa:	46c0      	nop			; (mov r8, r8)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	689a      	ldr	r2, [r3, #8]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2101      	movs	r1, #1
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	609a      	str	r2, [r3, #8]
 8008bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bc2:	f383 8810 	msr	PRIMASK, r3
}
 8008bc6:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) &&
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008bcc:	2380      	movs	r3, #128	; 0x80
 8008bce:	059b      	lsls	r3, r3, #22
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d150      	bne.n	8008c76 <UART_Start_Receive_IT+0x19a>
      (Size >= huart->NbRxDataToProcess)) {
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2268      	movs	r2, #104	; 0x68
 8008bd8:	5a9b      	ldrh	r3, [r3, r2]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) &&
 8008bda:	1dba      	adds	r2, r7, #6
 8008bdc:	8812      	ldrh	r2, [r2, #0]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d349      	bcc.n	8008c76 <UART_Start_Receive_IT+0x19a>
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) &&
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	689a      	ldr	r2, [r3, #8]
 8008be6:	2380      	movs	r3, #128	; 0x80
 8008be8:	015b      	lsls	r3, r3, #5
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d107      	bne.n	8008bfe <UART_Start_Receive_IT+0x122>
        (huart->Init.Parity == UART_PARITY_NONE)) {
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	691b      	ldr	r3, [r3, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) &&
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d103      	bne.n	8008bfe <UART_Start_Receive_IT+0x122>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	4a3a      	ldr	r2, [pc, #232]	; (8008ce4 <UART_Start_Receive_IT+0x208>)
 8008bfa:	671a      	str	r2, [r3, #112]	; 0x70
 8008bfc:	e002      	b.n	8008c04 <UART_Start_Receive_IT+0x128>
    } else {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	4a39      	ldr	r2, [pc, #228]	; (8008ce8 <UART_Start_Receive_IT+0x20c>)
 8008c02:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2280      	movs	r2, #128	; 0x80
 8008c08:	2100      	movs	r1, #0
 8008c0a:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c0c:	f3ef 8310 	mrs	r3, PRIMASK
 8008c10:	61fb      	str	r3, [r7, #28]
  return(result);
 8008c12:	69fb      	ldr	r3, [r7, #28]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c14:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c16:	2301      	movs	r3, #1
 8008c18:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c1a:	6a3b      	ldr	r3, [r7, #32]
 8008c1c:	f383 8810 	msr	PRIMASK, r3
}
 8008c20:	46c0      	nop			; (mov r8, r8)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2180      	movs	r1, #128	; 0x80
 8008c2e:	0049      	lsls	r1, r1, #1
 8008c30:	430a      	orrs	r2, r1
 8008c32:	601a      	str	r2, [r3, #0]
 8008c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c36:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3a:	f383 8810 	msr	PRIMASK, r3
}
 8008c3e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c40:	f3ef 8310 	mrs	r3, PRIMASK
 8008c44:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008c48:	647b      	str	r3, [r7, #68]	; 0x44
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c50:	f383 8810 	msr	PRIMASK, r3
}
 8008c54:	46c0      	nop			; (mov r8, r8)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	689a      	ldr	r2, [r3, #8]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2180      	movs	r1, #128	; 0x80
 8008c62:	0549      	lsls	r1, r1, #21
 8008c64:	430a      	orrs	r2, r1
 8008c66:	609a      	str	r2, [r3, #8]
 8008c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c6a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6e:	f383 8810 	msr	PRIMASK, r3
}
 8008c72:	46c0      	nop			; (mov r8, r8)
 8008c74:	e02e      	b.n	8008cd4 <UART_Start_Receive_IT+0x1f8>
  } else {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) &&
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	689a      	ldr	r2, [r3, #8]
 8008c7a:	2380      	movs	r3, #128	; 0x80
 8008c7c:	015b      	lsls	r3, r3, #5
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d107      	bne.n	8008c92 <UART_Start_Receive_IT+0x1b6>
        (huart->Init.Parity == UART_PARITY_NONE)) {
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	691b      	ldr	r3, [r3, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) &&
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d103      	bne.n	8008c92 <UART_Start_Receive_IT+0x1b6>
      huart->RxISR = UART_RxISR_16BIT;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	4a17      	ldr	r2, [pc, #92]	; (8008cec <UART_Start_Receive_IT+0x210>)
 8008c8e:	671a      	str	r2, [r3, #112]	; 0x70
 8008c90:	e002      	b.n	8008c98 <UART_Start_Receive_IT+0x1bc>
    } else {
      huart->RxISR = UART_RxISR_8BIT;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	4a16      	ldr	r2, [pc, #88]	; (8008cf0 <UART_Start_Receive_IT+0x214>)
 8008c96:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2280      	movs	r2, #128	; 0x80
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ca0:	f3ef 8310 	mrs	r3, PRIMASK
 8008ca4:	613b      	str	r3, [r7, #16]
  return(result);
 8008ca6:	693b      	ldr	r3, [r7, #16]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty
     * interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1,
 8008ca8:	643b      	str	r3, [r7, #64]	; 0x40
 8008caa:	2301      	movs	r3, #1
 8008cac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	f383 8810 	msr	PRIMASK, r3
}
 8008cb4:	46c0      	nop			; (mov r8, r8)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2190      	movs	r1, #144	; 0x90
 8008cc2:	0049      	lsls	r1, r1, #1
 8008cc4:	430a      	orrs	r2, r1
 8008cc6:	601a      	str	r2, [r3, #0]
 8008cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	f383 8810 	msr	PRIMASK, r3
}
 8008cd2:	46c0      	nop			; (mov r8, r8)
                   USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
  return HAL_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	0018      	movs	r0, r3
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	b014      	add	sp, #80	; 0x50
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	46c0      	nop			; (mov r8, r8)
 8008ce0:	000001ff 	.word	0x000001ff
 8008ce4:	08009405 	.word	0x08009405
 8008ce8:	08009121 	.word	0x08009121
 8008cec:	08008fb5 	.word	0x08008fb5
 8008cf0:	08008e49 	.word	0x08008e49

08008cf4 <UART_EndRxTransfer>:
 * @brief  End ongoing Rx transfer on UART peripheral (following error detection
 * or Reception completion).
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart) {
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b08e      	sub	sp, #56	; 0x38
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8008d00:	617b      	str	r3, [r7, #20]
  return(result);
 8008d02:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
   * interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8008d04:	637b      	str	r3, [r7, #52]	; 0x34
 8008d06:	2301      	movs	r3, #1
 8008d08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	f383 8810 	msr	PRIMASK, r3
}
 8008d10:	46c0      	nop			; (mov r8, r8)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4926      	ldr	r1, [pc, #152]	; (8008db8 <UART_EndRxTransfer+0xc4>)
 8008d1e:	400a      	ands	r2, r1
 8008d20:	601a      	str	r2, [r3, #0]
 8008d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	f383 8810 	msr	PRIMASK, r3
}
 8008d2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8008d32:	623b      	str	r3, [r7, #32]
  return(result);
 8008d34:	6a3b      	ldr	r3, [r7, #32]
                   (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d36:	633b      	str	r3, [r7, #48]	; 0x30
 8008d38:	2301      	movs	r3, #1
 8008d3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3e:	f383 8810 	msr	PRIMASK, r3
}
 8008d42:	46c0      	nop			; (mov r8, r8)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	689a      	ldr	r2, [r3, #8]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	491b      	ldr	r1, [pc, #108]	; (8008dbc <UART_EndRxTransfer+0xc8>)
 8008d50:	400a      	ands	r2, r1
 8008d52:	609a      	str	r2, [r3, #8]
 8008d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d56:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5a:	f383 8810 	msr	PRIMASK, r3
}
 8008d5e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE
   * interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d118      	bne.n	8008d9a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d68:	f3ef 8310 	mrs	r3, PRIMASK
 8008d6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d6e:	68bb      	ldr	r3, [r7, #8]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d72:	2301      	movs	r3, #1
 8008d74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f383 8810 	msr	PRIMASK, r3
}
 8008d7c:	46c0      	nop			; (mov r8, r8)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2110      	movs	r1, #16
 8008d8a:	438a      	bics	r2, r1
 8008d8c:	601a      	str	r2, [r3, #0]
 8008d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	f383 8810 	msr	PRIMASK, r3
}
 8008d98:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2288      	movs	r2, #136	; 0x88
 8008d9e:	2120      	movs	r1, #32
 8008da0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008dae:	46c0      	nop			; (mov r8, r8)
 8008db0:	46bd      	mov	sp, r7
 8008db2:	b00e      	add	sp, #56	; 0x38
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	46c0      	nop			; (mov r8, r8)
 8008db8:	fffffedf 	.word	0xfffffedf
 8008dbc:	effffffe 	.word	0xeffffffe

08008dc0 <UART_DMAAbortOnError>:
 * on Error (To be called at end of DMA Abort procedure following error
 * occurrence).
 * @param  hdma DMA handle.
 * @retval None
 */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma) {
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	225e      	movs	r2, #94	; 0x5e
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2256      	movs	r2, #86	; 0x56
 8008dda:	2100      	movs	r1, #0
 8008ddc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	0018      	movs	r0, r3
 8008de2:	f7ff f9c3 	bl	800816c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008de6:	46c0      	nop			; (mov r8, r8)
 8008de8:	46bd      	mov	sp, r7
 8008dea:	b004      	add	sp, #16
 8008dec:	bd80      	pop	{r7, pc}

08008dee <UART_EndTransmit_IT>:
 * @brief  Wrap up transmission in non-blocking mode.
 * @param  huart pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart) {
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b086      	sub	sp, #24
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008df6:	f3ef 8310 	mrs	r3, PRIMASK
 8008dfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8008dfc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008dfe:	617b      	str	r3, [r7, #20]
 8008e00:	2301      	movs	r3, #1
 8008e02:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f383 8810 	msr	PRIMASK, r3
}
 8008e0a:	46c0      	nop			; (mov r8, r8)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2140      	movs	r1, #64	; 0x40
 8008e18:	438a      	bics	r2, r1
 8008e1a:	601a      	str	r2, [r3, #0]
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	f383 8810 	msr	PRIMASK, r3
}
 8008e26:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2284      	movs	r2, #132	; 0x84
 8008e2c:	2120      	movs	r1, #32
 8008e2e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	0018      	movs	r0, r3
 8008e3a:	f7ff f98f 	bl	800815c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e3e:	46c0      	nop			; (mov r8, r8)
 8008e40:	46bd      	mov	sp, r7
 8008e42:	b006      	add	sp, #24
 8008e44:	bd80      	pop	{r7, pc}
	...

08008e48 <UART_RxISR_8BIT>:
/**
 * @brief RX interrupt handler for 7 or 8 bits data word length .
 * @param huart UART handle.
 * @retval None
 */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart) {
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b090      	sub	sp, #64	; 0x40
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008e50:	203e      	movs	r0, #62	; 0x3e
 8008e52:	183b      	adds	r3, r7, r0
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	2160      	movs	r1, #96	; 0x60
 8008e58:	5a52      	ldrh	r2, [r2, r1]
 8008e5a:	801a      	strh	r2, [r3, #0]
  uint16_t uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2288      	movs	r2, #136	; 0x88
 8008e60:	589b      	ldr	r3, [r3, r2]
 8008e62:	2b22      	cmp	r3, #34	; 0x22
 8008e64:	d000      	beq.n	8008e68 <UART_RxISR_8BIT+0x20>
 8008e66:	e097      	b.n	8008f98 <UART_RxISR_8BIT+0x150>
    uhdata = (uint16_t)READ_REG(huart->Instance->RDR);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e6e:	213c      	movs	r1, #60	; 0x3c
 8008e70:	187b      	adds	r3, r7, r1
 8008e72:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e74:	187b      	adds	r3, r7, r1
 8008e76:	881b      	ldrh	r3, [r3, #0]
 8008e78:	b2da      	uxtb	r2, r3
 8008e7a:	183b      	adds	r3, r7, r0
 8008e7c:	881b      	ldrh	r3, [r3, #0]
 8008e7e:	b2d9      	uxtb	r1, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e84:	400a      	ands	r2, r1
 8008e86:	b2d2      	uxtb	r2, r2
 8008e88:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e8e:	1c5a      	adds	r2, r3, #1
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	225e      	movs	r2, #94	; 0x5e
 8008e98:	5a9b      	ldrh	r3, [r3, r2]
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	3b01      	subs	r3, #1
 8008e9e:	b299      	uxth	r1, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	225e      	movs	r2, #94	; 0x5e
 8008ea4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U) {
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	225e      	movs	r2, #94	; 0x5e
 8008eaa:	5a9b      	ldrh	r3, [r3, r2]
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d000      	beq.n	8008eb4 <UART_RxISR_8BIT+0x6c>
 8008eb2:	e079      	b.n	8008fa8 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8008eb8:	61bb      	str	r3, [r7, #24]
  return(result);
 8008eba:	69bb      	ldr	r3, [r7, #24]
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8008ebc:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	f383 8810 	msr	PRIMASK, r3
}
 8008ec8:	46c0      	nop			; (mov r8, r8)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4936      	ldr	r1, [pc, #216]	; (8008fb0 <UART_RxISR_8BIT+0x168>)
 8008ed6:	400a      	ands	r2, r1
 8008ed8:	601a      	str	r2, [r3, #0]
 8008eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008edc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ede:	6a3b      	ldr	r3, [r7, #32]
 8008ee0:	f383 8810 	msr	PRIMASK, r3
}
 8008ee4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8008eea:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                       (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun
       * error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eee:	637b      	str	r3, [r7, #52]	; 0x34
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef6:	f383 8810 	msr	PRIMASK, r3
}
 8008efa:	46c0      	nop			; (mov r8, r8)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	689a      	ldr	r2, [r3, #8]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2101      	movs	r1, #1
 8008f08:	438a      	bics	r2, r1
 8008f0a:	609a      	str	r2, [r3, #8]
 8008f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f12:	f383 8810 	msr	PRIMASK, r3
}
 8008f16:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2288      	movs	r2, #136	; 0x88
 8008f1c:	2120      	movs	r1, #32
 8008f1e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d12f      	bne.n	8008f8e <UART_RxISR_8BIT+0x146>
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f34:	f3ef 8310 	mrs	r3, PRIMASK
 8008f38:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f3a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f3c:	633b      	str	r3, [r7, #48]	; 0x30
 8008f3e:	2301      	movs	r3, #1
 8008f40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	f383 8810 	msr	PRIMASK, r3
}
 8008f48:	46c0      	nop			; (mov r8, r8)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2110      	movs	r1, #16
 8008f56:	438a      	bics	r2, r1
 8008f58:	601a      	str	r2, [r3, #0]
 8008f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	f383 8810 	msr	PRIMASK, r3
}
 8008f64:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET) {
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	69db      	ldr	r3, [r3, #28]
 8008f6c:	2210      	movs	r2, #16
 8008f6e:	4013      	ands	r3, r2
 8008f70:	2b10      	cmp	r3, #16
 8008f72:	d103      	bne.n	8008f7c <UART_RxISR_8BIT+0x134>
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2210      	movs	r2, #16
 8008f7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	225c      	movs	r2, #92	; 0x5c
 8008f80:	5a9a      	ldrh	r2, [r3, r2]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	0011      	movs	r1, r2
 8008f86:	0018      	movs	r0, r3
 8008f88:	f7ff f8f8 	bl	800817c <HAL_UARTEx_RxEventCallback>
    }
  } else {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f8c:	e00c      	b.n	8008fa8 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	0018      	movs	r0, r3
 8008f92:	f7f8 fe91 	bl	8001cb8 <HAL_UART_RxCpltCallback>
}
 8008f96:	e007      	b.n	8008fa8 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	699a      	ldr	r2, [r3, #24]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2108      	movs	r1, #8
 8008fa4:	430a      	orrs	r2, r1
 8008fa6:	619a      	str	r2, [r3, #24]
}
 8008fa8:	46c0      	nop			; (mov r8, r8)
 8008faa:	46bd      	mov	sp, r7
 8008fac:	b010      	add	sp, #64	; 0x40
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	fffffedf 	.word	0xfffffedf

08008fb4 <UART_RxISR_16BIT>:
 * @note   Function is called under interruption only, once
 *         interruptions have been enabled by HAL_UART_Receive_IT()
 * @param huart UART handle.
 * @retval None
 */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart) {
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b090      	sub	sp, #64	; 0x40
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008fbc:	203e      	movs	r0, #62	; 0x3e
 8008fbe:	183b      	adds	r3, r7, r0
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	2160      	movs	r1, #96	; 0x60
 8008fc4:	5a52      	ldrh	r2, [r2, r1]
 8008fc6:	801a      	strh	r2, [r3, #0]
  uint16_t uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2288      	movs	r2, #136	; 0x88
 8008fcc:	589b      	ldr	r3, [r3, r2]
 8008fce:	2b22      	cmp	r3, #34	; 0x22
 8008fd0:	d000      	beq.n	8008fd4 <UART_RxISR_16BIT+0x20>
 8008fd2:	e097      	b.n	8009104 <UART_RxISR_16BIT+0x150>
    uhdata = (uint16_t)READ_REG(huart->Instance->RDR);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fda:	213c      	movs	r1, #60	; 0x3c
 8008fdc:	187b      	adds	r3, r7, r1
 8008fde:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *)huart->pRxBuffPtr;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fe4:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8008fe6:	187b      	adds	r3, r7, r1
 8008fe8:	183a      	adds	r2, r7, r0
 8008fea:	881b      	ldrh	r3, [r3, #0]
 8008fec:	8812      	ldrh	r2, [r2, #0]
 8008fee:	4013      	ands	r3, r2
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ffa:	1c9a      	adds	r2, r3, #2
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	225e      	movs	r2, #94	; 0x5e
 8009004:	5a9b      	ldrh	r3, [r3, r2]
 8009006:	b29b      	uxth	r3, r3
 8009008:	3b01      	subs	r3, #1
 800900a:	b299      	uxth	r1, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	225e      	movs	r2, #94	; 0x5e
 8009010:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U) {
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	225e      	movs	r2, #94	; 0x5e
 8009016:	5a9b      	ldrh	r3, [r3, r2]
 8009018:	b29b      	uxth	r3, r3
 800901a:	2b00      	cmp	r3, #0
 800901c:	d000      	beq.n	8009020 <UART_RxISR_16BIT+0x6c>
 800901e:	e079      	b.n	8009114 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009020:	f3ef 8310 	mrs	r3, PRIMASK
 8009024:	617b      	str	r3, [r7, #20]
  return(result);
 8009026:	697b      	ldr	r3, [r7, #20]
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8009028:	637b      	str	r3, [r7, #52]	; 0x34
 800902a:	2301      	movs	r3, #1
 800902c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	f383 8810 	msr	PRIMASK, r3
}
 8009034:	46c0      	nop			; (mov r8, r8)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4936      	ldr	r1, [pc, #216]	; (800911c <UART_RxISR_16BIT+0x168>)
 8009042:	400a      	ands	r2, r1
 8009044:	601a      	str	r2, [r3, #0]
 8009046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009048:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	f383 8810 	msr	PRIMASK, r3
}
 8009050:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009052:	f3ef 8310 	mrs	r3, PRIMASK
 8009056:	623b      	str	r3, [r7, #32]
  return(result);
 8009058:	6a3b      	ldr	r3, [r7, #32]
                       (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun
       * error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800905a:	633b      	str	r3, [r7, #48]	; 0x30
 800905c:	2301      	movs	r3, #1
 800905e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009062:	f383 8810 	msr	PRIMASK, r3
}
 8009066:	46c0      	nop			; (mov r8, r8)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	689a      	ldr	r2, [r3, #8]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2101      	movs	r1, #1
 8009074:	438a      	bics	r2, r1
 8009076:	609a      	str	r2, [r3, #8]
 8009078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800907c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907e:	f383 8810 	msr	PRIMASK, r3
}
 8009082:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2288      	movs	r2, #136	; 0x88
 8009088:	2120      	movs	r1, #32
 800908a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009096:	2b01      	cmp	r3, #1
 8009098:	d12f      	bne.n	80090fa <UART_RxISR_16BIT+0x146>
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090a0:	f3ef 8310 	mrs	r3, PRIMASK
 80090a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80090a6:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090aa:	2301      	movs	r3, #1
 80090ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f383 8810 	msr	PRIMASK, r3
}
 80090b4:	46c0      	nop			; (mov r8, r8)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2110      	movs	r1, #16
 80090c2:	438a      	bics	r2, r1
 80090c4:	601a      	str	r2, [r3, #0]
 80090c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	f383 8810 	msr	PRIMASK, r3
}
 80090d0:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET) {
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	69db      	ldr	r3, [r3, #28]
 80090d8:	2210      	movs	r2, #16
 80090da:	4013      	ands	r3, r2
 80090dc:	2b10      	cmp	r3, #16
 80090de:	d103      	bne.n	80090e8 <UART_RxISR_16BIT+0x134>
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2210      	movs	r2, #16
 80090e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	225c      	movs	r2, #92	; 0x5c
 80090ec:	5a9a      	ldrh	r2, [r3, r2]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	0011      	movs	r1, r2
 80090f2:	0018      	movs	r0, r3
 80090f4:	f7ff f842 	bl	800817c <HAL_UARTEx_RxEventCallback>
    }
  } else {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090f8:	e00c      	b.n	8009114 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	0018      	movs	r0, r3
 80090fe:	f7f8 fddb 	bl	8001cb8 <HAL_UART_RxCpltCallback>
}
 8009102:	e007      	b.n	8009114 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	699a      	ldr	r2, [r3, #24]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2108      	movs	r1, #8
 8009110:	430a      	orrs	r2, r1
 8009112:	619a      	str	r2, [r3, #24]
}
 8009114:	46c0      	nop			; (mov r8, r8)
 8009116:	46bd      	mov	sp, r7
 8009118:	b010      	add	sp, #64	; 0x40
 800911a:	bd80      	pop	{r7, pc}
 800911c:	fffffedf 	.word	0xfffffedf

08009120 <UART_RxISR_8BIT_FIFOEN>:
 * @note   Function is called under interruption only, once
 *         interruptions have been enabled by HAL_UART_Receive_IT()
 * @param huart UART handle.
 * @retval None
 */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart) {
 8009120:	b580      	push	{r7, lr}
 8009122:	b09c      	sub	sp, #112	; 0x70
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009128:	236a      	movs	r3, #106	; 0x6a
 800912a:	18fb      	adds	r3, r7, r3
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	2160      	movs	r1, #96	; 0x60
 8009130:	5a52      	ldrh	r2, [r2, r1]
 8009132:	801a      	strh	r2, [r3, #0]
  uint16_t uhdata;
  uint16_t nb_rx_data;
  uint16_t rxdatacount;
  uint32_t isrflags = READ_REG(huart->Instance->ISR);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	69db      	ldr	r3, [r3, #28]
 800913a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t cr1its = READ_REG(huart->Instance->CR1);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t cr3its = READ_REG(huart->Instance->CR3);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2288      	movs	r2, #136	; 0x88
 8009150:	589b      	ldr	r3, [r3, r2]
 8009152:	2b22      	cmp	r3, #34	; 0x22
 8009154:	d000      	beq.n	8009158 <UART_RxISR_8BIT_FIFOEN+0x38>
 8009156:	e141      	b.n	80093dc <UART_RxISR_8BIT_FIFOEN+0x2bc>
    nb_rx_data = huart->NbRxDataToProcess;
 8009158:	235e      	movs	r3, #94	; 0x5e
 800915a:	18fb      	adds	r3, r7, r3
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	2168      	movs	r1, #104	; 0x68
 8009160:	5a52      	ldrh	r2, [r2, r1]
 8009162:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U)) {
 8009164:	e0e8      	b.n	8009338 <UART_RxISR_8BIT_FIFOEN+0x218>
      uhdata = (uint16_t)READ_REG(huart->Instance->RDR);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800916c:	215c      	movs	r1, #92	; 0x5c
 800916e:	187b      	adds	r3, r7, r1
 8009170:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009172:	187b      	adds	r3, r7, r1
 8009174:	881b      	ldrh	r3, [r3, #0]
 8009176:	b2da      	uxtb	r2, r3
 8009178:	236a      	movs	r3, #106	; 0x6a
 800917a:	18fb      	adds	r3, r7, r3
 800917c:	881b      	ldrh	r3, [r3, #0]
 800917e:	b2d9      	uxtb	r1, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009184:	400a      	ands	r2, r1
 8009186:	b2d2      	uxtb	r2, r2
 8009188:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800918e:	1c5a      	adds	r2, r3, #1
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	225e      	movs	r2, #94	; 0x5e
 8009198:	5a9b      	ldrh	r3, [r3, r2]
 800919a:	b29b      	uxth	r3, r3
 800919c:	3b01      	subs	r3, #1
 800919e:	b299      	uxth	r1, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	225e      	movs	r2, #94	; 0x5e
 80091a4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	69db      	ldr	r3, [r3, #28]
 80091ac:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U) {
 80091ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091b0:	2207      	movs	r2, #7
 80091b2:	4013      	ands	r3, r2
 80091b4:	d049      	beq.n	800924a <UART_RxISR_8BIT_FIFOEN+0x12a>
        /* UART parity error interrupt occurred
         * -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) &&
 80091b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091b8:	2201      	movs	r2, #1
 80091ba:	4013      	ands	r3, r2
 80091bc:	d010      	beq.n	80091e0 <UART_RxISR_8BIT_FIFOEN+0xc0>
            ((cr1its & USART_CR1_PEIE) != 0U)) {
 80091be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80091c0:	2380      	movs	r3, #128	; 0x80
 80091c2:	005b      	lsls	r3, r3, #1
 80091c4:	4013      	ands	r3, r2
        if (((isrflags & USART_ISR_PE) != 0U) &&
 80091c6:	d00b      	beq.n	80091e0 <UART_RxISR_8BIT_FIFOEN+0xc0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2201      	movs	r2, #1
 80091ce:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	228c      	movs	r2, #140	; 0x8c
 80091d4:	589b      	ldr	r3, [r3, r2]
 80091d6:	2201      	movs	r2, #1
 80091d8:	431a      	orrs	r2, r3
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	218c      	movs	r1, #140	; 0x8c
 80091de:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred
         * --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) &&
 80091e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091e2:	2202      	movs	r2, #2
 80091e4:	4013      	ands	r3, r2
 80091e6:	d00f      	beq.n	8009208 <UART_RxISR_8BIT_FIFOEN+0xe8>
            ((cr3its & USART_CR3_EIE) != 0U)) {
 80091e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091ea:	2201      	movs	r2, #1
 80091ec:	4013      	ands	r3, r2
        if (((isrflags & USART_ISR_FE) != 0U) &&
 80091ee:	d00b      	beq.n	8009208 <UART_RxISR_8BIT_FIFOEN+0xe8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2202      	movs	r2, #2
 80091f6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	228c      	movs	r2, #140	; 0x8c
 80091fc:	589b      	ldr	r3, [r3, r2]
 80091fe:	2204      	movs	r2, #4
 8009200:	431a      	orrs	r2, r3
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	218c      	movs	r1, #140	; 0x8c
 8009206:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred
         * --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) &&
 8009208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800920a:	2204      	movs	r2, #4
 800920c:	4013      	ands	r3, r2
 800920e:	d00f      	beq.n	8009230 <UART_RxISR_8BIT_FIFOEN+0x110>
            ((cr3its & USART_CR3_EIE) != 0U)) {
 8009210:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009212:	2201      	movs	r2, #1
 8009214:	4013      	ands	r3, r2
        if (((isrflags & USART_ISR_NE) != 0U) &&
 8009216:	d00b      	beq.n	8009230 <UART_RxISR_8BIT_FIFOEN+0x110>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2204      	movs	r2, #4
 800921e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	228c      	movs	r2, #140	; 0x8c
 8009224:	589b      	ldr	r3, [r3, r2]
 8009226:	2202      	movs	r2, #2
 8009228:	431a      	orrs	r2, r3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	218c      	movs	r1, #140	; 0x8c
 800922e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be
         * ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE) {
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	228c      	movs	r2, #140	; 0x8c
 8009234:	589b      	ldr	r3, [r3, r2]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d007      	beq.n	800924a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	0018      	movs	r0, r3
 800923e:	f7fe ff95 	bl	800816c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	228c      	movs	r2, #140	; 0x8c
 8009246:	2100      	movs	r1, #0
 8009248:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U) {
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	225e      	movs	r2, #94	; 0x5e
 800924e:	5a9b      	ldrh	r3, [r3, r2]
 8009250:	b29b      	uxth	r3, r3
 8009252:	2b00      	cmp	r3, #0
 8009254:	d170      	bne.n	8009338 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009256:	f3ef 8310 	mrs	r3, PRIMASK
 800925a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800925c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800925e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009260:	2301      	movs	r3, #1
 8009262:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009266:	f383 8810 	msr	PRIMASK, r3
}
 800926a:	46c0      	nop			; (mov r8, r8)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	495f      	ldr	r1, [pc, #380]	; (80093f4 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 8009278:	400a      	ands	r2, r1
 800927a:	601a      	str	r2, [r3, #0]
 800927c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800927e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009282:	f383 8810 	msr	PRIMASK, r3
}
 8009286:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009288:	f3ef 8310 	mrs	r3, PRIMASK
 800928c:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800928e:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun
           error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3,
 8009290:	657b      	str	r3, [r7, #84]	; 0x54
 8009292:	2301      	movs	r3, #1
 8009294:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009298:	f383 8810 	msr	PRIMASK, r3
}
 800929c:	46c0      	nop			; (mov r8, r8)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	689a      	ldr	r2, [r3, #8]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4953      	ldr	r1, [pc, #332]	; (80093f8 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 80092aa:	400a      	ands	r2, r1
 80092ac:	609a      	str	r2, [r3, #8]
 80092ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092b0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092b4:	f383 8810 	msr	PRIMASK, r3
}
 80092b8:	46c0      	nop			; (mov r8, r8)
                         (USART_CR3_EIE | USART_CR3_RXFTIE));

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2288      	movs	r2, #136	; 0x88
 80092be:	2120      	movs	r1, #32
 80092c0:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d12f      	bne.n	8009330 <UART_RxISR_8BIT_FIFOEN+0x210>
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092d6:	f3ef 8310 	mrs	r3, PRIMASK
 80092da:	623b      	str	r3, [r7, #32]
  return(result);
 80092dc:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092de:	653b      	str	r3, [r7, #80]	; 0x50
 80092e0:	2301      	movs	r3, #1
 80092e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e6:	f383 8810 	msr	PRIMASK, r3
}
 80092ea:	46c0      	nop			; (mov r8, r8)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2110      	movs	r1, #16
 80092f8:	438a      	bics	r2, r1
 80092fa:	601a      	str	r2, [r3, #0]
 80092fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092fe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009302:	f383 8810 	msr	PRIMASK, r3
}
 8009306:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET) {
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	69db      	ldr	r3, [r3, #28]
 800930e:	2210      	movs	r2, #16
 8009310:	4013      	ands	r3, r2
 8009312:	2b10      	cmp	r3, #16
 8009314:	d103      	bne.n	800931e <UART_RxISR_8BIT_FIFOEN+0x1fe>
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2210      	movs	r2, #16
 800931c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	225c      	movs	r2, #92	; 0x5c
 8009322:	5a9a      	ldrh	r2, [r3, r2]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	0011      	movs	r1, r2
 8009328:	0018      	movs	r0, r3
 800932a:	f7fe ff27 	bl	800817c <HAL_UARTEx_RxEventCallback>
 800932e:	e003      	b.n	8009338 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	0018      	movs	r0, r3
 8009334:	f7f8 fcc0 	bl	8001cb8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U)) {
 8009338:	235e      	movs	r3, #94	; 0x5e
 800933a:	18fb      	adds	r3, r7, r3
 800933c:	881b      	ldrh	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d004      	beq.n	800934c <UART_RxISR_8BIT_FIFOEN+0x22c>
 8009342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009344:	2220      	movs	r2, #32
 8009346:	4013      	ands	r3, r2
 8009348:	d000      	beq.n	800934c <UART_RxISR_8BIT_FIFOEN+0x22c>
 800934a:	e70c      	b.n	8009166 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800934c:	204e      	movs	r0, #78	; 0x4e
 800934e:	183b      	adds	r3, r7, r0
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	215e      	movs	r1, #94	; 0x5e
 8009354:	5a52      	ldrh	r2, [r2, r1]
 8009356:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess)) {
 8009358:	0001      	movs	r1, r0
 800935a:	187b      	adds	r3, r7, r1
 800935c:	881b      	ldrh	r3, [r3, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d044      	beq.n	80093ec <UART_RxISR_8BIT_FIFOEN+0x2cc>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2268      	movs	r2, #104	; 0x68
 8009366:	5a9b      	ldrh	r3, [r3, r2]
 8009368:	187a      	adds	r2, r7, r1
 800936a:	8812      	ldrh	r2, [r2, #0]
 800936c:	429a      	cmp	r2, r3
 800936e:	d23d      	bcs.n	80093ec <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009370:	f3ef 8310 	mrs	r3, PRIMASK
 8009374:	60bb      	str	r3, [r7, #8]
  return(result);
 8009376:	68bb      	ldr	r3, [r7, #8]
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009378:	64bb      	str	r3, [r7, #72]	; 0x48
 800937a:	2301      	movs	r3, #1
 800937c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f383 8810 	msr	PRIMASK, r3
}
 8009384:	46c0      	nop			; (mov r8, r8)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	689a      	ldr	r2, [r3, #8]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	491a      	ldr	r1, [pc, #104]	; (80093fc <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8009392:	400a      	ands	r2, r1
 8009394:	609a      	str	r2, [r3, #8]
 8009396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009398:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	f383 8810 	msr	PRIMASK, r3
}
 80093a0:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a16      	ldr	r2, [pc, #88]	; (8009400 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 80093a6:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093a8:	f3ef 8310 	mrs	r3, PRIMASK
 80093ac:	617b      	str	r3, [r7, #20]
  return(result);
 80093ae:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80093b0:	647b      	str	r3, [r7, #68]	; 0x44
 80093b2:	2301      	movs	r3, #1
 80093b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	f383 8810 	msr	PRIMASK, r3
}
 80093bc:	46c0      	nop			; (mov r8, r8)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2120      	movs	r1, #32
 80093ca:	430a      	orrs	r2, r1
 80093cc:	601a      	str	r2, [r3, #0]
 80093ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	f383 8810 	msr	PRIMASK, r3
}
 80093d8:	46c0      	nop			; (mov r8, r8)
    }
  } else {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093da:	e007      	b.n	80093ec <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	699a      	ldr	r2, [r3, #24]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2108      	movs	r1, #8
 80093e8:	430a      	orrs	r2, r1
 80093ea:	619a      	str	r2, [r3, #24]
}
 80093ec:	46c0      	nop			; (mov r8, r8)
 80093ee:	46bd      	mov	sp, r7
 80093f0:	b01c      	add	sp, #112	; 0x70
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	fffffeff 	.word	0xfffffeff
 80093f8:	effffffe 	.word	0xeffffffe
 80093fc:	efffffff 	.word	0xefffffff
 8009400:	08008e49 	.word	0x08008e49

08009404 <UART_RxISR_16BIT_FIFOEN>:
 * @note   Function is called under interruption only, once
 *         interruptions have been enabled by HAL_UART_Receive_IT()
 * @param huart UART handle.
 * @retval None
 */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart) {
 8009404:	b580      	push	{r7, lr}
 8009406:	b09e      	sub	sp, #120	; 0x78
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800940c:	2372      	movs	r3, #114	; 0x72
 800940e:	18fb      	adds	r3, r7, r3
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	2160      	movs	r1, #96	; 0x60
 8009414:	5a52      	ldrh	r2, [r2, r1]
 8009416:	801a      	strh	r2, [r3, #0]
  uint16_t uhdata;
  uint16_t nb_rx_data;
  uint16_t rxdatacount;
  uint32_t isrflags = READ_REG(huart->Instance->ISR);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	69db      	ldr	r3, [r3, #28]
 800941e:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t cr1its = READ_REG(huart->Instance->CR1);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t cr3its = READ_REG(huart->Instance->CR3);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2288      	movs	r2, #136	; 0x88
 8009434:	589b      	ldr	r3, [r3, r2]
 8009436:	2b22      	cmp	r3, #34	; 0x22
 8009438:	d000      	beq.n	800943c <UART_RxISR_16BIT_FIFOEN+0x38>
 800943a:	e141      	b.n	80096c0 <UART_RxISR_16BIT_FIFOEN+0x2bc>
    nb_rx_data = huart->NbRxDataToProcess;
 800943c:	2366      	movs	r3, #102	; 0x66
 800943e:	18fb      	adds	r3, r7, r3
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	2168      	movs	r1, #104	; 0x68
 8009444:	5a52      	ldrh	r2, [r2, r1]
 8009446:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U)) {
 8009448:	e0e8      	b.n	800961c <UART_RxISR_16BIT_FIFOEN+0x218>
      uhdata = (uint16_t)READ_REG(huart->Instance->RDR);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009450:	2164      	movs	r1, #100	; 0x64
 8009452:	187b      	adds	r3, r7, r1
 8009454:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *)huart->pRxBuffPtr;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800945a:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 800945c:	187b      	adds	r3, r7, r1
 800945e:	2272      	movs	r2, #114	; 0x72
 8009460:	18ba      	adds	r2, r7, r2
 8009462:	881b      	ldrh	r3, [r3, #0]
 8009464:	8812      	ldrh	r2, [r2, #0]
 8009466:	4013      	ands	r3, r2
 8009468:	b29a      	uxth	r2, r3
 800946a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800946c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009472:	1c9a      	adds	r2, r3, #2
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	225e      	movs	r2, #94	; 0x5e
 800947c:	5a9b      	ldrh	r3, [r3, r2]
 800947e:	b29b      	uxth	r3, r3
 8009480:	3b01      	subs	r3, #1
 8009482:	b299      	uxth	r1, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	225e      	movs	r2, #94	; 0x5e
 8009488:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	69db      	ldr	r3, [r3, #28]
 8009490:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U) {
 8009492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009494:	2207      	movs	r2, #7
 8009496:	4013      	ands	r3, r2
 8009498:	d049      	beq.n	800952e <UART_RxISR_16BIT_FIFOEN+0x12a>
        /* UART parity error interrupt occurred
         * -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) &&
 800949a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800949c:	2201      	movs	r2, #1
 800949e:	4013      	ands	r3, r2
 80094a0:	d010      	beq.n	80094c4 <UART_RxISR_16BIT_FIFOEN+0xc0>
            ((cr1its & USART_CR1_PEIE) != 0U)) {
 80094a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80094a4:	2380      	movs	r3, #128	; 0x80
 80094a6:	005b      	lsls	r3, r3, #1
 80094a8:	4013      	ands	r3, r2
        if (((isrflags & USART_ISR_PE) != 0U) &&
 80094aa:	d00b      	beq.n	80094c4 <UART_RxISR_16BIT_FIFOEN+0xc0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2201      	movs	r2, #1
 80094b2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	228c      	movs	r2, #140	; 0x8c
 80094b8:	589b      	ldr	r3, [r3, r2]
 80094ba:	2201      	movs	r2, #1
 80094bc:	431a      	orrs	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	218c      	movs	r1, #140	; 0x8c
 80094c2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred
         * --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) &&
 80094c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094c6:	2202      	movs	r2, #2
 80094c8:	4013      	ands	r3, r2
 80094ca:	d00f      	beq.n	80094ec <UART_RxISR_16BIT_FIFOEN+0xe8>
            ((cr3its & USART_CR3_EIE) != 0U)) {
 80094cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094ce:	2201      	movs	r2, #1
 80094d0:	4013      	ands	r3, r2
        if (((isrflags & USART_ISR_FE) != 0U) &&
 80094d2:	d00b      	beq.n	80094ec <UART_RxISR_16BIT_FIFOEN+0xe8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2202      	movs	r2, #2
 80094da:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	228c      	movs	r2, #140	; 0x8c
 80094e0:	589b      	ldr	r3, [r3, r2]
 80094e2:	2204      	movs	r2, #4
 80094e4:	431a      	orrs	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	218c      	movs	r1, #140	; 0x8c
 80094ea:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred
         * --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) &&
 80094ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094ee:	2204      	movs	r2, #4
 80094f0:	4013      	ands	r3, r2
 80094f2:	d00f      	beq.n	8009514 <UART_RxISR_16BIT_FIFOEN+0x110>
            ((cr3its & USART_CR3_EIE) != 0U)) {
 80094f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094f6:	2201      	movs	r2, #1
 80094f8:	4013      	ands	r3, r2
        if (((isrflags & USART_ISR_NE) != 0U) &&
 80094fa:	d00b      	beq.n	8009514 <UART_RxISR_16BIT_FIFOEN+0x110>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2204      	movs	r2, #4
 8009502:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	228c      	movs	r2, #140	; 0x8c
 8009508:	589b      	ldr	r3, [r3, r2]
 800950a:	2202      	movs	r2, #2
 800950c:	431a      	orrs	r2, r3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	218c      	movs	r1, #140	; 0x8c
 8009512:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be
         * ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE) {
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	228c      	movs	r2, #140	; 0x8c
 8009518:	589b      	ldr	r3, [r3, r2]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d007      	beq.n	800952e <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	0018      	movs	r0, r3
 8009522:	f7fe fe23 	bl	800816c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	228c      	movs	r2, #140	; 0x8c
 800952a:	2100      	movs	r1, #0
 800952c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U) {
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	225e      	movs	r2, #94	; 0x5e
 8009532:	5a9b      	ldrh	r3, [r3, r2]
 8009534:	b29b      	uxth	r3, r3
 8009536:	2b00      	cmp	r3, #0
 8009538:	d170      	bne.n	800961c <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800953a:	f3ef 8310 	mrs	r3, PRIMASK
 800953e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8009540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009542:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009544:	2301      	movs	r3, #1
 8009546:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800954a:	f383 8810 	msr	PRIMASK, r3
}
 800954e:	46c0      	nop			; (mov r8, r8)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	495f      	ldr	r1, [pc, #380]	; (80096d8 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 800955c:	400a      	ands	r2, r1
 800955e:	601a      	str	r2, [r3, #0]
 8009560:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009562:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009566:	f383 8810 	msr	PRIMASK, r3
}
 800956a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800956c:	f3ef 8310 	mrs	r3, PRIMASK
 8009570:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8009572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun
           error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3,
 8009574:	65bb      	str	r3, [r7, #88]	; 0x58
 8009576:	2301      	movs	r3, #1
 8009578:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800957a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800957c:	f383 8810 	msr	PRIMASK, r3
}
 8009580:	46c0      	nop			; (mov r8, r8)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	689a      	ldr	r2, [r3, #8]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4953      	ldr	r1, [pc, #332]	; (80096dc <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 800958e:	400a      	ands	r2, r1
 8009590:	609a      	str	r2, [r3, #8]
 8009592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009594:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009598:	f383 8810 	msr	PRIMASK, r3
}
 800959c:	46c0      	nop			; (mov r8, r8)
                         (USART_CR3_EIE | USART_CR3_RXFTIE));

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2288      	movs	r2, #136	; 0x88
 80095a2:	2120      	movs	r1, #32
 80095a4:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d12f      	bne.n	8009614 <UART_RxISR_16BIT_FIFOEN+0x210>
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095ba:	f3ef 8310 	mrs	r3, PRIMASK
 80095be:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80095c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095c2:	657b      	str	r3, [r7, #84]	; 0x54
 80095c4:	2301      	movs	r3, #1
 80095c6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ca:	f383 8810 	msr	PRIMASK, r3
}
 80095ce:	46c0      	nop			; (mov r8, r8)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2110      	movs	r1, #16
 80095dc:	438a      	bics	r2, r1
 80095de:	601a      	str	r2, [r3, #0]
 80095e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e6:	f383 8810 	msr	PRIMASK, r3
}
 80095ea:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET) {
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	69db      	ldr	r3, [r3, #28]
 80095f2:	2210      	movs	r2, #16
 80095f4:	4013      	ands	r3, r2
 80095f6:	2b10      	cmp	r3, #16
 80095f8:	d103      	bne.n	8009602 <UART_RxISR_16BIT_FIFOEN+0x1fe>
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	2210      	movs	r2, #16
 8009600:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	225c      	movs	r2, #92	; 0x5c
 8009606:	5a9a      	ldrh	r2, [r3, r2]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	0011      	movs	r1, r2
 800960c:	0018      	movs	r0, r3
 800960e:	f7fe fdb5 	bl	800817c <HAL_UARTEx_RxEventCallback>
 8009612:	e003      	b.n	800961c <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	0018      	movs	r0, r3
 8009618:	f7f8 fb4e 	bl	8001cb8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U)) {
 800961c:	2366      	movs	r3, #102	; 0x66
 800961e:	18fb      	adds	r3, r7, r3
 8009620:	881b      	ldrh	r3, [r3, #0]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d004      	beq.n	8009630 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8009626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009628:	2220      	movs	r2, #32
 800962a:	4013      	ands	r3, r2
 800962c:	d000      	beq.n	8009630 <UART_RxISR_16BIT_FIFOEN+0x22c>
 800962e:	e70c      	b.n	800944a <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009630:	2052      	movs	r0, #82	; 0x52
 8009632:	183b      	adds	r3, r7, r0
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	215e      	movs	r1, #94	; 0x5e
 8009638:	5a52      	ldrh	r2, [r2, r1]
 800963a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess)) {
 800963c:	0001      	movs	r1, r0
 800963e:	187b      	adds	r3, r7, r1
 8009640:	881b      	ldrh	r3, [r3, #0]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d044      	beq.n	80096d0 <UART_RxISR_16BIT_FIFOEN+0x2cc>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2268      	movs	r2, #104	; 0x68
 800964a:	5a9b      	ldrh	r3, [r3, r2]
 800964c:	187a      	adds	r2, r7, r1
 800964e:	8812      	ldrh	r2, [r2, #0]
 8009650:	429a      	cmp	r2, r3
 8009652:	d23d      	bcs.n	80096d0 <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009654:	f3ef 8310 	mrs	r3, PRIMASK
 8009658:	60fb      	str	r3, [r7, #12]
  return(result);
 800965a:	68fb      	ldr	r3, [r7, #12]
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800965c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800965e:	2301      	movs	r3, #1
 8009660:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	f383 8810 	msr	PRIMASK, r3
}
 8009668:	46c0      	nop			; (mov r8, r8)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	689a      	ldr	r2, [r3, #8]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	491a      	ldr	r1, [pc, #104]	; (80096e0 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8009676:	400a      	ands	r2, r1
 8009678:	609a      	str	r2, [r3, #8]
 800967a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800967c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	f383 8810 	msr	PRIMASK, r3
}
 8009684:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a16      	ldr	r2, [pc, #88]	; (80096e4 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800968a:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800968c:	f3ef 8310 	mrs	r3, PRIMASK
 8009690:	61bb      	str	r3, [r7, #24]
  return(result);
 8009692:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009694:	64bb      	str	r3, [r7, #72]	; 0x48
 8009696:	2301      	movs	r3, #1
 8009698:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	f383 8810 	msr	PRIMASK, r3
}
 80096a0:	46c0      	nop			; (mov r8, r8)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2120      	movs	r1, #32
 80096ae:	430a      	orrs	r2, r1
 80096b0:	601a      	str	r2, [r3, #0]
 80096b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096b6:	6a3b      	ldr	r3, [r7, #32]
 80096b8:	f383 8810 	msr	PRIMASK, r3
}
 80096bc:	46c0      	nop			; (mov r8, r8)
    }
  } else {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80096be:	e007      	b.n	80096d0 <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	699a      	ldr	r2, [r3, #24]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2108      	movs	r1, #8
 80096cc:	430a      	orrs	r2, r1
 80096ce:	619a      	str	r2, [r3, #24]
}
 80096d0:	46c0      	nop			; (mov r8, r8)
 80096d2:	46bd      	mov	sp, r7
 80096d4:	b01e      	add	sp, #120	; 0x78
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	fffffeff 	.word	0xfffffeff
 80096dc:	effffffe 	.word	0xeffffffe
 80096e0:	efffffff 	.word	0xefffffff
 80096e4:	08008fb5 	.word	0x08008fb5

080096e8 <HAL_UARTEx_WakeupCallback>:
/**
 * @brief UART wakeup from Stop mode callback.
 * @param huart UART handle.
 * @retval None
 */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart) {
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80096f0:	46c0      	nop			; (mov r8, r8)
 80096f2:	46bd      	mov	sp, r7
 80096f4:	b002      	add	sp, #8
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <HAL_UARTEx_RxFifoFullCallback>:
/**
 * @brief  UART RX Fifo full callback.
 * @param  huart UART handle.
 * @retval None
 */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart) {
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user
     file.
   */
}
 8009700:	46c0      	nop			; (mov r8, r8)
 8009702:	46bd      	mov	sp, r7
 8009704:	b002      	add	sp, #8
 8009706:	bd80      	pop	{r7, pc}

08009708 <HAL_UARTEx_TxFifoEmptyCallback>:
/**
 * @brief  UART TX Fifo empty callback.
 * @param  huart UART handle.
 * @retval None
 */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart) {
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user
     file.
   */
}
 8009710:	46c0      	nop			; (mov r8, r8)
 8009712:	46bd      	mov	sp, r7
 8009714:	b002      	add	sp, #8
 8009716:	bd80      	pop	{r7, pc}

08009718 <HAL_UARTEx_DisableFifoMode>:
/**
 * @brief  Disable the FIFO mode.
 * @param huart      UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart) {
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2280      	movs	r2, #128	; 0x80
 8009724:	5c9b      	ldrb	r3, [r3, r2]
 8009726:	2b01      	cmp	r3, #1
 8009728:	d101      	bne.n	800972e <HAL_UARTEx_DisableFifoMode+0x16>
 800972a:	2302      	movs	r3, #2
 800972c:	e027      	b.n	800977e <HAL_UARTEx_DisableFifoMode+0x66>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2280      	movs	r2, #128	; 0x80
 8009732:	2101      	movs	r1, #1
 8009734:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2284      	movs	r2, #132	; 0x84
 800973a:	2124      	movs	r1, #36	; 0x24
 800973c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2101      	movs	r1, #1
 8009752:	438a      	bics	r2, r1
 8009754:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	4a0b      	ldr	r2, [pc, #44]	; (8009788 <HAL_UARTEx_DisableFifoMode+0x70>)
 800975a:	4013      	ands	r3, r2
 800975c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2284      	movs	r2, #132	; 0x84
 8009770:	2120      	movs	r1, #32
 8009772:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2280      	movs	r2, #128	; 0x80
 8009778:	2100      	movs	r1, #0
 800977a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800977c:	2300      	movs	r3, #0
}
 800977e:	0018      	movs	r0, r3
 8009780:	46bd      	mov	sp, r7
 8009782:	b004      	add	sp, #16
 8009784:	bd80      	pop	{r7, pc}
 8009786:	46c0      	nop			; (mov r8, r8)
 8009788:	dfffffff 	.word	0xdfffffff

0800978c <HAL_UARTEx_SetTxFifoThreshold>:
 *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
 *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart,
                                                uint32_t Threshold) {
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2280      	movs	r2, #128	; 0x80
 800979a:	5c9b      	ldrb	r3, [r3, r2]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d101      	bne.n	80097a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80097a0:	2302      	movs	r3, #2
 80097a2:	e02e      	b.n	8009802 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2280      	movs	r2, #128	; 0x80
 80097a8:	2101      	movs	r1, #1
 80097aa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2284      	movs	r2, #132	; 0x84
 80097b0:	2124      	movs	r1, #36	; 0x24
 80097b2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2101      	movs	r1, #1
 80097c8:	438a      	bics	r2, r1
 80097ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	00db      	lsls	r3, r3, #3
 80097d4:	08d9      	lsrs	r1, r3, #3
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	683a      	ldr	r2, [r7, #0]
 80097dc:	430a      	orrs	r2, r1
 80097de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	0018      	movs	r0, r3
 80097e4:	f000 f854 	bl	8009890 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2284      	movs	r2, #132	; 0x84
 80097f4:	2120      	movs	r1, #32
 80097f6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2280      	movs	r2, #128	; 0x80
 80097fc:	2100      	movs	r1, #0
 80097fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009800:	2300      	movs	r3, #0
}
 8009802:	0018      	movs	r0, r3
 8009804:	46bd      	mov	sp, r7
 8009806:	b004      	add	sp, #16
 8009808:	bd80      	pop	{r7, pc}
	...

0800980c <HAL_UARTEx_SetRxFifoThreshold>:
 *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
 *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart,
                                                uint32_t Threshold) {
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2280      	movs	r2, #128	; 0x80
 800981a:	5c9b      	ldrb	r3, [r3, r2]
 800981c:	2b01      	cmp	r3, #1
 800981e:	d101      	bne.n	8009824 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009820:	2302      	movs	r3, #2
 8009822:	e02f      	b.n	8009884 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2280      	movs	r2, #128	; 0x80
 8009828:	2101      	movs	r1, #1
 800982a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2284      	movs	r2, #132	; 0x84
 8009830:	2124      	movs	r1, #36	; 0x24
 8009832:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2101      	movs	r1, #1
 8009848:	438a      	bics	r2, r1
 800984a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	4a0e      	ldr	r2, [pc, #56]	; (800988c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009854:	4013      	ands	r3, r2
 8009856:	0019      	movs	r1, r3
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	683a      	ldr	r2, [r7, #0]
 800985e:	430a      	orrs	r2, r1
 8009860:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	0018      	movs	r0, r3
 8009866:	f000 f813 	bl	8009890 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2284      	movs	r2, #132	; 0x84
 8009876:	2120      	movs	r1, #32
 8009878:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2280      	movs	r2, #128	; 0x80
 800987e:	2100      	movs	r1, #0
 8009880:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	0018      	movs	r0, r3
 8009886:	46bd      	mov	sp, r7
 8009888:	b004      	add	sp, #16
 800988a:	bd80      	pop	{r7, pc}
 800988c:	f1ffffff 	.word	0xf1ffffff

08009890 <UARTEx_SetNbDataToProcess>:
 * @note The RX FIFO depth and the TX FIFO depth is extracted from
 *       the UART configuration registers.
 * @param huart UART handle.
 * @retval None
 */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart) {
 8009890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009892:	b085      	sub	sp, #20
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE) {
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800989c:	2b00      	cmp	r3, #0
 800989e:	d108      	bne.n	80098b2 <UARTEx_SetNbDataToProcess+0x22>
    huart->NbTxDataToProcess = 1U;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	226a      	movs	r2, #106	; 0x6a
 80098a4:	2101      	movs	r1, #1
 80098a6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2268      	movs	r2, #104	; 0x68
 80098ac:	2101      	movs	r1, #1
 80098ae:	5299      	strh	r1, [r3, r2]
        (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess =
        ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
        (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80098b0:	e043      	b.n	800993a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80098b2:	260f      	movs	r6, #15
 80098b4:	19bb      	adds	r3, r7, r6
 80098b6:	2208      	movs	r2, #8
 80098b8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80098ba:	200e      	movs	r0, #14
 80098bc:	183b      	adds	r3, r7, r0
 80098be:	2208      	movs	r2, #8
 80098c0:	701a      	strb	r2, [r3, #0]
        (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	0e5b      	lsrs	r3, r3, #25
 80098ca:	b2da      	uxtb	r2, r3
    rx_fifo_threshold =
 80098cc:	240d      	movs	r4, #13
 80098ce:	193b      	adds	r3, r7, r4
 80098d0:	2107      	movs	r1, #7
 80098d2:	400a      	ands	r2, r1
 80098d4:	701a      	strb	r2, [r3, #0]
        (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	0f5b      	lsrs	r3, r3, #29
 80098de:	b2da      	uxtb	r2, r3
    tx_fifo_threshold =
 80098e0:	250c      	movs	r5, #12
 80098e2:	197b      	adds	r3, r7, r5
 80098e4:	2107      	movs	r1, #7
 80098e6:	400a      	ands	r2, r1
 80098e8:	701a      	strb	r2, [r3, #0]
        ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098ea:	183b      	adds	r3, r7, r0
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	197a      	adds	r2, r7, r5
 80098f0:	7812      	ldrb	r2, [r2, #0]
 80098f2:	4914      	ldr	r1, [pc, #80]	; (8009944 <UARTEx_SetNbDataToProcess+0xb4>)
 80098f4:	5c8a      	ldrb	r2, [r1, r2]
 80098f6:	435a      	muls	r2, r3
 80098f8:	0010      	movs	r0, r2
        (uint16_t)denominator[tx_fifo_threshold];
 80098fa:	197b      	adds	r3, r7, r5
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	4a12      	ldr	r2, [pc, #72]	; (8009948 <UARTEx_SetNbDataToProcess+0xb8>)
 8009900:	5cd3      	ldrb	r3, [r2, r3]
        ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009902:	0019      	movs	r1, r3
 8009904:	f7f6 fc9c 	bl	8000240 <__divsi3>
 8009908:	0003      	movs	r3, r0
    huart->NbTxDataToProcess =
 800990a:	b299      	uxth	r1, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	226a      	movs	r2, #106	; 0x6a
 8009910:	5299      	strh	r1, [r3, r2]
        ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009912:	19bb      	adds	r3, r7, r6
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	193a      	adds	r2, r7, r4
 8009918:	7812      	ldrb	r2, [r2, #0]
 800991a:	490a      	ldr	r1, [pc, #40]	; (8009944 <UARTEx_SetNbDataToProcess+0xb4>)
 800991c:	5c8a      	ldrb	r2, [r1, r2]
 800991e:	435a      	muls	r2, r3
 8009920:	0010      	movs	r0, r2
        (uint16_t)denominator[rx_fifo_threshold];
 8009922:	193b      	adds	r3, r7, r4
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	4a08      	ldr	r2, [pc, #32]	; (8009948 <UARTEx_SetNbDataToProcess+0xb8>)
 8009928:	5cd3      	ldrb	r3, [r2, r3]
        ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800992a:	0019      	movs	r1, r3
 800992c:	f7f6 fc88 	bl	8000240 <__divsi3>
 8009930:	0003      	movs	r3, r0
    huart->NbRxDataToProcess =
 8009932:	b299      	uxth	r1, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2268      	movs	r2, #104	; 0x68
 8009938:	5299      	strh	r1, [r3, r2]
}
 800993a:	46c0      	nop			; (mov r8, r8)
 800993c:	46bd      	mov	sp, r7
 800993e:	b005      	add	sp, #20
 8009940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009942:	46c0      	nop			; (mov r8, r8)
 8009944:	0800abbc 	.word	0x0800abbc
 8009948:	0800abc4 	.word	0x0800abc4

0800994c <atol>:
 800994c:	b510      	push	{r4, lr}
 800994e:	220a      	movs	r2, #10
 8009950:	2100      	movs	r1, #0
 8009952:	f000 f907 	bl	8009b64 <strtol>
 8009956:	bd10      	pop	{r4, pc}

08009958 <__errno>:
 8009958:	4b01      	ldr	r3, [pc, #4]	; (8009960 <__errno+0x8>)
 800995a:	6818      	ldr	r0, [r3, #0]
 800995c:	4770      	bx	lr
 800995e:	46c0      	nop			; (mov r8, r8)
 8009960:	2000000c 	.word	0x2000000c

08009964 <__libc_init_array>:
 8009964:	b570      	push	{r4, r5, r6, lr}
 8009966:	2600      	movs	r6, #0
 8009968:	4d0c      	ldr	r5, [pc, #48]	; (800999c <__libc_init_array+0x38>)
 800996a:	4c0d      	ldr	r4, [pc, #52]	; (80099a0 <__libc_init_array+0x3c>)
 800996c:	1b64      	subs	r4, r4, r5
 800996e:	10a4      	asrs	r4, r4, #2
 8009970:	42a6      	cmp	r6, r4
 8009972:	d109      	bne.n	8009988 <__libc_init_array+0x24>
 8009974:	2600      	movs	r6, #0
 8009976:	f000 fcfd 	bl	800a374 <_init>
 800997a:	4d0a      	ldr	r5, [pc, #40]	; (80099a4 <__libc_init_array+0x40>)
 800997c:	4c0a      	ldr	r4, [pc, #40]	; (80099a8 <__libc_init_array+0x44>)
 800997e:	1b64      	subs	r4, r4, r5
 8009980:	10a4      	asrs	r4, r4, #2
 8009982:	42a6      	cmp	r6, r4
 8009984:	d105      	bne.n	8009992 <__libc_init_array+0x2e>
 8009986:	bd70      	pop	{r4, r5, r6, pc}
 8009988:	00b3      	lsls	r3, r6, #2
 800998a:	58eb      	ldr	r3, [r5, r3]
 800998c:	4798      	blx	r3
 800998e:	3601      	adds	r6, #1
 8009990:	e7ee      	b.n	8009970 <__libc_init_array+0xc>
 8009992:	00b3      	lsls	r3, r6, #2
 8009994:	58eb      	ldr	r3, [r5, r3]
 8009996:	4798      	blx	r3
 8009998:	3601      	adds	r6, #1
 800999a:	e7f2      	b.n	8009982 <__libc_init_array+0x1e>
 800999c:	0800ad08 	.word	0x0800ad08
 80099a0:	0800ad08 	.word	0x0800ad08
 80099a4:	0800ad08 	.word	0x0800ad08
 80099a8:	0800ad1c 	.word	0x0800ad1c

080099ac <memcpy>:
 80099ac:	2300      	movs	r3, #0
 80099ae:	b510      	push	{r4, lr}
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d100      	bne.n	80099b6 <memcpy+0xa>
 80099b4:	bd10      	pop	{r4, pc}
 80099b6:	5ccc      	ldrb	r4, [r1, r3]
 80099b8:	54c4      	strb	r4, [r0, r3]
 80099ba:	3301      	adds	r3, #1
 80099bc:	e7f8      	b.n	80099b0 <memcpy+0x4>

080099be <memset>:
 80099be:	0003      	movs	r3, r0
 80099c0:	1882      	adds	r2, r0, r2
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d100      	bne.n	80099c8 <memset+0xa>
 80099c6:	4770      	bx	lr
 80099c8:	7019      	strb	r1, [r3, #0]
 80099ca:	3301      	adds	r3, #1
 80099cc:	e7f9      	b.n	80099c2 <memset+0x4>
	...

080099d0 <siprintf>:
 80099d0:	b40e      	push	{r1, r2, r3}
 80099d2:	b500      	push	{lr}
 80099d4:	490b      	ldr	r1, [pc, #44]	; (8009a04 <siprintf+0x34>)
 80099d6:	b09c      	sub	sp, #112	; 0x70
 80099d8:	ab1d      	add	r3, sp, #116	; 0x74
 80099da:	9002      	str	r0, [sp, #8]
 80099dc:	9006      	str	r0, [sp, #24]
 80099de:	9107      	str	r1, [sp, #28]
 80099e0:	9104      	str	r1, [sp, #16]
 80099e2:	4809      	ldr	r0, [pc, #36]	; (8009a08 <siprintf+0x38>)
 80099e4:	4909      	ldr	r1, [pc, #36]	; (8009a0c <siprintf+0x3c>)
 80099e6:	cb04      	ldmia	r3!, {r2}
 80099e8:	9105      	str	r1, [sp, #20]
 80099ea:	6800      	ldr	r0, [r0, #0]
 80099ec:	a902      	add	r1, sp, #8
 80099ee:	9301      	str	r3, [sp, #4]
 80099f0:	f000 f926 	bl	8009c40 <_svfiprintf_r>
 80099f4:	2300      	movs	r3, #0
 80099f6:	9a02      	ldr	r2, [sp, #8]
 80099f8:	7013      	strb	r3, [r2, #0]
 80099fa:	b01c      	add	sp, #112	; 0x70
 80099fc:	bc08      	pop	{r3}
 80099fe:	b003      	add	sp, #12
 8009a00:	4718      	bx	r3
 8009a02:	46c0      	nop			; (mov r8, r8)
 8009a04:	7fffffff 	.word	0x7fffffff
 8009a08:	2000000c 	.word	0x2000000c
 8009a0c:	ffff0208 	.word	0xffff0208

08009a10 <strcpy>:
 8009a10:	0003      	movs	r3, r0
 8009a12:	780a      	ldrb	r2, [r1, #0]
 8009a14:	3101      	adds	r1, #1
 8009a16:	701a      	strb	r2, [r3, #0]
 8009a18:	3301      	adds	r3, #1
 8009a1a:	2a00      	cmp	r2, #0
 8009a1c:	d1f9      	bne.n	8009a12 <strcpy+0x2>
 8009a1e:	4770      	bx	lr

08009a20 <strncpy>:
 8009a20:	0003      	movs	r3, r0
 8009a22:	b530      	push	{r4, r5, lr}
 8009a24:	001d      	movs	r5, r3
 8009a26:	2a00      	cmp	r2, #0
 8009a28:	d006      	beq.n	8009a38 <strncpy+0x18>
 8009a2a:	780c      	ldrb	r4, [r1, #0]
 8009a2c:	3a01      	subs	r2, #1
 8009a2e:	3301      	adds	r3, #1
 8009a30:	702c      	strb	r4, [r5, #0]
 8009a32:	3101      	adds	r1, #1
 8009a34:	2c00      	cmp	r4, #0
 8009a36:	d1f5      	bne.n	8009a24 <strncpy+0x4>
 8009a38:	2100      	movs	r1, #0
 8009a3a:	189a      	adds	r2, r3, r2
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d100      	bne.n	8009a42 <strncpy+0x22>
 8009a40:	bd30      	pop	{r4, r5, pc}
 8009a42:	7019      	strb	r1, [r3, #0]
 8009a44:	3301      	adds	r3, #1
 8009a46:	e7f9      	b.n	8009a3c <strncpy+0x1c>

08009a48 <_strtol_l.isra.0>:
 8009a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a4a:	b087      	sub	sp, #28
 8009a4c:	001e      	movs	r6, r3
 8009a4e:	9005      	str	r0, [sp, #20]
 8009a50:	9101      	str	r1, [sp, #4]
 8009a52:	9202      	str	r2, [sp, #8]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d045      	beq.n	8009ae4 <_strtol_l.isra.0+0x9c>
 8009a58:	0008      	movs	r0, r1
 8009a5a:	2b24      	cmp	r3, #36	; 0x24
 8009a5c:	d842      	bhi.n	8009ae4 <_strtol_l.isra.0+0x9c>
 8009a5e:	4b3f      	ldr	r3, [pc, #252]	; (8009b5c <_strtol_l.isra.0+0x114>)
 8009a60:	2208      	movs	r2, #8
 8009a62:	469c      	mov	ip, r3
 8009a64:	0003      	movs	r3, r0
 8009a66:	4661      	mov	r1, ip
 8009a68:	781c      	ldrb	r4, [r3, #0]
 8009a6a:	1c45      	adds	r5, r0, #1
 8009a6c:	5d09      	ldrb	r1, [r1, r4]
 8009a6e:	0028      	movs	r0, r5
 8009a70:	000f      	movs	r7, r1
 8009a72:	4017      	ands	r7, r2
 8009a74:	4211      	tst	r1, r2
 8009a76:	d1f5      	bne.n	8009a64 <_strtol_l.isra.0+0x1c>
 8009a78:	2c2d      	cmp	r4, #45	; 0x2d
 8009a7a:	d13a      	bne.n	8009af2 <_strtol_l.isra.0+0xaa>
 8009a7c:	2701      	movs	r7, #1
 8009a7e:	782c      	ldrb	r4, [r5, #0]
 8009a80:	1c9d      	adds	r5, r3, #2
 8009a82:	2e00      	cmp	r6, #0
 8009a84:	d065      	beq.n	8009b52 <_strtol_l.isra.0+0x10a>
 8009a86:	2e10      	cmp	r6, #16
 8009a88:	d109      	bne.n	8009a9e <_strtol_l.isra.0+0x56>
 8009a8a:	2c30      	cmp	r4, #48	; 0x30
 8009a8c:	d107      	bne.n	8009a9e <_strtol_l.isra.0+0x56>
 8009a8e:	2220      	movs	r2, #32
 8009a90:	782b      	ldrb	r3, [r5, #0]
 8009a92:	4393      	bics	r3, r2
 8009a94:	2b58      	cmp	r3, #88	; 0x58
 8009a96:	d157      	bne.n	8009b48 <_strtol_l.isra.0+0x100>
 8009a98:	2610      	movs	r6, #16
 8009a9a:	786c      	ldrb	r4, [r5, #1]
 8009a9c:	3502      	adds	r5, #2
 8009a9e:	4b30      	ldr	r3, [pc, #192]	; (8009b60 <_strtol_l.isra.0+0x118>)
 8009aa0:	0031      	movs	r1, r6
 8009aa2:	18fb      	adds	r3, r7, r3
 8009aa4:	0018      	movs	r0, r3
 8009aa6:	9303      	str	r3, [sp, #12]
 8009aa8:	f7f6 fbc6 	bl	8000238 <__aeabi_uidivmod>
 8009aac:	2300      	movs	r3, #0
 8009aae:	2201      	movs	r2, #1
 8009ab0:	4684      	mov	ip, r0
 8009ab2:	0018      	movs	r0, r3
 8009ab4:	9104      	str	r1, [sp, #16]
 8009ab6:	4252      	negs	r2, r2
 8009ab8:	0021      	movs	r1, r4
 8009aba:	3930      	subs	r1, #48	; 0x30
 8009abc:	2909      	cmp	r1, #9
 8009abe:	d81d      	bhi.n	8009afc <_strtol_l.isra.0+0xb4>
 8009ac0:	000c      	movs	r4, r1
 8009ac2:	42a6      	cmp	r6, r4
 8009ac4:	dd28      	ble.n	8009b18 <_strtol_l.isra.0+0xd0>
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	db24      	blt.n	8009b14 <_strtol_l.isra.0+0xcc>
 8009aca:	0013      	movs	r3, r2
 8009acc:	4584      	cmp	ip, r0
 8009ace:	d306      	bcc.n	8009ade <_strtol_l.isra.0+0x96>
 8009ad0:	d102      	bne.n	8009ad8 <_strtol_l.isra.0+0x90>
 8009ad2:	9904      	ldr	r1, [sp, #16]
 8009ad4:	42a1      	cmp	r1, r4
 8009ad6:	db02      	blt.n	8009ade <_strtol_l.isra.0+0x96>
 8009ad8:	2301      	movs	r3, #1
 8009ada:	4370      	muls	r0, r6
 8009adc:	1820      	adds	r0, r4, r0
 8009ade:	782c      	ldrb	r4, [r5, #0]
 8009ae0:	3501      	adds	r5, #1
 8009ae2:	e7e9      	b.n	8009ab8 <_strtol_l.isra.0+0x70>
 8009ae4:	f7ff ff38 	bl	8009958 <__errno>
 8009ae8:	2316      	movs	r3, #22
 8009aea:	6003      	str	r3, [r0, #0]
 8009aec:	2000      	movs	r0, #0
 8009aee:	b007      	add	sp, #28
 8009af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009af2:	2c2b      	cmp	r4, #43	; 0x2b
 8009af4:	d1c5      	bne.n	8009a82 <_strtol_l.isra.0+0x3a>
 8009af6:	782c      	ldrb	r4, [r5, #0]
 8009af8:	1c9d      	adds	r5, r3, #2
 8009afa:	e7c2      	b.n	8009a82 <_strtol_l.isra.0+0x3a>
 8009afc:	0021      	movs	r1, r4
 8009afe:	3941      	subs	r1, #65	; 0x41
 8009b00:	2919      	cmp	r1, #25
 8009b02:	d801      	bhi.n	8009b08 <_strtol_l.isra.0+0xc0>
 8009b04:	3c37      	subs	r4, #55	; 0x37
 8009b06:	e7dc      	b.n	8009ac2 <_strtol_l.isra.0+0x7a>
 8009b08:	0021      	movs	r1, r4
 8009b0a:	3961      	subs	r1, #97	; 0x61
 8009b0c:	2919      	cmp	r1, #25
 8009b0e:	d803      	bhi.n	8009b18 <_strtol_l.isra.0+0xd0>
 8009b10:	3c57      	subs	r4, #87	; 0x57
 8009b12:	e7d6      	b.n	8009ac2 <_strtol_l.isra.0+0x7a>
 8009b14:	0013      	movs	r3, r2
 8009b16:	e7e2      	b.n	8009ade <_strtol_l.isra.0+0x96>
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	da09      	bge.n	8009b30 <_strtol_l.isra.0+0xe8>
 8009b1c:	2322      	movs	r3, #34	; 0x22
 8009b1e:	9a05      	ldr	r2, [sp, #20]
 8009b20:	9803      	ldr	r0, [sp, #12]
 8009b22:	6013      	str	r3, [r2, #0]
 8009b24:	9b02      	ldr	r3, [sp, #8]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d0e1      	beq.n	8009aee <_strtol_l.isra.0+0xa6>
 8009b2a:	1e6b      	subs	r3, r5, #1
 8009b2c:	9301      	str	r3, [sp, #4]
 8009b2e:	e007      	b.n	8009b40 <_strtol_l.isra.0+0xf8>
 8009b30:	2f00      	cmp	r7, #0
 8009b32:	d000      	beq.n	8009b36 <_strtol_l.isra.0+0xee>
 8009b34:	4240      	negs	r0, r0
 8009b36:	9a02      	ldr	r2, [sp, #8]
 8009b38:	2a00      	cmp	r2, #0
 8009b3a:	d0d8      	beq.n	8009aee <_strtol_l.isra.0+0xa6>
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d1f4      	bne.n	8009b2a <_strtol_l.isra.0+0xe2>
 8009b40:	9b02      	ldr	r3, [sp, #8]
 8009b42:	9a01      	ldr	r2, [sp, #4]
 8009b44:	601a      	str	r2, [r3, #0]
 8009b46:	e7d2      	b.n	8009aee <_strtol_l.isra.0+0xa6>
 8009b48:	2430      	movs	r4, #48	; 0x30
 8009b4a:	2e00      	cmp	r6, #0
 8009b4c:	d1a7      	bne.n	8009a9e <_strtol_l.isra.0+0x56>
 8009b4e:	3608      	adds	r6, #8
 8009b50:	e7a5      	b.n	8009a9e <_strtol_l.isra.0+0x56>
 8009b52:	2c30      	cmp	r4, #48	; 0x30
 8009b54:	d09b      	beq.n	8009a8e <_strtol_l.isra.0+0x46>
 8009b56:	260a      	movs	r6, #10
 8009b58:	e7a1      	b.n	8009a9e <_strtol_l.isra.0+0x56>
 8009b5a:	46c0      	nop			; (mov r8, r8)
 8009b5c:	0800abcd 	.word	0x0800abcd
 8009b60:	7fffffff 	.word	0x7fffffff

08009b64 <strtol>:
 8009b64:	b510      	push	{r4, lr}
 8009b66:	0013      	movs	r3, r2
 8009b68:	000a      	movs	r2, r1
 8009b6a:	0001      	movs	r1, r0
 8009b6c:	4802      	ldr	r0, [pc, #8]	; (8009b78 <strtol+0x14>)
 8009b6e:	6800      	ldr	r0, [r0, #0]
 8009b70:	f7ff ff6a 	bl	8009a48 <_strtol_l.isra.0>
 8009b74:	bd10      	pop	{r4, pc}
 8009b76:	46c0      	nop			; (mov r8, r8)
 8009b78:	2000000c 	.word	0x2000000c

08009b7c <__ssputs_r>:
 8009b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b7e:	688e      	ldr	r6, [r1, #8]
 8009b80:	b085      	sub	sp, #20
 8009b82:	0007      	movs	r7, r0
 8009b84:	000c      	movs	r4, r1
 8009b86:	9203      	str	r2, [sp, #12]
 8009b88:	9301      	str	r3, [sp, #4]
 8009b8a:	429e      	cmp	r6, r3
 8009b8c:	d83c      	bhi.n	8009c08 <__ssputs_r+0x8c>
 8009b8e:	2390      	movs	r3, #144	; 0x90
 8009b90:	898a      	ldrh	r2, [r1, #12]
 8009b92:	00db      	lsls	r3, r3, #3
 8009b94:	421a      	tst	r2, r3
 8009b96:	d034      	beq.n	8009c02 <__ssputs_r+0x86>
 8009b98:	2503      	movs	r5, #3
 8009b9a:	6909      	ldr	r1, [r1, #16]
 8009b9c:	6823      	ldr	r3, [r4, #0]
 8009b9e:	1a5b      	subs	r3, r3, r1
 8009ba0:	9302      	str	r3, [sp, #8]
 8009ba2:	6963      	ldr	r3, [r4, #20]
 8009ba4:	9802      	ldr	r0, [sp, #8]
 8009ba6:	435d      	muls	r5, r3
 8009ba8:	0feb      	lsrs	r3, r5, #31
 8009baa:	195d      	adds	r5, r3, r5
 8009bac:	9b01      	ldr	r3, [sp, #4]
 8009bae:	106d      	asrs	r5, r5, #1
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	181b      	adds	r3, r3, r0
 8009bb4:	42ab      	cmp	r3, r5
 8009bb6:	d900      	bls.n	8009bba <__ssputs_r+0x3e>
 8009bb8:	001d      	movs	r5, r3
 8009bba:	0553      	lsls	r3, r2, #21
 8009bbc:	d532      	bpl.n	8009c24 <__ssputs_r+0xa8>
 8009bbe:	0029      	movs	r1, r5
 8009bc0:	0038      	movs	r0, r7
 8009bc2:	f000 fb27 	bl	800a214 <_malloc_r>
 8009bc6:	1e06      	subs	r6, r0, #0
 8009bc8:	d109      	bne.n	8009bde <__ssputs_r+0x62>
 8009bca:	230c      	movs	r3, #12
 8009bcc:	603b      	str	r3, [r7, #0]
 8009bce:	2340      	movs	r3, #64	; 0x40
 8009bd0:	2001      	movs	r0, #1
 8009bd2:	89a2      	ldrh	r2, [r4, #12]
 8009bd4:	4240      	negs	r0, r0
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	81a3      	strh	r3, [r4, #12]
 8009bda:	b005      	add	sp, #20
 8009bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bde:	9a02      	ldr	r2, [sp, #8]
 8009be0:	6921      	ldr	r1, [r4, #16]
 8009be2:	f7ff fee3 	bl	80099ac <memcpy>
 8009be6:	89a3      	ldrh	r3, [r4, #12]
 8009be8:	4a14      	ldr	r2, [pc, #80]	; (8009c3c <__ssputs_r+0xc0>)
 8009bea:	401a      	ands	r2, r3
 8009bec:	2380      	movs	r3, #128	; 0x80
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	81a3      	strh	r3, [r4, #12]
 8009bf2:	9b02      	ldr	r3, [sp, #8]
 8009bf4:	6126      	str	r6, [r4, #16]
 8009bf6:	18f6      	adds	r6, r6, r3
 8009bf8:	6026      	str	r6, [r4, #0]
 8009bfa:	6165      	str	r5, [r4, #20]
 8009bfc:	9e01      	ldr	r6, [sp, #4]
 8009bfe:	1aed      	subs	r5, r5, r3
 8009c00:	60a5      	str	r5, [r4, #8]
 8009c02:	9b01      	ldr	r3, [sp, #4]
 8009c04:	429e      	cmp	r6, r3
 8009c06:	d900      	bls.n	8009c0a <__ssputs_r+0x8e>
 8009c08:	9e01      	ldr	r6, [sp, #4]
 8009c0a:	0032      	movs	r2, r6
 8009c0c:	9903      	ldr	r1, [sp, #12]
 8009c0e:	6820      	ldr	r0, [r4, #0]
 8009c10:	f000 faa3 	bl	800a15a <memmove>
 8009c14:	68a3      	ldr	r3, [r4, #8]
 8009c16:	2000      	movs	r0, #0
 8009c18:	1b9b      	subs	r3, r3, r6
 8009c1a:	60a3      	str	r3, [r4, #8]
 8009c1c:	6823      	ldr	r3, [r4, #0]
 8009c1e:	199e      	adds	r6, r3, r6
 8009c20:	6026      	str	r6, [r4, #0]
 8009c22:	e7da      	b.n	8009bda <__ssputs_r+0x5e>
 8009c24:	002a      	movs	r2, r5
 8009c26:	0038      	movs	r0, r7
 8009c28:	f000 fb52 	bl	800a2d0 <_realloc_r>
 8009c2c:	1e06      	subs	r6, r0, #0
 8009c2e:	d1e0      	bne.n	8009bf2 <__ssputs_r+0x76>
 8009c30:	0038      	movs	r0, r7
 8009c32:	6921      	ldr	r1, [r4, #16]
 8009c34:	f000 faa4 	bl	800a180 <_free_r>
 8009c38:	e7c7      	b.n	8009bca <__ssputs_r+0x4e>
 8009c3a:	46c0      	nop			; (mov r8, r8)
 8009c3c:	fffffb7f 	.word	0xfffffb7f

08009c40 <_svfiprintf_r>:
 8009c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c42:	b0a1      	sub	sp, #132	; 0x84
 8009c44:	9003      	str	r0, [sp, #12]
 8009c46:	001d      	movs	r5, r3
 8009c48:	898b      	ldrh	r3, [r1, #12]
 8009c4a:	000f      	movs	r7, r1
 8009c4c:	0016      	movs	r6, r2
 8009c4e:	061b      	lsls	r3, r3, #24
 8009c50:	d511      	bpl.n	8009c76 <_svfiprintf_r+0x36>
 8009c52:	690b      	ldr	r3, [r1, #16]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d10e      	bne.n	8009c76 <_svfiprintf_r+0x36>
 8009c58:	2140      	movs	r1, #64	; 0x40
 8009c5a:	f000 fadb 	bl	800a214 <_malloc_r>
 8009c5e:	6038      	str	r0, [r7, #0]
 8009c60:	6138      	str	r0, [r7, #16]
 8009c62:	2800      	cmp	r0, #0
 8009c64:	d105      	bne.n	8009c72 <_svfiprintf_r+0x32>
 8009c66:	230c      	movs	r3, #12
 8009c68:	9a03      	ldr	r2, [sp, #12]
 8009c6a:	3801      	subs	r0, #1
 8009c6c:	6013      	str	r3, [r2, #0]
 8009c6e:	b021      	add	sp, #132	; 0x84
 8009c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c72:	2340      	movs	r3, #64	; 0x40
 8009c74:	617b      	str	r3, [r7, #20]
 8009c76:	2300      	movs	r3, #0
 8009c78:	ac08      	add	r4, sp, #32
 8009c7a:	6163      	str	r3, [r4, #20]
 8009c7c:	3320      	adds	r3, #32
 8009c7e:	7663      	strb	r3, [r4, #25]
 8009c80:	3310      	adds	r3, #16
 8009c82:	76a3      	strb	r3, [r4, #26]
 8009c84:	9507      	str	r5, [sp, #28]
 8009c86:	0035      	movs	r5, r6
 8009c88:	782b      	ldrb	r3, [r5, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d001      	beq.n	8009c92 <_svfiprintf_r+0x52>
 8009c8e:	2b25      	cmp	r3, #37	; 0x25
 8009c90:	d147      	bne.n	8009d22 <_svfiprintf_r+0xe2>
 8009c92:	1bab      	subs	r3, r5, r6
 8009c94:	9305      	str	r3, [sp, #20]
 8009c96:	42b5      	cmp	r5, r6
 8009c98:	d00c      	beq.n	8009cb4 <_svfiprintf_r+0x74>
 8009c9a:	0032      	movs	r2, r6
 8009c9c:	0039      	movs	r1, r7
 8009c9e:	9803      	ldr	r0, [sp, #12]
 8009ca0:	f7ff ff6c 	bl	8009b7c <__ssputs_r>
 8009ca4:	1c43      	adds	r3, r0, #1
 8009ca6:	d100      	bne.n	8009caa <_svfiprintf_r+0x6a>
 8009ca8:	e0ae      	b.n	8009e08 <_svfiprintf_r+0x1c8>
 8009caa:	6962      	ldr	r2, [r4, #20]
 8009cac:	9b05      	ldr	r3, [sp, #20]
 8009cae:	4694      	mov	ip, r2
 8009cb0:	4463      	add	r3, ip
 8009cb2:	6163      	str	r3, [r4, #20]
 8009cb4:	782b      	ldrb	r3, [r5, #0]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d100      	bne.n	8009cbc <_svfiprintf_r+0x7c>
 8009cba:	e0a5      	b.n	8009e08 <_svfiprintf_r+0x1c8>
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	4252      	negs	r2, r2
 8009cc2:	6062      	str	r2, [r4, #4]
 8009cc4:	a904      	add	r1, sp, #16
 8009cc6:	3254      	adds	r2, #84	; 0x54
 8009cc8:	1852      	adds	r2, r2, r1
 8009cca:	1c6e      	adds	r6, r5, #1
 8009ccc:	6023      	str	r3, [r4, #0]
 8009cce:	60e3      	str	r3, [r4, #12]
 8009cd0:	60a3      	str	r3, [r4, #8]
 8009cd2:	7013      	strb	r3, [r2, #0]
 8009cd4:	65a3      	str	r3, [r4, #88]	; 0x58
 8009cd6:	2205      	movs	r2, #5
 8009cd8:	7831      	ldrb	r1, [r6, #0]
 8009cda:	4854      	ldr	r0, [pc, #336]	; (8009e2c <_svfiprintf_r+0x1ec>)
 8009cdc:	f000 fa32 	bl	800a144 <memchr>
 8009ce0:	1c75      	adds	r5, r6, #1
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	d11f      	bne.n	8009d26 <_svfiprintf_r+0xe6>
 8009ce6:	6822      	ldr	r2, [r4, #0]
 8009ce8:	06d3      	lsls	r3, r2, #27
 8009cea:	d504      	bpl.n	8009cf6 <_svfiprintf_r+0xb6>
 8009cec:	2353      	movs	r3, #83	; 0x53
 8009cee:	a904      	add	r1, sp, #16
 8009cf0:	185b      	adds	r3, r3, r1
 8009cf2:	2120      	movs	r1, #32
 8009cf4:	7019      	strb	r1, [r3, #0]
 8009cf6:	0713      	lsls	r3, r2, #28
 8009cf8:	d504      	bpl.n	8009d04 <_svfiprintf_r+0xc4>
 8009cfa:	2353      	movs	r3, #83	; 0x53
 8009cfc:	a904      	add	r1, sp, #16
 8009cfe:	185b      	adds	r3, r3, r1
 8009d00:	212b      	movs	r1, #43	; 0x2b
 8009d02:	7019      	strb	r1, [r3, #0]
 8009d04:	7833      	ldrb	r3, [r6, #0]
 8009d06:	2b2a      	cmp	r3, #42	; 0x2a
 8009d08:	d016      	beq.n	8009d38 <_svfiprintf_r+0xf8>
 8009d0a:	0035      	movs	r5, r6
 8009d0c:	2100      	movs	r1, #0
 8009d0e:	200a      	movs	r0, #10
 8009d10:	68e3      	ldr	r3, [r4, #12]
 8009d12:	782a      	ldrb	r2, [r5, #0]
 8009d14:	1c6e      	adds	r6, r5, #1
 8009d16:	3a30      	subs	r2, #48	; 0x30
 8009d18:	2a09      	cmp	r2, #9
 8009d1a:	d94e      	bls.n	8009dba <_svfiprintf_r+0x17a>
 8009d1c:	2900      	cmp	r1, #0
 8009d1e:	d111      	bne.n	8009d44 <_svfiprintf_r+0x104>
 8009d20:	e017      	b.n	8009d52 <_svfiprintf_r+0x112>
 8009d22:	3501      	adds	r5, #1
 8009d24:	e7b0      	b.n	8009c88 <_svfiprintf_r+0x48>
 8009d26:	4b41      	ldr	r3, [pc, #260]	; (8009e2c <_svfiprintf_r+0x1ec>)
 8009d28:	6822      	ldr	r2, [r4, #0]
 8009d2a:	1ac0      	subs	r0, r0, r3
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	4083      	lsls	r3, r0
 8009d30:	4313      	orrs	r3, r2
 8009d32:	002e      	movs	r6, r5
 8009d34:	6023      	str	r3, [r4, #0]
 8009d36:	e7ce      	b.n	8009cd6 <_svfiprintf_r+0x96>
 8009d38:	9b07      	ldr	r3, [sp, #28]
 8009d3a:	1d19      	adds	r1, r3, #4
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	9107      	str	r1, [sp, #28]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	db01      	blt.n	8009d48 <_svfiprintf_r+0x108>
 8009d44:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d46:	e004      	b.n	8009d52 <_svfiprintf_r+0x112>
 8009d48:	425b      	negs	r3, r3
 8009d4a:	60e3      	str	r3, [r4, #12]
 8009d4c:	2302      	movs	r3, #2
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	6023      	str	r3, [r4, #0]
 8009d52:	782b      	ldrb	r3, [r5, #0]
 8009d54:	2b2e      	cmp	r3, #46	; 0x2e
 8009d56:	d10a      	bne.n	8009d6e <_svfiprintf_r+0x12e>
 8009d58:	786b      	ldrb	r3, [r5, #1]
 8009d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d5c:	d135      	bne.n	8009dca <_svfiprintf_r+0x18a>
 8009d5e:	9b07      	ldr	r3, [sp, #28]
 8009d60:	3502      	adds	r5, #2
 8009d62:	1d1a      	adds	r2, r3, #4
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	9207      	str	r2, [sp, #28]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	db2b      	blt.n	8009dc4 <_svfiprintf_r+0x184>
 8009d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d6e:	4e30      	ldr	r6, [pc, #192]	; (8009e30 <_svfiprintf_r+0x1f0>)
 8009d70:	2203      	movs	r2, #3
 8009d72:	0030      	movs	r0, r6
 8009d74:	7829      	ldrb	r1, [r5, #0]
 8009d76:	f000 f9e5 	bl	800a144 <memchr>
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	d006      	beq.n	8009d8c <_svfiprintf_r+0x14c>
 8009d7e:	2340      	movs	r3, #64	; 0x40
 8009d80:	1b80      	subs	r0, r0, r6
 8009d82:	4083      	lsls	r3, r0
 8009d84:	6822      	ldr	r2, [r4, #0]
 8009d86:	3501      	adds	r5, #1
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	6023      	str	r3, [r4, #0]
 8009d8c:	7829      	ldrb	r1, [r5, #0]
 8009d8e:	2206      	movs	r2, #6
 8009d90:	4828      	ldr	r0, [pc, #160]	; (8009e34 <_svfiprintf_r+0x1f4>)
 8009d92:	1c6e      	adds	r6, r5, #1
 8009d94:	7621      	strb	r1, [r4, #24]
 8009d96:	f000 f9d5 	bl	800a144 <memchr>
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	d03c      	beq.n	8009e18 <_svfiprintf_r+0x1d8>
 8009d9e:	4b26      	ldr	r3, [pc, #152]	; (8009e38 <_svfiprintf_r+0x1f8>)
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d125      	bne.n	8009df0 <_svfiprintf_r+0x1b0>
 8009da4:	2207      	movs	r2, #7
 8009da6:	9b07      	ldr	r3, [sp, #28]
 8009da8:	3307      	adds	r3, #7
 8009daa:	4393      	bics	r3, r2
 8009dac:	3308      	adds	r3, #8
 8009dae:	9307      	str	r3, [sp, #28]
 8009db0:	6963      	ldr	r3, [r4, #20]
 8009db2:	9a04      	ldr	r2, [sp, #16]
 8009db4:	189b      	adds	r3, r3, r2
 8009db6:	6163      	str	r3, [r4, #20]
 8009db8:	e765      	b.n	8009c86 <_svfiprintf_r+0x46>
 8009dba:	4343      	muls	r3, r0
 8009dbc:	0035      	movs	r5, r6
 8009dbe:	2101      	movs	r1, #1
 8009dc0:	189b      	adds	r3, r3, r2
 8009dc2:	e7a6      	b.n	8009d12 <_svfiprintf_r+0xd2>
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	425b      	negs	r3, r3
 8009dc8:	e7d0      	b.n	8009d6c <_svfiprintf_r+0x12c>
 8009dca:	2300      	movs	r3, #0
 8009dcc:	200a      	movs	r0, #10
 8009dce:	001a      	movs	r2, r3
 8009dd0:	3501      	adds	r5, #1
 8009dd2:	6063      	str	r3, [r4, #4]
 8009dd4:	7829      	ldrb	r1, [r5, #0]
 8009dd6:	1c6e      	adds	r6, r5, #1
 8009dd8:	3930      	subs	r1, #48	; 0x30
 8009dda:	2909      	cmp	r1, #9
 8009ddc:	d903      	bls.n	8009de6 <_svfiprintf_r+0x1a6>
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d0c5      	beq.n	8009d6e <_svfiprintf_r+0x12e>
 8009de2:	9209      	str	r2, [sp, #36]	; 0x24
 8009de4:	e7c3      	b.n	8009d6e <_svfiprintf_r+0x12e>
 8009de6:	4342      	muls	r2, r0
 8009de8:	0035      	movs	r5, r6
 8009dea:	2301      	movs	r3, #1
 8009dec:	1852      	adds	r2, r2, r1
 8009dee:	e7f1      	b.n	8009dd4 <_svfiprintf_r+0x194>
 8009df0:	ab07      	add	r3, sp, #28
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	003a      	movs	r2, r7
 8009df6:	0021      	movs	r1, r4
 8009df8:	4b10      	ldr	r3, [pc, #64]	; (8009e3c <_svfiprintf_r+0x1fc>)
 8009dfa:	9803      	ldr	r0, [sp, #12]
 8009dfc:	e000      	b.n	8009e00 <_svfiprintf_r+0x1c0>
 8009dfe:	bf00      	nop
 8009e00:	9004      	str	r0, [sp, #16]
 8009e02:	9b04      	ldr	r3, [sp, #16]
 8009e04:	3301      	adds	r3, #1
 8009e06:	d1d3      	bne.n	8009db0 <_svfiprintf_r+0x170>
 8009e08:	89bb      	ldrh	r3, [r7, #12]
 8009e0a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009e0c:	065b      	lsls	r3, r3, #25
 8009e0e:	d400      	bmi.n	8009e12 <_svfiprintf_r+0x1d2>
 8009e10:	e72d      	b.n	8009c6e <_svfiprintf_r+0x2e>
 8009e12:	2001      	movs	r0, #1
 8009e14:	4240      	negs	r0, r0
 8009e16:	e72a      	b.n	8009c6e <_svfiprintf_r+0x2e>
 8009e18:	ab07      	add	r3, sp, #28
 8009e1a:	9300      	str	r3, [sp, #0]
 8009e1c:	003a      	movs	r2, r7
 8009e1e:	0021      	movs	r1, r4
 8009e20:	4b06      	ldr	r3, [pc, #24]	; (8009e3c <_svfiprintf_r+0x1fc>)
 8009e22:	9803      	ldr	r0, [sp, #12]
 8009e24:	f000 f87c 	bl	8009f20 <_printf_i>
 8009e28:	e7ea      	b.n	8009e00 <_svfiprintf_r+0x1c0>
 8009e2a:	46c0      	nop			; (mov r8, r8)
 8009e2c:	0800accd 	.word	0x0800accd
 8009e30:	0800acd3 	.word	0x0800acd3
 8009e34:	0800acd7 	.word	0x0800acd7
 8009e38:	00000000 	.word	0x00000000
 8009e3c:	08009b7d 	.word	0x08009b7d

08009e40 <_printf_common>:
 8009e40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e42:	0015      	movs	r5, r2
 8009e44:	9301      	str	r3, [sp, #4]
 8009e46:	688a      	ldr	r2, [r1, #8]
 8009e48:	690b      	ldr	r3, [r1, #16]
 8009e4a:	000c      	movs	r4, r1
 8009e4c:	9000      	str	r0, [sp, #0]
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	da00      	bge.n	8009e54 <_printf_common+0x14>
 8009e52:	0013      	movs	r3, r2
 8009e54:	0022      	movs	r2, r4
 8009e56:	602b      	str	r3, [r5, #0]
 8009e58:	3243      	adds	r2, #67	; 0x43
 8009e5a:	7812      	ldrb	r2, [r2, #0]
 8009e5c:	2a00      	cmp	r2, #0
 8009e5e:	d001      	beq.n	8009e64 <_printf_common+0x24>
 8009e60:	3301      	adds	r3, #1
 8009e62:	602b      	str	r3, [r5, #0]
 8009e64:	6823      	ldr	r3, [r4, #0]
 8009e66:	069b      	lsls	r3, r3, #26
 8009e68:	d502      	bpl.n	8009e70 <_printf_common+0x30>
 8009e6a:	682b      	ldr	r3, [r5, #0]
 8009e6c:	3302      	adds	r3, #2
 8009e6e:	602b      	str	r3, [r5, #0]
 8009e70:	6822      	ldr	r2, [r4, #0]
 8009e72:	2306      	movs	r3, #6
 8009e74:	0017      	movs	r7, r2
 8009e76:	401f      	ands	r7, r3
 8009e78:	421a      	tst	r2, r3
 8009e7a:	d027      	beq.n	8009ecc <_printf_common+0x8c>
 8009e7c:	0023      	movs	r3, r4
 8009e7e:	3343      	adds	r3, #67	; 0x43
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	1e5a      	subs	r2, r3, #1
 8009e84:	4193      	sbcs	r3, r2
 8009e86:	6822      	ldr	r2, [r4, #0]
 8009e88:	0692      	lsls	r2, r2, #26
 8009e8a:	d430      	bmi.n	8009eee <_printf_common+0xae>
 8009e8c:	0022      	movs	r2, r4
 8009e8e:	9901      	ldr	r1, [sp, #4]
 8009e90:	9800      	ldr	r0, [sp, #0]
 8009e92:	9e08      	ldr	r6, [sp, #32]
 8009e94:	3243      	adds	r2, #67	; 0x43
 8009e96:	47b0      	blx	r6
 8009e98:	1c43      	adds	r3, r0, #1
 8009e9a:	d025      	beq.n	8009ee8 <_printf_common+0xa8>
 8009e9c:	2306      	movs	r3, #6
 8009e9e:	6820      	ldr	r0, [r4, #0]
 8009ea0:	682a      	ldr	r2, [r5, #0]
 8009ea2:	68e1      	ldr	r1, [r4, #12]
 8009ea4:	2500      	movs	r5, #0
 8009ea6:	4003      	ands	r3, r0
 8009ea8:	2b04      	cmp	r3, #4
 8009eaa:	d103      	bne.n	8009eb4 <_printf_common+0x74>
 8009eac:	1a8d      	subs	r5, r1, r2
 8009eae:	43eb      	mvns	r3, r5
 8009eb0:	17db      	asrs	r3, r3, #31
 8009eb2:	401d      	ands	r5, r3
 8009eb4:	68a3      	ldr	r3, [r4, #8]
 8009eb6:	6922      	ldr	r2, [r4, #16]
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	dd01      	ble.n	8009ec0 <_printf_common+0x80>
 8009ebc:	1a9b      	subs	r3, r3, r2
 8009ebe:	18ed      	adds	r5, r5, r3
 8009ec0:	2700      	movs	r7, #0
 8009ec2:	42bd      	cmp	r5, r7
 8009ec4:	d120      	bne.n	8009f08 <_printf_common+0xc8>
 8009ec6:	2000      	movs	r0, #0
 8009ec8:	e010      	b.n	8009eec <_printf_common+0xac>
 8009eca:	3701      	adds	r7, #1
 8009ecc:	68e3      	ldr	r3, [r4, #12]
 8009ece:	682a      	ldr	r2, [r5, #0]
 8009ed0:	1a9b      	subs	r3, r3, r2
 8009ed2:	42bb      	cmp	r3, r7
 8009ed4:	ddd2      	ble.n	8009e7c <_printf_common+0x3c>
 8009ed6:	0022      	movs	r2, r4
 8009ed8:	2301      	movs	r3, #1
 8009eda:	9901      	ldr	r1, [sp, #4]
 8009edc:	9800      	ldr	r0, [sp, #0]
 8009ede:	9e08      	ldr	r6, [sp, #32]
 8009ee0:	3219      	adds	r2, #25
 8009ee2:	47b0      	blx	r6
 8009ee4:	1c43      	adds	r3, r0, #1
 8009ee6:	d1f0      	bne.n	8009eca <_printf_common+0x8a>
 8009ee8:	2001      	movs	r0, #1
 8009eea:	4240      	negs	r0, r0
 8009eec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009eee:	2030      	movs	r0, #48	; 0x30
 8009ef0:	18e1      	adds	r1, r4, r3
 8009ef2:	3143      	adds	r1, #67	; 0x43
 8009ef4:	7008      	strb	r0, [r1, #0]
 8009ef6:	0021      	movs	r1, r4
 8009ef8:	1c5a      	adds	r2, r3, #1
 8009efa:	3145      	adds	r1, #69	; 0x45
 8009efc:	7809      	ldrb	r1, [r1, #0]
 8009efe:	18a2      	adds	r2, r4, r2
 8009f00:	3243      	adds	r2, #67	; 0x43
 8009f02:	3302      	adds	r3, #2
 8009f04:	7011      	strb	r1, [r2, #0]
 8009f06:	e7c1      	b.n	8009e8c <_printf_common+0x4c>
 8009f08:	0022      	movs	r2, r4
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	9901      	ldr	r1, [sp, #4]
 8009f0e:	9800      	ldr	r0, [sp, #0]
 8009f10:	9e08      	ldr	r6, [sp, #32]
 8009f12:	321a      	adds	r2, #26
 8009f14:	47b0      	blx	r6
 8009f16:	1c43      	adds	r3, r0, #1
 8009f18:	d0e6      	beq.n	8009ee8 <_printf_common+0xa8>
 8009f1a:	3701      	adds	r7, #1
 8009f1c:	e7d1      	b.n	8009ec2 <_printf_common+0x82>
	...

08009f20 <_printf_i>:
 8009f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f22:	b08b      	sub	sp, #44	; 0x2c
 8009f24:	9206      	str	r2, [sp, #24]
 8009f26:	000a      	movs	r2, r1
 8009f28:	3243      	adds	r2, #67	; 0x43
 8009f2a:	9307      	str	r3, [sp, #28]
 8009f2c:	9005      	str	r0, [sp, #20]
 8009f2e:	9204      	str	r2, [sp, #16]
 8009f30:	7e0a      	ldrb	r2, [r1, #24]
 8009f32:	000c      	movs	r4, r1
 8009f34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f36:	2a78      	cmp	r2, #120	; 0x78
 8009f38:	d806      	bhi.n	8009f48 <_printf_i+0x28>
 8009f3a:	2a62      	cmp	r2, #98	; 0x62
 8009f3c:	d808      	bhi.n	8009f50 <_printf_i+0x30>
 8009f3e:	2a00      	cmp	r2, #0
 8009f40:	d100      	bne.n	8009f44 <_printf_i+0x24>
 8009f42:	e0c0      	b.n	800a0c6 <_printf_i+0x1a6>
 8009f44:	2a58      	cmp	r2, #88	; 0x58
 8009f46:	d052      	beq.n	8009fee <_printf_i+0xce>
 8009f48:	0026      	movs	r6, r4
 8009f4a:	3642      	adds	r6, #66	; 0x42
 8009f4c:	7032      	strb	r2, [r6, #0]
 8009f4e:	e022      	b.n	8009f96 <_printf_i+0x76>
 8009f50:	0010      	movs	r0, r2
 8009f52:	3863      	subs	r0, #99	; 0x63
 8009f54:	2815      	cmp	r0, #21
 8009f56:	d8f7      	bhi.n	8009f48 <_printf_i+0x28>
 8009f58:	f7f6 f8de 	bl	8000118 <__gnu_thumb1_case_shi>
 8009f5c:	001f0016 	.word	0x001f0016
 8009f60:	fff6fff6 	.word	0xfff6fff6
 8009f64:	fff6fff6 	.word	0xfff6fff6
 8009f68:	fff6001f 	.word	0xfff6001f
 8009f6c:	fff6fff6 	.word	0xfff6fff6
 8009f70:	00a8fff6 	.word	0x00a8fff6
 8009f74:	009a0036 	.word	0x009a0036
 8009f78:	fff6fff6 	.word	0xfff6fff6
 8009f7c:	fff600b9 	.word	0xfff600b9
 8009f80:	fff60036 	.word	0xfff60036
 8009f84:	009efff6 	.word	0x009efff6
 8009f88:	0026      	movs	r6, r4
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	3642      	adds	r6, #66	; 0x42
 8009f8e:	1d11      	adds	r1, r2, #4
 8009f90:	6019      	str	r1, [r3, #0]
 8009f92:	6813      	ldr	r3, [r2, #0]
 8009f94:	7033      	strb	r3, [r6, #0]
 8009f96:	2301      	movs	r3, #1
 8009f98:	e0a7      	b.n	800a0ea <_printf_i+0x1ca>
 8009f9a:	6808      	ldr	r0, [r1, #0]
 8009f9c:	6819      	ldr	r1, [r3, #0]
 8009f9e:	1d0a      	adds	r2, r1, #4
 8009fa0:	0605      	lsls	r5, r0, #24
 8009fa2:	d50b      	bpl.n	8009fbc <_printf_i+0x9c>
 8009fa4:	680d      	ldr	r5, [r1, #0]
 8009fa6:	601a      	str	r2, [r3, #0]
 8009fa8:	2d00      	cmp	r5, #0
 8009faa:	da03      	bge.n	8009fb4 <_printf_i+0x94>
 8009fac:	232d      	movs	r3, #45	; 0x2d
 8009fae:	9a04      	ldr	r2, [sp, #16]
 8009fb0:	426d      	negs	r5, r5
 8009fb2:	7013      	strb	r3, [r2, #0]
 8009fb4:	4b61      	ldr	r3, [pc, #388]	; (800a13c <_printf_i+0x21c>)
 8009fb6:	270a      	movs	r7, #10
 8009fb8:	9303      	str	r3, [sp, #12]
 8009fba:	e032      	b.n	800a022 <_printf_i+0x102>
 8009fbc:	680d      	ldr	r5, [r1, #0]
 8009fbe:	601a      	str	r2, [r3, #0]
 8009fc0:	0641      	lsls	r1, r0, #25
 8009fc2:	d5f1      	bpl.n	8009fa8 <_printf_i+0x88>
 8009fc4:	b22d      	sxth	r5, r5
 8009fc6:	e7ef      	b.n	8009fa8 <_printf_i+0x88>
 8009fc8:	680d      	ldr	r5, [r1, #0]
 8009fca:	6819      	ldr	r1, [r3, #0]
 8009fcc:	1d08      	adds	r0, r1, #4
 8009fce:	6018      	str	r0, [r3, #0]
 8009fd0:	062e      	lsls	r6, r5, #24
 8009fd2:	d501      	bpl.n	8009fd8 <_printf_i+0xb8>
 8009fd4:	680d      	ldr	r5, [r1, #0]
 8009fd6:	e003      	b.n	8009fe0 <_printf_i+0xc0>
 8009fd8:	066d      	lsls	r5, r5, #25
 8009fda:	d5fb      	bpl.n	8009fd4 <_printf_i+0xb4>
 8009fdc:	680d      	ldr	r5, [r1, #0]
 8009fde:	b2ad      	uxth	r5, r5
 8009fe0:	4b56      	ldr	r3, [pc, #344]	; (800a13c <_printf_i+0x21c>)
 8009fe2:	270a      	movs	r7, #10
 8009fe4:	9303      	str	r3, [sp, #12]
 8009fe6:	2a6f      	cmp	r2, #111	; 0x6f
 8009fe8:	d117      	bne.n	800a01a <_printf_i+0xfa>
 8009fea:	2708      	movs	r7, #8
 8009fec:	e015      	b.n	800a01a <_printf_i+0xfa>
 8009fee:	3145      	adds	r1, #69	; 0x45
 8009ff0:	700a      	strb	r2, [r1, #0]
 8009ff2:	4a52      	ldr	r2, [pc, #328]	; (800a13c <_printf_i+0x21c>)
 8009ff4:	9203      	str	r2, [sp, #12]
 8009ff6:	681a      	ldr	r2, [r3, #0]
 8009ff8:	6821      	ldr	r1, [r4, #0]
 8009ffa:	ca20      	ldmia	r2!, {r5}
 8009ffc:	601a      	str	r2, [r3, #0]
 8009ffe:	0608      	lsls	r0, r1, #24
 800a000:	d550      	bpl.n	800a0a4 <_printf_i+0x184>
 800a002:	07cb      	lsls	r3, r1, #31
 800a004:	d502      	bpl.n	800a00c <_printf_i+0xec>
 800a006:	2320      	movs	r3, #32
 800a008:	4319      	orrs	r1, r3
 800a00a:	6021      	str	r1, [r4, #0]
 800a00c:	2710      	movs	r7, #16
 800a00e:	2d00      	cmp	r5, #0
 800a010:	d103      	bne.n	800a01a <_printf_i+0xfa>
 800a012:	2320      	movs	r3, #32
 800a014:	6822      	ldr	r2, [r4, #0]
 800a016:	439a      	bics	r2, r3
 800a018:	6022      	str	r2, [r4, #0]
 800a01a:	0023      	movs	r3, r4
 800a01c:	2200      	movs	r2, #0
 800a01e:	3343      	adds	r3, #67	; 0x43
 800a020:	701a      	strb	r2, [r3, #0]
 800a022:	6863      	ldr	r3, [r4, #4]
 800a024:	60a3      	str	r3, [r4, #8]
 800a026:	2b00      	cmp	r3, #0
 800a028:	db03      	blt.n	800a032 <_printf_i+0x112>
 800a02a:	2204      	movs	r2, #4
 800a02c:	6821      	ldr	r1, [r4, #0]
 800a02e:	4391      	bics	r1, r2
 800a030:	6021      	str	r1, [r4, #0]
 800a032:	2d00      	cmp	r5, #0
 800a034:	d102      	bne.n	800a03c <_printf_i+0x11c>
 800a036:	9e04      	ldr	r6, [sp, #16]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d00c      	beq.n	800a056 <_printf_i+0x136>
 800a03c:	9e04      	ldr	r6, [sp, #16]
 800a03e:	0028      	movs	r0, r5
 800a040:	0039      	movs	r1, r7
 800a042:	f7f6 f8f9 	bl	8000238 <__aeabi_uidivmod>
 800a046:	9b03      	ldr	r3, [sp, #12]
 800a048:	3e01      	subs	r6, #1
 800a04a:	5c5b      	ldrb	r3, [r3, r1]
 800a04c:	7033      	strb	r3, [r6, #0]
 800a04e:	002b      	movs	r3, r5
 800a050:	0005      	movs	r5, r0
 800a052:	429f      	cmp	r7, r3
 800a054:	d9f3      	bls.n	800a03e <_printf_i+0x11e>
 800a056:	2f08      	cmp	r7, #8
 800a058:	d109      	bne.n	800a06e <_printf_i+0x14e>
 800a05a:	6823      	ldr	r3, [r4, #0]
 800a05c:	07db      	lsls	r3, r3, #31
 800a05e:	d506      	bpl.n	800a06e <_printf_i+0x14e>
 800a060:	6863      	ldr	r3, [r4, #4]
 800a062:	6922      	ldr	r2, [r4, #16]
 800a064:	4293      	cmp	r3, r2
 800a066:	dc02      	bgt.n	800a06e <_printf_i+0x14e>
 800a068:	2330      	movs	r3, #48	; 0x30
 800a06a:	3e01      	subs	r6, #1
 800a06c:	7033      	strb	r3, [r6, #0]
 800a06e:	9b04      	ldr	r3, [sp, #16]
 800a070:	1b9b      	subs	r3, r3, r6
 800a072:	6123      	str	r3, [r4, #16]
 800a074:	9b07      	ldr	r3, [sp, #28]
 800a076:	0021      	movs	r1, r4
 800a078:	9300      	str	r3, [sp, #0]
 800a07a:	9805      	ldr	r0, [sp, #20]
 800a07c:	9b06      	ldr	r3, [sp, #24]
 800a07e:	aa09      	add	r2, sp, #36	; 0x24
 800a080:	f7ff fede 	bl	8009e40 <_printf_common>
 800a084:	1c43      	adds	r3, r0, #1
 800a086:	d135      	bne.n	800a0f4 <_printf_i+0x1d4>
 800a088:	2001      	movs	r0, #1
 800a08a:	4240      	negs	r0, r0
 800a08c:	b00b      	add	sp, #44	; 0x2c
 800a08e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a090:	2220      	movs	r2, #32
 800a092:	6809      	ldr	r1, [r1, #0]
 800a094:	430a      	orrs	r2, r1
 800a096:	6022      	str	r2, [r4, #0]
 800a098:	0022      	movs	r2, r4
 800a09a:	2178      	movs	r1, #120	; 0x78
 800a09c:	3245      	adds	r2, #69	; 0x45
 800a09e:	7011      	strb	r1, [r2, #0]
 800a0a0:	4a27      	ldr	r2, [pc, #156]	; (800a140 <_printf_i+0x220>)
 800a0a2:	e7a7      	b.n	8009ff4 <_printf_i+0xd4>
 800a0a4:	0648      	lsls	r0, r1, #25
 800a0a6:	d5ac      	bpl.n	800a002 <_printf_i+0xe2>
 800a0a8:	b2ad      	uxth	r5, r5
 800a0aa:	e7aa      	b.n	800a002 <_printf_i+0xe2>
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	680d      	ldr	r5, [r1, #0]
 800a0b0:	1d10      	adds	r0, r2, #4
 800a0b2:	6949      	ldr	r1, [r1, #20]
 800a0b4:	6018      	str	r0, [r3, #0]
 800a0b6:	6813      	ldr	r3, [r2, #0]
 800a0b8:	062e      	lsls	r6, r5, #24
 800a0ba:	d501      	bpl.n	800a0c0 <_printf_i+0x1a0>
 800a0bc:	6019      	str	r1, [r3, #0]
 800a0be:	e002      	b.n	800a0c6 <_printf_i+0x1a6>
 800a0c0:	066d      	lsls	r5, r5, #25
 800a0c2:	d5fb      	bpl.n	800a0bc <_printf_i+0x19c>
 800a0c4:	8019      	strh	r1, [r3, #0]
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	9e04      	ldr	r6, [sp, #16]
 800a0ca:	6123      	str	r3, [r4, #16]
 800a0cc:	e7d2      	b.n	800a074 <_printf_i+0x154>
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	1d11      	adds	r1, r2, #4
 800a0d2:	6019      	str	r1, [r3, #0]
 800a0d4:	6816      	ldr	r6, [r2, #0]
 800a0d6:	2100      	movs	r1, #0
 800a0d8:	0030      	movs	r0, r6
 800a0da:	6862      	ldr	r2, [r4, #4]
 800a0dc:	f000 f832 	bl	800a144 <memchr>
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	d001      	beq.n	800a0e8 <_printf_i+0x1c8>
 800a0e4:	1b80      	subs	r0, r0, r6
 800a0e6:	6060      	str	r0, [r4, #4]
 800a0e8:	6863      	ldr	r3, [r4, #4]
 800a0ea:	6123      	str	r3, [r4, #16]
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	9a04      	ldr	r2, [sp, #16]
 800a0f0:	7013      	strb	r3, [r2, #0]
 800a0f2:	e7bf      	b.n	800a074 <_printf_i+0x154>
 800a0f4:	6923      	ldr	r3, [r4, #16]
 800a0f6:	0032      	movs	r2, r6
 800a0f8:	9906      	ldr	r1, [sp, #24]
 800a0fa:	9805      	ldr	r0, [sp, #20]
 800a0fc:	9d07      	ldr	r5, [sp, #28]
 800a0fe:	47a8      	blx	r5
 800a100:	1c43      	adds	r3, r0, #1
 800a102:	d0c1      	beq.n	800a088 <_printf_i+0x168>
 800a104:	6823      	ldr	r3, [r4, #0]
 800a106:	079b      	lsls	r3, r3, #30
 800a108:	d415      	bmi.n	800a136 <_printf_i+0x216>
 800a10a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a10c:	68e0      	ldr	r0, [r4, #12]
 800a10e:	4298      	cmp	r0, r3
 800a110:	dabc      	bge.n	800a08c <_printf_i+0x16c>
 800a112:	0018      	movs	r0, r3
 800a114:	e7ba      	b.n	800a08c <_printf_i+0x16c>
 800a116:	0022      	movs	r2, r4
 800a118:	2301      	movs	r3, #1
 800a11a:	9906      	ldr	r1, [sp, #24]
 800a11c:	9805      	ldr	r0, [sp, #20]
 800a11e:	9e07      	ldr	r6, [sp, #28]
 800a120:	3219      	adds	r2, #25
 800a122:	47b0      	blx	r6
 800a124:	1c43      	adds	r3, r0, #1
 800a126:	d0af      	beq.n	800a088 <_printf_i+0x168>
 800a128:	3501      	adds	r5, #1
 800a12a:	68e3      	ldr	r3, [r4, #12]
 800a12c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a12e:	1a9b      	subs	r3, r3, r2
 800a130:	42ab      	cmp	r3, r5
 800a132:	dcf0      	bgt.n	800a116 <_printf_i+0x1f6>
 800a134:	e7e9      	b.n	800a10a <_printf_i+0x1ea>
 800a136:	2500      	movs	r5, #0
 800a138:	e7f7      	b.n	800a12a <_printf_i+0x20a>
 800a13a:	46c0      	nop			; (mov r8, r8)
 800a13c:	0800acde 	.word	0x0800acde
 800a140:	0800acef 	.word	0x0800acef

0800a144 <memchr>:
 800a144:	b2c9      	uxtb	r1, r1
 800a146:	1882      	adds	r2, r0, r2
 800a148:	4290      	cmp	r0, r2
 800a14a:	d101      	bne.n	800a150 <memchr+0xc>
 800a14c:	2000      	movs	r0, #0
 800a14e:	4770      	bx	lr
 800a150:	7803      	ldrb	r3, [r0, #0]
 800a152:	428b      	cmp	r3, r1
 800a154:	d0fb      	beq.n	800a14e <memchr+0xa>
 800a156:	3001      	adds	r0, #1
 800a158:	e7f6      	b.n	800a148 <memchr+0x4>

0800a15a <memmove>:
 800a15a:	b510      	push	{r4, lr}
 800a15c:	4288      	cmp	r0, r1
 800a15e:	d902      	bls.n	800a166 <memmove+0xc>
 800a160:	188b      	adds	r3, r1, r2
 800a162:	4298      	cmp	r0, r3
 800a164:	d303      	bcc.n	800a16e <memmove+0x14>
 800a166:	2300      	movs	r3, #0
 800a168:	e007      	b.n	800a17a <memmove+0x20>
 800a16a:	5c8b      	ldrb	r3, [r1, r2]
 800a16c:	5483      	strb	r3, [r0, r2]
 800a16e:	3a01      	subs	r2, #1
 800a170:	d2fb      	bcs.n	800a16a <memmove+0x10>
 800a172:	bd10      	pop	{r4, pc}
 800a174:	5ccc      	ldrb	r4, [r1, r3]
 800a176:	54c4      	strb	r4, [r0, r3]
 800a178:	3301      	adds	r3, #1
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d1fa      	bne.n	800a174 <memmove+0x1a>
 800a17e:	e7f8      	b.n	800a172 <memmove+0x18>

0800a180 <_free_r>:
 800a180:	b570      	push	{r4, r5, r6, lr}
 800a182:	0005      	movs	r5, r0
 800a184:	2900      	cmp	r1, #0
 800a186:	d010      	beq.n	800a1aa <_free_r+0x2a>
 800a188:	1f0c      	subs	r4, r1, #4
 800a18a:	6823      	ldr	r3, [r4, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	da00      	bge.n	800a192 <_free_r+0x12>
 800a190:	18e4      	adds	r4, r4, r3
 800a192:	0028      	movs	r0, r5
 800a194:	f000 f8d4 	bl	800a340 <__malloc_lock>
 800a198:	4a1d      	ldr	r2, [pc, #116]	; (800a210 <_free_r+0x90>)
 800a19a:	6813      	ldr	r3, [r2, #0]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d105      	bne.n	800a1ac <_free_r+0x2c>
 800a1a0:	6063      	str	r3, [r4, #4]
 800a1a2:	6014      	str	r4, [r2, #0]
 800a1a4:	0028      	movs	r0, r5
 800a1a6:	f000 f8d3 	bl	800a350 <__malloc_unlock>
 800a1aa:	bd70      	pop	{r4, r5, r6, pc}
 800a1ac:	42a3      	cmp	r3, r4
 800a1ae:	d908      	bls.n	800a1c2 <_free_r+0x42>
 800a1b0:	6821      	ldr	r1, [r4, #0]
 800a1b2:	1860      	adds	r0, r4, r1
 800a1b4:	4283      	cmp	r3, r0
 800a1b6:	d1f3      	bne.n	800a1a0 <_free_r+0x20>
 800a1b8:	6818      	ldr	r0, [r3, #0]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	1841      	adds	r1, r0, r1
 800a1be:	6021      	str	r1, [r4, #0]
 800a1c0:	e7ee      	b.n	800a1a0 <_free_r+0x20>
 800a1c2:	001a      	movs	r2, r3
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d001      	beq.n	800a1ce <_free_r+0x4e>
 800a1ca:	42a3      	cmp	r3, r4
 800a1cc:	d9f9      	bls.n	800a1c2 <_free_r+0x42>
 800a1ce:	6811      	ldr	r1, [r2, #0]
 800a1d0:	1850      	adds	r0, r2, r1
 800a1d2:	42a0      	cmp	r0, r4
 800a1d4:	d10b      	bne.n	800a1ee <_free_r+0x6e>
 800a1d6:	6820      	ldr	r0, [r4, #0]
 800a1d8:	1809      	adds	r1, r1, r0
 800a1da:	1850      	adds	r0, r2, r1
 800a1dc:	6011      	str	r1, [r2, #0]
 800a1de:	4283      	cmp	r3, r0
 800a1e0:	d1e0      	bne.n	800a1a4 <_free_r+0x24>
 800a1e2:	6818      	ldr	r0, [r3, #0]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	1841      	adds	r1, r0, r1
 800a1e8:	6011      	str	r1, [r2, #0]
 800a1ea:	6053      	str	r3, [r2, #4]
 800a1ec:	e7da      	b.n	800a1a4 <_free_r+0x24>
 800a1ee:	42a0      	cmp	r0, r4
 800a1f0:	d902      	bls.n	800a1f8 <_free_r+0x78>
 800a1f2:	230c      	movs	r3, #12
 800a1f4:	602b      	str	r3, [r5, #0]
 800a1f6:	e7d5      	b.n	800a1a4 <_free_r+0x24>
 800a1f8:	6821      	ldr	r1, [r4, #0]
 800a1fa:	1860      	adds	r0, r4, r1
 800a1fc:	4283      	cmp	r3, r0
 800a1fe:	d103      	bne.n	800a208 <_free_r+0x88>
 800a200:	6818      	ldr	r0, [r3, #0]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	1841      	adds	r1, r0, r1
 800a206:	6021      	str	r1, [r4, #0]
 800a208:	6063      	str	r3, [r4, #4]
 800a20a:	6054      	str	r4, [r2, #4]
 800a20c:	e7ca      	b.n	800a1a4 <_free_r+0x24>
 800a20e:	46c0      	nop			; (mov r8, r8)
 800a210:	20000678 	.word	0x20000678

0800a214 <_malloc_r>:
 800a214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a216:	2303      	movs	r3, #3
 800a218:	1ccd      	adds	r5, r1, #3
 800a21a:	439d      	bics	r5, r3
 800a21c:	3508      	adds	r5, #8
 800a21e:	0006      	movs	r6, r0
 800a220:	2d0c      	cmp	r5, #12
 800a222:	d21f      	bcs.n	800a264 <_malloc_r+0x50>
 800a224:	250c      	movs	r5, #12
 800a226:	42a9      	cmp	r1, r5
 800a228:	d81e      	bhi.n	800a268 <_malloc_r+0x54>
 800a22a:	0030      	movs	r0, r6
 800a22c:	f000 f888 	bl	800a340 <__malloc_lock>
 800a230:	4925      	ldr	r1, [pc, #148]	; (800a2c8 <_malloc_r+0xb4>)
 800a232:	680a      	ldr	r2, [r1, #0]
 800a234:	0014      	movs	r4, r2
 800a236:	2c00      	cmp	r4, #0
 800a238:	d11a      	bne.n	800a270 <_malloc_r+0x5c>
 800a23a:	4f24      	ldr	r7, [pc, #144]	; (800a2cc <_malloc_r+0xb8>)
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d104      	bne.n	800a24c <_malloc_r+0x38>
 800a242:	0021      	movs	r1, r4
 800a244:	0030      	movs	r0, r6
 800a246:	f000 f869 	bl	800a31c <_sbrk_r>
 800a24a:	6038      	str	r0, [r7, #0]
 800a24c:	0029      	movs	r1, r5
 800a24e:	0030      	movs	r0, r6
 800a250:	f000 f864 	bl	800a31c <_sbrk_r>
 800a254:	1c43      	adds	r3, r0, #1
 800a256:	d12b      	bne.n	800a2b0 <_malloc_r+0x9c>
 800a258:	230c      	movs	r3, #12
 800a25a:	0030      	movs	r0, r6
 800a25c:	6033      	str	r3, [r6, #0]
 800a25e:	f000 f877 	bl	800a350 <__malloc_unlock>
 800a262:	e003      	b.n	800a26c <_malloc_r+0x58>
 800a264:	2d00      	cmp	r5, #0
 800a266:	dade      	bge.n	800a226 <_malloc_r+0x12>
 800a268:	230c      	movs	r3, #12
 800a26a:	6033      	str	r3, [r6, #0]
 800a26c:	2000      	movs	r0, #0
 800a26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a270:	6823      	ldr	r3, [r4, #0]
 800a272:	1b5b      	subs	r3, r3, r5
 800a274:	d419      	bmi.n	800a2aa <_malloc_r+0x96>
 800a276:	2b0b      	cmp	r3, #11
 800a278:	d903      	bls.n	800a282 <_malloc_r+0x6e>
 800a27a:	6023      	str	r3, [r4, #0]
 800a27c:	18e4      	adds	r4, r4, r3
 800a27e:	6025      	str	r5, [r4, #0]
 800a280:	e003      	b.n	800a28a <_malloc_r+0x76>
 800a282:	6863      	ldr	r3, [r4, #4]
 800a284:	42a2      	cmp	r2, r4
 800a286:	d10e      	bne.n	800a2a6 <_malloc_r+0x92>
 800a288:	600b      	str	r3, [r1, #0]
 800a28a:	0030      	movs	r0, r6
 800a28c:	f000 f860 	bl	800a350 <__malloc_unlock>
 800a290:	0020      	movs	r0, r4
 800a292:	2207      	movs	r2, #7
 800a294:	300b      	adds	r0, #11
 800a296:	1d23      	adds	r3, r4, #4
 800a298:	4390      	bics	r0, r2
 800a29a:	1ac2      	subs	r2, r0, r3
 800a29c:	4298      	cmp	r0, r3
 800a29e:	d0e6      	beq.n	800a26e <_malloc_r+0x5a>
 800a2a0:	1a1b      	subs	r3, r3, r0
 800a2a2:	50a3      	str	r3, [r4, r2]
 800a2a4:	e7e3      	b.n	800a26e <_malloc_r+0x5a>
 800a2a6:	6053      	str	r3, [r2, #4]
 800a2a8:	e7ef      	b.n	800a28a <_malloc_r+0x76>
 800a2aa:	0022      	movs	r2, r4
 800a2ac:	6864      	ldr	r4, [r4, #4]
 800a2ae:	e7c2      	b.n	800a236 <_malloc_r+0x22>
 800a2b0:	2303      	movs	r3, #3
 800a2b2:	1cc4      	adds	r4, r0, #3
 800a2b4:	439c      	bics	r4, r3
 800a2b6:	42a0      	cmp	r0, r4
 800a2b8:	d0e1      	beq.n	800a27e <_malloc_r+0x6a>
 800a2ba:	1a21      	subs	r1, r4, r0
 800a2bc:	0030      	movs	r0, r6
 800a2be:	f000 f82d 	bl	800a31c <_sbrk_r>
 800a2c2:	1c43      	adds	r3, r0, #1
 800a2c4:	d1db      	bne.n	800a27e <_malloc_r+0x6a>
 800a2c6:	e7c7      	b.n	800a258 <_malloc_r+0x44>
 800a2c8:	20000678 	.word	0x20000678
 800a2cc:	2000067c 	.word	0x2000067c

0800a2d0 <_realloc_r>:
 800a2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2d2:	0007      	movs	r7, r0
 800a2d4:	000d      	movs	r5, r1
 800a2d6:	0016      	movs	r6, r2
 800a2d8:	2900      	cmp	r1, #0
 800a2da:	d105      	bne.n	800a2e8 <_realloc_r+0x18>
 800a2dc:	0011      	movs	r1, r2
 800a2de:	f7ff ff99 	bl	800a214 <_malloc_r>
 800a2e2:	0004      	movs	r4, r0
 800a2e4:	0020      	movs	r0, r4
 800a2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2e8:	2a00      	cmp	r2, #0
 800a2ea:	d103      	bne.n	800a2f4 <_realloc_r+0x24>
 800a2ec:	f7ff ff48 	bl	800a180 <_free_r>
 800a2f0:	0034      	movs	r4, r6
 800a2f2:	e7f7      	b.n	800a2e4 <_realloc_r+0x14>
 800a2f4:	f000 f834 	bl	800a360 <_malloc_usable_size_r>
 800a2f8:	002c      	movs	r4, r5
 800a2fa:	42b0      	cmp	r0, r6
 800a2fc:	d2f2      	bcs.n	800a2e4 <_realloc_r+0x14>
 800a2fe:	0031      	movs	r1, r6
 800a300:	0038      	movs	r0, r7
 800a302:	f7ff ff87 	bl	800a214 <_malloc_r>
 800a306:	1e04      	subs	r4, r0, #0
 800a308:	d0ec      	beq.n	800a2e4 <_realloc_r+0x14>
 800a30a:	0029      	movs	r1, r5
 800a30c:	0032      	movs	r2, r6
 800a30e:	f7ff fb4d 	bl	80099ac <memcpy>
 800a312:	0029      	movs	r1, r5
 800a314:	0038      	movs	r0, r7
 800a316:	f7ff ff33 	bl	800a180 <_free_r>
 800a31a:	e7e3      	b.n	800a2e4 <_realloc_r+0x14>

0800a31c <_sbrk_r>:
 800a31c:	2300      	movs	r3, #0
 800a31e:	b570      	push	{r4, r5, r6, lr}
 800a320:	4d06      	ldr	r5, [pc, #24]	; (800a33c <_sbrk_r+0x20>)
 800a322:	0004      	movs	r4, r0
 800a324:	0008      	movs	r0, r1
 800a326:	602b      	str	r3, [r5, #0]
 800a328:	f7f9 ff4c 	bl	80041c4 <_sbrk>
 800a32c:	1c43      	adds	r3, r0, #1
 800a32e:	d103      	bne.n	800a338 <_sbrk_r+0x1c>
 800a330:	682b      	ldr	r3, [r5, #0]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d000      	beq.n	800a338 <_sbrk_r+0x1c>
 800a336:	6023      	str	r3, [r4, #0]
 800a338:	bd70      	pop	{r4, r5, r6, pc}
 800a33a:	46c0      	nop			; (mov r8, r8)
 800a33c:	20000684 	.word	0x20000684

0800a340 <__malloc_lock>:
 800a340:	b510      	push	{r4, lr}
 800a342:	4802      	ldr	r0, [pc, #8]	; (800a34c <__malloc_lock+0xc>)
 800a344:	f000 f814 	bl	800a370 <__retarget_lock_acquire_recursive>
 800a348:	bd10      	pop	{r4, pc}
 800a34a:	46c0      	nop			; (mov r8, r8)
 800a34c:	2000068c 	.word	0x2000068c

0800a350 <__malloc_unlock>:
 800a350:	b510      	push	{r4, lr}
 800a352:	4802      	ldr	r0, [pc, #8]	; (800a35c <__malloc_unlock+0xc>)
 800a354:	f000 f80d 	bl	800a372 <__retarget_lock_release_recursive>
 800a358:	bd10      	pop	{r4, pc}
 800a35a:	46c0      	nop			; (mov r8, r8)
 800a35c:	2000068c 	.word	0x2000068c

0800a360 <_malloc_usable_size_r>:
 800a360:	1f0b      	subs	r3, r1, #4
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	1f18      	subs	r0, r3, #4
 800a366:	2b00      	cmp	r3, #0
 800a368:	da01      	bge.n	800a36e <_malloc_usable_size_r+0xe>
 800a36a:	580b      	ldr	r3, [r1, r0]
 800a36c:	18c0      	adds	r0, r0, r3
 800a36e:	4770      	bx	lr

0800a370 <__retarget_lock_acquire_recursive>:
 800a370:	4770      	bx	lr

0800a372 <__retarget_lock_release_recursive>:
 800a372:	4770      	bx	lr

0800a374 <_init>:
 800a374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a376:	46c0      	nop			; (mov r8, r8)
 800a378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a37a:	bc08      	pop	{r3}
 800a37c:	469e      	mov	lr, r3
 800a37e:	4770      	bx	lr

0800a380 <_fini>:
 800a380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a382:	46c0      	nop			; (mov r8, r8)
 800a384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a386:	bc08      	pop	{r3}
 800a388:	469e      	mov	lr, r3
 800a38a:	4770      	bx	lr
