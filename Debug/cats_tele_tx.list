
cats_tele_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000994c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000090c  08009a08  08009a08  00019a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a314  0800a314  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800a314  0800a314  0001a314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a31c  0800a31c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800a31c  0800a31c  0001a31c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a328  0800a328  0001a328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a32c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  20000070  0800a39c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  0800a39c  00020424  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020e78  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004383  00000000  00000000  00040f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  00045298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015d8  00000000  00000000  000469d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001deb1  00000000  00000000  00047fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b960  00000000  00000000  00065e61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3a36  00000000  00000000  000817c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001351f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059b8  00000000  00000000  00135248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080099f0 	.word	0x080099f0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	080099f0 	.word	0x080099f0

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f806 	bl	8000458 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__udivmoddi4>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	0004      	movs	r4, r0
 8000466:	000d      	movs	r5, r1
 8000468:	4692      	mov	sl, r2
 800046a:	4699      	mov	r9, r3
 800046c:	b083      	sub	sp, #12
 800046e:	428b      	cmp	r3, r1
 8000470:	d830      	bhi.n	80004d4 <__udivmoddi4+0x7c>
 8000472:	d02d      	beq.n	80004d0 <__udivmoddi4+0x78>
 8000474:	4649      	mov	r1, r9
 8000476:	4650      	mov	r0, sl
 8000478:	f000 f8d8 	bl	800062c <__clzdi2>
 800047c:	0029      	movs	r1, r5
 800047e:	0006      	movs	r6, r0
 8000480:	0020      	movs	r0, r4
 8000482:	f000 f8d3 	bl	800062c <__clzdi2>
 8000486:	1a33      	subs	r3, r6, r0
 8000488:	4698      	mov	r8, r3
 800048a:	3b20      	subs	r3, #32
 800048c:	469b      	mov	fp, r3
 800048e:	d433      	bmi.n	80004f8 <__udivmoddi4+0xa0>
 8000490:	465a      	mov	r2, fp
 8000492:	4653      	mov	r3, sl
 8000494:	4093      	lsls	r3, r2
 8000496:	4642      	mov	r2, r8
 8000498:	001f      	movs	r7, r3
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	001e      	movs	r6, r3
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d83a      	bhi.n	800051a <__udivmoddi4+0xc2>
 80004a4:	42af      	cmp	r7, r5
 80004a6:	d100      	bne.n	80004aa <__udivmoddi4+0x52>
 80004a8:	e078      	b.n	800059c <__udivmoddi4+0x144>
 80004aa:	465b      	mov	r3, fp
 80004ac:	1ba4      	subs	r4, r4, r6
 80004ae:	41bd      	sbcs	r5, r7
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	da00      	bge.n	80004b6 <__udivmoddi4+0x5e>
 80004b4:	e075      	b.n	80005a2 <__udivmoddi4+0x14a>
 80004b6:	2200      	movs	r2, #0
 80004b8:	2300      	movs	r3, #0
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	465a      	mov	r2, fp
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	4642      	mov	r2, r8
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	e028      	b.n	8000522 <__udivmoddi4+0xca>
 80004d0:	4282      	cmp	r2, r0
 80004d2:	d9cf      	bls.n	8000474 <__udivmoddi4+0x1c>
 80004d4:	2200      	movs	r2, #0
 80004d6:	2300      	movs	r3, #0
 80004d8:	9200      	str	r2, [sp, #0]
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <__udivmoddi4+0x8e>
 80004e2:	601c      	str	r4, [r3, #0]
 80004e4:	605d      	str	r5, [r3, #4]
 80004e6:	9800      	ldr	r0, [sp, #0]
 80004e8:	9901      	ldr	r1, [sp, #4]
 80004ea:	b003      	add	sp, #12
 80004ec:	bcf0      	pop	{r4, r5, r6, r7}
 80004ee:	46bb      	mov	fp, r7
 80004f0:	46b2      	mov	sl, r6
 80004f2:	46a9      	mov	r9, r5
 80004f4:	46a0      	mov	r8, r4
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	4642      	mov	r2, r8
 80004fa:	2320      	movs	r3, #32
 80004fc:	1a9b      	subs	r3, r3, r2
 80004fe:	4652      	mov	r2, sl
 8000500:	40da      	lsrs	r2, r3
 8000502:	4641      	mov	r1, r8
 8000504:	0013      	movs	r3, r2
 8000506:	464a      	mov	r2, r9
 8000508:	408a      	lsls	r2, r1
 800050a:	0017      	movs	r7, r2
 800050c:	4642      	mov	r2, r8
 800050e:	431f      	orrs	r7, r3
 8000510:	4653      	mov	r3, sl
 8000512:	4093      	lsls	r3, r2
 8000514:	001e      	movs	r6, r3
 8000516:	42af      	cmp	r7, r5
 8000518:	d9c4      	bls.n	80004a4 <__udivmoddi4+0x4c>
 800051a:	2200      	movs	r2, #0
 800051c:	2300      	movs	r3, #0
 800051e:	9200      	str	r2, [sp, #0]
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	4643      	mov	r3, r8
 8000524:	2b00      	cmp	r3, #0
 8000526:	d0d9      	beq.n	80004dc <__udivmoddi4+0x84>
 8000528:	07fb      	lsls	r3, r7, #31
 800052a:	0872      	lsrs	r2, r6, #1
 800052c:	431a      	orrs	r2, r3
 800052e:	4646      	mov	r6, r8
 8000530:	087b      	lsrs	r3, r7, #1
 8000532:	e00e      	b.n	8000552 <__udivmoddi4+0xfa>
 8000534:	42ab      	cmp	r3, r5
 8000536:	d101      	bne.n	800053c <__udivmoddi4+0xe4>
 8000538:	42a2      	cmp	r2, r4
 800053a:	d80c      	bhi.n	8000556 <__udivmoddi4+0xfe>
 800053c:	1aa4      	subs	r4, r4, r2
 800053e:	419d      	sbcs	r5, r3
 8000540:	2001      	movs	r0, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2100      	movs	r1, #0
 8000548:	3e01      	subs	r6, #1
 800054a:	1824      	adds	r4, r4, r0
 800054c:	414d      	adcs	r5, r1
 800054e:	2e00      	cmp	r6, #0
 8000550:	d006      	beq.n	8000560 <__udivmoddi4+0x108>
 8000552:	42ab      	cmp	r3, r5
 8000554:	d9ee      	bls.n	8000534 <__udivmoddi4+0xdc>
 8000556:	3e01      	subs	r6, #1
 8000558:	1924      	adds	r4, r4, r4
 800055a:	416d      	adcs	r5, r5
 800055c:	2e00      	cmp	r6, #0
 800055e:	d1f8      	bne.n	8000552 <__udivmoddi4+0xfa>
 8000560:	9800      	ldr	r0, [sp, #0]
 8000562:	9901      	ldr	r1, [sp, #4]
 8000564:	465b      	mov	r3, fp
 8000566:	1900      	adds	r0, r0, r4
 8000568:	4169      	adcs	r1, r5
 800056a:	2b00      	cmp	r3, #0
 800056c:	db24      	blt.n	80005b8 <__udivmoddi4+0x160>
 800056e:	002b      	movs	r3, r5
 8000570:	465a      	mov	r2, fp
 8000572:	4644      	mov	r4, r8
 8000574:	40d3      	lsrs	r3, r2
 8000576:	002a      	movs	r2, r5
 8000578:	40e2      	lsrs	r2, r4
 800057a:	001c      	movs	r4, r3
 800057c:	465b      	mov	r3, fp
 800057e:	0015      	movs	r5, r2
 8000580:	2b00      	cmp	r3, #0
 8000582:	db2a      	blt.n	80005da <__udivmoddi4+0x182>
 8000584:	0026      	movs	r6, r4
 8000586:	409e      	lsls	r6, r3
 8000588:	0033      	movs	r3, r6
 800058a:	0026      	movs	r6, r4
 800058c:	4647      	mov	r7, r8
 800058e:	40be      	lsls	r6, r7
 8000590:	0032      	movs	r2, r6
 8000592:	1a80      	subs	r0, r0, r2
 8000594:	4199      	sbcs	r1, r3
 8000596:	9000      	str	r0, [sp, #0]
 8000598:	9101      	str	r1, [sp, #4]
 800059a:	e79f      	b.n	80004dc <__udivmoddi4+0x84>
 800059c:	42a3      	cmp	r3, r4
 800059e:	d8bc      	bhi.n	800051a <__udivmoddi4+0xc2>
 80005a0:	e783      	b.n	80004aa <__udivmoddi4+0x52>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	2100      	movs	r1, #0
 80005a8:	1a9b      	subs	r3, r3, r2
 80005aa:	2200      	movs	r2, #0
 80005ac:	9100      	str	r1, [sp, #0]
 80005ae:	9201      	str	r2, [sp, #4]
 80005b0:	2201      	movs	r2, #1
 80005b2:	40da      	lsrs	r2, r3
 80005b4:	9201      	str	r2, [sp, #4]
 80005b6:	e786      	b.n	80004c6 <__udivmoddi4+0x6e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	2320      	movs	r3, #32
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	002a      	movs	r2, r5
 80005c0:	4646      	mov	r6, r8
 80005c2:	409a      	lsls	r2, r3
 80005c4:	0023      	movs	r3, r4
 80005c6:	40f3      	lsrs	r3, r6
 80005c8:	4644      	mov	r4, r8
 80005ca:	4313      	orrs	r3, r2
 80005cc:	002a      	movs	r2, r5
 80005ce:	40e2      	lsrs	r2, r4
 80005d0:	001c      	movs	r4, r3
 80005d2:	465b      	mov	r3, fp
 80005d4:	0015      	movs	r5, r2
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	dad4      	bge.n	8000584 <__udivmoddi4+0x12c>
 80005da:	4642      	mov	r2, r8
 80005dc:	002f      	movs	r7, r5
 80005de:	2320      	movs	r3, #32
 80005e0:	0026      	movs	r6, r4
 80005e2:	4097      	lsls	r7, r2
 80005e4:	1a9b      	subs	r3, r3, r2
 80005e6:	40de      	lsrs	r6, r3
 80005e8:	003b      	movs	r3, r7
 80005ea:	4333      	orrs	r3, r6
 80005ec:	e7cd      	b.n	800058a <__udivmoddi4+0x132>
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	; (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <__clzdi2>:
 800062c:	b510      	push	{r4, lr}
 800062e:	2900      	cmp	r1, #0
 8000630:	d103      	bne.n	800063a <__clzdi2+0xe>
 8000632:	f7ff ffdd 	bl	80005f0 <__clzsi2>
 8000636:	3020      	adds	r0, #32
 8000638:	e002      	b.n	8000640 <__clzdi2+0x14>
 800063a:	0008      	movs	r0, r1
 800063c:	f7ff ffd8 	bl	80005f0 <__clzsi2>
 8000640:	bd10      	pop	{r4, pc}
 8000642:	46c0      	nop			; (mov r8, r8)

08000644 <_Z5crc32PKhj>:
	0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693,
	0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,
	0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d
};

 uint32_t crc32(const uint8_t *buf, size_t size) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
	const uint8_t *p = buf;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	60fb      	str	r3, [r7, #12]
	uint32_t crc;

	crc = ~0U;
 8000652:	2301      	movs	r3, #1
 8000654:	425b      	negs	r3, r3
 8000656:	60bb      	str	r3, [r7, #8]
	while (size--)
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	1e5a      	subs	r2, r3, #1
 800065c:	603a      	str	r2, [r7, #0]
 800065e:	1e5a      	subs	r2, r3, #1
 8000660:	4193      	sbcs	r3, r2
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d010      	beq.n	800068a <_Z5crc32PKhj+0x46>
		crc = crc32_tab[(crc ^ *p++) & 0xFF] ^ (crc >> 8);
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	60fa      	str	r2, [r7, #12]
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	001a      	movs	r2, r3
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	4053      	eors	r3, r2
 8000676:	22ff      	movs	r2, #255	; 0xff
 8000678:	401a      	ands	r2, r3
 800067a:	4b07      	ldr	r3, [pc, #28]	; (8000698 <_Z5crc32PKhj+0x54>)
 800067c:	0092      	lsls	r2, r2, #2
 800067e:	58d2      	ldr	r2, [r2, r3]
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	0a1b      	lsrs	r3, r3, #8
 8000684:	4053      	eors	r3, r2
 8000686:	60bb      	str	r3, [r7, #8]
	while (size--)
 8000688:	e7e6      	b.n	8000658 <_Z5crc32PKhj+0x14>
	return crc ^ ~0U;
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	43db      	mvns	r3, r3
}
 800068e:	0018      	movs	r0, r3
 8000690:	46bd      	mov	sp, r7
 8000692:	b004      	add	sp, #16
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	08009c04 	.word	0x08009c04

0800069c <_ZNK9SX1280Hal9BusyDelayEm>:
    void RXenable();
    void TXRXdisable();

    static void (*RadioIsrCallback)(); //function pointer for callback

    void BusyDelay(uint32_t duration) const { (void)duration; };
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b002      	add	sp, #8
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <_ZN12SX1280DriverC1Ev>:
#define RX_TIMEOUT_PERIOD_BASE SX1280_RADIO_TICK_SIZE_0015_US
#define RX_TIMEOUT_PERIOD_BASE_NANOS 15625

void nullCallback(void) {}

SX1280Driver::SX1280Driver()
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2201      	movs	r2, #1
 80006bc:	4252      	negs	r2, r2
 80006be:	851a      	strh	r2, [r3, #40]	; 0x28
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2234      	movs	r2, #52	; 0x34
 80006c4:	2100      	movs	r1, #0
 80006c6:	5499      	strb	r1, [r3, r2]
{
    instance = this;
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <_ZN12SX1280DriverC1Ev+0x28>)
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	601a      	str	r2, [r3, #0]
}
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	0018      	movs	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b002      	add	sp, #8
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200000ac 	.word	0x200000ac

080006dc <_ZN12SX1280Driver5BeginEv>:
    currFreq = 2400000000;
    PayloadLength = 8; // Dummy default value which is overwritten during setup.
}

bool SX1280Driver::Begin()
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b087      	sub	sp, #28
 80006e0:	af02      	add	r7, sp, #8
 80006e2:	6078      	str	r0, [r7, #4]
    hal.init();
 80006e4:	4b41      	ldr	r3, [pc, #260]	; (80007ec <_ZN12SX1280Driver5BeginEv+0x110>)
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 fd7a 	bl	80011e0 <_ZN9SX1280Hal4initEv>
    //hal.RadioIsrCallback = &SX1280Driver::IsrCallback;

    hal.reset();
 80006ec:	4b3f      	ldr	r3, [pc, #252]	; (80007ec <_ZN12SX1280Driver5BeginEv+0x110>)
 80006ee:	0018      	movs	r0, r3
 80006f0:	f000 fd7e 	bl	80011f0 <_ZN9SX1280Hal5resetEv>
    //DBGLN("SX1280 Begin");
    HAL_Delay(100);
 80006f4:	2064      	movs	r0, #100	; 0x64
 80006f6:	f003 f96f 	bl	80039d8 <HAL_Delay>
    uint16_t firmwareRev = (((hal.ReadRegister(REG_LR_FIRMWARE_VERSION_MSB)) << 8) | (hal.ReadRegister(REG_LR_FIRMWARE_VERSION_MSB + 1)));
 80006fa:	2354      	movs	r3, #84	; 0x54
 80006fc:	33ff      	adds	r3, #255	; 0xff
 80006fe:	001a      	movs	r2, r3
 8000700:	4b3a      	ldr	r3, [pc, #232]	; (80007ec <_ZN12SX1280Driver5BeginEv+0x110>)
 8000702:	0011      	movs	r1, r2
 8000704:	0018      	movs	r0, r3
 8000706:	f000 ff1f 	bl	8001548 <_ZN9SX1280Hal12ReadRegisterEt>
 800070a:	0003      	movs	r3, r0
 800070c:	021b      	lsls	r3, r3, #8
 800070e:	b21c      	sxth	r4, r3
 8000710:	23aa      	movs	r3, #170	; 0xaa
 8000712:	005a      	lsls	r2, r3, #1
 8000714:	4b35      	ldr	r3, [pc, #212]	; (80007ec <_ZN12SX1280Driver5BeginEv+0x110>)
 8000716:	0011      	movs	r1, r2
 8000718:	0018      	movs	r0, r3
 800071a:	f000 ff15 	bl	8001548 <_ZN9SX1280Hal12ReadRegisterEt>
 800071e:	0003      	movs	r3, r0
 8000720:	b21b      	sxth	r3, r3
 8000722:	4323      	orrs	r3, r4
 8000724:	b21a      	sxth	r2, r3
 8000726:	210e      	movs	r1, #14
 8000728:	187b      	adds	r3, r7, r1
 800072a:	801a      	strh	r2, [r3, #0]
    //DBGLN("Read Vers: %d", firmwareRev);
    if ((firmwareRev == 0) || (firmwareRev == 65535))
 800072c:	000a      	movs	r2, r1
 800072e:	18bb      	adds	r3, r7, r2
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d004      	beq.n	8000740 <_ZN12SX1280Driver5BeginEv+0x64>
 8000736:	18bb      	adds	r3, r7, r2
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	4a2d      	ldr	r2, [pc, #180]	; (80007f0 <_ZN12SX1280Driver5BeginEv+0x114>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d101      	bne.n	8000744 <_ZN12SX1280Driver5BeginEv+0x68>
    {
        // SPI communication failed, just return without configuration
        return false;
 8000740:	2300      	movs	r3, #0
 8000742:	e04e      	b.n	80007e2 <_ZN12SX1280Driver5BeginEv+0x106>
    }

    SetMode(SX1280_MODE_STDBY_RC);                                                                                                //Put in STDBY_RC mode
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2102      	movs	r1, #2
 8000748:	0018      	movs	r0, r3
 800074a:	f000 f945 	bl	80009d8 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>
    hal.WriteCommand(SX1280_RADIO_SET_PACKETTYPE, SX1280_PACKET_TYPE_LORA);                                                       //Set packet type to LoRa
 800074e:	4b27      	ldr	r3, [pc, #156]	; (80007ec <_ZN12SX1280Driver5BeginEv+0x110>)
 8000750:	2201      	movs	r2, #1
 8000752:	218a      	movs	r1, #138	; 0x8a
 8000754:	0018      	movs	r0, r3
 8000756:	f000 fd53 	bl	8001200 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
    ConfigModParamsLoRa(SX1280_LORA_BW_0800, SX1280_LORA_SF6, SX1280_LORA_CR_4_7);                                                //Configure Modulation Params
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	2303      	movs	r3, #3
 800075e:	2260      	movs	r2, #96	; 0x60
 8000760:	2118      	movs	r1, #24
 8000762:	f000 f9b9 	bl	8000ad8 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh>
    hal.WriteCommand(SX1280_RADIO_SET_AUTOFS, 0x01);                                                                              //Enable auto FS
 8000766:	4b21      	ldr	r3, [pc, #132]	; (80007ec <_ZN12SX1280Driver5BeginEv+0x110>)
 8000768:	2201      	movs	r2, #1
 800076a:	219e      	movs	r1, #158	; 0x9e
 800076c:	0018      	movs	r0, r3
 800076e:	f000 fd47 	bl	8001200 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
    hal.WriteRegister(0x0891, (hal.ReadRegister(0x0891) | 0xC0));                                                                 //default is low power mode, switch to high sensitivity instead
 8000772:	4a20      	ldr	r2, [pc, #128]	; (80007f4 <_ZN12SX1280Driver5BeginEv+0x118>)
 8000774:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <_ZN12SX1280Driver5BeginEv+0x110>)
 8000776:	0011      	movs	r1, r2
 8000778:	0018      	movs	r0, r3
 800077a:	f000 fee5 	bl	8001548 <_ZN9SX1280Hal12ReadRegisterEt>
 800077e:	0003      	movs	r3, r0
 8000780:	001a      	movs	r2, r3
 8000782:	2340      	movs	r3, #64	; 0x40
 8000784:	425b      	negs	r3, r3
 8000786:	4313      	orrs	r3, r2
 8000788:	b2da      	uxtb	r2, r3
 800078a:	491a      	ldr	r1, [pc, #104]	; (80007f4 <_ZN12SX1280Driver5BeginEv+0x118>)
 800078c:	4b17      	ldr	r3, [pc, #92]	; (80007ec <_ZN12SX1280Driver5BeginEv+0x110>)
 800078e:	0018      	movs	r0, r3
 8000790:	f000 fe72 	bl	8001478 <_ZN9SX1280Hal13WriteRegisterEth>
    SetPacketParamsLoRa(12, SX1280_LORA_PACKET_IMPLICIT, 8, SX1280_LORA_CRC_OFF, SX1280_LORA_IQ_NORMAL);                          //default params
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	2340      	movs	r3, #64	; 0x40
 8000798:	9301      	str	r3, [sp, #4]
 800079a:	2300      	movs	r3, #0
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	2308      	movs	r3, #8
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	210c      	movs	r1, #12
 80007a4:	f000 f9e4 	bl	8000b70 <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th>
    SetFrequencyReg(currFreq);                                                                                                    //Set Freq
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	0011      	movs	r1, r2
 80007b0:	0018      	movs	r0, r3
 80007b2:	f000 fadb 	bl	8000d6c <_ZN12SX1280Driver15SetFrequencyRegEm>
    SetFIFOaddr(0x00, 0x00);                                                                                                      //Config FIFO addr
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2200      	movs	r2, #0
 80007ba:	2100      	movs	r1, #0
 80007bc:	0018      	movs	r0, r3
 80007be:	f000 fb01 	bl	8000dc4 <_ZN12SX1280Driver11SetFIFOaddrEhh>
    SetDioIrqParams(SX1280_IRQ_RADIO_ALL, SX1280_IRQ_TX_DONE | SX1280_IRQ_RX_DONE);                                               //set IRQ to both RXdone/TXdone on DIO1
 80007c2:	490b      	ldr	r1, [pc, #44]	; (80007f0 <_ZN12SX1280Driver5BeginEv+0x114>)
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	2300      	movs	r3, #0
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	2300      	movs	r3, #0
 80007cc:	2203      	movs	r2, #3
 80007ce:	f000 fb1b 	bl	8000e08 <_ZN12SX1280Driver15SetDioIrqParamsEtttt>
    instance->ClearIrqStatus(SX1280_IRQ_RADIO_ALL);
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <_ZN12SX1280Driver5BeginEv+0x11c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <_ZN12SX1280Driver5BeginEv+0x114>)
 80007d8:	0011      	movs	r1, r2
 80007da:	0018      	movs	r0, r3
 80007dc:	f000 fb82 	bl	8000ee4 <_ZN12SX1280Driver14ClearIrqStatusEt>
    return true;
 80007e0:	2301      	movs	r3, #1
}
 80007e2:	0018      	movs	r0, r3
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b005      	add	sp, #20
 80007e8:	bd90      	pop	{r4, r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	200000a8 	.word	0x200000a8
 80007f0:	0000ffff 	.word	0x0000ffff
 80007f4:	00000891 	.word	0x00000891
 80007f8:	200000ac 	.word	0x200000ac

080007fc <_ZN12SX1280Driver6ConfigEhhhmhbhmmth>:

void SX1280Driver::Config(uint8_t bw, uint8_t sf, uint8_t cr, uint32_t freq,
                          uint8_t PreambleLength, bool InvertIQ, uint8_t _PayloadLength, uint32_t interval,
                          uint32_t flrcSyncWord, uint16_t flrcCrcSeed, uint8_t flrc)
{
 80007fc:	b5b0      	push	{r4, r5, r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af04      	add	r7, sp, #16
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	000c      	movs	r4, r1
 8000806:	0010      	movs	r0, r2
 8000808:	0019      	movs	r1, r3
 800080a:	1cfb      	adds	r3, r7, #3
 800080c:	1c22      	adds	r2, r4, #0
 800080e:	701a      	strb	r2, [r3, #0]
 8000810:	1cbb      	adds	r3, r7, #2
 8000812:	1c02      	adds	r2, r0, #0
 8000814:	701a      	strb	r2, [r3, #0]
 8000816:	1c7b      	adds	r3, r7, #1
 8000818:	1c0a      	adds	r2, r1, #0
 800081a:	701a      	strb	r2, [r3, #0]
    uint8_t irqs = SX1280_IRQ_TX_DONE | SX1280_IRQ_RX_DONE;
 800081c:	230f      	movs	r3, #15
 800081e:	18fb      	adds	r3, r7, r3
 8000820:	2203      	movs	r2, #3
 8000822:	701a      	strb	r2, [r3, #0]
    uint8_t const mode = (flrc) ? SX1280_PACKET_TYPE_FLRC : SX1280_PACKET_TYPE_LORA;
 8000824:	233c      	movs	r3, #60	; 0x3c
 8000826:	18fb      	adds	r3, r7, r3
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0x36>
 800082e:	2203      	movs	r2, #3
 8000830:	e000      	b.n	8000834 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0x38>
 8000832:	2201      	movs	r2, #1
 8000834:	240e      	movs	r4, #14
 8000836:	193b      	adds	r3, r7, r4
 8000838:	701a      	strb	r2, [r3, #0]

    PayloadLength = _PayloadLength;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	252c      	movs	r5, #44	; 0x2c
 800083e:	197a      	adds	r2, r7, r5
 8000840:	2130      	movs	r1, #48	; 0x30
 8000842:	7812      	ldrb	r2, [r2, #0]
 8000844:	545a      	strb	r2, [r3, r1]
    IQinverted = InvertIQ;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2228      	movs	r2, #40	; 0x28
 800084a:	18ba      	adds	r2, r7, r2
 800084c:	2131      	movs	r1, #49	; 0x31
 800084e:	7812      	ldrb	r2, [r2, #0]
 8000850:	545a      	strb	r2, [r3, r1]
    SetMode(SX1280_MODE_STDBY_XOSC);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2103      	movs	r1, #3
 8000856:	0018      	movs	r0, r3
 8000858:	f000 f8be 	bl	80009d8 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>

    hal.WriteCommand(SX1280_RADIO_SET_PACKETTYPE, mode);
 800085c:	193b      	adds	r3, r7, r4
 800085e:	781a      	ldrb	r2, [r3, #0]
 8000860:	4b31      	ldr	r3, [pc, #196]	; (8000928 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0x12c>)
 8000862:	218a      	movs	r1, #138	; 0x8a
 8000864:	0018      	movs	r0, r3
 8000866:	f000 fccb 	bl	8001200 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
    if (mode == SX1280_PACKET_TYPE_FLRC)
 800086a:	193b      	adds	r3, r7, r4
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b03      	cmp	r3, #3
 8000870:	d123      	bne.n	80008ba <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0xbe>
    {
        //DBGLN("Config FLRC");
        ConfigModParamsFLRC(bw, cr, sf);
 8000872:	1cbb      	adds	r3, r7, #2
 8000874:	781c      	ldrb	r4, [r3, #0]
 8000876:	1c7b      	adds	r3, r7, #1
 8000878:	781a      	ldrb	r2, [r3, #0]
 800087a:	1cfb      	adds	r3, r7, #3
 800087c:	7819      	ldrb	r1, [r3, #0]
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	0023      	movs	r3, r4
 8000882:	f000 f9b5 	bl	8000bf0 <_ZN12SX1280Driver19ConfigModParamsFLRCEhhh>
        SetPacketParamsFLRC(SX1280_FLRC_PACKET_FIXED_LENGTH, /*crc=*/1,
 8000886:	2324      	movs	r3, #36	; 0x24
 8000888:	18fb      	adds	r3, r7, r3
 800088a:	781a      	ldrb	r2, [r3, #0]
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	2338      	movs	r3, #56	; 0x38
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	9302      	str	r3, [sp, #8]
 8000896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000898:	9301      	str	r3, [sp, #4]
 800089a:	197b      	adds	r3, r7, r5
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	0013      	movs	r3, r2
 80008a2:	2201      	movs	r2, #1
 80008a4:	2100      	movs	r1, #0
 80008a6:	f000 f9cd 	bl	8000c44 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt>
                            PreambleLength, _PayloadLength, flrcSyncWord, flrcCrcSeed);
        irqs |= SX1280_IRQ_CRC_ERROR;
 80008aa:	220f      	movs	r2, #15
 80008ac:	18bb      	adds	r3, r7, r2
 80008ae:	18ba      	adds	r2, r7, r2
 80008b0:	7812      	ldrb	r2, [r2, #0]
 80008b2:	2140      	movs	r1, #64	; 0x40
 80008b4:	430a      	orrs	r2, r1
 80008b6:	701a      	strb	r2, [r3, #0]
 80008b8:	e01a      	b.n	80008f0 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0xf4>
    }
    else
    {
        //DBGLN("Config LoRa");
        ConfigModParamsLoRa(bw, sf, cr);
 80008ba:	1c7b      	adds	r3, r7, #1
 80008bc:	781c      	ldrb	r4, [r3, #0]
 80008be:	1cbb      	adds	r3, r7, #2
 80008c0:	781a      	ldrb	r2, [r3, #0]
 80008c2:	1cfb      	adds	r3, r7, #3
 80008c4:	7819      	ldrb	r1, [r3, #0]
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	0023      	movs	r3, r4
 80008ca:	f000 f905 	bl	8000ad8 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh>
        SetPacketParamsLoRa(PreambleLength, SX1280_LORA_PACKET_IMPLICIT,
 80008ce:	2328      	movs	r3, #40	; 0x28
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	222c      	movs	r2, #44	; 0x2c
 80008d6:	18ba      	adds	r2, r7, r2
 80008d8:	7814      	ldrb	r4, [r2, #0]
 80008da:	2224      	movs	r2, #36	; 0x24
 80008dc:	18ba      	adds	r2, r7, r2
 80008de:	7811      	ldrb	r1, [r2, #0]
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	9301      	str	r3, [sp, #4]
 80008e4:	2300      	movs	r3, #0
 80008e6:	9300      	str	r3, [sp, #0]
 80008e8:	0023      	movs	r3, r4
 80008ea:	2280      	movs	r2, #128	; 0x80
 80008ec:	f000 f940 	bl	8000b70 <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th>
                            _PayloadLength, SX1280_LORA_CRC_OFF, InvertIQ);
    }
    SetFrequencyReg(freq);
 80008f0:	6a3a      	ldr	r2, [r7, #32]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	0011      	movs	r1, r2
 80008f6:	0018      	movs	r0, r3
 80008f8:	f000 fa38 	bl	8000d6c <_ZN12SX1280Driver15SetFrequencyRegEm>
    SetDioIrqParams(SX1280_IRQ_RADIO_ALL, irqs);
 80008fc:	230f      	movs	r3, #15
 80008fe:	18fb      	adds	r3, r7, r3
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	b29a      	uxth	r2, r3
 8000904:	4909      	ldr	r1, [pc, #36]	; (800092c <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0x130>)
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	2300      	movs	r3, #0
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	2300      	movs	r3, #0
 800090e:	f000 fa7b 	bl	8000e08 <_ZN12SX1280Driver15SetDioIrqParamsEtttt>
    SetRxTimeoutUs(interval);
 8000912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	0011      	movs	r1, r2
 8000918:	0018      	movs	r0, r3
 800091a:	f000 f809 	bl	8000930 <_ZN12SX1280Driver14SetRxTimeoutUsEm>
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b004      	add	sp, #16
 8000924:	bdb0      	pop	{r4, r5, r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	200000a8 	.word	0x200000a8
 800092c:	0000ffff 	.word	0x0000ffff

08000930 <_ZN12SX1280Driver14SetRxTimeoutUsEm>:

void SX1280Driver::SetRxTimeoutUs(uint32_t interval)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
    if (interval)
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d00f      	beq.n	8000960 <_ZN12SX1280Driver14SetRxTimeoutUsEm+0x30>
    {
        timeout = interval * 1000 / RX_TIMEOUT_PERIOD_BASE_NANOS; // number of periods for the SX1280 to timeout
 8000940:	683a      	ldr	r2, [r7, #0]
 8000942:	0013      	movs	r3, r2
 8000944:	015b      	lsls	r3, r3, #5
 8000946:	1a9b      	subs	r3, r3, r2
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	189b      	adds	r3, r3, r2
 800094c:	00db      	lsls	r3, r3, #3
 800094e:	4908      	ldr	r1, [pc, #32]	; (8000970 <_ZN12SX1280Driver14SetRxTimeoutUsEm+0x40>)
 8000950:	0018      	movs	r0, r3
 8000952:	f7ff fbeb 	bl	800012c <__udivsi3>
 8000956:	0003      	movs	r3, r0
 8000958:	b29a      	uxth	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	851a      	strh	r2, [r3, #40]	; 0x28
    }
    else
    {
        timeout = 0xFFFF;   // no timeout, continuous mode
    }
}
 800095e:	e003      	b.n	8000968 <_ZN12SX1280Driver14SetRxTimeoutUsEm+0x38>
        timeout = 0xFFFF;   // no timeout, continuous mode
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2201      	movs	r2, #1
 8000964:	4252      	negs	r2, r2
 8000966:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	b002      	add	sp, #8
 800096e:	bd80      	pop	{r7, pc}
 8000970:	00003d09 	.word	0x00003d09

08000974 <_ZN12SX1280Driver14SetOutputPowerEa>:

void SX1280Driver::SetOutputPower(int8_t power)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	000a      	movs	r2, r1
 800097e:	1cfb      	adds	r3, r7, #3
 8000980:	701a      	strb	r2, [r3, #0]
    if (power < -18) power = -18;
 8000982:	1cfb      	adds	r3, r7, #3
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	b25b      	sxtb	r3, r3
 8000988:	3312      	adds	r3, #18
 800098a:	da03      	bge.n	8000994 <_ZN12SX1280Driver14SetOutputPowerEa+0x20>
 800098c:	1cfb      	adds	r3, r7, #3
 800098e:	22ee      	movs	r2, #238	; 0xee
 8000990:	701a      	strb	r2, [r3, #0]
 8000992:	e007      	b.n	80009a4 <_ZN12SX1280Driver14SetOutputPowerEa+0x30>
    else if (13 < power) power = 13;
 8000994:	1cfb      	adds	r3, r7, #3
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b25b      	sxtb	r3, r3
 800099a:	2b0d      	cmp	r3, #13
 800099c:	dd02      	ble.n	80009a4 <_ZN12SX1280Driver14SetOutputPowerEa+0x30>
 800099e:	1cfb      	adds	r3, r7, #3
 80009a0:	220d      	movs	r2, #13
 80009a2:	701a      	strb	r2, [r3, #0]
    uint8_t buf[2] = {(uint8_t)(power + 18), (uint8_t)SX1280_RADIO_RAMP_04_US};
 80009a4:	210c      	movs	r1, #12
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	2200      	movs	r2, #0
 80009aa:	801a      	strh	r2, [r3, #0]
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2220      	movs	r2, #32
 80009b0:	705a      	strb	r2, [r3, #1]
 80009b2:	1cfb      	adds	r3, r7, #3
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	3312      	adds	r3, #18
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	701a      	strb	r2, [r3, #0]
    hal.WriteCommand(SX1280_RADIO_SET_TXPARAMS, buf, sizeof(buf));
 80009be:	187a      	adds	r2, r7, r1
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <_ZN12SX1280Driver14SetOutputPowerEa+0x60>)
 80009c2:	2302      	movs	r3, #2
 80009c4:	218e      	movs	r1, #142	; 0x8e
 80009c6:	f000 fc55 	bl	8001274 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
    //DBGLN("SetPower: %d", buf[0]);
    return;
 80009ca:	46c0      	nop			; (mov r8, r8)
}
 80009cc:	46bd      	mov	sp, r7
 80009ce:	b004      	add	sp, #16
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	200000a8 	.word	0x200000a8

080009d8 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>:

void SX1280Driver::SetMode(SX1280_RadioOperatingModes_t OPmode)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	000a      	movs	r2, r1
 80009e2:	1cfb      	adds	r3, r7, #3
 80009e4:	701a      	strb	r2, [r3, #0]
    if (OPmode == currOpmode)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2234      	movs	r2, #52	; 0x34
 80009ea:	5c9b      	ldrb	r3, [r3, r2]
 80009ec:	1cfa      	adds	r2, r7, #3
 80009ee:	7812      	ldrb	r2, [r2, #0]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d067      	beq.n	8000ac4 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xec>
    {
       return;
    }

    uint8_t buf[3];
    uint32_t switchDelay = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]

    switch (OPmode)
 80009f8:	1cfb      	adds	r3, r7, #3
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b07      	cmp	r3, #7
 80009fe:	d852      	bhi.n	8000aa6 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xce>
 8000a00:	009a      	lsls	r2, r3, #2
 8000a02:	4b32      	ldr	r3, [pc, #200]	; (8000acc <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf4>)
 8000a04:	18d3      	adds	r3, r2, r3
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	469f      	mov	pc, r3
    {

    case SX1280_MODE_SLEEP:
        hal.WriteCommand(SX1280_RADIO_SET_SLEEP, 0x01);
 8000a0a:	4b31      	ldr	r3, [pc, #196]	; (8000ad0 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2184      	movs	r1, #132	; 0x84
 8000a10:	0018      	movs	r0, r3
 8000a12:	f000 fbf5 	bl	8001200 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
        break;
 8000a16:	e049      	b.n	8000aac <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd4>

    case SX1280_MODE_CALIBRATION:
        break;

    case SX1280_MODE_STDBY_RC:
        hal.WriteCommand(SX1280_RADIO_SET_STANDBY, SX1280_STDBY_RC);
 8000a18:	4b2d      	ldr	r3, [pc, #180]	; (8000ad0 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 fbee 	bl	8001200 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
        switchDelay = 1500;
 8000a24:	4b2b      	ldr	r3, [pc, #172]	; (8000ad4 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xfc>)
 8000a26:	60fb      	str	r3, [r7, #12]
        break;
 8000a28:	e040      	b.n	8000aac <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd4>

    case SX1280_MODE_STDBY_XOSC:
        hal.WriteCommand(SX1280_RADIO_SET_STANDBY, SX1280_STDBY_XOSC);
 8000a2a:	4b29      	ldr	r3, [pc, #164]	; (8000ad0 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2180      	movs	r1, #128	; 0x80
 8000a30:	0018      	movs	r0, r3
 8000a32:	f000 fbe5 	bl	8001200 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
        switchDelay = 50;
 8000a36:	2332      	movs	r3, #50	; 0x32
 8000a38:	60fb      	str	r3, [r7, #12]
        break;
 8000a3a:	e037      	b.n	8000aac <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd4>

    case SX1280_MODE_FS:
        hal.WriteCommand(SX1280_RADIO_SET_FS, 0x00);
 8000a3c:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	21c1      	movs	r1, #193	; 0xc1
 8000a42:	0018      	movs	r0, r3
 8000a44:	f000 fbdc 	bl	8001200 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
        switchDelay = 70;
 8000a48:	2346      	movs	r3, #70	; 0x46
 8000a4a:	60fb      	str	r3, [r7, #12]
        break;
 8000a4c:	e02e      	b.n	8000aac <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd4>

    case SX1280_MODE_RX:
        buf[0] = RX_TIMEOUT_PERIOD_BASE;
 8000a4e:	2108      	movs	r1, #8
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	2200      	movs	r2, #0
 8000a54:	701a      	strb	r2, [r3, #0]
        buf[1] = timeout >> 8;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a5a:	0a1b      	lsrs	r3, r3, #8
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	705a      	strb	r2, [r3, #1]
        buf[2] = timeout & 0xFF;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	709a      	strb	r2, [r3, #2]
        hal.WriteCommand(SX1280_RADIO_SET_RX, buf, sizeof(buf));
 8000a6e:	187a      	adds	r2, r7, r1
 8000a70:	4817      	ldr	r0, [pc, #92]	; (8000ad0 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8000a72:	2303      	movs	r3, #3
 8000a74:	2182      	movs	r1, #130	; 0x82
 8000a76:	f000 fbfd 	bl	8001274 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
        switchDelay = 100;
 8000a7a:	2364      	movs	r3, #100	; 0x64
 8000a7c:	60fb      	str	r3, [r7, #12]
        break;
 8000a7e:	e015      	b.n	8000aac <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd4>

    case SX1280_MODE_TX:
        //uses timeout Time-out duration = periodBase * periodBaseCount
        buf[0] = RX_TIMEOUT_PERIOD_BASE;
 8000a80:	2108      	movs	r1, #8
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
        buf[1] = 0xFF; // no timeout set for now
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	22ff      	movs	r2, #255	; 0xff
 8000a8c:	705a      	strb	r2, [r3, #1]
        buf[2] = 0xFF; // TODO dynamic timeout based on expected onairtime
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	22ff      	movs	r2, #255	; 0xff
 8000a92:	709a      	strb	r2, [r3, #2]
        hal.WriteCommand(SX1280_RADIO_SET_TX, buf, sizeof(buf));
 8000a94:	187a      	adds	r2, r7, r1
 8000a96:	480e      	ldr	r0, [pc, #56]	; (8000ad0 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8000a98:	2303      	movs	r3, #3
 8000a9a:	2183      	movs	r1, #131	; 0x83
 8000a9c:	f000 fbea 	bl	8001274 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
        switchDelay = 100;
 8000aa0:	2364      	movs	r3, #100	; 0x64
 8000aa2:	60fb      	str	r3, [r7, #12]
        break;
 8000aa4:	e002      	b.n	8000aac <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd4>

    case SX1280_MODE_CAD:
        break;

    default:
        break;
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	e000      	b.n	8000aac <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd4>
        break;
 8000aaa:	46c0      	nop			; (mov r8, r8)
    }
    hal.BusyDelay(switchDelay);
 8000aac:	68fa      	ldr	r2, [r7, #12]
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8000ab0:	0011      	movs	r1, r2
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f7ff fdf2 	bl	800069c <_ZNK9SX1280Hal9BusyDelayEm>

    currOpmode = OPmode;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	1cfa      	adds	r2, r7, #3
 8000abc:	2134      	movs	r1, #52	; 0x34
 8000abe:	7812      	ldrb	r2, [r2, #0]
 8000ac0:	545a      	strb	r2, [r3, r1]
 8000ac2:	e000      	b.n	8000ac6 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xee>
       return;
 8000ac4:	46c0      	nop			; (mov r8, r8)
}
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b004      	add	sp, #16
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	0800a004 	.word	0x0800a004
 8000ad0:	200000a8 	.word	0x200000a8
 8000ad4:	000005dc 	.word	0x000005dc

08000ad8 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh>:

void SX1280Driver::ConfigModParamsLoRa(uint8_t bw, uint8_t sf, uint8_t cr)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	000c      	movs	r4, r1
 8000ae2:	0010      	movs	r0, r2
 8000ae4:	0019      	movs	r1, r3
 8000ae6:	1cfb      	adds	r3, r7, #3
 8000ae8:	1c22      	adds	r2, r4, #0
 8000aea:	701a      	strb	r2, [r3, #0]
 8000aec:	1cbb      	adds	r3, r7, #2
 8000aee:	1c02      	adds	r2, r0, #0
 8000af0:	701a      	strb	r2, [r3, #0]
 8000af2:	1c7b      	adds	r3, r7, #1
 8000af4:	1c0a      	adds	r2, r1, #0
 8000af6:	701a      	strb	r2, [r3, #0]
    // Care must therefore be taken to ensure that modulation parameters are set using the command
    // SetModulationParam() only after defining the packet type SetPacketType() to be used

    uint8_t rfparams[3] = {sf, bw, cr};
 8000af8:	210c      	movs	r1, #12
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	1cba      	adds	r2, r7, #2
 8000afe:	7812      	ldrb	r2, [r2, #0]
 8000b00:	701a      	strb	r2, [r3, #0]
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	1cfa      	adds	r2, r7, #3
 8000b06:	7812      	ldrb	r2, [r2, #0]
 8000b08:	705a      	strb	r2, [r3, #1]
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	1c7a      	adds	r2, r7, #1
 8000b0e:	7812      	ldrb	r2, [r2, #0]
 8000b10:	709a      	strb	r2, [r3, #2]

    hal.WriteCommand(SX1280_RADIO_SET_MODULATIONPARAMS, rfparams, sizeof(rfparams));
 8000b12:	187a      	adds	r2, r7, r1
 8000b14:	4814      	ldr	r0, [pc, #80]	; (8000b68 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x90>)
 8000b16:	2303      	movs	r3, #3
 8000b18:	218b      	movs	r1, #139	; 0x8b
 8000b1a:	f000 fbab 	bl	8001274 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>

    switch (sf)
 8000b1e:	1cbb      	adds	r3, r7, #2
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b80      	cmp	r3, #128	; 0x80
 8000b24:	d00e      	beq.n	8000b44 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x6c>
 8000b26:	dc14      	bgt.n	8000b52 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x7a>
 8000b28:	2b70      	cmp	r3, #112	; 0x70
 8000b2a:	d00b      	beq.n	8000b44 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x6c>
 8000b2c:	dc11      	bgt.n	8000b52 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x7a>
 8000b2e:	2b50      	cmp	r3, #80	; 0x50
 8000b30:	d001      	beq.n	8000b36 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x5e>
 8000b32:	2b60      	cmp	r3, #96	; 0x60
 8000b34:	d10d      	bne.n	8000b52 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x7a>
    {
    case SX1280_LORA_SF5:
    case SX1280_LORA_SF6:
        hal.WriteRegister(0x925, 0x1E); // for SF5 or SF6
 8000b36:	490d      	ldr	r1, [pc, #52]	; (8000b6c <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x94>)
 8000b38:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x90>)
 8000b3a:	221e      	movs	r2, #30
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f000 fc9b 	bl	8001478 <_ZN9SX1280Hal13WriteRegisterEth>
        break;
 8000b42:	e00d      	b.n	8000b60 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x88>
    case SX1280_LORA_SF7:
    case SX1280_LORA_SF8:
        hal.WriteRegister(0x925, 0x37); // for SF7 or SF8
 8000b44:	4909      	ldr	r1, [pc, #36]	; (8000b6c <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x94>)
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x90>)
 8000b48:	2237      	movs	r2, #55	; 0x37
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f000 fc94 	bl	8001478 <_ZN9SX1280Hal13WriteRegisterEth>
        break;
 8000b50:	e006      	b.n	8000b60 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x88>
    default:
        hal.WriteRegister(0x925, 0x32); // for SF9, SF10, SF11, SF12
 8000b52:	4906      	ldr	r1, [pc, #24]	; (8000b6c <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x94>)
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x90>)
 8000b56:	2232      	movs	r2, #50	; 0x32
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f000 fc8d 	bl	8001478 <_ZN9SX1280Hal13WriteRegisterEth>
    }
}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b005      	add	sp, #20
 8000b66:	bd90      	pop	{r4, r7, pc}
 8000b68:	200000a8 	.word	0x200000a8
 8000b6c:	00000925 	.word	0x00000925

08000b70 <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th>:

void SX1280Driver::SetPacketParamsLoRa(uint8_t PreambleLength, SX1280_RadioLoRaPacketLengthsModes_t HeaderType,
                                       uint8_t PayloadLength, SX1280_RadioLoRaCrcModes_t crc,
                                       uint8_t InvertIQ)
{
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	000c      	movs	r4, r1
 8000b7a:	0010      	movs	r0, r2
 8000b7c:	0019      	movs	r1, r3
 8000b7e:	1cfb      	adds	r3, r7, #3
 8000b80:	1c22      	adds	r2, r4, #0
 8000b82:	701a      	strb	r2, [r3, #0]
 8000b84:	1cbb      	adds	r3, r7, #2
 8000b86:	1c02      	adds	r2, r0, #0
 8000b88:	701a      	strb	r2, [r3, #0]
 8000b8a:	1c7b      	adds	r3, r7, #1
 8000b8c:	1c0a      	adds	r2, r1, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
    uint8_t buf[7];

    buf[0] = PreambleLength;
 8000b90:	2108      	movs	r1, #8
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	1cfa      	adds	r2, r7, #3
 8000b96:	7812      	ldrb	r2, [r2, #0]
 8000b98:	701a      	strb	r2, [r3, #0]
    buf[1] = HeaderType;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	1cba      	adds	r2, r7, #2
 8000b9e:	7812      	ldrb	r2, [r2, #0]
 8000ba0:	705a      	strb	r2, [r3, #1]
    buf[2] = PayloadLength;
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	1c7a      	adds	r2, r7, #1
 8000ba6:	7812      	ldrb	r2, [r2, #0]
 8000ba8:	709a      	strb	r2, [r3, #2]
    buf[3] = crc;
 8000baa:	187a      	adds	r2, r7, r1
 8000bac:	2320      	movs	r3, #32
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	70d3      	strb	r3, [r2, #3]
    buf[4] = InvertIQ ? SX1280_LORA_IQ_INVERTED : SX1280_LORA_IQ_NORMAL;
 8000bb4:	2324      	movs	r3, #36	; 0x24
 8000bb6:	18fb      	adds	r3, r7, r3
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th+0x52>
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	e000      	b.n	8000bc4 <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th+0x54>
 8000bc2:	2240      	movs	r2, #64	; 0x40
 8000bc4:	2108      	movs	r1, #8
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	711a      	strb	r2, [r3, #4]
    buf[5] = 0x00;
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2200      	movs	r2, #0
 8000bce:	715a      	strb	r2, [r3, #5]
    buf[6] = 0x00;
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	719a      	strb	r2, [r3, #6]

    hal.WriteCommand(SX1280_RADIO_SET_PACKETPARAMS, buf, sizeof(buf));
 8000bd6:	187a      	adds	r2, r7, r1
 8000bd8:	4804      	ldr	r0, [pc, #16]	; (8000bec <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th+0x7c>)
 8000bda:	2307      	movs	r3, #7
 8000bdc:	218c      	movs	r1, #140	; 0x8c
 8000bde:	f000 fb49 	bl	8001274 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b005      	add	sp, #20
 8000be8:	bd90      	pop	{r4, r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	200000a8 	.word	0x200000a8

08000bf0 <_ZN12SX1280Driver19ConfigModParamsFLRCEhhh>:

void SX1280Driver::ConfigModParamsFLRC(uint8_t bw, uint8_t cr, uint8_t bt)
{
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	000c      	movs	r4, r1
 8000bfa:	0010      	movs	r0, r2
 8000bfc:	0019      	movs	r1, r3
 8000bfe:	1cfb      	adds	r3, r7, #3
 8000c00:	1c22      	adds	r2, r4, #0
 8000c02:	701a      	strb	r2, [r3, #0]
 8000c04:	1cbb      	adds	r3, r7, #2
 8000c06:	1c02      	adds	r2, r0, #0
 8000c08:	701a      	strb	r2, [r3, #0]
 8000c0a:	1c7b      	adds	r3, r7, #1
 8000c0c:	1c0a      	adds	r2, r1, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
    uint8_t rfparams[3] = {bw, cr, bt};
 8000c10:	210c      	movs	r1, #12
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	1cfa      	adds	r2, r7, #3
 8000c16:	7812      	ldrb	r2, [r2, #0]
 8000c18:	701a      	strb	r2, [r3, #0]
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	1cba      	adds	r2, r7, #2
 8000c1e:	7812      	ldrb	r2, [r2, #0]
 8000c20:	705a      	strb	r2, [r3, #1]
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	1c7a      	adds	r2, r7, #1
 8000c26:	7812      	ldrb	r2, [r2, #0]
 8000c28:	709a      	strb	r2, [r3, #2]
    hal.WriteCommand(SX1280_RADIO_SET_MODULATIONPARAMS, rfparams, sizeof(rfparams));
 8000c2a:	187a      	adds	r2, r7, r1
 8000c2c:	4804      	ldr	r0, [pc, #16]	; (8000c40 <_ZN12SX1280Driver19ConfigModParamsFLRCEhhh+0x50>)
 8000c2e:	2303      	movs	r3, #3
 8000c30:	218b      	movs	r1, #139	; 0x8b
 8000c32:	f000 fb1f 	bl	8001274 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b005      	add	sp, #20
 8000c3c:	bd90      	pop	{r4, r7, pc}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	200000a8 	.word	0x200000a8

08000c44 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt>:
                                       uint8_t crc,
                                       uint8_t PreambleLength,
                                       uint8_t PayloadLength,
                                       uint32_t syncWord,
                                       uint16_t crcSeed)
{
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	000c      	movs	r4, r1
 8000c4e:	0010      	movs	r0, r2
 8000c50:	0019      	movs	r1, r3
 8000c52:	1cfb      	adds	r3, r7, #3
 8000c54:	1c22      	adds	r2, r4, #0
 8000c56:	701a      	strb	r2, [r3, #0]
 8000c58:	1cbb      	adds	r3, r7, #2
 8000c5a:	1c02      	adds	r2, r0, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	1c7b      	adds	r3, r7, #1
 8000c60:	1c0a      	adds	r2, r1, #0
 8000c62:	701a      	strb	r2, [r3, #0]
    if (PreambleLength < 8) PreambleLength = 8;
 8000c64:	1c7b      	adds	r3, r7, #1
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b07      	cmp	r3, #7
 8000c6a:	d802      	bhi.n	8000c72 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x2e>
 8000c6c:	1c7b      	adds	r3, r7, #1
 8000c6e:	2208      	movs	r2, #8
 8000c70:	701a      	strb	r2, [r3, #0]
        PreambleLength = ((PreambleLength / 4) - 1) << 4;
 8000c72:	1c7b      	adds	r3, r7, #1
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	089b      	lsrs	r3, r3, #2
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	1c7b      	adds	r3, r7, #1
 8000c80:	0112      	lsls	r2, r2, #4
 8000c82:	701a      	strb	r2, [r3, #0]
    crc = (crc) ? SX1280_FLRC_CRC_2_BYTE : SX1280_FLRC_CRC_OFF;
 8000c84:	1cbb      	adds	r3, r7, #2
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x4c>
 8000c8c:	2220      	movs	r2, #32
 8000c8e:	e000      	b.n	8000c92 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x4e>
 8000c90:	2200      	movs	r2, #0
 8000c92:	1cbb      	adds	r3, r7, #2
 8000c94:	701a      	strb	r2, [r3, #0]

    uint8_t buf[7];
    buf[0] = PreambleLength;                    // AGCPreambleLength
 8000c96:	2408      	movs	r4, #8
 8000c98:	193b      	adds	r3, r7, r4
 8000c9a:	1c7a      	adds	r2, r7, #1
 8000c9c:	7812      	ldrb	r2, [r2, #0]
 8000c9e:	701a      	strb	r2, [r3, #0]
    buf[1] = SX1280_FLRC_SYNC_WORD_LEN_P32S;    // SyncWordLength
 8000ca0:	193b      	adds	r3, r7, r4
 8000ca2:	2204      	movs	r2, #4
 8000ca4:	705a      	strb	r2, [r3, #1]
    buf[2] = SX1280_FLRC_RX_MATCH_SYNC_WORD_1;  // SyncWordMatch
 8000ca6:	193b      	adds	r3, r7, r4
 8000ca8:	2210      	movs	r2, #16
 8000caa:	709a      	strb	r2, [r3, #2]
    buf[3] = HeaderType;                        // PacketType
 8000cac:	193b      	adds	r3, r7, r4
 8000cae:	1cfa      	adds	r2, r7, #3
 8000cb0:	7812      	ldrb	r2, [r2, #0]
 8000cb2:	70da      	strb	r2, [r3, #3]
    buf[4] = PayloadLength;                     // PayloadLength
 8000cb4:	193a      	adds	r2, r7, r4
 8000cb6:	2320      	movs	r3, #32
 8000cb8:	18fb      	adds	r3, r7, r3
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	7113      	strb	r3, [r2, #4]
    buf[5] = (crc << 4);                        // CrcLength
 8000cbe:	1cbb      	adds	r3, r7, #2
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	011b      	lsls	r3, r3, #4
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	715a      	strb	r2, [r3, #5]
    buf[6] = 0x08;                              // Must be whitening disabled
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	2208      	movs	r2, #8
 8000cce:	719a      	strb	r2, [r3, #6]
    hal.WriteCommand(SX1280_RADIO_SET_PACKETPARAMS, buf, sizeof(buf));
 8000cd0:	193a      	adds	r2, r7, r4
 8000cd2:	4822      	ldr	r0, [pc, #136]	; (8000d5c <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x118>)
 8000cd4:	2307      	movs	r3, #7
 8000cd6:	218c      	movs	r1, #140	; 0x8c
 8000cd8:	f000 facc 	bl	8001274 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>

    // CRC seed (use dedicated cipher)
    buf[0] = (uint8_t)(crcSeed >> 8);
 8000cdc:	2028      	movs	r0, #40	; 0x28
 8000cde:	183b      	adds	r3, r7, r0
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	0a1b      	lsrs	r3, r3, #8
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	0021      	movs	r1, r4
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	701a      	strb	r2, [r3, #0]
    buf[1] = (uint8_t)crcSeed;
 8000cee:	183b      	adds	r3, r7, r0
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	705a      	strb	r2, [r3, #1]
    hal.WriteRegister(SX1280_REG_FLRC_CRC_SEED, buf, 2);
 8000cf8:	000c      	movs	r4, r1
 8000cfa:	193a      	adds	r2, r7, r4
 8000cfc:	4918      	ldr	r1, [pc, #96]	; (8000d60 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x11c>)
 8000cfe:	4817      	ldr	r0, [pc, #92]	; (8000d5c <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x118>)
 8000d00:	2302      	movs	r3, #2
 8000d02:	f000 fb67 	bl	80013d4 <_ZN9SX1280Hal13WriteRegisterEtPhh>

    // CRC POLY 0x3D65
    buf[0] = 0x3D;
 8000d06:	193b      	adds	r3, r7, r4
 8000d08:	223d      	movs	r2, #61	; 0x3d
 8000d0a:	701a      	strb	r2, [r3, #0]
    buf[1] = 0x65;
 8000d0c:	193b      	adds	r3, r7, r4
 8000d0e:	2265      	movs	r2, #101	; 0x65
 8000d10:	705a      	strb	r2, [r3, #1]
    hal.WriteRegister(SX1280_REG_FLRC_CRC_POLY, buf, 2);
 8000d12:	193a      	adds	r2, r7, r4
 8000d14:	4913      	ldr	r1, [pc, #76]	; (8000d64 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x120>)
 8000d16:	4811      	ldr	r0, [pc, #68]	; (8000d5c <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x118>)
 8000d18:	2302      	movs	r3, #2
 8000d1a:	f000 fb5b 	bl	80013d4 <_ZN9SX1280Hal13WriteRegisterEtPhh>

    // Set SyncWord1
    buf[0] = (uint8_t)(syncWord >> 24);
 8000d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d20:	0e1b      	lsrs	r3, r3, #24
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	0021      	movs	r1, r4
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	701a      	strb	r2, [r3, #0]
    buf[1] = (uint8_t)(syncWord >> 16);
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2c:	0c1b      	lsrs	r3, r3, #16
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	705a      	strb	r2, [r3, #1]
    buf[2] = (uint8_t)(syncWord >> 8);
 8000d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d36:	0a1b      	lsrs	r3, r3, #8
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	709a      	strb	r2, [r3, #2]
    buf[3] = (uint8_t)syncWord;
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	70da      	strb	r2, [r3, #3]
    hal.WriteRegister(SX1280_REG_FLRC_SYNC_WORD, buf, 4);
 8000d46:	187a      	adds	r2, r7, r1
 8000d48:	4907      	ldr	r1, [pc, #28]	; (8000d68 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x124>)
 8000d4a:	4804      	ldr	r0, [pc, #16]	; (8000d5c <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x118>)
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	f000 fb41 	bl	80013d4 <_ZN9SX1280Hal13WriteRegisterEtPhh>
}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b005      	add	sp, #20
 8000d58:	bd90      	pop	{r4, r7, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	200000a8 	.word	0x200000a8
 8000d60:	000009c8 	.word	0x000009c8
 8000d64:	000009c6 	.word	0x000009c6
 8000d68:	000009cf 	.word	0x000009cf

08000d6c <_ZN12SX1280Driver15SetFrequencyRegEm>:
    hal.WriteCommand(SX1280_RADIO_SET_RFFREQUENCY, buf, sizeof(buf));
    currFreq = Reqfreq;
}

void SX1280Driver::SetFrequencyReg(uint32_t freq)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
    uint8_t buf[3] = {0};
 8000d76:	200c      	movs	r0, #12
 8000d78:	183b      	adds	r3, r7, r0
 8000d7a:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <_ZN12SX1280Driver15SetFrequencyRegEm+0x50>)
 8000d7c:	8812      	ldrh	r2, [r2, #0]
 8000d7e:	801a      	strh	r2, [r3, #0]
 8000d80:	2202      	movs	r2, #2
 8000d82:	2100      	movs	r1, #0
 8000d84:	5499      	strb	r1, [r3, r2]

    buf[0] = (uint8_t)((freq >> 16) & 0xFF);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	0c1b      	lsrs	r3, r3, #16
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	183b      	adds	r3, r7, r0
 8000d8e:	701a      	strb	r2, [r3, #0]
    buf[1] = (uint8_t)((freq >> 8) & 0xFF);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	0a1b      	lsrs	r3, r3, #8
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	183b      	adds	r3, r7, r0
 8000d98:	705a      	strb	r2, [r3, #1]
    buf[2] = (uint8_t)(freq & 0xFF);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	183b      	adds	r3, r7, r0
 8000da0:	709a      	strb	r2, [r3, #2]

    hal.WriteCommand(SX1280_RADIO_SET_RFFREQUENCY, buf, sizeof(buf));
 8000da2:	183a      	adds	r2, r7, r0
 8000da4:	4806      	ldr	r0, [pc, #24]	; (8000dc0 <_ZN12SX1280Driver15SetFrequencyRegEm+0x54>)
 8000da6:	2303      	movs	r3, #3
 8000da8:	2186      	movs	r1, #134	; 0x86
 8000daa:	f000 fa63 	bl	8001274 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
    currFreq = freq;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	683a      	ldr	r2, [r7, #0]
 8000db2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b004      	add	sp, #16
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	08009a08 	.word	0x08009a08
 8000dc0:	200000a8 	.word	0x200000a8

08000dc4 <_ZN12SX1280Driver11SetFIFOaddrEhh>:
    efeHz = 1.55 * efe / (1600.0f / 800000.0f);
    return efeHz;
}

void SX1280Driver::SetFIFOaddr(uint8_t txBaseAddr, uint8_t rxBaseAddr)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	0008      	movs	r0, r1
 8000dce:	0011      	movs	r1, r2
 8000dd0:	1cfb      	adds	r3, r7, #3
 8000dd2:	1c02      	adds	r2, r0, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
 8000dd6:	1cbb      	adds	r3, r7, #2
 8000dd8:	1c0a      	adds	r2, r1, #0
 8000dda:	701a      	strb	r2, [r3, #0]
    uint8_t buf[2];

    buf[0] = txBaseAddr;
 8000ddc:	210c      	movs	r1, #12
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	1cfa      	adds	r2, r7, #3
 8000de2:	7812      	ldrb	r2, [r2, #0]
 8000de4:	701a      	strb	r2, [r3, #0]
    buf[1] = rxBaseAddr;
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	1cba      	adds	r2, r7, #2
 8000dea:	7812      	ldrb	r2, [r2, #0]
 8000dec:	705a      	strb	r2, [r3, #1]
    hal.WriteCommand(SX1280_RADIO_SET_BUFFERBASEADDRESS, buf, sizeof(buf));
 8000dee:	187a      	adds	r2, r7, r1
 8000df0:	4804      	ldr	r0, [pc, #16]	; (8000e04 <_ZN12SX1280Driver11SetFIFOaddrEhh+0x40>)
 8000df2:	2302      	movs	r3, #2
 8000df4:	218f      	movs	r1, #143	; 0x8f
 8000df6:	f000 fa3d 	bl	8001274 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b004      	add	sp, #16
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	200000a8 	.word	0x200000a8

08000e08 <_ZN12SX1280Driver15SetDioIrqParamsEtttt>:

void SX1280Driver::SetDioIrqParams(uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask)
{
 8000e08:	b5b0      	push	{r4, r5, r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	000c      	movs	r4, r1
 8000e12:	0010      	movs	r0, r2
 8000e14:	0019      	movs	r1, r3
 8000e16:	250a      	movs	r5, #10
 8000e18:	197b      	adds	r3, r7, r5
 8000e1a:	1c22      	adds	r2, r4, #0
 8000e1c:	801a      	strh	r2, [r3, #0]
 8000e1e:	2408      	movs	r4, #8
 8000e20:	193b      	adds	r3, r7, r4
 8000e22:	1c02      	adds	r2, r0, #0
 8000e24:	801a      	strh	r2, [r3, #0]
 8000e26:	1dbb      	adds	r3, r7, #6
 8000e28:	1c0a      	adds	r2, r1, #0
 8000e2a:	801a      	strh	r2, [r3, #0]
    uint8_t buf[8];

    buf[0] = (uint8_t)((irqMask >> 8) & 0x00FF);
 8000e2c:	0028      	movs	r0, r5
 8000e2e:	183b      	adds	r3, r7, r0
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	0a1b      	lsrs	r3, r3, #8
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	2110      	movs	r1, #16
 8000e3a:	187b      	adds	r3, r7, r1
 8000e3c:	701a      	strb	r2, [r3, #0]
    buf[1] = (uint8_t)(irqMask & 0x00FF);
 8000e3e:	183b      	adds	r3, r7, r0
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	705a      	strb	r2, [r3, #1]
    buf[2] = (uint8_t)((dio1Mask >> 8) & 0x00FF);
 8000e48:	193b      	adds	r3, r7, r4
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	187b      	adds	r3, r7, r1
 8000e54:	709a      	strb	r2, [r3, #2]
    buf[3] = (uint8_t)(dio1Mask & 0x00FF);
 8000e56:	193b      	adds	r3, r7, r4
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	70da      	strb	r2, [r3, #3]
    buf[4] = (uint8_t)((dio2Mask >> 8) & 0x00FF);
 8000e60:	1dbb      	adds	r3, r7, #6
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	187b      	adds	r3, r7, r1
 8000e6c:	711a      	strb	r2, [r3, #4]
    buf[5] = (uint8_t)(dio2Mask & 0x00FF);
 8000e6e:	1dbb      	adds	r3, r7, #6
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	715a      	strb	r2, [r3, #5]
    buf[6] = (uint8_t)((dio3Mask >> 8) & 0x00FF);
 8000e78:	2028      	movs	r0, #40	; 0x28
 8000e7a:	183b      	adds	r3, r7, r0
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	0a1b      	lsrs	r3, r3, #8
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	719a      	strb	r2, [r3, #6]
    buf[7] = (uint8_t)(dio3Mask & 0x00FF);
 8000e88:	183b      	adds	r3, r7, r0
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	187b      	adds	r3, r7, r1
 8000e90:	71da      	strb	r2, [r3, #7]

    hal.WriteCommand(SX1280_RADIO_SET_DIOIRQPARAMS, buf, sizeof(buf));
 8000e92:	187a      	adds	r2, r7, r1
 8000e94:	4804      	ldr	r0, [pc, #16]	; (8000ea8 <_ZN12SX1280Driver15SetDioIrqParamsEtttt+0xa0>)
 8000e96:	2308      	movs	r3, #8
 8000e98:	218d      	movs	r1, #141	; 0x8d
 8000e9a:	f000 f9eb 	bl	8001274 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b006      	add	sp, #24
 8000ea4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	200000a8 	.word	0x200000a8

08000eac <_ZN12SX1280Driver12GetIrqStatusEv>:

uint16_t SX1280Driver::GetIrqStatus()
{
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
    uint8_t status[2];

    hal.ReadCommand(SX1280_RADIO_GET_IRQSTATUS, status, 2);
 8000eb4:	240c      	movs	r4, #12
 8000eb6:	193a      	adds	r2, r7, r4
 8000eb8:	4809      	ldr	r0, [pc, #36]	; (8000ee0 <_ZN12SX1280Driver12GetIrqStatusEv+0x34>)
 8000eba:	2302      	movs	r3, #2
 8000ebc:	2115      	movs	r1, #21
 8000ebe:	f000 fa1f 	bl	8001300 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh>
    return status[0] << 8 | status[1];
 8000ec2:	0021      	movs	r1, r4
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	021b      	lsls	r3, r3, #8
 8000eca:	b21a      	sxth	r2, r3
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	785b      	ldrb	r3, [r3, #1]
 8000ed0:	b21b      	sxth	r3, r3
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	b21b      	sxth	r3, r3
 8000ed6:	b29b      	uxth	r3, r3
}
 8000ed8:	0018      	movs	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b005      	add	sp, #20
 8000ede:	bd90      	pop	{r4, r7, pc}
 8000ee0:	200000a8 	.word	0x200000a8

08000ee4 <_ZN12SX1280Driver14ClearIrqStatusEt>:

void SX1280Driver::ClearIrqStatus(uint16_t irqMask)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	000a      	movs	r2, r1
 8000eee:	1cbb      	adds	r3, r7, #2
 8000ef0:	801a      	strh	r2, [r3, #0]
    uint8_t buf[2];

    buf[0] = (uint8_t)(((uint16_t)irqMask >> 8) & 0x00FF);
 8000ef2:	1cbb      	adds	r3, r7, #2
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	0a1b      	lsrs	r3, r3, #8
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	210c      	movs	r1, #12
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	701a      	strb	r2, [r3, #0]
    buf[1] = (uint8_t)((uint16_t)irqMask & 0x00FF);
 8000f02:	1cbb      	adds	r3, r7, #2
 8000f04:	881b      	ldrh	r3, [r3, #0]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	187b      	adds	r3, r7, r1
 8000f0a:	705a      	strb	r2, [r3, #1]

    hal.WriteCommand(SX1280_RADIO_CLR_IRQSTATUS, buf, sizeof(buf));
 8000f0c:	187a      	adds	r2, r7, r1
 8000f0e:	4804      	ldr	r0, [pc, #16]	; (8000f20 <_ZN12SX1280Driver14ClearIrqStatusEt+0x3c>)
 8000f10:	2302      	movs	r3, #2
 8000f12:	2197      	movs	r1, #151	; 0x97
 8000f14:	f000 f9ae 	bl	8001274 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
}
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b004      	add	sp, #16
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	200000a8 	.word	0x200000a8

08000f24 <_ZN12SX1280Driver7TXnbISREv>:

void SX1280Driver::TXnbISR()
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
    currOpmode = SX1280_MODE_FS; // radio goes to FS after TX
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2234      	movs	r2, #52	; 0x34
 8000f30:	2104      	movs	r1, #4
 8000f32:	5499      	strb	r1, [r3, r2]
#ifdef DEBUG_SX1280_OTA_TIMING
    endTX = micros();
    DBGLN("TOA: %d", endTX - beginTX);
#endif
    if(TXdoneCallback) TXdoneCallback();
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d002      	beq.n	8000f42 <_ZN12SX1280Driver7TXnbISREv+0x1e>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	4798      	blx	r3
}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b002      	add	sp, #8
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <_ZN12SX1280Driver4TXnbEv>:

uint8_t FIFOaddr = 0;

void SX1280Driver::TXnb()
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
    if (currOpmode == SX1280_MODE_TX) //catch TX timeout
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2234      	movs	r2, #52	; 0x34
 8000f58:	5c9b      	ldrb	r3, [r3, r2]
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d109      	bne.n	8000f72 <_ZN12SX1280Driver4TXnbEv+0x26>
    {
        //DBGLN("Timeout!");
        SetMode(SX1280_MODE_FS);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2104      	movs	r1, #4
 8000f62:	0018      	movs	r0, r3
 8000f64:	f7ff fd38 	bl	80009d8 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>
        TXnbISR();
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f7ff ffda 	bl	8000f24 <_ZN12SX1280Driver7TXnbISREv>
        return;
 8000f70:	e02b      	b.n	8000fca <_ZN12SX1280Driver4TXnbEv+0x7e>
    }
    hal.TXenable();                      // do first to allow PA stablise
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <_ZN12SX1280Driver4TXnbEv+0x84>)
 8000f74:	0018      	movs	r0, r3
 8000f76:	f000 fbcd 	bl	8001714 <_ZN9SX1280Hal8TXenableEv>
    hal.TXenable();
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <_ZN12SX1280Driver4TXnbEv+0x84>)
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f000 fbc9 	bl	8001714 <_ZN9SX1280Hal8TXenableEv>
    hal.TXenable();
 8000f82:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <_ZN12SX1280Driver4TXnbEv+0x84>)
 8000f84:	0018      	movs	r0, r3
 8000f86:	f000 fbc5 	bl	8001714 <_ZN9SX1280Hal8TXenableEv>
    hal.TXenable();
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <_ZN12SX1280Driver4TXnbEv+0x84>)
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f000 fbc1 	bl	8001714 <_ZN9SX1280Hal8TXenableEv>
    hal.TXenable();
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <_ZN12SX1280Driver4TXnbEv+0x84>)
 8000f94:	0018      	movs	r0, r3
 8000f96:	f000 fbbd 	bl	8001714 <_ZN9SX1280Hal8TXenableEv>
    hal.TXenable();
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <_ZN12SX1280Driver4TXnbEv+0x84>)
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f000 fbb9 	bl	8001714 <_ZN9SX1280Hal8TXenableEv>
    hal.TXenable();
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <_ZN12SX1280Driver4TXnbEv+0x84>)
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f000 fbb5 	bl	8001714 <_ZN9SX1280Hal8TXenableEv>
    hal.WriteBuffer(0x00, TXdataBuffer, PayloadLength); //todo fix offset to equal fifo addr
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3308      	adds	r3, #8
 8000fae:	001a      	movs	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2130      	movs	r1, #48	; 0x30
 8000fb4:	5c5b      	ldrb	r3, [r3, r1]
 8000fb6:	4806      	ldr	r0, [pc, #24]	; (8000fd0 <_ZN12SX1280Driver4TXnbEv+0x84>)
 8000fb8:	2100      	movs	r1, #0
 8000fba:	f000 fadb 	bl	8001574 <_ZN9SX1280Hal11WriteBufferEhPVhh>
    instance->SetMode(SX1280_MODE_TX);
 8000fbe:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <_ZN12SX1280Driver4TXnbEv+0x88>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2106      	movs	r1, #6
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f7ff fd07 	bl	80009d8 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>
#ifdef DEBUG_SX1280_OTA_TIMING
    beginTX = micros();
#endif
}
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b002      	add	sp, #8
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200000a8 	.word	0x200000a8
 8000fd4:	200000ac 	.word	0x200000ac

08000fd8 <_ZN12SX1280Driver7RXnbISREv>:

void SX1280Driver::RXnbISR()
{
 8000fd8:	b5b0      	push	{r4, r5, r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
    // In continuous receive mode, the device stays in Rx mode
    if (timeout != 0xFFFF)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fe4:	4a14      	ldr	r2, [pc, #80]	; (8001038 <_ZN12SX1280Driver7RXnbISREv+0x60>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d003      	beq.n	8000ff2 <_ZN12SX1280Driver7RXnbISREv+0x1a>
    {
        // From table 11-28, pg 81 datasheet rev 3.2
        // upon successsful receipt, when the timer is active or in single mode, it returns to STDBY_RC
        // but because we have AUTO_FS enabled we automatically transition to state SX1280_MODE_FS
        currOpmode = SX1280_MODE_FS;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2234      	movs	r2, #52	; 0x34
 8000fee:	2104      	movs	r1, #4
 8000ff0:	5499      	strb	r1, [r3, r2]
    }
    uint8_t FIFOaddr = GetRxBufferAddr();
 8000ff2:	250f      	movs	r5, #15
 8000ff4:	197c      	adds	r4, r7, r5
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f000 f835 	bl	8001068 <_ZN12SX1280Driver15GetRxBufferAddrEv>
 8000ffe:	0003      	movs	r3, r0
 8001000:	7023      	strb	r3, [r4, #0]
    hal.ReadBuffer(FIFOaddr, RXdataBuffer, PayloadLength);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3318      	adds	r3, #24
 8001006:	001a      	movs	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2130      	movs	r1, #48	; 0x30
 800100c:	5c5c      	ldrb	r4, [r3, r1]
 800100e:	197b      	adds	r3, r7, r5
 8001010:	7819      	ldrb	r1, [r3, #0]
 8001012:	480a      	ldr	r0, [pc, #40]	; (800103c <_ZN12SX1280Driver7RXnbISREv+0x64>)
 8001014:	0023      	movs	r3, r4
 8001016:	f000 faff 	bl	8001618 <_ZN9SX1280Hal10ReadBufferEhPVhh>
    GetLastPacketStats();
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	0018      	movs	r0, r3
 800101e:	f000 f83b 	bl	8001098 <_ZN12SX1280Driver18GetLastPacketStatsEv>
    if(RXdoneCallback) RXdoneCallback();
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d002      	beq.n	8001030 <_ZN12SX1280Driver7RXnbISREv+0x58>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4798      	blx	r3
}
 8001030:	46c0      	nop			; (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	b004      	add	sp, #16
 8001036:	bdb0      	pop	{r4, r5, r7, pc}
 8001038:	0000ffff 	.word	0x0000ffff
 800103c:	200000a8 	.word	0x200000a8

08001040 <_ZN12SX1280Driver4RXnbEv>:

void SX1280Driver::RXnb()
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
    hal.RXenable();
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <_ZN12SX1280Driver4RXnbEv+0x24>)
 800104a:	0018      	movs	r0, r3
 800104c:	f000 fb82 	bl	8001754 <_ZN9SX1280Hal8RXenableEv>
    SetMode(SX1280_MODE_RX);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2105      	movs	r1, #5
 8001054:	0018      	movs	r0, r3
 8001056:	f7ff fcbf 	bl	80009d8 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>
}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	46bd      	mov	sp, r7
 800105e:	b002      	add	sp, #8
 8001060:	bd80      	pop	{r7, pc}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	200000a8 	.word	0x200000a8

08001068 <_ZN12SX1280Driver15GetRxBufferAddrEv>:

uint8_t SX1280Driver::GetRxBufferAddr()
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
    uint8_t status[2] = {0};
 8001070:	210c      	movs	r1, #12
 8001072:	187b      	adds	r3, r7, r1
 8001074:	2200      	movs	r2, #0
 8001076:	801a      	strh	r2, [r3, #0]
    hal.ReadCommand(SX1280_RADIO_GET_RXBUFFERSTATUS, status, 2);
 8001078:	000c      	movs	r4, r1
 800107a:	187a      	adds	r2, r7, r1
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <_ZN12SX1280Driver15GetRxBufferAddrEv+0x2c>)
 800107e:	2302      	movs	r3, #2
 8001080:	2117      	movs	r1, #23
 8001082:	f000 f93d 	bl	8001300 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh>
    return status[1];
 8001086:	193b      	adds	r3, r7, r4
 8001088:	785b      	ldrb	r3, [r3, #1]
}
 800108a:	0018      	movs	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	b005      	add	sp, #20
 8001090:	bd90      	pop	{r4, r7, pc}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	200000a8 	.word	0x200000a8

08001098 <_ZN12SX1280Driver18GetLastPacketStatsEv>:
    hal.ReadCommand(SX1280_RADIO_GET_RSSIINST, (uint8_t *)&status, 1);
    return -(int8_t)(status / 2);
}

void SX1280Driver::GetLastPacketStats()
{
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
    uint8_t status[2];

    hal.ReadCommand(SX1280_RADIO_GET_PACKETSTATUS, status, 2);
 80010a0:	240c      	movs	r4, #12
 80010a2:	193a      	adds	r2, r7, r4
 80010a4:	481a      	ldr	r0, [pc, #104]	; (8001110 <_ZN12SX1280Driver18GetLastPacketStatsEv+0x78>)
 80010a6:	2302      	movs	r3, #2
 80010a8:	211d      	movs	r1, #29
 80010aa:	f000 f929 	bl	8001300 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh>
    LastPacketRSSI = -(int8_t)(status[0] / 2);
 80010ae:	0020      	movs	r0, r4
 80010b0:	183b      	adds	r3, r7, r0
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	085b      	lsrs	r3, r3, #1
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	425b      	negs	r3, r3
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	b259      	sxtb	r1, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2232      	movs	r2, #50	; 0x32
 80010c2:	5499      	strb	r1, [r3, r2]
    LastPacketSNR = (int8_t)status[1] / 4;
 80010c4:	183b      	adds	r3, r7, r0
 80010c6:	785b      	ldrb	r3, [r3, #1]
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	da00      	bge.n	80010d0 <_ZN12SX1280Driver18GetLastPacketStatsEv+0x38>
 80010ce:	3303      	adds	r3, #3
 80010d0:	109b      	asrs	r3, r3, #2
 80010d2:	b259      	sxtb	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2233      	movs	r2, #51	; 0x33
 80010d8:	5499      	strb	r1, [r3, r2]
    // https://www.mouser.com/datasheet/2/761/DS_SX1280-1_V2.2-1511144.pdf
    // need to subtract SNR from RSSI when SNR <= 0;
    int8_t negOffset = (LastPacketSNR < 0) ? LastPacketSNR : 0;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2233      	movs	r2, #51	; 0x33
 80010de:	569b      	ldrsb	r3, [r3, r2]
 80010e0:	220f      	movs	r2, #15
 80010e2:	18ba      	adds	r2, r7, r2
 80010e4:	b259      	sxtb	r1, r3
 80010e6:	2900      	cmp	r1, #0
 80010e8:	dd00      	ble.n	80010ec <_ZN12SX1280Driver18GetLastPacketStatsEv+0x54>
 80010ea:	2300      	movs	r3, #0
 80010ec:	7013      	strb	r3, [r2, #0]
    LastPacketRSSI += negOffset;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2232      	movs	r2, #50	; 0x32
 80010f2:	569b      	ldrsb	r3, [r3, r2]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	230f      	movs	r3, #15
 80010f8:	18fb      	adds	r3, r7, r3
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	18d3      	adds	r3, r2, r3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	b259      	sxtb	r1, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2232      	movs	r2, #50	; 0x32
 8001106:	5499      	strb	r1, [r3, r2]
}
 8001108:	46c0      	nop			; (mov r8, r8)
 800110a:	46bd      	mov	sp, r7
 800110c:	b005      	add	sp, #20
 800110e:	bd90      	pop	{r4, r7, pc}
 8001110:	200000a8 	.word	0x200000a8

08001114 <_ZN12SX1280Driver11IsrCallbackEv>:

void SX1280Driver::IsrCallback()
{
 8001114:	b590      	push	{r4, r7, lr}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
    uint16_t irqStatus = instance->GetIrqStatus();
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <_ZN12SX1280Driver11IsrCallbackEv+0x5c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	1dbc      	adds	r4, r7, #6
 8001120:	0018      	movs	r0, r3
 8001122:	f7ff fec3 	bl	8000eac <_ZN12SX1280Driver12GetIrqStatusEv>
 8001126:	0003      	movs	r3, r0
 8001128:	8023      	strh	r3, [r4, #0]
    instance->ClearIrqStatus(SX1280_IRQ_RADIO_ALL);
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <_ZN12SX1280Driver11IsrCallbackEv+0x5c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a11      	ldr	r2, [pc, #68]	; (8001174 <_ZN12SX1280Driver11IsrCallbackEv+0x60>)
 8001130:	0011      	movs	r1, r2
 8001132:	0018      	movs	r0, r3
 8001134:	f7ff fed6 	bl	8000ee4 <_ZN12SX1280Driver14ClearIrqStatusEt>
    if (irqStatus & SX1280_IRQ_TX_DONE)
 8001138:	1dbb      	adds	r3, r7, #6
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	2201      	movs	r2, #1
 800113e:	4013      	ands	r3, r2
 8001140:	d008      	beq.n	8001154 <_ZN12SX1280Driver11IsrCallbackEv+0x40>
    {
        hal.TXRXdisable();
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <_ZN12SX1280Driver11IsrCallbackEv+0x64>)
 8001144:	0018      	movs	r0, r3
 8001146:	f000 fb25 	bl	8001794 <_ZN9SX1280Hal11TXRXdisableEv>
        instance->TXnbISR();
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <_ZN12SX1280Driver11IsrCallbackEv+0x5c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	0018      	movs	r0, r3
 8001150:	f7ff fee8 	bl	8000f24 <_ZN12SX1280Driver7TXnbISREv>
    }
    if (irqStatus & SX1280_IRQ_RX_DONE)
 8001154:	1dbb      	adds	r3, r7, #6
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	2202      	movs	r2, #2
 800115a:	4013      	ands	r3, r2
 800115c:	d004      	beq.n	8001168 <_ZN12SX1280Driver11IsrCallbackEv+0x54>
        instance->RXnbISR();
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <_ZN12SX1280Driver11IsrCallbackEv+0x5c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	0018      	movs	r0, r3
 8001164:	f7ff ff38 	bl	8000fd8 <_ZN12SX1280Driver7RXnbISREv>
}
 8001168:	46c0      	nop			; (mov r8, r8)
 800116a:	46bd      	mov	sp, r7
 800116c:	b003      	add	sp, #12
 800116e:	bd90      	pop	{r4, r7, pc}
 8001170:	200000ac 	.word	0x200000ac
 8001174:	0000ffff 	.word	0x0000ffff
 8001178:	200000a8 	.word	0x200000a8

0800117c <_Z41__static_initialization_and_destruction_0ii>:
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d107      	bne.n	800119c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d103      	bne.n	800119c <_Z41__static_initialization_and_destruction_0ii+0x20>
SX1280Hal hal;
 8001194:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001196:	0018      	movs	r0, r3
 8001198:	f000 f814 	bl	80011c4 <_ZN9SX1280HalC1Ev>
}
 800119c:	46c0      	nop			; (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	b002      	add	sp, #8
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	0000ffff 	.word	0x0000ffff
 80011a8:	200000a8 	.word	0x200000a8

080011ac <_GLOBAL__sub_I_hal>:
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4b03      	ldr	r3, [pc, #12]	; (80011c0 <_GLOBAL__sub_I_hal+0x14>)
 80011b2:	0019      	movs	r1, r3
 80011b4:	2001      	movs	r0, #1
 80011b6:	f7ff ffe1 	bl	800117c <_Z41__static_initialization_and_destruction_0ii>
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	0000ffff 	.word	0x0000ffff

080011c4 <_ZN9SX1280HalC1Ev>:

SX1280Hal *SX1280Hal::instance = NULL;

uint8_t OutBuffer[64];

SX1280Hal::SX1280Hal()
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
{
    instance = this;
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <_ZN9SX1280HalC1Ev+0x18>)
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	601a      	str	r2, [r3, #0]
}
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	0018      	movs	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b002      	add	sp, #8
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200000b0 	.word	0x200000b0

080011e0 <_ZN9SX1280Hal4initEv>:
{
    TXRXdisable(); // make sure the RX/TX amp pins are disabled
}

void SX1280Hal::init()
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

}
 80011e8:	46c0      	nop			; (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b002      	add	sp, #8
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <_ZN9SX1280Hal5resetEv>:

void SX1280Hal::reset(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	// We do not have this pin
}
 80011f8:	46c0      	nop			; (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b002      	add	sp, #8
 80011fe:	bd80      	pop	{r7, pc}

08001200 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>:

void SX1280Hal::WriteCommand(SX1280_RadioCommands_t command, uint8_t val)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	0008      	movs	r0, r1
 800120a:	0011      	movs	r1, r2
 800120c:	1cfb      	adds	r3, r7, #3
 800120e:	1c02      	adds	r2, r0, #0
 8001210:	701a      	strb	r2, [r3, #0]
 8001212:	1cbb      	adds	r3, r7, #2
 8001214:	1c0a      	adds	r2, r1, #0
 8001216:	701a      	strb	r2, [r3, #0]
    WaitOnBusy();
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	0018      	movs	r0, r3
 800121c:	f000 fa50 	bl	80016c0 <_ZN9SX1280Hal10WaitOnBusyEv>
    OutBuffer[0] = command;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x68>)
 8001222:	1cfa      	adds	r2, r7, #3
 8001224:	7812      	ldrb	r2, [r2, #0]
 8001226:	701a      	strb	r2, [r3, #0]
    OutBuffer[1] = val;
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x68>)
 800122a:	1cba      	adds	r2, r7, #2
 800122c:	7812      	ldrb	r2, [r2, #0]
 800122e:	705a      	strb	r2, [r3, #1]
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x6c>)
 8001232:	2200      	movs	r2, #0
 8001234:	2101      	movs	r1, #1
 8001236:	0018      	movs	r0, r3
 8001238:	f003 fbd1 	bl	80049de <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(RADIO_SPI, OutBuffer, 2, 5);
 800123c:	490a      	ldr	r1, [pc, #40]	; (8001268 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x68>)
 800123e:	480c      	ldr	r0, [pc, #48]	; (8001270 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x70>)
 8001240:	2305      	movs	r3, #5
 8001242:	2202      	movs	r2, #2
 8001244:	f004 fbbe 	bl	80059c4 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x6c>)
 800124a:	2201      	movs	r2, #1
 800124c:	2101      	movs	r1, #1
 800124e:	0018      	movs	r0, r3
 8001250:	f003 fbc5 	bl	80049de <HAL_GPIO_WritePin>

    BusyDelay(12);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	210c      	movs	r1, #12
 8001258:	0018      	movs	r0, r3
 800125a:	f7ff fa1f 	bl	800069c <_ZNK9SX1280Hal9BusyDelayEm>
}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	46bd      	mov	sp, r7
 8001262:	b002      	add	sp, #8
 8001264:	bd80      	pop	{r7, pc}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	200000b4 	.word	0x200000b4
 800126c:	50000400 	.word	0x50000400
 8001270:	2000023c 	.word	0x2000023c

08001274 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>:

void SX1280Hal::WriteCommand(SX1280_RadioCommands_t command, uint8_t *buffer, uint8_t size)
{
 8001274:	b5b0      	push	{r4, r5, r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	0008      	movs	r0, r1
 800127e:	607a      	str	r2, [r7, #4]
 8001280:	0019      	movs	r1, r3
 8001282:	250b      	movs	r5, #11
 8001284:	197b      	adds	r3, r7, r5
 8001286:	1c02      	adds	r2, r0, #0
 8001288:	701a      	strb	r2, [r3, #0]
 800128a:	240a      	movs	r4, #10
 800128c:	193b      	adds	r3, r7, r4
 800128e:	1c0a      	adds	r2, r1, #0
 8001290:	701a      	strb	r2, [r3, #0]
    OutBuffer[0] = (uint8_t)command;
 8001292:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x7c>)
 8001294:	197a      	adds	r2, r7, r5
 8001296:	7812      	ldrb	r2, [r2, #0]
 8001298:	701a      	strb	r2, [r3, #0]
    memcpy(OutBuffer + 1, buffer, size);
 800129a:	4816      	ldr	r0, [pc, #88]	; (80012f4 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x80>)
 800129c:	193b      	adds	r3, r7, r4
 800129e:	781a      	ldrb	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	0019      	movs	r1, r3
 80012a4:	f007 fe7c 	bl	8008fa0 <memcpy>

    WaitOnBusy();
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	0018      	movs	r0, r3
 80012ac:	f000 fa08 	bl	80016c0 <_ZN9SX1280Hal10WaitOnBusyEv>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x84>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	2101      	movs	r1, #1
 80012b6:	0018      	movs	r0, r3
 80012b8:	f003 fb91 	bl	80049de <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(RADIO_SPI, OutBuffer, size+1, 5);
 80012bc:	193b      	adds	r3, r7, r4
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	490a      	ldr	r1, [pc, #40]	; (80012f0 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x7c>)
 80012c8:	480c      	ldr	r0, [pc, #48]	; (80012fc <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x88>)
 80012ca:	2305      	movs	r3, #5
 80012cc:	f004 fb7a 	bl	80059c4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x84>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	2101      	movs	r1, #1
 80012d6:	0018      	movs	r0, r3
 80012d8:	f003 fb81 	bl	80049de <HAL_GPIO_WritePin>

    BusyDelay(12);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	210c      	movs	r1, #12
 80012e0:	0018      	movs	r0, r3
 80012e2:	f7ff f9db 	bl	800069c <_ZNK9SX1280Hal9BusyDelayEm>
}
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	46bd      	mov	sp, r7
 80012ea:	b004      	add	sp, #16
 80012ec:	bdb0      	pop	{r4, r5, r7, pc}
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	200000b4 	.word	0x200000b4
 80012f4:	200000b5 	.word	0x200000b5
 80012f8:	50000400 	.word	0x50000400
 80012fc:	2000023c 	.word	0x2000023c

08001300 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh>:

void SX1280Hal::ReadCommand(SX1280_RadioCommands_t command, uint8_t *buffer, uint8_t size)
{
 8001300:	b5b0      	push	{r4, r5, r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af02      	add	r7, sp, #8
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	0008      	movs	r0, r1
 800130a:	607a      	str	r2, [r7, #4]
 800130c:	0019      	movs	r1, r3
 800130e:	240b      	movs	r4, #11
 8001310:	193b      	adds	r3, r7, r4
 8001312:	1c02      	adds	r2, r0, #0
 8001314:	701a      	strb	r2, [r3, #0]
 8001316:	230a      	movs	r3, #10
 8001318:	18fb      	adds	r3, r7, r3
 800131a:	1c0a      	adds	r2, r1, #0
 800131c:	701a      	strb	r2, [r3, #0]
    #define RADIO_GET_STATUS_BUF_SIZEOF 3 // special case for command == SX1280_RADIO_GET_STATUS, fixed 3 bytes packet size

    WaitOnBusy();
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	0018      	movs	r0, r3
 8001322:	f000 f9cd 	bl	80016c0 <_ZN9SX1280Hal10WaitOnBusyEv>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001326:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc4>)
 8001328:	2200      	movs	r2, #0
 800132a:	2101      	movs	r1, #1
 800132c:	0018      	movs	r0, r3
 800132e:	f003 fb56 	bl	80049de <HAL_GPIO_WritePin>

    if (command == SX1280_RADIO_GET_STATUS)
 8001332:	193b      	adds	r3, r7, r4
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2bc0      	cmp	r3, #192	; 0xc0
 8001338:	d116      	bne.n	8001368 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0x68>
    {
        OutBuffer[0] = (uint8_t)command;
 800133a:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 800133c:	193a      	adds	r2, r7, r4
 800133e:	7812      	ldrb	r2, [r2, #0]
 8001340:	701a      	strb	r2, [r3, #0]
        OutBuffer[1] = 0x00;
 8001342:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 8001344:	2200      	movs	r2, #0
 8001346:	705a      	strb	r2, [r3, #1]
        OutBuffer[2] = 0x00;
 8001348:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 800134a:	2200      	movs	r2, #0
 800134c:	709a      	strb	r2, [r3, #2]
        HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer, RADIO_GET_STATUS_BUF_SIZEOF, 5);
 800134e:	4a1e      	ldr	r2, [pc, #120]	; (80013c8 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 8001350:	491d      	ldr	r1, [pc, #116]	; (80013c8 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 8001352:	481e      	ldr	r0, [pc, #120]	; (80013cc <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xcc>)
 8001354:	2305      	movs	r3, #5
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2303      	movs	r3, #3
 800135a:	f004 fc8b 	bl	8005c74 <HAL_SPI_TransmitReceive>
        buffer[0] = OutBuffer[0];
 800135e:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 8001360:	781a      	ldrb	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	701a      	strb	r2, [r3, #0]
 8001366:	e022      	b.n	80013ae <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xae>
    }
    else
    {
        OutBuffer[0] = (uint8_t)command;
 8001368:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 800136a:	220b      	movs	r2, #11
 800136c:	18ba      	adds	r2, r7, r2
 800136e:	7812      	ldrb	r2, [r2, #0]
 8001370:	701a      	strb	r2, [r3, #0]
        OutBuffer[1] = 0x00;
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 8001374:	2200      	movs	r2, #0
 8001376:	705a      	strb	r2, [r3, #1]
        memcpy(OutBuffer + 2, buffer, size);
 8001378:	4815      	ldr	r0, [pc, #84]	; (80013d0 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xd0>)
 800137a:	250a      	movs	r5, #10
 800137c:	197b      	adds	r3, r7, r5
 800137e:	781a      	ldrb	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	0019      	movs	r1, r3
 8001384:	f007 fe0c 	bl	8008fa0 <memcpy>
        HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer, size+2, 5);
 8001388:	197b      	adds	r3, r7, r5
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b29b      	uxth	r3, r3
 800138e:	3302      	adds	r3, #2
 8001390:	b29b      	uxth	r3, r3
 8001392:	4a0d      	ldr	r2, [pc, #52]	; (80013c8 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 8001394:	490c      	ldr	r1, [pc, #48]	; (80013c8 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 8001396:	480d      	ldr	r0, [pc, #52]	; (80013cc <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xcc>)
 8001398:	2405      	movs	r4, #5
 800139a:	9400      	str	r4, [sp, #0]
 800139c:	f004 fc6a 	bl	8005c74 <HAL_SPI_TransmitReceive>
        memcpy(buffer, OutBuffer + 2, size);
 80013a0:	490b      	ldr	r1, [pc, #44]	; (80013d0 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xd0>)
 80013a2:	197b      	adds	r3, r7, r5
 80013a4:	781a      	ldrb	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	0018      	movs	r0, r3
 80013aa:	f007 fdf9 	bl	8008fa0 <memcpy>
    }
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80013ae:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc4>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	2101      	movs	r1, #1
 80013b4:	0018      	movs	r0, r3
 80013b6:	f003 fb12 	bl	80049de <HAL_GPIO_WritePin>
}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	46bd      	mov	sp, r7
 80013be:	b004      	add	sp, #16
 80013c0:	bdb0      	pop	{r4, r5, r7, pc}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	50000400 	.word	0x50000400
 80013c8:	200000b4 	.word	0x200000b4
 80013cc:	2000023c 	.word	0x2000023c
 80013d0:	200000b6 	.word	0x200000b6

080013d4 <_ZN9SX1280Hal13WriteRegisterEtPhh>:

void SX1280Hal::WriteRegister(uint16_t address, uint8_t *buffer, uint8_t size)
{
 80013d4:	b5b0      	push	{r4, r5, r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af02      	add	r7, sp, #8
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	0008      	movs	r0, r1
 80013de:	607a      	str	r2, [r7, #4]
 80013e0:	0019      	movs	r1, r3
 80013e2:	240a      	movs	r4, #10
 80013e4:	193b      	adds	r3, r7, r4
 80013e6:	1c02      	adds	r2, r0, #0
 80013e8:	801a      	strh	r2, [r3, #0]
 80013ea:	2509      	movs	r5, #9
 80013ec:	197b      	adds	r3, r7, r5
 80013ee:	1c0a      	adds	r2, r1, #0
 80013f0:	701a      	strb	r2, [r3, #0]
    OutBuffer[0] = (SX1280_RADIO_WRITE_REGISTER);
 80013f2:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x94>)
 80013f4:	2218      	movs	r2, #24
 80013f6:	701a      	strb	r2, [r3, #0]
    OutBuffer[1] = ((address & 0xFF00) >> 8);
 80013f8:	193b      	adds	r3, r7, r4
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	0a1b      	lsrs	r3, r3, #8
 80013fe:	b29b      	uxth	r3, r3
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x94>)
 8001404:	705a      	strb	r2, [r3, #1]
    OutBuffer[2] = (address & 0x00FF);
 8001406:	193b      	adds	r3, r7, r4
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	4b16      	ldr	r3, [pc, #88]	; (8001468 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x94>)
 800140e:	709a      	strb	r2, [r3, #2]

    memcpy(OutBuffer + 3, buffer, size);
 8001410:	4816      	ldr	r0, [pc, #88]	; (800146c <_ZN9SX1280Hal13WriteRegisterEtPhh+0x98>)
 8001412:	197b      	adds	r3, r7, r5
 8001414:	781a      	ldrb	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	0019      	movs	r1, r3
 800141a:	f007 fdc1 	bl	8008fa0 <memcpy>

    WaitOnBusy();
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	0018      	movs	r0, r3
 8001422:	f000 f94d 	bl	80016c0 <_ZN9SX1280Hal10WaitOnBusyEv>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001426:	4b12      	ldr	r3, [pc, #72]	; (8001470 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x9c>)
 8001428:	2200      	movs	r2, #0
 800142a:	2101      	movs	r1, #1
 800142c:	0018      	movs	r0, r3
 800142e:	f003 fad6 	bl	80049de <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer, size+3, 5);
 8001432:	197b      	adds	r3, r7, r5
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	b29b      	uxth	r3, r3
 8001438:	3303      	adds	r3, #3
 800143a:	b29b      	uxth	r3, r3
 800143c:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x94>)
 800143e:	490a      	ldr	r1, [pc, #40]	; (8001468 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x94>)
 8001440:	480c      	ldr	r0, [pc, #48]	; (8001474 <_ZN9SX1280Hal13WriteRegisterEtPhh+0xa0>)
 8001442:	2405      	movs	r4, #5
 8001444:	9400      	str	r4, [sp, #0]
 8001446:	f004 fc15 	bl	8005c74 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x9c>)
 800144c:	2201      	movs	r2, #1
 800144e:	2101      	movs	r1, #1
 8001450:	0018      	movs	r0, r3
 8001452:	f003 fac4 	bl	80049de <HAL_GPIO_WritePin>

    BusyDelay(12);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	210c      	movs	r1, #12
 800145a:	0018      	movs	r0, r3
 800145c:	f7ff f91e 	bl	800069c <_ZNK9SX1280Hal9BusyDelayEm>
}
 8001460:	46c0      	nop			; (mov r8, r8)
 8001462:	46bd      	mov	sp, r7
 8001464:	b004      	add	sp, #16
 8001466:	bdb0      	pop	{r4, r5, r7, pc}
 8001468:	200000b4 	.word	0x200000b4
 800146c:	200000b7 	.word	0x200000b7
 8001470:	50000400 	.word	0x50000400
 8001474:	2000023c 	.word	0x2000023c

08001478 <_ZN9SX1280Hal13WriteRegisterEth>:

void SX1280Hal::WriteRegister(uint16_t address, uint8_t value)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	0008      	movs	r0, r1
 8001482:	0011      	movs	r1, r2
 8001484:	1cbb      	adds	r3, r7, #2
 8001486:	1c02      	adds	r2, r0, #0
 8001488:	801a      	strh	r2, [r3, #0]
 800148a:	1c7b      	adds	r3, r7, #1
 800148c:	1c0a      	adds	r2, r1, #0
 800148e:	701a      	strb	r2, [r3, #0]
    WriteRegister(address, &value, 1);
 8001490:	1c7a      	adds	r2, r7, #1
 8001492:	1cbb      	adds	r3, r7, #2
 8001494:	8819      	ldrh	r1, [r3, #0]
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	2301      	movs	r3, #1
 800149a:	f7ff ff9b 	bl	80013d4 <_ZN9SX1280Hal13WriteRegisterEtPhh>
}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	46bd      	mov	sp, r7
 80014a2:	b002      	add	sp, #8
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <_ZN9SX1280Hal12ReadRegisterEtPhh>:

void SX1280Hal::ReadRegister(uint16_t address, uint8_t *buffer, uint8_t size)
{
 80014a8:	b5b0      	push	{r4, r5, r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af02      	add	r7, sp, #8
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	0008      	movs	r0, r1
 80014b2:	607a      	str	r2, [r7, #4]
 80014b4:	0019      	movs	r1, r3
 80014b6:	240a      	movs	r4, #10
 80014b8:	193b      	adds	r3, r7, r4
 80014ba:	1c02      	adds	r2, r0, #0
 80014bc:	801a      	strh	r2, [r3, #0]
 80014be:	2509      	movs	r5, #9
 80014c0:	197b      	adds	r3, r7, r5
 80014c2:	1c0a      	adds	r2, r1, #0
 80014c4:	701a      	strb	r2, [r3, #0]
    OutBuffer[0] = (SX1280_RADIO_READ_REGISTER);
 80014c6:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 80014c8:	2219      	movs	r2, #25
 80014ca:	701a      	strb	r2, [r3, #0]
    OutBuffer[1] = ((address & 0xFF00) >> 8);
 80014cc:	193b      	adds	r3, r7, r4
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	0a1b      	lsrs	r3, r3, #8
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b18      	ldr	r3, [pc, #96]	; (8001538 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 80014d8:	705a      	strb	r2, [r3, #1]
    OutBuffer[2] = (address & 0x00FF);
 80014da:	193b      	adds	r3, r7, r4
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	4b15      	ldr	r3, [pc, #84]	; (8001538 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 80014e2:	709a      	strb	r2, [r3, #2]
    OutBuffer[3] = 0x00;
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	70da      	strb	r2, [r3, #3]

    WaitOnBusy();
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	0018      	movs	r0, r3
 80014ee:	f000 f8e7 	bl	80016c0 <_ZN9SX1280Hal10WaitOnBusyEv>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80014f2:	4b12      	ldr	r3, [pc, #72]	; (800153c <_ZN9SX1280Hal12ReadRegisterEtPhh+0x94>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	2101      	movs	r1, #1
 80014f8:	0018      	movs	r0, r3
 80014fa:	f003 fa70 	bl	80049de <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer, size+4, 5);
 80014fe:	197b      	adds	r3, r7, r5
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	b29b      	uxth	r3, r3
 8001504:	3304      	adds	r3, #4
 8001506:	b29b      	uxth	r3, r3
 8001508:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 800150a:	490b      	ldr	r1, [pc, #44]	; (8001538 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 800150c:	480c      	ldr	r0, [pc, #48]	; (8001540 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x98>)
 800150e:	2405      	movs	r4, #5
 8001510:	9400      	str	r4, [sp, #0]
 8001512:	f004 fbaf 	bl	8005c74 <HAL_SPI_TransmitReceive>
    memcpy(buffer, OutBuffer + 4, size);
 8001516:	490b      	ldr	r1, [pc, #44]	; (8001544 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x9c>)
 8001518:	197b      	adds	r3, r7, r5
 800151a:	781a      	ldrb	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	0018      	movs	r0, r3
 8001520:	f007 fd3e 	bl	8008fa0 <memcpy>

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <_ZN9SX1280Hal12ReadRegisterEtPhh+0x94>)
 8001526:	2201      	movs	r2, #1
 8001528:	2101      	movs	r1, #1
 800152a:	0018      	movs	r0, r3
 800152c:	f003 fa57 	bl	80049de <HAL_GPIO_WritePin>
}
 8001530:	46c0      	nop			; (mov r8, r8)
 8001532:	46bd      	mov	sp, r7
 8001534:	b004      	add	sp, #16
 8001536:	bdb0      	pop	{r4, r5, r7, pc}
 8001538:	200000b4 	.word	0x200000b4
 800153c:	50000400 	.word	0x50000400
 8001540:	2000023c 	.word	0x2000023c
 8001544:	200000b8 	.word	0x200000b8

08001548 <_ZN9SX1280Hal12ReadRegisterEt>:

uint8_t SX1280Hal::ReadRegister(uint16_t address)
{
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	000a      	movs	r2, r1
 8001552:	1cbb      	adds	r3, r7, #2
 8001554:	801a      	strh	r2, [r3, #0]
    uint8_t data;
    ReadRegister(address, &data, 1);
 8001556:	240f      	movs	r4, #15
 8001558:	193a      	adds	r2, r7, r4
 800155a:	1cbb      	adds	r3, r7, #2
 800155c:	8819      	ldrh	r1, [r3, #0]
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	2301      	movs	r3, #1
 8001562:	f7ff ffa1 	bl	80014a8 <_ZN9SX1280Hal12ReadRegisterEtPhh>
    return data;
 8001566:	193b      	adds	r3, r7, r4
 8001568:	781b      	ldrb	r3, [r3, #0]
}
 800156a:	0018      	movs	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	b005      	add	sp, #20
 8001570:	bd90      	pop	{r4, r7, pc}
	...

08001574 <_ZN9SX1280Hal11WriteBufferEhPVhh>:

void SX1280Hal::WriteBuffer(uint8_t offset, volatile uint8_t *buffer, uint8_t size)
{
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af02      	add	r7, sp, #8
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	0008      	movs	r0, r1
 800157e:	607a      	str	r2, [r7, #4]
 8001580:	0019      	movs	r1, r3
 8001582:	240b      	movs	r4, #11
 8001584:	193b      	adds	r3, r7, r4
 8001586:	1c02      	adds	r2, r0, #0
 8001588:	701a      	strb	r2, [r3, #0]
 800158a:	230a      	movs	r3, #10
 800158c:	18fb      	adds	r3, r7, r3
 800158e:	1c0a      	adds	r2, r1, #0
 8001590:	701a      	strb	r2, [r3, #0]
    OutBuffer[0] = SX1280_RADIO_WRITE_BUFFER;
 8001592:	4b1e      	ldr	r3, [pc, #120]	; (800160c <_ZN9SX1280Hal11WriteBufferEhPVhh+0x98>)
 8001594:	221a      	movs	r2, #26
 8001596:	701a      	strb	r2, [r3, #0]
    OutBuffer[1] = offset;
 8001598:	4b1c      	ldr	r3, [pc, #112]	; (800160c <_ZN9SX1280Hal11WriteBufferEhPVhh+0x98>)
 800159a:	193a      	adds	r2, r7, r4
 800159c:	7812      	ldrb	r2, [r2, #0]
 800159e:	705a      	strb	r2, [r3, #1]

    for(int i = 0; i < size; i++){
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	230a      	movs	r3, #10
 80015a6:	18fb      	adds	r3, r7, r3
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	da0c      	bge.n	80015ca <_ZN9SX1280Hal11WriteBufferEhPVhh+0x56>
    	OutBuffer[i+2] = buffer[i];
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	18d2      	adds	r2, r2, r3
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	3302      	adds	r3, #2
 80015ba:	7812      	ldrb	r2, [r2, #0]
 80015bc:	b2d1      	uxtb	r1, r2
 80015be:	4a13      	ldr	r2, [pc, #76]	; (800160c <_ZN9SX1280Hal11WriteBufferEhPVhh+0x98>)
 80015c0:	54d1      	strb	r1, [r2, r3]
    for(int i = 0; i < size; i++){
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	3301      	adds	r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	e7ec      	b.n	80015a4 <_ZN9SX1280Hal11WriteBufferEhPVhh+0x30>
    }

    WaitOnBusy();
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	0018      	movs	r0, r3
 80015ce:	f000 f877 	bl	80016c0 <_ZN9SX1280Hal10WaitOnBusyEv>

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80015d2:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <_ZN9SX1280Hal11WriteBufferEhPVhh+0x9c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	2101      	movs	r1, #1
 80015d8:	0018      	movs	r0, r3
 80015da:	f003 fa00 	bl	80049de <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer, size+2, 5);
 80015de:	230a      	movs	r3, #10
 80015e0:	18fb      	adds	r3, r7, r3
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	3302      	adds	r3, #2
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	4a08      	ldr	r2, [pc, #32]	; (800160c <_ZN9SX1280Hal11WriteBufferEhPVhh+0x98>)
 80015ec:	4907      	ldr	r1, [pc, #28]	; (800160c <_ZN9SX1280Hal11WriteBufferEhPVhh+0x98>)
 80015ee:	4809      	ldr	r0, [pc, #36]	; (8001614 <_ZN9SX1280Hal11WriteBufferEhPVhh+0xa0>)
 80015f0:	2405      	movs	r4, #5
 80015f2:	9400      	str	r4, [sp, #0]
 80015f4:	f004 fb3e 	bl	8005c74 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <_ZN9SX1280Hal11WriteBufferEhPVhh+0x9c>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	2101      	movs	r1, #1
 80015fe:	0018      	movs	r0, r3
 8001600:	f003 f9ed 	bl	80049de <HAL_GPIO_WritePin>

}
 8001604:	46c0      	nop			; (mov r8, r8)
 8001606:	46bd      	mov	sp, r7
 8001608:	b007      	add	sp, #28
 800160a:	bd90      	pop	{r4, r7, pc}
 800160c:	200000b4 	.word	0x200000b4
 8001610:	50000400 	.word	0x50000400
 8001614:	2000023c 	.word	0x2000023c

08001618 <_ZN9SX1280Hal10ReadBufferEhPVhh>:

void SX1280Hal::ReadBuffer(uint8_t offset, volatile uint8_t *buffer, uint8_t size)
{
 8001618:	b5b0      	push	{r4, r5, r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af02      	add	r7, sp, #8
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	0008      	movs	r0, r1
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	0019      	movs	r1, r3
 8001626:	240b      	movs	r4, #11
 8001628:	193b      	adds	r3, r7, r4
 800162a:	1c02      	adds	r2, r0, #0
 800162c:	701a      	strb	r2, [r3, #0]
 800162e:	250a      	movs	r5, #10
 8001630:	197b      	adds	r3, r7, r5
 8001632:	1c0a      	adds	r2, r1, #0
 8001634:	701a      	strb	r2, [r3, #0]
    OutBuffer[0] = SX1280_RADIO_READ_BUFFER;
 8001636:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 8001638:	221b      	movs	r2, #27
 800163a:	701a      	strb	r2, [r3, #0]
    OutBuffer[1] = offset;
 800163c:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 800163e:	193a      	adds	r2, r7, r4
 8001640:	7812      	ldrb	r2, [r2, #0]
 8001642:	705a      	strb	r2, [r3, #1]
    OutBuffer[2] = 0x00;
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 8001646:	2200      	movs	r2, #0
 8001648:	709a      	strb	r2, [r3, #2]

    WaitOnBusy();
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	0018      	movs	r0, r3
 800164e:	f000 f837 	bl	80016c0 <_ZN9SX1280Hal10WaitOnBusyEv>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001652:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <_ZN9SX1280Hal10ReadBufferEhPVhh+0xa0>)
 8001654:	2200      	movs	r2, #0
 8001656:	2101      	movs	r1, #1
 8001658:	0018      	movs	r0, r3
 800165a:	f003 f9c0 	bl	80049de <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer, size+3, 5);
 800165e:	197b      	adds	r3, r7, r5
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b29b      	uxth	r3, r3
 8001664:	3303      	adds	r3, #3
 8001666:	b29b      	uxth	r3, r3
 8001668:	4a12      	ldr	r2, [pc, #72]	; (80016b4 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 800166a:	4912      	ldr	r1, [pc, #72]	; (80016b4 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 800166c:	4813      	ldr	r0, [pc, #76]	; (80016bc <_ZN9SX1280Hal10ReadBufferEhPVhh+0xa4>)
 800166e:	2405      	movs	r4, #5
 8001670:	9400      	str	r4, [sp, #0]
 8001672:	f004 faff 	bl	8005c74 <HAL_SPI_TransmitReceive>

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <_ZN9SX1280Hal10ReadBufferEhPVhh+0xa0>)
 8001678:	2201      	movs	r2, #1
 800167a:	2101      	movs	r1, #1
 800167c:	0018      	movs	r0, r3
 800167e:	f003 f9ae 	bl	80049de <HAL_GPIO_WritePin>

    for(int i = 0; i < size; i++){
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	230a      	movs	r3, #10
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	429a      	cmp	r2, r3
 8001690:	da0b      	bge.n	80016aa <_ZN9SX1280Hal10ReadBufferEhPVhh+0x92>
    	buffer[i] = OutBuffer[i+3];
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	1cda      	adds	r2, r3, #3
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	18cb      	adds	r3, r1, r3
 800169c:	4905      	ldr	r1, [pc, #20]	; (80016b4 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 800169e:	5c8a      	ldrb	r2, [r1, r2]
 80016a0:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < size; i++){
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3301      	adds	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	e7ed      	b.n	8001686 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x6e>
    }
}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b006      	add	sp, #24
 80016b0:	bdb0      	pop	{r4, r5, r7, pc}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	200000b4 	.word	0x200000b4
 80016b8:	50000400 	.word	0x50000400
 80016bc:	2000023c 	.word	0x2000023c

080016c0 <_ZN9SX1280Hal10WaitOnBusyEv>:

bool SX1280Hal::WaitOnBusy()
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
    uint32_t startTime = HAL_GetTick();
 80016c8:	f002 f97c 	bl	80039c4 <HAL_GetTick>
 80016cc:	0003      	movs	r3, r0
 80016ce:	60fb      	str	r3, [r7, #12]

    while (HAL_GPIO_ReadPin(BUSY_GPIO_Port, BUSY_Pin)) // wait until not busy or until timeout
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <_ZN9SX1280Hal10WaitOnBusyEv+0x50>)
 80016d2:	2102      	movs	r1, #2
 80016d4:	0018      	movs	r0, r3
 80016d6:	f003 f965 	bl	80049a4 <HAL_GPIO_ReadPin>
 80016da:	0003      	movs	r3, r0
 80016dc:	1e5a      	subs	r2, r3, #1
 80016de:	4193      	sbcs	r3, r2
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00f      	beq.n	8001706 <_ZN9SX1280Hal10WaitOnBusyEv+0x46>
    {
        if ((HAL_GetTick() - startTime) >= 2) // 2ms timeout
 80016e6:	f002 f96d 	bl	80039c4 <HAL_GetTick>
 80016ea:	0002      	movs	r2, r0
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2201      	movs	r2, #1
 80016f2:	429a      	cmp	r2, r3
 80016f4:	419b      	sbcs	r3, r3
 80016f6:	425b      	negs	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <_ZN9SX1280Hal10WaitOnBusyEv+0x42>
        {
            return false;
 80016fe:	2300      	movs	r3, #0
 8001700:	e002      	b.n	8001708 <_ZN9SX1280Hal10WaitOnBusyEv+0x48>
        }
        else
        {
        	asm("NOP");
 8001702:	46c0      	nop			; (mov r8, r8)
    while (HAL_GPIO_ReadPin(BUSY_GPIO_Port, BUSY_Pin)) // wait until not busy or until timeout
 8001704:	e7e4      	b.n	80016d0 <_ZN9SX1280Hal10WaitOnBusyEv+0x10>
        }
    }
    return true;
 8001706:	2301      	movs	r3, #1
}
 8001708:	0018      	movs	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	b004      	add	sp, #16
 800170e:	bd80      	pop	{r7, pc}
 8001710:	50000400 	.word	0x50000400

08001714 <_ZN9SX1280Hal8TXenableEv>:

void SX1280Hal::TXenable()
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	// Enable Front End
	HAL_GPIO_WritePin(FE_EN_GPIO_Port, FE_EN_Pin, GPIO_PIN_SET);
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	0059      	lsls	r1, r3, #1
 8001720:	23a0      	movs	r3, #160	; 0xa0
 8001722:	05db      	lsls	r3, r3, #23
 8001724:	2201      	movs	r2, #1
 8001726:	0018      	movs	r0, r3
 8001728:	f003 f959 	bl	80049de <HAL_GPIO_WritePin>

	// Enable TX
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_SET);
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <_ZN9SX1280Hal8TXenableEv+0x3c>)
 800172e:	2201      	movs	r2, #1
 8001730:	2140      	movs	r1, #64	; 0x40
 8001732:	0018      	movs	r0, r3
 8001734:	f003 f953 	bl	80049de <HAL_GPIO_WritePin>

	// Disable RX
	HAL_GPIO_WritePin(RX_EN_GPIO_Port, RX_EN_Pin, GPIO_PIN_RESET);
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	0119      	lsls	r1, r3, #4
 800173c:	23a0      	movs	r3, #160	; 0xa0
 800173e:	05db      	lsls	r3, r3, #23
 8001740:	2200      	movs	r2, #0
 8001742:	0018      	movs	r0, r3
 8001744:	f003 f94b 	bl	80049de <HAL_GPIO_WritePin>
}
 8001748:	46c0      	nop			; (mov r8, r8)
 800174a:	46bd      	mov	sp, r7
 800174c:	b002      	add	sp, #8
 800174e:	bd80      	pop	{r7, pc}
 8001750:	50000800 	.word	0x50000800

08001754 <_ZN9SX1280Hal8RXenableEv>:

void SX1280Hal::RXenable()
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	// Enable Front End
	HAL_GPIO_WritePin(FE_EN_GPIO_Port, FE_EN_Pin, GPIO_PIN_SET);
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	0059      	lsls	r1, r3, #1
 8001760:	23a0      	movs	r3, #160	; 0xa0
 8001762:	05db      	lsls	r3, r3, #23
 8001764:	2201      	movs	r2, #1
 8001766:	0018      	movs	r0, r3
 8001768:	f003 f939 	bl	80049de <HAL_GPIO_WritePin>

	// Disable TX
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <_ZN9SX1280Hal8RXenableEv+0x3c>)
 800176e:	2200      	movs	r2, #0
 8001770:	2140      	movs	r1, #64	; 0x40
 8001772:	0018      	movs	r0, r3
 8001774:	f003 f933 	bl	80049de <HAL_GPIO_WritePin>

	// Enable RX
	HAL_GPIO_WritePin(RX_EN_GPIO_Port, RX_EN_Pin, GPIO_PIN_SET);
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	0119      	lsls	r1, r3, #4
 800177c:	23a0      	movs	r3, #160	; 0xa0
 800177e:	05db      	lsls	r3, r3, #23
 8001780:	2201      	movs	r2, #1
 8001782:	0018      	movs	r0, r3
 8001784:	f003 f92b 	bl	80049de <HAL_GPIO_WritePin>
}
 8001788:	46c0      	nop			; (mov r8, r8)
 800178a:	46bd      	mov	sp, r7
 800178c:	b002      	add	sp, #8
 800178e:	bd80      	pop	{r7, pc}
 8001790:	50000800 	.word	0x50000800

08001794 <_ZN9SX1280Hal11TXRXdisableEv>:

void SX1280Hal::TXRXdisable()
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	// Disable Front End
	HAL_GPIO_WritePin(FE_EN_GPIO_Port, FE_EN_Pin, GPIO_PIN_RESET);
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	0059      	lsls	r1, r3, #1
 80017a0:	23a0      	movs	r3, #160	; 0xa0
 80017a2:	05db      	lsls	r3, r3, #23
 80017a4:	2200      	movs	r2, #0
 80017a6:	0018      	movs	r0, r3
 80017a8:	f003 f919 	bl	80049de <HAL_GPIO_WritePin>

	// Disable TX
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <_ZN9SX1280Hal11TXRXdisableEv+0x3c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	2140      	movs	r1, #64	; 0x40
 80017b2:	0018      	movs	r0, r3
 80017b4:	f003 f913 	bl	80049de <HAL_GPIO_WritePin>

	// Disable RX
	HAL_GPIO_WritePin(RX_EN_GPIO_Port, RX_EN_Pin, GPIO_PIN_RESET);
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	0119      	lsls	r1, r3, #4
 80017bc:	23a0      	movs	r3, #160	; 0xa0
 80017be:	05db      	lsls	r3, r3, #23
 80017c0:	2200      	movs	r2, #0
 80017c2:	0018      	movs	r0, r3
 80017c4:	f003 f90b 	bl	80049de <HAL_GPIO_WritePin>
}
 80017c8:	46c0      	nop			; (mov r8, r8)
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b002      	add	sp, #8
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	50000800 	.word	0x50000800

080017d4 <HAL_GPIO_EXTI_Rising_Callback>:

// EXTI External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	0002      	movs	r2, r0
 80017dc:	1dbb      	adds	r3, r7, #6
 80017de:	801a      	strh	r2, [r3, #0]
    if(GPIO_Pin == DIO1_Pin) //
 80017e0:	1dbb      	adds	r3, r7, #6
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	2b20      	cmp	r3, #32
 80017e6:	d101      	bne.n	80017ec <HAL_GPIO_EXTI_Rising_Callback+0x18>
    {
    	SX1280Driver::IsrCallback();
 80017e8:	f7ff fc94 	bl	8001114 <_ZN12SX1280Driver11IsrCallbackEv>
    	//if (SX1280Hal::RadioIsrCallback) SX1280Hal::RadioIsrCallback();
    }
}
 80017ec:	46c0      	nop			; (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b002      	add	sp, #8
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <_ZN10RawDegreesC1Ev>:
{
   uint16_t deg;
   uint32_t billionths;
   bool negative;
public:
   RawDegrees() : deg(0), billionths(0), negative(false)
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	801a      	strh	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	721a      	strb	r2, [r3, #8]
   {}
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	0018      	movs	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	b002      	add	sp, #8
 8001816:	bd80      	pop	{r7, pc}

08001818 <_ZN15TinyGPSLocationC1Ev>:
   const RawDegrees &rawLat()     { updated = false; return rawLatData; }
   const RawDegrees &rawLng()     { updated = false; return rawLngData; }
   double lat();
   double lng();

   TinyGPSLocation() : valid(false), updated(false)
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	705a      	strb	r2, [r3, #1]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3304      	adds	r3, #4
 8001830:	0018      	movs	r0, r3
 8001832:	f7ff ffdf 	bl	80017f4 <_ZN10RawDegreesC1Ev>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3310      	adds	r3, #16
 800183a:	0018      	movs	r0, r3
 800183c:	f7ff ffda 	bl	80017f4 <_ZN10RawDegreesC1Ev>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	331c      	adds	r3, #28
 8001844:	0018      	movs	r0, r3
 8001846:	f7ff ffd5 	bl	80017f4 <_ZN10RawDegreesC1Ev>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3328      	adds	r3, #40	; 0x28
 800184e:	0018      	movs	r0, r3
 8001850:	f7ff ffd0 	bl	80017f4 <_ZN10RawDegreesC1Ev>
   {}
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	0018      	movs	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	b002      	add	sp, #8
 800185c:	bd80      	pop	{r7, pc}

0800185e <_ZN11TinyGPSDateC1Ev>:
   uint32_t value()           { updated = false; return date; }
   uint16_t year();
   uint8_t month();
   uint8_t day();

   TinyGPSDate() : valid(false), updated(false), date(0)
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	705a      	strb	r2, [r3, #1]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	605a      	str	r2, [r3, #4]
   {}
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	0018      	movs	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	b002      	add	sp, #8
 8001880:	bd80      	pop	{r7, pc}

08001882 <_ZN11TinyGPSTimeC1Ev>:
   uint8_t hour();
   uint8_t minute();
   uint8_t second();
   uint8_t centisecond();

   TinyGPSTime() : valid(false), updated(false), time(0)
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	705a      	strb	r2, [r3, #1]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	605a      	str	r2, [r3, #4]
   {}
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	0018      	movs	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b002      	add	sp, #8
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <_ZN14TinyGPSDecimalC1Ev>:
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? HAL_GetTick() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }

   TinyGPSDecimal() : valid(false), updated(false), val(0)
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	705a      	strb	r2, [r3, #1]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
   {}
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	0018      	movs	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	b002      	add	sp, #8
 80018c8:	bd80      	pop	{r7, pc}

080018ca <_ZN14TinyGPSIntegerC1Ev>:
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? HAL_GetTick() - lastCommitTime : (uint32_t)ULONG_MAX; }
   uint32_t value()        { updated = false; return val; }

   TinyGPSInteger() : valid(false), updated(false), val(0)
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	705a      	strb	r2, [r3, #1]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
   {}
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	0018      	movs	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	b002      	add	sp, #8
 80018ec:	bd80      	pop	{r7, pc}

080018ee <_ZN12TinyGPSSpeedC1Ev>:
   uint32_t val, newval;
   void commit();
   void set(const char *term);
};

struct TinyGPSSpeed : TinyGPSDecimal
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	0018      	movs	r0, r3
 80018fa:	f7ff ffd4 	bl	80018a6 <_ZN14TinyGPSDecimalC1Ev>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	0018      	movs	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	b002      	add	sp, #8
 8001906:	bd80      	pop	{r7, pc}

08001908 <_ZN13TinyGPSCourseC1Ev>:
   double mph()      { return _GPS_MPH_PER_KNOT * value() / 100.0; }
   double mps()      { return _GPS_MPS_PER_KNOT * value() / 100.0; }
   double kmph()     { return _GPS_KMPH_PER_KNOT * value() / 100.0; }
};

struct TinyGPSCourse : public TinyGPSDecimal
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	0018      	movs	r0, r3
 8001914:	f7ff ffc7 	bl	80018a6 <_ZN14TinyGPSDecimalC1Ev>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	0018      	movs	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	b002      	add	sp, #8
 8001920:	bd80      	pop	{r7, pc}

08001922 <_ZN15TinyGPSAltitudeC1Ev>:
{
   double deg()      { return value() / 100.0; }
};

struct TinyGPSAltitude : TinyGPSDecimal
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	0018      	movs	r0, r3
 800192e:	f7ff ffba 	bl	80018a6 <_ZN14TinyGPSDecimalC1Ev>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	0018      	movs	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	b002      	add	sp, #8
 800193a:	bd80      	pop	{r7, pc}

0800193c <_ZN11TinyGPSHDOPC1Ev>:
   double miles()        { return _GPS_MILES_PER_METER * value() / 100.0; }
   double kilometers()   { return _GPS_KM_PER_METER * value() / 100.0; }
   double feet()         { return _GPS_FEET_PER_METER * value() / 100.0; }
};

struct TinyGPSHDOP : TinyGPSDecimal
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	0018      	movs	r0, r3
 8001948:	f7ff ffad 	bl	80018a6 <_ZN14TinyGPSDecimalC1Ev>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	0018      	movs	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	b002      	add	sp, #8
 8001954:	bd80      	pop	{r7, pc}

08001956 <_ZN11TinyGPSPlusC1Ev>:
#define _GPRMCterm   "GPRMC"
#define _GPGGAterm   "GPGGA"
#define _GNRMCterm   "GNRMC"
#define _GNGGAterm   "GNGGA"

TinyGPSPlus::TinyGPSPlus()
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	0018      	movs	r0, r3
 8001962:	f7ff ff59 	bl	8001818 <_ZN15TinyGPSLocationC1Ev>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3338      	adds	r3, #56	; 0x38
 800196a:	0018      	movs	r0, r3
 800196c:	f7ff ff77 	bl	800185e <_ZN11TinyGPSDateC1Ev>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3348      	adds	r3, #72	; 0x48
 8001974:	0018      	movs	r0, r3
 8001976:	f7ff ff84 	bl	8001882 <_ZN11TinyGPSTimeC1Ev>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3358      	adds	r3, #88	; 0x58
 800197e:	0018      	movs	r0, r3
 8001980:	f7ff ffb5 	bl	80018ee <_ZN12TinyGPSSpeedC1Ev>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3368      	adds	r3, #104	; 0x68
 8001988:	0018      	movs	r0, r3
 800198a:	f7ff ffbd 	bl	8001908 <_ZN13TinyGPSCourseC1Ev>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3378      	adds	r3, #120	; 0x78
 8001992:	0018      	movs	r0, r3
 8001994:	f7ff ffc5 	bl	8001922 <_ZN15TinyGPSAltitudeC1Ev>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3388      	adds	r3, #136	; 0x88
 800199c:	0018      	movs	r0, r3
 800199e:	f7ff ff94 	bl	80018ca <_ZN14TinyGPSIntegerC1Ev>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3398      	adds	r3, #152	; 0x98
 80019a6:	0018      	movs	r0, r3
 80019a8:	f7ff ffc8 	bl	800193c <_ZN11TinyGPSHDOPC1Ev>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	22a8      	movs	r2, #168	; 0xa8
 80019b0:	2100      	movs	r1, #0
 80019b2:	5499      	strb	r1, [r3, r2]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	22a9      	movs	r2, #169	; 0xa9
 80019b8:	2100      	movs	r1, #0
 80019ba:	5499      	strb	r1, [r3, r2]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	22b9      	movs	r2, #185	; 0xb9
 80019c0:	2102      	movs	r1, #2
 80019c2:	5499      	strb	r1, [r3, r2]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	22ba      	movs	r2, #186	; 0xba
 80019c8:	2100      	movs	r1, #0
 80019ca:	5499      	strb	r1, [r3, r2]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	22bb      	movs	r2, #187	; 0xbb
 80019d0:	2100      	movs	r1, #0
 80019d2:	5499      	strb	r1, [r3, r2]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	22bc      	movs	r2, #188	; 0xbc
 80019d8:	2100      	movs	r1, #0
 80019da:	5499      	strb	r1, [r3, r2]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	22c0      	movs	r2, #192	; 0xc0
 80019e0:	2100      	movs	r1, #0
 80019e2:	5099      	str	r1, [r3, r2]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	22c4      	movs	r2, #196	; 0xc4
 80019e8:	2100      	movs	r1, #0
 80019ea:	5099      	str	r1, [r3, r2]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	22c8      	movs	r2, #200	; 0xc8
 80019f0:	2100      	movs	r1, #0
 80019f2:	5099      	str	r1, [r3, r2]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	22cc      	movs	r2, #204	; 0xcc
 80019f8:	2100      	movs	r1, #0
 80019fa:	5099      	str	r1, [r3, r2]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	22d0      	movs	r2, #208	; 0xd0
 8001a00:	2100      	movs	r1, #0
 8001a02:	5099      	str	r1, [r3, r2]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	22d4      	movs	r2, #212	; 0xd4
 8001a08:	2100      	movs	r1, #0
 8001a0a:	5099      	str	r1, [r3, r2]
{
  term[0] = '\0';
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	22aa      	movs	r2, #170	; 0xaa
 8001a10:	2100      	movs	r1, #0
 8001a12:	5499      	strb	r1, [r3, r2]
}
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	0018      	movs	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	b002      	add	sp, #8
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <_ZN11TinyGPSPlus6encodeEc>:
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	000a      	movs	r2, r1
 8001a2a:	1cfb      	adds	r3, r7, #3
 8001a2c:	701a      	strb	r2, [r3, #0]
  ++encodedCharCount;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	22c8      	movs	r2, #200	; 0xc8
 8001a32:	589b      	ldr	r3, [r3, r2]
 8001a34:	1c5a      	adds	r2, r3, #1
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	21c8      	movs	r1, #200	; 0xc8
 8001a3a:	505a      	str	r2, [r3, r1]

  switch(c)
 8001a3c:	1cfb      	adds	r3, r7, #3
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	3b0a      	subs	r3, #10
 8001a42:	2b22      	cmp	r3, #34	; 0x22
 8001a44:	d85d      	bhi.n	8001b02 <_ZN11TinyGPSPlus6encodeEc+0xe2>
 8001a46:	009a      	lsls	r2, r3, #2
 8001a48:	4b44      	ldr	r3, [pc, #272]	; (8001b5c <_ZN11TinyGPSPlus6encodeEc+0x13c>)
 8001a4a:	18d3      	adds	r3, r2, r3
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	469f      	mov	pc, r3
  {
  case ',': // term terminators
    parity ^= (uint8_t)c;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	22a8      	movs	r2, #168	; 0xa8
 8001a54:	5c9a      	ldrb	r2, [r3, r2]
 8001a56:	1cfb      	adds	r3, r7, #3
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	4053      	eors	r3, r2
 8001a5c:	b2d9      	uxtb	r1, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	22a8      	movs	r2, #168	; 0xa8
 8001a62:	5499      	strb	r1, [r3, r2]
  case '\r':
  case '\n':
  case '*':
    {
      bool isValidSentence = false;
 8001a64:	200f      	movs	r0, #15
 8001a66:	183b      	adds	r3, r7, r0
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
      if (curTermOffset < sizeof(term))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	22bb      	movs	r2, #187	; 0xbb
 8001a70:	5c9b      	ldrb	r3, [r3, r2]
 8001a72:	2b0e      	cmp	r3, #14
 8001a74:	d810      	bhi.n	8001a98 <_ZN11TinyGPSPlus6encodeEc+0x78>
      {
        term[curTermOffset] = 0;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	22bb      	movs	r2, #187	; 0xbb
 8001a7a:	5c9b      	ldrb	r3, [r3, r2]
 8001a7c:	0019      	movs	r1, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	22aa      	movs	r2, #170	; 0xaa
 8001a82:	185b      	adds	r3, r3, r1
 8001a84:	189b      	adds	r3, r3, r2
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]
        isValidSentence = endOfTermHandler();
 8001a8a:	183c      	adds	r4, r7, r0
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f000 f964 	bl	8001d5c <_ZN11TinyGPSPlus16endOfTermHandlerEv>
 8001a94:	0003      	movs	r3, r0
 8001a96:	7023      	strb	r3, [r4, #0]
      }
      ++curTermNumber;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	22ba      	movs	r2, #186	; 0xba
 8001a9c:	5c9b      	ldrb	r3, [r3, r2]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	b2d9      	uxtb	r1, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	22ba      	movs	r2, #186	; 0xba
 8001aa6:	5499      	strb	r1, [r3, r2]
      curTermOffset = 0;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	22bb      	movs	r2, #187	; 0xbb
 8001aac:	2100      	movs	r1, #0
 8001aae:	5499      	strb	r1, [r3, r2]
      isChecksumTerm = c == '*';
 8001ab0:	1cfb      	adds	r3, r7, #3
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	3b2a      	subs	r3, #42	; 0x2a
 8001ab6:	425a      	negs	r2, r3
 8001ab8:	4153      	adcs	r3, r2
 8001aba:	b2d9      	uxtb	r1, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	22a9      	movs	r2, #169	; 0xa9
 8001ac0:	5499      	strb	r1, [r3, r2]
      return isValidSentence;
 8001ac2:	230f      	movs	r3, #15
 8001ac4:	18fb      	adds	r3, r7, r3
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	e043      	b.n	8001b52 <_ZN11TinyGPSPlus6encodeEc+0x132>
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	22bb      	movs	r2, #187	; 0xbb
 8001ace:	2100      	movs	r1, #0
 8001ad0:	5499      	strb	r1, [r3, r2]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	22bb      	movs	r2, #187	; 0xbb
 8001ad6:	5c99      	ldrb	r1, [r3, r2]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	22ba      	movs	r2, #186	; 0xba
 8001adc:	5499      	strb	r1, [r3, r2]
    parity = 0;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	22a8      	movs	r2, #168	; 0xa8
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	5499      	strb	r1, [r3, r2]
    curSentenceType = GPS_SENTENCE_OTHER;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	22b9      	movs	r2, #185	; 0xb9
 8001aea:	2102      	movs	r1, #2
 8001aec:	5499      	strb	r1, [r3, r2]
    isChecksumTerm = false;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	22a9      	movs	r2, #169	; 0xa9
 8001af2:	2100      	movs	r1, #0
 8001af4:	5499      	strb	r1, [r3, r2]
    sentenceHasFix = false;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	22bc      	movs	r2, #188	; 0xbc
 8001afa:	2100      	movs	r1, #0
 8001afc:	5499      	strb	r1, [r3, r2]
    return false;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e027      	b.n	8001b52 <_ZN11TinyGPSPlus6encodeEc+0x132>

  default: // ordinary characters
    if (curTermOffset < sizeof(term) - 1)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	22bb      	movs	r2, #187	; 0xbb
 8001b06:	5c9b      	ldrb	r3, [r3, r2]
 8001b08:	2b0d      	cmp	r3, #13
 8001b0a:	d80f      	bhi.n	8001b2c <_ZN11TinyGPSPlus6encodeEc+0x10c>
      term[curTermOffset++] = c;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	22bb      	movs	r2, #187	; 0xbb
 8001b10:	5c9b      	ldrb	r3, [r3, r2]
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	b2d0      	uxtb	r0, r2
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	21bb      	movs	r1, #187	; 0xbb
 8001b1a:	5450      	strb	r0, [r2, r1]
 8001b1c:	0019      	movs	r1, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	22aa      	movs	r2, #170	; 0xaa
 8001b22:	185b      	adds	r3, r3, r1
 8001b24:	189b      	adds	r3, r3, r2
 8001b26:	1cfa      	adds	r2, r7, #3
 8001b28:	7812      	ldrb	r2, [r2, #0]
 8001b2a:	701a      	strb	r2, [r3, #0]
    if (!isChecksumTerm)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	22a9      	movs	r2, #169	; 0xa9
 8001b30:	5c9b      	ldrb	r3, [r3, r2]
 8001b32:	2201      	movs	r2, #1
 8001b34:	4053      	eors	r3, r2
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d009      	beq.n	8001b50 <_ZN11TinyGPSPlus6encodeEc+0x130>
      parity ^= c;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	22a8      	movs	r2, #168	; 0xa8
 8001b40:	5c9a      	ldrb	r2, [r3, r2]
 8001b42:	1cfb      	adds	r3, r7, #3
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	4053      	eors	r3, r2
 8001b48:	b2d9      	uxtb	r1, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	22a8      	movs	r2, #168	; 0xa8
 8001b4e:	5499      	strb	r1, [r3, r2]
    return false;
 8001b50:	2300      	movs	r3, #0
  }

  return false;
}
 8001b52:	0018      	movs	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b005      	add	sp, #20
 8001b58:	bd90      	pop	{r4, r7, pc}
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	0800a024 	.word	0x0800a024

08001b60 <_ZN11TinyGPSPlus7fromHexEc>:

//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	000a      	movs	r2, r1
 8001b6a:	1cfb      	adds	r3, r7, #3
 8001b6c:	701a      	strb	r2, [r3, #0]
  if (a >= 'A' && a <= 'F')
 8001b6e:	1cfb      	adds	r3, r7, #3
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b40      	cmp	r3, #64	; 0x40
 8001b74:	d907      	bls.n	8001b86 <_ZN11TinyGPSPlus7fromHexEc+0x26>
 8001b76:	1cfb      	adds	r3, r7, #3
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b46      	cmp	r3, #70	; 0x46
 8001b7c:	d803      	bhi.n	8001b86 <_ZN11TinyGPSPlus7fromHexEc+0x26>
    return a - 'A' + 10;
 8001b7e:	1cfb      	adds	r3, r7, #3
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	3b37      	subs	r3, #55	; 0x37
 8001b84:	e00e      	b.n	8001ba4 <_ZN11TinyGPSPlus7fromHexEc+0x44>
  else if (a >= 'a' && a <= 'f')
 8001b86:	1cfb      	adds	r3, r7, #3
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b60      	cmp	r3, #96	; 0x60
 8001b8c:	d907      	bls.n	8001b9e <_ZN11TinyGPSPlus7fromHexEc+0x3e>
 8001b8e:	1cfb      	adds	r3, r7, #3
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b66      	cmp	r3, #102	; 0x66
 8001b94:	d803      	bhi.n	8001b9e <_ZN11TinyGPSPlus7fromHexEc+0x3e>
    return a - 'a' + 10;
 8001b96:	1cfb      	adds	r3, r7, #3
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	3b57      	subs	r3, #87	; 0x57
 8001b9c:	e002      	b.n	8001ba4 <_ZN11TinyGPSPlus7fromHexEc+0x44>
  else
    return a - '0';
 8001b9e:	1cfb      	adds	r3, r7, #3
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	3b30      	subs	r3, #48	; 0x30
}
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	b002      	add	sp, #8
 8001baa:	bd80      	pop	{r7, pc}

08001bac <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  bool negative = *term == '-';
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	781a      	ldrb	r2, [r3, #0]
 8001bb8:	200b      	movs	r0, #11
 8001bba:	183b      	adds	r3, r7, r0
 8001bbc:	3a2d      	subs	r2, #45	; 0x2d
 8001bbe:	4251      	negs	r1, r2
 8001bc0:	414a      	adcs	r2, r1
 8001bc2:	701a      	strb	r2, [r3, #0]
  if (negative) ++term;
 8001bc4:	183b      	adds	r3, r7, r0
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d002      	beq.n	8001bd2 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x26>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	607b      	str	r3, [r7, #4]
  int32_t ret = 100 * (int32_t)atol(term);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f007 f9b3 	bl	8008f40 <atol>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	2264      	movs	r2, #100	; 0x64
 8001bde:	4353      	muls	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]
  while (isdigit(*term)) ++term;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	3b30      	subs	r3, #48	; 0x30
 8001be8:	001a      	movs	r2, r3
 8001bea:	2109      	movs	r1, #9
 8001bec:	2300      	movs	r3, #0
 8001bee:	4291      	cmp	r1, r2
 8001bf0:	415b      	adcs	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x54>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	e7f0      	b.n	8001be2 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x36>
  if (*term == '.' && isdigit(term[1]))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b2e      	cmp	r3, #46	; 0x2e
 8001c06:	d12b      	bne.n	8001c60 <_ZN11TinyGPSPlus12parseDecimalEPKc+0xb4>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	3b30      	subs	r3, #48	; 0x30
 8001c10:	001a      	movs	r2, r3
 8001c12:	2109      	movs	r1, #9
 8001c14:	2300      	movs	r3, #0
 8001c16:	4291      	cmp	r1, r2
 8001c18:	415b      	adcs	r3, r3
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d01f      	beq.n	8001c60 <_ZN11TinyGPSPlus12parseDecimalEPKc+0xb4>
  {
    ret += 10 * (term[1] - '0');
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3301      	adds	r3, #1
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	3b30      	subs	r3, #48	; 0x30
 8001c28:	001a      	movs	r2, r3
 8001c2a:	0013      	movs	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	189b      	adds	r3, r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	001a      	movs	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	189b      	adds	r3, r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
    if (isdigit(term[2]))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	3b30      	subs	r3, #48	; 0x30
 8001c42:	001a      	movs	r2, r3
 8001c44:	2109      	movs	r1, #9
 8001c46:	2300      	movs	r3, #0
 8001c48:	4291      	cmp	r1, r2
 8001c4a:	415b      	adcs	r3, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d006      	beq.n	8001c60 <_ZN11TinyGPSPlus12parseDecimalEPKc+0xb4>
      ret += term[2] - '0';
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3302      	adds	r3, #2
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	3b30      	subs	r3, #48	; 0x30
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	18d3      	adds	r3, r2, r3
 8001c5e:	60fb      	str	r3, [r7, #12]
  }
  return negative ? -ret : ret;
 8001c60:	230b      	movs	r3, #11
 8001c62:	18fb      	adds	r3, r7, r3
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d002      	beq.n	8001c70 <_ZN11TinyGPSPlus12parseDecimalEPKc+0xc4>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	425b      	negs	r3, r3
 8001c6e:	e000      	b.n	8001c72 <_ZN11TinyGPSPlus12parseDecimalEPKc+0xc6>
 8001c70:	68fb      	ldr	r3, [r7, #12]
}
 8001c72:	0018      	movs	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b004      	add	sp, #16
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t leftOfDecimal = (uint32_t)atol(term);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f007 f959 	bl	8008f40 <atol>
 8001c8e:	0003      	movs	r3, r0
 8001c90:	60fb      	str	r3, [r7, #12]
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2164      	movs	r1, #100	; 0x64
 8001c96:	0018      	movs	r0, r3
 8001c98:	f7fe face 	bl	8000238 <__aeabi_uidivmod>
 8001c9c:	000b      	movs	r3, r1
 8001c9e:	001a      	movs	r2, r3
 8001ca0:	210a      	movs	r1, #10
 8001ca2:	187b      	adds	r3, r7, r1
 8001ca4:	801a      	strh	r2, [r3, #0]
  uint32_t multiplier = 10000000UL;
 8001ca6:	4b2c      	ldr	r3, [pc, #176]	; (8001d58 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0xdc>)
 8001ca8:	617b      	str	r3, [r7, #20]
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
 8001caa:	187b      	adds	r3, r7, r1
 8001cac:	881a      	ldrh	r2, [r3, #0]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	4353      	muls	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]

  deg.deg = (int16_t)(leftOfDecimal / 100);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2164      	movs	r1, #100	; 0x64
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f7fe fa37 	bl	800012c <__udivsi3>
 8001cbe:	0003      	movs	r3, r0
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	801a      	strh	r2, [r3, #0]

  while (isdigit(*term))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	3b30      	subs	r3, #48	; 0x30
 8001ccc:	001a      	movs	r2, r3
 8001cce:	2109      	movs	r1, #9
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	4291      	cmp	r1, r2
 8001cd4:	415b      	adcs	r3, r3
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x68>
    ++term;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	607b      	str	r3, [r7, #4]
  while (isdigit(*term))
 8001ce2:	e7f0      	b.n	8001cc6 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x4a>

  if (*term == '.')
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b2e      	cmp	r3, #46	; 0x2e
 8001cea:	d121      	bne.n	8001d30 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0xb4>
    while (isdigit(*++term))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	3b30      	subs	r3, #48	; 0x30
 8001cf8:	001a      	movs	r2, r3
 8001cfa:	2109      	movs	r1, #9
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	4291      	cmp	r1, r2
 8001d00:	415b      	adcs	r3, r3
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	1e5a      	subs	r2, r3, #1
 8001d06:	4193      	sbcs	r3, r2
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d010      	beq.n	8001d30 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0xb4>
    {
      multiplier /= 10;
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	210a      	movs	r1, #10
 8001d12:	0018      	movs	r0, r3
 8001d14:	f7fe fa0a 	bl	800012c <__udivsi3>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	617b      	str	r3, [r7, #20]
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	3b30      	subs	r3, #48	; 0x30
 8001d22:	001a      	movs	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	4353      	muls	r3, r2
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	18d3      	adds	r3, r2, r3
 8001d2c:	613b      	str	r3, [r7, #16]
    while (isdigit(*++term))
 8001d2e:	e7dd      	b.n	8001cec <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x70>
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	0013      	movs	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	189b      	adds	r3, r3, r2
 8001d38:	3301      	adds	r3, #1
 8001d3a:	2103      	movs	r1, #3
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f7fe f9f5 	bl	800012c <__udivsi3>
 8001d42:	0003      	movs	r3, r0
 8001d44:	001a      	movs	r2, r3
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	605a      	str	r2, [r3, #4]
  deg.negative = false;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	721a      	strb	r2, [r3, #8]
}
 8001d50:	46c0      	nop			; (mov r8, r8)
 8001d52:	46bd      	mov	sp, r7
 8001d54:	b006      	add	sp, #24
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	00989680 	.word	0x00989680

08001d5c <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
 8001d5c:	b590      	push	{r4, r7, lr}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	22a9      	movs	r2, #169	; 0xa9
 8001d68:	5c9b      	ldrb	r3, [r3, r2]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d100      	bne.n	8001d70 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x14>
 8001d6e:	e09e      	b.n	8001eae <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x152>
  {
    uint8_t checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	22aa      	movs	r2, #170	; 0xaa
 8001d74:	5c9a      	ldrb	r2, [r3, r2]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	0011      	movs	r1, r2
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f7ff fef0 	bl	8001b60 <_ZN11TinyGPSPlus7fromHexEc>
 8001d80:	0003      	movs	r3, r0
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	011b      	lsls	r3, r3, #4
 8001d86:	b2dc      	uxtb	r4, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	22ab      	movs	r2, #171	; 0xab
 8001d8c:	5c9a      	ldrb	r2, [r3, r2]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	0011      	movs	r1, r2
 8001d92:	0018      	movs	r0, r3
 8001d94:	f7ff fee4 	bl	8001b60 <_ZN11TinyGPSPlus7fromHexEc>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	210f      	movs	r1, #15
 8001d9e:	187b      	adds	r3, r7, r1
 8001da0:	18a2      	adds	r2, r4, r2
 8001da2:	701a      	strb	r2, [r3, #0]
    if (checksum == parity)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	22a8      	movs	r2, #168	; 0xa8
 8001da8:	5c9b      	ldrb	r3, [r3, r2]
 8001daa:	187a      	adds	r2, r7, r1
 8001dac:	7812      	ldrb	r2, [r2, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d000      	beq.n	8001db4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x58>
 8001db2:	e073      	b.n	8001e9c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x140>
    {
      passedChecksumCount++;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	22d4      	movs	r2, #212	; 0xd4
 8001db8:	589b      	ldr	r3, [r3, r2]
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	21d4      	movs	r1, #212	; 0xd4
 8001dc0:	505a      	str	r2, [r3, r1]
      if (sentenceHasFix)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	22bc      	movs	r2, #188	; 0xbc
 8001dc6:	5c9b      	ldrb	r3, [r3, r2]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d006      	beq.n	8001dda <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7e>
        ++sentencesWithFixCount;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	22cc      	movs	r2, #204	; 0xcc
 8001dd0:	589b      	ldr	r3, [r3, r2]
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	21cc      	movs	r1, #204	; 0xcc
 8001dd8:	505a      	str	r2, [r3, r1]

      switch(curSentenceType)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	22b9      	movs	r2, #185	; 0xb9
 8001dde:	5c9b      	ldrb	r3, [r3, r2]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d01f      	beq.n	8001e24 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xc8>
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d13c      	bne.n	8001e62 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x106>
      {
      case GPS_SENTENCE_GPRMC:
        date.commit();
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3338      	adds	r3, #56	; 0x38
 8001dec:	0018      	movs	r0, r3
 8001dee:	f000 f9ee 	bl	80021ce <_ZN11TinyGPSDate6commitEv>
        time.commit();
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3348      	adds	r3, #72	; 0x48
 8001df6:	0018      	movs	r0, r3
 8001df8:	f000 fa01 	bl	80021fe <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	22bc      	movs	r2, #188	; 0xbc
 8001e00:	5c9b      	ldrb	r3, [r3, r2]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d02c      	beq.n	8001e60 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x104>
        {
           location.commit();
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	0018      	movs	r0, r3
 8001e0a:	f000 f999 	bl	8002140 <_ZN15TinyGPSLocation6commitEv>
           speed.commit();
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3358      	adds	r3, #88	; 0x58
 8001e12:	0018      	movs	r0, r3
 8001e14:	f000 fa2d 	bl	8002272 <_ZN14TinyGPSDecimal6commitEv>
           course.commit();
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3368      	adds	r3, #104	; 0x68
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f000 fa28 	bl	8002272 <_ZN14TinyGPSDecimal6commitEv>
        }
        break;
 8001e22:	e01d      	b.n	8001e60 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x104>
      case GPS_SENTENCE_GPGGA:
        time.commit();
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3348      	adds	r3, #72	; 0x48
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f000 f9e8 	bl	80021fe <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	22bc      	movs	r2, #188	; 0xbc
 8001e32:	5c9b      	ldrb	r3, [r3, r2]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d008      	beq.n	8001e4a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xee>
        {
          location.commit();
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f000 f980 	bl	8002140 <_ZN15TinyGPSLocation6commitEv>
          altitude.commit();
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3378      	adds	r3, #120	; 0x78
 8001e44:	0018      	movs	r0, r3
 8001e46:	f000 fa14 	bl	8002272 <_ZN14TinyGPSDecimal6commitEv>
        }
        satellites.commit();
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3388      	adds	r3, #136	; 0x88
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f000 fa37 	bl	80022c2 <_ZN14TinyGPSInteger6commitEv>
        hdop.commit();
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3398      	adds	r3, #152	; 0x98
 8001e58:	0018      	movs	r0, r3
 8001e5a:	f000 fa0a 	bl	8002272 <_ZN14TinyGPSDecimal6commitEv>
        break;
 8001e5e:	e000      	b.n	8001e62 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x106>
        break;
 8001e60:	46c0      	nop			; (mov r8, r8)
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	22c4      	movs	r2, #196	; 0xc4
 8001e66:	589b      	ldr	r3, [r3, r2]
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d013      	beq.n	8001e98 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x13c>
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	21c4      	movs	r1, #196	; 0xc4
 8001e78:	585b      	ldr	r3, [r3, r1]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7c:	0019      	movs	r1, r3
 8001e7e:	0010      	movs	r0, r2
 8001e80:	f7fe f940 	bl	8000104 <strcmp>
 8001e84:	1e03      	subs	r3, r0, #0
 8001e86:	d107      	bne.n	8001e98 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x13c>
         p->commit();
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f000 fa42 	bl	8002314 <_ZN13TinyGPSCustom6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	e7e8      	b.n	8001e6a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x10e>
      return true;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e143      	b.n	8002124 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c8>
    }

    else
    {
      ++failedChecksumCount;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	22d0      	movs	r2, #208	; 0xd0
 8001ea0:	589b      	ldr	r3, [r3, r2]
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	21d0      	movs	r1, #208	; 0xd0
 8001ea8:	505a      	str	r2, [r3, r1]
    }

    return false;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	e13a      	b.n	8002124 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c8>
  }

  // the first term determines the sentence type
  if (curTermNumber == 0)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	22ba      	movs	r2, #186	; 0xba
 8001eb2:	5c9b      	ldrb	r3, [r3, r2]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d000      	beq.n	8001eba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x15e>
 8001eb8:	e067      	b.n	8001f8a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x22e>
  {
    if (!strcmp(term, _GPRMCterm) || !strcmp(term, _GNRMCterm))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	33aa      	adds	r3, #170	; 0xaa
 8001ebe:	4a9b      	ldr	r2, [pc, #620]	; (800212c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3d0>)
 8001ec0:	0011      	movs	r1, r2
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f7fe f91e 	bl	8000104 <strcmp>
 8001ec8:	1e03      	subs	r3, r0, #0
 8001eca:	d008      	beq.n	8001ede <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x182>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	33aa      	adds	r3, #170	; 0xaa
 8001ed0:	4a97      	ldr	r2, [pc, #604]	; (8002130 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3d4>)
 8001ed2:	0011      	movs	r1, r2
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f7fe f915 	bl	8000104 <strcmp>
 8001eda:	1e03      	subs	r3, r0, #0
 8001edc:	d104      	bne.n	8001ee8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x18c>
      curSentenceType = GPS_SENTENCE_GPRMC;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	22b9      	movs	r2, #185	; 0xb9
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	5499      	strb	r1, [r3, r2]
 8001ee6:	e01a      	b.n	8001f1e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1c2>
    else if (!strcmp(term, _GPGGAterm) || !strcmp(term, _GNGGAterm))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	33aa      	adds	r3, #170	; 0xaa
 8001eec:	4a91      	ldr	r2, [pc, #580]	; (8002134 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3d8>)
 8001eee:	0011      	movs	r1, r2
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f7fe f907 	bl	8000104 <strcmp>
 8001ef6:	1e03      	subs	r3, r0, #0
 8001ef8:	d008      	beq.n	8001f0c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1b0>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	33aa      	adds	r3, #170	; 0xaa
 8001efe:	4a8e      	ldr	r2, [pc, #568]	; (8002138 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3dc>)
 8001f00:	0011      	movs	r1, r2
 8001f02:	0018      	movs	r0, r3
 8001f04:	f7fe f8fe 	bl	8000104 <strcmp>
 8001f08:	1e03      	subs	r3, r0, #0
 8001f0a:	d104      	bne.n	8001f16 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ba>
      curSentenceType = GPS_SENTENCE_GPGGA;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	22b9      	movs	r2, #185	; 0xb9
 8001f10:	2100      	movs	r1, #0
 8001f12:	5499      	strb	r1, [r3, r2]
 8001f14:	e003      	b.n	8001f1e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1c2>
    else
      curSentenceType = GPS_SENTENCE_OTHER;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	22b9      	movs	r2, #185	; 0xb9
 8001f1a:	2102      	movs	r1, #2
 8001f1c:	5499      	strb	r1, [r3, r2]

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	22c0      	movs	r2, #192	; 0xc0
 8001f22:	589a      	ldr	r2, [r3, r2]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	21c4      	movs	r1, #196	; 0xc4
 8001f28:	505a      	str	r2, [r3, r1]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	22c4      	movs	r2, #196	; 0xc4
 8001f2e:	589b      	ldr	r3, [r3, r2]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d013      	beq.n	8001f5c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	22c4      	movs	r2, #196	; 0xc4
 8001f38:	589b      	ldr	r3, [r3, r2]
 8001f3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	33aa      	adds	r3, #170	; 0xaa
 8001f40:	0019      	movs	r1, r3
 8001f42:	0010      	movs	r0, r2
 8001f44:	f7fe f8de 	bl	8000104 <strcmp>
 8001f48:	1e03      	subs	r3, r0, #0
 8001f4a:	da07      	bge.n	8001f5c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	22c4      	movs	r2, #196	; 0xc4
 8001f50:	589b      	ldr	r3, [r3, r2]
 8001f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	21c4      	movs	r1, #196	; 0xc4
 8001f58:	505a      	str	r2, [r3, r1]
 8001f5a:	e7e6      	b.n	8001f2a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ce>
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	22c4      	movs	r2, #196	; 0xc4
 8001f60:	589b      	ldr	r3, [r3, r2]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00f      	beq.n	8001f86 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x22a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	22c4      	movs	r2, #196	; 0xc4
 8001f6a:	589b      	ldr	r3, [r3, r2]
 8001f6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	33aa      	adds	r3, #170	; 0xaa
 8001f72:	0019      	movs	r1, r3
 8001f74:	0010      	movs	r0, r2
 8001f76:	f7fe f8c5 	bl	8000104 <strcmp>
 8001f7a:	1e03      	subs	r3, r0, #0
 8001f7c:	dd03      	ble.n	8001f86 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x22a>
       customCandidates = NULL;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	22c4      	movs	r2, #196	; 0xc4
 8001f82:	2100      	movs	r1, #0
 8001f84:	5099      	str	r1, [r3, r2]

    return false;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e0cc      	b.n	8002124 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c8>
  }

  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	22b9      	movs	r2, #185	; 0xb9
 8001f8e:	5c9b      	ldrb	r3, [r3, r2]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d100      	bne.n	8001f96 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23a>
 8001f94:	e098      	b.n	80020c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	22aa      	movs	r2, #170	; 0xaa
 8001f9a:	5c9b      	ldrb	r3, [r3, r2]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d100      	bne.n	8001fa2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x246>
 8001fa0:	e092      	b.n	80020c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    switch(COMBINE(curSentenceType, curTermNumber))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	22b9      	movs	r2, #185	; 0xb9
 8001fa6:	5c9b      	ldrb	r3, [r3, r2]
 8001fa8:	015b      	lsls	r3, r3, #5
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	21ba      	movs	r1, #186	; 0xba
 8001fae:	5c52      	ldrb	r2, [r2, r1]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	2b29      	cmp	r3, #41	; 0x29
 8001fb4:	d900      	bls.n	8001fb8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x25c>
 8001fb6:	e087      	b.n	80020c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
 8001fb8:	009a      	lsls	r2, r3, #2
 8001fba:	4b60      	ldr	r3, [pc, #384]	; (800213c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3e0>)
 8001fbc:	18d3      	adds	r3, r2, r3
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	469f      	mov	pc, r3
  {
    case COMBINE(GPS_SENTENCE_GPRMC, 1): // Time in both sentences
    case COMBINE(GPS_SENTENCE_GPGGA, 1):
      time.setTime(term);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3348      	adds	r3, #72	; 0x48
 8001fc6:	001a      	movs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	33aa      	adds	r3, #170	; 0xaa
 8001fcc:	0019      	movs	r1, r3
 8001fce:	0010      	movs	r0, r2
 8001fd0:	f000 f92d 	bl	800222e <_ZN11TinyGPSTime7setTimeEPKc>
      break;
 8001fd4:	e078      	b.n	80020c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 2): // GPRMC validity
      sentenceHasFix = term[0] == 'A';
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	22aa      	movs	r2, #170	; 0xaa
 8001fda:	5c9b      	ldrb	r3, [r3, r2]
 8001fdc:	3b41      	subs	r3, #65	; 0x41
 8001fde:	425a      	negs	r2, r3
 8001fe0:	4153      	adcs	r3, r2
 8001fe2:	b2d9      	uxtb	r1, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	22bc      	movs	r2, #188	; 0xbc
 8001fe8:	5499      	strb	r1, [r3, r2]
      break;
 8001fea:	e06d      	b.n	80020c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 3): // Latitude
    case COMBINE(GPS_SENTENCE_GPGGA, 2):
      location.setLatitude(term);
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	33aa      	adds	r3, #170	; 0xaa
 8001ff2:	0019      	movs	r1, r3
 8001ff4:	0010      	movs	r0, r2
 8001ff6:	f000 f8c8 	bl	800218a <_ZN15TinyGPSLocation11setLatitudeEPKc>
      break;
 8001ffa:	e065      	b.n	80020c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 4): // N/S
    case COMBINE(GPS_SENTENCE_GPGGA, 3):
      location.rawNewLatData.negative = term[0] == 'S';
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	22aa      	movs	r2, #170	; 0xaa
 8002000:	5c9b      	ldrb	r3, [r3, r2]
 8002002:	3b53      	subs	r3, #83	; 0x53
 8002004:	425a      	negs	r2, r3
 8002006:	4153      	adcs	r3, r2
 8002008:	b2d9      	uxtb	r1, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2224      	movs	r2, #36	; 0x24
 800200e:	5499      	strb	r1, [r3, r2]
      break;
 8002010:	e05a      	b.n	80020c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 5): // Longitude
    case COMBINE(GPS_SENTENCE_GPGGA, 4):
      location.setLongitude(term);
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	33aa      	adds	r3, #170	; 0xaa
 8002018:	0019      	movs	r1, r3
 800201a:	0010      	movs	r0, r2
 800201c:	f000 f8c6 	bl	80021ac <_ZN15TinyGPSLocation12setLongitudeEPKc>
      break;
 8002020:	e052      	b.n	80020c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 6): // E/W
    case COMBINE(GPS_SENTENCE_GPGGA, 5):
      location.rawNewLngData.negative = term[0] == 'W';
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	22aa      	movs	r2, #170	; 0xaa
 8002026:	5c9b      	ldrb	r3, [r3, r2]
 8002028:	3b57      	subs	r3, #87	; 0x57
 800202a:	425a      	negs	r2, r3
 800202c:	4153      	adcs	r3, r2
 800202e:	b2d9      	uxtb	r1, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2230      	movs	r2, #48	; 0x30
 8002034:	5499      	strb	r1, [r3, r2]
      break;
 8002036:	e047      	b.n	80020c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 7): // Speed (GPRMC)
      speed.set(term);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3358      	adds	r3, #88	; 0x58
 800203c:	001a      	movs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	33aa      	adds	r3, #170	; 0xaa
 8002042:	0019      	movs	r1, r3
 8002044:	0010      	movs	r0, r2
 8002046:	f000 f92c 	bl	80022a2 <_ZN14TinyGPSDecimal3setEPKc>
      break;
 800204a:	e03d      	b.n	80020c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
      course.set(term);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3368      	adds	r3, #104	; 0x68
 8002050:	001a      	movs	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	33aa      	adds	r3, #170	; 0xaa
 8002056:	0019      	movs	r1, r3
 8002058:	0010      	movs	r0, r2
 800205a:	f000 f922 	bl	80022a2 <_ZN14TinyGPSDecimal3setEPKc>
      break;
 800205e:	e033      	b.n	80020c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
      date.setDate(term);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3338      	adds	r3, #56	; 0x38
 8002064:	001a      	movs	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	33aa      	adds	r3, #170	; 0xaa
 800206a:	0019      	movs	r1, r3
 800206c:	0010      	movs	r0, r2
 800206e:	f000 f8ef 	bl	8002250 <_ZN11TinyGPSDate7setDateEPKc>
      break;
 8002072:	e029      	b.n	80020c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPGGA, 6): // Fix data (GPGGA)
      sentenceHasFix = term[0] > '0';
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	22aa      	movs	r2, #170	; 0xaa
 8002078:	5c9b      	ldrb	r3, [r3, r2]
 800207a:	2230      	movs	r2, #48	; 0x30
 800207c:	429a      	cmp	r2, r3
 800207e:	419b      	sbcs	r3, r3
 8002080:	425b      	negs	r3, r3
 8002082:	b2d9      	uxtb	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	22bc      	movs	r2, #188	; 0xbc
 8002088:	5499      	strb	r1, [r3, r2]
      break;
 800208a:	e01d      	b.n	80020c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPGGA, 7): // Satellites used (GPGGA)
      satellites.set(term);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3388      	adds	r3, #136	; 0x88
 8002090:	001a      	movs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	33aa      	adds	r3, #170	; 0xaa
 8002096:	0019      	movs	r1, r3
 8002098:	0010      	movs	r0, r2
 800209a:	f000 f92a 	bl	80022f2 <_ZN14TinyGPSInteger3setEPKc>
      break;
 800209e:	e013      	b.n	80020c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPGGA, 8): // HDOP
      hdop.set(term);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3398      	adds	r3, #152	; 0x98
 80020a4:	001a      	movs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	33aa      	adds	r3, #170	; 0xaa
 80020aa:	0019      	movs	r1, r3
 80020ac:	0010      	movs	r0, r2
 80020ae:	f000 f8f8 	bl	80022a2 <_ZN14TinyGPSDecimal3setEPKc>
      break;
 80020b2:	e009      	b.n	80020c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPGGA, 9): // Altitude (GPGGA)
      altitude.set(term);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3378      	adds	r3, #120	; 0x78
 80020b8:	001a      	movs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	33aa      	adds	r3, #170	; 0xaa
 80020be:	0019      	movs	r1, r3
 80020c0:	0010      	movs	r0, r2
 80020c2:	f000 f8ee 	bl	80022a2 <_ZN14TinyGPSDecimal3setEPKc>
      break;
 80020c6:	46c0      	nop			; (mov r8, r8)
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	22c4      	movs	r2, #196	; 0xc4
 80020cc:	589b      	ldr	r3, [r3, r2]
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d025      	beq.n	8002122 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c6>
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	21c4      	movs	r1, #196	; 0xc4
 80020de:	585b      	ldr	r3, [r3, r1]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e2:	0019      	movs	r1, r3
 80020e4:	0010      	movs	r0, r2
 80020e6:	f7fe f80d 	bl	8000104 <strcmp>
 80020ea:	1e03      	subs	r3, r0, #0
 80020ec:	d119      	bne.n	8002122 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c6>
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	21ba      	movs	r1, #186	; 0xba
 80020f6:	5c52      	ldrb	r2, [r2, r1]
 80020f8:	4293      	cmp	r3, r2
 80020fa:	dc12      	bgt.n	8002122 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c6>
    if (p->termNumber == curTermNumber)
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	21ba      	movs	r1, #186	; 0xba
 8002104:	5c52      	ldrb	r2, [r2, r1]
 8002106:	4293      	cmp	r3, r2
 8002108:	d107      	bne.n	800211a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3be>
         p->set(term);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	33aa      	adds	r3, #170	; 0xaa
 800210e:	001a      	movs	r2, r3
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	0011      	movs	r1, r2
 8002114:	0018      	movs	r0, r3
 8002116:	f000 f91b 	bl	8002350 <_ZN13TinyGPSCustom3setEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	e7d6      	b.n	80020d0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x374>

  return false;
 8002122:	2300      	movs	r3, #0
}
 8002124:	0018      	movs	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	b007      	add	sp, #28
 800212a:	bd90      	pop	{r4, r7, pc}
 800212c:	08009a0c 	.word	0x08009a0c
 8002130:	08009a14 	.word	0x08009a14
 8002134:	08009a1c 	.word	0x08009a1c
 8002138:	08009a24 	.word	0x08009a24
 800213c:	0800a0b0 	.word	0x0800a0b0

08002140 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
   rawLatData = rawNewLatData;
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	1d10      	adds	r0, r2, #4
 800214e:	331c      	adds	r3, #28
 8002150:	2209      	movs	r2, #9
 8002152:	0019      	movs	r1, r3
 8002154:	f006 ff24 	bl	8008fa0 <memcpy>
   rawLngData = rawNewLngData;
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3210      	adds	r2, #16
 800215e:	0010      	movs	r0, r2
 8002160:	3328      	adds	r3, #40	; 0x28
 8002162:	2209      	movs	r2, #9
 8002164:	0019      	movs	r1, r3
 8002166:	f006 ff1b 	bl	8008fa0 <memcpy>
   lastCommitTime = HAL_GetTick();
 800216a:	f001 fc2b 	bl	80039c4 <HAL_GetTick>
 800216e:	0002      	movs	r2, r0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	635a      	str	r2, [r3, #52]	; 0x34
   valid = updated = true;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	705a      	strb	r2, [r3, #1]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	785a      	ldrb	r2, [r3, #1]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	701a      	strb	r2, [r3, #0]
}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	46bd      	mov	sp, r7
 8002186:	b002      	add	sp, #8
 8002188:	bd80      	pop	{r7, pc}

0800218a <_ZN15TinyGPSLocation11setLatitudeEPKc>:

void TinyGPSLocation::setLatitude(const char *term)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	6039      	str	r1, [r7, #0]
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	331c      	adds	r3, #28
 8002198:	001a      	movs	r2, r3
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	0011      	movs	r1, r2
 800219e:	0018      	movs	r0, r3
 80021a0:	f7ff fd6c 	bl	8001c7c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
}
 80021a4:	46c0      	nop			; (mov r8, r8)
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b002      	add	sp, #8
 80021aa:	bd80      	pop	{r7, pc}

080021ac <_ZN15TinyGPSLocation12setLongitudeEPKc>:

void TinyGPSLocation::setLongitude(const char *term)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3328      	adds	r3, #40	; 0x28
 80021ba:	001a      	movs	r2, r3
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	0011      	movs	r1, r2
 80021c0:	0018      	movs	r0, r3
 80021c2:	f7ff fd5b 	bl	8001c7c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
}
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	46bd      	mov	sp, r7
 80021ca:	b002      	add	sp, #8
 80021cc:	bd80      	pop	{r7, pc}

080021ce <_ZN11TinyGPSDate6commitEv>:
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   return rawLngData.negative ? -ret : ret;
}

void TinyGPSDate::commit()
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
   date = newDate;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	605a      	str	r2, [r3, #4]
   lastCommitTime = HAL_GetTick();
 80021de:	f001 fbf1 	bl	80039c4 <HAL_GetTick>
 80021e2:	0002      	movs	r2, r0
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	60da      	str	r2, [r3, #12]
   valid = updated = true;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	705a      	strb	r2, [r3, #1]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	785a      	ldrb	r2, [r3, #1]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	701a      	strb	r2, [r3, #0]
}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	46bd      	mov	sp, r7
 80021fa:	b002      	add	sp, #8
 80021fc:	bd80      	pop	{r7, pc}

080021fe <_ZN11TinyGPSTime6commitEv>:

void TinyGPSTime::commit()
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
   time = newTime;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	605a      	str	r2, [r3, #4]
   lastCommitTime = HAL_GetTick();
 800220e:	f001 fbd9 	bl	80039c4 <HAL_GetTick>
 8002212:	0002      	movs	r2, r0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	60da      	str	r2, [r3, #12]
   valid = updated = true;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	705a      	strb	r2, [r3, #1]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	785a      	ldrb	r2, [r3, #1]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	701a      	strb	r2, [r3, #0]
}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	46bd      	mov	sp, r7
 800222a:	b002      	add	sp, #8
 800222c:	bd80      	pop	{r7, pc}

0800222e <_ZN11TinyGPSTime7setTimeEPKc>:

void TinyGPSTime::setTime(const char *term)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	6039      	str	r1, [r7, #0]
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	0018      	movs	r0, r3
 800223c:	f7ff fcb6 	bl	8001bac <_ZN11TinyGPSPlus12parseDecimalEPKc>
 8002240:	0003      	movs	r3, r0
 8002242:	001a      	movs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	609a      	str	r2, [r3, #8]
}
 8002248:	46c0      	nop			; (mov r8, r8)
 800224a:	46bd      	mov	sp, r7
 800224c:	b002      	add	sp, #8
 800224e:	bd80      	pop	{r7, pc}

08002250 <_ZN11TinyGPSDate7setDateEPKc>:

void TinyGPSDate::setDate(const char *term)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
   newDate = atol(term);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	0018      	movs	r0, r3
 800225e:	f006 fe6f 	bl	8008f40 <atol>
 8002262:	0003      	movs	r3, r0
 8002264:	001a      	movs	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	609a      	str	r2, [r3, #8]
}
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	46bd      	mov	sp, r7
 800226e:	b002      	add	sp, #8
 8002270:	bd80      	pop	{r7, pc}

08002272 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
   val = newval;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	609a      	str	r2, [r3, #8]
   lastCommitTime = HAL_GetTick();
 8002282:	f001 fb9f 	bl	80039c4 <HAL_GetTick>
 8002286:	0002      	movs	r2, r0
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	605a      	str	r2, [r3, #4]
   valid = updated = true;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	705a      	strb	r2, [r3, #1]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	785a      	ldrb	r2, [r3, #1]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	701a      	strb	r2, [r3, #0]
}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	46bd      	mov	sp, r7
 800229e:	b002      	add	sp, #8
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <_ZN14TinyGPSDecimal3setEPKc>:

void TinyGPSDecimal::set(const char *term)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	6039      	str	r1, [r7, #0]
   newval = TinyGPSPlus::parseDecimal(term);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	0018      	movs	r0, r3
 80022b0:	f7ff fc7c 	bl	8001bac <_ZN11TinyGPSPlus12parseDecimalEPKc>
 80022b4:	0002      	movs	r2, r0
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	60da      	str	r2, [r3, #12]
}
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	46bd      	mov	sp, r7
 80022be:	b002      	add	sp, #8
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <_ZN14TinyGPSInteger6commitEv>:

void TinyGPSInteger::commit()
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
   val = newval;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	609a      	str	r2, [r3, #8]
   lastCommitTime = HAL_GetTick();
 80022d2:	f001 fb77 	bl	80039c4 <HAL_GetTick>
 80022d6:	0002      	movs	r2, r0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	605a      	str	r2, [r3, #4]
   valid = updated = true;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	705a      	strb	r2, [r3, #1]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	785a      	ldrb	r2, [r3, #1]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	701a      	strb	r2, [r3, #0]
}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	46bd      	mov	sp, r7
 80022ee:	b002      	add	sp, #8
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <_ZN14TinyGPSInteger3setEPKc>:

void TinyGPSInteger::set(const char *term)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]
   newval = atol(term);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	0018      	movs	r0, r3
 8002300:	f006 fe1e 	bl	8008f40 <atol>
 8002304:	0003      	movs	r3, r0
 8002306:	001a      	movs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	60da      	str	r2, [r3, #12]
}
 800230c:	46c0      	nop			; (mov r8, r8)
 800230e:	46bd      	mov	sp, r7
 8002310:	b002      	add	sp, #8
 8002312:	bd80      	pop	{r7, pc}

08002314 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
   strcpy(this->buffer, this->stagingBuffer);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3310      	adds	r3, #16
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	0011      	movs	r1, r2
 8002324:	0018      	movs	r0, r3
 8002326:	f006 fe6d 	bl	8009004 <strcpy>
   lastCommitTime = HAL_GetTick();
 800232a:	f001 fb4b 	bl	80039c4 <HAL_GetTick>
 800232e:	0002      	movs	r2, r0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	621a      	str	r2, [r3, #32]
   valid = updated = true;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2225      	movs	r2, #37	; 0x25
 8002338:	2101      	movs	r1, #1
 800233a:	5499      	strb	r1, [r3, r2]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2225      	movs	r2, #37	; 0x25
 8002340:	5c99      	ldrb	r1, [r3, r2]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2224      	movs	r2, #36	; 0x24
 8002346:	5499      	strb	r1, [r3, r2]
}
 8002348:	46c0      	nop			; (mov r8, r8)
 800234a:	46bd      	mov	sp, r7
 800234c:	b002      	add	sp, #8
 800234e:	bd80      	pop	{r7, pc}

08002350 <_ZN13TinyGPSCustom3setEPKc>:

void TinyGPSCustom::set(const char *term)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6839      	ldr	r1, [r7, #0]
 800235e:	2210      	movs	r2, #16
 8002360:	0018      	movs	r0, r3
 8002362:	f006 fe57 	bl	8009014 <strncpy>
}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	46bd      	mov	sp, r7
 800236a:	b002      	add	sp, #8
 800236c:	bd80      	pop	{r7, pc}

0800236e <_ZN12SX1280Driver11SetIdleModeEv>:

    ////////////////Configuration Functions/////////////
    SX1280Driver();
    bool Begin();
    void End();
    void SetIdleMode() { SetMode(SX1280_MODE_FS); }; // set Idle mode used when switching from RX to TX
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2104      	movs	r1, #4
 800237a:	0018      	movs	r0, r3
 800237c:	f7fe fb2c 	bl	80009d8 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>
 8002380:	46c0      	nop			; (mov r8, r8)
 8002382:	46bd      	mov	sp, r7
 8002384:	b002      	add	sp, #8
 8002386:	bd80      	pop	{r7, pc}

08002388 <_ZN12Transmission17resetTransmissionEv>:

	void processRFPacket();



	void resetTransmission(){
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
		disableTransmission();
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	0018      	movs	r0, r3
 8002394:	f000 f9a4 	bl	80026e0 <_ZN12Transmission19disableTransmissionEv>
		HAL_Delay(10);
 8002398:	200a      	movs	r0, #10
 800239a:	f001 fb1d 	bl	80039d8 <HAL_Delay>
		enableTransmission();
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	0018      	movs	r0, r3
 80023a2:	f000 f8d5 	bl	8002550 <_ZN12Transmission18enableTransmissionEv>
	}
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	46bd      	mov	sp, r7
 80023aa:	b002      	add	sp, #8
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <_ZL14GetInitialFreqv>:
// The number of frequencies for this regulatory domain
uint32_t FHSSgetChannelCount(void);

// get the initial frequency, which is also the sync channel
static inline uint32_t GetInitialFreq()
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
    return FHSSfreqs[sync_channel];
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <_ZL14GetInitialFreqv+0x14>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <_ZL14GetInitialFreqv+0x18>)
 80023ba:	0092      	lsls	r2, r2, #2
 80023bc:	58d3      	ldr	r3, [r2, r3]
}
 80023be:	0018      	movs	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	200000a4 	.word	0x200000a4
 80023c8:	08009ac0 	.word	0x08009ac0

080023cc <_ZL15FHSSgetNextFreqv>:
    FHSSptr = value % FHSS_SEQUENCE_CNT;
}

// Advance the pointer to the next hop and return the frequency of that channel
static inline uint32_t FHSSgetNextFreq()
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
    FHSSptr = (FHSSptr + 1) % FHSS_SEQUENCE_CNT;
 80023d2:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <_ZL15FHSSgetNextFreqv+0x44>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <_ZL15FHSSgetNextFreqv+0x48>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	0019      	movs	r1, r3
 80023e0:	0010      	movs	r0, r2
 80023e2:	f7fe f813 	bl	800040c <__aeabi_idivmod>
 80023e6:	000b      	movs	r3, r1
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <_ZL15FHSSgetNextFreqv+0x44>)
 80023ec:	701a      	strb	r2, [r3, #0]
    uint32_t freq = FHSSfreqs[FHSSsequence[FHSSptr]];
 80023ee:	4b08      	ldr	r3, [pc, #32]	; (8002410 <_ZL15FHSSgetNextFreqv+0x44>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	001a      	movs	r2, r3
 80023f6:	4b08      	ldr	r3, [pc, #32]	; (8002418 <_ZL15FHSSgetNextFreqv+0x4c>)
 80023f8:	5c9b      	ldrb	r3, [r3, r2]
 80023fa:	001a      	movs	r2, r3
 80023fc:	4b07      	ldr	r3, [pc, #28]	; (800241c <_ZL15FHSSgetNextFreqv+0x50>)
 80023fe:	0092      	lsls	r2, r2, #2
 8002400:	58d3      	ldr	r3, [r2, r3]
 8002402:	607b      	str	r3, [r7, #4]
    return freq;
 8002404:	687b      	ldr	r3, [r7, #4]
}
 8002406:	0018      	movs	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	b002      	add	sp, #8
 800240c:	bd80      	pop	{r7, pc}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	200000a0 	.word	0x200000a0
 8002414:	08009c00 	.word	0x08009c00
 8002418:	2000008c 	.word	0x2000008c
 800241c:	08009ac0 	.word	0x08009ac0

08002420 <_ZL10rxCallbackv>:
#include <cstring>
#include "main.h"

static Transmission* pTransmission;

static inline void rxCallback(){
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
	pTransmission->rxDoneISR();
 8002424:	4b03      	ldr	r3, [pc, #12]	; (8002434 <_ZL10rxCallbackv+0x14>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0018      	movs	r0, r3
 800242a:	f000 f9d1 	bl	80027d0 <_ZN12Transmission9rxDoneISREv>
}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	200000f4 	.word	0x200000f4

08002438 <_ZL10txCallbackv>:

static inline void txCallback(){
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
	pTransmission->txDoneISR();
 800243c:	4b03      	ldr	r3, [pc, #12]	; (800244c <_ZL10txCallbackv+0x14>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	0018      	movs	r0, r3
 8002442:	f000 f9fc 	bl	800283e <_ZN12Transmission9txDoneISREv>
}
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	200000f4 	.word	0x200000f4

08002450 <_ZN12Transmission5beginEP17TIM_HandleTypeDef>:

bool Transmission::begin(TIM_HandleTypeDef* t){
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]

	/* Catch if already initalized */
	if(radioInitialized == true)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2278      	movs	r2, #120	; 0x78
 800245e:	5c9b      	ldrb	r3, [r3, r2]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d103      	bne.n	800246c <_ZN12Transmission5beginEP17TIM_HandleTypeDef+0x1c>
		return radioInitialized;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2278      	movs	r2, #120	; 0x78
 8002468:	5c9b      	ldrb	r3, [r3, r2]
 800246a:	e025      	b.n	80024b8 <_ZN12Transmission5beginEP17TIM_HandleTypeDef+0x68>

	timer = t;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	671a      	str	r2, [r3, #112]	; 0x70
	pTransmission = this;
 8002472:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <_ZN12Transmission5beginEP17TIM_HandleTypeDef+0x70>)
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	601a      	str	r2, [r3, #0]
	Radio.RXdoneCallback = &rxCallback;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a12      	ldr	r2, [pc, #72]	; (80024c4 <_ZN12Transmission5beginEP17TIM_HandleTypeDef+0x74>)
 800247c:	601a      	str	r2, [r3, #0]
	Radio.TXdoneCallback = &txCallback;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a11      	ldr	r2, [pc, #68]	; (80024c8 <_ZN12Transmission5beginEP17TIM_HandleTypeDef+0x78>)
 8002482:	605a      	str	r2, [r3, #4]

	if(Radio.Begin() == true)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	0018      	movs	r0, r3
 8002488:	f7fe f928 	bl	80006dc <_ZN12SX1280Driver5BeginEv>
 800248c:	0003      	movs	r3, r0
 800248e:	3b01      	subs	r3, #1
 8002490:	425a      	negs	r2, r3
 8002492:	4153      	adcs	r3, r2
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <_ZN12Transmission5beginEP17TIM_HandleTypeDef+0x52>
		radioInitialized = true;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2278      	movs	r2, #120	; 0x78
 800249e:	2101      	movs	r1, #1
 80024a0:	5499      	strb	r1, [r3, r2]

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	0219      	lsls	r1, r3, #8
 80024a6:	23a0      	movs	r3, #160	; 0xa0
 80024a8:	05db      	lsls	r3, r3, #23
 80024aa:	2201      	movs	r2, #1
 80024ac:	0018      	movs	r0, r3
 80024ae:	f002 fa96 	bl	80049de <HAL_GPIO_WritePin>
	return radioInitialized;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2278      	movs	r2, #120	; 0x78
 80024b6:	5c9b      	ldrb	r3, [r3, r2]
}
 80024b8:	0018      	movs	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b002      	add	sp, #8
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	200000f4 	.word	0x200000f4
 80024c4:	08002421 	.word	0x08002421
 80024c8:	08002439 	.word	0x08002439

080024cc <_ZN12Transmission13setLinkPhraseEPKhm>:

void Transmission::setLinkPhrase(const uint8_t* linkPhrase, uint32_t length){
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
	// Reset the linkPhrase
	memset(Settings.linkPhrase, 0, 8);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	3348      	adds	r3, #72	; 0x48
 80024dc:	2208      	movs	r2, #8
 80024de:	2100      	movs	r1, #0
 80024e0:	0018      	movs	r0, r3
 80024e2:	f006 fd66 	bl	8008fb2 <memset>
	// Copy new linkPhrase
	memcpy(Settings.linkPhrase, linkPhrase, length);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	3348      	adds	r3, #72	; 0x48
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	68b9      	ldr	r1, [r7, #8]
 80024ee:	0018      	movs	r0, r3
 80024f0:	f006 fd56 	bl	8008fa0 <memcpy>

	/* If the transmission was already enabled, restart it */
	if(Settings.transmissionEnabled){
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2250      	movs	r2, #80	; 0x50
 80024f8:	5c9b      	ldrb	r3, [r3, r2]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <_ZN12Transmission13setLinkPhraseEPKhm+0x3a>
		resetTransmission();
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	0018      	movs	r0, r3
 8002502:	f7ff ff41 	bl	8002388 <_ZN12Transmission17resetTransmissionEv>
	}
}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	46bd      	mov	sp, r7
 800250a:	b004      	add	sp, #16
 800250c:	bd80      	pop	{r7, pc}

0800250e <_ZN12Transmission12setDirectionE24transmission_direction_e>:

void Transmission::setDirection(transmission_direction_e transmissionDirection){
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	000a      	movs	r2, r1
 8002518:	1cfb      	adds	r3, r7, #3
 800251a:	701a      	strb	r2, [r3, #0]
	if(Settings.transmissionDirection != transmissionDirection){
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2244      	movs	r2, #68	; 0x44
 8002520:	5c9b      	ldrb	r3, [r3, r2]
 8002522:	1cfa      	adds	r2, r7, #3
 8002524:	7812      	ldrb	r2, [r2, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d00d      	beq.n	8002546 <_ZN12Transmission12setDirectionE24transmission_direction_e+0x38>
		Settings.transmissionDirection = transmissionDirection;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	1cfa      	adds	r2, r7, #3
 800252e:	2144      	movs	r1, #68	; 0x44
 8002530:	7812      	ldrb	r2, [r2, #0]
 8002532:	545a      	strb	r2, [r3, r1]
		if(Settings.transmissionEnabled){
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2250      	movs	r2, #80	; 0x50
 8002538:	5c9b      	ldrb	r3, [r3, r2]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <_ZN12Transmission12setDirectionE24transmission_direction_e+0x38>
			resetTransmission();
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	0018      	movs	r0, r3
 8002542:	f7ff ff21 	bl	8002388 <_ZN12Transmission17resetTransmissionEv>
		}
	}
}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	46bd      	mov	sp, r7
 800254a:	b002      	add	sp, #8
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <_ZN12Transmission18enableTransmissionEv>:

void Transmission::setPowerLevel(int8_t gain){
	Settings.powerLevel = gain;
}

void Transmission::enableTransmission(){
 8002550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002552:	46ce      	mov	lr, r9
 8002554:	4647      	mov	r7, r8
 8002556:	b580      	push	{r7, lr}
 8002558:	b08d      	sub	sp, #52	; 0x34
 800255a:	af08      	add	r7, sp, #32
 800255c:	6078      	str	r0, [r7, #4]

	if(radioInitialized == false)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2278      	movs	r2, #120	; 0x78
 8002562:	5c9b      	ldrb	r3, [r3, r2]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d100      	bne.n	800256a <_ZN12Transmission18enableTransmissionEv+0x1a>
 8002568:	e0ae      	b.n	80026c8 <_ZN12Transmission18enableTransmissionEv+0x178>
		return;

	if(Settings.transmissionEnabled)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2250      	movs	r2, #80	; 0x50
 800256e:	5c9b      	ldrb	r3, [r3, r2]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d000      	beq.n	8002576 <_ZN12Transmission18enableTransmissionEv+0x26>
 8002574:	e0aa      	b.n	80026cc <_ZN12Transmission18enableTransmissionEv+0x17c>
		return;

	Settings.transmissionEnabled = true;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2250      	movs	r2, #80	; 0x50
 800257a:	2101      	movs	r1, #1
 800257c:	5499      	strb	r1, [r3, r2]

	linkCRC = crc32(Settings.linkPhrase, 8);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3348      	adds	r3, #72	; 0x48
 8002582:	2108      	movs	r1, #8
 8002584:	0018      	movs	r0, r3
 8002586:	f7fe f85d 	bl	8000644 <_Z5crc32PKhj>
 800258a:	0002      	movs	r2, r0
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	67da      	str	r2, [r3, #124]	; 0x7c
	linkXOR = linkCRC & 0xFF;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002594:	b2d9      	uxtb	r1, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	227b      	movs	r2, #123	; 0x7b
 800259a:	5499      	strb	r1, [r3, r2]

	Radio.SetOutputPower(Settings.powerLevel - Settings.paGain);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2247      	movs	r2, #71	; 0x47
 80025a2:	569b      	ldrsb	r3, [r3, r2]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2146      	movs	r1, #70	; 0x46
 80025aa:	565b      	ldrsb	r3, [r3, r1]
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	b25b      	sxtb	r3, r3
 80025b4:	0019      	movs	r1, r3
 80025b6:	f7fe f9dd 	bl	8000974 <_ZN12SX1280Driver14SetOutputPowerEa>

	HAL_Delay(10);
 80025ba:	200a      	movs	r0, #10
 80025bc:	f001 fa0c 	bl	80039d8 <HAL_Delay>

	/* Get the modulation settings */
	modulation_settings_s *const modParams = &Settings.modulationConfig[Settings.modeIndex];
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025c4:	0013      	movs	r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	189b      	adds	r3, r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	3350      	adds	r3, #80	; 0x50
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	18d3      	adds	r3, r2, r3
 80025d2:	3308      	adds	r3, #8
 80025d4:	60fb      	str	r3, [r7, #12]

	if(Settings.transmissionDirection == TX){
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2244      	movs	r2, #68	; 0x44
 80025da:	5c9b      	ldrb	r3, [r3, r2]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d12a      	bne.n	8002636 <_ZN12Transmission18enableTransmissionEv+0xe6>
		Radio.Config(modParams->bw, modParams->sf, modParams->cr, GetInitialFreq(),
 80025e0:	687c      	ldr	r4, [r7, #4]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	781d      	ldrb	r5, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	785e      	ldrb	r6, [r3, #1]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	789b      	ldrb	r3, [r3, #2]
 80025ee:	4698      	mov	r8, r3
 80025f0:	f7ff fede 	bl	80023b0 <_ZL14GetInitialFreqv>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	7a1a      	ldrb	r2, [r3, #8]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	7a59      	ldrb	r1, [r3, #9]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4699      	mov	r9, r3
 8002602:	2300      	movs	r3, #0
 8002604:	469c      	mov	ip, r3
 8002606:	4663      	mov	r3, ip
 8002608:	9307      	str	r3, [sp, #28]
 800260a:	2300      	movs	r3, #0
 800260c:	469c      	mov	ip, r3
 800260e:	4663      	mov	r3, ip
 8002610:	9306      	str	r3, [sp, #24]
 8002612:	2300      	movs	r3, #0
 8002614:	469c      	mov	ip, r3
 8002616:	4663      	mov	r3, ip
 8002618:	9305      	str	r3, [sp, #20]
 800261a:	464b      	mov	r3, r9
 800261c:	9304      	str	r3, [sp, #16]
 800261e:	9103      	str	r1, [sp, #12]
 8002620:	2300      	movs	r3, #0
 8002622:	9302      	str	r3, [sp, #8]
 8002624:	9201      	str	r2, [sp, #4]
 8002626:	9000      	str	r0, [sp, #0]
 8002628:	4643      	mov	r3, r8
 800262a:	0032      	movs	r2, r6
 800262c:	0029      	movs	r1, r5
 800262e:	0020      	movs	r0, r4
 8002630:	f7fe f8e4 	bl	80007fc <_ZN12SX1280Driver6ConfigEhhhmhbhmmth>
 8002634:	e021      	b.n	800267a <_ZN12Transmission18enableTransmissionEv+0x12a>
						modParams->PreambleLen, 0, modParams->PayloadLength, modParams->interval);
	} else {
		Radio.Config(modParams->bw, modParams->sf, modParams->cr, GetInitialFreq(),
 8002636:	687c      	ldr	r4, [r7, #4]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	781d      	ldrb	r5, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	785e      	ldrb	r6, [r3, #1]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	789b      	ldrb	r3, [r3, #2]
 8002644:	4698      	mov	r8, r3
 8002646:	f7ff feb3 	bl	80023b0 <_ZL14GetInitialFreqv>
 800264a:	0001      	movs	r1, r0
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	7a1b      	ldrb	r3, [r3, #8]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	7a52      	ldrb	r2, [r2, #9]
 8002654:	2000      	movs	r0, #0
 8002656:	9007      	str	r0, [sp, #28]
 8002658:	2000      	movs	r0, #0
 800265a:	9006      	str	r0, [sp, #24]
 800265c:	2000      	movs	r0, #0
 800265e:	9005      	str	r0, [sp, #20]
 8002660:	2000      	movs	r0, #0
 8002662:	9004      	str	r0, [sp, #16]
 8002664:	9203      	str	r2, [sp, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	9202      	str	r2, [sp, #8]
 800266a:	9301      	str	r3, [sp, #4]
 800266c:	9100      	str	r1, [sp, #0]
 800266e:	4643      	mov	r3, r8
 8002670:	0032      	movs	r2, r6
 8002672:	0029      	movs	r1, r5
 8002674:	0020      	movs	r0, r4
 8002676:	f7fe f8c1 	bl	80007fc <_ZN12SX1280Driver6ConfigEhhhmhbhmmth>
						modParams->PreambleLen, 0, modParams->PayloadLength, 0);
	}

	payloadLength = modParams->PayloadLength;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	7a5b      	ldrb	r3, [r3, #9]
 800267e:	0019      	movs	r1, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2280      	movs	r2, #128	; 0x80
 8002684:	5099      	str	r1, [r3, r2]

	HAL_Delay(10);
 8002686:	200a      	movs	r0, #10
 8002688:	f001 f9a6 	bl	80039d8 <HAL_Delay>

	if(Settings.transmissionDirection == TX){
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2244      	movs	r2, #68	; 0x44
 8002690:	5c9b      	ldrb	r3, [r3, r2]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d10a      	bne.n	80026ac <_ZN12Transmission18enableTransmissionEv+0x15c>
		TIM2->ARR = 1000;
 8002696:	2380      	movs	r3, #128	; 0x80
 8002698:	05db      	lsls	r3, r3, #23
 800269a:	22fa      	movs	r2, #250	; 0xfa
 800269c:	0092      	lsls	r2, r2, #2
 800269e:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_Base_Start_IT(timer);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a4:	0018      	movs	r0, r3
 80026a6:	f003 ffa1 	bl	80065ec <HAL_TIM_Base_Start_IT>
 80026aa:	e010      	b.n	80026ce <_ZN12Transmission18enableTransmissionEv+0x17e>
	} else {
		TIM2->ARR = 1005;
 80026ac:	2380      	movs	r3, #128	; 0x80
 80026ae:	05db      	lsls	r3, r3, #23
 80026b0:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <_ZN12Transmission18enableTransmissionEv+0x18c>)
 80026b2:	62da      	str	r2, [r3, #44]	; 0x2c
		Radio.RXnb();
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	0018      	movs	r0, r3
 80026b8:	f7fe fcc2 	bl	8001040 <_ZN12SX1280Driver4RXnbEv>
		HAL_TIM_Base_Start_IT(timer);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c0:	0018      	movs	r0, r3
 80026c2:	f003 ff93 	bl	80065ec <HAL_TIM_Base_Start_IT>
 80026c6:	e002      	b.n	80026ce <_ZN12Transmission18enableTransmissionEv+0x17e>
		return;
 80026c8:	46c0      	nop			; (mov r8, r8)
 80026ca:	e000      	b.n	80026ce <_ZN12Transmission18enableTransmissionEv+0x17e>
		return;
 80026cc:	46c0      	nop			; (mov r8, r8)
	}
}
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b005      	add	sp, #20
 80026d2:	bcc0      	pop	{r6, r7}
 80026d4:	46b9      	mov	r9, r7
 80026d6:	46b0      	mov	r8, r6
 80026d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	000003ed 	.word	0x000003ed

080026e0 <_ZN12Transmission19disableTransmissionEv>:

void Transmission::disableTransmission(){
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
	/* Wait until done transmitting / receiving*/
	while(busyTransmitting);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	227a      	movs	r2, #122	; 0x7a
 80026ec:	5c9b      	ldrb	r3, [r3, r2]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d000      	beq.n	80026f6 <_ZN12Transmission19disableTransmissionEv+0x16>
 80026f4:	e7f8      	b.n	80026e8 <_ZN12Transmission19disableTransmissionEv+0x8>

	if (!Settings.transmissionEnabled)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2250      	movs	r2, #80	; 0x50
 80026fa:	5c9b      	ldrb	r3, [r3, r2]
 80026fc:	2201      	movs	r2, #1
 80026fe:	4053      	eors	r3, r2
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d122      	bne.n	800274c <_ZN12Transmission19disableTransmissionEv+0x6c>
		return;

	Settings.transmissionEnabled = false;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2250      	movs	r2, #80	; 0x50
 800270a:	2100      	movs	r1, #0
 800270c:	5499      	strb	r1, [r3, r2]

	/* Disable Timer */
	HAL_TIM_Base_Stop_IT(timer);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002712:	0018      	movs	r0, r3
 8002714:	f003 ffc6 	bl	80066a4 <HAL_TIM_Base_Stop_IT>
	TIM2->CNT = 0;
 8002718:	2380      	movs	r3, #128	; 0x80
 800271a:	05db      	lsls	r3, r3, #23
 800271c:	2200      	movs	r2, #0
 800271e:	625a      	str	r2, [r3, #36]	; 0x24

	/* Put Radio in Idle Mode */
	Radio.SetIdleMode();
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	0018      	movs	r0, r3
 8002724:	f7ff fe23 	bl	800236e <_ZN12SX1280Driver11SetIdleModeEv>

	LQCalc.reset();
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3338      	adds	r3, #56	; 0x38
 800272c:	0018      	movs	r0, r3
 800272e:	f000 f957 	bl	80029e0 <_ZN6LQCALCILh30EE5resetEv>
	connectionState = disconnected;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2279      	movs	r2, #121	; 0x79
 8002736:	2102      	movs	r1, #2
 8002738:	5499      	strb	r1, [r3, r2]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800273a:	2380      	movs	r3, #128	; 0x80
 800273c:	0219      	lsls	r1, r3, #8
 800273e:	23a0      	movs	r3, #160	; 0xa0
 8002740:	05db      	lsls	r3, r3, #23
 8002742:	2201      	movs	r2, #1
 8002744:	0018      	movs	r0, r3
 8002746:	f002 f94a 	bl	80049de <HAL_GPIO_WritePin>
 800274a:	e000      	b.n	800274e <_ZN12Transmission19disableTransmissionEv+0x6e>
		return;
 800274c:	46c0      	nop			; (mov r8, r8)
}
 800274e:	46bd      	mov	sp, r7
 8002750:	b002      	add	sp, #8
 8002752:	bd80      	pop	{r7, pc}

08002754 <_ZN12Transmission15processRFPacketEv>:

void Transmission::processRFPacket(){
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
	LQCalc.inc();
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3338      	adds	r3, #56	; 0x38
 8002760:	0018      	movs	r0, r3
 8002762:	f000 f964 	bl	8002a2e <_ZN6LQCALCILh30EE3incEv>

	uint8_t crc = (uint8_t)crc32((const uint8_t*)Radio.RXdataBuffer, payloadLength-1);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3318      	adds	r3, #24
 800276a:	001a      	movs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2180      	movs	r1, #128	; 0x80
 8002770:	585b      	ldr	r3, [r3, r1]
 8002772:	3b01      	subs	r3, #1
 8002774:	0019      	movs	r1, r3
 8002776:	0010      	movs	r0, r2
 8002778:	f7fd ff64 	bl	8000644 <_Z5crc32PKhj>
 800277c:	0002      	movs	r2, r0
 800277e:	210f      	movs	r1, #15
 8002780:	187b      	adds	r3, r7, r1
 8002782:	701a      	strb	r2, [r3, #0]

	if ((linkXOR ^ crc) == Radio.RXdataBuffer[payloadLength-1]){
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	227b      	movs	r2, #123	; 0x7b
 8002788:	5c9a      	ldrb	r2, [r3, r2]
 800278a:	187b      	adds	r3, r7, r1
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	4053      	eors	r3, r2
 8002790:	b2da      	uxtb	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2180      	movs	r1, #128	; 0x80
 8002796:	585b      	ldr	r3, [r3, r1]
 8002798:	3b01      	subs	r3, #1
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	18cb      	adds	r3, r1, r3
 800279e:	7e1b      	ldrb	r3, [r3, #24]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	425a      	negs	r2, r3
 80027a6:	4153      	adcs	r3, r2
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00c      	beq.n	80027c8 <_ZN12Transmission15processRFPacketEv+0x74>
		connectionState = connected;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2279      	movs	r2, #121	; 0x79
 80027b2:	2100      	movs	r1, #0
 80027b4:	5499      	strb	r1, [r3, r2]
		timeout = 0;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	675a      	str	r2, [r3, #116]	; 0x74
	} else {
		return;
	}

	LQCalc.add();
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3338      	adds	r3, #56	; 0x38
 80027c0:	0018      	movs	r0, r3
 80027c2:	f000 f98c 	bl	8002ade <_ZN6LQCALCILh30EE3addEv>
 80027c6:	e000      	b.n	80027ca <_ZN12Transmission15processRFPacketEv+0x76>
		return;
 80027c8:	46c0      	nop			; (mov r8, r8)

}
 80027ca:	46bd      	mov	sp, r7
 80027cc:	b004      	add	sp, #16
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <_ZN12Transmission9rxDoneISREv>:

void Transmission::rxDoneISR(){
 80027d0:	b590      	push	{r4, r7, lr}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
	busyTransmitting = false;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	227a      	movs	r2, #122	; 0x7a
 80027dc:	2100      	movs	r1, #0
 80027de:	5499      	strb	r1, [r3, r2]

	/* Reset the timer */
	HAL_TIM_Base_Stop_IT(timer);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e4:	0018      	movs	r0, r3
 80027e6:	f003 ff5d 	bl	80066a4 <HAL_TIM_Base_Stop_IT>
	TIM2->CNT = 0;
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	05db      	lsls	r3, r3, #23
 80027ee:	2200      	movs	r2, #0
 80027f0:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(timer);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f6:	0018      	movs	r0, r3
 80027f8:	f003 fef8 	bl	80065ec <HAL_TIM_Base_Start_IT>

	processRFPacket();
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	0018      	movs	r0, r3
 8002800:	f7ff ffa8 	bl	8002754 <_ZN12Transmission15processRFPacketEv>

	if(connectionState == connected){
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2279      	movs	r2, #121	; 0x79
 8002808:	5c9b      	ldrb	r3, [r3, r2]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d107      	bne.n	800281e <_ZN12Transmission9rxDoneISREv+0x4e>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	021a      	lsls	r2, r3, #8
 8002812:	23a0      	movs	r3, #160	; 0xa0
 8002814:	05db      	lsls	r3, r3, #23
 8002816:	0011      	movs	r1, r2
 8002818:	0018      	movs	r0, r3
 800281a:	f002 f8fd 	bl	8004a18 <HAL_GPIO_TogglePin>
	}

	Radio.SetFrequencyReg(FHSSgetNextFreq());
 800281e:	687c      	ldr	r4, [r7, #4]
 8002820:	f7ff fdd4 	bl	80023cc <_ZL15FHSSgetNextFreqv>
 8002824:	0003      	movs	r3, r0
 8002826:	0019      	movs	r1, r3
 8002828:	0020      	movs	r0, r4
 800282a:	f7fe fa9f 	bl	8000d6c <_ZN12SX1280Driver15SetFrequencyRegEm>

	Radio.RXnb();
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	0018      	movs	r0, r3
 8002832:	f7fe fc05 	bl	8001040 <_ZN12SX1280Driver4RXnbEv>
}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	46bd      	mov	sp, r7
 800283a:	b003      	add	sp, #12
 800283c:	bd90      	pop	{r4, r7, pc}

0800283e <_ZN12Transmission9txDoneISREv>:

void Transmission::txDoneISR(){
 800283e:	b590      	push	{r4, r7, lr}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
	busyTransmitting = false;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	227a      	movs	r2, #122	; 0x7a
 800284a:	2100      	movs	r1, #0
 800284c:	5499      	strb	r1, [r3, r2]

	Radio.SetFrequencyReg(FHSSgetNextFreq());
 800284e:	687c      	ldr	r4, [r7, #4]
 8002850:	f7ff fdbc 	bl	80023cc <_ZL15FHSSgetNextFreqv>
 8002854:	0003      	movs	r3, r0
 8002856:	0019      	movs	r1, r3
 8002858:	0020      	movs	r0, r4
 800285a:	f7fe fa87 	bl	8000d6c <_ZN12SX1280Driver15SetFrequencyRegEm>
}
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	46bd      	mov	sp, r7
 8002862:	b003      	add	sp, #12
 8002864:	bd90      	pop	{r4, r7, pc}

08002866 <_ZN12Transmission9rxTimeoutEv>:

void Transmission::rxTimeout(){
 8002866:	b590      	push	{r4, r7, lr}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]

	if(timeout == 50){
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002872:	2b32      	cmp	r3, #50	; 0x32
 8002874:	d110      	bne.n	8002898 <_ZN12Transmission9rxTimeoutEv+0x32>
		LQCalc.reset();
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3338      	adds	r3, #56	; 0x38
 800287a:	0018      	movs	r0, r3
 800287c:	f000 f8b0 	bl	80029e0 <_ZN6LQCALCILh30EE5resetEv>
		connectionState = disconnected;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2279      	movs	r2, #121	; 0x79
 8002884:	2102      	movs	r1, #2
 8002886:	5499      	strb	r1, [r3, r2]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	0219      	lsls	r1, r3, #8
 800288c:	23a0      	movs	r3, #160	; 0xa0
 800288e:	05db      	lsls	r3, r3, #23
 8002890:	2201      	movs	r2, #1
 8002892:	0018      	movs	r0, r3
 8002894:	f002 f8a3 	bl	80049de <HAL_GPIO_WritePin>
	}

	if(connectionState == connected){
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2279      	movs	r2, #121	; 0x79
 800289c:	5c9b      	ldrb	r3, [r3, r2]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10d      	bne.n	80028be <_ZN12Transmission9rxTimeoutEv+0x58>
	  LQCalc.inc();
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3338      	adds	r3, #56	; 0x38
 80028a6:	0018      	movs	r0, r3
 80028a8:	f000 f8c1 	bl	8002a2e <_ZN6LQCALCILh30EE3incEv>
	  Radio.SetFrequencyReg(FHSSgetNextFreq());
 80028ac:	687c      	ldr	r4, [r7, #4]
 80028ae:	f7ff fd8d 	bl	80023cc <_ZL15FHSSgetNextFreqv>
 80028b2:	0003      	movs	r3, r0
 80028b4:	0019      	movs	r1, r3
 80028b6:	0020      	movs	r0, r4
 80028b8:	f7fe fa58 	bl	8000d6c <_ZN12SX1280Driver15SetFrequencyRegEm>
 80028bc:	e00e      	b.n	80028dc <_ZN12Transmission9rxTimeoutEv+0x76>
	} else {
	  if(timeout > 5){
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c2:	2b05      	cmp	r3, #5
 80028c4:	d90a      	bls.n	80028dc <_ZN12Transmission9rxTimeoutEv+0x76>
		  timeout = 0;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	675a      	str	r2, [r3, #116]	; 0x74
		  Radio.SetFrequencyReg(FHSSgetNextFreq());
 80028cc:	687c      	ldr	r4, [r7, #4]
 80028ce:	f7ff fd7d 	bl	80023cc <_ZL15FHSSgetNextFreqv>
 80028d2:	0003      	movs	r3, r0
 80028d4:	0019      	movs	r1, r3
 80028d6:	0020      	movs	r0, r4
 80028d8:	f7fe fa48 	bl	8000d6c <_ZN12SX1280Driver15SetFrequencyRegEm>
	  }
	}

	timeout++;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	46bd      	mov	sp, r7
 80028ea:	b003      	add	sp, #12
 80028ec:	bd90      	pop	{r4, r7, pc}

080028ee <_ZN12Transmission10txTransmitEv>:


void Transmission::txTransmit(){
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b084      	sub	sp, #16
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
	/* Add payload to tx buffer */
	for(uint32_t i = 0; i < payloadLength-1; i++){
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2280      	movs	r2, #128	; 0x80
 80028fe:	589b      	ldr	r3, [r3, r2]
 8002900:	3b01      	subs	r3, #1
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	429a      	cmp	r2, r3
 8002906:	d20f      	bcs.n	8002928 <_ZN12Transmission10txTransmitEv+0x3a>
		Radio.TXdataBuffer[i] = txData[i];
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	2184      	movs	r1, #132	; 0x84
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	18d3      	adds	r3, r2, r3
 8002910:	185b      	adds	r3, r3, r1
 8002912:	7819      	ldrb	r1, [r3, #0]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	18d3      	adds	r3, r2, r3
 800291a:	3308      	adds	r3, #8
 800291c:	1c0a      	adds	r2, r1, #0
 800291e:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < payloadLength-1; i++){
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	3301      	adds	r3, #1
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	e7e8      	b.n	80028fa <_ZN12Transmission10txTransmitEv+0xc>
	}

	/* Calculate CRC and store in last position */
	uint8_t crc = (uint8_t)crc32((const uint8_t*)txData, payloadLength-1);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3384      	adds	r3, #132	; 0x84
 800292c:	001a      	movs	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2180      	movs	r1, #128	; 0x80
 8002932:	585b      	ldr	r3, [r3, r1]
 8002934:	3b01      	subs	r3, #1
 8002936:	0019      	movs	r1, r3
 8002938:	0010      	movs	r0, r2
 800293a:	f7fd fe83 	bl	8000644 <_Z5crc32PKhj>
 800293e:	0002      	movs	r2, r0
 8002940:	200b      	movs	r0, #11
 8002942:	183b      	adds	r3, r7, r0
 8002944:	701a      	strb	r2, [r3, #0]
	Radio.TXdataBuffer[payloadLength-1] = linkXOR  ^ crc;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	227b      	movs	r2, #123	; 0x7b
 800294a:	5c99      	ldrb	r1, [r3, r2]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	589b      	ldr	r3, [r3, r2]
 8002952:	3b01      	subs	r3, #1
 8002954:	183a      	adds	r2, r7, r0
 8002956:	7812      	ldrb	r2, [r2, #0]
 8002958:	404a      	eors	r2, r1
 800295a:	b2d1      	uxtb	r1, r2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	18d3      	adds	r3, r2, r3
 8002960:	1c0a      	adds	r2, r1, #0
 8002962:	721a      	strb	r2, [r3, #8]

	/* Transmit message */
	if(!busyTransmitting) Radio.TXnb();
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	227a      	movs	r2, #122	; 0x7a
 8002968:	5c9b      	ldrb	r3, [r3, r2]
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2201      	movs	r2, #1
 800296e:	4053      	eors	r3, r2
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <_ZN12Transmission10txTransmitEv+0x90>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	0018      	movs	r0, r3
 800297a:	f7fe fae7 	bl	8000f4c <_ZN12SX1280Driver4TXnbEv>
}
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	46bd      	mov	sp, r7
 8002982:	b004      	add	sp, #16
 8002984:	bd80      	pop	{r7, pc}

08002986 <_ZN12Transmission12getDirectionEv>:

transmission_direction_e Transmission::getDirection(){
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
	return Settings.transmissionDirection;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2244      	movs	r2, #68	; 0x44
 8002992:	5c9b      	ldrb	r3, [r3, r2]
}
 8002994:	0018      	movs	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	b002      	add	sp, #8
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
	if(pTransmission->getDirection() == TX){
 80029a4:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	0018      	movs	r0, r3
 80029aa:	f7ff ffec 	bl	8002986 <_ZN12Transmission12getDirectionEv>
 80029ae:	0003      	movs	r3, r0
 80029b0:	3b01      	subs	r3, #1
 80029b2:	425a      	negs	r2, r3
 80029b4:	4153      	adcs	r3, r2
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d005      	beq.n	80029c8 <HAL_TIM_PeriodElapsedCallback+0x2c>
		pTransmission->txTransmit();
 80029bc:	4b07      	ldr	r3, [pc, #28]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	0018      	movs	r0, r3
 80029c2:	f7ff ff94 	bl	80028ee <_ZN12Transmission10txTransmitEv>
	} else {
		pTransmission->rxTimeout();
	}

}
 80029c6:	e004      	b.n	80029d2 <HAL_TIM_PeriodElapsedCallback+0x36>
		pTransmission->rxTimeout();
 80029c8:	4b04      	ldr	r3, [pc, #16]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	0018      	movs	r0, r3
 80029ce:	f7ff ff4a 	bl	8002866 <_ZN12Transmission9rxTimeoutEv>
}
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	46bd      	mov	sp, r7
 80029d6:	b002      	add	sp, #8
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	200000f4 	.word	0x200000f4

080029e0 <_ZN6LQCALCILh30EE5resetEv>:
    {
        return N;
    }

    /* Initialize and zero the history */
    void reset()
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
    {
        // count is intentonally not zeroed here to start LQ counting up from 0
        // after a failsafe, instead of down from 100
        LQ = 0;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	701a      	strb	r2, [r3, #0]
        index = 0;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	705a      	strb	r2, [r3, #1]
        LQmask = (1 << 0);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	605a      	str	r2, [r3, #4]
        for (uint8_t i = 0; i < (sizeof(LQArray)/sizeof(LQArray[0])); i++)
 80029fa:	230f      	movs	r3, #15
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]
 8002a02:	200f      	movs	r0, #15
 8002a04:	183b      	adds	r3, r7, r0
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10c      	bne.n	8002a26 <_ZN6LQCALCILh30EE5resetEv+0x46>
            LQArray[i] = 0;
 8002a0c:	183b      	adds	r3, r7, r0
 8002a0e:	781a      	ldrb	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3202      	adds	r2, #2
 8002a14:	0092      	lsls	r2, r2, #2
 8002a16:	2100      	movs	r1, #0
 8002a18:	50d1      	str	r1, [r2, r3]
        for (uint8_t i = 0; i < (sizeof(LQArray)/sizeof(LQArray[0])); i++)
 8002a1a:	183b      	adds	r3, r7, r0
 8002a1c:	781a      	ldrb	r2, [r3, #0]
 8002a1e:	183b      	adds	r3, r7, r0
 8002a20:	3201      	adds	r2, #1
 8002a22:	701a      	strb	r2, [r3, #0]
 8002a24:	e7ed      	b.n	8002a02 <_ZN6LQCALCILh30EE5resetEv+0x22>
    }
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b004      	add	sp, #16
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <_ZN6LQCALCILh30EE3incEv>:
    void inc()
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
        LQmask = LQmask << 1;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	005a      	lsls	r2, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	605a      	str	r2, [r3, #4]
        if (LQmask == 0)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d108      	bne.n	8002a5a <_ZN6LQCALCILh30EE3incEv+0x2c>
            LQmask = (1 << 0);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	605a      	str	r2, [r3, #4]
            index += 1;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	785b      	ldrb	r3, [r3, #1]
 8002a52:	3301      	adds	r3, #1
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	705a      	strb	r2, [r3, #1]
        if ((index == (N / 32)) && (LQmask & (1 << (N % 32))))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	785b      	ldrb	r3, [r3, #1]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10b      	bne.n	8002a7a <_ZN6LQCALCILh30EE3incEv+0x4c>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	2380      	movs	r3, #128	; 0x80
 8002a68:	05db      	lsls	r3, r3, #23
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d005      	beq.n	8002a7a <_ZN6LQCALCILh30EE3incEv+0x4c>
            index = 0;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	705a      	strb	r2, [r3, #1]
            LQmask = (1 << 0);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	605a      	str	r2, [r3, #4]
        if ((LQArray[index] & LQmask) != 0)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	785b      	ldrb	r3, [r3, #1]
 8002a7e:	001a      	movs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3202      	adds	r2, #2
 8002a84:	0092      	lsls	r2, r2, #2
 8002a86:	58d2      	ldr	r2, [r2, r3]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	d018      	beq.n	8002ac2 <_ZN6LQCALCILh30EE3incEv+0x94>
            LQArray[index] &= ~LQmask;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	785b      	ldrb	r3, [r3, #1]
 8002a94:	001a      	movs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3202      	adds	r2, #2
 8002a9a:	0092      	lsls	r2, r2, #2
 8002a9c:	58d2      	ldr	r2, [r2, r3]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	7849      	ldrb	r1, [r1, #1]
 8002aa8:	0008      	movs	r0, r1
 8002aaa:	4013      	ands	r3, r2
 8002aac:	0019      	movs	r1, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	1c82      	adds	r2, r0, #2
 8002ab2:	0092      	lsls	r2, r2, #2
 8002ab4:	50d1      	str	r1, [r2, r3]
            LQ -= 1;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	701a      	strb	r2, [r3, #0]
        if (count < N)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	789b      	ldrb	r3, [r3, #2]
 8002ac6:	2b1d      	cmp	r3, #29
 8002ac8:	d805      	bhi.n	8002ad6 <_ZN6LQCALCILh30EE3incEv+0xa8>
          ++count;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	789b      	ldrb	r3, [r3, #2]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	709a      	strb	r2, [r3, #2]
    }
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	b002      	add	sp, #8
 8002adc:	bd80      	pop	{r7, pc}

08002ade <_ZN6LQCALCILh30EE3addEv>:
    void add()
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
        if (currentIsSet())
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f000 f81f 	bl	8002b2c <_ZNK6LQCALCILh30EE12currentIsSetEv>
 8002aee:	1e03      	subs	r3, r0, #0
 8002af0:	d118      	bne.n	8002b24 <_ZN6LQCALCILh30EE3addEv+0x46>
        LQArray[index] |= LQmask;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	785b      	ldrb	r3, [r3, #1]
 8002af6:	001a      	movs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3202      	adds	r2, #2
 8002afc:	0092      	lsls	r2, r2, #2
 8002afe:	58d2      	ldr	r2, [r2, r3]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	7849      	ldrb	r1, [r1, #1]
 8002b08:	0008      	movs	r0, r1
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	0011      	movs	r1, r2
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	1c82      	adds	r2, r0, #2
 8002b12:	0092      	lsls	r2, r2, #2
 8002b14:	50d1      	str	r1, [r2, r3]
        LQ += 1;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	701a      	strb	r2, [r3, #0]
 8002b22:	e000      	b.n	8002b26 <_ZN6LQCALCILh30EE3addEv+0x48>
            return;
 8002b24:	46c0      	nop			; (mov r8, r8)
    }
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b002      	add	sp, #8
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <_ZNK6LQCALCILh30EE12currentIsSetEv>:

    /*  Return true if the current period was add()ed */
    bool currentIsSet() const
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
    {
        return LQArray[index] & LQmask;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	785b      	ldrb	r3, [r3, #1]
 8002b38:	001a      	movs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3202      	adds	r2, #2
 8002b3e:	0092      	lsls	r2, r2, #2
 8002b40:	58d2      	ldr	r2, [r2, r3]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	4013      	ands	r3, r2
 8002b48:	1e5a      	subs	r2, r3, #1
 8002b4a:	4193      	sbcs	r3, r2
 8002b4c:	b2db      	uxtb	r3, r3
    }
 8002b4e:	0018      	movs	r0, r3
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b002      	add	sp, #8
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <_ZNK15TinyGPSLocation7isValidEv>:
   bool isValid() const    { return valid; }
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	0018      	movs	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	b002      	add	sp, #8
 8002b68:	bd80      	pop	{r7, pc}
	...

08002b6c <_Z8gpsSetupv>:
TinyGPSPlus gps;
uint8_t c;

static uint32_t last_package = 0;

void gpsSetup(){
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0

	uint8_t command[20];

	/* Request UART speed of 115200 */
	sprintf((char*)command, "$PCAS01,5*19\r\n");
 8002b72:	4a23      	ldr	r2, [pc, #140]	; (8002c00 <_Z8gpsSetupv+0x94>)
 8002b74:	1d3b      	adds	r3, r7, #4
 8002b76:	0011      	movs	r1, r2
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f006 fa23 	bl	8008fc4 <siprintf>
	HAL_UART_Transmit(&huart1, command, 14, 100);
 8002b7e:	1d39      	adds	r1, r7, #4
 8002b80:	4820      	ldr	r0, [pc, #128]	; (8002c04 <_Z8gpsSetupv+0x98>)
 8002b82:	2364      	movs	r3, #100	; 0x64
 8002b84:	220e      	movs	r2, #14
 8002b86:	f004 f9d1 	bl	8006f2c <HAL_UART_Transmit>

	HAL_Delay(200);
 8002b8a:	20c8      	movs	r0, #200	; 0xc8
 8002b8c:	f000 ff24 	bl	80039d8 <HAL_Delay>

	/* Change bus speed to 115200 */
	USART1->CR1 &= ~(USART_CR1_UE);
 8002b90:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <_Z8gpsSetupv+0x9c>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <_Z8gpsSetupv+0x9c>)
 8002b96:	2101      	movs	r1, #1
 8002b98:	438a      	bics	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]
	USART1->BRR = 417;	// Set baud to 115200
 8002b9c:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <_Z8gpsSetupv+0x9c>)
 8002b9e:	22a2      	movs	r2, #162	; 0xa2
 8002ba0:	32ff      	adds	r2, #255	; 0xff
 8002ba2:	60da      	str	r2, [r3, #12]
	USART1->CR1 |= USART_CR1_UE;
 8002ba4:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <_Z8gpsSetupv+0x9c>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <_Z8gpsSetupv+0x9c>)
 8002baa:	2101      	movs	r1, #1
 8002bac:	430a      	orrs	r2, r1
 8002bae:	601a      	str	r2, [r3, #0]

	HAL_Delay(200);
 8002bb0:	20c8      	movs	r0, #200	; 0xc8
 8002bb2:	f000 ff11 	bl	80039d8 <HAL_Delay>

	/* Request 10Hz update rate */
	sprintf((char*)command,"$PCAS02,100*1E\r\n");
 8002bb6:	4a15      	ldr	r2, [pc, #84]	; (8002c0c <_Z8gpsSetupv+0xa0>)
 8002bb8:	1d3b      	adds	r3, r7, #4
 8002bba:	0011      	movs	r1, r2
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f006 fa01 	bl	8008fc4 <siprintf>
	HAL_UART_Transmit(&huart1, command, 16, 100);
 8002bc2:	1d39      	adds	r1, r7, #4
 8002bc4:	480f      	ldr	r0, [pc, #60]	; (8002c04 <_Z8gpsSetupv+0x98>)
 8002bc6:	2364      	movs	r3, #100	; 0x64
 8002bc8:	2210      	movs	r2, #16
 8002bca:	f004 f9af 	bl	8006f2c <HAL_UART_Transmit>

	HAL_Delay(10);
 8002bce:	200a      	movs	r0, #10
 8002bd0:	f000 ff02 	bl	80039d8 <HAL_Delay>

	/* Request airbourne <4g mode*/
	sprintf((char*)command, "$PCAS11,7*1A\r\n");
 8002bd4:	4a0e      	ldr	r2, [pc, #56]	; (8002c10 <_Z8gpsSetupv+0xa4>)
 8002bd6:	1d3b      	adds	r3, r7, #4
 8002bd8:	0011      	movs	r1, r2
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f006 f9f2 	bl	8008fc4 <siprintf>
	HAL_UART_Transmit(&huart1, command, 14, 100);
 8002be0:	1d39      	adds	r1, r7, #4
 8002be2:	4808      	ldr	r0, [pc, #32]	; (8002c04 <_Z8gpsSetupv+0x98>)
 8002be4:	2364      	movs	r3, #100	; 0x64
 8002be6:	220e      	movs	r2, #14
 8002be8:	f004 f9a0 	bl	8006f2c <HAL_UART_Transmit>

	/* Start receiving data from the module */
	HAL_UART_Receive_IT(&huart1, (uint8_t*)& c, 1);
 8002bec:	4909      	ldr	r1, [pc, #36]	; (8002c14 <_Z8gpsSetupv+0xa8>)
 8002bee:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <_Z8gpsSetupv+0x98>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f004 fa46 	bl	8007084 <HAL_UART_Receive_IT>
}
 8002bf8:	46c0      	nop			; (mov r8, r8)
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b006      	add	sp, #24
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	08009a6c 	.word	0x08009a6c
 8002c04:	200002ec 	.word	0x200002ec
 8002c08:	40013800 	.word	0x40013800
 8002c0c:	08009a7c 	.word	0x08009a7c
 8002c10:	08009a90 	.word	0x08009a90
 8002c14:	200001d0 	.word	0x200001d0

08002c18 <_Z6gpsRunv>:




void gpsRun(){
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
	if(gps.location.isValid()){
 8002c1c:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <_Z6gpsRunv+0x4c>)
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f7ff ff99 	bl	8002b56 <_ZNK15TinyGPSLocation7isValidEv>
 8002c24:	1e03      	subs	r3, r0, #0
 8002c26:	d007      	beq.n	8002c38 <_Z6gpsRunv+0x20>
		 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002c28:	2380      	movs	r3, #128	; 0x80
 8002c2a:	0219      	lsls	r1, r3, #8
 8002c2c:	23a0      	movs	r3, #160	; 0xa0
 8002c2e:	05db      	lsls	r3, r3, #23
 8002c30:	2200      	movs	r2, #0
 8002c32:	0018      	movs	r0, r3
 8002c34:	f001 fed3 	bl	80049de <HAL_GPIO_WritePin>
	}

	if(HAL_GetTick() > (last_package+100)){
 8002c38:	f000 fec4 	bl	80039c4 <HAL_GetTick>
 8002c3c:	0002      	movs	r2, r0
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <_Z6gpsRunv+0x50>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	3364      	adds	r3, #100	; 0x64
 8002c44:	4293      	cmp	r3, r2
 8002c46:	419b      	sbcs	r3, r3
 8002c48:	425b      	negs	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d005      	beq.n	8002c5c <_Z6gpsRunv+0x44>
		HAL_UART_Receive_IT(&huart1, (uint8_t*)& c, 1);
 8002c50:	4906      	ldr	r1, [pc, #24]	; (8002c6c <_Z6gpsRunv+0x54>)
 8002c52:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <_Z6gpsRunv+0x58>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	0018      	movs	r0, r3
 8002c58:	f004 fa14 	bl	8007084 <HAL_UART_Receive_IT>
	}
}
 8002c5c:	46c0      	nop			; (mov r8, r8)
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	200000f8 	.word	0x200000f8
 8002c68:	200001d4 	.word	0x200001d4
 8002c6c:	200001d0 	.word	0x200001d0
 8002c70:	200002ec 	.word	0x200002ec

08002c74 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)& c, 1);
 8002c7c:	490a      	ldr	r1, [pc, #40]	; (8002ca8 <HAL_UART_RxCpltCallback+0x34>)
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <HAL_UART_RxCpltCallback+0x38>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	0018      	movs	r0, r3
 8002c84:	f004 f9fe 	bl	8007084 <HAL_UART_Receive_IT>
	last_package = HAL_GetTick();
 8002c88:	f000 fe9c 	bl	80039c4 <HAL_GetTick>
 8002c8c:	0002      	movs	r2, r0
 8002c8e:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <HAL_UART_RxCpltCallback+0x3c>)
 8002c90:	601a      	str	r2, [r3, #0]
	gps.encode(c);
 8002c92:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <HAL_UART_RxCpltCallback+0x34>)
 8002c94:	781a      	ldrb	r2, [r3, #0]
 8002c96:	4b07      	ldr	r3, [pc, #28]	; (8002cb4 <HAL_UART_RxCpltCallback+0x40>)
 8002c98:	0011      	movs	r1, r2
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f7fe fec0 	bl	8001a20 <_ZN11TinyGPSPlus6encodeEc>
}
 8002ca0:	46c0      	nop			; (mov r8, r8)
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b002      	add	sp, #8
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	200001d0 	.word	0x200001d0
 8002cac:	200002ec 	.word	0x200002ec
 8002cb0:	200001d4 	.word	0x200001d4
 8002cb4:	200000f8 	.word	0x200000f8

08002cb8 <_Z41__static_initialization_and_destruction_0ii>:
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d107      	bne.n	8002cd8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	4a05      	ldr	r2, [pc, #20]	; (8002ce0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d103      	bne.n	8002cd8 <_Z41__static_initialization_and_destruction_0ii+0x20>
TinyGPSPlus gps;
 8002cd0:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f7fe fe3f 	bl	8001956 <_ZN11TinyGPSPlusC1Ev>
}
 8002cd8:	46c0      	nop			; (mov r8, r8)
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b002      	add	sp, #8
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	0000ffff 	.word	0x0000ffff
 8002ce4:	200000f8 	.word	0x200000f8

08002ce8 <_GLOBAL__sub_I_gps>:
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4b03      	ldr	r3, [pc, #12]	; (8002cfc <_GLOBAL__sub_I_gps+0x14>)
 8002cee:	0019      	movs	r1, r3
 8002cf0:	2001      	movs	r0, #1
 8002cf2:	f7ff ffe1 	bl	8002cb8 <_Z41__static_initialization_and_destruction_0ii>
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	0000ffff 	.word	0x0000ffff

08002d00 <_ZN20TransmissionSettingsC1Ev>:
#pragma once

#include <cstdint>
#include "common.h"

class TransmissionSettings {
 8002d00:	b590      	push	{r4, r7, lr}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	701a      	strb	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	705a      	strb	r2, [r3, #1]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2222      	movs	r2, #34	; 0x22
 8002d18:	709a      	strb	r2, [r3, #2]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2214      	movs	r2, #20
 8002d1e:	70da      	strb	r2, [r3, #3]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	731a      	strb	r2, [r3, #12]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	611a      	str	r2, [r3, #16]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a05      	ldr	r2, [pc, #20]	; (8002d44 <_ZN20TransmissionSettingsC1Ev+0x44>)
 8002d30:	3314      	adds	r3, #20
 8002d32:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d34:	c313      	stmia	r3!, {r0, r1, r4}
 8002d36:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d38:	c313      	stmia	r3!, {r0, r1, r4}
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b003      	add	sp, #12
 8002d42:	bd90      	pop	{r4, r7, pc}
 8002d44:	08009aa0 	.word	0x08009aa0

08002d48 <_ZN12TransmissionC1Ev>:
class Transmission {
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	0018      	movs	r0, r3
 8002d54:	f7fd fcac 	bl	80006b0 <_ZN12SX1280DriverC1Ev>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3338      	adds	r3, #56	; 0x38
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f000 fb46 	bl	80033ee <_ZN6LQCALCILh30EEC1Ev>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3344      	adds	r3, #68	; 0x44
 8002d66:	0018      	movs	r0, r3
 8002d68:	f7ff ffca 	bl	8002d00 <_ZN20TransmissionSettingsC1Ev>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	675a      	str	r2, [r3, #116]	; 0x74
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2278      	movs	r2, #120	; 0x78
 8002d76:	2100      	movs	r1, #0
 8002d78:	5499      	strb	r1, [r3, r2]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2280      	movs	r2, #128	; 0x80
 8002d7e:	2100      	movs	r1, #0
 8002d80:	5099      	str	r1, [r3, r2]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	0018      	movs	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b002      	add	sp, #8
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b0af      	sub	sp, #188	; 0xbc
 8002d90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d92:	f000 fd9b 	bl	80038cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d96:	f000 f83b 	bl	8002e10 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d9a:	f000 fa6f 	bl	800327c <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8002d9e:	f000 f89d 	bl	8002edc <_ZL12MX_ADC1_Initv>
  MX_SPI1_Init();
 8002da2:	f000 f90d 	bl	8002fc0 <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 8002da6:	f000 f9ad 	bl	8003104 <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 8002daa:	f000 fa09 	bl	80031c0 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 8002dae:	f000 f949 	bl	8003044 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
  HAL_Delay(4000);
 8002db2:	23fa      	movs	r3, #250	; 0xfa
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	0018      	movs	r0, r3
 8002db8:	f000 fe0e 	bl	80039d8 <HAL_Delay>

  gpsSetup();
 8002dbc:	f7ff fed6 	bl	8002b6c <_Z8gpsSetupv>
  Transmission Link;
 8002dc0:	240c      	movs	r4, #12
 8002dc2:	193b      	adds	r3, r7, r4
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f7ff ffbf 	bl	8002d48 <_ZN12TransmissionC1Ev>

  Link.begin(&htim2);
 8002dca:	4a0f      	ldr	r2, [pc, #60]	; (8002e08 <main+0x7c>)
 8002dcc:	193b      	adds	r3, r7, r4
 8002dce:	0011      	movs	r1, r2
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f7ff fb3d 	bl	8002450 <_ZN12Transmission5beginEP17TIM_HandleTypeDef>
  uint8_t buffer[] = "test123";
 8002dd6:	1d3b      	adds	r3, r7, #4
 8002dd8:	4a0c      	ldr	r2, [pc, #48]	; (8002e0c <main+0x80>)
 8002dda:	ca03      	ldmia	r2!, {r0, r1}
 8002ddc:	c303      	stmia	r3!, {r0, r1}
  Link.setLinkPhrase(buffer, 7);
 8002dde:	1d39      	adds	r1, r7, #4
 8002de0:	193b      	adds	r3, r7, r4
 8002de2:	2207      	movs	r2, #7
 8002de4:	0018      	movs	r0, r3
 8002de6:	f7ff fb71 	bl	80024cc <_ZN12Transmission13setLinkPhraseEPKhm>
  Link.setDirection(TX);
 8002dea:	193b      	adds	r3, r7, r4
 8002dec:	2101      	movs	r1, #1
 8002dee:	0018      	movs	r0, r3
 8002df0:	f7ff fb8d 	bl	800250e <_ZN12Transmission12setDirectionE24transmission_direction_e>
  Link.enableTransmission();
 8002df4:	193b      	adds	r3, r7, r4
 8002df6:	0018      	movs	r0, r3
 8002df8:	f7ff fbaa 	bl	8002550 <_ZN12Transmission18enableTransmissionEv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  gpsRun();
 8002dfc:	f7ff ff0c 	bl	8002c18 <_Z6gpsRunv>
	  HAL_Delay(100);
 8002e00:	2064      	movs	r0, #100	; 0x64
 8002e02:	f000 fde9 	bl	80039d8 <HAL_Delay>
	  gpsRun();
 8002e06:	e7f9      	b.n	8002dfc <main+0x70>
 8002e08:	200002a0 	.word	0x200002a0
 8002e0c:	08009ab8 	.word	0x08009ab8

08002e10 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e10:	b590      	push	{r4, r7, lr}
 8002e12:	b093      	sub	sp, #76	; 0x4c
 8002e14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e16:	2410      	movs	r4, #16
 8002e18:	193b      	adds	r3, r7, r4
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	2338      	movs	r3, #56	; 0x38
 8002e1e:	001a      	movs	r2, r3
 8002e20:	2100      	movs	r1, #0
 8002e22:	f006 f8c6 	bl	8008fb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e26:	003b      	movs	r3, r7
 8002e28:	0018      	movs	r0, r3
 8002e2a:	2310      	movs	r3, #16
 8002e2c:	001a      	movs	r2, r3
 8002e2e:	2100      	movs	r1, #0
 8002e30:	f006 f8bf 	bl	8008fb2 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f001 fe3d 	bl	8004ab8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e3e:	193b      	adds	r3, r7, r4
 8002e40:	2202      	movs	r2, #2
 8002e42:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e44:	193b      	adds	r3, r7, r4
 8002e46:	2280      	movs	r2, #128	; 0x80
 8002e48:	0052      	lsls	r2, r2, #1
 8002e4a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002e4c:	0021      	movs	r1, r4
 8002e4e:	187b      	adds	r3, r7, r1
 8002e50:	2200      	movs	r2, #0
 8002e52:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e54:	187b      	adds	r3, r7, r1
 8002e56:	2240      	movs	r2, #64	; 0x40
 8002e58:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e5a:	187b      	adds	r3, r7, r1
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e60:	187b      	adds	r3, r7, r1
 8002e62:	2202      	movs	r2, #2
 8002e64:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002e66:	187b      	adds	r3, r7, r1
 8002e68:	2200      	movs	r2, #0
 8002e6a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 9;
 8002e6c:	187b      	adds	r3, r7, r1
 8002e6e:	2209      	movs	r2, #9
 8002e70:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e72:	187b      	adds	r3, r7, r1
 8002e74:	2280      	movs	r2, #128	; 0x80
 8002e76:	0292      	lsls	r2, r2, #10
 8002e78:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002e7a:	187b      	adds	r3, r7, r1
 8002e7c:	2280      	movs	r2, #128	; 0x80
 8002e7e:	0492      	lsls	r2, r2, #18
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8002e82:	187b      	adds	r3, r7, r1
 8002e84:	2280      	movs	r2, #128	; 0x80
 8002e86:	05d2      	lsls	r2, r2, #23
 8002e88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e8a:	187b      	adds	r3, r7, r1
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f001 fe5f 	bl	8004b50 <HAL_RCC_OscConfig>
 8002e92:	0003      	movs	r3, r0
 8002e94:	1e5a      	subs	r2, r3, #1
 8002e96:	4193      	sbcs	r3, r2
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 8002e9e:	f000 faa1 	bl	80033e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ea2:	003b      	movs	r3, r7
 8002ea4:	2207      	movs	r2, #7
 8002ea6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ea8:	003b      	movs	r3, r7
 8002eaa:	2202      	movs	r2, #2
 8002eac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002eae:	003b      	movs	r3, r7
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002eb4:	003b      	movs	r3, r7
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002eba:	003b      	movs	r3, r7
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f002 f966 	bl	8005190 <HAL_RCC_ClockConfig>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	1e5a      	subs	r2, r3, #1
 8002ec8:	4193      	sbcs	r3, r2
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8002ed0:	f000 fa88 	bl	80033e4 <Error_Handler>
  }
}
 8002ed4:	46c0      	nop			; (mov r8, r8)
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	b013      	add	sp, #76	; 0x4c
 8002eda:	bd90      	pop	{r4, r7, pc}

08002edc <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ee2:	1d3b      	adds	r3, r7, #4
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	230c      	movs	r3, #12
 8002ee8:	001a      	movs	r2, r3
 8002eea:	2100      	movs	r1, #0
 8002eec:	f006 f861 	bl	8008fb2 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002ef0:	4b31      	ldr	r3, [pc, #196]	; (8002fb8 <_ZL12MX_ADC1_Initv+0xdc>)
 8002ef2:	4a32      	ldr	r2, [pc, #200]	; (8002fbc <_ZL12MX_ADC1_Initv+0xe0>)
 8002ef4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002ef6:	4b30      	ldr	r3, [pc, #192]	; (8002fb8 <_ZL12MX_ADC1_Initv+0xdc>)
 8002ef8:	2280      	movs	r2, #128	; 0x80
 8002efa:	05d2      	lsls	r2, r2, #23
 8002efc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002efe:	4b2e      	ldr	r3, [pc, #184]	; (8002fb8 <_ZL12MX_ADC1_Initv+0xdc>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f04:	4b2c      	ldr	r3, [pc, #176]	; (8002fb8 <_ZL12MX_ADC1_Initv+0xdc>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002f0a:	4b2b      	ldr	r3, [pc, #172]	; (8002fb8 <_ZL12MX_ADC1_Initv+0xdc>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f10:	4b29      	ldr	r3, [pc, #164]	; (8002fb8 <_ZL12MX_ADC1_Initv+0xdc>)
 8002f12:	2204      	movs	r2, #4
 8002f14:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002f16:	4b28      	ldr	r3, [pc, #160]	; (8002fb8 <_ZL12MX_ADC1_Initv+0xdc>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002f1c:	4b26      	ldr	r3, [pc, #152]	; (8002fb8 <_ZL12MX_ADC1_Initv+0xdc>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002f22:	4b25      	ldr	r3, [pc, #148]	; (8002fb8 <_ZL12MX_ADC1_Initv+0xdc>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002f28:	4b23      	ldr	r3, [pc, #140]	; (8002fb8 <_ZL12MX_ADC1_Initv+0xdc>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f2e:	4b22      	ldr	r3, [pc, #136]	; (8002fb8 <_ZL12MX_ADC1_Initv+0xdc>)
 8002f30:	2220      	movs	r2, #32
 8002f32:	2100      	movs	r1, #0
 8002f34:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f36:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <_ZL12MX_ADC1_Initv+0xdc>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f3c:	4b1e      	ldr	r3, [pc, #120]	; (8002fb8 <_ZL12MX_ADC1_Initv+0xdc>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002f42:	4b1d      	ldr	r3, [pc, #116]	; (8002fb8 <_ZL12MX_ADC1_Initv+0xdc>)
 8002f44:	222c      	movs	r2, #44	; 0x2c
 8002f46:	2100      	movs	r1, #0
 8002f48:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002f4a:	4b1b      	ldr	r3, [pc, #108]	; (8002fb8 <_ZL12MX_ADC1_Initv+0xdc>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002f50:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <_ZL12MX_ADC1_Initv+0xdc>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002f56:	4b18      	ldr	r3, [pc, #96]	; (8002fb8 <_ZL12MX_ADC1_Initv+0xdc>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002f5c:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <_ZL12MX_ADC1_Initv+0xdc>)
 8002f5e:	223c      	movs	r2, #60	; 0x3c
 8002f60:	2100      	movs	r1, #0
 8002f62:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002f64:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <_ZL12MX_ADC1_Initv+0xdc>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f6a:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <_ZL12MX_ADC1_Initv+0xdc>)
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f000 fe55 	bl	8003c1c <HAL_ADC_Init>
 8002f72:	0003      	movs	r3, r0
 8002f74:	1e5a      	subs	r2, r3, #1
 8002f76:	4193      	sbcs	r3, r2
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <_ZL12MX_ADC1_Initv+0xa6>
  {
    Error_Handler();
 8002f7e:	f000 fa31 	bl	80033e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002f82:	1d3b      	adds	r3, r7, #4
 8002f84:	2201      	movs	r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002f88:	1d3b      	adds	r3, r7, #4
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002f8e:	1d3b      	adds	r3, r7, #4
 8002f90:	2200      	movs	r2, #0
 8002f92:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f94:	1d3a      	adds	r2, r7, #4
 8002f96:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <_ZL12MX_ADC1_Initv+0xdc>)
 8002f98:	0011      	movs	r1, r2
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f001 f81c 	bl	8003fd8 <HAL_ADC_ConfigChannel>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	1e5a      	subs	r2, r3, #1
 8002fa4:	4193      	sbcs	r3, r2
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <_ZL12MX_ADC1_Initv+0xd4>
  {
    Error_Handler();
 8002fac:	f000 fa1a 	bl	80033e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002fb0:	46c0      	nop			; (mov r8, r8)
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	b004      	add	sp, #16
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	200001d8 	.word	0x200001d8
 8002fbc:	40012400 	.word	0x40012400

08002fc0 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002fc4:	4b1d      	ldr	r3, [pc, #116]	; (800303c <_ZL12MX_SPI1_Initv+0x7c>)
 8002fc6:	4a1e      	ldr	r2, [pc, #120]	; (8003040 <_ZL12MX_SPI1_Initv+0x80>)
 8002fc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fca:	4b1c      	ldr	r3, [pc, #112]	; (800303c <_ZL12MX_SPI1_Initv+0x7c>)
 8002fcc:	2282      	movs	r2, #130	; 0x82
 8002fce:	0052      	lsls	r2, r2, #1
 8002fd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002fd2:	4b1a      	ldr	r3, [pc, #104]	; (800303c <_ZL12MX_SPI1_Initv+0x7c>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fd8:	4b18      	ldr	r3, [pc, #96]	; (800303c <_ZL12MX_SPI1_Initv+0x7c>)
 8002fda:	22e0      	movs	r2, #224	; 0xe0
 8002fdc:	00d2      	lsls	r2, r2, #3
 8002fde:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fe0:	4b16      	ldr	r3, [pc, #88]	; (800303c <_ZL12MX_SPI1_Initv+0x7c>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fe6:	4b15      	ldr	r3, [pc, #84]	; (800303c <_ZL12MX_SPI1_Initv+0x7c>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002fec:	4b13      	ldr	r3, [pc, #76]	; (800303c <_ZL12MX_SPI1_Initv+0x7c>)
 8002fee:	2280      	movs	r2, #128	; 0x80
 8002ff0:	0092      	lsls	r2, r2, #2
 8002ff2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002ff4:	4b11      	ldr	r3, [pc, #68]	; (800303c <_ZL12MX_SPI1_Initv+0x7c>)
 8002ff6:	2210      	movs	r2, #16
 8002ff8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ffa:	4b10      	ldr	r3, [pc, #64]	; (800303c <_ZL12MX_SPI1_Initv+0x7c>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003000:	4b0e      	ldr	r3, [pc, #56]	; (800303c <_ZL12MX_SPI1_Initv+0x7c>)
 8003002:	2200      	movs	r2, #0
 8003004:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003006:	4b0d      	ldr	r3, [pc, #52]	; (800303c <_ZL12MX_SPI1_Initv+0x7c>)
 8003008:	2200      	movs	r2, #0
 800300a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800300c:	4b0b      	ldr	r3, [pc, #44]	; (800303c <_ZL12MX_SPI1_Initv+0x7c>)
 800300e:	2207      	movs	r2, #7
 8003010:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003012:	4b0a      	ldr	r3, [pc, #40]	; (800303c <_ZL12MX_SPI1_Initv+0x7c>)
 8003014:	2200      	movs	r2, #0
 8003016:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003018:	4b08      	ldr	r3, [pc, #32]	; (800303c <_ZL12MX_SPI1_Initv+0x7c>)
 800301a:	2200      	movs	r2, #0
 800301c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800301e:	4b07      	ldr	r3, [pc, #28]	; (800303c <_ZL12MX_SPI1_Initv+0x7c>)
 8003020:	0018      	movs	r0, r3
 8003022:	f002 fc17 	bl	8005854 <HAL_SPI_Init>
 8003026:	0003      	movs	r3, r0
 8003028:	1e5a      	subs	r2, r3, #1
 800302a:	4193      	sbcs	r3, r2
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <_ZL12MX_SPI1_Initv+0x76>
  {
    Error_Handler();
 8003032:	f000 f9d7 	bl	80033e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	2000023c 	.word	0x2000023c
 8003040:	40013000 	.word	0x40013000

08003044 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800304a:	2310      	movs	r3, #16
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	0018      	movs	r0, r3
 8003050:	2310      	movs	r3, #16
 8003052:	001a      	movs	r2, r3
 8003054:	2100      	movs	r1, #0
 8003056:	f005 ffac 	bl	8008fb2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800305a:	1d3b      	adds	r3, r7, #4
 800305c:	0018      	movs	r0, r3
 800305e:	230c      	movs	r3, #12
 8003060:	001a      	movs	r2, r3
 8003062:	2100      	movs	r1, #0
 8003064:	f005 ffa5 	bl	8008fb2 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003068:	4b25      	ldr	r3, [pc, #148]	; (8003100 <_ZL12MX_TIM2_Initv+0xbc>)
 800306a:	2280      	movs	r2, #128	; 0x80
 800306c:	05d2      	lsls	r2, r2, #23
 800306e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4800;
 8003070:	4b23      	ldr	r3, [pc, #140]	; (8003100 <_ZL12MX_TIM2_Initv+0xbc>)
 8003072:	2296      	movs	r2, #150	; 0x96
 8003074:	0152      	lsls	r2, r2, #5
 8003076:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003078:	4b21      	ldr	r3, [pc, #132]	; (8003100 <_ZL12MX_TIM2_Initv+0xbc>)
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800307e:	4b20      	ldr	r3, [pc, #128]	; (8003100 <_ZL12MX_TIM2_Initv+0xbc>)
 8003080:	22fa      	movs	r2, #250	; 0xfa
 8003082:	0092      	lsls	r2, r2, #2
 8003084:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003086:	4b1e      	ldr	r3, [pc, #120]	; (8003100 <_ZL12MX_TIM2_Initv+0xbc>)
 8003088:	2200      	movs	r2, #0
 800308a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800308c:	4b1c      	ldr	r3, [pc, #112]	; (8003100 <_ZL12MX_TIM2_Initv+0xbc>)
 800308e:	2280      	movs	r2, #128	; 0x80
 8003090:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003092:	4b1b      	ldr	r3, [pc, #108]	; (8003100 <_ZL12MX_TIM2_Initv+0xbc>)
 8003094:	0018      	movs	r0, r3
 8003096:	f003 fa51 	bl	800653c <HAL_TIM_Base_Init>
 800309a:	0003      	movs	r3, r0
 800309c:	1e5a      	subs	r2, r3, #1
 800309e:	4193      	sbcs	r3, r2
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <_ZL12MX_TIM2_Initv+0x66>
  {
    Error_Handler();
 80030a6:	f000 f99d 	bl	80033e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030aa:	2110      	movs	r1, #16
 80030ac:	187b      	adds	r3, r7, r1
 80030ae:	2280      	movs	r2, #128	; 0x80
 80030b0:	0152      	lsls	r2, r2, #5
 80030b2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80030b4:	187a      	adds	r2, r7, r1
 80030b6:	4b12      	ldr	r3, [pc, #72]	; (8003100 <_ZL12MX_TIM2_Initv+0xbc>)
 80030b8:	0011      	movs	r1, r2
 80030ba:	0018      	movs	r0, r3
 80030bc:	f003 fc52 	bl	8006964 <HAL_TIM_ConfigClockSource>
 80030c0:	0003      	movs	r3, r0
 80030c2:	1e5a      	subs	r2, r3, #1
 80030c4:	4193      	sbcs	r3, r2
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 80030cc:	f000 f98a 	bl	80033e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80030d0:	1d3b      	adds	r3, r7, #4
 80030d2:	2220      	movs	r2, #32
 80030d4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030d6:	1d3b      	adds	r3, r7, #4
 80030d8:	2200      	movs	r2, #0
 80030da:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030dc:	1d3a      	adds	r2, r7, #4
 80030de:	4b08      	ldr	r3, [pc, #32]	; (8003100 <_ZL12MX_TIM2_Initv+0xbc>)
 80030e0:	0011      	movs	r1, r2
 80030e2:	0018      	movs	r0, r3
 80030e4:	f003 fe46 	bl	8006d74 <HAL_TIMEx_MasterConfigSynchronization>
 80030e8:	0003      	movs	r3, r0
 80030ea:	1e5a      	subs	r2, r3, #1
 80030ec:	4193      	sbcs	r3, r2
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 80030f4:	f000 f976 	bl	80033e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80030f8:	46c0      	nop			; (mov r8, r8)
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b008      	add	sp, #32
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	200002a0 	.word	0x200002a0

08003104 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003108:	4b2b      	ldr	r3, [pc, #172]	; (80031b8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 800310a:	4a2c      	ldr	r2, [pc, #176]	; (80031bc <_ZL19MX_USART1_UART_Initv+0xb8>)
 800310c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800310e:	4b2a      	ldr	r3, [pc, #168]	; (80031b8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8003110:	2296      	movs	r2, #150	; 0x96
 8003112:	0192      	lsls	r2, r2, #6
 8003114:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003116:	4b28      	ldr	r3, [pc, #160]	; (80031b8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8003118:	2200      	movs	r2, #0
 800311a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800311c:	4b26      	ldr	r3, [pc, #152]	; (80031b8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 800311e:	2200      	movs	r2, #0
 8003120:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003122:	4b25      	ldr	r3, [pc, #148]	; (80031b8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8003124:	2200      	movs	r2, #0
 8003126:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003128:	4b23      	ldr	r3, [pc, #140]	; (80031b8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 800312a:	220c      	movs	r2, #12
 800312c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800312e:	4b22      	ldr	r3, [pc, #136]	; (80031b8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8003130:	2200      	movs	r2, #0
 8003132:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003134:	4b20      	ldr	r3, [pc, #128]	; (80031b8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8003136:	2200      	movs	r2, #0
 8003138:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800313a:	4b1f      	ldr	r3, [pc, #124]	; (80031b8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 800313c:	2200      	movs	r2, #0
 800313e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003140:	4b1d      	ldr	r3, [pc, #116]	; (80031b8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8003142:	2200      	movs	r2, #0
 8003144:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003146:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8003148:	2200      	movs	r2, #0
 800314a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800314c:	4b1a      	ldr	r3, [pc, #104]	; (80031b8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 800314e:	0018      	movs	r0, r3
 8003150:	f003 fe96 	bl	8006e80 <HAL_UART_Init>
 8003154:	0003      	movs	r3, r0
 8003156:	1e5a      	subs	r2, r3, #1
 8003158:	4193      	sbcs	r3, r2
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <_ZL19MX_USART1_UART_Initv+0x60>
  {
    Error_Handler();
 8003160:	f000 f940 	bl	80033e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003164:	4b14      	ldr	r3, [pc, #80]	; (80031b8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8003166:	2100      	movs	r1, #0
 8003168:	0018      	movs	r0, r3
 800316a:	f005 fe09 	bl	8008d80 <HAL_UARTEx_SetTxFifoThreshold>
 800316e:	0003      	movs	r3, r0
 8003170:	1e5a      	subs	r2, r3, #1
 8003172:	4193      	sbcs	r3, r2
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <_ZL19MX_USART1_UART_Initv+0x7a>
  {
    Error_Handler();
 800317a:	f000 f933 	bl	80033e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800317e:	4b0e      	ldr	r3, [pc, #56]	; (80031b8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8003180:	2100      	movs	r1, #0
 8003182:	0018      	movs	r0, r3
 8003184:	f005 fe3c 	bl	8008e00 <HAL_UARTEx_SetRxFifoThreshold>
 8003188:	0003      	movs	r3, r0
 800318a:	1e5a      	subs	r2, r3, #1
 800318c:	4193      	sbcs	r3, r2
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <_ZL19MX_USART1_UART_Initv+0x94>
  {
    Error_Handler();
 8003194:	f000 f926 	bl	80033e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003198:	4b07      	ldr	r3, [pc, #28]	; (80031b8 <_ZL19MX_USART1_UART_Initv+0xb4>)
 800319a:	0018      	movs	r0, r3
 800319c:	f005 fdb6 	bl	8008d0c <HAL_UARTEx_DisableFifoMode>
 80031a0:	0003      	movs	r3, r0
 80031a2:	1e5a      	subs	r2, r3, #1
 80031a4:	4193      	sbcs	r3, r2
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <_ZL19MX_USART1_UART_Initv+0xac>
  {
    Error_Handler();
 80031ac:	f000 f91a 	bl	80033e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031b0:	46c0      	nop			; (mov r8, r8)
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	200002ec 	.word	0x200002ec
 80031bc:	40013800 	.word	0x40013800

080031c0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031c4:	4b2b      	ldr	r3, [pc, #172]	; (8003274 <_ZL19MX_USART2_UART_Initv+0xb4>)
 80031c6:	4a2c      	ldr	r2, [pc, #176]	; (8003278 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80031c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80031ca:	4b2a      	ldr	r3, [pc, #168]	; (8003274 <_ZL19MX_USART2_UART_Initv+0xb4>)
 80031cc:	22e1      	movs	r2, #225	; 0xe1
 80031ce:	0252      	lsls	r2, r2, #9
 80031d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031d2:	4b28      	ldr	r3, [pc, #160]	; (8003274 <_ZL19MX_USART2_UART_Initv+0xb4>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031d8:	4b26      	ldr	r3, [pc, #152]	; (8003274 <_ZL19MX_USART2_UART_Initv+0xb4>)
 80031da:	2200      	movs	r2, #0
 80031dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031de:	4b25      	ldr	r3, [pc, #148]	; (8003274 <_ZL19MX_USART2_UART_Initv+0xb4>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031e4:	4b23      	ldr	r3, [pc, #140]	; (8003274 <_ZL19MX_USART2_UART_Initv+0xb4>)
 80031e6:	220c      	movs	r2, #12
 80031e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ea:	4b22      	ldr	r3, [pc, #136]	; (8003274 <_ZL19MX_USART2_UART_Initv+0xb4>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031f0:	4b20      	ldr	r3, [pc, #128]	; (8003274 <_ZL19MX_USART2_UART_Initv+0xb4>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031f6:	4b1f      	ldr	r3, [pc, #124]	; (8003274 <_ZL19MX_USART2_UART_Initv+0xb4>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031fc:	4b1d      	ldr	r3, [pc, #116]	; (8003274 <_ZL19MX_USART2_UART_Initv+0xb4>)
 80031fe:	2200      	movs	r2, #0
 8003200:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003202:	4b1c      	ldr	r3, [pc, #112]	; (8003274 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8003204:	2200      	movs	r2, #0
 8003206:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003208:	4b1a      	ldr	r3, [pc, #104]	; (8003274 <_ZL19MX_USART2_UART_Initv+0xb4>)
 800320a:	0018      	movs	r0, r3
 800320c:	f003 fe38 	bl	8006e80 <HAL_UART_Init>
 8003210:	0003      	movs	r3, r0
 8003212:	1e5a      	subs	r2, r3, #1
 8003214:	4193      	sbcs	r3, r2
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <_ZL19MX_USART2_UART_Initv+0x60>
  {
    Error_Handler();
 800321c:	f000 f8e2 	bl	80033e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003220:	4b14      	ldr	r3, [pc, #80]	; (8003274 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8003222:	2100      	movs	r1, #0
 8003224:	0018      	movs	r0, r3
 8003226:	f005 fdab 	bl	8008d80 <HAL_UARTEx_SetTxFifoThreshold>
 800322a:	0003      	movs	r3, r0
 800322c:	1e5a      	subs	r2, r3, #1
 800322e:	4193      	sbcs	r3, r2
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <_ZL19MX_USART2_UART_Initv+0x7a>
  {
    Error_Handler();
 8003236:	f000 f8d5 	bl	80033e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800323a:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <_ZL19MX_USART2_UART_Initv+0xb4>)
 800323c:	2100      	movs	r1, #0
 800323e:	0018      	movs	r0, r3
 8003240:	f005 fdde 	bl	8008e00 <HAL_UARTEx_SetRxFifoThreshold>
 8003244:	0003      	movs	r3, r0
 8003246:	1e5a      	subs	r2, r3, #1
 8003248:	4193      	sbcs	r3, r2
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <_ZL19MX_USART2_UART_Initv+0x94>
  {
    Error_Handler();
 8003250:	f000 f8c8 	bl	80033e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003254:	4b07      	ldr	r3, [pc, #28]	; (8003274 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8003256:	0018      	movs	r0, r3
 8003258:	f005 fd58 	bl	8008d0c <HAL_UARTEx_DisableFifoMode>
 800325c:	0003      	movs	r3, r0
 800325e:	1e5a      	subs	r2, r3, #1
 8003260:	4193      	sbcs	r3, r2
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <_ZL19MX_USART2_UART_Initv+0xac>
  {
    Error_Handler();
 8003268:	f000 f8bc 	bl	80033e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800326c:	46c0      	nop			; (mov r8, r8)
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	2000037c 	.word	0x2000037c
 8003278:	40004400 	.word	0x40004400

0800327c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800327c:	b590      	push	{r4, r7, lr}
 800327e:	b089      	sub	sp, #36	; 0x24
 8003280:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003282:	240c      	movs	r4, #12
 8003284:	193b      	adds	r3, r7, r4
 8003286:	0018      	movs	r0, r3
 8003288:	2314      	movs	r3, #20
 800328a:	001a      	movs	r2, r3
 800328c:	2100      	movs	r1, #0
 800328e:	f005 fe90 	bl	8008fb2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003292:	4b51      	ldr	r3, [pc, #324]	; (80033d8 <_ZL12MX_GPIO_Initv+0x15c>)
 8003294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003296:	4b50      	ldr	r3, [pc, #320]	; (80033d8 <_ZL12MX_GPIO_Initv+0x15c>)
 8003298:	2101      	movs	r1, #1
 800329a:	430a      	orrs	r2, r1
 800329c:	635a      	str	r2, [r3, #52]	; 0x34
 800329e:	4b4e      	ldr	r3, [pc, #312]	; (80033d8 <_ZL12MX_GPIO_Initv+0x15c>)
 80032a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a2:	2201      	movs	r2, #1
 80032a4:	4013      	ands	r3, r2
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032aa:	4b4b      	ldr	r3, [pc, #300]	; (80033d8 <_ZL12MX_GPIO_Initv+0x15c>)
 80032ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ae:	4b4a      	ldr	r3, [pc, #296]	; (80033d8 <_ZL12MX_GPIO_Initv+0x15c>)
 80032b0:	2102      	movs	r1, #2
 80032b2:	430a      	orrs	r2, r1
 80032b4:	635a      	str	r2, [r3, #52]	; 0x34
 80032b6:	4b48      	ldr	r3, [pc, #288]	; (80033d8 <_ZL12MX_GPIO_Initv+0x15c>)
 80032b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ba:	2202      	movs	r2, #2
 80032bc:	4013      	ands	r3, r2
 80032be:	607b      	str	r3, [r7, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032c2:	4b45      	ldr	r3, [pc, #276]	; (80033d8 <_ZL12MX_GPIO_Initv+0x15c>)
 80032c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c6:	4b44      	ldr	r3, [pc, #272]	; (80033d8 <_ZL12MX_GPIO_Initv+0x15c>)
 80032c8:	2104      	movs	r1, #4
 80032ca:	430a      	orrs	r2, r1
 80032cc:	635a      	str	r2, [r3, #52]	; 0x34
 80032ce:	4b42      	ldr	r3, [pc, #264]	; (80033d8 <_ZL12MX_GPIO_Initv+0x15c>)
 80032d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d2:	2204      	movs	r2, #4
 80032d4:	4013      	ands	r3, r2
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|INT2_Pin|INT1_Pin, GPIO_PIN_RESET);
 80032da:	2322      	movs	r3, #34	; 0x22
 80032dc:	33ff      	adds	r3, #255	; 0xff
 80032de:	483f      	ldr	r0, [pc, #252]	; (80033dc <_ZL12MX_GPIO_Initv+0x160>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	0019      	movs	r1, r3
 80032e4:	f001 fb7b 	bl	80049de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FE_EN_Pin|RX_EN_Pin|LED_Pin, GPIO_PIN_RESET);
 80032e8:	2389      	movs	r3, #137	; 0x89
 80032ea:	0219      	lsls	r1, r3, #8
 80032ec:	23a0      	movs	r3, #160	; 0xa0
 80032ee:	05db      	lsls	r3, r3, #23
 80032f0:	2200      	movs	r2, #0
 80032f2:	0018      	movs	r0, r3
 80032f4:	f001 fb73 	bl	80049de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 80032f8:	4b39      	ldr	r3, [pc, #228]	; (80033e0 <_ZL12MX_GPIO_Initv+0x164>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	2140      	movs	r1, #64	; 0x40
 80032fe:	0018      	movs	r0, r3
 8003300:	f001 fb6d 	bl	80049de <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIO2_Pin DIO1_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin|DIO1_Pin;
 8003304:	193b      	adds	r3, r7, r4
 8003306:	2230      	movs	r2, #48	; 0x30
 8003308:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800330a:	193b      	adds	r3, r7, r4
 800330c:	2288      	movs	r2, #136	; 0x88
 800330e:	0352      	lsls	r2, r2, #13
 8003310:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003312:	193b      	adds	r3, r7, r4
 8003314:	2200      	movs	r2, #0
 8003316:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003318:	193a      	adds	r2, r7, r4
 800331a:	23a0      	movs	r3, #160	; 0xa0
 800331c:	05db      	lsls	r3, r3, #23
 800331e:	0011      	movs	r1, r2
 8003320:	0018      	movs	r0, r3
 8003322:	f001 f9db 	bl	80046dc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin INT2_Pin INT1_Pin */
  GPIO_InitStruct.Pin = CS_Pin|INT2_Pin|INT1_Pin;
 8003326:	0021      	movs	r1, r4
 8003328:	187b      	adds	r3, r7, r1
 800332a:	2222      	movs	r2, #34	; 0x22
 800332c:	32ff      	adds	r2, #255	; 0xff
 800332e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003330:	000c      	movs	r4, r1
 8003332:	193b      	adds	r3, r7, r4
 8003334:	2201      	movs	r2, #1
 8003336:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003338:	193b      	adds	r3, r7, r4
 800333a:	2200      	movs	r2, #0
 800333c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333e:	193b      	adds	r3, r7, r4
 8003340:	2200      	movs	r2, #0
 8003342:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003344:	193b      	adds	r3, r7, r4
 8003346:	4a25      	ldr	r2, [pc, #148]	; (80033dc <_ZL12MX_GPIO_Initv+0x160>)
 8003348:	0019      	movs	r1, r3
 800334a:	0010      	movs	r0, r2
 800334c:	f001 f9c6 	bl	80046dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8003350:	193b      	adds	r3, r7, r4
 8003352:	2202      	movs	r2, #2
 8003354:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003356:	193b      	adds	r3, r7, r4
 8003358:	2200      	movs	r2, #0
 800335a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800335c:	193b      	adds	r3, r7, r4
 800335e:	2201      	movs	r2, #1
 8003360:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8003362:	193b      	adds	r3, r7, r4
 8003364:	4a1d      	ldr	r2, [pc, #116]	; (80033dc <_ZL12MX_GPIO_Initv+0x160>)
 8003366:	0019      	movs	r1, r3
 8003368:	0010      	movs	r0, r2
 800336a:	f001 f9b7 	bl	80046dc <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_EN_Pin RX_EN_Pin LED_Pin */
  GPIO_InitStruct.Pin = FE_EN_Pin|RX_EN_Pin|LED_Pin;
 800336e:	0021      	movs	r1, r4
 8003370:	187b      	adds	r3, r7, r1
 8003372:	2289      	movs	r2, #137	; 0x89
 8003374:	0212      	lsls	r2, r2, #8
 8003376:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003378:	000c      	movs	r4, r1
 800337a:	193b      	adds	r3, r7, r4
 800337c:	2201      	movs	r2, #1
 800337e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003380:	193b      	adds	r3, r7, r4
 8003382:	2200      	movs	r2, #0
 8003384:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003386:	193b      	adds	r3, r7, r4
 8003388:	2200      	movs	r2, #0
 800338a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800338c:	193a      	adds	r2, r7, r4
 800338e:	23a0      	movs	r3, #160	; 0xa0
 8003390:	05db      	lsls	r3, r3, #23
 8003392:	0011      	movs	r1, r2
 8003394:	0018      	movs	r0, r3
 8003396:	f001 f9a1 	bl	80046dc <HAL_GPIO_Init>

  /*Configure GPIO pin : TX_EN_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
 800339a:	0021      	movs	r1, r4
 800339c:	187b      	adds	r3, r7, r1
 800339e:	2240      	movs	r2, #64	; 0x40
 80033a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033a2:	187b      	adds	r3, r7, r1
 80033a4:	2201      	movs	r2, #1
 80033a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a8:	187b      	adds	r3, r7, r1
 80033aa:	2200      	movs	r2, #0
 80033ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ae:	187b      	adds	r3, r7, r1
 80033b0:	2200      	movs	r2, #0
 80033b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 80033b4:	187b      	adds	r3, r7, r1
 80033b6:	4a0a      	ldr	r2, [pc, #40]	; (80033e0 <_ZL12MX_GPIO_Initv+0x164>)
 80033b8:	0019      	movs	r1, r3
 80033ba:	0010      	movs	r0, r2
 80033bc:	f001 f98e 	bl	80046dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80033c0:	2200      	movs	r2, #0
 80033c2:	2100      	movs	r1, #0
 80033c4:	2007      	movs	r0, #7
 80033c6:	f001 f88b 	bl	80044e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80033ca:	2007      	movs	r0, #7
 80033cc:	f001 f89d 	bl	800450a <HAL_NVIC_EnableIRQ>

}
 80033d0:	46c0      	nop			; (mov r8, r8)
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b009      	add	sp, #36	; 0x24
 80033d6:	bd90      	pop	{r4, r7, pc}
 80033d8:	40021000 	.word	0x40021000
 80033dc:	50000400 	.word	0x50000400
 80033e0:	50000800 	.word	0x50000800

080033e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033e8:	b672      	cpsid	i
}
 80033ea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033ec:	e7fe      	b.n	80033ec <Error_Handler+0x8>

080033ee <_ZN6LQCALCILh30EEC1Ev>:
    LQCALC(void)
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
        reset();
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	0018      	movs	r0, r3
 80033fa:	f7ff faf1 	bl	80029e0 <_ZN6LQCALCILh30EE5resetEv>
        count = 1;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	709a      	strb	r2, [r3, #2]
    }
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	0018      	movs	r0, r3
 8003408:	46bd      	mov	sp, r7
 800340a:	b002      	add	sp, #8
 800340c:	bd80      	pop	{r7, pc}
	...

08003410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003416:	4b11      	ldr	r3, [pc, #68]	; (800345c <HAL_MspInit+0x4c>)
 8003418:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800341a:	4b10      	ldr	r3, [pc, #64]	; (800345c <HAL_MspInit+0x4c>)
 800341c:	2101      	movs	r1, #1
 800341e:	430a      	orrs	r2, r1
 8003420:	641a      	str	r2, [r3, #64]	; 0x40
 8003422:	4b0e      	ldr	r3, [pc, #56]	; (800345c <HAL_MspInit+0x4c>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	2201      	movs	r2, #1
 8003428:	4013      	ands	r3, r2
 800342a:	607b      	str	r3, [r7, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800342e:	4b0b      	ldr	r3, [pc, #44]	; (800345c <HAL_MspInit+0x4c>)
 8003430:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003432:	4b0a      	ldr	r3, [pc, #40]	; (800345c <HAL_MspInit+0x4c>)
 8003434:	2180      	movs	r1, #128	; 0x80
 8003436:	0549      	lsls	r1, r1, #21
 8003438:	430a      	orrs	r2, r1
 800343a:	63da      	str	r2, [r3, #60]	; 0x3c
 800343c:	4b07      	ldr	r3, [pc, #28]	; (800345c <HAL_MspInit+0x4c>)
 800343e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003440:	2380      	movs	r3, #128	; 0x80
 8003442:	055b      	lsls	r3, r3, #21
 8003444:	4013      	ands	r3, r2
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 800344a:	2380      	movs	r3, #128	; 0x80
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	0018      	movs	r0, r3
 8003450:	f000 fae6 	bl	8003a20 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003454:	46c0      	nop			; (mov r8, r8)
 8003456:	46bd      	mov	sp, r7
 8003458:	b002      	add	sp, #8
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40021000 	.word	0x40021000

08003460 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003460:	b590      	push	{r4, r7, lr}
 8003462:	b097      	sub	sp, #92	; 0x5c
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003468:	2344      	movs	r3, #68	; 0x44
 800346a:	18fb      	adds	r3, r7, r3
 800346c:	0018      	movs	r0, r3
 800346e:	2314      	movs	r3, #20
 8003470:	001a      	movs	r2, r3
 8003472:	2100      	movs	r1, #0
 8003474:	f005 fd9d 	bl	8008fb2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003478:	2410      	movs	r4, #16
 800347a:	193b      	adds	r3, r7, r4
 800347c:	0018      	movs	r0, r3
 800347e:	2334      	movs	r3, #52	; 0x34
 8003480:	001a      	movs	r2, r3
 8003482:	2100      	movs	r1, #0
 8003484:	f005 fd95 	bl	8008fb2 <memset>
  if(hadc->Instance==ADC1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a20      	ldr	r2, [pc, #128]	; (8003510 <HAL_ADC_MspInit+0xb0>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d139      	bne.n	8003506 <HAL_ADC_MspInit+0xa6>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003492:	193b      	adds	r3, r7, r4
 8003494:	2280      	movs	r2, #128	; 0x80
 8003496:	01d2      	lsls	r2, r2, #7
 8003498:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800349a:	193b      	adds	r3, r7, r4
 800349c:	2200      	movs	r2, #0
 800349e:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034a0:	193b      	adds	r3, r7, r4
 80034a2:	0018      	movs	r0, r3
 80034a4:	f002 f81e 	bl	80054e4 <HAL_RCCEx_PeriphCLKConfig>
 80034a8:	1e03      	subs	r3, r0, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80034ac:	f7ff ff9a 	bl	80033e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80034b0:	4b18      	ldr	r3, [pc, #96]	; (8003514 <HAL_ADC_MspInit+0xb4>)
 80034b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034b4:	4b17      	ldr	r3, [pc, #92]	; (8003514 <HAL_ADC_MspInit+0xb4>)
 80034b6:	2180      	movs	r1, #128	; 0x80
 80034b8:	0349      	lsls	r1, r1, #13
 80034ba:	430a      	orrs	r2, r1
 80034bc:	641a      	str	r2, [r3, #64]	; 0x40
 80034be:	4b15      	ldr	r3, [pc, #84]	; (8003514 <HAL_ADC_MspInit+0xb4>)
 80034c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034c2:	2380      	movs	r3, #128	; 0x80
 80034c4:	035b      	lsls	r3, r3, #13
 80034c6:	4013      	ands	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034cc:	4b11      	ldr	r3, [pc, #68]	; (8003514 <HAL_ADC_MspInit+0xb4>)
 80034ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034d0:	4b10      	ldr	r3, [pc, #64]	; (8003514 <HAL_ADC_MspInit+0xb4>)
 80034d2:	2101      	movs	r1, #1
 80034d4:	430a      	orrs	r2, r1
 80034d6:	635a      	str	r2, [r3, #52]	; 0x34
 80034d8:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <HAL_ADC_MspInit+0xb4>)
 80034da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034dc:	2201      	movs	r2, #1
 80034de:	4013      	ands	r3, r2
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80034e4:	2144      	movs	r1, #68	; 0x44
 80034e6:	187b      	adds	r3, r7, r1
 80034e8:	2201      	movs	r2, #1
 80034ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034ec:	187b      	adds	r3, r7, r1
 80034ee:	2203      	movs	r2, #3
 80034f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f2:	187b      	adds	r3, r7, r1
 80034f4:	2200      	movs	r2, #0
 80034f6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f8:	187a      	adds	r2, r7, r1
 80034fa:	23a0      	movs	r3, #160	; 0xa0
 80034fc:	05db      	lsls	r3, r3, #23
 80034fe:	0011      	movs	r1, r2
 8003500:	0018      	movs	r0, r3
 8003502:	f001 f8eb 	bl	80046dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	46bd      	mov	sp, r7
 800350a:	b017      	add	sp, #92	; 0x5c
 800350c:	bd90      	pop	{r4, r7, pc}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	40012400 	.word	0x40012400
 8003514:	40021000 	.word	0x40021000

08003518 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003518:	b590      	push	{r4, r7, lr}
 800351a:	b08b      	sub	sp, #44	; 0x2c
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003520:	2414      	movs	r4, #20
 8003522:	193b      	adds	r3, r7, r4
 8003524:	0018      	movs	r0, r3
 8003526:	2314      	movs	r3, #20
 8003528:	001a      	movs	r2, r3
 800352a:	2100      	movs	r1, #0
 800352c:	f005 fd41 	bl	8008fb2 <memset>
  if(hspi->Instance==SPI1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a1f      	ldr	r2, [pc, #124]	; (80035b4 <HAL_SPI_MspInit+0x9c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d138      	bne.n	80035ac <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800353a:	4b1f      	ldr	r3, [pc, #124]	; (80035b8 <HAL_SPI_MspInit+0xa0>)
 800353c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800353e:	4b1e      	ldr	r3, [pc, #120]	; (80035b8 <HAL_SPI_MspInit+0xa0>)
 8003540:	2180      	movs	r1, #128	; 0x80
 8003542:	0149      	lsls	r1, r1, #5
 8003544:	430a      	orrs	r2, r1
 8003546:	641a      	str	r2, [r3, #64]	; 0x40
 8003548:	4b1b      	ldr	r3, [pc, #108]	; (80035b8 <HAL_SPI_MspInit+0xa0>)
 800354a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800354c:	2380      	movs	r3, #128	; 0x80
 800354e:	015b      	lsls	r3, r3, #5
 8003550:	4013      	ands	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
 8003554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003556:	4b18      	ldr	r3, [pc, #96]	; (80035b8 <HAL_SPI_MspInit+0xa0>)
 8003558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800355a:	4b17      	ldr	r3, [pc, #92]	; (80035b8 <HAL_SPI_MspInit+0xa0>)
 800355c:	2101      	movs	r1, #1
 800355e:	430a      	orrs	r2, r1
 8003560:	635a      	str	r2, [r3, #52]	; 0x34
 8003562:	4b15      	ldr	r3, [pc, #84]	; (80035b8 <HAL_SPI_MspInit+0xa0>)
 8003564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003566:	2201      	movs	r2, #1
 8003568:	4013      	ands	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800356e:	0021      	movs	r1, r4
 8003570:	187b      	adds	r3, r7, r1
 8003572:	22c2      	movs	r2, #194	; 0xc2
 8003574:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003576:	187b      	adds	r3, r7, r1
 8003578:	2202      	movs	r2, #2
 800357a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357c:	187b      	adds	r3, r7, r1
 800357e:	2200      	movs	r2, #0
 8003580:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003582:	187b      	adds	r3, r7, r1
 8003584:	2200      	movs	r2, #0
 8003586:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003588:	187b      	adds	r3, r7, r1
 800358a:	2200      	movs	r2, #0
 800358c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800358e:	187a      	adds	r2, r7, r1
 8003590:	23a0      	movs	r3, #160	; 0xa0
 8003592:	05db      	lsls	r3, r3, #23
 8003594:	0011      	movs	r1, r2
 8003596:	0018      	movs	r0, r3
 8003598:	f001 f8a0 	bl	80046dc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800359c:	2200      	movs	r2, #0
 800359e:	2100      	movs	r1, #0
 80035a0:	2019      	movs	r0, #25
 80035a2:	f000 ff9d 	bl	80044e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80035a6:	2019      	movs	r0, #25
 80035a8:	f000 ffaf 	bl	800450a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80035ac:	46c0      	nop			; (mov r8, r8)
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b00b      	add	sp, #44	; 0x2c
 80035b2:	bd90      	pop	{r4, r7, pc}
 80035b4:	40013000 	.word	0x40013000
 80035b8:	40021000 	.word	0x40021000

080035bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	2380      	movs	r3, #128	; 0x80
 80035ca:	05db      	lsls	r3, r3, #23
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d113      	bne.n	80035f8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <HAL_TIM_Base_MspInit+0x44>)
 80035d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035d4:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <HAL_TIM_Base_MspInit+0x44>)
 80035d6:	2101      	movs	r1, #1
 80035d8:	430a      	orrs	r2, r1
 80035da:	63da      	str	r2, [r3, #60]	; 0x3c
 80035dc:	4b08      	ldr	r3, [pc, #32]	; (8003600 <HAL_TIM_Base_MspInit+0x44>)
 80035de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e0:	2201      	movs	r2, #1
 80035e2:	4013      	ands	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80035e8:	2200      	movs	r2, #0
 80035ea:	2102      	movs	r1, #2
 80035ec:	200f      	movs	r0, #15
 80035ee:	f000 ff77 	bl	80044e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80035f2:	200f      	movs	r0, #15
 80035f4:	f000 ff89 	bl	800450a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80035f8:	46c0      	nop			; (mov r8, r8)
 80035fa:	46bd      	mov	sp, r7
 80035fc:	b004      	add	sp, #16
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40021000 	.word	0x40021000

08003604 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003604:	b590      	push	{r4, r7, lr}
 8003606:	b099      	sub	sp, #100	; 0x64
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800360c:	234c      	movs	r3, #76	; 0x4c
 800360e:	18fb      	adds	r3, r7, r3
 8003610:	0018      	movs	r0, r3
 8003612:	2314      	movs	r3, #20
 8003614:	001a      	movs	r2, r3
 8003616:	2100      	movs	r1, #0
 8003618:	f005 fccb 	bl	8008fb2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800361c:	2418      	movs	r4, #24
 800361e:	193b      	adds	r3, r7, r4
 8003620:	0018      	movs	r0, r3
 8003622:	2334      	movs	r3, #52	; 0x34
 8003624:	001a      	movs	r2, r3
 8003626:	2100      	movs	r1, #0
 8003628:	f005 fcc3 	bl	8008fb2 <memset>
  if(huart->Instance==USART1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a49      	ldr	r2, [pc, #292]	; (8003758 <HAL_UART_MspInit+0x154>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d146      	bne.n	80036c4 <HAL_UART_MspInit+0xc0>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003636:	193b      	adds	r3, r7, r4
 8003638:	2201      	movs	r2, #1
 800363a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800363c:	193b      	adds	r3, r7, r4
 800363e:	2200      	movs	r2, #0
 8003640:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003642:	193b      	adds	r3, r7, r4
 8003644:	0018      	movs	r0, r3
 8003646:	f001 ff4d 	bl	80054e4 <HAL_RCCEx_PeriphCLKConfig>
 800364a:	1e03      	subs	r3, r0, #0
 800364c:	d001      	beq.n	8003652 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800364e:	f7ff fec9 	bl	80033e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003652:	4b42      	ldr	r3, [pc, #264]	; (800375c <HAL_UART_MspInit+0x158>)
 8003654:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003656:	4b41      	ldr	r3, [pc, #260]	; (800375c <HAL_UART_MspInit+0x158>)
 8003658:	2180      	movs	r1, #128	; 0x80
 800365a:	01c9      	lsls	r1, r1, #7
 800365c:	430a      	orrs	r2, r1
 800365e:	641a      	str	r2, [r3, #64]	; 0x40
 8003660:	4b3e      	ldr	r3, [pc, #248]	; (800375c <HAL_UART_MspInit+0x158>)
 8003662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003664:	2380      	movs	r3, #128	; 0x80
 8003666:	01db      	lsls	r3, r3, #7
 8003668:	4013      	ands	r3, r2
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800366e:	4b3b      	ldr	r3, [pc, #236]	; (800375c <HAL_UART_MspInit+0x158>)
 8003670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003672:	4b3a      	ldr	r3, [pc, #232]	; (800375c <HAL_UART_MspInit+0x158>)
 8003674:	2102      	movs	r1, #2
 8003676:	430a      	orrs	r2, r1
 8003678:	635a      	str	r2, [r3, #52]	; 0x34
 800367a:	4b38      	ldr	r3, [pc, #224]	; (800375c <HAL_UART_MspInit+0x158>)
 800367c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800367e:	2202      	movs	r2, #2
 8003680:	4013      	ands	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003686:	214c      	movs	r1, #76	; 0x4c
 8003688:	187b      	adds	r3, r7, r1
 800368a:	22c0      	movs	r2, #192	; 0xc0
 800368c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368e:	187b      	adds	r3, r7, r1
 8003690:	2202      	movs	r2, #2
 8003692:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003694:	187b      	adds	r3, r7, r1
 8003696:	2200      	movs	r2, #0
 8003698:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369a:	187b      	adds	r3, r7, r1
 800369c:	2200      	movs	r2, #0
 800369e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80036a0:	187b      	adds	r3, r7, r1
 80036a2:	2200      	movs	r2, #0
 80036a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036a6:	187b      	adds	r3, r7, r1
 80036a8:	4a2d      	ldr	r2, [pc, #180]	; (8003760 <HAL_UART_MspInit+0x15c>)
 80036aa:	0019      	movs	r1, r3
 80036ac:	0010      	movs	r0, r2
 80036ae:	f001 f815 	bl	80046dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80036b2:	2200      	movs	r2, #0
 80036b4:	2103      	movs	r1, #3
 80036b6:	201b      	movs	r0, #27
 80036b8:	f000 ff12 	bl	80044e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80036bc:	201b      	movs	r0, #27
 80036be:	f000 ff24 	bl	800450a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80036c2:	e044      	b.n	800374e <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART2)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a26      	ldr	r2, [pc, #152]	; (8003764 <HAL_UART_MspInit+0x160>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d13f      	bne.n	800374e <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80036ce:	2118      	movs	r1, #24
 80036d0:	187b      	adds	r3, r7, r1
 80036d2:	2202      	movs	r2, #2
 80036d4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80036d6:	187b      	adds	r3, r7, r1
 80036d8:	2200      	movs	r2, #0
 80036da:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036dc:	187b      	adds	r3, r7, r1
 80036de:	0018      	movs	r0, r3
 80036e0:	f001 ff00 	bl	80054e4 <HAL_RCCEx_PeriphCLKConfig>
 80036e4:	1e03      	subs	r3, r0, #0
 80036e6:	d001      	beq.n	80036ec <HAL_UART_MspInit+0xe8>
      Error_Handler();
 80036e8:	f7ff fe7c 	bl	80033e4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80036ec:	4b1b      	ldr	r3, [pc, #108]	; (800375c <HAL_UART_MspInit+0x158>)
 80036ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036f0:	4b1a      	ldr	r3, [pc, #104]	; (800375c <HAL_UART_MspInit+0x158>)
 80036f2:	2180      	movs	r1, #128	; 0x80
 80036f4:	0289      	lsls	r1, r1, #10
 80036f6:	430a      	orrs	r2, r1
 80036f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80036fa:	4b18      	ldr	r3, [pc, #96]	; (800375c <HAL_UART_MspInit+0x158>)
 80036fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036fe:	2380      	movs	r3, #128	; 0x80
 8003700:	029b      	lsls	r3, r3, #10
 8003702:	4013      	ands	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003708:	4b14      	ldr	r3, [pc, #80]	; (800375c <HAL_UART_MspInit+0x158>)
 800370a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800370c:	4b13      	ldr	r3, [pc, #76]	; (800375c <HAL_UART_MspInit+0x158>)
 800370e:	2101      	movs	r1, #1
 8003710:	430a      	orrs	r2, r1
 8003712:	635a      	str	r2, [r3, #52]	; 0x34
 8003714:	4b11      	ldr	r3, [pc, #68]	; (800375c <HAL_UART_MspInit+0x158>)
 8003716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003718:	2201      	movs	r2, #1
 800371a:	4013      	ands	r3, r2
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003720:	214c      	movs	r1, #76	; 0x4c
 8003722:	187b      	adds	r3, r7, r1
 8003724:	220c      	movs	r2, #12
 8003726:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003728:	187b      	adds	r3, r7, r1
 800372a:	2202      	movs	r2, #2
 800372c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372e:	187b      	adds	r3, r7, r1
 8003730:	2200      	movs	r2, #0
 8003732:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003734:	187b      	adds	r3, r7, r1
 8003736:	2200      	movs	r2, #0
 8003738:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800373a:	187b      	adds	r3, r7, r1
 800373c:	2201      	movs	r2, #1
 800373e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003740:	187a      	adds	r2, r7, r1
 8003742:	23a0      	movs	r3, #160	; 0xa0
 8003744:	05db      	lsls	r3, r3, #23
 8003746:	0011      	movs	r1, r2
 8003748:	0018      	movs	r0, r3
 800374a:	f000 ffc7 	bl	80046dc <HAL_GPIO_Init>
}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	46bd      	mov	sp, r7
 8003752:	b019      	add	sp, #100	; 0x64
 8003754:	bd90      	pop	{r4, r7, pc}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	40013800 	.word	0x40013800
 800375c:	40021000 	.word	0x40021000
 8003760:	50000400 	.word	0x50000400
 8003764:	40004400 	.word	0x40004400

08003768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800376c:	e7fe      	b.n	800376c <NMI_Handler+0x4>

0800376e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003772:	e7fe      	b.n	8003772 <HardFault_Handler+0x4>

08003774 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003778:	46c0      	nop			; (mov r8, r8)
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800378c:	f000 f908 	bl	80039a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003790:	46c0      	nop			; (mov r8, r8)
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO2_Pin);
 800379a:	2010      	movs	r0, #16
 800379c:	f001 f958 	bl	8004a50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 80037a0:	2020      	movs	r0, #32
 80037a2:	f001 f955 	bl	8004a50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80037b0:	4b03      	ldr	r3, [pc, #12]	; (80037c0 <TIM2_IRQHandler+0x14>)
 80037b2:	0018      	movs	r0, r3
 80037b4:	f002 ffa4 	bl	8006700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80037b8:	46c0      	nop			; (mov r8, r8)
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	200002a0 	.word	0x200002a0

080037c4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80037c8:	4b03      	ldr	r3, [pc, #12]	; (80037d8 <SPI1_IRQHandler+0x14>)
 80037ca:	0018      	movs	r0, r3
 80037cc:	f002 fc24 	bl	8006018 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80037d0:	46c0      	nop			; (mov r8, r8)
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	2000023c 	.word	0x2000023c

080037dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80037e0:	4b03      	ldr	r3, [pc, #12]	; (80037f0 <USART1_IRQHandler+0x14>)
 80037e2:	0018      	movs	r0, r3
 80037e4:	f003 fcb8 	bl	8007158 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80037e8:	46c0      	nop			; (mov r8, r8)
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	200002ec 	.word	0x200002ec

080037f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037fc:	4a14      	ldr	r2, [pc, #80]	; (8003850 <_sbrk+0x5c>)
 80037fe:	4b15      	ldr	r3, [pc, #84]	; (8003854 <_sbrk+0x60>)
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003808:	4b13      	ldr	r3, [pc, #76]	; (8003858 <_sbrk+0x64>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d102      	bne.n	8003816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003810:	4b11      	ldr	r3, [pc, #68]	; (8003858 <_sbrk+0x64>)
 8003812:	4a12      	ldr	r2, [pc, #72]	; (800385c <_sbrk+0x68>)
 8003814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003816:	4b10      	ldr	r3, [pc, #64]	; (8003858 <_sbrk+0x64>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	18d3      	adds	r3, r2, r3
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	429a      	cmp	r2, r3
 8003822:	d207      	bcs.n	8003834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003824:	f005 fb92 	bl	8008f4c <__errno>
 8003828:	0003      	movs	r3, r0
 800382a:	220c      	movs	r2, #12
 800382c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800382e:	2301      	movs	r3, #1
 8003830:	425b      	negs	r3, r3
 8003832:	e009      	b.n	8003848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003834:	4b08      	ldr	r3, [pc, #32]	; (8003858 <_sbrk+0x64>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800383a:	4b07      	ldr	r3, [pc, #28]	; (8003858 <_sbrk+0x64>)
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	18d2      	adds	r2, r2, r3
 8003842:	4b05      	ldr	r3, [pc, #20]	; (8003858 <_sbrk+0x64>)
 8003844:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003846:	68fb      	ldr	r3, [r7, #12]
}
 8003848:	0018      	movs	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	b006      	add	sp, #24
 800384e:	bd80      	pop	{r7, pc}
 8003850:	20009000 	.word	0x20009000
 8003854:	00000400 	.word	0x00000400
 8003858:	2000040c 	.word	0x2000040c
 800385c:	20000428 	.word	0x20000428

08003860 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
 8003864:	4b03      	ldr	r3, [pc, #12]	; (8003874 <SystemInit+0x14>)
 8003866:	2280      	movs	r2, #128	; 0x80
 8003868:	0512      	lsls	r2, r2, #20
 800386a:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800386c:	46c0      	nop			; (mov r8, r8)
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	e000ed00 	.word	0xe000ed00

08003878 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003878:	480d      	ldr	r0, [pc, #52]	; (80038b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800387a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800387c:	f7ff fff0 	bl	8003860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003880:	480c      	ldr	r0, [pc, #48]	; (80038b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003882:	490d      	ldr	r1, [pc, #52]	; (80038b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003884:	4a0d      	ldr	r2, [pc, #52]	; (80038bc <LoopForever+0xe>)
  movs r3, #0
 8003886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003888:	e002      	b.n	8003890 <LoopCopyDataInit>

0800388a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800388a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800388c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800388e:	3304      	adds	r3, #4

08003890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003894:	d3f9      	bcc.n	800388a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003896:	4a0a      	ldr	r2, [pc, #40]	; (80038c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003898:	4c0a      	ldr	r4, [pc, #40]	; (80038c4 <LoopForever+0x16>)
  movs r3, #0
 800389a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800389c:	e001      	b.n	80038a2 <LoopFillZerobss>

0800389e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800389e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038a0:	3204      	adds	r2, #4

080038a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038a4:	d3fb      	bcc.n	800389e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80038a6:	f005 fb57 	bl	8008f58 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80038aa:	f7ff fa6f 	bl	8002d8c <main>

080038ae <LoopForever>:

LoopForever:
  b LoopForever
 80038ae:	e7fe      	b.n	80038ae <LoopForever>
  ldr   r0, =_estack
 80038b0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80038b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038b8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80038bc:	0800a32c 	.word	0x0800a32c
  ldr r2, =_sbss
 80038c0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80038c4:	20000424 	.word	0x20000424

080038c8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038c8:	e7fe      	b.n	80038c8 <ADC1_COMP_IRQHandler>
	...

080038cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038d2:	1dfb      	adds	r3, r7, #7
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <HAL_Init+0x3c>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <HAL_Init+0x3c>)
 80038de:	2180      	movs	r1, #128	; 0x80
 80038e0:	0049      	lsls	r1, r1, #1
 80038e2:	430a      	orrs	r2, r1
 80038e4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038e6:	2001      	movs	r0, #1
 80038e8:	f000 f810 	bl	800390c <HAL_InitTick>
 80038ec:	1e03      	subs	r3, r0, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80038f0:	1dfb      	adds	r3, r7, #7
 80038f2:	2201      	movs	r2, #1
 80038f4:	701a      	strb	r2, [r3, #0]
 80038f6:	e001      	b.n	80038fc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80038f8:	f7ff fd8a 	bl	8003410 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038fc:	1dfb      	adds	r3, r7, #7
 80038fe:	781b      	ldrb	r3, [r3, #0]
}
 8003900:	0018      	movs	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	b002      	add	sp, #8
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40022000 	.word	0x40022000

0800390c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800390c:	b590      	push	{r4, r7, lr}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003914:	230f      	movs	r3, #15
 8003916:	18fb      	adds	r3, r7, r3
 8003918:	2200      	movs	r2, #0
 800391a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800391c:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <HAL_InitTick+0x88>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d02b      	beq.n	800397c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003924:	4b1c      	ldr	r3, [pc, #112]	; (8003998 <HAL_InitTick+0x8c>)
 8003926:	681c      	ldr	r4, [r3, #0]
 8003928:	4b1a      	ldr	r3, [pc, #104]	; (8003994 <HAL_InitTick+0x88>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	0019      	movs	r1, r3
 800392e:	23fa      	movs	r3, #250	; 0xfa
 8003930:	0098      	lsls	r0, r3, #2
 8003932:	f7fc fbfb 	bl	800012c <__udivsi3>
 8003936:	0003      	movs	r3, r0
 8003938:	0019      	movs	r1, r3
 800393a:	0020      	movs	r0, r4
 800393c:	f7fc fbf6 	bl	800012c <__udivsi3>
 8003940:	0003      	movs	r3, r0
 8003942:	0018      	movs	r0, r3
 8003944:	f000 fdf1 	bl	800452a <HAL_SYSTICK_Config>
 8003948:	1e03      	subs	r3, r0, #0
 800394a:	d112      	bne.n	8003972 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b03      	cmp	r3, #3
 8003950:	d80a      	bhi.n	8003968 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	2301      	movs	r3, #1
 8003956:	425b      	negs	r3, r3
 8003958:	2200      	movs	r2, #0
 800395a:	0018      	movs	r0, r3
 800395c:	f000 fdc0 	bl	80044e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003960:	4b0e      	ldr	r3, [pc, #56]	; (800399c <HAL_InitTick+0x90>)
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	e00d      	b.n	8003984 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003968:	230f      	movs	r3, #15
 800396a:	18fb      	adds	r3, r7, r3
 800396c:	2201      	movs	r2, #1
 800396e:	701a      	strb	r2, [r3, #0]
 8003970:	e008      	b.n	8003984 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003972:	230f      	movs	r3, #15
 8003974:	18fb      	adds	r3, r7, r3
 8003976:	2201      	movs	r2, #1
 8003978:	701a      	strb	r2, [r3, #0]
 800397a:	e003      	b.n	8003984 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800397c:	230f      	movs	r3, #15
 800397e:	18fb      	adds	r3, r7, r3
 8003980:	2201      	movs	r2, #1
 8003982:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003984:	230f      	movs	r3, #15
 8003986:	18fb      	adds	r3, r7, r3
 8003988:	781b      	ldrb	r3, [r3, #0]
}
 800398a:	0018      	movs	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	b005      	add	sp, #20
 8003990:	bd90      	pop	{r4, r7, pc}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	20000008 	.word	0x20000008
 8003998:	20000000 	.word	0x20000000
 800399c:	20000004 	.word	0x20000004

080039a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80039a4:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_IncTick+0x1c>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	001a      	movs	r2, r3
 80039aa:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <HAL_IncTick+0x20>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	18d2      	adds	r2, r2, r3
 80039b0:	4b03      	ldr	r3, [pc, #12]	; (80039c0 <HAL_IncTick+0x20>)
 80039b2:	601a      	str	r2, [r3, #0]
}
 80039b4:	46c0      	nop			; (mov r8, r8)
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	20000008 	.word	0x20000008
 80039c0:	20000410 	.word	0x20000410

080039c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  return uwTick;
 80039c8:	4b02      	ldr	r3, [pc, #8]	; (80039d4 <HAL_GetTick+0x10>)
 80039ca:	681b      	ldr	r3, [r3, #0]
}
 80039cc:	0018      	movs	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	20000410 	.word	0x20000410

080039d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039e0:	f7ff fff0 	bl	80039c4 <HAL_GetTick>
 80039e4:	0003      	movs	r3, r0
 80039e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	3301      	adds	r3, #1
 80039f0:	d005      	beq.n	80039fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039f2:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <HAL_Delay+0x44>)
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	001a      	movs	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	189b      	adds	r3, r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	f7ff ffe0 	bl	80039c4 <HAL_GetTick>
 8003a04:	0002      	movs	r2, r0
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d8f7      	bhi.n	8003a00 <HAL_Delay+0x28>
  {
  }
}
 8003a10:	46c0      	nop			; (mov r8, r8)
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	46bd      	mov	sp, r7
 8003a16:	b004      	add	sp, #16
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	20000008 	.word	0x20000008

08003a20 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003a28:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a06      	ldr	r2, [pc, #24]	; (8003a48 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	0019      	movs	r1, r3
 8003a32:	4b04      	ldr	r3, [pc, #16]	; (8003a44 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	601a      	str	r2, [r3, #0]
}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	b002      	add	sp, #8
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	40010000 	.word	0x40010000
 8003a48:	fffff9ff 	.word	0xfffff9ff

08003a4c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a05      	ldr	r2, [pc, #20]	; (8003a70 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003a5c:	401a      	ands	r2, r3
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	601a      	str	r2, [r3, #0]
}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	b002      	add	sp, #8
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	fe3fffff 	.word	0xfe3fffff

08003a74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	23e0      	movs	r3, #224	; 0xe0
 8003a82:	045b      	lsls	r3, r3, #17
 8003a84:	4013      	ands	r3, r2
}
 8003a86:	0018      	movs	r0, r3
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	b002      	add	sp, #8
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b084      	sub	sp, #16
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	60f8      	str	r0, [r7, #12]
 8003a96:	60b9      	str	r1, [r7, #8]
 8003a98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	2104      	movs	r1, #4
 8003aa2:	400a      	ands	r2, r1
 8003aa4:	2107      	movs	r1, #7
 8003aa6:	4091      	lsls	r1, r2
 8003aa8:	000a      	movs	r2, r1
 8003aaa:	43d2      	mvns	r2, r2
 8003aac:	401a      	ands	r2, r3
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2104      	movs	r1, #4
 8003ab2:	400b      	ands	r3, r1
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	4099      	lsls	r1, r3
 8003ab8:	000b      	movs	r3, r1
 8003aba:	431a      	orrs	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003ac0:	46c0      	nop			; (mov r8, r8)
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b004      	add	sp, #16
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	211f      	movs	r1, #31
 8003adc:	400a      	ands	r2, r1
 8003ade:	210f      	movs	r1, #15
 8003ae0:	4091      	lsls	r1, r2
 8003ae2:	000a      	movs	r2, r1
 8003ae4:	43d2      	mvns	r2, r2
 8003ae6:	401a      	ands	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	0e9b      	lsrs	r3, r3, #26
 8003aec:	210f      	movs	r1, #15
 8003aee:	4019      	ands	r1, r3
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	201f      	movs	r0, #31
 8003af4:	4003      	ands	r3, r0
 8003af6:	4099      	lsls	r1, r3
 8003af8:	000b      	movs	r3, r1
 8003afa:	431a      	orrs	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b00:	46c0      	nop			; (mov r8, r8)
 8003b02:	46bd      	mov	sp, r7
 8003b04:	b004      	add	sp, #16
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	035b      	lsls	r3, r3, #13
 8003b1a:	0b5b      	lsrs	r3, r3, #13
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	46bd      	mov	sp, r7
 8003b26:	b002      	add	sp, #8
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	0352      	lsls	r2, r2, #13
 8003b3c:	0b52      	lsrs	r2, r2, #13
 8003b3e:	43d2      	mvns	r2, r2
 8003b40:	401a      	ands	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b002      	add	sp, #8
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	0212      	lsls	r2, r2, #8
 8003b64:	43d2      	mvns	r2, r2
 8003b66:	401a      	ands	r2, r3
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	021b      	lsls	r3, r3, #8
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	400b      	ands	r3, r1
 8003b70:	4904      	ldr	r1, [pc, #16]	; (8003b84 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003b72:	400b      	ands	r3, r1
 8003b74:	431a      	orrs	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	b004      	add	sp, #16
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	07ffff00 	.word	0x07ffff00

08003b88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	4a05      	ldr	r2, [pc, #20]	; (8003bac <LL_ADC_EnableInternalRegulator+0x24>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	2280      	movs	r2, #128	; 0x80
 8003b9a:	0552      	lsls	r2, r2, #21
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ba2:	46c0      	nop			; (mov r8, r8)
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	b002      	add	sp, #8
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	6fffffe8 	.word	0x6fffffe8

08003bb0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	2380      	movs	r3, #128	; 0x80
 8003bbe:	055b      	lsls	r3, r3, #21
 8003bc0:	401a      	ands	r2, r3
 8003bc2:	2380      	movs	r3, #128	; 0x80
 8003bc4:	055b      	lsls	r3, r3, #21
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d101      	bne.n	8003bce <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e000      	b.n	8003bd0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b002      	add	sp, #8
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	2201      	movs	r2, #1
 8003be6:	4013      	ands	r3, r2
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <LL_ADC_IsEnabled+0x18>
 8003bec:	2301      	movs	r3, #1
 8003bee:	e000      	b.n	8003bf2 <LL_ADC_IsEnabled+0x1a>
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	b002      	add	sp, #8
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b082      	sub	sp, #8
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	2204      	movs	r2, #4
 8003c08:	4013      	ands	r3, r2
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d101      	bne.n	8003c12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	0018      	movs	r0, r3
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b002      	add	sp, #8
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c24:	231f      	movs	r3, #31
 8003c26:	18fb      	adds	r3, r7, r3
 8003c28:	2200      	movs	r2, #0
 8003c2a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003c30:	2300      	movs	r3, #0
 8003c32:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e1b1      	b.n	8003fa6 <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10a      	bne.n	8003c60 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f7ff fc07 	bl	8003460 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2254      	movs	r2, #84	; 0x54
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	0018      	movs	r0, r3
 8003c66:	f7ff ffa3 	bl	8003bb0 <LL_ADC_IsInternalRegulatorEnabled>
 8003c6a:	1e03      	subs	r3, r0, #0
 8003c6c:	d115      	bne.n	8003c9a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	0018      	movs	r0, r3
 8003c74:	f7ff ff88 	bl	8003b88 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c78:	4bcd      	ldr	r3, [pc, #820]	; (8003fb0 <HAL_ADC_Init+0x394>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	49cd      	ldr	r1, [pc, #820]	; (8003fb4 <HAL_ADC_Init+0x398>)
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f7fc fa54 	bl	800012c <__udivsi3>
 8003c84:	0003      	movs	r3, r0
 8003c86:	3301      	adds	r3, #1
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c8c:	e002      	b.n	8003c94 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	3b01      	subs	r3, #1
 8003c92:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f9      	bne.n	8003c8e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f7ff ff86 	bl	8003bb0 <LL_ADC_IsInternalRegulatorEnabled>
 8003ca4:	1e03      	subs	r3, r0, #0
 8003ca6:	d10f      	bne.n	8003cc8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cac:	2210      	movs	r2, #16
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb8:	2201      	movs	r2, #1
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003cc0:	231f      	movs	r3, #31
 8003cc2:	18fb      	adds	r3, r7, r3
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	0018      	movs	r0, r3
 8003cce:	f7ff ff94 	bl	8003bfa <LL_ADC_REG_IsConversionOngoing>
 8003cd2:	0003      	movs	r3, r0
 8003cd4:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cda:	2210      	movs	r2, #16
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d000      	beq.n	8003ce2 <HAL_ADC_Init+0xc6>
 8003ce0:	e154      	b.n	8003f8c <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d000      	beq.n	8003cea <HAL_ADC_Init+0xce>
 8003ce8:	e150      	b.n	8003f8c <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cee:	4ab2      	ldr	r2, [pc, #712]	; (8003fb8 <HAL_ADC_Init+0x39c>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f7ff ff6a 	bl	8003bd8 <LL_ADC_IsEnabled>
 8003d04:	1e03      	subs	r3, r0, #0
 8003d06:	d156      	bne.n	8003db6 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	2218      	movs	r2, #24
 8003d10:	4393      	bics	r3, r2
 8003d12:	0019      	movs	r1, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	0f9b      	lsrs	r3, r3, #30
 8003d26:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	223c      	movs	r2, #60	; 0x3c
 8003d38:	5c9b      	ldrb	r3, [r3, r2]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d111      	bne.n	8003d62 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	0f9b      	lsrs	r3, r3, #30
 8003d44:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d4a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003d50:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003d56:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	4a94      	ldr	r2, [pc, #592]	; (8003fbc <HAL_ADC_Init+0x3a0>)
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	0019      	movs	r1, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	23c0      	movs	r3, #192	; 0xc0
 8003d7e:	061b      	lsls	r3, r3, #24
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d018      	beq.n	8003db6 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003d88:	2380      	movs	r3, #128	; 0x80
 8003d8a:	05db      	lsls	r3, r3, #23
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d012      	beq.n	8003db6 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003d94:	2380      	movs	r3, #128	; 0x80
 8003d96:	061b      	lsls	r3, r3, #24
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d00c      	beq.n	8003db6 <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003d9c:	4b88      	ldr	r3, [pc, #544]	; (8003fc0 <HAL_ADC_Init+0x3a4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a88      	ldr	r2, [pc, #544]	; (8003fc4 <HAL_ADC_Init+0x3a8>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	0019      	movs	r1, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	23f0      	movs	r3, #240	; 0xf0
 8003dac:	039b      	lsls	r3, r3, #14
 8003dae:	401a      	ands	r2, r3
 8003db0:	4b83      	ldr	r3, [pc, #524]	; (8003fc0 <HAL_ADC_Init+0x3a4>)
 8003db2:	430a      	orrs	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	7e1b      	ldrb	r3, [r3, #24]
 8003dba:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	7e5b      	ldrb	r3, [r3, #25]
 8003dc0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003dc2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	7e9b      	ldrb	r3, [r3, #26]
 8003dc8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003dca:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <HAL_ADC_Init+0x1be>
 8003dd4:	2380      	movs	r3, #128	; 0x80
 8003dd6:	015b      	lsls	r3, r3, #5
 8003dd8:	e000      	b.n	8003ddc <HAL_ADC_Init+0x1c0>
 8003dda:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003ddc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003de2:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	da04      	bge.n	8003df6 <HAL_ADC_Init+0x1da>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	085b      	lsrs	r3, r3, #1
 8003df4:	e001      	b.n	8003dfa <HAL_ADC_Init+0x1de>
 8003df6:	2380      	movs	r3, #128	; 0x80
 8003df8:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8003dfa:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	212c      	movs	r1, #44	; 0x2c
 8003e00:	5c5b      	ldrb	r3, [r3, r1]
 8003e02:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003e04:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	5c9b      	ldrb	r3, [r3, r2]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d115      	bne.n	8003e42 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	7e9b      	ldrb	r3, [r3, #26]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d105      	bne.n	8003e2a <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	2280      	movs	r2, #128	; 0x80
 8003e22:	0252      	lsls	r2, r2, #9
 8003e24:	4313      	orrs	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
 8003e28:	e00b      	b.n	8003e42 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2e:	2220      	movs	r2, #32
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e4e:	23e0      	movs	r3, #224	; 0xe0
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	4a58      	ldr	r2, [pc, #352]	; (8003fc8 <HAL_ADC_Init+0x3ac>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	0019      	movs	r1, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	4a53      	ldr	r2, [pc, #332]	; (8003fcc <HAL_ADC_Init+0x3b0>)
 8003e7e:	4013      	ands	r3, r2
 8003e80:	0019      	movs	r1, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6818      	ldr	r0, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e94:	001a      	movs	r2, r3
 8003e96:	2100      	movs	r1, #0
 8003e98:	f7ff fdf9 	bl	8003a8e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6818      	ldr	r0, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea4:	494a      	ldr	r1, [pc, #296]	; (8003fd0 <HAL_ADC_Init+0x3b4>)
 8003ea6:	001a      	movs	r2, r3
 8003ea8:	f7ff fdf1 	bl	8003a8e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d109      	bne.n	8003ec8 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2110      	movs	r1, #16
 8003ec0:	4249      	negs	r1, r1
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	629a      	str	r2, [r3, #40]	; 0x28
 8003ec6:	e03a      	b.n	8003f3e <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691a      	ldr	r2, [r3, #16]
 8003ecc:	2380      	movs	r3, #128	; 0x80
 8003ece:	039b      	lsls	r3, r3, #14
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d134      	bne.n	8003f3e <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	613b      	str	r3, [r7, #16]
 8003ed8:	e00c      	b.n	8003ef4 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	40da      	lsrs	r2, r3
 8003ee4:	0013      	movs	r3, r2
 8003ee6:	220f      	movs	r2, #15
 8003ee8:	4013      	ands	r3, r2
 8003eea:	2b0f      	cmp	r3, #15
 8003eec:	d006      	beq.n	8003efc <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	613b      	str	r3, [r7, #16]
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	2b07      	cmp	r3, #7
 8003ef8:	d9ef      	bls.n	8003eda <HAL_ADC_Init+0x2be>
 8003efa:	e000      	b.n	8003efe <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8003efc:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d109      	bne.n	8003f18 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2110      	movs	r1, #16
 8003f10:	4249      	negs	r1, r1
 8003f12:	430a      	orrs	r2, r1
 8003f14:	629a      	str	r2, [r3, #40]	; 0x28
 8003f16:	e012      	b.n	8003f3e <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	221c      	movs	r2, #28
 8003f28:	4013      	ands	r3, r2
 8003f2a:	2210      	movs	r2, #16
 8003f2c:	4252      	negs	r2, r2
 8003f2e:	409a      	lsls	r2, r3
 8003f30:	0011      	movs	r1, r2
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4a23      	ldr	r2, [pc, #140]	; (8003fd4 <HAL_ADC_Init+0x3b8>)
 8003f46:	4013      	ands	r3, r2
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d10b      	bne.n	8003f66 <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f58:	2203      	movs	r2, #3
 8003f5a:	4393      	bics	r3, r2
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003f64:	e01c      	b.n	8003fa0 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6a:	2212      	movs	r2, #18
 8003f6c:	4393      	bics	r3, r2
 8003f6e:	2210      	movs	r2, #16
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003f82:	231f      	movs	r3, #31
 8003f84:	18fb      	adds	r3, r7, r3
 8003f86:	2201      	movs	r2, #1
 8003f88:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003f8a:	e009      	b.n	8003fa0 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f90:	2210      	movs	r2, #16
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003f98:	231f      	movs	r3, #31
 8003f9a:	18fb      	adds	r3, r7, r3
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003fa0:	231f      	movs	r3, #31
 8003fa2:	18fb      	adds	r3, r7, r3
 8003fa4:	781b      	ldrb	r3, [r3, #0]
}
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	b008      	add	sp, #32
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	46c0      	nop			; (mov r8, r8)
 8003fb0:	20000000 	.word	0x20000000
 8003fb4:	00030d40 	.word	0x00030d40
 8003fb8:	fffffefd 	.word	0xfffffefd
 8003fbc:	1ffffc02 	.word	0x1ffffc02
 8003fc0:	40012708 	.word	0x40012708
 8003fc4:	ffc3ffff 	.word	0xffc3ffff
 8003fc8:	fffe0219 	.word	0xfffe0219
 8003fcc:	dffffc02 	.word	0xdffffc02
 8003fd0:	07ffff04 	.word	0x07ffff04
 8003fd4:	833fffe7 	.word	0x833fffe7

08003fd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fe2:	2317      	movs	r3, #23
 8003fe4:	18fb      	adds	r3, r7, r3
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003fea:	2300      	movs	r3, #0
 8003fec:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2254      	movs	r2, #84	; 0x54
 8003ff2:	5c9b      	ldrb	r3, [r3, r2]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d101      	bne.n	8003ffc <HAL_ADC_ConfigChannel+0x24>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e1c0      	b.n	800437e <HAL_ADC_ConfigChannel+0x3a6>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2254      	movs	r2, #84	; 0x54
 8004000:	2101      	movs	r1, #1
 8004002:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	0018      	movs	r0, r3
 800400a:	f7ff fdf6 	bl	8003bfa <LL_ADC_REG_IsConversionOngoing>
 800400e:	1e03      	subs	r3, r0, #0
 8004010:	d000      	beq.n	8004014 <HAL_ADC_ConfigChannel+0x3c>
 8004012:	e1a3      	b.n	800435c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b02      	cmp	r3, #2
 800401a:	d100      	bne.n	800401e <HAL_ADC_ConfigChannel+0x46>
 800401c:	e143      	b.n	80042a6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691a      	ldr	r2, [r3, #16]
 8004022:	2380      	movs	r3, #128	; 0x80
 8004024:	061b      	lsls	r3, r3, #24
 8004026:	429a      	cmp	r2, r3
 8004028:	d004      	beq.n	8004034 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800402e:	4ac1      	ldr	r2, [pc, #772]	; (8004334 <HAL_ADC_ConfigChannel+0x35c>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d108      	bne.n	8004046 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	0019      	movs	r1, r3
 800403e:	0010      	movs	r0, r2
 8004040:	f7ff fd62 	bl	8003b08 <LL_ADC_REG_SetSequencerChAdd>
 8004044:	e0c9      	b.n	80041da <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	211f      	movs	r1, #31
 8004050:	400b      	ands	r3, r1
 8004052:	210f      	movs	r1, #15
 8004054:	4099      	lsls	r1, r3
 8004056:	000b      	movs	r3, r1
 8004058:	43db      	mvns	r3, r3
 800405a:	4013      	ands	r3, r2
 800405c:	0019      	movs	r1, r3
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	035b      	lsls	r3, r3, #13
 8004064:	0b5b      	lsrs	r3, r3, #13
 8004066:	d105      	bne.n	8004074 <HAL_ADC_ConfigChannel+0x9c>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	0e9b      	lsrs	r3, r3, #26
 800406e:	221f      	movs	r2, #31
 8004070:	4013      	ands	r3, r2
 8004072:	e098      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2201      	movs	r2, #1
 800407a:	4013      	ands	r3, r2
 800407c:	d000      	beq.n	8004080 <HAL_ADC_ConfigChannel+0xa8>
 800407e:	e091      	b.n	80041a4 <HAL_ADC_ConfigChannel+0x1cc>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2202      	movs	r2, #2
 8004086:	4013      	ands	r3, r2
 8004088:	d000      	beq.n	800408c <HAL_ADC_ConfigChannel+0xb4>
 800408a:	e089      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x1c8>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2204      	movs	r2, #4
 8004092:	4013      	ands	r3, r2
 8004094:	d000      	beq.n	8004098 <HAL_ADC_ConfigChannel+0xc0>
 8004096:	e081      	b.n	800419c <HAL_ADC_ConfigChannel+0x1c4>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2208      	movs	r2, #8
 800409e:	4013      	ands	r3, r2
 80040a0:	d000      	beq.n	80040a4 <HAL_ADC_ConfigChannel+0xcc>
 80040a2:	e079      	b.n	8004198 <HAL_ADC_ConfigChannel+0x1c0>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2210      	movs	r2, #16
 80040aa:	4013      	ands	r3, r2
 80040ac:	d000      	beq.n	80040b0 <HAL_ADC_ConfigChannel+0xd8>
 80040ae:	e071      	b.n	8004194 <HAL_ADC_ConfigChannel+0x1bc>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2220      	movs	r2, #32
 80040b6:	4013      	ands	r3, r2
 80040b8:	d000      	beq.n	80040bc <HAL_ADC_ConfigChannel+0xe4>
 80040ba:	e069      	b.n	8004190 <HAL_ADC_ConfigChannel+0x1b8>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2240      	movs	r2, #64	; 0x40
 80040c2:	4013      	ands	r3, r2
 80040c4:	d000      	beq.n	80040c8 <HAL_ADC_ConfigChannel+0xf0>
 80040c6:	e061      	b.n	800418c <HAL_ADC_ConfigChannel+0x1b4>
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2280      	movs	r2, #128	; 0x80
 80040ce:	4013      	ands	r3, r2
 80040d0:	d000      	beq.n	80040d4 <HAL_ADC_ConfigChannel+0xfc>
 80040d2:	e059      	b.n	8004188 <HAL_ADC_ConfigChannel+0x1b0>
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	2380      	movs	r3, #128	; 0x80
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	4013      	ands	r3, r2
 80040de:	d151      	bne.n	8004184 <HAL_ADC_ConfigChannel+0x1ac>
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	2380      	movs	r3, #128	; 0x80
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4013      	ands	r3, r2
 80040ea:	d149      	bne.n	8004180 <HAL_ADC_ConfigChannel+0x1a8>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	2380      	movs	r3, #128	; 0x80
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	4013      	ands	r3, r2
 80040f6:	d141      	bne.n	800417c <HAL_ADC_ConfigChannel+0x1a4>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	2380      	movs	r3, #128	; 0x80
 80040fe:	011b      	lsls	r3, r3, #4
 8004100:	4013      	ands	r3, r2
 8004102:	d139      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x1a0>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	2380      	movs	r3, #128	; 0x80
 800410a:	015b      	lsls	r3, r3, #5
 800410c:	4013      	ands	r3, r2
 800410e:	d131      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x19c>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	2380      	movs	r3, #128	; 0x80
 8004116:	019b      	lsls	r3, r3, #6
 8004118:	4013      	ands	r3, r2
 800411a:	d129      	bne.n	8004170 <HAL_ADC_ConfigChannel+0x198>
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	2380      	movs	r3, #128	; 0x80
 8004122:	01db      	lsls	r3, r3, #7
 8004124:	4013      	ands	r3, r2
 8004126:	d121      	bne.n	800416c <HAL_ADC_ConfigChannel+0x194>
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	2380      	movs	r3, #128	; 0x80
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	4013      	ands	r3, r2
 8004132:	d119      	bne.n	8004168 <HAL_ADC_ConfigChannel+0x190>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	2380      	movs	r3, #128	; 0x80
 800413a:	025b      	lsls	r3, r3, #9
 800413c:	4013      	ands	r3, r2
 800413e:	d111      	bne.n	8004164 <HAL_ADC_ConfigChannel+0x18c>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	2380      	movs	r3, #128	; 0x80
 8004146:	029b      	lsls	r3, r3, #10
 8004148:	4013      	ands	r3, r2
 800414a:	d109      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x188>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	2380      	movs	r3, #128	; 0x80
 8004152:	02db      	lsls	r3, r3, #11
 8004154:	4013      	ands	r3, r2
 8004156:	d001      	beq.n	800415c <HAL_ADC_ConfigChannel+0x184>
 8004158:	2312      	movs	r3, #18
 800415a:	e024      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x1ce>
 800415c:	2300      	movs	r3, #0
 800415e:	e022      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004160:	2311      	movs	r3, #17
 8004162:	e020      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004164:	2310      	movs	r3, #16
 8004166:	e01e      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004168:	230f      	movs	r3, #15
 800416a:	e01c      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x1ce>
 800416c:	230e      	movs	r3, #14
 800416e:	e01a      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004170:	230d      	movs	r3, #13
 8004172:	e018      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004174:	230c      	movs	r3, #12
 8004176:	e016      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004178:	230b      	movs	r3, #11
 800417a:	e014      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x1ce>
 800417c:	230a      	movs	r3, #10
 800417e:	e012      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004180:	2309      	movs	r3, #9
 8004182:	e010      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004184:	2308      	movs	r3, #8
 8004186:	e00e      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004188:	2307      	movs	r3, #7
 800418a:	e00c      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x1ce>
 800418c:	2306      	movs	r3, #6
 800418e:	e00a      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004190:	2305      	movs	r3, #5
 8004192:	e008      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004194:	2304      	movs	r3, #4
 8004196:	e006      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004198:	2303      	movs	r3, #3
 800419a:	e004      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x1ce>
 800419c:	2302      	movs	r3, #2
 800419e:	e002      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x1ce>
 80041a0:	2301      	movs	r3, #1
 80041a2:	e000      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x1ce>
 80041a4:	2300      	movs	r3, #0
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	6852      	ldr	r2, [r2, #4]
 80041aa:	201f      	movs	r0, #31
 80041ac:	4002      	ands	r2, r0
 80041ae:	4093      	lsls	r3, r2
 80041b0:	000a      	movs	r2, r1
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	089b      	lsrs	r3, r3, #2
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	69db      	ldr	r3, [r3, #28]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d808      	bhi.n	80041da <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6818      	ldr	r0, [r3, #0]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	6859      	ldr	r1, [r3, #4]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	001a      	movs	r2, r3
 80041d6:	f7ff fc77 	bl	8003ac8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6818      	ldr	r0, [r3, #0]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	6819      	ldr	r1, [r3, #0]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	001a      	movs	r2, r3
 80041e8:	f7ff fcb2 	bl	8003b50 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	db00      	blt.n	80041f6 <HAL_ADC_ConfigChannel+0x21e>
 80041f4:	e0bc      	b.n	8004370 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041f6:	4b50      	ldr	r3, [pc, #320]	; (8004338 <HAL_ADC_ConfigChannel+0x360>)
 80041f8:	0018      	movs	r0, r3
 80041fa:	f7ff fc3b 	bl	8003a74 <LL_ADC_GetCommonPathInternalCh>
 80041fe:	0003      	movs	r3, r0
 8004200:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a4d      	ldr	r2, [pc, #308]	; (800433c <HAL_ADC_ConfigChannel+0x364>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d122      	bne.n	8004252 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	2380      	movs	r3, #128	; 0x80
 8004210:	041b      	lsls	r3, r3, #16
 8004212:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004214:	d11d      	bne.n	8004252 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	2280      	movs	r2, #128	; 0x80
 800421a:	0412      	lsls	r2, r2, #16
 800421c:	4313      	orrs	r3, r2
 800421e:	4a46      	ldr	r2, [pc, #280]	; (8004338 <HAL_ADC_ConfigChannel+0x360>)
 8004220:	0019      	movs	r1, r3
 8004222:	0010      	movs	r0, r2
 8004224:	f7ff fc12 	bl	8003a4c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004228:	4b45      	ldr	r3, [pc, #276]	; (8004340 <HAL_ADC_ConfigChannel+0x368>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4945      	ldr	r1, [pc, #276]	; (8004344 <HAL_ADC_ConfigChannel+0x36c>)
 800422e:	0018      	movs	r0, r3
 8004230:	f7fb ff7c 	bl	800012c <__udivsi3>
 8004234:	0003      	movs	r3, r0
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	0013      	movs	r3, r2
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	189b      	adds	r3, r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004242:	e002      	b.n	800424a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	3b01      	subs	r3, #1
 8004248:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1f9      	bne.n	8004244 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004250:	e08e      	b.n	8004370 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a3c      	ldr	r2, [pc, #240]	; (8004348 <HAL_ADC_ConfigChannel+0x370>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d10e      	bne.n	800427a <HAL_ADC_ConfigChannel+0x2a2>
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	2380      	movs	r3, #128	; 0x80
 8004260:	045b      	lsls	r3, r3, #17
 8004262:	4013      	ands	r3, r2
 8004264:	d109      	bne.n	800427a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	2280      	movs	r2, #128	; 0x80
 800426a:	0452      	lsls	r2, r2, #17
 800426c:	4313      	orrs	r3, r2
 800426e:	4a32      	ldr	r2, [pc, #200]	; (8004338 <HAL_ADC_ConfigChannel+0x360>)
 8004270:	0019      	movs	r1, r3
 8004272:	0010      	movs	r0, r2
 8004274:	f7ff fbea 	bl	8003a4c <LL_ADC_SetCommonPathInternalCh>
 8004278:	e07a      	b.n	8004370 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a33      	ldr	r2, [pc, #204]	; (800434c <HAL_ADC_ConfigChannel+0x374>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d000      	beq.n	8004286 <HAL_ADC_ConfigChannel+0x2ae>
 8004284:	e074      	b.n	8004370 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	2380      	movs	r3, #128	; 0x80
 800428a:	03db      	lsls	r3, r3, #15
 800428c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800428e:	d000      	beq.n	8004292 <HAL_ADC_ConfigChannel+0x2ba>
 8004290:	e06e      	b.n	8004370 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	2280      	movs	r2, #128	; 0x80
 8004296:	03d2      	lsls	r2, r2, #15
 8004298:	4313      	orrs	r3, r2
 800429a:	4a27      	ldr	r2, [pc, #156]	; (8004338 <HAL_ADC_ConfigChannel+0x360>)
 800429c:	0019      	movs	r1, r3
 800429e:	0010      	movs	r0, r2
 80042a0:	f7ff fbd4 	bl	8003a4c <LL_ADC_SetCommonPathInternalCh>
 80042a4:	e064      	b.n	8004370 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691a      	ldr	r2, [r3, #16]
 80042aa:	2380      	movs	r3, #128	; 0x80
 80042ac:	061b      	lsls	r3, r3, #24
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d004      	beq.n	80042bc <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80042b6:	4a1f      	ldr	r2, [pc, #124]	; (8004334 <HAL_ADC_ConfigChannel+0x35c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d107      	bne.n	80042cc <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	0019      	movs	r1, r3
 80042c6:	0010      	movs	r0, r2
 80042c8:	f7ff fc2f 	bl	8003b2a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	da4d      	bge.n	8004370 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042d4:	4b18      	ldr	r3, [pc, #96]	; (8004338 <HAL_ADC_ConfigChannel+0x360>)
 80042d6:	0018      	movs	r0, r3
 80042d8:	f7ff fbcc 	bl	8003a74 <LL_ADC_GetCommonPathInternalCh>
 80042dc:	0003      	movs	r3, r0
 80042de:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a15      	ldr	r2, [pc, #84]	; (800433c <HAL_ADC_ConfigChannel+0x364>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d108      	bne.n	80042fc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	4a18      	ldr	r2, [pc, #96]	; (8004350 <HAL_ADC_ConfigChannel+0x378>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	4a11      	ldr	r2, [pc, #68]	; (8004338 <HAL_ADC_ConfigChannel+0x360>)
 80042f2:	0019      	movs	r1, r3
 80042f4:	0010      	movs	r0, r2
 80042f6:	f7ff fba9 	bl	8003a4c <LL_ADC_SetCommonPathInternalCh>
 80042fa:	e039      	b.n	8004370 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a11      	ldr	r2, [pc, #68]	; (8004348 <HAL_ADC_ConfigChannel+0x370>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d108      	bne.n	8004318 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	4a12      	ldr	r2, [pc, #72]	; (8004354 <HAL_ADC_ConfigChannel+0x37c>)
 800430a:	4013      	ands	r3, r2
 800430c:	4a0a      	ldr	r2, [pc, #40]	; (8004338 <HAL_ADC_ConfigChannel+0x360>)
 800430e:	0019      	movs	r1, r3
 8004310:	0010      	movs	r0, r2
 8004312:	f7ff fb9b 	bl	8003a4c <LL_ADC_SetCommonPathInternalCh>
 8004316:	e02b      	b.n	8004370 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a0b      	ldr	r2, [pc, #44]	; (800434c <HAL_ADC_ConfigChannel+0x374>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d126      	bne.n	8004370 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	4a0c      	ldr	r2, [pc, #48]	; (8004358 <HAL_ADC_ConfigChannel+0x380>)
 8004326:	4013      	ands	r3, r2
 8004328:	4a03      	ldr	r2, [pc, #12]	; (8004338 <HAL_ADC_ConfigChannel+0x360>)
 800432a:	0019      	movs	r1, r3
 800432c:	0010      	movs	r0, r2
 800432e:	f7ff fb8d 	bl	8003a4c <LL_ADC_SetCommonPathInternalCh>
 8004332:	e01d      	b.n	8004370 <HAL_ADC_ConfigChannel+0x398>
 8004334:	80000004 	.word	0x80000004
 8004338:	40012708 	.word	0x40012708
 800433c:	b0001000 	.word	0xb0001000
 8004340:	20000000 	.word	0x20000000
 8004344:	00030d40 	.word	0x00030d40
 8004348:	b8004000 	.word	0xb8004000
 800434c:	b4002000 	.word	0xb4002000
 8004350:	ff7fffff 	.word	0xff7fffff
 8004354:	feffffff 	.word	0xfeffffff
 8004358:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004360:	2220      	movs	r2, #32
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004368:	2317      	movs	r3, #23
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	2201      	movs	r2, #1
 800436e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2254      	movs	r2, #84	; 0x54
 8004374:	2100      	movs	r1, #0
 8004376:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004378:	2317      	movs	r3, #23
 800437a:	18fb      	adds	r3, r7, r3
 800437c:	781b      	ldrb	r3, [r3, #0]
}
 800437e:	0018      	movs	r0, r3
 8004380:	46bd      	mov	sp, r7
 8004382:	b006      	add	sp, #24
 8004384:	bd80      	pop	{r7, pc}
 8004386:	46c0      	nop			; (mov r8, r8)

08004388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	0002      	movs	r2, r0
 8004390:	1dfb      	adds	r3, r7, #7
 8004392:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004394:	1dfb      	adds	r3, r7, #7
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2b7f      	cmp	r3, #127	; 0x7f
 800439a:	d809      	bhi.n	80043b0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800439c:	1dfb      	adds	r3, r7, #7
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	001a      	movs	r2, r3
 80043a2:	231f      	movs	r3, #31
 80043a4:	401a      	ands	r2, r3
 80043a6:	4b04      	ldr	r3, [pc, #16]	; (80043b8 <__NVIC_EnableIRQ+0x30>)
 80043a8:	2101      	movs	r1, #1
 80043aa:	4091      	lsls	r1, r2
 80043ac:	000a      	movs	r2, r1
 80043ae:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80043b0:	46c0      	nop			; (mov r8, r8)
 80043b2:	46bd      	mov	sp, r7
 80043b4:	b002      	add	sp, #8
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	e000e100 	.word	0xe000e100

080043bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043bc:	b590      	push	{r4, r7, lr}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	0002      	movs	r2, r0
 80043c4:	6039      	str	r1, [r7, #0]
 80043c6:	1dfb      	adds	r3, r7, #7
 80043c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80043ca:	1dfb      	adds	r3, r7, #7
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b7f      	cmp	r3, #127	; 0x7f
 80043d0:	d828      	bhi.n	8004424 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043d2:	4a2f      	ldr	r2, [pc, #188]	; (8004490 <__NVIC_SetPriority+0xd4>)
 80043d4:	1dfb      	adds	r3, r7, #7
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	b25b      	sxtb	r3, r3
 80043da:	089b      	lsrs	r3, r3, #2
 80043dc:	33c0      	adds	r3, #192	; 0xc0
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	589b      	ldr	r3, [r3, r2]
 80043e2:	1dfa      	adds	r2, r7, #7
 80043e4:	7812      	ldrb	r2, [r2, #0]
 80043e6:	0011      	movs	r1, r2
 80043e8:	2203      	movs	r2, #3
 80043ea:	400a      	ands	r2, r1
 80043ec:	00d2      	lsls	r2, r2, #3
 80043ee:	21ff      	movs	r1, #255	; 0xff
 80043f0:	4091      	lsls	r1, r2
 80043f2:	000a      	movs	r2, r1
 80043f4:	43d2      	mvns	r2, r2
 80043f6:	401a      	ands	r2, r3
 80043f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	019b      	lsls	r3, r3, #6
 80043fe:	22ff      	movs	r2, #255	; 0xff
 8004400:	401a      	ands	r2, r3
 8004402:	1dfb      	adds	r3, r7, #7
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	0018      	movs	r0, r3
 8004408:	2303      	movs	r3, #3
 800440a:	4003      	ands	r3, r0
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004410:	481f      	ldr	r0, [pc, #124]	; (8004490 <__NVIC_SetPriority+0xd4>)
 8004412:	1dfb      	adds	r3, r7, #7
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	b25b      	sxtb	r3, r3
 8004418:	089b      	lsrs	r3, r3, #2
 800441a:	430a      	orrs	r2, r1
 800441c:	33c0      	adds	r3, #192	; 0xc0
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004422:	e031      	b.n	8004488 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004424:	4a1b      	ldr	r2, [pc, #108]	; (8004494 <__NVIC_SetPriority+0xd8>)
 8004426:	1dfb      	adds	r3, r7, #7
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	0019      	movs	r1, r3
 800442c:	230f      	movs	r3, #15
 800442e:	400b      	ands	r3, r1
 8004430:	3b08      	subs	r3, #8
 8004432:	089b      	lsrs	r3, r3, #2
 8004434:	3306      	adds	r3, #6
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	18d3      	adds	r3, r2, r3
 800443a:	3304      	adds	r3, #4
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	1dfa      	adds	r2, r7, #7
 8004440:	7812      	ldrb	r2, [r2, #0]
 8004442:	0011      	movs	r1, r2
 8004444:	2203      	movs	r2, #3
 8004446:	400a      	ands	r2, r1
 8004448:	00d2      	lsls	r2, r2, #3
 800444a:	21ff      	movs	r1, #255	; 0xff
 800444c:	4091      	lsls	r1, r2
 800444e:	000a      	movs	r2, r1
 8004450:	43d2      	mvns	r2, r2
 8004452:	401a      	ands	r2, r3
 8004454:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	019b      	lsls	r3, r3, #6
 800445a:	22ff      	movs	r2, #255	; 0xff
 800445c:	401a      	ands	r2, r3
 800445e:	1dfb      	adds	r3, r7, #7
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	0018      	movs	r0, r3
 8004464:	2303      	movs	r3, #3
 8004466:	4003      	ands	r3, r0
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800446c:	4809      	ldr	r0, [pc, #36]	; (8004494 <__NVIC_SetPriority+0xd8>)
 800446e:	1dfb      	adds	r3, r7, #7
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	001c      	movs	r4, r3
 8004474:	230f      	movs	r3, #15
 8004476:	4023      	ands	r3, r4
 8004478:	3b08      	subs	r3, #8
 800447a:	089b      	lsrs	r3, r3, #2
 800447c:	430a      	orrs	r2, r1
 800447e:	3306      	adds	r3, #6
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	18c3      	adds	r3, r0, r3
 8004484:	3304      	adds	r3, #4
 8004486:	601a      	str	r2, [r3, #0]
}
 8004488:	46c0      	nop			; (mov r8, r8)
 800448a:	46bd      	mov	sp, r7
 800448c:	b003      	add	sp, #12
 800448e:	bd90      	pop	{r4, r7, pc}
 8004490:	e000e100 	.word	0xe000e100
 8004494:	e000ed00 	.word	0xe000ed00

08004498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	1e5a      	subs	r2, r3, #1
 80044a4:	2380      	movs	r3, #128	; 0x80
 80044a6:	045b      	lsls	r3, r3, #17
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d301      	bcc.n	80044b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044ac:	2301      	movs	r3, #1
 80044ae:	e010      	b.n	80044d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044b0:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <SysTick_Config+0x44>)
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	3a01      	subs	r2, #1
 80044b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044b8:	2301      	movs	r3, #1
 80044ba:	425b      	negs	r3, r3
 80044bc:	2103      	movs	r1, #3
 80044be:	0018      	movs	r0, r3
 80044c0:	f7ff ff7c 	bl	80043bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044c4:	4b05      	ldr	r3, [pc, #20]	; (80044dc <SysTick_Config+0x44>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044ca:	4b04      	ldr	r3, [pc, #16]	; (80044dc <SysTick_Config+0x44>)
 80044cc:	2207      	movs	r2, #7
 80044ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	0018      	movs	r0, r3
 80044d4:	46bd      	mov	sp, r7
 80044d6:	b002      	add	sp, #8
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	46c0      	nop			; (mov r8, r8)
 80044dc:	e000e010 	.word	0xe000e010

080044e0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	607a      	str	r2, [r7, #4]
 80044ea:	210f      	movs	r1, #15
 80044ec:	187b      	adds	r3, r7, r1
 80044ee:	1c02      	adds	r2, r0, #0
 80044f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	187b      	adds	r3, r7, r1
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	b25b      	sxtb	r3, r3
 80044fa:	0011      	movs	r1, r2
 80044fc:	0018      	movs	r0, r3
 80044fe:	f7ff ff5d 	bl	80043bc <__NVIC_SetPriority>
}
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	46bd      	mov	sp, r7
 8004506:	b004      	add	sp, #16
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b082      	sub	sp, #8
 800450e:	af00      	add	r7, sp, #0
 8004510:	0002      	movs	r2, r0
 8004512:	1dfb      	adds	r3, r7, #7
 8004514:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004516:	1dfb      	adds	r3, r7, #7
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	b25b      	sxtb	r3, r3
 800451c:	0018      	movs	r0, r3
 800451e:	f7ff ff33 	bl	8004388 <__NVIC_EnableIRQ>
}
 8004522:	46c0      	nop			; (mov r8, r8)
 8004524:	46bd      	mov	sp, r7
 8004526:	b002      	add	sp, #8
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b082      	sub	sp, #8
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	0018      	movs	r0, r3
 8004536:	f7ff ffaf 	bl	8004498 <SysTick_Config>
 800453a:	0003      	movs	r3, r0
}
 800453c:	0018      	movs	r0, r3
 800453e:	46bd      	mov	sp, r7
 8004540:	b002      	add	sp, #8
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e050      	b.n	80045f8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2225      	movs	r2, #37	; 0x25
 800455a:	5c9b      	ldrb	r3, [r3, r2]
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d008      	beq.n	8004574 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2204      	movs	r2, #4
 8004566:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2224      	movs	r2, #36	; 0x24
 800456c:	2100      	movs	r1, #0
 800456e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e041      	b.n	80045f8 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	210e      	movs	r1, #14
 8004580:	438a      	bics	r2, r1
 8004582:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458e:	491c      	ldr	r1, [pc, #112]	; (8004600 <HAL_DMA_Abort+0xbc>)
 8004590:	400a      	ands	r2, r1
 8004592:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2101      	movs	r1, #1
 80045a0:	438a      	bics	r2, r1
 80045a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80045a4:	4b17      	ldr	r3, [pc, #92]	; (8004604 <HAL_DMA_Abort+0xc0>)
 80045a6:	6859      	ldr	r1, [r3, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ac:	221c      	movs	r2, #28
 80045ae:	4013      	ands	r3, r2
 80045b0:	2201      	movs	r2, #1
 80045b2:	409a      	lsls	r2, r3
 80045b4:	4b13      	ldr	r3, [pc, #76]	; (8004604 <HAL_DMA_Abort+0xc0>)
 80045b6:	430a      	orrs	r2, r1
 80045b8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80045c2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00c      	beq.n	80045e6 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d6:	490a      	ldr	r1, [pc, #40]	; (8004600 <HAL_DMA_Abort+0xbc>)
 80045d8:	400a      	ands	r2, r1
 80045da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80045e4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2225      	movs	r2, #37	; 0x25
 80045ea:	2101      	movs	r1, #1
 80045ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2224      	movs	r2, #36	; 0x24
 80045f2:	2100      	movs	r1, #0
 80045f4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	0018      	movs	r0, r3
 80045fa:	46bd      	mov	sp, r7
 80045fc:	b002      	add	sp, #8
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	fffffeff 	.word	0xfffffeff
 8004604:	40020000 	.word	0x40020000

08004608 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004610:	210f      	movs	r1, #15
 8004612:	187b      	adds	r3, r7, r1
 8004614:	2200      	movs	r2, #0
 8004616:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2225      	movs	r2, #37	; 0x25
 800461c:	5c9b      	ldrb	r3, [r3, r2]
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d006      	beq.n	8004632 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2204      	movs	r2, #4
 8004628:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800462a:	187b      	adds	r3, r7, r1
 800462c:	2201      	movs	r2, #1
 800462e:	701a      	strb	r2, [r3, #0]
 8004630:	e049      	b.n	80046c6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	210e      	movs	r1, #14
 800463e:	438a      	bics	r2, r1
 8004640:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2101      	movs	r1, #1
 800464e:	438a      	bics	r2, r1
 8004650:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465c:	491d      	ldr	r1, [pc, #116]	; (80046d4 <HAL_DMA_Abort_IT+0xcc>)
 800465e:	400a      	ands	r2, r1
 8004660:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8004662:	4b1d      	ldr	r3, [pc, #116]	; (80046d8 <HAL_DMA_Abort_IT+0xd0>)
 8004664:	6859      	ldr	r1, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	221c      	movs	r2, #28
 800466c:	4013      	ands	r3, r2
 800466e:	2201      	movs	r2, #1
 8004670:	409a      	lsls	r2, r3
 8004672:	4b19      	ldr	r3, [pc, #100]	; (80046d8 <HAL_DMA_Abort_IT+0xd0>)
 8004674:	430a      	orrs	r2, r1
 8004676:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004680:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00c      	beq.n	80046a4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004694:	490f      	ldr	r1, [pc, #60]	; (80046d4 <HAL_DMA_Abort_IT+0xcc>)
 8004696:	400a      	ands	r2, r1
 8004698:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80046a2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2225      	movs	r2, #37	; 0x25
 80046a8:	2101      	movs	r1, #1
 80046aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2224      	movs	r2, #36	; 0x24
 80046b0:	2100      	movs	r1, #0
 80046b2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d004      	beq.n	80046c6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	0010      	movs	r0, r2
 80046c4:	4798      	blx	r3
    }
  }
  return status;
 80046c6:	230f      	movs	r3, #15
 80046c8:	18fb      	adds	r3, r7, r3
 80046ca:	781b      	ldrb	r3, [r3, #0]
}
 80046cc:	0018      	movs	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b004      	add	sp, #16
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	fffffeff 	.word	0xfffffeff
 80046d8:	40020000 	.word	0x40020000

080046dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046e6:	2300      	movs	r3, #0
 80046e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046ea:	e147      	b.n	800497c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2101      	movs	r1, #1
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	4091      	lsls	r1, r2
 80046f6:	000a      	movs	r2, r1
 80046f8:	4013      	ands	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d100      	bne.n	8004704 <HAL_GPIO_Init+0x28>
 8004702:	e138      	b.n	8004976 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2203      	movs	r2, #3
 800470a:	4013      	ands	r3, r2
 800470c:	2b01      	cmp	r3, #1
 800470e:	d005      	beq.n	800471c <HAL_GPIO_Init+0x40>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2203      	movs	r2, #3
 8004716:	4013      	ands	r3, r2
 8004718:	2b02      	cmp	r3, #2
 800471a:	d130      	bne.n	800477e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	2203      	movs	r2, #3
 8004728:	409a      	lsls	r2, r3
 800472a:	0013      	movs	r3, r2
 800472c:	43da      	mvns	r2, r3
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	4013      	ands	r3, r2
 8004732:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	409a      	lsls	r2, r3
 800473e:	0013      	movs	r3, r2
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4313      	orrs	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004752:	2201      	movs	r2, #1
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	409a      	lsls	r2, r3
 8004758:	0013      	movs	r3, r2
 800475a:	43da      	mvns	r2, r3
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	4013      	ands	r3, r2
 8004760:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	091b      	lsrs	r3, r3, #4
 8004768:	2201      	movs	r2, #1
 800476a:	401a      	ands	r2, r3
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	409a      	lsls	r2, r3
 8004770:	0013      	movs	r3, r2
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2203      	movs	r2, #3
 8004784:	4013      	ands	r3, r2
 8004786:	2b03      	cmp	r3, #3
 8004788:	d017      	beq.n	80047ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	2203      	movs	r2, #3
 8004796:	409a      	lsls	r2, r3
 8004798:	0013      	movs	r3, r2
 800479a:	43da      	mvns	r2, r3
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	4013      	ands	r3, r2
 80047a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	409a      	lsls	r2, r3
 80047ac:	0013      	movs	r3, r2
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2203      	movs	r2, #3
 80047c0:	4013      	ands	r3, r2
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d123      	bne.n	800480e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	08da      	lsrs	r2, r3, #3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3208      	adds	r2, #8
 80047ce:	0092      	lsls	r2, r2, #2
 80047d0:	58d3      	ldr	r3, [r2, r3]
 80047d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	2207      	movs	r2, #7
 80047d8:	4013      	ands	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	220f      	movs	r2, #15
 80047de:	409a      	lsls	r2, r3
 80047e0:	0013      	movs	r3, r2
 80047e2:	43da      	mvns	r2, r3
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	4013      	ands	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	691a      	ldr	r2, [r3, #16]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2107      	movs	r1, #7
 80047f2:	400b      	ands	r3, r1
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	409a      	lsls	r2, r3
 80047f8:	0013      	movs	r3, r2
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	08da      	lsrs	r2, r3, #3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3208      	adds	r2, #8
 8004808:	0092      	lsls	r2, r2, #2
 800480a:	6939      	ldr	r1, [r7, #16]
 800480c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	2203      	movs	r2, #3
 800481a:	409a      	lsls	r2, r3
 800481c:	0013      	movs	r3, r2
 800481e:	43da      	mvns	r2, r3
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	4013      	ands	r3, r2
 8004824:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2203      	movs	r2, #3
 800482c:	401a      	ands	r2, r3
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	409a      	lsls	r2, r3
 8004834:	0013      	movs	r3, r2
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	4313      	orrs	r3, r2
 800483a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	23c0      	movs	r3, #192	; 0xc0
 8004848:	029b      	lsls	r3, r3, #10
 800484a:	4013      	ands	r3, r2
 800484c:	d100      	bne.n	8004850 <HAL_GPIO_Init+0x174>
 800484e:	e092      	b.n	8004976 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004850:	4a50      	ldr	r2, [pc, #320]	; (8004994 <HAL_GPIO_Init+0x2b8>)
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	089b      	lsrs	r3, r3, #2
 8004856:	3318      	adds	r3, #24
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	589b      	ldr	r3, [r3, r2]
 800485c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2203      	movs	r2, #3
 8004862:	4013      	ands	r3, r2
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	220f      	movs	r2, #15
 8004868:	409a      	lsls	r2, r3
 800486a:	0013      	movs	r3, r2
 800486c:	43da      	mvns	r2, r3
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	4013      	ands	r3, r2
 8004872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	23a0      	movs	r3, #160	; 0xa0
 8004878:	05db      	lsls	r3, r3, #23
 800487a:	429a      	cmp	r2, r3
 800487c:	d013      	beq.n	80048a6 <HAL_GPIO_Init+0x1ca>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a45      	ldr	r2, [pc, #276]	; (8004998 <HAL_GPIO_Init+0x2bc>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d00d      	beq.n	80048a2 <HAL_GPIO_Init+0x1c6>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a44      	ldr	r2, [pc, #272]	; (800499c <HAL_GPIO_Init+0x2c0>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d007      	beq.n	800489e <HAL_GPIO_Init+0x1c2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a43      	ldr	r2, [pc, #268]	; (80049a0 <HAL_GPIO_Init+0x2c4>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d101      	bne.n	800489a <HAL_GPIO_Init+0x1be>
 8004896:	2303      	movs	r3, #3
 8004898:	e006      	b.n	80048a8 <HAL_GPIO_Init+0x1cc>
 800489a:	2305      	movs	r3, #5
 800489c:	e004      	b.n	80048a8 <HAL_GPIO_Init+0x1cc>
 800489e:	2302      	movs	r3, #2
 80048a0:	e002      	b.n	80048a8 <HAL_GPIO_Init+0x1cc>
 80048a2:	2301      	movs	r3, #1
 80048a4:	e000      	b.n	80048a8 <HAL_GPIO_Init+0x1cc>
 80048a6:	2300      	movs	r3, #0
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	2103      	movs	r1, #3
 80048ac:	400a      	ands	r2, r1
 80048ae:	00d2      	lsls	r2, r2, #3
 80048b0:	4093      	lsls	r3, r2
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80048b8:	4936      	ldr	r1, [pc, #216]	; (8004994 <HAL_GPIO_Init+0x2b8>)
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	089b      	lsrs	r3, r3, #2
 80048be:	3318      	adds	r3, #24
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80048c6:	4a33      	ldr	r2, [pc, #204]	; (8004994 <HAL_GPIO_Init+0x2b8>)
 80048c8:	2380      	movs	r3, #128	; 0x80
 80048ca:	58d3      	ldr	r3, [r2, r3]
 80048cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	43da      	mvns	r2, r3
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	4013      	ands	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	2380      	movs	r3, #128	; 0x80
 80048de:	025b      	lsls	r3, r3, #9
 80048e0:	4013      	ands	r3, r2
 80048e2:	d003      	beq.n	80048ec <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80048ec:	4929      	ldr	r1, [pc, #164]	; (8004994 <HAL_GPIO_Init+0x2b8>)
 80048ee:	2280      	movs	r2, #128	; 0x80
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80048f4:	4a27      	ldr	r2, [pc, #156]	; (8004994 <HAL_GPIO_Init+0x2b8>)
 80048f6:	2384      	movs	r3, #132	; 0x84
 80048f8:	58d3      	ldr	r3, [r2, r3]
 80048fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	43da      	mvns	r2, r3
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	4013      	ands	r3, r2
 8004904:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	2380      	movs	r3, #128	; 0x80
 800490c:	029b      	lsls	r3, r3, #10
 800490e:	4013      	ands	r3, r2
 8004910:	d003      	beq.n	800491a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4313      	orrs	r3, r2
 8004918:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800491a:	491e      	ldr	r1, [pc, #120]	; (8004994 <HAL_GPIO_Init+0x2b8>)
 800491c:	2284      	movs	r2, #132	; 0x84
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004922:	4b1c      	ldr	r3, [pc, #112]	; (8004994 <HAL_GPIO_Init+0x2b8>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	43da      	mvns	r2, r3
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	4013      	ands	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	2380      	movs	r3, #128	; 0x80
 8004938:	035b      	lsls	r3, r3, #13
 800493a:	4013      	ands	r3, r2
 800493c:	d003      	beq.n	8004946 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004946:	4b13      	ldr	r3, [pc, #76]	; (8004994 <HAL_GPIO_Init+0x2b8>)
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800494c:	4b11      	ldr	r3, [pc, #68]	; (8004994 <HAL_GPIO_Init+0x2b8>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	43da      	mvns	r2, r3
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	4013      	ands	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	2380      	movs	r3, #128	; 0x80
 8004962:	039b      	lsls	r3, r3, #14
 8004964:	4013      	ands	r3, r2
 8004966:	d003      	beq.n	8004970 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004970:	4b08      	ldr	r3, [pc, #32]	; (8004994 <HAL_GPIO_Init+0x2b8>)
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	3301      	adds	r3, #1
 800497a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	40da      	lsrs	r2, r3
 8004984:	1e13      	subs	r3, r2, #0
 8004986:	d000      	beq.n	800498a <HAL_GPIO_Init+0x2ae>
 8004988:	e6b0      	b.n	80046ec <HAL_GPIO_Init+0x10>
  }
}
 800498a:	46c0      	nop			; (mov r8, r8)
 800498c:	46c0      	nop			; (mov r8, r8)
 800498e:	46bd      	mov	sp, r7
 8004990:	b006      	add	sp, #24
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40021800 	.word	0x40021800
 8004998:	50000400 	.word	0x50000400
 800499c:	50000800 	.word	0x50000800
 80049a0:	50000c00 	.word	0x50000c00

080049a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	000a      	movs	r2, r1
 80049ae:	1cbb      	adds	r3, r7, #2
 80049b0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	1cba      	adds	r2, r7, #2
 80049b8:	8812      	ldrh	r2, [r2, #0]
 80049ba:	4013      	ands	r3, r2
 80049bc:	d004      	beq.n	80049c8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80049be:	230f      	movs	r3, #15
 80049c0:	18fb      	adds	r3, r7, r3
 80049c2:	2201      	movs	r2, #1
 80049c4:	701a      	strb	r2, [r3, #0]
 80049c6:	e003      	b.n	80049d0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049c8:	230f      	movs	r3, #15
 80049ca:	18fb      	adds	r3, r7, r3
 80049cc:	2200      	movs	r2, #0
 80049ce:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80049d0:	230f      	movs	r3, #15
 80049d2:	18fb      	adds	r3, r7, r3
 80049d4:	781b      	ldrb	r3, [r3, #0]
}
 80049d6:	0018      	movs	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	b004      	add	sp, #16
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b082      	sub	sp, #8
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	0008      	movs	r0, r1
 80049e8:	0011      	movs	r1, r2
 80049ea:	1cbb      	adds	r3, r7, #2
 80049ec:	1c02      	adds	r2, r0, #0
 80049ee:	801a      	strh	r2, [r3, #0]
 80049f0:	1c7b      	adds	r3, r7, #1
 80049f2:	1c0a      	adds	r2, r1, #0
 80049f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049f6:	1c7b      	adds	r3, r7, #1
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d004      	beq.n	8004a08 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049fe:	1cbb      	adds	r3, r7, #2
 8004a00:	881a      	ldrh	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a06:	e003      	b.n	8004a10 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a08:	1cbb      	adds	r3, r7, #2
 8004a0a:	881a      	ldrh	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a10:	46c0      	nop			; (mov r8, r8)
 8004a12:	46bd      	mov	sp, r7
 8004a14:	b002      	add	sp, #8
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	000a      	movs	r2, r1
 8004a22:	1cbb      	adds	r3, r7, #2
 8004a24:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a2c:	1cbb      	adds	r3, r7, #2
 8004a2e:	881b      	ldrh	r3, [r3, #0]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4013      	ands	r3, r2
 8004a34:	041a      	lsls	r2, r3, #16
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	43db      	mvns	r3, r3
 8004a3a:	1cb9      	adds	r1, r7, #2
 8004a3c:	8809      	ldrh	r1, [r1, #0]
 8004a3e:	400b      	ands	r3, r1
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	619a      	str	r2, [r3, #24]
}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	b004      	add	sp, #16
 8004a4c:	bd80      	pop	{r7, pc}
	...

08004a50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	0002      	movs	r2, r0
 8004a58:	1dbb      	adds	r3, r7, #6
 8004a5a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004a5c:	4b10      	ldr	r3, [pc, #64]	; (8004aa0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	1dba      	adds	r2, r7, #6
 8004a62:	8812      	ldrh	r2, [r2, #0]
 8004a64:	4013      	ands	r3, r2
 8004a66:	d008      	beq.n	8004a7a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004a68:	4b0d      	ldr	r3, [pc, #52]	; (8004aa0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004a6a:	1dba      	adds	r2, r7, #6
 8004a6c:	8812      	ldrh	r2, [r2, #0]
 8004a6e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004a70:	1dbb      	adds	r3, r7, #6
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	0018      	movs	r0, r3
 8004a76:	f7fc fead 	bl	80017d4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004a7a:	4b09      	ldr	r3, [pc, #36]	; (8004aa0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	1dba      	adds	r2, r7, #6
 8004a80:	8812      	ldrh	r2, [r2, #0]
 8004a82:	4013      	ands	r3, r2
 8004a84:	d008      	beq.n	8004a98 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004a86:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004a88:	1dba      	adds	r2, r7, #6
 8004a8a:	8812      	ldrh	r2, [r2, #0]
 8004a8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004a8e:	1dbb      	adds	r3, r7, #6
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	0018      	movs	r0, r3
 8004a94:	f000 f806 	bl	8004aa4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004a98:	46c0      	nop			; (mov r8, r8)
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	b002      	add	sp, #8
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40021800 	.word	0x40021800

08004aa4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	0002      	movs	r2, r0
 8004aac:	1dbb      	adds	r3, r7, #6
 8004aae:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004ab0:	46c0      	nop			; (mov r8, r8)
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	b002      	add	sp, #8
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004ac0:	4b19      	ldr	r3, [pc, #100]	; (8004b28 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a19      	ldr	r2, [pc, #100]	; (8004b2c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	0019      	movs	r1, r3
 8004aca:	4b17      	ldr	r3, [pc, #92]	; (8004b28 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	2380      	movs	r3, #128	; 0x80
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d11f      	bne.n	8004b1c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004adc:	4b14      	ldr	r3, [pc, #80]	; (8004b30 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	0013      	movs	r3, r2
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	189b      	adds	r3, r3, r2
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	4912      	ldr	r1, [pc, #72]	; (8004b34 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004aea:	0018      	movs	r0, r3
 8004aec:	f7fb fb1e 	bl	800012c <__udivsi3>
 8004af0:	0003      	movs	r3, r0
 8004af2:	3301      	adds	r3, #1
 8004af4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004af6:	e008      	b.n	8004b0a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3b01      	subs	r3, #1
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	e001      	b.n	8004b0a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e009      	b.n	8004b1e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b0a:	4b07      	ldr	r3, [pc, #28]	; (8004b28 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004b0c:	695a      	ldr	r2, [r3, #20]
 8004b0e:	2380      	movs	r3, #128	; 0x80
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	401a      	ands	r2, r3
 8004b14:	2380      	movs	r3, #128	; 0x80
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d0ed      	beq.n	8004af8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	0018      	movs	r0, r3
 8004b20:	46bd      	mov	sp, r7
 8004b22:	b004      	add	sp, #16
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	40007000 	.word	0x40007000
 8004b2c:	fffff9ff 	.word	0xfffff9ff
 8004b30:	20000000 	.word	0x20000000
 8004b34:	000f4240 	.word	0x000f4240

08004b38 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004b3c:	4b03      	ldr	r3, [pc, #12]	; (8004b4c <LL_RCC_GetAPB1Prescaler+0x14>)
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	23e0      	movs	r3, #224	; 0xe0
 8004b42:	01db      	lsls	r3, r3, #7
 8004b44:	4013      	ands	r3, r2
}
 8004b46:	0018      	movs	r0, r3
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	40021000 	.word	0x40021000

08004b50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b088      	sub	sp, #32
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e304      	b.n	800516c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2201      	movs	r2, #1
 8004b68:	4013      	ands	r3, r2
 8004b6a:	d100      	bne.n	8004b6e <HAL_RCC_OscConfig+0x1e>
 8004b6c:	e07c      	b.n	8004c68 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b6e:	4bc3      	ldr	r3, [pc, #780]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	2238      	movs	r2, #56	; 0x38
 8004b74:	4013      	ands	r3, r2
 8004b76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b78:	4bc0      	ldr	r3, [pc, #768]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	2203      	movs	r2, #3
 8004b7e:	4013      	ands	r3, r2
 8004b80:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	2b10      	cmp	r3, #16
 8004b86:	d102      	bne.n	8004b8e <HAL_RCC_OscConfig+0x3e>
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	d002      	beq.n	8004b94 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d10b      	bne.n	8004bac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b94:	4bb9      	ldr	r3, [pc, #740]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	2380      	movs	r3, #128	; 0x80
 8004b9a:	029b      	lsls	r3, r3, #10
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	d062      	beq.n	8004c66 <HAL_RCC_OscConfig+0x116>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d15e      	bne.n	8004c66 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e2df      	b.n	800516c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	2380      	movs	r3, #128	; 0x80
 8004bb2:	025b      	lsls	r3, r3, #9
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d107      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x78>
 8004bb8:	4bb0      	ldr	r3, [pc, #704]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	4baf      	ldr	r3, [pc, #700]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004bbe:	2180      	movs	r1, #128	; 0x80
 8004bc0:	0249      	lsls	r1, r1, #9
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	e020      	b.n	8004c0a <HAL_RCC_OscConfig+0xba>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	23a0      	movs	r3, #160	; 0xa0
 8004bce:	02db      	lsls	r3, r3, #11
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d10e      	bne.n	8004bf2 <HAL_RCC_OscConfig+0xa2>
 8004bd4:	4ba9      	ldr	r3, [pc, #676]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	4ba8      	ldr	r3, [pc, #672]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004bda:	2180      	movs	r1, #128	; 0x80
 8004bdc:	02c9      	lsls	r1, r1, #11
 8004bde:	430a      	orrs	r2, r1
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	4ba6      	ldr	r3, [pc, #664]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	4ba5      	ldr	r3, [pc, #660]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004be8:	2180      	movs	r1, #128	; 0x80
 8004bea:	0249      	lsls	r1, r1, #9
 8004bec:	430a      	orrs	r2, r1
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	e00b      	b.n	8004c0a <HAL_RCC_OscConfig+0xba>
 8004bf2:	4ba2      	ldr	r3, [pc, #648]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	4ba1      	ldr	r3, [pc, #644]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004bf8:	49a1      	ldr	r1, [pc, #644]	; (8004e80 <HAL_RCC_OscConfig+0x330>)
 8004bfa:	400a      	ands	r2, r1
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	4b9f      	ldr	r3, [pc, #636]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	4b9e      	ldr	r3, [pc, #632]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004c04:	499f      	ldr	r1, [pc, #636]	; (8004e84 <HAL_RCC_OscConfig+0x334>)
 8004c06:	400a      	ands	r2, r1
 8004c08:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d014      	beq.n	8004c3c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c12:	f7fe fed7 	bl	80039c4 <HAL_GetTick>
 8004c16:	0003      	movs	r3, r0
 8004c18:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c1c:	f7fe fed2 	bl	80039c4 <HAL_GetTick>
 8004c20:	0002      	movs	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b64      	cmp	r3, #100	; 0x64
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e29e      	b.n	800516c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c2e:	4b93      	ldr	r3, [pc, #588]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	2380      	movs	r3, #128	; 0x80
 8004c34:	029b      	lsls	r3, r3, #10
 8004c36:	4013      	ands	r3, r2
 8004c38:	d0f0      	beq.n	8004c1c <HAL_RCC_OscConfig+0xcc>
 8004c3a:	e015      	b.n	8004c68 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3c:	f7fe fec2 	bl	80039c4 <HAL_GetTick>
 8004c40:	0003      	movs	r3, r0
 8004c42:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c44:	e008      	b.n	8004c58 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c46:	f7fe febd 	bl	80039c4 <HAL_GetTick>
 8004c4a:	0002      	movs	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b64      	cmp	r3, #100	; 0x64
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e289      	b.n	800516c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c58:	4b88      	ldr	r3, [pc, #544]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	2380      	movs	r3, #128	; 0x80
 8004c5e:	029b      	lsls	r3, r3, #10
 8004c60:	4013      	ands	r3, r2
 8004c62:	d1f0      	bne.n	8004c46 <HAL_RCC_OscConfig+0xf6>
 8004c64:	e000      	b.n	8004c68 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c66:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	4013      	ands	r3, r2
 8004c70:	d100      	bne.n	8004c74 <HAL_RCC_OscConfig+0x124>
 8004c72:	e099      	b.n	8004da8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c74:	4b81      	ldr	r3, [pc, #516]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	2238      	movs	r2, #56	; 0x38
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c7e:	4b7f      	ldr	r3, [pc, #508]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	2203      	movs	r2, #3
 8004c84:	4013      	ands	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	2b10      	cmp	r3, #16
 8004c8c:	d102      	bne.n	8004c94 <HAL_RCC_OscConfig+0x144>
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d002      	beq.n	8004c9a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d135      	bne.n	8004d06 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c9a:	4b78      	ldr	r3, [pc, #480]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	2380      	movs	r3, #128	; 0x80
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	d005      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x162>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e25c      	b.n	800516c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb2:	4b72      	ldr	r3, [pc, #456]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	4a74      	ldr	r2, [pc, #464]	; (8004e88 <HAL_RCC_OscConfig+0x338>)
 8004cb8:	4013      	ands	r3, r2
 8004cba:	0019      	movs	r1, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	021a      	lsls	r2, r3, #8
 8004cc2:	4b6e      	ldr	r3, [pc, #440]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d112      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004cce:	4b6b      	ldr	r3, [pc, #428]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a6e      	ldr	r2, [pc, #440]	; (8004e8c <HAL_RCC_OscConfig+0x33c>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	0019      	movs	r1, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691a      	ldr	r2, [r3, #16]
 8004cdc:	4b67      	ldr	r3, [pc, #412]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004ce2:	4b66      	ldr	r3, [pc, #408]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	0adb      	lsrs	r3, r3, #11
 8004ce8:	2207      	movs	r2, #7
 8004cea:	4013      	ands	r3, r2
 8004cec:	4a68      	ldr	r2, [pc, #416]	; (8004e90 <HAL_RCC_OscConfig+0x340>)
 8004cee:	40da      	lsrs	r2, r3
 8004cf0:	4b68      	ldr	r3, [pc, #416]	; (8004e94 <HAL_RCC_OscConfig+0x344>)
 8004cf2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004cf4:	4b68      	ldr	r3, [pc, #416]	; (8004e98 <HAL_RCC_OscConfig+0x348>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	f7fe fe07 	bl	800390c <HAL_InitTick>
 8004cfe:	1e03      	subs	r3, r0, #0
 8004d00:	d051      	beq.n	8004da6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e232      	b.n	800516c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d030      	beq.n	8004d70 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004d0e:	4b5b      	ldr	r3, [pc, #364]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a5e      	ldr	r2, [pc, #376]	; (8004e8c <HAL_RCC_OscConfig+0x33c>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	0019      	movs	r1, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	4b57      	ldr	r3, [pc, #348]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004d22:	4b56      	ldr	r3, [pc, #344]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	4b55      	ldr	r3, [pc, #340]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004d28:	2180      	movs	r1, #128	; 0x80
 8004d2a:	0049      	lsls	r1, r1, #1
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d30:	f7fe fe48 	bl	80039c4 <HAL_GetTick>
 8004d34:	0003      	movs	r3, r0
 8004d36:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d3a:	f7fe fe43 	bl	80039c4 <HAL_GetTick>
 8004d3e:	0002      	movs	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e20f      	b.n	800516c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d4c:	4b4b      	ldr	r3, [pc, #300]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	2380      	movs	r3, #128	; 0x80
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	4013      	ands	r3, r2
 8004d56:	d0f0      	beq.n	8004d3a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d58:	4b48      	ldr	r3, [pc, #288]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	4a4a      	ldr	r2, [pc, #296]	; (8004e88 <HAL_RCC_OscConfig+0x338>)
 8004d5e:	4013      	ands	r3, r2
 8004d60:	0019      	movs	r1, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	021a      	lsls	r2, r3, #8
 8004d68:	4b44      	ldr	r3, [pc, #272]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	605a      	str	r2, [r3, #4]
 8004d6e:	e01b      	b.n	8004da8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004d70:	4b42      	ldr	r3, [pc, #264]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	4b41      	ldr	r3, [pc, #260]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004d76:	4949      	ldr	r1, [pc, #292]	; (8004e9c <HAL_RCC_OscConfig+0x34c>)
 8004d78:	400a      	ands	r2, r1
 8004d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7c:	f7fe fe22 	bl	80039c4 <HAL_GetTick>
 8004d80:	0003      	movs	r3, r0
 8004d82:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d86:	f7fe fe1d 	bl	80039c4 <HAL_GetTick>
 8004d8a:	0002      	movs	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e1e9      	b.n	800516c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d98:	4b38      	ldr	r3, [pc, #224]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	2380      	movs	r3, #128	; 0x80
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	4013      	ands	r3, r2
 8004da2:	d1f0      	bne.n	8004d86 <HAL_RCC_OscConfig+0x236>
 8004da4:	e000      	b.n	8004da8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004da6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2208      	movs	r2, #8
 8004dae:	4013      	ands	r3, r2
 8004db0:	d047      	beq.n	8004e42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004db2:	4b32      	ldr	r3, [pc, #200]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	2238      	movs	r2, #56	; 0x38
 8004db8:	4013      	ands	r3, r2
 8004dba:	2b18      	cmp	r3, #24
 8004dbc:	d10a      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004dbe:	4b2f      	ldr	r3, [pc, #188]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	d03c      	beq.n	8004e42 <HAL_RCC_OscConfig+0x2f2>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d138      	bne.n	8004e42 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e1cb      	b.n	800516c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d019      	beq.n	8004e10 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004ddc:	4b27      	ldr	r3, [pc, #156]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004dde:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004de0:	4b26      	ldr	r3, [pc, #152]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004de2:	2101      	movs	r1, #1
 8004de4:	430a      	orrs	r2, r1
 8004de6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de8:	f7fe fdec 	bl	80039c4 <HAL_GetTick>
 8004dec:	0003      	movs	r3, r0
 8004dee:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004df0:	e008      	b.n	8004e04 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004df2:	f7fe fde7 	bl	80039c4 <HAL_GetTick>
 8004df6:	0002      	movs	r2, r0
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e1b3      	b.n	800516c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e04:	4b1d      	ldr	r3, [pc, #116]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e08:	2202      	movs	r2, #2
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	d0f1      	beq.n	8004df2 <HAL_RCC_OscConfig+0x2a2>
 8004e0e:	e018      	b.n	8004e42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004e10:	4b1a      	ldr	r3, [pc, #104]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004e12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004e14:	4b19      	ldr	r3, [pc, #100]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004e16:	2101      	movs	r1, #1
 8004e18:	438a      	bics	r2, r1
 8004e1a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1c:	f7fe fdd2 	bl	80039c4 <HAL_GetTick>
 8004e20:	0003      	movs	r3, r0
 8004e22:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e26:	f7fe fdcd 	bl	80039c4 <HAL_GetTick>
 8004e2a:	0002      	movs	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e199      	b.n	800516c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e38:	4b10      	ldr	r3, [pc, #64]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	4013      	ands	r3, r2
 8004e40:	d1f1      	bne.n	8004e26 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2204      	movs	r2, #4
 8004e48:	4013      	ands	r3, r2
 8004e4a:	d100      	bne.n	8004e4e <HAL_RCC_OscConfig+0x2fe>
 8004e4c:	e0c6      	b.n	8004fdc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e4e:	231f      	movs	r3, #31
 8004e50:	18fb      	adds	r3, r7, r3
 8004e52:	2200      	movs	r2, #0
 8004e54:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004e56:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	2238      	movs	r2, #56	; 0x38
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	2b20      	cmp	r3, #32
 8004e60:	d11e      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004e62:	4b06      	ldr	r3, [pc, #24]	; (8004e7c <HAL_RCC_OscConfig+0x32c>)
 8004e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e66:	2202      	movs	r2, #2
 8004e68:	4013      	ands	r3, r2
 8004e6a:	d100      	bne.n	8004e6e <HAL_RCC_OscConfig+0x31e>
 8004e6c:	e0b6      	b.n	8004fdc <HAL_RCC_OscConfig+0x48c>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d000      	beq.n	8004e78 <HAL_RCC_OscConfig+0x328>
 8004e76:	e0b1      	b.n	8004fdc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e177      	b.n	800516c <HAL_RCC_OscConfig+0x61c>
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	fffeffff 	.word	0xfffeffff
 8004e84:	fffbffff 	.word	0xfffbffff
 8004e88:	ffff80ff 	.word	0xffff80ff
 8004e8c:	ffffc7ff 	.word	0xffffc7ff
 8004e90:	00f42400 	.word	0x00f42400
 8004e94:	20000000 	.word	0x20000000
 8004e98:	20000004 	.word	0x20000004
 8004e9c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ea0:	4bb4      	ldr	r3, [pc, #720]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 8004ea2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ea4:	2380      	movs	r3, #128	; 0x80
 8004ea6:	055b      	lsls	r3, r3, #21
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	d101      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x360>
 8004eac:	2301      	movs	r3, #1
 8004eae:	e000      	b.n	8004eb2 <HAL_RCC_OscConfig+0x362>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d011      	beq.n	8004eda <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004eb6:	4baf      	ldr	r3, [pc, #700]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 8004eb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eba:	4bae      	ldr	r3, [pc, #696]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 8004ebc:	2180      	movs	r1, #128	; 0x80
 8004ebe:	0549      	lsls	r1, r1, #21
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	63da      	str	r2, [r3, #60]	; 0x3c
 8004ec4:	4bab      	ldr	r3, [pc, #684]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 8004ec6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ec8:	2380      	movs	r3, #128	; 0x80
 8004eca:	055b      	lsls	r3, r3, #21
 8004ecc:	4013      	ands	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004ed2:	231f      	movs	r3, #31
 8004ed4:	18fb      	adds	r3, r7, r3
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004eda:	4ba7      	ldr	r3, [pc, #668]	; (8005178 <HAL_RCC_OscConfig+0x628>)
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	2380      	movs	r3, #128	; 0x80
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	d11a      	bne.n	8004f1c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ee6:	4ba4      	ldr	r3, [pc, #656]	; (8005178 <HAL_RCC_OscConfig+0x628>)
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	4ba3      	ldr	r3, [pc, #652]	; (8005178 <HAL_RCC_OscConfig+0x628>)
 8004eec:	2180      	movs	r1, #128	; 0x80
 8004eee:	0049      	lsls	r1, r1, #1
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004ef4:	f7fe fd66 	bl	80039c4 <HAL_GetTick>
 8004ef8:	0003      	movs	r3, r0
 8004efa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004efc:	e008      	b.n	8004f10 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004efe:	f7fe fd61 	bl	80039c4 <HAL_GetTick>
 8004f02:	0002      	movs	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e12d      	b.n	800516c <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f10:	4b99      	ldr	r3, [pc, #612]	; (8005178 <HAL_RCC_OscConfig+0x628>)
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	2380      	movs	r3, #128	; 0x80
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	4013      	ands	r3, r2
 8004f1a:	d0f0      	beq.n	8004efe <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d106      	bne.n	8004f32 <HAL_RCC_OscConfig+0x3e2>
 8004f24:	4b93      	ldr	r3, [pc, #588]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 8004f26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f28:	4b92      	ldr	r3, [pc, #584]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f30:	e01c      	b.n	8004f6c <HAL_RCC_OscConfig+0x41c>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	2b05      	cmp	r3, #5
 8004f38:	d10c      	bne.n	8004f54 <HAL_RCC_OscConfig+0x404>
 8004f3a:	4b8e      	ldr	r3, [pc, #568]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 8004f3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f3e:	4b8d      	ldr	r3, [pc, #564]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 8004f40:	2104      	movs	r1, #4
 8004f42:	430a      	orrs	r2, r1
 8004f44:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f46:	4b8b      	ldr	r3, [pc, #556]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 8004f48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f4a:	4b8a      	ldr	r3, [pc, #552]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f52:	e00b      	b.n	8004f6c <HAL_RCC_OscConfig+0x41c>
 8004f54:	4b87      	ldr	r3, [pc, #540]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 8004f56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f58:	4b86      	ldr	r3, [pc, #536]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	438a      	bics	r2, r1
 8004f5e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f60:	4b84      	ldr	r3, [pc, #528]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 8004f62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f64:	4b83      	ldr	r3, [pc, #524]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 8004f66:	2104      	movs	r1, #4
 8004f68:	438a      	bics	r2, r1
 8004f6a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d014      	beq.n	8004f9e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f74:	f7fe fd26 	bl	80039c4 <HAL_GetTick>
 8004f78:	0003      	movs	r3, r0
 8004f7a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f7c:	e009      	b.n	8004f92 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f7e:	f7fe fd21 	bl	80039c4 <HAL_GetTick>
 8004f82:	0002      	movs	r2, r0
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	4a7c      	ldr	r2, [pc, #496]	; (800517c <HAL_RCC_OscConfig+0x62c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e0ec      	b.n	800516c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f92:	4b78      	ldr	r3, [pc, #480]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 8004f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f96:	2202      	movs	r2, #2
 8004f98:	4013      	ands	r3, r2
 8004f9a:	d0f0      	beq.n	8004f7e <HAL_RCC_OscConfig+0x42e>
 8004f9c:	e013      	b.n	8004fc6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9e:	f7fe fd11 	bl	80039c4 <HAL_GetTick>
 8004fa2:	0003      	movs	r3, r0
 8004fa4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fa6:	e009      	b.n	8004fbc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fa8:	f7fe fd0c 	bl	80039c4 <HAL_GetTick>
 8004fac:	0002      	movs	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	4a72      	ldr	r2, [pc, #456]	; (800517c <HAL_RCC_OscConfig+0x62c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e0d7      	b.n	800516c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fbc:	4b6d      	ldr	r3, [pc, #436]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 8004fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc0:	2202      	movs	r2, #2
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	d1f0      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004fc6:	231f      	movs	r3, #31
 8004fc8:	18fb      	adds	r3, r7, r3
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d105      	bne.n	8004fdc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004fd0:	4b68      	ldr	r3, [pc, #416]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 8004fd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fd4:	4b67      	ldr	r3, [pc, #412]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 8004fd6:	496a      	ldr	r1, [pc, #424]	; (8005180 <HAL_RCC_OscConfig+0x630>)
 8004fd8:	400a      	ands	r2, r1
 8004fda:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d100      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x496>
 8004fe4:	e0c1      	b.n	800516a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fe6:	4b63      	ldr	r3, [pc, #396]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	2238      	movs	r2, #56	; 0x38
 8004fec:	4013      	ands	r3, r2
 8004fee:	2b10      	cmp	r3, #16
 8004ff0:	d100      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x4a4>
 8004ff2:	e081      	b.n	80050f8 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d156      	bne.n	80050aa <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ffc:	4b5d      	ldr	r3, [pc, #372]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	4b5c      	ldr	r3, [pc, #368]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 8005002:	4960      	ldr	r1, [pc, #384]	; (8005184 <HAL_RCC_OscConfig+0x634>)
 8005004:	400a      	ands	r2, r1
 8005006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005008:	f7fe fcdc 	bl	80039c4 <HAL_GetTick>
 800500c:	0003      	movs	r3, r0
 800500e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005010:	e008      	b.n	8005024 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005012:	f7fe fcd7 	bl	80039c4 <HAL_GetTick>
 8005016:	0002      	movs	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e0a3      	b.n	800516c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005024:	4b53      	ldr	r3, [pc, #332]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	2380      	movs	r3, #128	; 0x80
 800502a:	049b      	lsls	r3, r3, #18
 800502c:	4013      	ands	r3, r2
 800502e:	d1f0      	bne.n	8005012 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005030:	4b50      	ldr	r3, [pc, #320]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	4a54      	ldr	r2, [pc, #336]	; (8005188 <HAL_RCC_OscConfig+0x638>)
 8005036:	4013      	ands	r3, r2
 8005038:	0019      	movs	r1, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1a      	ldr	r2, [r3, #32]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005048:	021b      	lsls	r3, r3, #8
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005050:	431a      	orrs	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505c:	431a      	orrs	r2, r3
 800505e:	4b45      	ldr	r3, [pc, #276]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 8005060:	430a      	orrs	r2, r1
 8005062:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005064:	4b43      	ldr	r3, [pc, #268]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	4b42      	ldr	r3, [pc, #264]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 800506a:	2180      	movs	r1, #128	; 0x80
 800506c:	0449      	lsls	r1, r1, #17
 800506e:	430a      	orrs	r2, r1
 8005070:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005072:	4b40      	ldr	r3, [pc, #256]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	4b3f      	ldr	r3, [pc, #252]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 8005078:	2180      	movs	r1, #128	; 0x80
 800507a:	0549      	lsls	r1, r1, #21
 800507c:	430a      	orrs	r2, r1
 800507e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005080:	f7fe fca0 	bl	80039c4 <HAL_GetTick>
 8005084:	0003      	movs	r3, r0
 8005086:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005088:	e008      	b.n	800509c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800508a:	f7fe fc9b 	bl	80039c4 <HAL_GetTick>
 800508e:	0002      	movs	r2, r0
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e067      	b.n	800516c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800509c:	4b35      	ldr	r3, [pc, #212]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	2380      	movs	r3, #128	; 0x80
 80050a2:	049b      	lsls	r3, r3, #18
 80050a4:	4013      	ands	r3, r2
 80050a6:	d0f0      	beq.n	800508a <HAL_RCC_OscConfig+0x53a>
 80050a8:	e05f      	b.n	800516a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050aa:	4b32      	ldr	r3, [pc, #200]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	4b31      	ldr	r3, [pc, #196]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 80050b0:	4934      	ldr	r1, [pc, #208]	; (8005184 <HAL_RCC_OscConfig+0x634>)
 80050b2:	400a      	ands	r2, r1
 80050b4:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80050b6:	4b2f      	ldr	r3, [pc, #188]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	4b2e      	ldr	r3, [pc, #184]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 80050bc:	2103      	movs	r1, #3
 80050be:	438a      	bics	r2, r1
 80050c0:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80050c2:	4b2c      	ldr	r3, [pc, #176]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	4b2b      	ldr	r3, [pc, #172]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 80050c8:	4930      	ldr	r1, [pc, #192]	; (800518c <HAL_RCC_OscConfig+0x63c>)
 80050ca:	400a      	ands	r2, r1
 80050cc:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ce:	f7fe fc79 	bl	80039c4 <HAL_GetTick>
 80050d2:	0003      	movs	r3, r0
 80050d4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050d8:	f7fe fc74 	bl	80039c4 <HAL_GetTick>
 80050dc:	0002      	movs	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e040      	b.n	800516c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050ea:	4b22      	ldr	r3, [pc, #136]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	2380      	movs	r3, #128	; 0x80
 80050f0:	049b      	lsls	r3, r3, #18
 80050f2:	4013      	ands	r3, r2
 80050f4:	d1f0      	bne.n	80050d8 <HAL_RCC_OscConfig+0x588>
 80050f6:	e038      	b.n	800516a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	69db      	ldr	r3, [r3, #28]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d101      	bne.n	8005104 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e033      	b.n	800516c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005104:	4b1b      	ldr	r3, [pc, #108]	; (8005174 <HAL_RCC_OscConfig+0x624>)
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2203      	movs	r2, #3
 800510e:	401a      	ands	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	429a      	cmp	r2, r3
 8005116:	d126      	bne.n	8005166 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	2270      	movs	r2, #112	; 0x70
 800511c:	401a      	ands	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005122:	429a      	cmp	r2, r3
 8005124:	d11f      	bne.n	8005166 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	23fe      	movs	r3, #254	; 0xfe
 800512a:	01db      	lsls	r3, r3, #7
 800512c:	401a      	ands	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005132:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005134:	429a      	cmp	r2, r3
 8005136:	d116      	bne.n	8005166 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	23f8      	movs	r3, #248	; 0xf8
 800513c:	039b      	lsls	r3, r3, #14
 800513e:	401a      	ands	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005144:	429a      	cmp	r2, r3
 8005146:	d10e      	bne.n	8005166 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	23e0      	movs	r3, #224	; 0xe0
 800514c:	051b      	lsls	r3, r3, #20
 800514e:	401a      	ands	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005154:	429a      	cmp	r2, r3
 8005156:	d106      	bne.n	8005166 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	0f5b      	lsrs	r3, r3, #29
 800515c:	075a      	lsls	r2, r3, #29
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005162:	429a      	cmp	r2, r3
 8005164:	d001      	beq.n	800516a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e000      	b.n	800516c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	0018      	movs	r0, r3
 800516e:	46bd      	mov	sp, r7
 8005170:	b008      	add	sp, #32
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40021000 	.word	0x40021000
 8005178:	40007000 	.word	0x40007000
 800517c:	00001388 	.word	0x00001388
 8005180:	efffffff 	.word	0xefffffff
 8005184:	feffffff 	.word	0xfeffffff
 8005188:	11c1808c 	.word	0x11c1808c
 800518c:	eefeffff 	.word	0xeefeffff

08005190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e0e9      	b.n	8005378 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051a4:	4b76      	ldr	r3, [pc, #472]	; (8005380 <HAL_RCC_ClockConfig+0x1f0>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2207      	movs	r2, #7
 80051aa:	4013      	ands	r3, r2
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d91e      	bls.n	80051f0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b2:	4b73      	ldr	r3, [pc, #460]	; (8005380 <HAL_RCC_ClockConfig+0x1f0>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2207      	movs	r2, #7
 80051b8:	4393      	bics	r3, r2
 80051ba:	0019      	movs	r1, r3
 80051bc:	4b70      	ldr	r3, [pc, #448]	; (8005380 <HAL_RCC_ClockConfig+0x1f0>)
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80051c4:	f7fe fbfe 	bl	80039c4 <HAL_GetTick>
 80051c8:	0003      	movs	r3, r0
 80051ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80051cc:	e009      	b.n	80051e2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ce:	f7fe fbf9 	bl	80039c4 <HAL_GetTick>
 80051d2:	0002      	movs	r2, r0
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	4a6a      	ldr	r2, [pc, #424]	; (8005384 <HAL_RCC_ClockConfig+0x1f4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e0ca      	b.n	8005378 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80051e2:	4b67      	ldr	r3, [pc, #412]	; (8005380 <HAL_RCC_ClockConfig+0x1f0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2207      	movs	r2, #7
 80051e8:	4013      	ands	r3, r2
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d1ee      	bne.n	80051ce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2202      	movs	r2, #2
 80051f6:	4013      	ands	r3, r2
 80051f8:	d015      	beq.n	8005226 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2204      	movs	r2, #4
 8005200:	4013      	ands	r3, r2
 8005202:	d006      	beq.n	8005212 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005204:	4b60      	ldr	r3, [pc, #384]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	4b5f      	ldr	r3, [pc, #380]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 800520a:	21e0      	movs	r1, #224	; 0xe0
 800520c:	01c9      	lsls	r1, r1, #7
 800520e:	430a      	orrs	r2, r1
 8005210:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005212:	4b5d      	ldr	r3, [pc, #372]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	4a5d      	ldr	r2, [pc, #372]	; (800538c <HAL_RCC_ClockConfig+0x1fc>)
 8005218:	4013      	ands	r3, r2
 800521a:	0019      	movs	r1, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	4b59      	ldr	r3, [pc, #356]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 8005222:	430a      	orrs	r2, r1
 8005224:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2201      	movs	r2, #1
 800522c:	4013      	ands	r3, r2
 800522e:	d057      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d107      	bne.n	8005248 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005238:	4b53      	ldr	r3, [pc, #332]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	2380      	movs	r3, #128	; 0x80
 800523e:	029b      	lsls	r3, r3, #10
 8005240:	4013      	ands	r3, r2
 8005242:	d12b      	bne.n	800529c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e097      	b.n	8005378 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2b02      	cmp	r3, #2
 800524e:	d107      	bne.n	8005260 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005250:	4b4d      	ldr	r3, [pc, #308]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	2380      	movs	r3, #128	; 0x80
 8005256:	049b      	lsls	r3, r3, #18
 8005258:	4013      	ands	r3, r2
 800525a:	d11f      	bne.n	800529c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e08b      	b.n	8005378 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d107      	bne.n	8005278 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005268:	4b47      	ldr	r3, [pc, #284]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	2380      	movs	r3, #128	; 0x80
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	4013      	ands	r3, r2
 8005272:	d113      	bne.n	800529c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e07f      	b.n	8005378 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	2b03      	cmp	r3, #3
 800527e:	d106      	bne.n	800528e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005280:	4b41      	ldr	r3, [pc, #260]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 8005282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005284:	2202      	movs	r2, #2
 8005286:	4013      	ands	r3, r2
 8005288:	d108      	bne.n	800529c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e074      	b.n	8005378 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800528e:	4b3e      	ldr	r3, [pc, #248]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 8005290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005292:	2202      	movs	r2, #2
 8005294:	4013      	ands	r3, r2
 8005296:	d101      	bne.n	800529c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e06d      	b.n	8005378 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800529c:	4b3a      	ldr	r3, [pc, #232]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	2207      	movs	r2, #7
 80052a2:	4393      	bics	r3, r2
 80052a4:	0019      	movs	r1, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	4b37      	ldr	r3, [pc, #220]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 80052ac:	430a      	orrs	r2, r1
 80052ae:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b0:	f7fe fb88 	bl	80039c4 <HAL_GetTick>
 80052b4:	0003      	movs	r3, r0
 80052b6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b8:	e009      	b.n	80052ce <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ba:	f7fe fb83 	bl	80039c4 <HAL_GetTick>
 80052be:	0002      	movs	r2, r0
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	4a2f      	ldr	r2, [pc, #188]	; (8005384 <HAL_RCC_ClockConfig+0x1f4>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e054      	b.n	8005378 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ce:	4b2e      	ldr	r3, [pc, #184]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	2238      	movs	r2, #56	; 0x38
 80052d4:	401a      	ands	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	429a      	cmp	r2, r3
 80052de:	d1ec      	bne.n	80052ba <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052e0:	4b27      	ldr	r3, [pc, #156]	; (8005380 <HAL_RCC_ClockConfig+0x1f0>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2207      	movs	r2, #7
 80052e6:	4013      	ands	r3, r2
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d21e      	bcs.n	800532c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ee:	4b24      	ldr	r3, [pc, #144]	; (8005380 <HAL_RCC_ClockConfig+0x1f0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2207      	movs	r2, #7
 80052f4:	4393      	bics	r3, r2
 80052f6:	0019      	movs	r1, r3
 80052f8:	4b21      	ldr	r3, [pc, #132]	; (8005380 <HAL_RCC_ClockConfig+0x1f0>)
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005300:	f7fe fb60 	bl	80039c4 <HAL_GetTick>
 8005304:	0003      	movs	r3, r0
 8005306:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005308:	e009      	b.n	800531e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800530a:	f7fe fb5b 	bl	80039c4 <HAL_GetTick>
 800530e:	0002      	movs	r2, r0
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	4a1b      	ldr	r2, [pc, #108]	; (8005384 <HAL_RCC_ClockConfig+0x1f4>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d901      	bls.n	800531e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e02c      	b.n	8005378 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800531e:	4b18      	ldr	r3, [pc, #96]	; (8005380 <HAL_RCC_ClockConfig+0x1f0>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2207      	movs	r2, #7
 8005324:	4013      	ands	r3, r2
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	429a      	cmp	r2, r3
 800532a:	d1ee      	bne.n	800530a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2204      	movs	r2, #4
 8005332:	4013      	ands	r3, r2
 8005334:	d009      	beq.n	800534a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005336:	4b14      	ldr	r3, [pc, #80]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	4a15      	ldr	r2, [pc, #84]	; (8005390 <HAL_RCC_ClockConfig+0x200>)
 800533c:	4013      	ands	r3, r2
 800533e:	0019      	movs	r1, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68da      	ldr	r2, [r3, #12]
 8005344:	4b10      	ldr	r3, [pc, #64]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 8005346:	430a      	orrs	r2, r1
 8005348:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800534a:	f000 f829 	bl	80053a0 <HAL_RCC_GetSysClockFreq>
 800534e:	0001      	movs	r1, r0
 8005350:	4b0d      	ldr	r3, [pc, #52]	; (8005388 <HAL_RCC_ClockConfig+0x1f8>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	0a1b      	lsrs	r3, r3, #8
 8005356:	220f      	movs	r2, #15
 8005358:	401a      	ands	r2, r3
 800535a:	4b0e      	ldr	r3, [pc, #56]	; (8005394 <HAL_RCC_ClockConfig+0x204>)
 800535c:	0092      	lsls	r2, r2, #2
 800535e:	58d3      	ldr	r3, [r2, r3]
 8005360:	221f      	movs	r2, #31
 8005362:	4013      	ands	r3, r2
 8005364:	000a      	movs	r2, r1
 8005366:	40da      	lsrs	r2, r3
 8005368:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <HAL_RCC_ClockConfig+0x208>)
 800536a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800536c:	4b0b      	ldr	r3, [pc, #44]	; (800539c <HAL_RCC_ClockConfig+0x20c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	0018      	movs	r0, r3
 8005372:	f7fe facb 	bl	800390c <HAL_InitTick>
 8005376:	0003      	movs	r3, r0
}
 8005378:	0018      	movs	r0, r3
 800537a:	46bd      	mov	sp, r7
 800537c:	b004      	add	sp, #16
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40022000 	.word	0x40022000
 8005384:	00001388 	.word	0x00001388
 8005388:	40021000 	.word	0x40021000
 800538c:	fffff0ff 	.word	0xfffff0ff
 8005390:	ffff8fff 	.word	0xffff8fff
 8005394:	0800a158 	.word	0x0800a158
 8005398:	20000000 	.word	0x20000000
 800539c:	20000004 	.word	0x20000004

080053a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053a6:	4b3c      	ldr	r3, [pc, #240]	; (8005498 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	2238      	movs	r2, #56	; 0x38
 80053ac:	4013      	ands	r3, r2
 80053ae:	d10f      	bne.n	80053d0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80053b0:	4b39      	ldr	r3, [pc, #228]	; (8005498 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	0adb      	lsrs	r3, r3, #11
 80053b6:	2207      	movs	r2, #7
 80053b8:	4013      	ands	r3, r2
 80053ba:	2201      	movs	r2, #1
 80053bc:	409a      	lsls	r2, r3
 80053be:	0013      	movs	r3, r2
 80053c0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80053c2:	6839      	ldr	r1, [r7, #0]
 80053c4:	4835      	ldr	r0, [pc, #212]	; (800549c <HAL_RCC_GetSysClockFreq+0xfc>)
 80053c6:	f7fa feb1 	bl	800012c <__udivsi3>
 80053ca:	0003      	movs	r3, r0
 80053cc:	613b      	str	r3, [r7, #16]
 80053ce:	e05d      	b.n	800548c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80053d0:	4b31      	ldr	r3, [pc, #196]	; (8005498 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	2238      	movs	r2, #56	; 0x38
 80053d6:	4013      	ands	r3, r2
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d102      	bne.n	80053e2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80053dc:	4b30      	ldr	r3, [pc, #192]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x100>)
 80053de:	613b      	str	r3, [r7, #16]
 80053e0:	e054      	b.n	800548c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053e2:	4b2d      	ldr	r3, [pc, #180]	; (8005498 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	2238      	movs	r2, #56	; 0x38
 80053e8:	4013      	ands	r3, r2
 80053ea:	2b10      	cmp	r3, #16
 80053ec:	d138      	bne.n	8005460 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80053ee:	4b2a      	ldr	r3, [pc, #168]	; (8005498 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	2203      	movs	r2, #3
 80053f4:	4013      	ands	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053f8:	4b27      	ldr	r3, [pc, #156]	; (8005498 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	091b      	lsrs	r3, r3, #4
 80053fe:	2207      	movs	r2, #7
 8005400:	4013      	ands	r3, r2
 8005402:	3301      	adds	r3, #1
 8005404:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2b03      	cmp	r3, #3
 800540a:	d10d      	bne.n	8005428 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800540c:	68b9      	ldr	r1, [r7, #8]
 800540e:	4824      	ldr	r0, [pc, #144]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x100>)
 8005410:	f7fa fe8c 	bl	800012c <__udivsi3>
 8005414:	0003      	movs	r3, r0
 8005416:	0019      	movs	r1, r3
 8005418:	4b1f      	ldr	r3, [pc, #124]	; (8005498 <HAL_RCC_GetSysClockFreq+0xf8>)
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	0a1b      	lsrs	r3, r3, #8
 800541e:	227f      	movs	r2, #127	; 0x7f
 8005420:	4013      	ands	r3, r2
 8005422:	434b      	muls	r3, r1
 8005424:	617b      	str	r3, [r7, #20]
        break;
 8005426:	e00d      	b.n	8005444 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005428:	68b9      	ldr	r1, [r7, #8]
 800542a:	481c      	ldr	r0, [pc, #112]	; (800549c <HAL_RCC_GetSysClockFreq+0xfc>)
 800542c:	f7fa fe7e 	bl	800012c <__udivsi3>
 8005430:	0003      	movs	r3, r0
 8005432:	0019      	movs	r1, r3
 8005434:	4b18      	ldr	r3, [pc, #96]	; (8005498 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	0a1b      	lsrs	r3, r3, #8
 800543a:	227f      	movs	r2, #127	; 0x7f
 800543c:	4013      	ands	r3, r2
 800543e:	434b      	muls	r3, r1
 8005440:	617b      	str	r3, [r7, #20]
        break;
 8005442:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005444:	4b14      	ldr	r3, [pc, #80]	; (8005498 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	0f5b      	lsrs	r3, r3, #29
 800544a:	2207      	movs	r2, #7
 800544c:	4013      	ands	r3, r2
 800544e:	3301      	adds	r3, #1
 8005450:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	6978      	ldr	r0, [r7, #20]
 8005456:	f7fa fe69 	bl	800012c <__udivsi3>
 800545a:	0003      	movs	r3, r0
 800545c:	613b      	str	r3, [r7, #16]
 800545e:	e015      	b.n	800548c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005460:	4b0d      	ldr	r3, [pc, #52]	; (8005498 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	2238      	movs	r2, #56	; 0x38
 8005466:	4013      	ands	r3, r2
 8005468:	2b20      	cmp	r3, #32
 800546a:	d103      	bne.n	8005474 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800546c:	2380      	movs	r3, #128	; 0x80
 800546e:	021b      	lsls	r3, r3, #8
 8005470:	613b      	str	r3, [r7, #16]
 8005472:	e00b      	b.n	800548c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005474:	4b08      	ldr	r3, [pc, #32]	; (8005498 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2238      	movs	r2, #56	; 0x38
 800547a:	4013      	ands	r3, r2
 800547c:	2b18      	cmp	r3, #24
 800547e:	d103      	bne.n	8005488 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005480:	23fa      	movs	r3, #250	; 0xfa
 8005482:	01db      	lsls	r3, r3, #7
 8005484:	613b      	str	r3, [r7, #16]
 8005486:	e001      	b.n	800548c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005488:	2300      	movs	r3, #0
 800548a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800548c:	693b      	ldr	r3, [r7, #16]
}
 800548e:	0018      	movs	r0, r3
 8005490:	46bd      	mov	sp, r7
 8005492:	b006      	add	sp, #24
 8005494:	bd80      	pop	{r7, pc}
 8005496:	46c0      	nop			; (mov r8, r8)
 8005498:	40021000 	.word	0x40021000
 800549c:	00f42400 	.word	0x00f42400
 80054a0:	007a1200 	.word	0x007a1200

080054a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054a8:	4b02      	ldr	r3, [pc, #8]	; (80054b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80054aa:	681b      	ldr	r3, [r3, #0]
}
 80054ac:	0018      	movs	r0, r3
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	46c0      	nop			; (mov r8, r8)
 80054b4:	20000000 	.word	0x20000000

080054b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054b8:	b5b0      	push	{r4, r5, r7, lr}
 80054ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80054bc:	f7ff fff2 	bl	80054a4 <HAL_RCC_GetHCLKFreq>
 80054c0:	0004      	movs	r4, r0
 80054c2:	f7ff fb39 	bl	8004b38 <LL_RCC_GetAPB1Prescaler>
 80054c6:	0003      	movs	r3, r0
 80054c8:	0b1a      	lsrs	r2, r3, #12
 80054ca:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054cc:	0092      	lsls	r2, r2, #2
 80054ce:	58d3      	ldr	r3, [r2, r3]
 80054d0:	221f      	movs	r2, #31
 80054d2:	4013      	ands	r3, r2
 80054d4:	40dc      	lsrs	r4, r3
 80054d6:	0023      	movs	r3, r4
}
 80054d8:	0018      	movs	r0, r3
 80054da:	46bd      	mov	sp, r7
 80054dc:	bdb0      	pop	{r4, r5, r7, pc}
 80054de:	46c0      	nop			; (mov r8, r8)
 80054e0:	0800a198 	.word	0x0800a198

080054e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80054ec:	2313      	movs	r3, #19
 80054ee:	18fb      	adds	r3, r7, r3
 80054f0:	2200      	movs	r2, #0
 80054f2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054f4:	2312      	movs	r3, #18
 80054f6:	18fb      	adds	r3, r7, r3
 80054f8:	2200      	movs	r2, #0
 80054fa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	2380      	movs	r3, #128	; 0x80
 8005502:	029b      	lsls	r3, r3, #10
 8005504:	4013      	ands	r3, r2
 8005506:	d100      	bne.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005508:	e0a3      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800550a:	2011      	movs	r0, #17
 800550c:	183b      	adds	r3, r7, r0
 800550e:	2200      	movs	r2, #0
 8005510:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005512:	4bc3      	ldr	r3, [pc, #780]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005514:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005516:	2380      	movs	r3, #128	; 0x80
 8005518:	055b      	lsls	r3, r3, #21
 800551a:	4013      	ands	r3, r2
 800551c:	d110      	bne.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800551e:	4bc0      	ldr	r3, [pc, #768]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005520:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005522:	4bbf      	ldr	r3, [pc, #764]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005524:	2180      	movs	r1, #128	; 0x80
 8005526:	0549      	lsls	r1, r1, #21
 8005528:	430a      	orrs	r2, r1
 800552a:	63da      	str	r2, [r3, #60]	; 0x3c
 800552c:	4bbc      	ldr	r3, [pc, #752]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800552e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005530:	2380      	movs	r3, #128	; 0x80
 8005532:	055b      	lsls	r3, r3, #21
 8005534:	4013      	ands	r3, r2
 8005536:	60bb      	str	r3, [r7, #8]
 8005538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800553a:	183b      	adds	r3, r7, r0
 800553c:	2201      	movs	r2, #1
 800553e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005540:	4bb8      	ldr	r3, [pc, #736]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	4bb7      	ldr	r3, [pc, #732]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005546:	2180      	movs	r1, #128	; 0x80
 8005548:	0049      	lsls	r1, r1, #1
 800554a:	430a      	orrs	r2, r1
 800554c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800554e:	f7fe fa39 	bl	80039c4 <HAL_GetTick>
 8005552:	0003      	movs	r3, r0
 8005554:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005556:	e00b      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005558:	f7fe fa34 	bl	80039c4 <HAL_GetTick>
 800555c:	0002      	movs	r2, r0
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d904      	bls.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005566:	2313      	movs	r3, #19
 8005568:	18fb      	adds	r3, r7, r3
 800556a:	2203      	movs	r2, #3
 800556c:	701a      	strb	r2, [r3, #0]
        break;
 800556e:	e005      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005570:	4bac      	ldr	r3, [pc, #688]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	2380      	movs	r3, #128	; 0x80
 8005576:	005b      	lsls	r3, r3, #1
 8005578:	4013      	ands	r3, r2
 800557a:	d0ed      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800557c:	2313      	movs	r3, #19
 800557e:	18fb      	adds	r3, r7, r3
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d154      	bne.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005586:	4ba6      	ldr	r3, [pc, #664]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005588:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800558a:	23c0      	movs	r3, #192	; 0xc0
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4013      	ands	r3, r2
 8005590:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d019      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d014      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055a2:	4b9f      	ldr	r3, [pc, #636]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a6:	4aa0      	ldr	r2, [pc, #640]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80055a8:	4013      	ands	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055ac:	4b9c      	ldr	r3, [pc, #624]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055b0:	4b9b      	ldr	r3, [pc, #620]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055b2:	2180      	movs	r1, #128	; 0x80
 80055b4:	0249      	lsls	r1, r1, #9
 80055b6:	430a      	orrs	r2, r1
 80055b8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055ba:	4b99      	ldr	r3, [pc, #612]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055be:	4b98      	ldr	r3, [pc, #608]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055c0:	499a      	ldr	r1, [pc, #616]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80055c2:	400a      	ands	r2, r1
 80055c4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055c6:	4b96      	ldr	r3, [pc, #600]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	2201      	movs	r2, #1
 80055d0:	4013      	ands	r3, r2
 80055d2:	d016      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d4:	f7fe f9f6 	bl	80039c4 <HAL_GetTick>
 80055d8:	0003      	movs	r3, r0
 80055da:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055dc:	e00c      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055de:	f7fe f9f1 	bl	80039c4 <HAL_GetTick>
 80055e2:	0002      	movs	r2, r0
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	4a91      	ldr	r2, [pc, #580]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d904      	bls.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80055ee:	2313      	movs	r3, #19
 80055f0:	18fb      	adds	r3, r7, r3
 80055f2:	2203      	movs	r2, #3
 80055f4:	701a      	strb	r2, [r3, #0]
            break;
 80055f6:	e004      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055f8:	4b89      	ldr	r3, [pc, #548]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055fc:	2202      	movs	r2, #2
 80055fe:	4013      	ands	r3, r2
 8005600:	d0ed      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005602:	2313      	movs	r3, #19
 8005604:	18fb      	adds	r3, r7, r3
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10a      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800560c:	4b84      	ldr	r3, [pc, #528]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800560e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005610:	4a85      	ldr	r2, [pc, #532]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005612:	4013      	ands	r3, r2
 8005614:	0019      	movs	r1, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800561a:	4b81      	ldr	r3, [pc, #516]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800561c:	430a      	orrs	r2, r1
 800561e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005620:	e00c      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005622:	2312      	movs	r3, #18
 8005624:	18fb      	adds	r3, r7, r3
 8005626:	2213      	movs	r2, #19
 8005628:	18ba      	adds	r2, r7, r2
 800562a:	7812      	ldrb	r2, [r2, #0]
 800562c:	701a      	strb	r2, [r3, #0]
 800562e:	e005      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005630:	2312      	movs	r3, #18
 8005632:	18fb      	adds	r3, r7, r3
 8005634:	2213      	movs	r2, #19
 8005636:	18ba      	adds	r2, r7, r2
 8005638:	7812      	ldrb	r2, [r2, #0]
 800563a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800563c:	2311      	movs	r3, #17
 800563e:	18fb      	adds	r3, r7, r3
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d105      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005646:	4b76      	ldr	r3, [pc, #472]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005648:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800564a:	4b75      	ldr	r3, [pc, #468]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800564c:	4979      	ldr	r1, [pc, #484]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800564e:	400a      	ands	r2, r1
 8005650:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2201      	movs	r2, #1
 8005658:	4013      	ands	r3, r2
 800565a:	d009      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800565c:	4b70      	ldr	r3, [pc, #448]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800565e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005660:	2203      	movs	r2, #3
 8005662:	4393      	bics	r3, r2
 8005664:	0019      	movs	r1, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	4b6d      	ldr	r3, [pc, #436]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800566c:	430a      	orrs	r2, r1
 800566e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2202      	movs	r2, #2
 8005676:	4013      	ands	r3, r2
 8005678:	d009      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800567a:	4b69      	ldr	r3, [pc, #420]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800567c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567e:	220c      	movs	r2, #12
 8005680:	4393      	bics	r3, r2
 8005682:	0019      	movs	r1, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	4b65      	ldr	r3, [pc, #404]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800568a:	430a      	orrs	r2, r1
 800568c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2210      	movs	r2, #16
 8005694:	4013      	ands	r3, r2
 8005696:	d009      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005698:	4b61      	ldr	r3, [pc, #388]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800569a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800569c:	4a66      	ldr	r2, [pc, #408]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800569e:	4013      	ands	r3, r2
 80056a0:	0019      	movs	r1, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	4b5e      	ldr	r3, [pc, #376]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056a8:	430a      	orrs	r2, r1
 80056aa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	2380      	movs	r3, #128	; 0x80
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4013      	ands	r3, r2
 80056b6:	d009      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056b8:	4b59      	ldr	r3, [pc, #356]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056bc:	4a5f      	ldr	r2, [pc, #380]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80056be:	4013      	ands	r3, r2
 80056c0:	0019      	movs	r1, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	699a      	ldr	r2, [r3, #24]
 80056c6:	4b56      	ldr	r3, [pc, #344]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056c8:	430a      	orrs	r2, r1
 80056ca:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	2380      	movs	r3, #128	; 0x80
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	4013      	ands	r3, r2
 80056d6:	d009      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056d8:	4b51      	ldr	r3, [pc, #324]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056dc:	4a58      	ldr	r2, [pc, #352]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056de:	4013      	ands	r3, r2
 80056e0:	0019      	movs	r1, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	69da      	ldr	r2, [r3, #28]
 80056e6:	4b4e      	ldr	r3, [pc, #312]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056e8:	430a      	orrs	r2, r1
 80056ea:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2220      	movs	r2, #32
 80056f2:	4013      	ands	r3, r2
 80056f4:	d009      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056f6:	4b4a      	ldr	r3, [pc, #296]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fa:	4a52      	ldr	r2, [pc, #328]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80056fc:	4013      	ands	r3, r2
 80056fe:	0019      	movs	r1, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691a      	ldr	r2, [r3, #16]
 8005704:	4b46      	ldr	r3, [pc, #280]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005706:	430a      	orrs	r2, r1
 8005708:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	2380      	movs	r3, #128	; 0x80
 8005710:	01db      	lsls	r3, r3, #7
 8005712:	4013      	ands	r3, r2
 8005714:	d015      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005716:	4b42      	ldr	r3, [pc, #264]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	0899      	lsrs	r1, r3, #2
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1a      	ldr	r2, [r3, #32]
 8005722:	4b3f      	ldr	r3, [pc, #252]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005724:	430a      	orrs	r2, r1
 8005726:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a1a      	ldr	r2, [r3, #32]
 800572c:	2380      	movs	r3, #128	; 0x80
 800572e:	05db      	lsls	r3, r3, #23
 8005730:	429a      	cmp	r2, r3
 8005732:	d106      	bne.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005734:	4b3a      	ldr	r3, [pc, #232]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	4b39      	ldr	r3, [pc, #228]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800573a:	2180      	movs	r1, #128	; 0x80
 800573c:	0249      	lsls	r1, r1, #9
 800573e:	430a      	orrs	r2, r1
 8005740:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	2380      	movs	r3, #128	; 0x80
 8005748:	031b      	lsls	r3, r3, #12
 800574a:	4013      	ands	r3, r2
 800574c:	d009      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800574e:	4b34      	ldr	r3, [pc, #208]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005752:	2240      	movs	r2, #64	; 0x40
 8005754:	4393      	bics	r3, r2
 8005756:	0019      	movs	r1, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800575c:	4b30      	ldr	r3, [pc, #192]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800575e:	430a      	orrs	r2, r1
 8005760:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	2380      	movs	r3, #128	; 0x80
 8005768:	039b      	lsls	r3, r3, #14
 800576a:	4013      	ands	r3, r2
 800576c:	d016      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800576e:	4b2c      	ldr	r3, [pc, #176]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005772:	4a35      	ldr	r2, [pc, #212]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005774:	4013      	ands	r3, r2
 8005776:	0019      	movs	r1, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800577c:	4b28      	ldr	r3, [pc, #160]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800577e:	430a      	orrs	r2, r1
 8005780:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005786:	2380      	movs	r3, #128	; 0x80
 8005788:	03db      	lsls	r3, r3, #15
 800578a:	429a      	cmp	r2, r3
 800578c:	d106      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800578e:	4b24      	ldr	r3, [pc, #144]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	4b23      	ldr	r3, [pc, #140]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005794:	2180      	movs	r1, #128	; 0x80
 8005796:	0449      	lsls	r1, r1, #17
 8005798:	430a      	orrs	r2, r1
 800579a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	2380      	movs	r3, #128	; 0x80
 80057a2:	03db      	lsls	r3, r3, #15
 80057a4:	4013      	ands	r3, r2
 80057a6:	d016      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80057a8:	4b1d      	ldr	r3, [pc, #116]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ac:	4a27      	ldr	r2, [pc, #156]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	0019      	movs	r1, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b6:	4b1a      	ldr	r3, [pc, #104]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057b8:	430a      	orrs	r2, r1
 80057ba:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c0:	2380      	movs	r3, #128	; 0x80
 80057c2:	045b      	lsls	r3, r3, #17
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d106      	bne.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80057c8:	4b15      	ldr	r3, [pc, #84]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	4b14      	ldr	r3, [pc, #80]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057ce:	2180      	movs	r1, #128	; 0x80
 80057d0:	0449      	lsls	r1, r1, #17
 80057d2:	430a      	orrs	r2, r1
 80057d4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	2380      	movs	r3, #128	; 0x80
 80057dc:	011b      	lsls	r3, r3, #4
 80057de:	4013      	ands	r3, r2
 80057e0:	d016      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80057e2:	4b0f      	ldr	r3, [pc, #60]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e6:	4a1a      	ldr	r2, [pc, #104]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80057e8:	4013      	ands	r3, r2
 80057ea:	0019      	movs	r1, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	695a      	ldr	r2, [r3, #20]
 80057f0:	4b0b      	ldr	r3, [pc, #44]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057f2:	430a      	orrs	r2, r1
 80057f4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	695a      	ldr	r2, [r3, #20]
 80057fa:	2380      	movs	r3, #128	; 0x80
 80057fc:	01db      	lsls	r3, r3, #7
 80057fe:	429a      	cmp	r2, r3
 8005800:	d106      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005802:	4b07      	ldr	r3, [pc, #28]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	4b06      	ldr	r3, [pc, #24]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005808:	2180      	movs	r1, #128	; 0x80
 800580a:	0249      	lsls	r1, r1, #9
 800580c:	430a      	orrs	r2, r1
 800580e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005810:	2312      	movs	r3, #18
 8005812:	18fb      	adds	r3, r7, r3
 8005814:	781b      	ldrb	r3, [r3, #0]
}
 8005816:	0018      	movs	r0, r3
 8005818:	46bd      	mov	sp, r7
 800581a:	b006      	add	sp, #24
 800581c:	bd80      	pop	{r7, pc}
 800581e:	46c0      	nop			; (mov r8, r8)
 8005820:	40021000 	.word	0x40021000
 8005824:	40007000 	.word	0x40007000
 8005828:	fffffcff 	.word	0xfffffcff
 800582c:	fffeffff 	.word	0xfffeffff
 8005830:	00001388 	.word	0x00001388
 8005834:	efffffff 	.word	0xefffffff
 8005838:	fffff3ff 	.word	0xfffff3ff
 800583c:	fff3ffff 	.word	0xfff3ffff
 8005840:	ffcfffff 	.word	0xffcfffff
 8005844:	ffffcfff 	.word	0xffffcfff
 8005848:	ffbfffff 	.word	0xffbfffff
 800584c:	feffffff 	.word	0xfeffffff
 8005850:	ffff3fff 	.word	0xffff3fff

08005854 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e0a8      	b.n	80059b8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	2b00      	cmp	r3, #0
 800586c:	d109      	bne.n	8005882 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	2382      	movs	r3, #130	; 0x82
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	429a      	cmp	r2, r3
 8005878:	d009      	beq.n	800588e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	61da      	str	r2, [r3, #28]
 8005880:	e005      	b.n	800588e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	225d      	movs	r2, #93	; 0x5d
 8005898:	5c9b      	ldrb	r3, [r3, r2]
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d107      	bne.n	80058b0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	225c      	movs	r2, #92	; 0x5c
 80058a4:	2100      	movs	r1, #0
 80058a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	0018      	movs	r0, r3
 80058ac:	f7fd fe34 	bl	8003518 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	225d      	movs	r2, #93	; 0x5d
 80058b4:	2102      	movs	r1, #2
 80058b6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2140      	movs	r1, #64	; 0x40
 80058c4:	438a      	bics	r2, r1
 80058c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	23e0      	movs	r3, #224	; 0xe0
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d902      	bls.n	80058da <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058d4:	2300      	movs	r3, #0
 80058d6:	60fb      	str	r3, [r7, #12]
 80058d8:	e002      	b.n	80058e0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058da:	2380      	movs	r3, #128	; 0x80
 80058dc:	015b      	lsls	r3, r3, #5
 80058de:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68da      	ldr	r2, [r3, #12]
 80058e4:	23f0      	movs	r3, #240	; 0xf0
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d008      	beq.n	80058fe <HAL_SPI_Init+0xaa>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68da      	ldr	r2, [r3, #12]
 80058f0:	23e0      	movs	r3, #224	; 0xe0
 80058f2:	00db      	lsls	r3, r3, #3
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d002      	beq.n	80058fe <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	2382      	movs	r3, #130	; 0x82
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	401a      	ands	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6899      	ldr	r1, [r3, #8]
 800590c:	2384      	movs	r3, #132	; 0x84
 800590e:	021b      	lsls	r3, r3, #8
 8005910:	400b      	ands	r3, r1
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	2102      	movs	r1, #2
 800591a:	400b      	ands	r3, r1
 800591c:	431a      	orrs	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	2101      	movs	r1, #1
 8005924:	400b      	ands	r3, r1
 8005926:	431a      	orrs	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6999      	ldr	r1, [r3, #24]
 800592c:	2380      	movs	r3, #128	; 0x80
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	400b      	ands	r3, r1
 8005932:	431a      	orrs	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	69db      	ldr	r3, [r3, #28]
 8005938:	2138      	movs	r1, #56	; 0x38
 800593a:	400b      	ands	r3, r1
 800593c:	431a      	orrs	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	2180      	movs	r1, #128	; 0x80
 8005944:	400b      	ands	r3, r1
 8005946:	431a      	orrs	r2, r3
 8005948:	0011      	movs	r1, r2
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800594e:	2380      	movs	r3, #128	; 0x80
 8005950:	019b      	lsls	r3, r3, #6
 8005952:	401a      	ands	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	0c1b      	lsrs	r3, r3, #16
 8005962:	2204      	movs	r2, #4
 8005964:	401a      	ands	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	2110      	movs	r1, #16
 800596c:	400b      	ands	r3, r1
 800596e:	431a      	orrs	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005974:	2108      	movs	r1, #8
 8005976:	400b      	ands	r3, r1
 8005978:	431a      	orrs	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68d9      	ldr	r1, [r3, #12]
 800597e:	23f0      	movs	r3, #240	; 0xf0
 8005980:	011b      	lsls	r3, r3, #4
 8005982:	400b      	ands	r3, r1
 8005984:	431a      	orrs	r2, r3
 8005986:	0011      	movs	r1, r2
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	2380      	movs	r3, #128	; 0x80
 800598c:	015b      	lsls	r3, r3, #5
 800598e:	401a      	ands	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	430a      	orrs	r2, r1
 8005996:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	69da      	ldr	r2, [r3, #28]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4907      	ldr	r1, [pc, #28]	; (80059c0 <HAL_SPI_Init+0x16c>)
 80059a4:	400a      	ands	r2, r1
 80059a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	225d      	movs	r2, #93	; 0x5d
 80059b2:	2101      	movs	r1, #1
 80059b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	0018      	movs	r0, r3
 80059ba:	46bd      	mov	sp, r7
 80059bc:	b004      	add	sp, #16
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	fffff7ff 	.word	0xfffff7ff

080059c4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b088      	sub	sp, #32
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	603b      	str	r3, [r7, #0]
 80059d0:	1dbb      	adds	r3, r7, #6
 80059d2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059d4:	231f      	movs	r3, #31
 80059d6:	18fb      	adds	r3, r7, r3
 80059d8:	2200      	movs	r2, #0
 80059da:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	225c      	movs	r2, #92	; 0x5c
 80059e0:	5c9b      	ldrb	r3, [r3, r2]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d101      	bne.n	80059ea <HAL_SPI_Transmit+0x26>
 80059e6:	2302      	movs	r3, #2
 80059e8:	e140      	b.n	8005c6c <HAL_SPI_Transmit+0x2a8>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	225c      	movs	r2, #92	; 0x5c
 80059ee:	2101      	movs	r1, #1
 80059f0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059f2:	f7fd ffe7 	bl	80039c4 <HAL_GetTick>
 80059f6:	0003      	movs	r3, r0
 80059f8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80059fa:	2316      	movs	r3, #22
 80059fc:	18fb      	adds	r3, r7, r3
 80059fe:	1dba      	adds	r2, r7, #6
 8005a00:	8812      	ldrh	r2, [r2, #0]
 8005a02:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	225d      	movs	r2, #93	; 0x5d
 8005a08:	5c9b      	ldrb	r3, [r3, r2]
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d004      	beq.n	8005a1a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005a10:	231f      	movs	r3, #31
 8005a12:	18fb      	adds	r3, r7, r3
 8005a14:	2202      	movs	r2, #2
 8005a16:	701a      	strb	r2, [r3, #0]
    goto error;
 8005a18:	e11d      	b.n	8005c56 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <HAL_SPI_Transmit+0x64>
 8005a20:	1dbb      	adds	r3, r7, #6
 8005a22:	881b      	ldrh	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d104      	bne.n	8005a32 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005a28:	231f      	movs	r3, #31
 8005a2a:	18fb      	adds	r3, r7, r3
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005a30:	e111      	b.n	8005c56 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	225d      	movs	r2, #93	; 0x5d
 8005a36:	2103      	movs	r1, #3
 8005a38:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	1dba      	adds	r2, r7, #6
 8005a4a:	8812      	ldrh	r2, [r2, #0]
 8005a4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	1dba      	adds	r2, r7, #6
 8005a52:	8812      	ldrh	r2, [r2, #0]
 8005a54:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2244      	movs	r2, #68	; 0x44
 8005a60:	2100      	movs	r1, #0
 8005a62:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2246      	movs	r2, #70	; 0x46
 8005a68:	2100      	movs	r1, #0
 8005a6a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	2380      	movs	r3, #128	; 0x80
 8005a7e:	021b      	lsls	r3, r3, #8
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d110      	bne.n	8005aa6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2140      	movs	r1, #64	; 0x40
 8005a90:	438a      	bics	r2, r1
 8005a92:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2180      	movs	r1, #128	; 0x80
 8005aa0:	01c9      	lsls	r1, r1, #7
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2240      	movs	r2, #64	; 0x40
 8005aae:	4013      	ands	r3, r2
 8005ab0:	2b40      	cmp	r3, #64	; 0x40
 8005ab2:	d007      	beq.n	8005ac4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2140      	movs	r1, #64	; 0x40
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	68da      	ldr	r2, [r3, #12]
 8005ac8:	23e0      	movs	r3, #224	; 0xe0
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d94e      	bls.n	8005b6e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d004      	beq.n	8005ae2 <HAL_SPI_Transmit+0x11e>
 8005ad8:	2316      	movs	r3, #22
 8005ada:	18fb      	adds	r3, r7, r3
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d13f      	bne.n	8005b62 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae6:	881a      	ldrh	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af2:	1c9a      	adds	r2, r3, #2
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	3b01      	subs	r3, #1
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b06:	e02c      	b.n	8005b62 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	4013      	ands	r3, r2
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d112      	bne.n	8005b3c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1a:	881a      	ldrh	r2, [r3, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b26:	1c9a      	adds	r2, r3, #2
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	3b01      	subs	r3, #1
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b3a:	e012      	b.n	8005b62 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b3c:	f7fd ff42 	bl	80039c4 <HAL_GetTick>
 8005b40:	0002      	movs	r2, r0
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d802      	bhi.n	8005b52 <HAL_SPI_Transmit+0x18e>
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	d102      	bne.n	8005b58 <HAL_SPI_Transmit+0x194>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d104      	bne.n	8005b62 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8005b58:	231f      	movs	r3, #31
 8005b5a:	18fb      	adds	r3, r7, r3
 8005b5c:	2203      	movs	r2, #3
 8005b5e:	701a      	strb	r2, [r3, #0]
          goto error;
 8005b60:	e079      	b.n	8005c56 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1cd      	bne.n	8005b08 <HAL_SPI_Transmit+0x144>
 8005b6c:	e04f      	b.n	8005c0e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d004      	beq.n	8005b80 <HAL_SPI_Transmit+0x1bc>
 8005b76:	2316      	movs	r3, #22
 8005b78:	18fb      	adds	r3, r7, r3
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d141      	bne.n	8005c04 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	330c      	adds	r3, #12
 8005b8a:	7812      	ldrb	r2, [r2, #0]
 8005b8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005ba6:	e02d      	b.n	8005c04 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	2202      	movs	r2, #2
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d113      	bne.n	8005bde <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	330c      	adds	r3, #12
 8005bc0:	7812      	ldrb	r2, [r2, #0]
 8005bc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bdc:	e012      	b.n	8005c04 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bde:	f7fd fef1 	bl	80039c4 <HAL_GetTick>
 8005be2:	0002      	movs	r2, r0
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d802      	bhi.n	8005bf4 <HAL_SPI_Transmit+0x230>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	d102      	bne.n	8005bfa <HAL_SPI_Transmit+0x236>
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d104      	bne.n	8005c04 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8005bfa:	231f      	movs	r3, #31
 8005bfc:	18fb      	adds	r3, r7, r3
 8005bfe:	2203      	movs	r2, #3
 8005c00:	701a      	strb	r2, [r3, #0]
          goto error;
 8005c02:	e028      	b.n	8005c56 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1cc      	bne.n	8005ba8 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	6839      	ldr	r1, [r7, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	0018      	movs	r0, r3
 8005c16:	f000 fc4b 	bl	80064b0 <SPI_EndRxTxTransaction>
 8005c1a:	1e03      	subs	r3, r0, #0
 8005c1c:	d002      	beq.n	8005c24 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2220      	movs	r2, #32
 8005c22:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10a      	bne.n	8005c42 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	613b      	str	r3, [r7, #16]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	613b      	str	r3, [r7, #16]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	613b      	str	r3, [r7, #16]
 8005c40:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d004      	beq.n	8005c54 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8005c4a:	231f      	movs	r3, #31
 8005c4c:	18fb      	adds	r3, r7, r3
 8005c4e:	2201      	movs	r2, #1
 8005c50:	701a      	strb	r2, [r3, #0]
 8005c52:	e000      	b.n	8005c56 <HAL_SPI_Transmit+0x292>
  }

error:
 8005c54:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	225d      	movs	r2, #93	; 0x5d
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	225c      	movs	r2, #92	; 0x5c
 8005c62:	2100      	movs	r1, #0
 8005c64:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005c66:	231f      	movs	r3, #31
 8005c68:	18fb      	adds	r3, r7, r3
 8005c6a:	781b      	ldrb	r3, [r3, #0]
}
 8005c6c:	0018      	movs	r0, r3
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	b008      	add	sp, #32
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b08a      	sub	sp, #40	; 0x28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
 8005c80:	001a      	movs	r2, r3
 8005c82:	1cbb      	adds	r3, r7, #2
 8005c84:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c86:	2301      	movs	r3, #1
 8005c88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c8a:	2323      	movs	r3, #35	; 0x23
 8005c8c:	18fb      	adds	r3, r7, r3
 8005c8e:	2200      	movs	r2, #0
 8005c90:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	225c      	movs	r2, #92	; 0x5c
 8005c96:	5c9b      	ldrb	r3, [r3, r2]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d101      	bne.n	8005ca0 <HAL_SPI_TransmitReceive+0x2c>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e1b5      	b.n	800600c <HAL_SPI_TransmitReceive+0x398>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	225c      	movs	r2, #92	; 0x5c
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ca8:	f7fd fe8c 	bl	80039c4 <HAL_GetTick>
 8005cac:	0003      	movs	r3, r0
 8005cae:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005cb0:	201b      	movs	r0, #27
 8005cb2:	183b      	adds	r3, r7, r0
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	215d      	movs	r1, #93	; 0x5d
 8005cb8:	5c52      	ldrb	r2, [r2, r1]
 8005cba:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005cc2:	2312      	movs	r3, #18
 8005cc4:	18fb      	adds	r3, r7, r3
 8005cc6:	1cba      	adds	r2, r7, #2
 8005cc8:	8812      	ldrh	r2, [r2, #0]
 8005cca:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ccc:	183b      	adds	r3, r7, r0
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d011      	beq.n	8005cf8 <HAL_SPI_TransmitReceive+0x84>
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	2382      	movs	r3, #130	; 0x82
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d107      	bne.n	8005cee <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d103      	bne.n	8005cee <HAL_SPI_TransmitReceive+0x7a>
 8005ce6:	183b      	adds	r3, r7, r0
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	d004      	beq.n	8005cf8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005cee:	2323      	movs	r3, #35	; 0x23
 8005cf0:	18fb      	adds	r3, r7, r3
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	701a      	strb	r2, [r3, #0]
    goto error;
 8005cf6:	e17e      	b.n	8005ff6 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d006      	beq.n	8005d0c <HAL_SPI_TransmitReceive+0x98>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <HAL_SPI_TransmitReceive+0x98>
 8005d04:	1cbb      	adds	r3, r7, #2
 8005d06:	881b      	ldrh	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d104      	bne.n	8005d16 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005d0c:	2323      	movs	r3, #35	; 0x23
 8005d0e:	18fb      	adds	r3, r7, r3
 8005d10:	2201      	movs	r2, #1
 8005d12:	701a      	strb	r2, [r3, #0]
    goto error;
 8005d14:	e16f      	b.n	8005ff6 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	225d      	movs	r2, #93	; 0x5d
 8005d1a:	5c9b      	ldrb	r3, [r3, r2]
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b04      	cmp	r3, #4
 8005d20:	d003      	beq.n	8005d2a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	225d      	movs	r2, #93	; 0x5d
 8005d26:	2105      	movs	r1, #5
 8005d28:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	1cba      	adds	r2, r7, #2
 8005d3a:	2146      	movs	r1, #70	; 0x46
 8005d3c:	8812      	ldrh	r2, [r2, #0]
 8005d3e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	1cba      	adds	r2, r7, #2
 8005d44:	2144      	movs	r1, #68	; 0x44
 8005d46:	8812      	ldrh	r2, [r2, #0]
 8005d48:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	1cba      	adds	r2, r7, #2
 8005d54:	8812      	ldrh	r2, [r2, #0]
 8005d56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	1cba      	adds	r2, r7, #2
 8005d5c:	8812      	ldrh	r2, [r2, #0]
 8005d5e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	68da      	ldr	r2, [r3, #12]
 8005d70:	23e0      	movs	r3, #224	; 0xe0
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d908      	bls.n	8005d8a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	49a4      	ldr	r1, [pc, #656]	; (8006014 <HAL_SPI_TransmitReceive+0x3a0>)
 8005d84:	400a      	ands	r2, r1
 8005d86:	605a      	str	r2, [r3, #4]
 8005d88:	e008      	b.n	8005d9c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2180      	movs	r1, #128	; 0x80
 8005d96:	0149      	lsls	r1, r1, #5
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2240      	movs	r2, #64	; 0x40
 8005da4:	4013      	ands	r3, r2
 8005da6:	2b40      	cmp	r3, #64	; 0x40
 8005da8:	d007      	beq.n	8005dba <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2140      	movs	r1, #64	; 0x40
 8005db6:	430a      	orrs	r2, r1
 8005db8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	23e0      	movs	r3, #224	; 0xe0
 8005dc0:	00db      	lsls	r3, r3, #3
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d800      	bhi.n	8005dc8 <HAL_SPI_TransmitReceive+0x154>
 8005dc6:	e07f      	b.n	8005ec8 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d005      	beq.n	8005ddc <HAL_SPI_TransmitReceive+0x168>
 8005dd0:	2312      	movs	r3, #18
 8005dd2:	18fb      	adds	r3, r7, r3
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d000      	beq.n	8005ddc <HAL_SPI_TransmitReceive+0x168>
 8005dda:	e069      	b.n	8005eb0 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de0:	881a      	ldrh	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dec:	1c9a      	adds	r2, r3, #2
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e00:	e056      	b.n	8005eb0 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	2202      	movs	r2, #2
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d11b      	bne.n	8005e48 <HAL_SPI_TransmitReceive+0x1d4>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d016      	beq.n	8005e48 <HAL_SPI_TransmitReceive+0x1d4>
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d113      	bne.n	8005e48 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e24:	881a      	ldrh	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e30:	1c9a      	adds	r2, r3, #2
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	4013      	ands	r3, r2
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d11c      	bne.n	8005e90 <HAL_SPI_TransmitReceive+0x21c>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2246      	movs	r2, #70	; 0x46
 8005e5a:	5a9b      	ldrh	r3, [r3, r2]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d016      	beq.n	8005e90 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68da      	ldr	r2, [r3, #12]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6c:	b292      	uxth	r2, r2
 8005e6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e74:	1c9a      	adds	r2, r3, #2
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2246      	movs	r2, #70	; 0x46
 8005e7e:	5a9b      	ldrh	r3, [r3, r2]
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	3b01      	subs	r3, #1
 8005e84:	b299      	uxth	r1, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2246      	movs	r2, #70	; 0x46
 8005e8a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e90:	f7fd fd98 	bl	80039c4 <HAL_GetTick>
 8005e94:	0002      	movs	r2, r0
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d807      	bhi.n	8005eb0 <HAL_SPI_TransmitReceive+0x23c>
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	d004      	beq.n	8005eb0 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8005ea6:	2323      	movs	r3, #35	; 0x23
 8005ea8:	18fb      	adds	r3, r7, r3
 8005eaa:	2203      	movs	r2, #3
 8005eac:	701a      	strb	r2, [r3, #0]
        goto error;
 8005eae:	e0a2      	b.n	8005ff6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1a3      	bne.n	8005e02 <HAL_SPI_TransmitReceive+0x18e>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2246      	movs	r2, #70	; 0x46
 8005ebe:	5a9b      	ldrh	r3, [r3, r2]
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d19d      	bne.n	8005e02 <HAL_SPI_TransmitReceive+0x18e>
 8005ec6:	e085      	b.n	8005fd4 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d005      	beq.n	8005edc <HAL_SPI_TransmitReceive+0x268>
 8005ed0:	2312      	movs	r3, #18
 8005ed2:	18fb      	adds	r3, r7, r3
 8005ed4:	881b      	ldrh	r3, [r3, #0]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d000      	beq.n	8005edc <HAL_SPI_TransmitReceive+0x268>
 8005eda:	e070      	b.n	8005fbe <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	330c      	adds	r3, #12
 8005ee6:	7812      	ldrb	r2, [r2, #0]
 8005ee8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	3b01      	subs	r3, #1
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f02:	e05c      	b.n	8005fbe <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d11c      	bne.n	8005f4c <HAL_SPI_TransmitReceive+0x2d8>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d017      	beq.n	8005f4c <HAL_SPI_TransmitReceive+0x2d8>
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d114      	bne.n	8005f4c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	330c      	adds	r3, #12
 8005f2c:	7812      	ldrb	r2, [r2, #0]
 8005f2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	3b01      	subs	r3, #1
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	2201      	movs	r2, #1
 8005f54:	4013      	ands	r3, r2
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d11e      	bne.n	8005f98 <HAL_SPI_TransmitReceive+0x324>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2246      	movs	r2, #70	; 0x46
 8005f5e:	5a9b      	ldrh	r3, [r3, r2]
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d018      	beq.n	8005f98 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	330c      	adds	r3, #12
 8005f6c:	001a      	movs	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f72:	7812      	ldrb	r2, [r2, #0]
 8005f74:	b2d2      	uxtb	r2, r2
 8005f76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2246      	movs	r2, #70	; 0x46
 8005f86:	5a9b      	ldrh	r3, [r3, r2]
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	b299      	uxth	r1, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2246      	movs	r2, #70	; 0x46
 8005f92:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f94:	2301      	movs	r3, #1
 8005f96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f98:	f7fd fd14 	bl	80039c4 <HAL_GetTick>
 8005f9c:	0002      	movs	r2, r0
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d802      	bhi.n	8005fae <HAL_SPI_TransmitReceive+0x33a>
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005faa:	3301      	adds	r3, #1
 8005fac:	d102      	bne.n	8005fb4 <HAL_SPI_TransmitReceive+0x340>
 8005fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d104      	bne.n	8005fbe <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8005fb4:	2323      	movs	r3, #35	; 0x23
 8005fb6:	18fb      	adds	r3, r7, r3
 8005fb8:	2203      	movs	r2, #3
 8005fba:	701a      	strb	r2, [r3, #0]
        goto error;
 8005fbc:	e01b      	b.n	8005ff6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d19d      	bne.n	8005f04 <HAL_SPI_TransmitReceive+0x290>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2246      	movs	r2, #70	; 0x46
 8005fcc:	5a9b      	ldrh	r3, [r3, r2]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d197      	bne.n	8005f04 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fd4:	69fa      	ldr	r2, [r7, #28]
 8005fd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	0018      	movs	r0, r3
 8005fdc:	f000 fa68 	bl	80064b0 <SPI_EndRxTxTransaction>
 8005fe0:	1e03      	subs	r3, r0, #0
 8005fe2:	d007      	beq.n	8005ff4 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8005fe4:	2323      	movs	r3, #35	; 0x23
 8005fe6:	18fb      	adds	r3, r7, r3
 8005fe8:	2201      	movs	r2, #1
 8005fea:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	661a      	str	r2, [r3, #96]	; 0x60
 8005ff2:	e000      	b.n	8005ff6 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8005ff4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	225d      	movs	r2, #93	; 0x5d
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	225c      	movs	r2, #92	; 0x5c
 8006002:	2100      	movs	r1, #0
 8006004:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006006:	2323      	movs	r3, #35	; 0x23
 8006008:	18fb      	adds	r3, r7, r3
 800600a:	781b      	ldrb	r3, [r3, #0]
}
 800600c:	0018      	movs	r0, r3
 800600e:	46bd      	mov	sp, r7
 8006010:	b00a      	add	sp, #40	; 0x28
 8006012:	bd80      	pop	{r7, pc}
 8006014:	ffffefff 	.word	0xffffefff

08006018 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b088      	sub	sp, #32
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	099b      	lsrs	r3, r3, #6
 8006034:	001a      	movs	r2, r3
 8006036:	2301      	movs	r3, #1
 8006038:	4013      	ands	r3, r2
 800603a:	d10f      	bne.n	800605c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	2201      	movs	r2, #1
 8006040:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006042:	d00b      	beq.n	800605c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	099b      	lsrs	r3, r3, #6
 8006048:	001a      	movs	r2, r3
 800604a:	2301      	movs	r3, #1
 800604c:	4013      	ands	r3, r2
 800604e:	d005      	beq.n	800605c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	0010      	movs	r0, r2
 8006058:	4798      	blx	r3
    return;
 800605a:	e0d5      	b.n	8006208 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	085b      	lsrs	r3, r3, #1
 8006060:	001a      	movs	r2, r3
 8006062:	2301      	movs	r3, #1
 8006064:	4013      	ands	r3, r2
 8006066:	d00b      	beq.n	8006080 <HAL_SPI_IRQHandler+0x68>
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	09db      	lsrs	r3, r3, #7
 800606c:	001a      	movs	r2, r3
 800606e:	2301      	movs	r3, #1
 8006070:	4013      	ands	r3, r2
 8006072:	d005      	beq.n	8006080 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	0010      	movs	r0, r2
 800607c:	4798      	blx	r3
    return;
 800607e:	e0c3      	b.n	8006208 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	095b      	lsrs	r3, r3, #5
 8006084:	001a      	movs	r2, r3
 8006086:	2301      	movs	r3, #1
 8006088:	4013      	ands	r3, r2
 800608a:	d10c      	bne.n	80060a6 <HAL_SPI_IRQHandler+0x8e>
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	099b      	lsrs	r3, r3, #6
 8006090:	001a      	movs	r2, r3
 8006092:	2301      	movs	r3, #1
 8006094:	4013      	ands	r3, r2
 8006096:	d106      	bne.n	80060a6 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	0a1b      	lsrs	r3, r3, #8
 800609c:	001a      	movs	r2, r3
 800609e:	2301      	movs	r3, #1
 80060a0:	4013      	ands	r3, r2
 80060a2:	d100      	bne.n	80060a6 <HAL_SPI_IRQHandler+0x8e>
 80060a4:	e0b0      	b.n	8006208 <HAL_SPI_IRQHandler+0x1f0>
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	095b      	lsrs	r3, r3, #5
 80060aa:	001a      	movs	r2, r3
 80060ac:	2301      	movs	r3, #1
 80060ae:	4013      	ands	r3, r2
 80060b0:	d100      	bne.n	80060b4 <HAL_SPI_IRQHandler+0x9c>
 80060b2:	e0a9      	b.n	8006208 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	099b      	lsrs	r3, r3, #6
 80060b8:	001a      	movs	r2, r3
 80060ba:	2301      	movs	r3, #1
 80060bc:	4013      	ands	r3, r2
 80060be:	d023      	beq.n	8006108 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	225d      	movs	r2, #93	; 0x5d
 80060c4:	5c9b      	ldrb	r3, [r3, r2]
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b03      	cmp	r3, #3
 80060ca:	d011      	beq.n	80060f0 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d0:	2204      	movs	r2, #4
 80060d2:	431a      	orrs	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060d8:	2300      	movs	r3, #0
 80060da:	617b      	str	r3, [r7, #20]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	617b      	str	r3, [r7, #20]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	617b      	str	r3, [r7, #20]
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	e00b      	b.n	8006108 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060f0:	2300      	movs	r3, #0
 80060f2:	613b      	str	r3, [r7, #16]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	613b      	str	r3, [r7, #16]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	613b      	str	r3, [r7, #16]
 8006104:	693b      	ldr	r3, [r7, #16]
        return;
 8006106:	e07f      	b.n	8006208 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	095b      	lsrs	r3, r3, #5
 800610c:	001a      	movs	r2, r3
 800610e:	2301      	movs	r3, #1
 8006110:	4013      	ands	r3, r2
 8006112:	d014      	beq.n	800613e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006118:	2201      	movs	r2, #1
 800611a:	431a      	orrs	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006120:	2300      	movs	r3, #0
 8006122:	60fb      	str	r3, [r7, #12]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	60fb      	str	r3, [r7, #12]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2140      	movs	r1, #64	; 0x40
 8006138:	438a      	bics	r2, r1
 800613a:	601a      	str	r2, [r3, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	0a1b      	lsrs	r3, r3, #8
 8006142:	001a      	movs	r2, r3
 8006144:	2301      	movs	r3, #1
 8006146:	4013      	ands	r3, r2
 8006148:	d00c      	beq.n	8006164 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800614e:	2208      	movs	r2, #8
 8006150:	431a      	orrs	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006156:	2300      	movs	r3, #0
 8006158:	60bb      	str	r3, [r7, #8]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	60bb      	str	r3, [r7, #8]
 8006162:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006168:	2b00      	cmp	r3, #0
 800616a:	d04c      	beq.n	8006206 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	21e0      	movs	r1, #224	; 0xe0
 8006178:	438a      	bics	r2, r1
 800617a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	225d      	movs	r2, #93	; 0x5d
 8006180:	2101      	movs	r1, #1
 8006182:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	2202      	movs	r2, #2
 8006188:	4013      	ands	r3, r2
 800618a:	d103      	bne.n	8006194 <HAL_SPI_IRQHandler+0x17c>
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	2201      	movs	r2, #1
 8006190:	4013      	ands	r3, r2
 8006192:	d032      	beq.n	80061fa <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685a      	ldr	r2, [r3, #4]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2103      	movs	r1, #3
 80061a0:	438a      	bics	r2, r1
 80061a2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d010      	beq.n	80061ce <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b0:	4a17      	ldr	r2, [pc, #92]	; (8006210 <HAL_SPI_IRQHandler+0x1f8>)
 80061b2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b8:	0018      	movs	r0, r3
 80061ba:	f7fe fa25 	bl	8004608 <HAL_DMA_Abort_IT>
 80061be:	1e03      	subs	r3, r0, #0
 80061c0:	d005      	beq.n	80061ce <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061c6:	2240      	movs	r2, #64	; 0x40
 80061c8:	431a      	orrs	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d016      	beq.n	8006204 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061da:	4a0d      	ldr	r2, [pc, #52]	; (8006210 <HAL_SPI_IRQHandler+0x1f8>)
 80061dc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e2:	0018      	movs	r0, r3
 80061e4:	f7fe fa10 	bl	8004608 <HAL_DMA_Abort_IT>
 80061e8:	1e03      	subs	r3, r0, #0
 80061ea:	d00b      	beq.n	8006204 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061f0:	2240      	movs	r2, #64	; 0x40
 80061f2:	431a      	orrs	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80061f8:	e004      	b.n	8006204 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	0018      	movs	r0, r3
 80061fe:	f000 f809 	bl	8006214 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006202:	e000      	b.n	8006206 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8006204:	46c0      	nop			; (mov r8, r8)
    return;
 8006206:	46c0      	nop			; (mov r8, r8)
  }
}
 8006208:	46bd      	mov	sp, r7
 800620a:	b008      	add	sp, #32
 800620c:	bd80      	pop	{r7, pc}
 800620e:	46c0      	nop			; (mov r8, r8)
 8006210:	08006225 	.word	0x08006225

08006214 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800621c:	46c0      	nop			; (mov r8, r8)
 800621e:	46bd      	mov	sp, r7
 8006220:	b002      	add	sp, #8
 8006222:	bd80      	pop	{r7, pc}

08006224 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006230:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2246      	movs	r2, #70	; 0x46
 8006236:	2100      	movs	r1, #0
 8006238:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	0018      	movs	r0, r3
 8006244:	f7ff ffe6 	bl	8006214 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006248:	46c0      	nop			; (mov r8, r8)
 800624a:	46bd      	mov	sp, r7
 800624c:	b004      	add	sp, #16
 800624e:	bd80      	pop	{r7, pc}

08006250 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b088      	sub	sp, #32
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	603b      	str	r3, [r7, #0]
 800625c:	1dfb      	adds	r3, r7, #7
 800625e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006260:	f7fd fbb0 	bl	80039c4 <HAL_GetTick>
 8006264:	0002      	movs	r2, r0
 8006266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006268:	1a9b      	subs	r3, r3, r2
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	18d3      	adds	r3, r2, r3
 800626e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006270:	f7fd fba8 	bl	80039c4 <HAL_GetTick>
 8006274:	0003      	movs	r3, r0
 8006276:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006278:	4b3a      	ldr	r3, [pc, #232]	; (8006364 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	015b      	lsls	r3, r3, #5
 800627e:	0d1b      	lsrs	r3, r3, #20
 8006280:	69fa      	ldr	r2, [r7, #28]
 8006282:	4353      	muls	r3, r2
 8006284:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006286:	e058      	b.n	800633a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	3301      	adds	r3, #1
 800628c:	d055      	beq.n	800633a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800628e:	f7fd fb99 	bl	80039c4 <HAL_GetTick>
 8006292:	0002      	movs	r2, r0
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	69fa      	ldr	r2, [r7, #28]
 800629a:	429a      	cmp	r2, r3
 800629c:	d902      	bls.n	80062a4 <SPI_WaitFlagStateUntilTimeout+0x54>
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d142      	bne.n	800632a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	21e0      	movs	r1, #224	; 0xe0
 80062b0:	438a      	bics	r2, r1
 80062b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	2382      	movs	r3, #130	; 0x82
 80062ba:	005b      	lsls	r3, r3, #1
 80062bc:	429a      	cmp	r2, r3
 80062be:	d113      	bne.n	80062e8 <SPI_WaitFlagStateUntilTimeout+0x98>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	2380      	movs	r3, #128	; 0x80
 80062c6:	021b      	lsls	r3, r3, #8
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d005      	beq.n	80062d8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	2380      	movs	r3, #128	; 0x80
 80062d2:	00db      	lsls	r3, r3, #3
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d107      	bne.n	80062e8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2140      	movs	r1, #64	; 0x40
 80062e4:	438a      	bics	r2, r1
 80062e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062ec:	2380      	movs	r3, #128	; 0x80
 80062ee:	019b      	lsls	r3, r3, #6
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d110      	bne.n	8006316 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	491a      	ldr	r1, [pc, #104]	; (8006368 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006300:	400a      	ands	r2, r1
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2180      	movs	r1, #128	; 0x80
 8006310:	0189      	lsls	r1, r1, #6
 8006312:	430a      	orrs	r2, r1
 8006314:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	225d      	movs	r2, #93	; 0x5d
 800631a:	2101      	movs	r1, #1
 800631c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	225c      	movs	r2, #92	; 0x5c
 8006322:	2100      	movs	r1, #0
 8006324:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e017      	b.n	800635a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006330:	2300      	movs	r3, #0
 8006332:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	3b01      	subs	r3, #1
 8006338:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	4013      	ands	r3, r2
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	425a      	negs	r2, r3
 800634a:	4153      	adcs	r3, r2
 800634c:	b2db      	uxtb	r3, r3
 800634e:	001a      	movs	r2, r3
 8006350:	1dfb      	adds	r3, r7, #7
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	d197      	bne.n	8006288 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	0018      	movs	r0, r3
 800635c:	46bd      	mov	sp, r7
 800635e:	b008      	add	sp, #32
 8006360:	bd80      	pop	{r7, pc}
 8006362:	46c0      	nop			; (mov r8, r8)
 8006364:	20000000 	.word	0x20000000
 8006368:	ffffdfff 	.word	0xffffdfff

0800636c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b08a      	sub	sp, #40	; 0x28
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800637a:	2317      	movs	r3, #23
 800637c:	18fb      	adds	r3, r7, r3
 800637e:	2200      	movs	r2, #0
 8006380:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006382:	f7fd fb1f 	bl	80039c4 <HAL_GetTick>
 8006386:	0002      	movs	r2, r0
 8006388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638a:	1a9b      	subs	r3, r3, r2
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	18d3      	adds	r3, r2, r3
 8006390:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006392:	f7fd fb17 	bl	80039c4 <HAL_GetTick>
 8006396:	0003      	movs	r3, r0
 8006398:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	330c      	adds	r3, #12
 80063a0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80063a2:	4b41      	ldr	r3, [pc, #260]	; (80064a8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	0013      	movs	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	189b      	adds	r3, r3, r2
 80063ac:	00da      	lsls	r2, r3, #3
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	0d1b      	lsrs	r3, r3, #20
 80063b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b4:	4353      	muls	r3, r2
 80063b6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80063b8:	e068      	b.n	800648c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	23c0      	movs	r3, #192	; 0xc0
 80063be:	00db      	lsls	r3, r3, #3
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d10a      	bne.n	80063da <SPI_WaitFifoStateUntilTimeout+0x6e>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d107      	bne.n	80063da <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	2117      	movs	r1, #23
 80063d2:	187b      	adds	r3, r7, r1
 80063d4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80063d6:	187b      	adds	r3, r7, r1
 80063d8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	3301      	adds	r3, #1
 80063de:	d055      	beq.n	800648c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063e0:	f7fd faf0 	bl	80039c4 <HAL_GetTick>
 80063e4:	0002      	movs	r2, r0
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d902      	bls.n	80063f6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d142      	bne.n	800647c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	21e0      	movs	r1, #224	; 0xe0
 8006402:	438a      	bics	r2, r1
 8006404:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	2382      	movs	r3, #130	; 0x82
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	429a      	cmp	r2, r3
 8006410:	d113      	bne.n	800643a <SPI_WaitFifoStateUntilTimeout+0xce>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	689a      	ldr	r2, [r3, #8]
 8006416:	2380      	movs	r3, #128	; 0x80
 8006418:	021b      	lsls	r3, r3, #8
 800641a:	429a      	cmp	r2, r3
 800641c:	d005      	beq.n	800642a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	689a      	ldr	r2, [r3, #8]
 8006422:	2380      	movs	r3, #128	; 0x80
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	429a      	cmp	r2, r3
 8006428:	d107      	bne.n	800643a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2140      	movs	r1, #64	; 0x40
 8006436:	438a      	bics	r2, r1
 8006438:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800643e:	2380      	movs	r3, #128	; 0x80
 8006440:	019b      	lsls	r3, r3, #6
 8006442:	429a      	cmp	r2, r3
 8006444:	d110      	bne.n	8006468 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4916      	ldr	r1, [pc, #88]	; (80064ac <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006452:	400a      	ands	r2, r1
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2180      	movs	r1, #128	; 0x80
 8006462:	0189      	lsls	r1, r1, #6
 8006464:	430a      	orrs	r2, r1
 8006466:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	225d      	movs	r2, #93	; 0x5d
 800646c:	2101      	movs	r1, #1
 800646e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	225c      	movs	r2, #92	; 0x5c
 8006474:	2100      	movs	r1, #0
 8006476:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e010      	b.n	800649e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d101      	bne.n	8006486 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006482:	2300      	movs	r3, #0
 8006484:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	3b01      	subs	r3, #1
 800648a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	4013      	ands	r3, r2
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	429a      	cmp	r2, r3
 800649a:	d18e      	bne.n	80063ba <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	0018      	movs	r0, r3
 80064a0:	46bd      	mov	sp, r7
 80064a2:	b00a      	add	sp, #40	; 0x28
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	46c0      	nop			; (mov r8, r8)
 80064a8:	20000000 	.word	0x20000000
 80064ac:	ffffdfff 	.word	0xffffdfff

080064b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af02      	add	r7, sp, #8
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	23c0      	movs	r3, #192	; 0xc0
 80064c0:	0159      	lsls	r1, r3, #5
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	0013      	movs	r3, r2
 80064ca:	2200      	movs	r2, #0
 80064cc:	f7ff ff4e 	bl	800636c <SPI_WaitFifoStateUntilTimeout>
 80064d0:	1e03      	subs	r3, r0, #0
 80064d2:	d007      	beq.n	80064e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064d8:	2220      	movs	r2, #32
 80064da:	431a      	orrs	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e027      	b.n	8006534 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	0013      	movs	r3, r2
 80064ee:	2200      	movs	r2, #0
 80064f0:	2180      	movs	r1, #128	; 0x80
 80064f2:	f7ff fead 	bl	8006250 <SPI_WaitFlagStateUntilTimeout>
 80064f6:	1e03      	subs	r3, r0, #0
 80064f8:	d007      	beq.n	800650a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064fe:	2220      	movs	r2, #32
 8006500:	431a      	orrs	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e014      	b.n	8006534 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	23c0      	movs	r3, #192	; 0xc0
 800650e:	00d9      	lsls	r1, r3, #3
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	9300      	str	r3, [sp, #0]
 8006516:	0013      	movs	r3, r2
 8006518:	2200      	movs	r2, #0
 800651a:	f7ff ff27 	bl	800636c <SPI_WaitFifoStateUntilTimeout>
 800651e:	1e03      	subs	r3, r0, #0
 8006520:	d007      	beq.n	8006532 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006526:	2220      	movs	r2, #32
 8006528:	431a      	orrs	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e000      	b.n	8006534 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	0018      	movs	r0, r3
 8006536:	46bd      	mov	sp, r7
 8006538:	b004      	add	sp, #16
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e04a      	b.n	80065e4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	223d      	movs	r2, #61	; 0x3d
 8006552:	5c9b      	ldrb	r3, [r3, r2]
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d107      	bne.n	800656a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	223c      	movs	r2, #60	; 0x3c
 800655e:	2100      	movs	r1, #0
 8006560:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	0018      	movs	r0, r3
 8006566:	f7fd f829 	bl	80035bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	223d      	movs	r2, #61	; 0x3d
 800656e:	2102      	movs	r1, #2
 8006570:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	3304      	adds	r3, #4
 800657a:	0019      	movs	r1, r3
 800657c:	0010      	movs	r0, r2
 800657e:	f000 fadd 	bl	8006b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2248      	movs	r2, #72	; 0x48
 8006586:	2101      	movs	r1, #1
 8006588:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	223e      	movs	r2, #62	; 0x3e
 800658e:	2101      	movs	r1, #1
 8006590:	5499      	strb	r1, [r3, r2]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	223f      	movs	r2, #63	; 0x3f
 8006596:	2101      	movs	r1, #1
 8006598:	5499      	strb	r1, [r3, r2]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2240      	movs	r2, #64	; 0x40
 800659e:	2101      	movs	r1, #1
 80065a0:	5499      	strb	r1, [r3, r2]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2241      	movs	r2, #65	; 0x41
 80065a6:	2101      	movs	r1, #1
 80065a8:	5499      	strb	r1, [r3, r2]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2242      	movs	r2, #66	; 0x42
 80065ae:	2101      	movs	r1, #1
 80065b0:	5499      	strb	r1, [r3, r2]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2243      	movs	r2, #67	; 0x43
 80065b6:	2101      	movs	r1, #1
 80065b8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2244      	movs	r2, #68	; 0x44
 80065be:	2101      	movs	r1, #1
 80065c0:	5499      	strb	r1, [r3, r2]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2245      	movs	r2, #69	; 0x45
 80065c6:	2101      	movs	r1, #1
 80065c8:	5499      	strb	r1, [r3, r2]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2246      	movs	r2, #70	; 0x46
 80065ce:	2101      	movs	r1, #1
 80065d0:	5499      	strb	r1, [r3, r2]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2247      	movs	r2, #71	; 0x47
 80065d6:	2101      	movs	r1, #1
 80065d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	223d      	movs	r2, #61	; 0x3d
 80065de:	2101      	movs	r1, #1
 80065e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	0018      	movs	r0, r3
 80065e6:	46bd      	mov	sp, r7
 80065e8:	b002      	add	sp, #8
 80065ea:	bd80      	pop	{r7, pc}

080065ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	223d      	movs	r2, #61	; 0x3d
 80065f8:	5c9b      	ldrb	r3, [r3, r2]
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d001      	beq.n	8006604 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e042      	b.n	800668a <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	223d      	movs	r2, #61	; 0x3d
 8006608:	2102      	movs	r1, #2
 800660a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68da      	ldr	r2, [r3, #12]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2101      	movs	r1, #1
 8006618:	430a      	orrs	r2, r1
 800661a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a1c      	ldr	r2, [pc, #112]	; (8006694 <HAL_TIM_Base_Start_IT+0xa8>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d00f      	beq.n	8006646 <HAL_TIM_Base_Start_IT+0x5a>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	2380      	movs	r3, #128	; 0x80
 800662c:	05db      	lsls	r3, r3, #23
 800662e:	429a      	cmp	r2, r3
 8006630:	d009      	beq.n	8006646 <HAL_TIM_Base_Start_IT+0x5a>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a18      	ldr	r2, [pc, #96]	; (8006698 <HAL_TIM_Base_Start_IT+0xac>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d004      	beq.n	8006646 <HAL_TIM_Base_Start_IT+0x5a>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a16      	ldr	r2, [pc, #88]	; (800669c <HAL_TIM_Base_Start_IT+0xb0>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d116      	bne.n	8006674 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	4a14      	ldr	r2, [pc, #80]	; (80066a0 <HAL_TIM_Base_Start_IT+0xb4>)
 800664e:	4013      	ands	r3, r2
 8006650:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2b06      	cmp	r3, #6
 8006656:	d016      	beq.n	8006686 <HAL_TIM_Base_Start_IT+0x9a>
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	2380      	movs	r3, #128	; 0x80
 800665c:	025b      	lsls	r3, r3, #9
 800665e:	429a      	cmp	r2, r3
 8006660:	d011      	beq.n	8006686 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2101      	movs	r1, #1
 800666e:	430a      	orrs	r2, r1
 8006670:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006672:	e008      	b.n	8006686 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2101      	movs	r1, #1
 8006680:	430a      	orrs	r2, r1
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	e000      	b.n	8006688 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006686:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	0018      	movs	r0, r3
 800668c:	46bd      	mov	sp, r7
 800668e:	b004      	add	sp, #16
 8006690:	bd80      	pop	{r7, pc}
 8006692:	46c0      	nop			; (mov r8, r8)
 8006694:	40012c00 	.word	0x40012c00
 8006698:	40000400 	.word	0x40000400
 800669c:	40014000 	.word	0x40014000
 80066a0:	00010007 	.word	0x00010007

080066a4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68da      	ldr	r2, [r3, #12]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2101      	movs	r1, #1
 80066b8:	438a      	bics	r2, r1
 80066ba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	4a0d      	ldr	r2, [pc, #52]	; (80066f8 <HAL_TIM_Base_Stop_IT+0x54>)
 80066c4:	4013      	ands	r3, r2
 80066c6:	d10d      	bne.n	80066e4 <HAL_TIM_Base_Stop_IT+0x40>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	4a0b      	ldr	r2, [pc, #44]	; (80066fc <HAL_TIM_Base_Stop_IT+0x58>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	d107      	bne.n	80066e4 <HAL_TIM_Base_Stop_IT+0x40>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2101      	movs	r1, #1
 80066e0:	438a      	bics	r2, r1
 80066e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	223d      	movs	r2, #61	; 0x3d
 80066e8:	2101      	movs	r1, #1
 80066ea:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	0018      	movs	r0, r3
 80066f0:	46bd      	mov	sp, r7
 80066f2:	b002      	add	sp, #8
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	46c0      	nop			; (mov r8, r8)
 80066f8:	00001111 	.word	0x00001111
 80066fc:	00000444 	.word	0x00000444

08006700 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	2202      	movs	r2, #2
 8006710:	4013      	ands	r3, r2
 8006712:	2b02      	cmp	r3, #2
 8006714:	d124      	bne.n	8006760 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	2202      	movs	r2, #2
 800671e:	4013      	ands	r3, r2
 8006720:	2b02      	cmp	r3, #2
 8006722:	d11d      	bne.n	8006760 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2203      	movs	r2, #3
 800672a:	4252      	negs	r2, r2
 800672c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	2203      	movs	r2, #3
 800673c:	4013      	ands	r3, r2
 800673e:	d004      	beq.n	800674a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	0018      	movs	r0, r3
 8006744:	f000 f9e2 	bl	8006b0c <HAL_TIM_IC_CaptureCallback>
 8006748:	e007      	b.n	800675a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	0018      	movs	r0, r3
 800674e:	f000 f9d5 	bl	8006afc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	0018      	movs	r0, r3
 8006756:	f000 f9e1 	bl	8006b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	2204      	movs	r2, #4
 8006768:	4013      	ands	r3, r2
 800676a:	2b04      	cmp	r3, #4
 800676c:	d125      	bne.n	80067ba <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	2204      	movs	r2, #4
 8006776:	4013      	ands	r3, r2
 8006778:	2b04      	cmp	r3, #4
 800677a:	d11e      	bne.n	80067ba <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2205      	movs	r2, #5
 8006782:	4252      	negs	r2, r2
 8006784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2202      	movs	r2, #2
 800678a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	699a      	ldr	r2, [r3, #24]
 8006792:	23c0      	movs	r3, #192	; 0xc0
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4013      	ands	r3, r2
 8006798:	d004      	beq.n	80067a4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	0018      	movs	r0, r3
 800679e:	f000 f9b5 	bl	8006b0c <HAL_TIM_IC_CaptureCallback>
 80067a2:	e007      	b.n	80067b4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	0018      	movs	r0, r3
 80067a8:	f000 f9a8 	bl	8006afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	0018      	movs	r0, r3
 80067b0:	f000 f9b4 	bl	8006b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	2208      	movs	r2, #8
 80067c2:	4013      	ands	r3, r2
 80067c4:	2b08      	cmp	r3, #8
 80067c6:	d124      	bne.n	8006812 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	2208      	movs	r2, #8
 80067d0:	4013      	ands	r3, r2
 80067d2:	2b08      	cmp	r3, #8
 80067d4:	d11d      	bne.n	8006812 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2209      	movs	r2, #9
 80067dc:	4252      	negs	r2, r2
 80067de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2204      	movs	r2, #4
 80067e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	69db      	ldr	r3, [r3, #28]
 80067ec:	2203      	movs	r2, #3
 80067ee:	4013      	ands	r3, r2
 80067f0:	d004      	beq.n	80067fc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	0018      	movs	r0, r3
 80067f6:	f000 f989 	bl	8006b0c <HAL_TIM_IC_CaptureCallback>
 80067fa:	e007      	b.n	800680c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	0018      	movs	r0, r3
 8006800:	f000 f97c 	bl	8006afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	0018      	movs	r0, r3
 8006808:	f000 f988 	bl	8006b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	2210      	movs	r2, #16
 800681a:	4013      	ands	r3, r2
 800681c:	2b10      	cmp	r3, #16
 800681e:	d125      	bne.n	800686c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	2210      	movs	r2, #16
 8006828:	4013      	ands	r3, r2
 800682a:	2b10      	cmp	r3, #16
 800682c:	d11e      	bne.n	800686c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2211      	movs	r2, #17
 8006834:	4252      	negs	r2, r2
 8006836:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2208      	movs	r2, #8
 800683c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	69da      	ldr	r2, [r3, #28]
 8006844:	23c0      	movs	r3, #192	; 0xc0
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4013      	ands	r3, r2
 800684a:	d004      	beq.n	8006856 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	0018      	movs	r0, r3
 8006850:	f000 f95c 	bl	8006b0c <HAL_TIM_IC_CaptureCallback>
 8006854:	e007      	b.n	8006866 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	0018      	movs	r0, r3
 800685a:	f000 f94f 	bl	8006afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	0018      	movs	r0, r3
 8006862:	f000 f95b 	bl	8006b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	2201      	movs	r2, #1
 8006874:	4013      	ands	r3, r2
 8006876:	2b01      	cmp	r3, #1
 8006878:	d10f      	bne.n	800689a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	2201      	movs	r2, #1
 8006882:	4013      	ands	r3, r2
 8006884:	2b01      	cmp	r3, #1
 8006886:	d108      	bne.n	800689a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2202      	movs	r2, #2
 800688e:	4252      	negs	r2, r2
 8006890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	0018      	movs	r0, r3
 8006896:	f7fc f881 	bl	800299c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	2280      	movs	r2, #128	; 0x80
 80068a2:	4013      	ands	r3, r2
 80068a4:	2b80      	cmp	r3, #128	; 0x80
 80068a6:	d10f      	bne.n	80068c8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	2280      	movs	r2, #128	; 0x80
 80068b0:	4013      	ands	r3, r2
 80068b2:	2b80      	cmp	r3, #128	; 0x80
 80068b4:	d108      	bne.n	80068c8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2281      	movs	r2, #129	; 0x81
 80068bc:	4252      	negs	r2, r2
 80068be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	0018      	movs	r0, r3
 80068c4:	f000 facc 	bl	8006e60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	691a      	ldr	r2, [r3, #16]
 80068ce:	2380      	movs	r3, #128	; 0x80
 80068d0:	005b      	lsls	r3, r3, #1
 80068d2:	401a      	ands	r2, r3
 80068d4:	2380      	movs	r3, #128	; 0x80
 80068d6:	005b      	lsls	r3, r3, #1
 80068d8:	429a      	cmp	r2, r3
 80068da:	d10e      	bne.n	80068fa <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	2280      	movs	r2, #128	; 0x80
 80068e4:	4013      	ands	r3, r2
 80068e6:	2b80      	cmp	r3, #128	; 0x80
 80068e8:	d107      	bne.n	80068fa <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a1c      	ldr	r2, [pc, #112]	; (8006960 <HAL_TIM_IRQHandler+0x260>)
 80068f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	0018      	movs	r0, r3
 80068f6:	f000 fabb 	bl	8006e70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	2240      	movs	r2, #64	; 0x40
 8006902:	4013      	ands	r3, r2
 8006904:	2b40      	cmp	r3, #64	; 0x40
 8006906:	d10f      	bne.n	8006928 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	2240      	movs	r2, #64	; 0x40
 8006910:	4013      	ands	r3, r2
 8006912:	2b40      	cmp	r3, #64	; 0x40
 8006914:	d108      	bne.n	8006928 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2241      	movs	r2, #65	; 0x41
 800691c:	4252      	negs	r2, r2
 800691e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	0018      	movs	r0, r3
 8006924:	f000 f902 	bl	8006b2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	2220      	movs	r2, #32
 8006930:	4013      	ands	r3, r2
 8006932:	2b20      	cmp	r3, #32
 8006934:	d10f      	bne.n	8006956 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	2220      	movs	r2, #32
 800693e:	4013      	ands	r3, r2
 8006940:	2b20      	cmp	r3, #32
 8006942:	d108      	bne.n	8006956 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2221      	movs	r2, #33	; 0x21
 800694a:	4252      	negs	r2, r2
 800694c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	0018      	movs	r0, r3
 8006952:	f000 fa7d 	bl	8006e50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006956:	46c0      	nop			; (mov r8, r8)
 8006958:	46bd      	mov	sp, r7
 800695a:	b002      	add	sp, #8
 800695c:	bd80      	pop	{r7, pc}
 800695e:	46c0      	nop			; (mov r8, r8)
 8006960:	fffffeff 	.word	0xfffffeff

08006964 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	223c      	movs	r2, #60	; 0x3c
 8006972:	5c9b      	ldrb	r3, [r3, r2]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d101      	bne.n	800697c <HAL_TIM_ConfigClockSource+0x18>
 8006978:	2302      	movs	r3, #2
 800697a:	e0b7      	b.n	8006aec <HAL_TIM_ConfigClockSource+0x188>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	223c      	movs	r2, #60	; 0x3c
 8006980:	2101      	movs	r1, #1
 8006982:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	223d      	movs	r2, #61	; 0x3d
 8006988:	2102      	movs	r1, #2
 800698a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4a57      	ldr	r2, [pc, #348]	; (8006af4 <HAL_TIM_ConfigClockSource+0x190>)
 8006998:	4013      	ands	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4a56      	ldr	r2, [pc, #344]	; (8006af8 <HAL_TIM_ConfigClockSource+0x194>)
 80069a0:	4013      	ands	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2280      	movs	r2, #128	; 0x80
 80069b2:	0192      	lsls	r2, r2, #6
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d040      	beq.n	8006a3a <HAL_TIM_ConfigClockSource+0xd6>
 80069b8:	2280      	movs	r2, #128	; 0x80
 80069ba:	0192      	lsls	r2, r2, #6
 80069bc:	4293      	cmp	r3, r2
 80069be:	d900      	bls.n	80069c2 <HAL_TIM_ConfigClockSource+0x5e>
 80069c0:	e088      	b.n	8006ad4 <HAL_TIM_ConfigClockSource+0x170>
 80069c2:	2280      	movs	r2, #128	; 0x80
 80069c4:	0152      	lsls	r2, r2, #5
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d100      	bne.n	80069cc <HAL_TIM_ConfigClockSource+0x68>
 80069ca:	e085      	b.n	8006ad8 <HAL_TIM_ConfigClockSource+0x174>
 80069cc:	2280      	movs	r2, #128	; 0x80
 80069ce:	0152      	lsls	r2, r2, #5
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d900      	bls.n	80069d6 <HAL_TIM_ConfigClockSource+0x72>
 80069d4:	e07e      	b.n	8006ad4 <HAL_TIM_ConfigClockSource+0x170>
 80069d6:	2b70      	cmp	r3, #112	; 0x70
 80069d8:	d018      	beq.n	8006a0c <HAL_TIM_ConfigClockSource+0xa8>
 80069da:	d900      	bls.n	80069de <HAL_TIM_ConfigClockSource+0x7a>
 80069dc:	e07a      	b.n	8006ad4 <HAL_TIM_ConfigClockSource+0x170>
 80069de:	2b60      	cmp	r3, #96	; 0x60
 80069e0:	d04f      	beq.n	8006a82 <HAL_TIM_ConfigClockSource+0x11e>
 80069e2:	d900      	bls.n	80069e6 <HAL_TIM_ConfigClockSource+0x82>
 80069e4:	e076      	b.n	8006ad4 <HAL_TIM_ConfigClockSource+0x170>
 80069e6:	2b50      	cmp	r3, #80	; 0x50
 80069e8:	d03b      	beq.n	8006a62 <HAL_TIM_ConfigClockSource+0xfe>
 80069ea:	d900      	bls.n	80069ee <HAL_TIM_ConfigClockSource+0x8a>
 80069ec:	e072      	b.n	8006ad4 <HAL_TIM_ConfigClockSource+0x170>
 80069ee:	2b40      	cmp	r3, #64	; 0x40
 80069f0:	d057      	beq.n	8006aa2 <HAL_TIM_ConfigClockSource+0x13e>
 80069f2:	d900      	bls.n	80069f6 <HAL_TIM_ConfigClockSource+0x92>
 80069f4:	e06e      	b.n	8006ad4 <HAL_TIM_ConfigClockSource+0x170>
 80069f6:	2b30      	cmp	r3, #48	; 0x30
 80069f8:	d063      	beq.n	8006ac2 <HAL_TIM_ConfigClockSource+0x15e>
 80069fa:	d86b      	bhi.n	8006ad4 <HAL_TIM_ConfigClockSource+0x170>
 80069fc:	2b20      	cmp	r3, #32
 80069fe:	d060      	beq.n	8006ac2 <HAL_TIM_ConfigClockSource+0x15e>
 8006a00:	d868      	bhi.n	8006ad4 <HAL_TIM_ConfigClockSource+0x170>
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d05d      	beq.n	8006ac2 <HAL_TIM_ConfigClockSource+0x15e>
 8006a06:	2b10      	cmp	r3, #16
 8006a08:	d05b      	beq.n	8006ac2 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006a0a:	e063      	b.n	8006ad4 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6818      	ldr	r0, [r3, #0]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	6899      	ldr	r1, [r3, #8]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	f000 f98a 	bl	8006d34 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2277      	movs	r2, #119	; 0x77
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	609a      	str	r2, [r3, #8]
      break;
 8006a38:	e04f      	b.n	8006ada <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6818      	ldr	r0, [r3, #0]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	6899      	ldr	r1, [r3, #8]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	f000 f973 	bl	8006d34 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689a      	ldr	r2, [r3, #8]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2180      	movs	r1, #128	; 0x80
 8006a5a:	01c9      	lsls	r1, r1, #7
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	609a      	str	r2, [r3, #8]
      break;
 8006a60:	e03b      	b.n	8006ada <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6818      	ldr	r0, [r3, #0]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	6859      	ldr	r1, [r3, #4]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	001a      	movs	r2, r3
 8006a70:	f000 f8e4 	bl	8006c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2150      	movs	r1, #80	; 0x50
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	f000 f93e 	bl	8006cfc <TIM_ITRx_SetConfig>
      break;
 8006a80:	e02b      	b.n	8006ada <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6818      	ldr	r0, [r3, #0]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	6859      	ldr	r1, [r3, #4]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	001a      	movs	r2, r3
 8006a90:	f000 f902 	bl	8006c98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2160      	movs	r1, #96	; 0x60
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	f000 f92e 	bl	8006cfc <TIM_ITRx_SetConfig>
      break;
 8006aa0:	e01b      	b.n	8006ada <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6818      	ldr	r0, [r3, #0]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	6859      	ldr	r1, [r3, #4]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	001a      	movs	r2, r3
 8006ab0:	f000 f8c4 	bl	8006c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2140      	movs	r1, #64	; 0x40
 8006aba:	0018      	movs	r0, r3
 8006abc:	f000 f91e 	bl	8006cfc <TIM_ITRx_SetConfig>
      break;
 8006ac0:	e00b      	b.n	8006ada <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	0019      	movs	r1, r3
 8006acc:	0010      	movs	r0, r2
 8006ace:	f000 f915 	bl	8006cfc <TIM_ITRx_SetConfig>
        break;
 8006ad2:	e002      	b.n	8006ada <HAL_TIM_ConfigClockSource+0x176>
      break;
 8006ad4:	46c0      	nop			; (mov r8, r8)
 8006ad6:	e000      	b.n	8006ada <HAL_TIM_ConfigClockSource+0x176>
      break;
 8006ad8:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	223d      	movs	r2, #61	; 0x3d
 8006ade:	2101      	movs	r1, #1
 8006ae0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	223c      	movs	r2, #60	; 0x3c
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	0018      	movs	r0, r3
 8006aee:	46bd      	mov	sp, r7
 8006af0:	b004      	add	sp, #16
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	ffceff88 	.word	0xffceff88
 8006af8:	ffff00ff 	.word	0xffff00ff

08006afc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b04:	46c0      	nop			; (mov r8, r8)
 8006b06:	46bd      	mov	sp, r7
 8006b08:	b002      	add	sp, #8
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b14:	46c0      	nop			; (mov r8, r8)
 8006b16:	46bd      	mov	sp, r7
 8006b18:	b002      	add	sp, #8
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b24:	46c0      	nop			; (mov r8, r8)
 8006b26:	46bd      	mov	sp, r7
 8006b28:	b002      	add	sp, #8
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b34:	46c0      	nop			; (mov r8, r8)
 8006b36:	46bd      	mov	sp, r7
 8006b38:	b002      	add	sp, #8
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a34      	ldr	r2, [pc, #208]	; (8006c20 <TIM_Base_SetConfig+0xe4>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d008      	beq.n	8006b66 <TIM_Base_SetConfig+0x2a>
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	2380      	movs	r3, #128	; 0x80
 8006b58:	05db      	lsls	r3, r3, #23
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d003      	beq.n	8006b66 <TIM_Base_SetConfig+0x2a>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a30      	ldr	r2, [pc, #192]	; (8006c24 <TIM_Base_SetConfig+0xe8>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d108      	bne.n	8006b78 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2270      	movs	r2, #112	; 0x70
 8006b6a:	4393      	bics	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a29      	ldr	r2, [pc, #164]	; (8006c20 <TIM_Base_SetConfig+0xe4>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d018      	beq.n	8006bb2 <TIM_Base_SetConfig+0x76>
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	2380      	movs	r3, #128	; 0x80
 8006b84:	05db      	lsls	r3, r3, #23
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d013      	beq.n	8006bb2 <TIM_Base_SetConfig+0x76>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a25      	ldr	r2, [pc, #148]	; (8006c24 <TIM_Base_SetConfig+0xe8>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d00f      	beq.n	8006bb2 <TIM_Base_SetConfig+0x76>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a24      	ldr	r2, [pc, #144]	; (8006c28 <TIM_Base_SetConfig+0xec>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d00b      	beq.n	8006bb2 <TIM_Base_SetConfig+0x76>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a23      	ldr	r2, [pc, #140]	; (8006c2c <TIM_Base_SetConfig+0xf0>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d007      	beq.n	8006bb2 <TIM_Base_SetConfig+0x76>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a22      	ldr	r2, [pc, #136]	; (8006c30 <TIM_Base_SetConfig+0xf4>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d003      	beq.n	8006bb2 <TIM_Base_SetConfig+0x76>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a21      	ldr	r2, [pc, #132]	; (8006c34 <TIM_Base_SetConfig+0xf8>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d108      	bne.n	8006bc4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	4a20      	ldr	r2, [pc, #128]	; (8006c38 <TIM_Base_SetConfig+0xfc>)
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2280      	movs	r2, #128	; 0x80
 8006bc8:	4393      	bics	r3, r2
 8006bca:	001a      	movs	r2, r3
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	695b      	ldr	r3, [r3, #20]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	689a      	ldr	r2, [r3, #8]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a0c      	ldr	r2, [pc, #48]	; (8006c20 <TIM_Base_SetConfig+0xe4>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d00b      	beq.n	8006c0a <TIM_Base_SetConfig+0xce>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a0d      	ldr	r2, [pc, #52]	; (8006c2c <TIM_Base_SetConfig+0xf0>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d007      	beq.n	8006c0a <TIM_Base_SetConfig+0xce>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a0c      	ldr	r2, [pc, #48]	; (8006c30 <TIM_Base_SetConfig+0xf4>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d003      	beq.n	8006c0a <TIM_Base_SetConfig+0xce>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a0b      	ldr	r2, [pc, #44]	; (8006c34 <TIM_Base_SetConfig+0xf8>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d103      	bne.n	8006c12 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	691a      	ldr	r2, [r3, #16]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	615a      	str	r2, [r3, #20]
}
 8006c18:	46c0      	nop			; (mov r8, r8)
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	b004      	add	sp, #16
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	40012c00 	.word	0x40012c00
 8006c24:	40000400 	.word	0x40000400
 8006c28:	40002000 	.word	0x40002000
 8006c2c:	40014000 	.word	0x40014000
 8006c30:	40014400 	.word	0x40014400
 8006c34:	40014800 	.word	0x40014800
 8006c38:	fffffcff 	.word	0xfffffcff

08006c3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	2201      	movs	r2, #1
 8006c54:	4393      	bics	r3, r2
 8006c56:	001a      	movs	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	22f0      	movs	r2, #240	; 0xf0
 8006c66:	4393      	bics	r3, r2
 8006c68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	011b      	lsls	r3, r3, #4
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	220a      	movs	r2, #10
 8006c78:	4393      	bics	r3, r2
 8006c7a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	621a      	str	r2, [r3, #32]
}
 8006c90:	46c0      	nop			; (mov r8, r8)
 8006c92:	46bd      	mov	sp, r7
 8006c94:	b006      	add	sp, #24
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	2210      	movs	r2, #16
 8006caa:	4393      	bics	r3, r2
 8006cac:	001a      	movs	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	4a0d      	ldr	r2, [pc, #52]	; (8006cf8 <TIM_TI2_ConfigInputStage+0x60>)
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	031b      	lsls	r3, r3, #12
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	22a0      	movs	r2, #160	; 0xa0
 8006cd4:	4393      	bics	r3, r2
 8006cd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	011b      	lsls	r3, r3, #4
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	621a      	str	r2, [r3, #32]
}
 8006cee:	46c0      	nop			; (mov r8, r8)
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	b006      	add	sp, #24
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	46c0      	nop			; (mov r8, r8)
 8006cf8:	ffff0fff 	.word	0xffff0fff

08006cfc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	4a08      	ldr	r2, [pc, #32]	; (8006d30 <TIM_ITRx_SetConfig+0x34>)
 8006d10:	4013      	ands	r3, r2
 8006d12:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d14:	683a      	ldr	r2, [r7, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	2207      	movs	r2, #7
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	609a      	str	r2, [r3, #8]
}
 8006d26:	46c0      	nop			; (mov r8, r8)
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	b004      	add	sp, #16
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	46c0      	nop			; (mov r8, r8)
 8006d30:	ffcfff8f 	.word	0xffcfff8f

08006d34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
 8006d40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	4a09      	ldr	r2, [pc, #36]	; (8006d70 <TIM_ETR_SetConfig+0x3c>)
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	021a      	lsls	r2, r3, #8
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	431a      	orrs	r2, r3
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	609a      	str	r2, [r3, #8]
}
 8006d68:	46c0      	nop			; (mov r8, r8)
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	b006      	add	sp, #24
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	ffff00ff 	.word	0xffff00ff

08006d74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	223c      	movs	r2, #60	; 0x3c
 8006d82:	5c9b      	ldrb	r3, [r3, r2]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d101      	bne.n	8006d8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d88:	2302      	movs	r3, #2
 8006d8a:	e055      	b.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	223c      	movs	r2, #60	; 0x3c
 8006d90:	2101      	movs	r1, #1
 8006d92:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	223d      	movs	r2, #61	; 0x3d
 8006d98:	2102      	movs	r1, #2
 8006d9a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a23      	ldr	r2, [pc, #140]	; (8006e40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d108      	bne.n	8006dc8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	4a22      	ldr	r2, [pc, #136]	; (8006e44 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006dba:	4013      	ands	r3, r2
 8006dbc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2270      	movs	r2, #112	; 0x70
 8006dcc:	4393      	bics	r3, r2
 8006dce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a16      	ldr	r2, [pc, #88]	; (8006e40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d00f      	beq.n	8006e0c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	2380      	movs	r3, #128	; 0x80
 8006df2:	05db      	lsls	r3, r3, #23
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d009      	beq.n	8006e0c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a12      	ldr	r2, [pc, #72]	; (8006e48 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d004      	beq.n	8006e0c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a11      	ldr	r2, [pc, #68]	; (8006e4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d10c      	bne.n	8006e26 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	2280      	movs	r2, #128	; 0x80
 8006e10:	4393      	bics	r3, r2
 8006e12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	223d      	movs	r2, #61	; 0x3d
 8006e2a:	2101      	movs	r1, #1
 8006e2c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	223c      	movs	r2, #60	; 0x3c
 8006e32:	2100      	movs	r1, #0
 8006e34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	0018      	movs	r0, r3
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	b004      	add	sp, #16
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	40012c00 	.word	0x40012c00
 8006e44:	ff0fffff 	.word	0xff0fffff
 8006e48:	40000400 	.word	0x40000400
 8006e4c:	40014000 	.word	0x40014000

08006e50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e58:	46c0      	nop			; (mov r8, r8)
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	b002      	add	sp, #8
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e68:	46c0      	nop			; (mov r8, r8)
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	b002      	add	sp, #8
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e78:	46c0      	nop			; (mov r8, r8)
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	b002      	add	sp, #8
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e046      	b.n	8006f20 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2284      	movs	r2, #132	; 0x84
 8006e96:	589b      	ldr	r3, [r3, r2]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d107      	bne.n	8006eac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2280      	movs	r2, #128	; 0x80
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	f7fc fbac 	bl	8003604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2284      	movs	r2, #132	; 0x84
 8006eb0:	2124      	movs	r1, #36	; 0x24
 8006eb2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	438a      	bics	r2, r1
 8006ec2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	0018      	movs	r0, r3
 8006ec8:	f000 fc7c 	bl	80077c4 <UART_SetConfig>
 8006ecc:	0003      	movs	r3, r0
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d101      	bne.n	8006ed6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e024      	b.n	8006f20 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	0018      	movs	r0, r3
 8006ee2:	f000 ff2f 	bl	8007d44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	490d      	ldr	r1, [pc, #52]	; (8006f28 <HAL_UART_Init+0xa8>)
 8006ef2:	400a      	ands	r2, r1
 8006ef4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	689a      	ldr	r2, [r3, #8]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	212a      	movs	r1, #42	; 0x2a
 8006f02:	438a      	bics	r2, r1
 8006f04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2101      	movs	r1, #1
 8006f12:	430a      	orrs	r2, r1
 8006f14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	0018      	movs	r0, r3
 8006f1a:	f000 ffc7 	bl	8007eac <UART_CheckIdleState>
 8006f1e:	0003      	movs	r3, r0
}
 8006f20:	0018      	movs	r0, r3
 8006f22:	46bd      	mov	sp, r7
 8006f24:	b002      	add	sp, #8
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	ffffb7ff 	.word	0xffffb7ff

08006f2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b08a      	sub	sp, #40	; 0x28
 8006f30:	af02      	add	r7, sp, #8
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	603b      	str	r3, [r7, #0]
 8006f38:	1dbb      	adds	r3, r7, #6
 8006f3a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2284      	movs	r2, #132	; 0x84
 8006f40:	589b      	ldr	r3, [r3, r2]
 8006f42:	2b20      	cmp	r3, #32
 8006f44:	d000      	beq.n	8006f48 <HAL_UART_Transmit+0x1c>
 8006f46:	e097      	b.n	8007078 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d003      	beq.n	8006f56 <HAL_UART_Transmit+0x2a>
 8006f4e:	1dbb      	adds	r3, r7, #6
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e08f      	b.n	800707a <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	689a      	ldr	r2, [r3, #8]
 8006f5e:	2380      	movs	r3, #128	; 0x80
 8006f60:	015b      	lsls	r3, r3, #5
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d109      	bne.n	8006f7a <HAL_UART_Transmit+0x4e>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d105      	bne.n	8006f7a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2201      	movs	r2, #1
 8006f72:	4013      	ands	r3, r2
 8006f74:	d001      	beq.n	8006f7a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e07f      	b.n	800707a <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2280      	movs	r2, #128	; 0x80
 8006f7e:	5c9b      	ldrb	r3, [r3, r2]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d101      	bne.n	8006f88 <HAL_UART_Transmit+0x5c>
 8006f84:	2302      	movs	r3, #2
 8006f86:	e078      	b.n	800707a <HAL_UART_Transmit+0x14e>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2280      	movs	r2, #128	; 0x80
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	228c      	movs	r2, #140	; 0x8c
 8006f94:	2100      	movs	r1, #0
 8006f96:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2284      	movs	r2, #132	; 0x84
 8006f9c:	2121      	movs	r1, #33	; 0x21
 8006f9e:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fa0:	f7fc fd10 	bl	80039c4 <HAL_GetTick>
 8006fa4:	0003      	movs	r3, r0
 8006fa6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	1dba      	adds	r2, r7, #6
 8006fac:	2154      	movs	r1, #84	; 0x54
 8006fae:	8812      	ldrh	r2, [r2, #0]
 8006fb0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	1dba      	adds	r2, r7, #6
 8006fb6:	2156      	movs	r1, #86	; 0x56
 8006fb8:	8812      	ldrh	r2, [r2, #0]
 8006fba:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	2380      	movs	r3, #128	; 0x80
 8006fc2:	015b      	lsls	r3, r3, #5
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d108      	bne.n	8006fda <HAL_UART_Transmit+0xae>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d104      	bne.n	8006fda <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	61bb      	str	r3, [r7, #24]
 8006fd8:	e003      	b.n	8006fe2 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2280      	movs	r2, #128	; 0x80
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006fea:	e02c      	b.n	8007046 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	0013      	movs	r3, r2
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	2180      	movs	r1, #128	; 0x80
 8006ffa:	f000 ffa1 	bl	8007f40 <UART_WaitOnFlagUntilTimeout>
 8006ffe:	1e03      	subs	r3, r0, #0
 8007000:	d001      	beq.n	8007006 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e039      	b.n	800707a <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10b      	bne.n	8007024 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	001a      	movs	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	05d2      	lsls	r2, r2, #23
 8007018:	0dd2      	lsrs	r2, r2, #23
 800701a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	3302      	adds	r3, #2
 8007020:	61bb      	str	r3, [r7, #24]
 8007022:	e007      	b.n	8007034 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	781a      	ldrb	r2, [r3, #0]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	3301      	adds	r3, #1
 8007032:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2256      	movs	r2, #86	; 0x56
 8007038:	5a9b      	ldrh	r3, [r3, r2]
 800703a:	b29b      	uxth	r3, r3
 800703c:	3b01      	subs	r3, #1
 800703e:	b299      	uxth	r1, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2256      	movs	r2, #86	; 0x56
 8007044:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2256      	movs	r2, #86	; 0x56
 800704a:	5a9b      	ldrh	r3, [r3, r2]
 800704c:	b29b      	uxth	r3, r3
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1cc      	bne.n	8006fec <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	0013      	movs	r3, r2
 800705c:	2200      	movs	r2, #0
 800705e:	2140      	movs	r1, #64	; 0x40
 8007060:	f000 ff6e 	bl	8007f40 <UART_WaitOnFlagUntilTimeout>
 8007064:	1e03      	subs	r3, r0, #0
 8007066:	d001      	beq.n	800706c <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e006      	b.n	800707a <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2284      	movs	r2, #132	; 0x84
 8007070:	2120      	movs	r1, #32
 8007072:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007074:	2300      	movs	r3, #0
 8007076:	e000      	b.n	800707a <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8007078:	2302      	movs	r3, #2
  }
}
 800707a:	0018      	movs	r0, r3
 800707c:	46bd      	mov	sp, r7
 800707e:	b008      	add	sp, #32
 8007080:	bd80      	pop	{r7, pc}
	...

08007084 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b088      	sub	sp, #32
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	1dbb      	adds	r3, r7, #6
 8007090:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2288      	movs	r2, #136	; 0x88
 8007096:	589b      	ldr	r3, [r3, r2]
 8007098:	2b20      	cmp	r3, #32
 800709a:	d155      	bne.n	8007148 <HAL_UART_Receive_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <HAL_UART_Receive_IT+0x26>
 80070a2:	1dbb      	adds	r3, r7, #6
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e04d      	b.n	800714a <HAL_UART_Receive_IT+0xc6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	689a      	ldr	r2, [r3, #8]
 80070b2:	2380      	movs	r3, #128	; 0x80
 80070b4:	015b      	lsls	r3, r3, #5
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d109      	bne.n	80070ce <HAL_UART_Receive_IT+0x4a>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d105      	bne.n	80070ce <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2201      	movs	r2, #1
 80070c6:	4013      	ands	r3, r2
 80070c8:	d001      	beq.n	80070ce <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e03d      	b.n	800714a <HAL_UART_Receive_IT+0xc6>
      }
    }

    __HAL_LOCK(huart);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2280      	movs	r2, #128	; 0x80
 80070d2:	5c9b      	ldrb	r3, [r3, r2]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d101      	bne.n	80070dc <HAL_UART_Receive_IT+0x58>
 80070d8:	2302      	movs	r3, #2
 80070da:	e036      	b.n	800714a <HAL_UART_Receive_IT+0xc6>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2280      	movs	r2, #128	; 0x80
 80070e0:	2101      	movs	r1, #1
 80070e2:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a19      	ldr	r2, [pc, #100]	; (8007154 <HAL_UART_Receive_IT+0xd0>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d020      	beq.n	8007136 <HAL_UART_Receive_IT+0xb2>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	2380      	movs	r3, #128	; 0x80
 80070fc:	041b      	lsls	r3, r3, #16
 80070fe:	4013      	ands	r3, r2
 8007100:	d019      	beq.n	8007136 <HAL_UART_Receive_IT+0xb2>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007102:	f3ef 8310 	mrs	r3, PRIMASK
 8007106:	613b      	str	r3, [r7, #16]
  return(result);
 8007108:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800710a:	61fb      	str	r3, [r7, #28]
 800710c:	2301      	movs	r3, #1
 800710e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f383 8810 	msr	PRIMASK, r3
}
 8007116:	46c0      	nop			; (mov r8, r8)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2180      	movs	r1, #128	; 0x80
 8007124:	04c9      	lsls	r1, r1, #19
 8007126:	430a      	orrs	r2, r1
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	f383 8810 	msr	PRIMASK, r3
}
 8007134:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007136:	1dbb      	adds	r3, r7, #6
 8007138:	881a      	ldrh	r2, [r3, #0]
 800713a:	68b9      	ldr	r1, [r7, #8]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	0018      	movs	r0, r3
 8007140:	f000 ffc6 	bl	80080d0 <UART_Start_Receive_IT>
 8007144:	0003      	movs	r3, r0
 8007146:	e000      	b.n	800714a <HAL_UART_Receive_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8007148:	2302      	movs	r3, #2
  }
}
 800714a:	0018      	movs	r0, r3
 800714c:	46bd      	mov	sp, r7
 800714e:	b008      	add	sp, #32
 8007150:	bd80      	pop	{r7, pc}
 8007152:	46c0      	nop			; (mov r8, r8)
 8007154:	40008000 	.word	0x40008000

08007158 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007158:	b5b0      	push	{r4, r5, r7, lr}
 800715a:	b0aa      	sub	sp, #168	; 0xa8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	22a4      	movs	r2, #164	; 0xa4
 8007168:	18b9      	adds	r1, r7, r2
 800716a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	20a0      	movs	r0, #160	; 0xa0
 8007174:	1839      	adds	r1, r7, r0
 8007176:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	249c      	movs	r4, #156	; 0x9c
 8007180:	1939      	adds	r1, r7, r4
 8007182:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007184:	0011      	movs	r1, r2
 8007186:	18bb      	adds	r3, r7, r2
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4aa0      	ldr	r2, [pc, #640]	; (800740c <HAL_UART_IRQHandler+0x2b4>)
 800718c:	4013      	ands	r3, r2
 800718e:	2298      	movs	r2, #152	; 0x98
 8007190:	18bd      	adds	r5, r7, r2
 8007192:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8007194:	18bb      	adds	r3, r7, r2
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d11a      	bne.n	80071d2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800719c:	187b      	adds	r3, r7, r1
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2220      	movs	r2, #32
 80071a2:	4013      	ands	r3, r2
 80071a4:	d015      	beq.n	80071d2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80071a6:	183b      	adds	r3, r7, r0
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2220      	movs	r2, #32
 80071ac:	4013      	ands	r3, r2
 80071ae:	d105      	bne.n	80071bc <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80071b0:	193b      	adds	r3, r7, r4
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	2380      	movs	r3, #128	; 0x80
 80071b6:	055b      	lsls	r3, r3, #21
 80071b8:	4013      	ands	r3, r2
 80071ba:	d00a      	beq.n	80071d2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d100      	bne.n	80071c6 <HAL_UART_IRQHandler+0x6e>
 80071c4:	e2cf      	b.n	8007766 <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	0010      	movs	r0, r2
 80071ce:	4798      	blx	r3
      }
      return;
 80071d0:	e2c9      	b.n	8007766 <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80071d2:	2398      	movs	r3, #152	; 0x98
 80071d4:	18fb      	adds	r3, r7, r3
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d100      	bne.n	80071de <HAL_UART_IRQHandler+0x86>
 80071dc:	e11e      	b.n	800741c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80071de:	239c      	movs	r3, #156	; 0x9c
 80071e0:	18fb      	adds	r3, r7, r3
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a8a      	ldr	r2, [pc, #552]	; (8007410 <HAL_UART_IRQHandler+0x2b8>)
 80071e6:	4013      	ands	r3, r2
 80071e8:	d106      	bne.n	80071f8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80071ea:	23a0      	movs	r3, #160	; 0xa0
 80071ec:	18fb      	adds	r3, r7, r3
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a88      	ldr	r2, [pc, #544]	; (8007414 <HAL_UART_IRQHandler+0x2bc>)
 80071f2:	4013      	ands	r3, r2
 80071f4:	d100      	bne.n	80071f8 <HAL_UART_IRQHandler+0xa0>
 80071f6:	e111      	b.n	800741c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071f8:	23a4      	movs	r3, #164	; 0xa4
 80071fa:	18fb      	adds	r3, r7, r3
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2201      	movs	r2, #1
 8007200:	4013      	ands	r3, r2
 8007202:	d012      	beq.n	800722a <HAL_UART_IRQHandler+0xd2>
 8007204:	23a0      	movs	r3, #160	; 0xa0
 8007206:	18fb      	adds	r3, r7, r3
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	2380      	movs	r3, #128	; 0x80
 800720c:	005b      	lsls	r3, r3, #1
 800720e:	4013      	ands	r3, r2
 8007210:	d00b      	beq.n	800722a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2201      	movs	r2, #1
 8007218:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	228c      	movs	r2, #140	; 0x8c
 800721e:	589b      	ldr	r3, [r3, r2]
 8007220:	2201      	movs	r2, #1
 8007222:	431a      	orrs	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	218c      	movs	r1, #140	; 0x8c
 8007228:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800722a:	23a4      	movs	r3, #164	; 0xa4
 800722c:	18fb      	adds	r3, r7, r3
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2202      	movs	r2, #2
 8007232:	4013      	ands	r3, r2
 8007234:	d011      	beq.n	800725a <HAL_UART_IRQHandler+0x102>
 8007236:	239c      	movs	r3, #156	; 0x9c
 8007238:	18fb      	adds	r3, r7, r3
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2201      	movs	r2, #1
 800723e:	4013      	ands	r3, r2
 8007240:	d00b      	beq.n	800725a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2202      	movs	r2, #2
 8007248:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	228c      	movs	r2, #140	; 0x8c
 800724e:	589b      	ldr	r3, [r3, r2]
 8007250:	2204      	movs	r2, #4
 8007252:	431a      	orrs	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	218c      	movs	r1, #140	; 0x8c
 8007258:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800725a:	23a4      	movs	r3, #164	; 0xa4
 800725c:	18fb      	adds	r3, r7, r3
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2204      	movs	r2, #4
 8007262:	4013      	ands	r3, r2
 8007264:	d011      	beq.n	800728a <HAL_UART_IRQHandler+0x132>
 8007266:	239c      	movs	r3, #156	; 0x9c
 8007268:	18fb      	adds	r3, r7, r3
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2201      	movs	r2, #1
 800726e:	4013      	ands	r3, r2
 8007270:	d00b      	beq.n	800728a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2204      	movs	r2, #4
 8007278:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	228c      	movs	r2, #140	; 0x8c
 800727e:	589b      	ldr	r3, [r3, r2]
 8007280:	2202      	movs	r2, #2
 8007282:	431a      	orrs	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	218c      	movs	r1, #140	; 0x8c
 8007288:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800728a:	23a4      	movs	r3, #164	; 0xa4
 800728c:	18fb      	adds	r3, r7, r3
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2208      	movs	r2, #8
 8007292:	4013      	ands	r3, r2
 8007294:	d017      	beq.n	80072c6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007296:	23a0      	movs	r3, #160	; 0xa0
 8007298:	18fb      	adds	r3, r7, r3
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2220      	movs	r2, #32
 800729e:	4013      	ands	r3, r2
 80072a0:	d105      	bne.n	80072ae <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80072a2:	239c      	movs	r3, #156	; 0x9c
 80072a4:	18fb      	adds	r3, r7, r3
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a59      	ldr	r2, [pc, #356]	; (8007410 <HAL_UART_IRQHandler+0x2b8>)
 80072aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80072ac:	d00b      	beq.n	80072c6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2208      	movs	r2, #8
 80072b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	228c      	movs	r2, #140	; 0x8c
 80072ba:	589b      	ldr	r3, [r3, r2]
 80072bc:	2208      	movs	r2, #8
 80072be:	431a      	orrs	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	218c      	movs	r1, #140	; 0x8c
 80072c4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80072c6:	23a4      	movs	r3, #164	; 0xa4
 80072c8:	18fb      	adds	r3, r7, r3
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	2380      	movs	r3, #128	; 0x80
 80072ce:	011b      	lsls	r3, r3, #4
 80072d0:	4013      	ands	r3, r2
 80072d2:	d013      	beq.n	80072fc <HAL_UART_IRQHandler+0x1a4>
 80072d4:	23a0      	movs	r3, #160	; 0xa0
 80072d6:	18fb      	adds	r3, r7, r3
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	2380      	movs	r3, #128	; 0x80
 80072dc:	04db      	lsls	r3, r3, #19
 80072de:	4013      	ands	r3, r2
 80072e0:	d00c      	beq.n	80072fc <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2280      	movs	r2, #128	; 0x80
 80072e8:	0112      	lsls	r2, r2, #4
 80072ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	228c      	movs	r2, #140	; 0x8c
 80072f0:	589b      	ldr	r3, [r3, r2]
 80072f2:	2220      	movs	r2, #32
 80072f4:	431a      	orrs	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	218c      	movs	r1, #140	; 0x8c
 80072fa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	228c      	movs	r2, #140	; 0x8c
 8007300:	589b      	ldr	r3, [r3, r2]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d100      	bne.n	8007308 <HAL_UART_IRQHandler+0x1b0>
 8007306:	e230      	b.n	800776a <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007308:	23a4      	movs	r3, #164	; 0xa4
 800730a:	18fb      	adds	r3, r7, r3
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2220      	movs	r2, #32
 8007310:	4013      	ands	r3, r2
 8007312:	d015      	beq.n	8007340 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007314:	23a0      	movs	r3, #160	; 0xa0
 8007316:	18fb      	adds	r3, r7, r3
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2220      	movs	r2, #32
 800731c:	4013      	ands	r3, r2
 800731e:	d106      	bne.n	800732e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007320:	239c      	movs	r3, #156	; 0x9c
 8007322:	18fb      	adds	r3, r7, r3
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	2380      	movs	r3, #128	; 0x80
 8007328:	055b      	lsls	r3, r3, #21
 800732a:	4013      	ands	r3, r2
 800732c:	d008      	beq.n	8007340 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007332:	2b00      	cmp	r3, #0
 8007334:	d004      	beq.n	8007340 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	0010      	movs	r0, r2
 800733e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	228c      	movs	r2, #140	; 0x8c
 8007344:	589b      	ldr	r3, [r3, r2]
 8007346:	2194      	movs	r1, #148	; 0x94
 8007348:	187a      	adds	r2, r7, r1
 800734a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	2240      	movs	r2, #64	; 0x40
 8007354:	4013      	ands	r3, r2
 8007356:	2b40      	cmp	r3, #64	; 0x40
 8007358:	d004      	beq.n	8007364 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800735a:	187b      	adds	r3, r7, r1
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2228      	movs	r2, #40	; 0x28
 8007360:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007362:	d047      	beq.n	80073f4 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	0018      	movs	r0, r3
 8007368:	f000 ffbe 	bl	80082e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	2240      	movs	r2, #64	; 0x40
 8007374:	4013      	ands	r3, r2
 8007376:	2b40      	cmp	r3, #64	; 0x40
 8007378:	d137      	bne.n	80073ea <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800737a:	f3ef 8310 	mrs	r3, PRIMASK
 800737e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007380:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007382:	2090      	movs	r0, #144	; 0x90
 8007384:	183a      	adds	r2, r7, r0
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	2301      	movs	r3, #1
 800738a:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800738c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800738e:	f383 8810 	msr	PRIMASK, r3
}
 8007392:	46c0      	nop			; (mov r8, r8)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	689a      	ldr	r2, [r3, #8]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2140      	movs	r1, #64	; 0x40
 80073a0:	438a      	bics	r2, r1
 80073a2:	609a      	str	r2, [r3, #8]
 80073a4:	183b      	adds	r3, r7, r0
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073ac:	f383 8810 	msr	PRIMASK, r3
}
 80073b0:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d012      	beq.n	80073e0 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073be:	4a16      	ldr	r2, [pc, #88]	; (8007418 <HAL_UART_IRQHandler+0x2c0>)
 80073c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073c6:	0018      	movs	r0, r3
 80073c8:	f7fd f91e 	bl	8004608 <HAL_DMA_Abort_IT>
 80073cc:	1e03      	subs	r3, r0, #0
 80073ce:	d01a      	beq.n	8007406 <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073da:	0018      	movs	r0, r3
 80073dc:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073de:	e012      	b.n	8007406 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	0018      	movs	r0, r3
 80073e4:	f000 f9da 	bl	800779c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073e8:	e00d      	b.n	8007406 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	0018      	movs	r0, r3
 80073ee:	f000 f9d5 	bl	800779c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073f2:	e008      	b.n	8007406 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	0018      	movs	r0, r3
 80073f8:	f000 f9d0 	bl	800779c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	228c      	movs	r2, #140	; 0x8c
 8007400:	2100      	movs	r1, #0
 8007402:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8007404:	e1b1      	b.n	800776a <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007406:	46c0      	nop			; (mov r8, r8)
    return;
 8007408:	e1af      	b.n	800776a <HAL_UART_IRQHandler+0x612>
 800740a:	46c0      	nop			; (mov r8, r8)
 800740c:	0000080f 	.word	0x0000080f
 8007410:	10000001 	.word	0x10000001
 8007414:	04000120 	.word	0x04000120
 8007418:	080083b5 	.word	0x080083b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007420:	2b01      	cmp	r3, #1
 8007422:	d000      	beq.n	8007426 <HAL_UART_IRQHandler+0x2ce>
 8007424:	e135      	b.n	8007692 <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007426:	23a4      	movs	r3, #164	; 0xa4
 8007428:	18fb      	adds	r3, r7, r3
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2210      	movs	r2, #16
 800742e:	4013      	ands	r3, r2
 8007430:	d100      	bne.n	8007434 <HAL_UART_IRQHandler+0x2dc>
 8007432:	e12e      	b.n	8007692 <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007434:	23a0      	movs	r3, #160	; 0xa0
 8007436:	18fb      	adds	r3, r7, r3
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2210      	movs	r2, #16
 800743c:	4013      	ands	r3, r2
 800743e:	d100      	bne.n	8007442 <HAL_UART_IRQHandler+0x2ea>
 8007440:	e127      	b.n	8007692 <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2210      	movs	r2, #16
 8007448:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	2240      	movs	r2, #64	; 0x40
 8007452:	4013      	ands	r3, r2
 8007454:	2b40      	cmp	r3, #64	; 0x40
 8007456:	d000      	beq.n	800745a <HAL_UART_IRQHandler+0x302>
 8007458:	e09e      	b.n	8007598 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685a      	ldr	r2, [r3, #4]
 8007462:	217e      	movs	r1, #126	; 0x7e
 8007464:	187b      	adds	r3, r7, r1
 8007466:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007468:	187b      	adds	r3, r7, r1
 800746a:	881b      	ldrh	r3, [r3, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d100      	bne.n	8007472 <HAL_UART_IRQHandler+0x31a>
 8007470:	e17d      	b.n	800776e <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	225c      	movs	r2, #92	; 0x5c
 8007476:	5a9b      	ldrh	r3, [r3, r2]
 8007478:	187a      	adds	r2, r7, r1
 800747a:	8812      	ldrh	r2, [r2, #0]
 800747c:	429a      	cmp	r2, r3
 800747e:	d300      	bcc.n	8007482 <HAL_UART_IRQHandler+0x32a>
 8007480:	e175      	b.n	800776e <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	187a      	adds	r2, r7, r1
 8007486:	215e      	movs	r1, #94	; 0x5e
 8007488:	8812      	ldrh	r2, [r2, #0]
 800748a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2220      	movs	r2, #32
 8007496:	4013      	ands	r3, r2
 8007498:	d16f      	bne.n	800757a <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800749a:	f3ef 8310 	mrs	r3, PRIMASK
 800749e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80074a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80074a4:	2301      	movs	r3, #1
 80074a6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074aa:	f383 8810 	msr	PRIMASK, r3
}
 80074ae:	46c0      	nop			; (mov r8, r8)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	49b1      	ldr	r1, [pc, #708]	; (8007780 <HAL_UART_IRQHandler+0x628>)
 80074bc:	400a      	ands	r2, r1
 80074be:	601a      	str	r2, [r3, #0]
 80074c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074c2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c6:	f383 8810 	msr	PRIMASK, r3
}
 80074ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074cc:	f3ef 8310 	mrs	r3, PRIMASK
 80074d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80074d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074d4:	677b      	str	r3, [r7, #116]	; 0x74
 80074d6:	2301      	movs	r3, #1
 80074d8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074dc:	f383 8810 	msr	PRIMASK, r3
}
 80074e0:	46c0      	nop			; (mov r8, r8)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	689a      	ldr	r2, [r3, #8]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2101      	movs	r1, #1
 80074ee:	438a      	bics	r2, r1
 80074f0:	609a      	str	r2, [r3, #8]
 80074f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074f4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074f8:	f383 8810 	msr	PRIMASK, r3
}
 80074fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074fe:	f3ef 8310 	mrs	r3, PRIMASK
 8007502:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007504:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007506:	673b      	str	r3, [r7, #112]	; 0x70
 8007508:	2301      	movs	r3, #1
 800750a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800750c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800750e:	f383 8810 	msr	PRIMASK, r3
}
 8007512:	46c0      	nop			; (mov r8, r8)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689a      	ldr	r2, [r3, #8]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2140      	movs	r1, #64	; 0x40
 8007520:	438a      	bics	r2, r1
 8007522:	609a      	str	r2, [r3, #8]
 8007524:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007526:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800752a:	f383 8810 	msr	PRIMASK, r3
}
 800752e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2288      	movs	r2, #136	; 0x88
 8007534:	2120      	movs	r1, #32
 8007536:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800753e:	f3ef 8310 	mrs	r3, PRIMASK
 8007542:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007544:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007546:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007548:	2301      	movs	r3, #1
 800754a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800754c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800754e:	f383 8810 	msr	PRIMASK, r3
}
 8007552:	46c0      	nop			; (mov r8, r8)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2110      	movs	r1, #16
 8007560:	438a      	bics	r2, r1
 8007562:	601a      	str	r2, [r3, #0]
 8007564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007566:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007568:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800756a:	f383 8810 	msr	PRIMASK, r3
}
 800756e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007574:	0018      	movs	r0, r3
 8007576:	f7fc ffe5 	bl	8004544 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	225c      	movs	r2, #92	; 0x5c
 800757e:	5a9a      	ldrh	r2, [r3, r2]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	215e      	movs	r1, #94	; 0x5e
 8007584:	5a5b      	ldrh	r3, [r3, r1]
 8007586:	b29b      	uxth	r3, r3
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	b29a      	uxth	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	0011      	movs	r1, r2
 8007590:	0018      	movs	r0, r3
 8007592:	f000 f90b 	bl	80077ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007596:	e0ea      	b.n	800776e <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	225c      	movs	r2, #92	; 0x5c
 800759c:	5a99      	ldrh	r1, [r3, r2]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	225e      	movs	r2, #94	; 0x5e
 80075a2:	5a9b      	ldrh	r3, [r3, r2]
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	208e      	movs	r0, #142	; 0x8e
 80075a8:	183b      	adds	r3, r7, r0
 80075aa:	1a8a      	subs	r2, r1, r2
 80075ac:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	225e      	movs	r2, #94	; 0x5e
 80075b2:	5a9b      	ldrh	r3, [r3, r2]
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d100      	bne.n	80075bc <HAL_UART_IRQHandler+0x464>
 80075ba:	e0da      	b.n	8007772 <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 80075bc:	183b      	adds	r3, r7, r0
 80075be:	881b      	ldrh	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d100      	bne.n	80075c6 <HAL_UART_IRQHandler+0x46e>
 80075c4:	e0d5      	b.n	8007772 <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075c6:	f3ef 8310 	mrs	r3, PRIMASK
 80075ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80075cc:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075ce:	2488      	movs	r4, #136	; 0x88
 80075d0:	193a      	adds	r2, r7, r4
 80075d2:	6013      	str	r3, [r2, #0]
 80075d4:	2301      	movs	r3, #1
 80075d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	f383 8810 	msr	PRIMASK, r3
}
 80075de:	46c0      	nop			; (mov r8, r8)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4966      	ldr	r1, [pc, #408]	; (8007784 <HAL_UART_IRQHandler+0x62c>)
 80075ec:	400a      	ands	r2, r1
 80075ee:	601a      	str	r2, [r3, #0]
 80075f0:	193b      	adds	r3, r7, r4
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	f383 8810 	msr	PRIMASK, r3
}
 80075fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075fe:	f3ef 8310 	mrs	r3, PRIMASK
 8007602:	61bb      	str	r3, [r7, #24]
  return(result);
 8007604:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007606:	2484      	movs	r4, #132	; 0x84
 8007608:	193a      	adds	r2, r7, r4
 800760a:	6013      	str	r3, [r2, #0]
 800760c:	2301      	movs	r3, #1
 800760e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	f383 8810 	msr	PRIMASK, r3
}
 8007616:	46c0      	nop			; (mov r8, r8)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689a      	ldr	r2, [r3, #8]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4959      	ldr	r1, [pc, #356]	; (8007788 <HAL_UART_IRQHandler+0x630>)
 8007624:	400a      	ands	r2, r1
 8007626:	609a      	str	r2, [r3, #8]
 8007628:	193b      	adds	r3, r7, r4
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800762e:	6a3b      	ldr	r3, [r7, #32]
 8007630:	f383 8810 	msr	PRIMASK, r3
}
 8007634:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2288      	movs	r2, #136	; 0x88
 800763a:	2120      	movs	r1, #32
 800763c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800764a:	f3ef 8310 	mrs	r3, PRIMASK
 800764e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007652:	2480      	movs	r4, #128	; 0x80
 8007654:	193a      	adds	r2, r7, r4
 8007656:	6013      	str	r3, [r2, #0]
 8007658:	2301      	movs	r3, #1
 800765a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800765c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765e:	f383 8810 	msr	PRIMASK, r3
}
 8007662:	46c0      	nop			; (mov r8, r8)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2110      	movs	r1, #16
 8007670:	438a      	bics	r2, r1
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	193b      	adds	r3, r7, r4
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800767a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767c:	f383 8810 	msr	PRIMASK, r3
}
 8007680:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007682:	183b      	adds	r3, r7, r0
 8007684:	881a      	ldrh	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	0011      	movs	r1, r2
 800768a:	0018      	movs	r0, r3
 800768c:	f000 f88e 	bl	80077ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007690:	e06f      	b.n	8007772 <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007692:	23a4      	movs	r3, #164	; 0xa4
 8007694:	18fb      	adds	r3, r7, r3
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	2380      	movs	r3, #128	; 0x80
 800769a:	035b      	lsls	r3, r3, #13
 800769c:	4013      	ands	r3, r2
 800769e:	d010      	beq.n	80076c2 <HAL_UART_IRQHandler+0x56a>
 80076a0:	239c      	movs	r3, #156	; 0x9c
 80076a2:	18fb      	adds	r3, r7, r3
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	2380      	movs	r3, #128	; 0x80
 80076a8:	03db      	lsls	r3, r3, #15
 80076aa:	4013      	ands	r3, r2
 80076ac:	d009      	beq.n	80076c2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2280      	movs	r2, #128	; 0x80
 80076b4:	0352      	lsls	r2, r2, #13
 80076b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	0018      	movs	r0, r3
 80076bc:	f001 fb0e 	bl	8008cdc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80076c0:	e05a      	b.n	8007778 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80076c2:	23a4      	movs	r3, #164	; 0xa4
 80076c4:	18fb      	adds	r3, r7, r3
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2280      	movs	r2, #128	; 0x80
 80076ca:	4013      	ands	r3, r2
 80076cc:	d016      	beq.n	80076fc <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80076ce:	23a0      	movs	r3, #160	; 0xa0
 80076d0:	18fb      	adds	r3, r7, r3
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2280      	movs	r2, #128	; 0x80
 80076d6:	4013      	ands	r3, r2
 80076d8:	d106      	bne.n	80076e8 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80076da:	239c      	movs	r3, #156	; 0x9c
 80076dc:	18fb      	adds	r3, r7, r3
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	2380      	movs	r3, #128	; 0x80
 80076e2:	041b      	lsls	r3, r3, #16
 80076e4:	4013      	ands	r3, r2
 80076e6:	d009      	beq.n	80076fc <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d042      	beq.n	8007776 <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	0010      	movs	r0, r2
 80076f8:	4798      	blx	r3
    }
    return;
 80076fa:	e03c      	b.n	8007776 <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80076fc:	23a4      	movs	r3, #164	; 0xa4
 80076fe:	18fb      	adds	r3, r7, r3
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2240      	movs	r2, #64	; 0x40
 8007704:	4013      	ands	r3, r2
 8007706:	d00a      	beq.n	800771e <HAL_UART_IRQHandler+0x5c6>
 8007708:	23a0      	movs	r3, #160	; 0xa0
 800770a:	18fb      	adds	r3, r7, r3
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2240      	movs	r2, #64	; 0x40
 8007710:	4013      	ands	r3, r2
 8007712:	d004      	beq.n	800771e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	0018      	movs	r0, r3
 8007718:	f000 fe63 	bl	80083e2 <UART_EndTransmit_IT>
    return;
 800771c:	e02c      	b.n	8007778 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800771e:	23a4      	movs	r3, #164	; 0xa4
 8007720:	18fb      	adds	r3, r7, r3
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	2380      	movs	r3, #128	; 0x80
 8007726:	041b      	lsls	r3, r3, #16
 8007728:	4013      	ands	r3, r2
 800772a:	d00b      	beq.n	8007744 <HAL_UART_IRQHandler+0x5ec>
 800772c:	23a0      	movs	r3, #160	; 0xa0
 800772e:	18fb      	adds	r3, r7, r3
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	2380      	movs	r3, #128	; 0x80
 8007734:	05db      	lsls	r3, r3, #23
 8007736:	4013      	ands	r3, r2
 8007738:	d004      	beq.n	8007744 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	0018      	movs	r0, r3
 800773e:	f001 fadd 	bl	8008cfc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007742:	e019      	b.n	8007778 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007744:	23a4      	movs	r3, #164	; 0xa4
 8007746:	18fb      	adds	r3, r7, r3
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	2380      	movs	r3, #128	; 0x80
 800774c:	045b      	lsls	r3, r3, #17
 800774e:	4013      	ands	r3, r2
 8007750:	d012      	beq.n	8007778 <HAL_UART_IRQHandler+0x620>
 8007752:	23a0      	movs	r3, #160	; 0xa0
 8007754:	18fb      	adds	r3, r7, r3
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	da0d      	bge.n	8007778 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	0018      	movs	r0, r3
 8007760:	f001 fac4 	bl	8008cec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007764:	e008      	b.n	8007778 <HAL_UART_IRQHandler+0x620>
      return;
 8007766:	46c0      	nop			; (mov r8, r8)
 8007768:	e006      	b.n	8007778 <HAL_UART_IRQHandler+0x620>
    return;
 800776a:	46c0      	nop			; (mov r8, r8)
 800776c:	e004      	b.n	8007778 <HAL_UART_IRQHandler+0x620>
      return;
 800776e:	46c0      	nop			; (mov r8, r8)
 8007770:	e002      	b.n	8007778 <HAL_UART_IRQHandler+0x620>
      return;
 8007772:	46c0      	nop			; (mov r8, r8)
 8007774:	e000      	b.n	8007778 <HAL_UART_IRQHandler+0x620>
    return;
 8007776:	46c0      	nop			; (mov r8, r8)
  }
}
 8007778:	46bd      	mov	sp, r7
 800777a:	b02a      	add	sp, #168	; 0xa8
 800777c:	bdb0      	pop	{r4, r5, r7, pc}
 800777e:	46c0      	nop			; (mov r8, r8)
 8007780:	fffffeff 	.word	0xfffffeff
 8007784:	fffffedf 	.word	0xfffffedf
 8007788:	effffffe 	.word	0xeffffffe

0800778c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007794:	46c0      	nop			; (mov r8, r8)
 8007796:	46bd      	mov	sp, r7
 8007798:	b002      	add	sp, #8
 800779a:	bd80      	pop	{r7, pc}

0800779c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80077a4:	46c0      	nop			; (mov r8, r8)
 80077a6:	46bd      	mov	sp, r7
 80077a8:	b002      	add	sp, #8
 80077aa:	bd80      	pop	{r7, pc}

080077ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	000a      	movs	r2, r1
 80077b6:	1cbb      	adds	r3, r7, #2
 80077b8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80077ba:	46c0      	nop			; (mov r8, r8)
 80077bc:	46bd      	mov	sp, r7
 80077be:	b002      	add	sp, #8
 80077c0:	bd80      	pop	{r7, pc}
	...

080077c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077c4:	b5b0      	push	{r4, r5, r7, lr}
 80077c6:	b090      	sub	sp, #64	; 0x40
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077cc:	231a      	movs	r3, #26
 80077ce:	2220      	movs	r2, #32
 80077d0:	189b      	adds	r3, r3, r2
 80077d2:	19db      	adds	r3, r3, r7
 80077d4:	2200      	movs	r2, #0
 80077d6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	689a      	ldr	r2, [r3, #8]
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	431a      	orrs	r2, r3
 80077e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	431a      	orrs	r2, r3
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	69db      	ldr	r3, [r3, #28]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4aaf      	ldr	r2, [pc, #700]	; (8007ab4 <UART_SetConfig+0x2f0>)
 80077f8:	4013      	ands	r3, r2
 80077fa:	0019      	movs	r1, r3
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007802:	430b      	orrs	r3, r1
 8007804:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	4aaa      	ldr	r2, [pc, #680]	; (8007ab8 <UART_SetConfig+0x2f4>)
 800780e:	4013      	ands	r3, r2
 8007810:	0018      	movs	r0, r3
 8007812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007814:	68d9      	ldr	r1, [r3, #12]
 8007816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	0003      	movs	r3, r0
 800781c:	430b      	orrs	r3, r1
 800781e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4aa4      	ldr	r2, [pc, #656]	; (8007abc <UART_SetConfig+0x2f8>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d004      	beq.n	800783a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	6a1b      	ldr	r3, [r3, #32]
 8007834:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007836:	4313      	orrs	r3, r2
 8007838:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	4a9f      	ldr	r2, [pc, #636]	; (8007ac0 <UART_SetConfig+0x2fc>)
 8007842:	4013      	ands	r3, r2
 8007844:	0019      	movs	r1, r3
 8007846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800784c:	430b      	orrs	r3, r1
 800784e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007856:	220f      	movs	r2, #15
 8007858:	4393      	bics	r3, r2
 800785a:	0018      	movs	r0, r3
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	0003      	movs	r3, r0
 8007866:	430b      	orrs	r3, r1
 8007868:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a95      	ldr	r2, [pc, #596]	; (8007ac4 <UART_SetConfig+0x300>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d131      	bne.n	80078d8 <UART_SetConfig+0x114>
 8007874:	4b94      	ldr	r3, [pc, #592]	; (8007ac8 <UART_SetConfig+0x304>)
 8007876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007878:	2203      	movs	r2, #3
 800787a:	4013      	ands	r3, r2
 800787c:	2b03      	cmp	r3, #3
 800787e:	d01d      	beq.n	80078bc <UART_SetConfig+0xf8>
 8007880:	d823      	bhi.n	80078ca <UART_SetConfig+0x106>
 8007882:	2b02      	cmp	r3, #2
 8007884:	d00c      	beq.n	80078a0 <UART_SetConfig+0xdc>
 8007886:	d820      	bhi.n	80078ca <UART_SetConfig+0x106>
 8007888:	2b00      	cmp	r3, #0
 800788a:	d002      	beq.n	8007892 <UART_SetConfig+0xce>
 800788c:	2b01      	cmp	r3, #1
 800788e:	d00e      	beq.n	80078ae <UART_SetConfig+0xea>
 8007890:	e01b      	b.n	80078ca <UART_SetConfig+0x106>
 8007892:	231b      	movs	r3, #27
 8007894:	2220      	movs	r2, #32
 8007896:	189b      	adds	r3, r3, r2
 8007898:	19db      	adds	r3, r3, r7
 800789a:	2200      	movs	r2, #0
 800789c:	701a      	strb	r2, [r3, #0]
 800789e:	e0b4      	b.n	8007a0a <UART_SetConfig+0x246>
 80078a0:	231b      	movs	r3, #27
 80078a2:	2220      	movs	r2, #32
 80078a4:	189b      	adds	r3, r3, r2
 80078a6:	19db      	adds	r3, r3, r7
 80078a8:	2202      	movs	r2, #2
 80078aa:	701a      	strb	r2, [r3, #0]
 80078ac:	e0ad      	b.n	8007a0a <UART_SetConfig+0x246>
 80078ae:	231b      	movs	r3, #27
 80078b0:	2220      	movs	r2, #32
 80078b2:	189b      	adds	r3, r3, r2
 80078b4:	19db      	adds	r3, r3, r7
 80078b6:	2204      	movs	r2, #4
 80078b8:	701a      	strb	r2, [r3, #0]
 80078ba:	e0a6      	b.n	8007a0a <UART_SetConfig+0x246>
 80078bc:	231b      	movs	r3, #27
 80078be:	2220      	movs	r2, #32
 80078c0:	189b      	adds	r3, r3, r2
 80078c2:	19db      	adds	r3, r3, r7
 80078c4:	2208      	movs	r2, #8
 80078c6:	701a      	strb	r2, [r3, #0]
 80078c8:	e09f      	b.n	8007a0a <UART_SetConfig+0x246>
 80078ca:	231b      	movs	r3, #27
 80078cc:	2220      	movs	r2, #32
 80078ce:	189b      	adds	r3, r3, r2
 80078d0:	19db      	adds	r3, r3, r7
 80078d2:	2210      	movs	r2, #16
 80078d4:	701a      	strb	r2, [r3, #0]
 80078d6:	e098      	b.n	8007a0a <UART_SetConfig+0x246>
 80078d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a7b      	ldr	r2, [pc, #492]	; (8007acc <UART_SetConfig+0x308>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d131      	bne.n	8007946 <UART_SetConfig+0x182>
 80078e2:	4b79      	ldr	r3, [pc, #484]	; (8007ac8 <UART_SetConfig+0x304>)
 80078e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e6:	220c      	movs	r2, #12
 80078e8:	4013      	ands	r3, r2
 80078ea:	2b0c      	cmp	r3, #12
 80078ec:	d01d      	beq.n	800792a <UART_SetConfig+0x166>
 80078ee:	d823      	bhi.n	8007938 <UART_SetConfig+0x174>
 80078f0:	2b08      	cmp	r3, #8
 80078f2:	d00c      	beq.n	800790e <UART_SetConfig+0x14a>
 80078f4:	d820      	bhi.n	8007938 <UART_SetConfig+0x174>
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d002      	beq.n	8007900 <UART_SetConfig+0x13c>
 80078fa:	2b04      	cmp	r3, #4
 80078fc:	d00e      	beq.n	800791c <UART_SetConfig+0x158>
 80078fe:	e01b      	b.n	8007938 <UART_SetConfig+0x174>
 8007900:	231b      	movs	r3, #27
 8007902:	2220      	movs	r2, #32
 8007904:	189b      	adds	r3, r3, r2
 8007906:	19db      	adds	r3, r3, r7
 8007908:	2200      	movs	r2, #0
 800790a:	701a      	strb	r2, [r3, #0]
 800790c:	e07d      	b.n	8007a0a <UART_SetConfig+0x246>
 800790e:	231b      	movs	r3, #27
 8007910:	2220      	movs	r2, #32
 8007912:	189b      	adds	r3, r3, r2
 8007914:	19db      	adds	r3, r3, r7
 8007916:	2202      	movs	r2, #2
 8007918:	701a      	strb	r2, [r3, #0]
 800791a:	e076      	b.n	8007a0a <UART_SetConfig+0x246>
 800791c:	231b      	movs	r3, #27
 800791e:	2220      	movs	r2, #32
 8007920:	189b      	adds	r3, r3, r2
 8007922:	19db      	adds	r3, r3, r7
 8007924:	2204      	movs	r2, #4
 8007926:	701a      	strb	r2, [r3, #0]
 8007928:	e06f      	b.n	8007a0a <UART_SetConfig+0x246>
 800792a:	231b      	movs	r3, #27
 800792c:	2220      	movs	r2, #32
 800792e:	189b      	adds	r3, r3, r2
 8007930:	19db      	adds	r3, r3, r7
 8007932:	2208      	movs	r2, #8
 8007934:	701a      	strb	r2, [r3, #0]
 8007936:	e068      	b.n	8007a0a <UART_SetConfig+0x246>
 8007938:	231b      	movs	r3, #27
 800793a:	2220      	movs	r2, #32
 800793c:	189b      	adds	r3, r3, r2
 800793e:	19db      	adds	r3, r3, r7
 8007940:	2210      	movs	r2, #16
 8007942:	701a      	strb	r2, [r3, #0]
 8007944:	e061      	b.n	8007a0a <UART_SetConfig+0x246>
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a61      	ldr	r2, [pc, #388]	; (8007ad0 <UART_SetConfig+0x30c>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d106      	bne.n	800795e <UART_SetConfig+0x19a>
 8007950:	231b      	movs	r3, #27
 8007952:	2220      	movs	r2, #32
 8007954:	189b      	adds	r3, r3, r2
 8007956:	19db      	adds	r3, r3, r7
 8007958:	2200      	movs	r2, #0
 800795a:	701a      	strb	r2, [r3, #0]
 800795c:	e055      	b.n	8007a0a <UART_SetConfig+0x246>
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a5c      	ldr	r2, [pc, #368]	; (8007ad4 <UART_SetConfig+0x310>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d106      	bne.n	8007976 <UART_SetConfig+0x1b2>
 8007968:	231b      	movs	r3, #27
 800796a:	2220      	movs	r2, #32
 800796c:	189b      	adds	r3, r3, r2
 800796e:	19db      	adds	r3, r3, r7
 8007970:	2200      	movs	r2, #0
 8007972:	701a      	strb	r2, [r3, #0]
 8007974:	e049      	b.n	8007a0a <UART_SetConfig+0x246>
 8007976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a50      	ldr	r2, [pc, #320]	; (8007abc <UART_SetConfig+0x2f8>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d13e      	bne.n	80079fe <UART_SetConfig+0x23a>
 8007980:	4b51      	ldr	r3, [pc, #324]	; (8007ac8 <UART_SetConfig+0x304>)
 8007982:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007984:	23c0      	movs	r3, #192	; 0xc0
 8007986:	011b      	lsls	r3, r3, #4
 8007988:	4013      	ands	r3, r2
 800798a:	22c0      	movs	r2, #192	; 0xc0
 800798c:	0112      	lsls	r2, r2, #4
 800798e:	4293      	cmp	r3, r2
 8007990:	d027      	beq.n	80079e2 <UART_SetConfig+0x21e>
 8007992:	22c0      	movs	r2, #192	; 0xc0
 8007994:	0112      	lsls	r2, r2, #4
 8007996:	4293      	cmp	r3, r2
 8007998:	d82a      	bhi.n	80079f0 <UART_SetConfig+0x22c>
 800799a:	2280      	movs	r2, #128	; 0x80
 800799c:	0112      	lsls	r2, r2, #4
 800799e:	4293      	cmp	r3, r2
 80079a0:	d011      	beq.n	80079c6 <UART_SetConfig+0x202>
 80079a2:	2280      	movs	r2, #128	; 0x80
 80079a4:	0112      	lsls	r2, r2, #4
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d822      	bhi.n	80079f0 <UART_SetConfig+0x22c>
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d004      	beq.n	80079b8 <UART_SetConfig+0x1f4>
 80079ae:	2280      	movs	r2, #128	; 0x80
 80079b0:	00d2      	lsls	r2, r2, #3
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d00e      	beq.n	80079d4 <UART_SetConfig+0x210>
 80079b6:	e01b      	b.n	80079f0 <UART_SetConfig+0x22c>
 80079b8:	231b      	movs	r3, #27
 80079ba:	2220      	movs	r2, #32
 80079bc:	189b      	adds	r3, r3, r2
 80079be:	19db      	adds	r3, r3, r7
 80079c0:	2200      	movs	r2, #0
 80079c2:	701a      	strb	r2, [r3, #0]
 80079c4:	e021      	b.n	8007a0a <UART_SetConfig+0x246>
 80079c6:	231b      	movs	r3, #27
 80079c8:	2220      	movs	r2, #32
 80079ca:	189b      	adds	r3, r3, r2
 80079cc:	19db      	adds	r3, r3, r7
 80079ce:	2202      	movs	r2, #2
 80079d0:	701a      	strb	r2, [r3, #0]
 80079d2:	e01a      	b.n	8007a0a <UART_SetConfig+0x246>
 80079d4:	231b      	movs	r3, #27
 80079d6:	2220      	movs	r2, #32
 80079d8:	189b      	adds	r3, r3, r2
 80079da:	19db      	adds	r3, r3, r7
 80079dc:	2204      	movs	r2, #4
 80079de:	701a      	strb	r2, [r3, #0]
 80079e0:	e013      	b.n	8007a0a <UART_SetConfig+0x246>
 80079e2:	231b      	movs	r3, #27
 80079e4:	2220      	movs	r2, #32
 80079e6:	189b      	adds	r3, r3, r2
 80079e8:	19db      	adds	r3, r3, r7
 80079ea:	2208      	movs	r2, #8
 80079ec:	701a      	strb	r2, [r3, #0]
 80079ee:	e00c      	b.n	8007a0a <UART_SetConfig+0x246>
 80079f0:	231b      	movs	r3, #27
 80079f2:	2220      	movs	r2, #32
 80079f4:	189b      	adds	r3, r3, r2
 80079f6:	19db      	adds	r3, r3, r7
 80079f8:	2210      	movs	r2, #16
 80079fa:	701a      	strb	r2, [r3, #0]
 80079fc:	e005      	b.n	8007a0a <UART_SetConfig+0x246>
 80079fe:	231b      	movs	r3, #27
 8007a00:	2220      	movs	r2, #32
 8007a02:	189b      	adds	r3, r3, r2
 8007a04:	19db      	adds	r3, r3, r7
 8007a06:	2210      	movs	r2, #16
 8007a08:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a2b      	ldr	r2, [pc, #172]	; (8007abc <UART_SetConfig+0x2f8>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d000      	beq.n	8007a16 <UART_SetConfig+0x252>
 8007a14:	e0a9      	b.n	8007b6a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a16:	231b      	movs	r3, #27
 8007a18:	2220      	movs	r2, #32
 8007a1a:	189b      	adds	r3, r3, r2
 8007a1c:	19db      	adds	r3, r3, r7
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	2b08      	cmp	r3, #8
 8007a22:	d015      	beq.n	8007a50 <UART_SetConfig+0x28c>
 8007a24:	dc18      	bgt.n	8007a58 <UART_SetConfig+0x294>
 8007a26:	2b04      	cmp	r3, #4
 8007a28:	d00d      	beq.n	8007a46 <UART_SetConfig+0x282>
 8007a2a:	dc15      	bgt.n	8007a58 <UART_SetConfig+0x294>
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <UART_SetConfig+0x272>
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d005      	beq.n	8007a40 <UART_SetConfig+0x27c>
 8007a34:	e010      	b.n	8007a58 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a36:	f7fd fd3f 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 8007a3a:	0003      	movs	r3, r0
 8007a3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a3e:	e014      	b.n	8007a6a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a40:	4b25      	ldr	r3, [pc, #148]	; (8007ad8 <UART_SetConfig+0x314>)
 8007a42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a44:	e011      	b.n	8007a6a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a46:	f7fd fcab 	bl	80053a0 <HAL_RCC_GetSysClockFreq>
 8007a4a:	0003      	movs	r3, r0
 8007a4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a4e:	e00c      	b.n	8007a6a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a50:	2380      	movs	r3, #128	; 0x80
 8007a52:	021b      	lsls	r3, r3, #8
 8007a54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a56:	e008      	b.n	8007a6a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007a5c:	231a      	movs	r3, #26
 8007a5e:	2220      	movs	r2, #32
 8007a60:	189b      	adds	r3, r3, r2
 8007a62:	19db      	adds	r3, r3, r7
 8007a64:	2201      	movs	r2, #1
 8007a66:	701a      	strb	r2, [r3, #0]
        break;
 8007a68:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d100      	bne.n	8007a72 <UART_SetConfig+0x2ae>
 8007a70:	e14c      	b.n	8007d0c <UART_SetConfig+0x548>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a76:	4b19      	ldr	r3, [pc, #100]	; (8007adc <UART_SetConfig+0x318>)
 8007a78:	0052      	lsls	r2, r2, #1
 8007a7a:	5ad3      	ldrh	r3, [r2, r3]
 8007a7c:	0019      	movs	r1, r3
 8007a7e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007a80:	f7f8 fb54 	bl	800012c <__udivsi3>
 8007a84:	0003      	movs	r3, r0
 8007a86:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	0013      	movs	r3, r2
 8007a8e:	005b      	lsls	r3, r3, #1
 8007a90:	189b      	adds	r3, r3, r2
 8007a92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d305      	bcc.n	8007aa4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d91d      	bls.n	8007ae0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8007aa4:	231a      	movs	r3, #26
 8007aa6:	2220      	movs	r2, #32
 8007aa8:	189b      	adds	r3, r3, r2
 8007aaa:	19db      	adds	r3, r3, r7
 8007aac:	2201      	movs	r2, #1
 8007aae:	701a      	strb	r2, [r3, #0]
 8007ab0:	e12c      	b.n	8007d0c <UART_SetConfig+0x548>
 8007ab2:	46c0      	nop			; (mov r8, r8)
 8007ab4:	cfff69f3 	.word	0xcfff69f3
 8007ab8:	ffffcfff 	.word	0xffffcfff
 8007abc:	40008000 	.word	0x40008000
 8007ac0:	11fff4ff 	.word	0x11fff4ff
 8007ac4:	40013800 	.word	0x40013800
 8007ac8:	40021000 	.word	0x40021000
 8007acc:	40004400 	.word	0x40004400
 8007ad0:	40004800 	.word	0x40004800
 8007ad4:	40004c00 	.word	0x40004c00
 8007ad8:	00f42400 	.word	0x00f42400
 8007adc:	0800a1b8 	.word	0x0800a1b8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae2:	61bb      	str	r3, [r7, #24]
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	61fb      	str	r3, [r7, #28]
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007aec:	4b93      	ldr	r3, [pc, #588]	; (8007d3c <UART_SetConfig+0x578>)
 8007aee:	0052      	lsls	r2, r2, #1
 8007af0:	5ad3      	ldrh	r3, [r2, r3]
 8007af2:	613b      	str	r3, [r7, #16]
 8007af4:	2300      	movs	r3, #0
 8007af6:	617b      	str	r3, [r7, #20]
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	69b8      	ldr	r0, [r7, #24]
 8007afe:	69f9      	ldr	r1, [r7, #28]
 8007b00:	f7f8 fc8a 	bl	8000418 <__aeabi_uldivmod>
 8007b04:	0002      	movs	r2, r0
 8007b06:	000b      	movs	r3, r1
 8007b08:	0e11      	lsrs	r1, r2, #24
 8007b0a:	021d      	lsls	r5, r3, #8
 8007b0c:	430d      	orrs	r5, r1
 8007b0e:	0214      	lsls	r4, r2, #8
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	085b      	lsrs	r3, r3, #1
 8007b16:	60bb      	str	r3, [r7, #8]
 8007b18:	2300      	movs	r3, #0
 8007b1a:	60fb      	str	r3, [r7, #12]
 8007b1c:	68b8      	ldr	r0, [r7, #8]
 8007b1e:	68f9      	ldr	r1, [r7, #12]
 8007b20:	1900      	adds	r0, r0, r4
 8007b22:	4169      	adcs	r1, r5
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	603b      	str	r3, [r7, #0]
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	607b      	str	r3, [r7, #4]
 8007b2e:	683a      	ldr	r2, [r7, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f7f8 fc71 	bl	8000418 <__aeabi_uldivmod>
 8007b36:	0002      	movs	r2, r0
 8007b38:	000b      	movs	r3, r1
 8007b3a:	0013      	movs	r3, r2
 8007b3c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b40:	23c0      	movs	r3, #192	; 0xc0
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d309      	bcc.n	8007b5c <UART_SetConfig+0x398>
 8007b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b4a:	2380      	movs	r3, #128	; 0x80
 8007b4c:	035b      	lsls	r3, r3, #13
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d204      	bcs.n	8007b5c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8007b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b58:	60da      	str	r2, [r3, #12]
 8007b5a:	e0d7      	b.n	8007d0c <UART_SetConfig+0x548>
        }
        else
        {
          ret = HAL_ERROR;
 8007b5c:	231a      	movs	r3, #26
 8007b5e:	2220      	movs	r2, #32
 8007b60:	189b      	adds	r3, r3, r2
 8007b62:	19db      	adds	r3, r3, r7
 8007b64:	2201      	movs	r2, #1
 8007b66:	701a      	strb	r2, [r3, #0]
 8007b68:	e0d0      	b.n	8007d0c <UART_SetConfig+0x548>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6c:	69da      	ldr	r2, [r3, #28]
 8007b6e:	2380      	movs	r3, #128	; 0x80
 8007b70:	021b      	lsls	r3, r3, #8
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d000      	beq.n	8007b78 <UART_SetConfig+0x3b4>
 8007b76:	e071      	b.n	8007c5c <UART_SetConfig+0x498>
  {
    switch (clocksource)
 8007b78:	231b      	movs	r3, #27
 8007b7a:	2220      	movs	r2, #32
 8007b7c:	189b      	adds	r3, r3, r2
 8007b7e:	19db      	adds	r3, r3, r7
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	2b08      	cmp	r3, #8
 8007b84:	d015      	beq.n	8007bb2 <UART_SetConfig+0x3ee>
 8007b86:	dc18      	bgt.n	8007bba <UART_SetConfig+0x3f6>
 8007b88:	2b04      	cmp	r3, #4
 8007b8a:	d00d      	beq.n	8007ba8 <UART_SetConfig+0x3e4>
 8007b8c:	dc15      	bgt.n	8007bba <UART_SetConfig+0x3f6>
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d002      	beq.n	8007b98 <UART_SetConfig+0x3d4>
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d005      	beq.n	8007ba2 <UART_SetConfig+0x3de>
 8007b96:	e010      	b.n	8007bba <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b98:	f7fd fc8e 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 8007b9c:	0003      	movs	r3, r0
 8007b9e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ba0:	e014      	b.n	8007bcc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ba2:	4b67      	ldr	r3, [pc, #412]	; (8007d40 <UART_SetConfig+0x57c>)
 8007ba4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ba6:	e011      	b.n	8007bcc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ba8:	f7fd fbfa 	bl	80053a0 <HAL_RCC_GetSysClockFreq>
 8007bac:	0003      	movs	r3, r0
 8007bae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bb0:	e00c      	b.n	8007bcc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bb2:	2380      	movs	r3, #128	; 0x80
 8007bb4:	021b      	lsls	r3, r3, #8
 8007bb6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bb8:	e008      	b.n	8007bcc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007bbe:	231a      	movs	r3, #26
 8007bc0:	2220      	movs	r2, #32
 8007bc2:	189b      	adds	r3, r3, r2
 8007bc4:	19db      	adds	r3, r3, r7
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	701a      	strb	r2, [r3, #0]
        break;
 8007bca:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d100      	bne.n	8007bd4 <UART_SetConfig+0x410>
 8007bd2:	e09b      	b.n	8007d0c <UART_SetConfig+0x548>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bd8:	4b58      	ldr	r3, [pc, #352]	; (8007d3c <UART_SetConfig+0x578>)
 8007bda:	0052      	lsls	r2, r2, #1
 8007bdc:	5ad3      	ldrh	r3, [r2, r3]
 8007bde:	0019      	movs	r1, r3
 8007be0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007be2:	f7f8 faa3 	bl	800012c <__udivsi3>
 8007be6:	0003      	movs	r3, r0
 8007be8:	005a      	lsls	r2, r3, #1
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	085b      	lsrs	r3, r3, #1
 8007bf0:	18d2      	adds	r2, r2, r3
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	0019      	movs	r1, r3
 8007bf8:	0010      	movs	r0, r2
 8007bfa:	f7f8 fa97 	bl	800012c <__udivsi3>
 8007bfe:	0003      	movs	r3, r0
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c06:	2b0f      	cmp	r3, #15
 8007c08:	d921      	bls.n	8007c4e <UART_SetConfig+0x48a>
 8007c0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c0c:	2380      	movs	r3, #128	; 0x80
 8007c0e:	025b      	lsls	r3, r3, #9
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d21c      	bcs.n	8007c4e <UART_SetConfig+0x48a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	200e      	movs	r0, #14
 8007c1a:	2420      	movs	r4, #32
 8007c1c:	1903      	adds	r3, r0, r4
 8007c1e:	19db      	adds	r3, r3, r7
 8007c20:	210f      	movs	r1, #15
 8007c22:	438a      	bics	r2, r1
 8007c24:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c28:	085b      	lsrs	r3, r3, #1
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	2207      	movs	r2, #7
 8007c2e:	4013      	ands	r3, r2
 8007c30:	b299      	uxth	r1, r3
 8007c32:	1903      	adds	r3, r0, r4
 8007c34:	19db      	adds	r3, r3, r7
 8007c36:	1902      	adds	r2, r0, r4
 8007c38:	19d2      	adds	r2, r2, r7
 8007c3a:	8812      	ldrh	r2, [r2, #0]
 8007c3c:	430a      	orrs	r2, r1
 8007c3e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	1902      	adds	r2, r0, r4
 8007c46:	19d2      	adds	r2, r2, r7
 8007c48:	8812      	ldrh	r2, [r2, #0]
 8007c4a:	60da      	str	r2, [r3, #12]
 8007c4c:	e05e      	b.n	8007d0c <UART_SetConfig+0x548>
      }
      else
      {
        ret = HAL_ERROR;
 8007c4e:	231a      	movs	r3, #26
 8007c50:	2220      	movs	r2, #32
 8007c52:	189b      	adds	r3, r3, r2
 8007c54:	19db      	adds	r3, r3, r7
 8007c56:	2201      	movs	r2, #1
 8007c58:	701a      	strb	r2, [r3, #0]
 8007c5a:	e057      	b.n	8007d0c <UART_SetConfig+0x548>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c5c:	231b      	movs	r3, #27
 8007c5e:	2220      	movs	r2, #32
 8007c60:	189b      	adds	r3, r3, r2
 8007c62:	19db      	adds	r3, r3, r7
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	2b08      	cmp	r3, #8
 8007c68:	d015      	beq.n	8007c96 <UART_SetConfig+0x4d2>
 8007c6a:	dc18      	bgt.n	8007c9e <UART_SetConfig+0x4da>
 8007c6c:	2b04      	cmp	r3, #4
 8007c6e:	d00d      	beq.n	8007c8c <UART_SetConfig+0x4c8>
 8007c70:	dc15      	bgt.n	8007c9e <UART_SetConfig+0x4da>
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d002      	beq.n	8007c7c <UART_SetConfig+0x4b8>
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d005      	beq.n	8007c86 <UART_SetConfig+0x4c2>
 8007c7a:	e010      	b.n	8007c9e <UART_SetConfig+0x4da>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c7c:	f7fd fc1c 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 8007c80:	0003      	movs	r3, r0
 8007c82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c84:	e014      	b.n	8007cb0 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c86:	4b2e      	ldr	r3, [pc, #184]	; (8007d40 <UART_SetConfig+0x57c>)
 8007c88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c8a:	e011      	b.n	8007cb0 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c8c:	f7fd fb88 	bl	80053a0 <HAL_RCC_GetSysClockFreq>
 8007c90:	0003      	movs	r3, r0
 8007c92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c94:	e00c      	b.n	8007cb0 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c96:	2380      	movs	r3, #128	; 0x80
 8007c98:	021b      	lsls	r3, r3, #8
 8007c9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c9c:	e008      	b.n	8007cb0 <UART_SetConfig+0x4ec>
      default:
        pclk = 0U;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007ca2:	231a      	movs	r3, #26
 8007ca4:	2220      	movs	r2, #32
 8007ca6:	189b      	adds	r3, r3, r2
 8007ca8:	19db      	adds	r3, r3, r7
 8007caa:	2201      	movs	r2, #1
 8007cac:	701a      	strb	r2, [r3, #0]
        break;
 8007cae:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d02a      	beq.n	8007d0c <UART_SetConfig+0x548>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cba:	4b20      	ldr	r3, [pc, #128]	; (8007d3c <UART_SetConfig+0x578>)
 8007cbc:	0052      	lsls	r2, r2, #1
 8007cbe:	5ad3      	ldrh	r3, [r2, r3]
 8007cc0:	0019      	movs	r1, r3
 8007cc2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007cc4:	f7f8 fa32 	bl	800012c <__udivsi3>
 8007cc8:	0003      	movs	r3, r0
 8007cca:	001a      	movs	r2, r3
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	085b      	lsrs	r3, r3, #1
 8007cd2:	18d2      	adds	r2, r2, r3
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	0019      	movs	r1, r3
 8007cda:	0010      	movs	r0, r2
 8007cdc:	f7f8 fa26 	bl	800012c <__udivsi3>
 8007ce0:	0003      	movs	r3, r0
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce8:	2b0f      	cmp	r3, #15
 8007cea:	d909      	bls.n	8007d00 <UART_SetConfig+0x53c>
 8007cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cee:	2380      	movs	r3, #128	; 0x80
 8007cf0:	025b      	lsls	r3, r3, #9
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d204      	bcs.n	8007d00 <UART_SetConfig+0x53c>
      {
        huart->Instance->BRR = usartdiv;
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cfc:	60da      	str	r2, [r3, #12]
 8007cfe:	e005      	b.n	8007d0c <UART_SetConfig+0x548>
      }
      else
      {
        ret = HAL_ERROR;
 8007d00:	231a      	movs	r3, #26
 8007d02:	2220      	movs	r2, #32
 8007d04:	189b      	adds	r3, r3, r2
 8007d06:	19db      	adds	r3, r3, r7
 8007d08:	2201      	movs	r2, #1
 8007d0a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0e:	226a      	movs	r2, #106	; 0x6a
 8007d10:	2101      	movs	r1, #1
 8007d12:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d16:	2268      	movs	r2, #104	; 0x68
 8007d18:	2101      	movs	r1, #1
 8007d1a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1e:	2200      	movs	r2, #0
 8007d20:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d24:	2200      	movs	r2, #0
 8007d26:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007d28:	231a      	movs	r3, #26
 8007d2a:	2220      	movs	r2, #32
 8007d2c:	189b      	adds	r3, r3, r2
 8007d2e:	19db      	adds	r3, r3, r7
 8007d30:	781b      	ldrb	r3, [r3, #0]
}
 8007d32:	0018      	movs	r0, r3
 8007d34:	46bd      	mov	sp, r7
 8007d36:	b010      	add	sp, #64	; 0x40
 8007d38:	bdb0      	pop	{r4, r5, r7, pc}
 8007d3a:	46c0      	nop			; (mov r8, r8)
 8007d3c:	0800a1b8 	.word	0x0800a1b8
 8007d40:	00f42400 	.word	0x00f42400

08007d44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d50:	2201      	movs	r2, #1
 8007d52:	4013      	ands	r3, r2
 8007d54:	d00b      	beq.n	8007d6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	4a4a      	ldr	r2, [pc, #296]	; (8007e88 <UART_AdvFeatureConfig+0x144>)
 8007d5e:	4013      	ands	r3, r2
 8007d60:	0019      	movs	r1, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	430a      	orrs	r2, r1
 8007d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d72:	2202      	movs	r2, #2
 8007d74:	4013      	ands	r3, r2
 8007d76:	d00b      	beq.n	8007d90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	4a43      	ldr	r2, [pc, #268]	; (8007e8c <UART_AdvFeatureConfig+0x148>)
 8007d80:	4013      	ands	r3, r2
 8007d82:	0019      	movs	r1, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	430a      	orrs	r2, r1
 8007d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d94:	2204      	movs	r2, #4
 8007d96:	4013      	ands	r3, r2
 8007d98:	d00b      	beq.n	8007db2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	4a3b      	ldr	r2, [pc, #236]	; (8007e90 <UART_AdvFeatureConfig+0x14c>)
 8007da2:	4013      	ands	r3, r2
 8007da4:	0019      	movs	r1, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	430a      	orrs	r2, r1
 8007db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db6:	2208      	movs	r2, #8
 8007db8:	4013      	ands	r3, r2
 8007dba:	d00b      	beq.n	8007dd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	4a34      	ldr	r2, [pc, #208]	; (8007e94 <UART_AdvFeatureConfig+0x150>)
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	0019      	movs	r1, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	430a      	orrs	r2, r1
 8007dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd8:	2210      	movs	r2, #16
 8007dda:	4013      	ands	r3, r2
 8007ddc:	d00b      	beq.n	8007df6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	4a2c      	ldr	r2, [pc, #176]	; (8007e98 <UART_AdvFeatureConfig+0x154>)
 8007de6:	4013      	ands	r3, r2
 8007de8:	0019      	movs	r1, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	430a      	orrs	r2, r1
 8007df4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dfa:	2220      	movs	r2, #32
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	d00b      	beq.n	8007e18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	4a25      	ldr	r2, [pc, #148]	; (8007e9c <UART_AdvFeatureConfig+0x158>)
 8007e08:	4013      	ands	r3, r2
 8007e0a:	0019      	movs	r1, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	430a      	orrs	r2, r1
 8007e16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1c:	2240      	movs	r2, #64	; 0x40
 8007e1e:	4013      	ands	r3, r2
 8007e20:	d01d      	beq.n	8007e5e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	4a1d      	ldr	r2, [pc, #116]	; (8007ea0 <UART_AdvFeatureConfig+0x15c>)
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	0019      	movs	r1, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	430a      	orrs	r2, r1
 8007e38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e3e:	2380      	movs	r3, #128	; 0x80
 8007e40:	035b      	lsls	r3, r3, #13
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d10b      	bne.n	8007e5e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	4a15      	ldr	r2, [pc, #84]	; (8007ea4 <UART_AdvFeatureConfig+0x160>)
 8007e4e:	4013      	ands	r3, r2
 8007e50:	0019      	movs	r1, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e62:	2280      	movs	r2, #128	; 0x80
 8007e64:	4013      	ands	r3, r2
 8007e66:	d00b      	beq.n	8007e80 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	4a0e      	ldr	r2, [pc, #56]	; (8007ea8 <UART_AdvFeatureConfig+0x164>)
 8007e70:	4013      	ands	r3, r2
 8007e72:	0019      	movs	r1, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	430a      	orrs	r2, r1
 8007e7e:	605a      	str	r2, [r3, #4]
  }
}
 8007e80:	46c0      	nop			; (mov r8, r8)
 8007e82:	46bd      	mov	sp, r7
 8007e84:	b002      	add	sp, #8
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	fffdffff 	.word	0xfffdffff
 8007e8c:	fffeffff 	.word	0xfffeffff
 8007e90:	fffbffff 	.word	0xfffbffff
 8007e94:	ffff7fff 	.word	0xffff7fff
 8007e98:	ffffefff 	.word	0xffffefff
 8007e9c:	ffffdfff 	.word	0xffffdfff
 8007ea0:	ffefffff 	.word	0xffefffff
 8007ea4:	ff9fffff 	.word	0xff9fffff
 8007ea8:	fff7ffff 	.word	0xfff7ffff

08007eac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af02      	add	r7, sp, #8
 8007eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	228c      	movs	r2, #140	; 0x8c
 8007eb8:	2100      	movs	r1, #0
 8007eba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ebc:	f7fb fd82 	bl	80039c4 <HAL_GetTick>
 8007ec0:	0003      	movs	r3, r0
 8007ec2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2208      	movs	r2, #8
 8007ecc:	4013      	ands	r3, r2
 8007ece:	2b08      	cmp	r3, #8
 8007ed0:	d10c      	bne.n	8007eec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2280      	movs	r2, #128	; 0x80
 8007ed6:	0391      	lsls	r1, r2, #14
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	4a18      	ldr	r2, [pc, #96]	; (8007f3c <UART_CheckIdleState+0x90>)
 8007edc:	9200      	str	r2, [sp, #0]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f000 f82e 	bl	8007f40 <UART_WaitOnFlagUntilTimeout>
 8007ee4:	1e03      	subs	r3, r0, #0
 8007ee6:	d001      	beq.n	8007eec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e023      	b.n	8007f34 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2204      	movs	r2, #4
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	2b04      	cmp	r3, #4
 8007ef8:	d10c      	bne.n	8007f14 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2280      	movs	r2, #128	; 0x80
 8007efe:	03d1      	lsls	r1, r2, #15
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	4a0e      	ldr	r2, [pc, #56]	; (8007f3c <UART_CheckIdleState+0x90>)
 8007f04:	9200      	str	r2, [sp, #0]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f000 f81a 	bl	8007f40 <UART_WaitOnFlagUntilTimeout>
 8007f0c:	1e03      	subs	r3, r0, #0
 8007f0e:	d001      	beq.n	8007f14 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f10:	2303      	movs	r3, #3
 8007f12:	e00f      	b.n	8007f34 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2284      	movs	r2, #132	; 0x84
 8007f18:	2120      	movs	r1, #32
 8007f1a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2288      	movs	r2, #136	; 0x88
 8007f20:	2120      	movs	r1, #32
 8007f22:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2280      	movs	r2, #128	; 0x80
 8007f2e:	2100      	movs	r1, #0
 8007f30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	0018      	movs	r0, r3
 8007f36:	46bd      	mov	sp, r7
 8007f38:	b004      	add	sp, #16
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	01ffffff 	.word	0x01ffffff

08007f40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b094      	sub	sp, #80	; 0x50
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	603b      	str	r3, [r7, #0]
 8007f4c:	1dfb      	adds	r3, r7, #7
 8007f4e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f50:	e0a7      	b.n	80080a2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f54:	3301      	adds	r3, #1
 8007f56:	d100      	bne.n	8007f5a <UART_WaitOnFlagUntilTimeout+0x1a>
 8007f58:	e0a3      	b.n	80080a2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f5a:	f7fb fd33 	bl	80039c4 <HAL_GetTick>
 8007f5e:	0002      	movs	r2, r0
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d302      	bcc.n	8007f70 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d13f      	bne.n	8007ff0 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f70:	f3ef 8310 	mrs	r3, PRIMASK
 8007f74:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f78:	647b      	str	r3, [r7, #68]	; 0x44
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f80:	f383 8810 	msr	PRIMASK, r3
}
 8007f84:	46c0      	nop			; (mov r8, r8)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	494e      	ldr	r1, [pc, #312]	; (80080cc <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007f92:	400a      	ands	r2, r1
 8007f94:	601a      	str	r2, [r3, #0]
 8007f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f98:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9c:	f383 8810 	msr	PRIMASK, r3
}
 8007fa0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8007fa6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007faa:	643b      	str	r3, [r7, #64]	; 0x40
 8007fac:	2301      	movs	r3, #1
 8007fae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb2:	f383 8810 	msr	PRIMASK, r3
}
 8007fb6:	46c0      	nop			; (mov r8, r8)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	689a      	ldr	r2, [r3, #8]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2101      	movs	r1, #1
 8007fc4:	438a      	bics	r2, r1
 8007fc6:	609a      	str	r2, [r3, #8]
 8007fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fca:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fce:	f383 8810 	msr	PRIMASK, r3
}
 8007fd2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2284      	movs	r2, #132	; 0x84
 8007fd8:	2120      	movs	r1, #32
 8007fda:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2288      	movs	r2, #136	; 0x88
 8007fe0:	2120      	movs	r1, #32
 8007fe2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2280      	movs	r2, #128	; 0x80
 8007fe8:	2100      	movs	r1, #0
 8007fea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007fec:	2303      	movs	r3, #3
 8007fee:	e069      	b.n	80080c4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2204      	movs	r2, #4
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	d052      	beq.n	80080a2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	69da      	ldr	r2, [r3, #28]
 8008002:	2380      	movs	r3, #128	; 0x80
 8008004:	011b      	lsls	r3, r3, #4
 8008006:	401a      	ands	r2, r3
 8008008:	2380      	movs	r3, #128	; 0x80
 800800a:	011b      	lsls	r3, r3, #4
 800800c:	429a      	cmp	r2, r3
 800800e:	d148      	bne.n	80080a2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2280      	movs	r2, #128	; 0x80
 8008016:	0112      	lsls	r2, r2, #4
 8008018:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800801a:	f3ef 8310 	mrs	r3, PRIMASK
 800801e:	613b      	str	r3, [r7, #16]
  return(result);
 8008020:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008024:	2301      	movs	r3, #1
 8008026:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	f383 8810 	msr	PRIMASK, r3
}
 800802e:	46c0      	nop			; (mov r8, r8)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4924      	ldr	r1, [pc, #144]	; (80080cc <UART_WaitOnFlagUntilTimeout+0x18c>)
 800803c:	400a      	ands	r2, r1
 800803e:	601a      	str	r2, [r3, #0]
 8008040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008042:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	f383 8810 	msr	PRIMASK, r3
}
 800804a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800804c:	f3ef 8310 	mrs	r3, PRIMASK
 8008050:	61fb      	str	r3, [r7, #28]
  return(result);
 8008052:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008054:	64bb      	str	r3, [r7, #72]	; 0x48
 8008056:	2301      	movs	r3, #1
 8008058:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800805a:	6a3b      	ldr	r3, [r7, #32]
 800805c:	f383 8810 	msr	PRIMASK, r3
}
 8008060:	46c0      	nop			; (mov r8, r8)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	689a      	ldr	r2, [r3, #8]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2101      	movs	r1, #1
 800806e:	438a      	bics	r2, r1
 8008070:	609a      	str	r2, [r3, #8]
 8008072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008074:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008078:	f383 8810 	msr	PRIMASK, r3
}
 800807c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2284      	movs	r2, #132	; 0x84
 8008082:	2120      	movs	r1, #32
 8008084:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2288      	movs	r2, #136	; 0x88
 800808a:	2120      	movs	r1, #32
 800808c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	228c      	movs	r2, #140	; 0x8c
 8008092:	2120      	movs	r1, #32
 8008094:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2280      	movs	r2, #128	; 0x80
 800809a:	2100      	movs	r1, #0
 800809c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	e010      	b.n	80080c4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	69db      	ldr	r3, [r3, #28]
 80080a8:	68ba      	ldr	r2, [r7, #8]
 80080aa:	4013      	ands	r3, r2
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	425a      	negs	r2, r3
 80080b2:	4153      	adcs	r3, r2
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	001a      	movs	r2, r3
 80080b8:	1dfb      	adds	r3, r7, #7
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d100      	bne.n	80080c2 <UART_WaitOnFlagUntilTimeout+0x182>
 80080c0:	e747      	b.n	8007f52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	0018      	movs	r0, r3
 80080c6:	46bd      	mov	sp, r7
 80080c8:	b014      	add	sp, #80	; 0x50
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	fffffe5f 	.word	0xfffffe5f

080080d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b094      	sub	sp, #80	; 0x50
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	1dbb      	adds	r3, r7, #6
 80080dc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	1dba      	adds	r2, r7, #6
 80080e8:	215c      	movs	r1, #92	; 0x5c
 80080ea:	8812      	ldrh	r2, [r2, #0]
 80080ec:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	1dba      	adds	r2, r7, #6
 80080f2:	215e      	movs	r1, #94	; 0x5e
 80080f4:	8812      	ldrh	r2, [r2, #0]
 80080f6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2200      	movs	r2, #0
 80080fc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	689a      	ldr	r2, [r3, #8]
 8008102:	2380      	movs	r3, #128	; 0x80
 8008104:	015b      	lsls	r3, r3, #5
 8008106:	429a      	cmp	r2, r3
 8008108:	d10d      	bne.n	8008126 <UART_Start_Receive_IT+0x56>
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d104      	bne.n	800811c <UART_Start_Receive_IT+0x4c>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2260      	movs	r2, #96	; 0x60
 8008116:	496f      	ldr	r1, [pc, #444]	; (80082d4 <UART_Start_Receive_IT+0x204>)
 8008118:	5299      	strh	r1, [r3, r2]
 800811a:	e02e      	b.n	800817a <UART_Start_Receive_IT+0xaa>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2260      	movs	r2, #96	; 0x60
 8008120:	21ff      	movs	r1, #255	; 0xff
 8008122:	5299      	strh	r1, [r3, r2]
 8008124:	e029      	b.n	800817a <UART_Start_Receive_IT+0xaa>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10d      	bne.n	800814a <UART_Start_Receive_IT+0x7a>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d104      	bne.n	8008140 <UART_Start_Receive_IT+0x70>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2260      	movs	r2, #96	; 0x60
 800813a:	21ff      	movs	r1, #255	; 0xff
 800813c:	5299      	strh	r1, [r3, r2]
 800813e:	e01c      	b.n	800817a <UART_Start_Receive_IT+0xaa>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2260      	movs	r2, #96	; 0x60
 8008144:	217f      	movs	r1, #127	; 0x7f
 8008146:	5299      	strh	r1, [r3, r2]
 8008148:	e017      	b.n	800817a <UART_Start_Receive_IT+0xaa>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	689a      	ldr	r2, [r3, #8]
 800814e:	2380      	movs	r3, #128	; 0x80
 8008150:	055b      	lsls	r3, r3, #21
 8008152:	429a      	cmp	r2, r3
 8008154:	d10d      	bne.n	8008172 <UART_Start_Receive_IT+0xa2>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d104      	bne.n	8008168 <UART_Start_Receive_IT+0x98>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2260      	movs	r2, #96	; 0x60
 8008162:	217f      	movs	r1, #127	; 0x7f
 8008164:	5299      	strh	r1, [r3, r2]
 8008166:	e008      	b.n	800817a <UART_Start_Receive_IT+0xaa>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2260      	movs	r2, #96	; 0x60
 800816c:	213f      	movs	r1, #63	; 0x3f
 800816e:	5299      	strh	r1, [r3, r2]
 8008170:	e003      	b.n	800817a <UART_Start_Receive_IT+0xaa>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2260      	movs	r2, #96	; 0x60
 8008176:	2100      	movs	r1, #0
 8008178:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	228c      	movs	r2, #140	; 0x8c
 800817e:	2100      	movs	r1, #0
 8008180:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2288      	movs	r2, #136	; 0x88
 8008186:	2122      	movs	r1, #34	; 0x22
 8008188:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800818a:	f3ef 8310 	mrs	r3, PRIMASK
 800818e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008190:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008194:	2301      	movs	r3, #1
 8008196:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819a:	f383 8810 	msr	PRIMASK, r3
}
 800819e:	46c0      	nop			; (mov r8, r8)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	689a      	ldr	r2, [r3, #8]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2101      	movs	r1, #1
 80081ac:	430a      	orrs	r2, r1
 80081ae:	609a      	str	r2, [r3, #8]
 80081b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081b6:	f383 8810 	msr	PRIMASK, r3
}
 80081ba:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80081c0:	2380      	movs	r3, #128	; 0x80
 80081c2:	059b      	lsls	r3, r3, #22
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d150      	bne.n	800826a <UART_Start_Receive_IT+0x19a>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2268      	movs	r2, #104	; 0x68
 80081cc:	5a9b      	ldrh	r3, [r3, r2]
 80081ce:	1dba      	adds	r2, r7, #6
 80081d0:	8812      	ldrh	r2, [r2, #0]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d349      	bcc.n	800826a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	689a      	ldr	r2, [r3, #8]
 80081da:	2380      	movs	r3, #128	; 0x80
 80081dc:	015b      	lsls	r3, r3, #5
 80081de:	429a      	cmp	r2, r3
 80081e0:	d107      	bne.n	80081f2 <UART_Start_Receive_IT+0x122>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d103      	bne.n	80081f2 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	4a3a      	ldr	r2, [pc, #232]	; (80082d8 <UART_Start_Receive_IT+0x208>)
 80081ee:	671a      	str	r2, [r3, #112]	; 0x70
 80081f0:	e002      	b.n	80081f8 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	4a39      	ldr	r2, [pc, #228]	; (80082dc <UART_Start_Receive_IT+0x20c>)
 80081f6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2280      	movs	r2, #128	; 0x80
 80081fc:	2100      	movs	r1, #0
 80081fe:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008200:	f3ef 8310 	mrs	r3, PRIMASK
 8008204:	61fb      	str	r3, [r7, #28]
  return(result);
 8008206:	69fb      	ldr	r3, [r7, #28]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008208:	64bb      	str	r3, [r7, #72]	; 0x48
 800820a:	2301      	movs	r3, #1
 800820c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800820e:	6a3b      	ldr	r3, [r7, #32]
 8008210:	f383 8810 	msr	PRIMASK, r3
}
 8008214:	46c0      	nop			; (mov r8, r8)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2180      	movs	r1, #128	; 0x80
 8008222:	0049      	lsls	r1, r1, #1
 8008224:	430a      	orrs	r2, r1
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800822a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800822c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822e:	f383 8810 	msr	PRIMASK, r3
}
 8008232:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008234:	f3ef 8310 	mrs	r3, PRIMASK
 8008238:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800823a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800823c:	647b      	str	r3, [r7, #68]	; 0x44
 800823e:	2301      	movs	r3, #1
 8008240:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008244:	f383 8810 	msr	PRIMASK, r3
}
 8008248:	46c0      	nop			; (mov r8, r8)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	689a      	ldr	r2, [r3, #8]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2180      	movs	r1, #128	; 0x80
 8008256:	0549      	lsls	r1, r1, #21
 8008258:	430a      	orrs	r2, r1
 800825a:	609a      	str	r2, [r3, #8]
 800825c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800825e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008262:	f383 8810 	msr	PRIMASK, r3
}
 8008266:	46c0      	nop			; (mov r8, r8)
 8008268:	e02e      	b.n	80082c8 <UART_Start_Receive_IT+0x1f8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	689a      	ldr	r2, [r3, #8]
 800826e:	2380      	movs	r3, #128	; 0x80
 8008270:	015b      	lsls	r3, r3, #5
 8008272:	429a      	cmp	r2, r3
 8008274:	d107      	bne.n	8008286 <UART_Start_Receive_IT+0x1b6>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d103      	bne.n	8008286 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	4a17      	ldr	r2, [pc, #92]	; (80082e0 <UART_Start_Receive_IT+0x210>)
 8008282:	671a      	str	r2, [r3, #112]	; 0x70
 8008284:	e002      	b.n	800828c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	4a16      	ldr	r2, [pc, #88]	; (80082e4 <UART_Start_Receive_IT+0x214>)
 800828a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2280      	movs	r2, #128	; 0x80
 8008290:	2100      	movs	r1, #0
 8008292:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008294:	f3ef 8310 	mrs	r3, PRIMASK
 8008298:	613b      	str	r3, [r7, #16]
  return(result);
 800829a:	693b      	ldr	r3, [r7, #16]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800829c:	643b      	str	r3, [r7, #64]	; 0x40
 800829e:	2301      	movs	r3, #1
 80082a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	f383 8810 	msr	PRIMASK, r3
}
 80082a8:	46c0      	nop			; (mov r8, r8)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2190      	movs	r1, #144	; 0x90
 80082b6:	0049      	lsls	r1, r1, #1
 80082b8:	430a      	orrs	r2, r1
 80082ba:	601a      	str	r2, [r3, #0]
 80082bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	f383 8810 	msr	PRIMASK, r3
}
 80082c6:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	0018      	movs	r0, r3
 80082cc:	46bd      	mov	sp, r7
 80082ce:	b014      	add	sp, #80	; 0x50
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	46c0      	nop			; (mov r8, r8)
 80082d4:	000001ff 	.word	0x000001ff
 80082d8:	080089f9 	.word	0x080089f9
 80082dc:	08008715 	.word	0x08008715
 80082e0:	080085a9 	.word	0x080085a9
 80082e4:	0800843d 	.word	0x0800843d

080082e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b08e      	sub	sp, #56	; 0x38
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082f0:	f3ef 8310 	mrs	r3, PRIMASK
 80082f4:	617b      	str	r3, [r7, #20]
  return(result);
 80082f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082f8:	637b      	str	r3, [r7, #52]	; 0x34
 80082fa:	2301      	movs	r3, #1
 80082fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	f383 8810 	msr	PRIMASK, r3
}
 8008304:	46c0      	nop			; (mov r8, r8)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4926      	ldr	r1, [pc, #152]	; (80083ac <UART_EndRxTransfer+0xc4>)
 8008312:	400a      	ands	r2, r1
 8008314:	601a      	str	r2, [r3, #0]
 8008316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008318:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	f383 8810 	msr	PRIMASK, r3
}
 8008320:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008322:	f3ef 8310 	mrs	r3, PRIMASK
 8008326:	623b      	str	r3, [r7, #32]
  return(result);
 8008328:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800832a:	633b      	str	r3, [r7, #48]	; 0x30
 800832c:	2301      	movs	r3, #1
 800832e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008332:	f383 8810 	msr	PRIMASK, r3
}
 8008336:	46c0      	nop			; (mov r8, r8)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	689a      	ldr	r2, [r3, #8]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	491b      	ldr	r1, [pc, #108]	; (80083b0 <UART_EndRxTransfer+0xc8>)
 8008344:	400a      	ands	r2, r1
 8008346:	609a      	str	r2, [r3, #8]
 8008348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800834c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834e:	f383 8810 	msr	PRIMASK, r3
}
 8008352:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008358:	2b01      	cmp	r3, #1
 800835a:	d118      	bne.n	800838e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800835c:	f3ef 8310 	mrs	r3, PRIMASK
 8008360:	60bb      	str	r3, [r7, #8]
  return(result);
 8008362:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008366:	2301      	movs	r3, #1
 8008368:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f383 8810 	msr	PRIMASK, r3
}
 8008370:	46c0      	nop			; (mov r8, r8)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2110      	movs	r1, #16
 800837e:	438a      	bics	r2, r1
 8008380:	601a      	str	r2, [r3, #0]
 8008382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008384:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	f383 8810 	msr	PRIMASK, r3
}
 800838c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2288      	movs	r2, #136	; 0x88
 8008392:	2120      	movs	r1, #32
 8008394:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	671a      	str	r2, [r3, #112]	; 0x70
}
 80083a2:	46c0      	nop			; (mov r8, r8)
 80083a4:	46bd      	mov	sp, r7
 80083a6:	b00e      	add	sp, #56	; 0x38
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	46c0      	nop			; (mov r8, r8)
 80083ac:	fffffedf 	.word	0xfffffedf
 80083b0:	effffffe 	.word	0xeffffffe

080083b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	225e      	movs	r2, #94	; 0x5e
 80083c6:	2100      	movs	r1, #0
 80083c8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2256      	movs	r2, #86	; 0x56
 80083ce:	2100      	movs	r1, #0
 80083d0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	0018      	movs	r0, r3
 80083d6:	f7ff f9e1 	bl	800779c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083da:	46c0      	nop			; (mov r8, r8)
 80083dc:	46bd      	mov	sp, r7
 80083de:	b004      	add	sp, #16
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b086      	sub	sp, #24
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083ea:	f3ef 8310 	mrs	r3, PRIMASK
 80083ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80083f0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083f2:	617b      	str	r3, [r7, #20]
 80083f4:	2301      	movs	r3, #1
 80083f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f383 8810 	msr	PRIMASK, r3
}
 80083fe:	46c0      	nop			; (mov r8, r8)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2140      	movs	r1, #64	; 0x40
 800840c:	438a      	bics	r2, r1
 800840e:	601a      	str	r2, [r3, #0]
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	f383 8810 	msr	PRIMASK, r3
}
 800841a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2284      	movs	r2, #132	; 0x84
 8008420:	2120      	movs	r1, #32
 8008422:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	0018      	movs	r0, r3
 800842e:	f7ff f9ad 	bl	800778c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008432:	46c0      	nop			; (mov r8, r8)
 8008434:	46bd      	mov	sp, r7
 8008436:	b006      	add	sp, #24
 8008438:	bd80      	pop	{r7, pc}
	...

0800843c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b090      	sub	sp, #64	; 0x40
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008444:	203e      	movs	r0, #62	; 0x3e
 8008446:	183b      	adds	r3, r7, r0
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	2160      	movs	r1, #96	; 0x60
 800844c:	5a52      	ldrh	r2, [r2, r1]
 800844e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2288      	movs	r2, #136	; 0x88
 8008454:	589b      	ldr	r3, [r3, r2]
 8008456:	2b22      	cmp	r3, #34	; 0x22
 8008458:	d000      	beq.n	800845c <UART_RxISR_8BIT+0x20>
 800845a:	e097      	b.n	800858c <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008462:	213c      	movs	r1, #60	; 0x3c
 8008464:	187b      	adds	r3, r7, r1
 8008466:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008468:	187b      	adds	r3, r7, r1
 800846a:	881b      	ldrh	r3, [r3, #0]
 800846c:	b2da      	uxtb	r2, r3
 800846e:	183b      	adds	r3, r7, r0
 8008470:	881b      	ldrh	r3, [r3, #0]
 8008472:	b2d9      	uxtb	r1, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008478:	400a      	ands	r2, r1
 800847a:	b2d2      	uxtb	r2, r2
 800847c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008482:	1c5a      	adds	r2, r3, #1
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	225e      	movs	r2, #94	; 0x5e
 800848c:	5a9b      	ldrh	r3, [r3, r2]
 800848e:	b29b      	uxth	r3, r3
 8008490:	3b01      	subs	r3, #1
 8008492:	b299      	uxth	r1, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	225e      	movs	r2, #94	; 0x5e
 8008498:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	225e      	movs	r2, #94	; 0x5e
 800849e:	5a9b      	ldrh	r3, [r3, r2]
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d000      	beq.n	80084a8 <UART_RxISR_8BIT+0x6c>
 80084a6:	e079      	b.n	800859c <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084a8:	f3ef 8310 	mrs	r3, PRIMASK
 80084ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80084ae:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80084b2:	2301      	movs	r3, #1
 80084b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	f383 8810 	msr	PRIMASK, r3
}
 80084bc:	46c0      	nop			; (mov r8, r8)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4936      	ldr	r1, [pc, #216]	; (80085a4 <UART_RxISR_8BIT+0x168>)
 80084ca:	400a      	ands	r2, r1
 80084cc:	601a      	str	r2, [r3, #0]
 80084ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084d2:	6a3b      	ldr	r3, [r7, #32]
 80084d4:	f383 8810 	msr	PRIMASK, r3
}
 80084d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084da:	f3ef 8310 	mrs	r3, PRIMASK
 80084de:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80084e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084e2:	637b      	str	r3, [r7, #52]	; 0x34
 80084e4:	2301      	movs	r3, #1
 80084e6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ea:	f383 8810 	msr	PRIMASK, r3
}
 80084ee:	46c0      	nop			; (mov r8, r8)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	689a      	ldr	r2, [r3, #8]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2101      	movs	r1, #1
 80084fc:	438a      	bics	r2, r1
 80084fe:	609a      	str	r2, [r3, #8]
 8008500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008502:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008506:	f383 8810 	msr	PRIMASK, r3
}
 800850a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2288      	movs	r2, #136	; 0x88
 8008510:	2120      	movs	r1, #32
 8008512:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800851e:	2b01      	cmp	r3, #1
 8008520:	d12f      	bne.n	8008582 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008528:	f3ef 8310 	mrs	r3, PRIMASK
 800852c:	60fb      	str	r3, [r7, #12]
  return(result);
 800852e:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008530:	633b      	str	r3, [r7, #48]	; 0x30
 8008532:	2301      	movs	r3, #1
 8008534:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	f383 8810 	msr	PRIMASK, r3
}
 800853c:	46c0      	nop			; (mov r8, r8)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2110      	movs	r1, #16
 800854a:	438a      	bics	r2, r1
 800854c:	601a      	str	r2, [r3, #0]
 800854e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008550:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	f383 8810 	msr	PRIMASK, r3
}
 8008558:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	69db      	ldr	r3, [r3, #28]
 8008560:	2210      	movs	r2, #16
 8008562:	4013      	ands	r3, r2
 8008564:	2b10      	cmp	r3, #16
 8008566:	d103      	bne.n	8008570 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2210      	movs	r2, #16
 800856e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	225c      	movs	r2, #92	; 0x5c
 8008574:	5a9a      	ldrh	r2, [r3, r2]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	0011      	movs	r1, r2
 800857a:	0018      	movs	r0, r3
 800857c:	f7ff f916 	bl	80077ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008580:	e00c      	b.n	800859c <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	0018      	movs	r0, r3
 8008586:	f7fa fb75 	bl	8002c74 <HAL_UART_RxCpltCallback>
}
 800858a:	e007      	b.n	800859c <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	699a      	ldr	r2, [r3, #24]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2108      	movs	r1, #8
 8008598:	430a      	orrs	r2, r1
 800859a:	619a      	str	r2, [r3, #24]
}
 800859c:	46c0      	nop			; (mov r8, r8)
 800859e:	46bd      	mov	sp, r7
 80085a0:	b010      	add	sp, #64	; 0x40
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	fffffedf 	.word	0xfffffedf

080085a8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b090      	sub	sp, #64	; 0x40
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80085b0:	203e      	movs	r0, #62	; 0x3e
 80085b2:	183b      	adds	r3, r7, r0
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	2160      	movs	r1, #96	; 0x60
 80085b8:	5a52      	ldrh	r2, [r2, r1]
 80085ba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2288      	movs	r2, #136	; 0x88
 80085c0:	589b      	ldr	r3, [r3, r2]
 80085c2:	2b22      	cmp	r3, #34	; 0x22
 80085c4:	d000      	beq.n	80085c8 <UART_RxISR_16BIT+0x20>
 80085c6:	e097      	b.n	80086f8 <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085ce:	213c      	movs	r1, #60	; 0x3c
 80085d0:	187b      	adds	r3, r7, r1
 80085d2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085d8:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80085da:	187b      	adds	r3, r7, r1
 80085dc:	183a      	adds	r2, r7, r0
 80085de:	881b      	ldrh	r3, [r3, #0]
 80085e0:	8812      	ldrh	r2, [r2, #0]
 80085e2:	4013      	ands	r3, r2
 80085e4:	b29a      	uxth	r2, r3
 80085e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ee:	1c9a      	adds	r2, r3, #2
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	225e      	movs	r2, #94	; 0x5e
 80085f8:	5a9b      	ldrh	r3, [r3, r2]
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	3b01      	subs	r3, #1
 80085fe:	b299      	uxth	r1, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	225e      	movs	r2, #94	; 0x5e
 8008604:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	225e      	movs	r2, #94	; 0x5e
 800860a:	5a9b      	ldrh	r3, [r3, r2]
 800860c:	b29b      	uxth	r3, r3
 800860e:	2b00      	cmp	r3, #0
 8008610:	d000      	beq.n	8008614 <UART_RxISR_16BIT+0x6c>
 8008612:	e079      	b.n	8008708 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008614:	f3ef 8310 	mrs	r3, PRIMASK
 8008618:	617b      	str	r3, [r7, #20]
  return(result);
 800861a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800861c:	637b      	str	r3, [r7, #52]	; 0x34
 800861e:	2301      	movs	r3, #1
 8008620:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	f383 8810 	msr	PRIMASK, r3
}
 8008628:	46c0      	nop			; (mov r8, r8)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4936      	ldr	r1, [pc, #216]	; (8008710 <UART_RxISR_16BIT+0x168>)
 8008636:	400a      	ands	r2, r1
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800863c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	f383 8810 	msr	PRIMASK, r3
}
 8008644:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008646:	f3ef 8310 	mrs	r3, PRIMASK
 800864a:	623b      	str	r3, [r7, #32]
  return(result);
 800864c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800864e:	633b      	str	r3, [r7, #48]	; 0x30
 8008650:	2301      	movs	r3, #1
 8008652:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008656:	f383 8810 	msr	PRIMASK, r3
}
 800865a:	46c0      	nop			; (mov r8, r8)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	689a      	ldr	r2, [r3, #8]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2101      	movs	r1, #1
 8008668:	438a      	bics	r2, r1
 800866a:	609a      	str	r2, [r3, #8]
 800866c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008672:	f383 8810 	msr	PRIMASK, r3
}
 8008676:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2288      	movs	r2, #136	; 0x88
 800867c:	2120      	movs	r1, #32
 800867e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800868a:	2b01      	cmp	r3, #1
 800868c:	d12f      	bne.n	80086ee <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008694:	f3ef 8310 	mrs	r3, PRIMASK
 8008698:	60bb      	str	r3, [r7, #8]
  return(result);
 800869a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800869c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800869e:	2301      	movs	r3, #1
 80086a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f383 8810 	msr	PRIMASK, r3
}
 80086a8:	46c0      	nop			; (mov r8, r8)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2110      	movs	r1, #16
 80086b6:	438a      	bics	r2, r1
 80086b8:	601a      	str	r2, [r3, #0]
 80086ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	f383 8810 	msr	PRIMASK, r3
}
 80086c4:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	69db      	ldr	r3, [r3, #28]
 80086cc:	2210      	movs	r2, #16
 80086ce:	4013      	ands	r3, r2
 80086d0:	2b10      	cmp	r3, #16
 80086d2:	d103      	bne.n	80086dc <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2210      	movs	r2, #16
 80086da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	225c      	movs	r2, #92	; 0x5c
 80086e0:	5a9a      	ldrh	r2, [r3, r2]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	0011      	movs	r1, r2
 80086e6:	0018      	movs	r0, r3
 80086e8:	f7ff f860 	bl	80077ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80086ec:	e00c      	b.n	8008708 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	0018      	movs	r0, r3
 80086f2:	f7fa fabf 	bl	8002c74 <HAL_UART_RxCpltCallback>
}
 80086f6:	e007      	b.n	8008708 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	699a      	ldr	r2, [r3, #24]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2108      	movs	r1, #8
 8008704:	430a      	orrs	r2, r1
 8008706:	619a      	str	r2, [r3, #24]
}
 8008708:	46c0      	nop			; (mov r8, r8)
 800870a:	46bd      	mov	sp, r7
 800870c:	b010      	add	sp, #64	; 0x40
 800870e:	bd80      	pop	{r7, pc}
 8008710:	fffffedf 	.word	0xfffffedf

08008714 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b09c      	sub	sp, #112	; 0x70
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800871c:	236a      	movs	r3, #106	; 0x6a
 800871e:	18fb      	adds	r3, r7, r3
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	2160      	movs	r1, #96	; 0x60
 8008724:	5a52      	ldrh	r2, [r2, r1]
 8008726:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	69db      	ldr	r3, [r3, #28]
 800872e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2288      	movs	r2, #136	; 0x88
 8008744:	589b      	ldr	r3, [r3, r2]
 8008746:	2b22      	cmp	r3, #34	; 0x22
 8008748:	d000      	beq.n	800874c <UART_RxISR_8BIT_FIFOEN+0x38>
 800874a:	e141      	b.n	80089d0 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800874c:	235e      	movs	r3, #94	; 0x5e
 800874e:	18fb      	adds	r3, r7, r3
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	2168      	movs	r1, #104	; 0x68
 8008754:	5a52      	ldrh	r2, [r2, r1]
 8008756:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008758:	e0e8      	b.n	800892c <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008760:	215c      	movs	r1, #92	; 0x5c
 8008762:	187b      	adds	r3, r7, r1
 8008764:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008766:	187b      	adds	r3, r7, r1
 8008768:	881b      	ldrh	r3, [r3, #0]
 800876a:	b2da      	uxtb	r2, r3
 800876c:	236a      	movs	r3, #106	; 0x6a
 800876e:	18fb      	adds	r3, r7, r3
 8008770:	881b      	ldrh	r3, [r3, #0]
 8008772:	b2d9      	uxtb	r1, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008778:	400a      	ands	r2, r1
 800877a:	b2d2      	uxtb	r2, r2
 800877c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008782:	1c5a      	adds	r2, r3, #1
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	225e      	movs	r2, #94	; 0x5e
 800878c:	5a9b      	ldrh	r3, [r3, r2]
 800878e:	b29b      	uxth	r3, r3
 8008790:	3b01      	subs	r3, #1
 8008792:	b299      	uxth	r1, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	225e      	movs	r2, #94	; 0x5e
 8008798:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	69db      	ldr	r3, [r3, #28]
 80087a0:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80087a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a4:	2207      	movs	r2, #7
 80087a6:	4013      	ands	r3, r2
 80087a8:	d049      	beq.n	800883e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80087aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ac:	2201      	movs	r2, #1
 80087ae:	4013      	ands	r3, r2
 80087b0:	d010      	beq.n	80087d4 <UART_RxISR_8BIT_FIFOEN+0xc0>
 80087b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80087b4:	2380      	movs	r3, #128	; 0x80
 80087b6:	005b      	lsls	r3, r3, #1
 80087b8:	4013      	ands	r3, r2
 80087ba:	d00b      	beq.n	80087d4 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2201      	movs	r2, #1
 80087c2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	228c      	movs	r2, #140	; 0x8c
 80087c8:	589b      	ldr	r3, [r3, r2]
 80087ca:	2201      	movs	r2, #1
 80087cc:	431a      	orrs	r2, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	218c      	movs	r1, #140	; 0x8c
 80087d2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087d6:	2202      	movs	r2, #2
 80087d8:	4013      	ands	r3, r2
 80087da:	d00f      	beq.n	80087fc <UART_RxISR_8BIT_FIFOEN+0xe8>
 80087dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087de:	2201      	movs	r2, #1
 80087e0:	4013      	ands	r3, r2
 80087e2:	d00b      	beq.n	80087fc <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2202      	movs	r2, #2
 80087ea:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	228c      	movs	r2, #140	; 0x8c
 80087f0:	589b      	ldr	r3, [r3, r2]
 80087f2:	2204      	movs	r2, #4
 80087f4:	431a      	orrs	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	218c      	movs	r1, #140	; 0x8c
 80087fa:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087fe:	2204      	movs	r2, #4
 8008800:	4013      	ands	r3, r2
 8008802:	d00f      	beq.n	8008824 <UART_RxISR_8BIT_FIFOEN+0x110>
 8008804:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008806:	2201      	movs	r2, #1
 8008808:	4013      	ands	r3, r2
 800880a:	d00b      	beq.n	8008824 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2204      	movs	r2, #4
 8008812:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	228c      	movs	r2, #140	; 0x8c
 8008818:	589b      	ldr	r3, [r3, r2]
 800881a:	2202      	movs	r2, #2
 800881c:	431a      	orrs	r2, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	218c      	movs	r1, #140	; 0x8c
 8008822:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	228c      	movs	r2, #140	; 0x8c
 8008828:	589b      	ldr	r3, [r3, r2]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d007      	beq.n	800883e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	0018      	movs	r0, r3
 8008832:	f7fe ffb3 	bl	800779c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	228c      	movs	r2, #140	; 0x8c
 800883a:	2100      	movs	r1, #0
 800883c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	225e      	movs	r2, #94	; 0x5e
 8008842:	5a9b      	ldrh	r3, [r3, r2]
 8008844:	b29b      	uxth	r3, r3
 8008846:	2b00      	cmp	r3, #0
 8008848:	d170      	bne.n	800892c <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800884a:	f3ef 8310 	mrs	r3, PRIMASK
 800884e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8008850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008852:	65bb      	str	r3, [r7, #88]	; 0x58
 8008854:	2301      	movs	r3, #1
 8008856:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885a:	f383 8810 	msr	PRIMASK, r3
}
 800885e:	46c0      	nop			; (mov r8, r8)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	495f      	ldr	r1, [pc, #380]	; (80089e8 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 800886c:	400a      	ands	r2, r1
 800886e:	601a      	str	r2, [r3, #0]
 8008870:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008872:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008876:	f383 8810 	msr	PRIMASK, r3
}
 800887a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800887c:	f3ef 8310 	mrs	r3, PRIMASK
 8008880:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8008882:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008884:	657b      	str	r3, [r7, #84]	; 0x54
 8008886:	2301      	movs	r3, #1
 8008888:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800888a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800888c:	f383 8810 	msr	PRIMASK, r3
}
 8008890:	46c0      	nop			; (mov r8, r8)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	689a      	ldr	r2, [r3, #8]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4953      	ldr	r1, [pc, #332]	; (80089ec <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 800889e:	400a      	ands	r2, r1
 80088a0:	609a      	str	r2, [r3, #8]
 80088a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088a4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088a8:	f383 8810 	msr	PRIMASK, r3
}
 80088ac:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2288      	movs	r2, #136	; 0x88
 80088b2:	2120      	movs	r1, #32
 80088b4:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d12f      	bne.n	8008924 <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088ca:	f3ef 8310 	mrs	r3, PRIMASK
 80088ce:	623b      	str	r3, [r7, #32]
  return(result);
 80088d0:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088d2:	653b      	str	r3, [r7, #80]	; 0x50
 80088d4:	2301      	movs	r3, #1
 80088d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088da:	f383 8810 	msr	PRIMASK, r3
}
 80088de:	46c0      	nop			; (mov r8, r8)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2110      	movs	r1, #16
 80088ec:	438a      	bics	r2, r1
 80088ee:	601a      	str	r2, [r3, #0]
 80088f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088f2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f6:	f383 8810 	msr	PRIMASK, r3
}
 80088fa:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	69db      	ldr	r3, [r3, #28]
 8008902:	2210      	movs	r2, #16
 8008904:	4013      	ands	r3, r2
 8008906:	2b10      	cmp	r3, #16
 8008908:	d103      	bne.n	8008912 <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2210      	movs	r2, #16
 8008910:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	225c      	movs	r2, #92	; 0x5c
 8008916:	5a9a      	ldrh	r2, [r3, r2]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	0011      	movs	r1, r2
 800891c:	0018      	movs	r0, r3
 800891e:	f7fe ff45 	bl	80077ac <HAL_UARTEx_RxEventCallback>
 8008922:	e003      	b.n	800892c <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	0018      	movs	r0, r3
 8008928:	f7fa f9a4 	bl	8002c74 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800892c:	235e      	movs	r3, #94	; 0x5e
 800892e:	18fb      	adds	r3, r7, r3
 8008930:	881b      	ldrh	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d004      	beq.n	8008940 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8008936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008938:	2220      	movs	r2, #32
 800893a:	4013      	ands	r3, r2
 800893c:	d000      	beq.n	8008940 <UART_RxISR_8BIT_FIFOEN+0x22c>
 800893e:	e70c      	b.n	800875a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008940:	204e      	movs	r0, #78	; 0x4e
 8008942:	183b      	adds	r3, r7, r0
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	215e      	movs	r1, #94	; 0x5e
 8008948:	5a52      	ldrh	r2, [r2, r1]
 800894a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800894c:	0001      	movs	r1, r0
 800894e:	187b      	adds	r3, r7, r1
 8008950:	881b      	ldrh	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d044      	beq.n	80089e0 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2268      	movs	r2, #104	; 0x68
 800895a:	5a9b      	ldrh	r3, [r3, r2]
 800895c:	187a      	adds	r2, r7, r1
 800895e:	8812      	ldrh	r2, [r2, #0]
 8008960:	429a      	cmp	r2, r3
 8008962:	d23d      	bcs.n	80089e0 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008964:	f3ef 8310 	mrs	r3, PRIMASK
 8008968:	60bb      	str	r3, [r7, #8]
  return(result);
 800896a:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800896c:	64bb      	str	r3, [r7, #72]	; 0x48
 800896e:	2301      	movs	r3, #1
 8008970:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f383 8810 	msr	PRIMASK, r3
}
 8008978:	46c0      	nop			; (mov r8, r8)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	689a      	ldr	r2, [r3, #8]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	491a      	ldr	r1, [pc, #104]	; (80089f0 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8008986:	400a      	ands	r2, r1
 8008988:	609a      	str	r2, [r3, #8]
 800898a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800898c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	f383 8810 	msr	PRIMASK, r3
}
 8008994:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a16      	ldr	r2, [pc, #88]	; (80089f4 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800899a:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800899c:	f3ef 8310 	mrs	r3, PRIMASK
 80089a0:	617b      	str	r3, [r7, #20]
  return(result);
 80089a2:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80089a4:	647b      	str	r3, [r7, #68]	; 0x44
 80089a6:	2301      	movs	r3, #1
 80089a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	f383 8810 	msr	PRIMASK, r3
}
 80089b0:	46c0      	nop			; (mov r8, r8)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2120      	movs	r1, #32
 80089be:	430a      	orrs	r2, r1
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	f383 8810 	msr	PRIMASK, r3
}
 80089cc:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089ce:	e007      	b.n	80089e0 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	699a      	ldr	r2, [r3, #24]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2108      	movs	r1, #8
 80089dc:	430a      	orrs	r2, r1
 80089de:	619a      	str	r2, [r3, #24]
}
 80089e0:	46c0      	nop			; (mov r8, r8)
 80089e2:	46bd      	mov	sp, r7
 80089e4:	b01c      	add	sp, #112	; 0x70
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	fffffeff 	.word	0xfffffeff
 80089ec:	effffffe 	.word	0xeffffffe
 80089f0:	efffffff 	.word	0xefffffff
 80089f4:	0800843d 	.word	0x0800843d

080089f8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b09e      	sub	sp, #120	; 0x78
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008a00:	2372      	movs	r3, #114	; 0x72
 8008a02:	18fb      	adds	r3, r7, r3
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	2160      	movs	r1, #96	; 0x60
 8008a08:	5a52      	ldrh	r2, [r2, r1]
 8008a0a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	69db      	ldr	r3, [r3, #28]
 8008a12:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2288      	movs	r2, #136	; 0x88
 8008a28:	589b      	ldr	r3, [r3, r2]
 8008a2a:	2b22      	cmp	r3, #34	; 0x22
 8008a2c:	d000      	beq.n	8008a30 <UART_RxISR_16BIT_FIFOEN+0x38>
 8008a2e:	e141      	b.n	8008cb4 <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008a30:	2366      	movs	r3, #102	; 0x66
 8008a32:	18fb      	adds	r3, r7, r3
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	2168      	movs	r1, #104	; 0x68
 8008a38:	5a52      	ldrh	r2, [r2, r1]
 8008a3a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a3c:	e0e8      	b.n	8008c10 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a44:	2164      	movs	r1, #100	; 0x64
 8008a46:	187b      	adds	r3, r7, r1
 8008a48:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a4e:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8008a50:	187b      	adds	r3, r7, r1
 8008a52:	2272      	movs	r2, #114	; 0x72
 8008a54:	18ba      	adds	r2, r7, r2
 8008a56:	881b      	ldrh	r3, [r3, #0]
 8008a58:	8812      	ldrh	r2, [r2, #0]
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a66:	1c9a      	adds	r2, r3, #2
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	225e      	movs	r2, #94	; 0x5e
 8008a70:	5a9b      	ldrh	r3, [r3, r2]
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	3b01      	subs	r3, #1
 8008a76:	b299      	uxth	r1, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	225e      	movs	r2, #94	; 0x5e
 8008a7c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	69db      	ldr	r3, [r3, #28]
 8008a84:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a88:	2207      	movs	r2, #7
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	d049      	beq.n	8008b22 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a90:	2201      	movs	r2, #1
 8008a92:	4013      	ands	r3, r2
 8008a94:	d010      	beq.n	8008ab8 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8008a96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008a98:	2380      	movs	r3, #128	; 0x80
 8008a9a:	005b      	lsls	r3, r3, #1
 8008a9c:	4013      	ands	r3, r2
 8008a9e:	d00b      	beq.n	8008ab8 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	228c      	movs	r2, #140	; 0x8c
 8008aac:	589b      	ldr	r3, [r3, r2]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	431a      	orrs	r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	218c      	movs	r1, #140	; 0x8c
 8008ab6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ab8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008aba:	2202      	movs	r2, #2
 8008abc:	4013      	ands	r3, r2
 8008abe:	d00f      	beq.n	8008ae0 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8008ac0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	d00b      	beq.n	8008ae0 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2202      	movs	r2, #2
 8008ace:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	228c      	movs	r2, #140	; 0x8c
 8008ad4:	589b      	ldr	r3, [r3, r2]
 8008ad6:	2204      	movs	r2, #4
 8008ad8:	431a      	orrs	r2, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	218c      	movs	r1, #140	; 0x8c
 8008ade:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ae0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ae2:	2204      	movs	r2, #4
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	d00f      	beq.n	8008b08 <UART_RxISR_16BIT_FIFOEN+0x110>
 8008ae8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008aea:	2201      	movs	r2, #1
 8008aec:	4013      	ands	r3, r2
 8008aee:	d00b      	beq.n	8008b08 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2204      	movs	r2, #4
 8008af6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	228c      	movs	r2, #140	; 0x8c
 8008afc:	589b      	ldr	r3, [r3, r2]
 8008afe:	2202      	movs	r2, #2
 8008b00:	431a      	orrs	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	218c      	movs	r1, #140	; 0x8c
 8008b06:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	228c      	movs	r2, #140	; 0x8c
 8008b0c:	589b      	ldr	r3, [r3, r2]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d007      	beq.n	8008b22 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	0018      	movs	r0, r3
 8008b16:	f7fe fe41 	bl	800779c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	228c      	movs	r2, #140	; 0x8c
 8008b1e:	2100      	movs	r1, #0
 8008b20:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	225e      	movs	r2, #94	; 0x5e
 8008b26:	5a9b      	ldrh	r3, [r3, r2]
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d170      	bne.n	8008c10 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8008b32:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b38:	2301      	movs	r3, #1
 8008b3a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b3e:	f383 8810 	msr	PRIMASK, r3
}
 8008b42:	46c0      	nop			; (mov r8, r8)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	495f      	ldr	r1, [pc, #380]	; (8008ccc <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8008b50:	400a      	ands	r2, r1
 8008b52:	601a      	str	r2, [r3, #0]
 8008b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b56:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5a:	f383 8810 	msr	PRIMASK, r3
}
 8008b5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b60:	f3ef 8310 	mrs	r3, PRIMASK
 8008b64:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8008b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b68:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b70:	f383 8810 	msr	PRIMASK, r3
}
 8008b74:	46c0      	nop			; (mov r8, r8)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	689a      	ldr	r2, [r3, #8]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4953      	ldr	r1, [pc, #332]	; (8008cd0 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 8008b82:	400a      	ands	r2, r1
 8008b84:	609a      	str	r2, [r3, #8]
 8008b86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b88:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b8c:	f383 8810 	msr	PRIMASK, r3
}
 8008b90:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2288      	movs	r2, #136	; 0x88
 8008b96:	2120      	movs	r1, #32
 8008b98:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d12f      	bne.n	8008c08 <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bae:	f3ef 8310 	mrs	r3, PRIMASK
 8008bb2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bb6:	657b      	str	r3, [r7, #84]	; 0x54
 8008bb8:	2301      	movs	r3, #1
 8008bba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbe:	f383 8810 	msr	PRIMASK, r3
}
 8008bc2:	46c0      	nop			; (mov r8, r8)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2110      	movs	r1, #16
 8008bd0:	438a      	bics	r2, r1
 8008bd2:	601a      	str	r2, [r3, #0]
 8008bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bda:	f383 8810 	msr	PRIMASK, r3
}
 8008bde:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	69db      	ldr	r3, [r3, #28]
 8008be6:	2210      	movs	r2, #16
 8008be8:	4013      	ands	r3, r2
 8008bea:	2b10      	cmp	r3, #16
 8008bec:	d103      	bne.n	8008bf6 <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2210      	movs	r2, #16
 8008bf4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	225c      	movs	r2, #92	; 0x5c
 8008bfa:	5a9a      	ldrh	r2, [r3, r2]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	0011      	movs	r1, r2
 8008c00:	0018      	movs	r0, r3
 8008c02:	f7fe fdd3 	bl	80077ac <HAL_UARTEx_RxEventCallback>
 8008c06:	e003      	b.n	8008c10 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	0018      	movs	r0, r3
 8008c0c:	f7fa f832 	bl	8002c74 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c10:	2366      	movs	r3, #102	; 0x66
 8008c12:	18fb      	adds	r3, r7, r3
 8008c14:	881b      	ldrh	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d004      	beq.n	8008c24 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8008c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c1c:	2220      	movs	r2, #32
 8008c1e:	4013      	ands	r3, r2
 8008c20:	d000      	beq.n	8008c24 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8008c22:	e70c      	b.n	8008a3e <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008c24:	2052      	movs	r0, #82	; 0x52
 8008c26:	183b      	adds	r3, r7, r0
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	215e      	movs	r1, #94	; 0x5e
 8008c2c:	5a52      	ldrh	r2, [r2, r1]
 8008c2e:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008c30:	0001      	movs	r1, r0
 8008c32:	187b      	adds	r3, r7, r1
 8008c34:	881b      	ldrh	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d044      	beq.n	8008cc4 <UART_RxISR_16BIT_FIFOEN+0x2cc>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2268      	movs	r2, #104	; 0x68
 8008c3e:	5a9b      	ldrh	r3, [r3, r2]
 8008c40:	187a      	adds	r2, r7, r1
 8008c42:	8812      	ldrh	r2, [r2, #0]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d23d      	bcs.n	8008cc4 <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c48:	f3ef 8310 	mrs	r3, PRIMASK
 8008c4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008c50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c52:	2301      	movs	r3, #1
 8008c54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	f383 8810 	msr	PRIMASK, r3
}
 8008c5c:	46c0      	nop			; (mov r8, r8)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	689a      	ldr	r2, [r3, #8]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	491a      	ldr	r1, [pc, #104]	; (8008cd4 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8008c6a:	400a      	ands	r2, r1
 8008c6c:	609a      	str	r2, [r3, #8]
 8008c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	f383 8810 	msr	PRIMASK, r3
}
 8008c78:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4a16      	ldr	r2, [pc, #88]	; (8008cd8 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8008c7e:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c80:	f3ef 8310 	mrs	r3, PRIMASK
 8008c84:	61bb      	str	r3, [r7, #24]
  return(result);
 8008c86:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008c88:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	f383 8810 	msr	PRIMASK, r3
}
 8008c94:	46c0      	nop			; (mov r8, r8)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2120      	movs	r1, #32
 8008ca2:	430a      	orrs	r2, r1
 8008ca4:	601a      	str	r2, [r3, #0]
 8008ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ca8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008caa:	6a3b      	ldr	r3, [r7, #32]
 8008cac:	f383 8810 	msr	PRIMASK, r3
}
 8008cb0:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008cb2:	e007      	b.n	8008cc4 <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	699a      	ldr	r2, [r3, #24]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2108      	movs	r1, #8
 8008cc0:	430a      	orrs	r2, r1
 8008cc2:	619a      	str	r2, [r3, #24]
}
 8008cc4:	46c0      	nop			; (mov r8, r8)
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	b01e      	add	sp, #120	; 0x78
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	fffffeff 	.word	0xfffffeff
 8008cd0:	effffffe 	.word	0xeffffffe
 8008cd4:	efffffff 	.word	0xefffffff
 8008cd8:	080085a9 	.word	0x080085a9

08008cdc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008ce4:	46c0      	nop			; (mov r8, r8)
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	b002      	add	sp, #8
 8008cea:	bd80      	pop	{r7, pc}

08008cec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008cf4:	46c0      	nop			; (mov r8, r8)
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	b002      	add	sp, #8
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008d04:	46c0      	nop			; (mov r8, r8)
 8008d06:	46bd      	mov	sp, r7
 8008d08:	b002      	add	sp, #8
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2280      	movs	r2, #128	; 0x80
 8008d18:	5c9b      	ldrb	r3, [r3, r2]
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d101      	bne.n	8008d22 <HAL_UARTEx_DisableFifoMode+0x16>
 8008d1e:	2302      	movs	r3, #2
 8008d20:	e027      	b.n	8008d72 <HAL_UARTEx_DisableFifoMode+0x66>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2280      	movs	r2, #128	; 0x80
 8008d26:	2101      	movs	r1, #1
 8008d28:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2284      	movs	r2, #132	; 0x84
 8008d2e:	2124      	movs	r1, #36	; 0x24
 8008d30:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2101      	movs	r1, #1
 8008d46:	438a      	bics	r2, r1
 8008d48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	4a0b      	ldr	r2, [pc, #44]	; (8008d7c <HAL_UARTEx_DisableFifoMode+0x70>)
 8008d4e:	4013      	ands	r3, r2
 8008d50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2284      	movs	r2, #132	; 0x84
 8008d64:	2120      	movs	r1, #32
 8008d66:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2280      	movs	r2, #128	; 0x80
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	0018      	movs	r0, r3
 8008d74:	46bd      	mov	sp, r7
 8008d76:	b004      	add	sp, #16
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	46c0      	nop			; (mov r8, r8)
 8008d7c:	dfffffff 	.word	0xdfffffff

08008d80 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2280      	movs	r2, #128	; 0x80
 8008d8e:	5c9b      	ldrb	r3, [r3, r2]
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d101      	bne.n	8008d98 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d94:	2302      	movs	r3, #2
 8008d96:	e02e      	b.n	8008df6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2280      	movs	r2, #128	; 0x80
 8008d9c:	2101      	movs	r1, #1
 8008d9e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2284      	movs	r2, #132	; 0x84
 8008da4:	2124      	movs	r1, #36	; 0x24
 8008da6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2101      	movs	r1, #1
 8008dbc:	438a      	bics	r2, r1
 8008dbe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	00db      	lsls	r3, r3, #3
 8008dc8:	08d9      	lsrs	r1, r3, #3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	430a      	orrs	r2, r1
 8008dd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	0018      	movs	r0, r3
 8008dd8:	f000 f854 	bl	8008e84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2284      	movs	r2, #132	; 0x84
 8008de8:	2120      	movs	r1, #32
 8008dea:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2280      	movs	r2, #128	; 0x80
 8008df0:	2100      	movs	r1, #0
 8008df2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	0018      	movs	r0, r3
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	b004      	add	sp, #16
 8008dfc:	bd80      	pop	{r7, pc}
	...

08008e00 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2280      	movs	r2, #128	; 0x80
 8008e0e:	5c9b      	ldrb	r3, [r3, r2]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d101      	bne.n	8008e18 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e14:	2302      	movs	r3, #2
 8008e16:	e02f      	b.n	8008e78 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2280      	movs	r2, #128	; 0x80
 8008e1c:	2101      	movs	r1, #1
 8008e1e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2284      	movs	r2, #132	; 0x84
 8008e24:	2124      	movs	r1, #36	; 0x24
 8008e26:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2101      	movs	r1, #1
 8008e3c:	438a      	bics	r2, r1
 8008e3e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	4a0e      	ldr	r2, [pc, #56]	; (8008e80 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008e48:	4013      	ands	r3, r2
 8008e4a:	0019      	movs	r1, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	683a      	ldr	r2, [r7, #0]
 8008e52:	430a      	orrs	r2, r1
 8008e54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	0018      	movs	r0, r3
 8008e5a:	f000 f813 	bl	8008e84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2284      	movs	r2, #132	; 0x84
 8008e6a:	2120      	movs	r1, #32
 8008e6c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2280      	movs	r2, #128	; 0x80
 8008e72:	2100      	movs	r1, #0
 8008e74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	0018      	movs	r0, r3
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	b004      	add	sp, #16
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	f1ffffff 	.word	0xf1ffffff

08008e84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d108      	bne.n	8008ea6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	226a      	movs	r2, #106	; 0x6a
 8008e98:	2101      	movs	r1, #1
 8008e9a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2268      	movs	r2, #104	; 0x68
 8008ea0:	2101      	movs	r1, #1
 8008ea2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ea4:	e043      	b.n	8008f2e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008ea6:	260f      	movs	r6, #15
 8008ea8:	19bb      	adds	r3, r7, r6
 8008eaa:	2208      	movs	r2, #8
 8008eac:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008eae:	200e      	movs	r0, #14
 8008eb0:	183b      	adds	r3, r7, r0
 8008eb2:	2208      	movs	r2, #8
 8008eb4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	0e5b      	lsrs	r3, r3, #25
 8008ebe:	b2da      	uxtb	r2, r3
 8008ec0:	240d      	movs	r4, #13
 8008ec2:	193b      	adds	r3, r7, r4
 8008ec4:	2107      	movs	r1, #7
 8008ec6:	400a      	ands	r2, r1
 8008ec8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	0f5b      	lsrs	r3, r3, #29
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	250c      	movs	r5, #12
 8008ed6:	197b      	adds	r3, r7, r5
 8008ed8:	2107      	movs	r1, #7
 8008eda:	400a      	ands	r2, r1
 8008edc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ede:	183b      	adds	r3, r7, r0
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	197a      	adds	r2, r7, r5
 8008ee4:	7812      	ldrb	r2, [r2, #0]
 8008ee6:	4914      	ldr	r1, [pc, #80]	; (8008f38 <UARTEx_SetNbDataToProcess+0xb4>)
 8008ee8:	5c8a      	ldrb	r2, [r1, r2]
 8008eea:	435a      	muls	r2, r3
 8008eec:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008eee:	197b      	adds	r3, r7, r5
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	4a12      	ldr	r2, [pc, #72]	; (8008f3c <UARTEx_SetNbDataToProcess+0xb8>)
 8008ef4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ef6:	0019      	movs	r1, r3
 8008ef8:	f7f7 f9a2 	bl	8000240 <__divsi3>
 8008efc:	0003      	movs	r3, r0
 8008efe:	b299      	uxth	r1, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	226a      	movs	r2, #106	; 0x6a
 8008f04:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f06:	19bb      	adds	r3, r7, r6
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	193a      	adds	r2, r7, r4
 8008f0c:	7812      	ldrb	r2, [r2, #0]
 8008f0e:	490a      	ldr	r1, [pc, #40]	; (8008f38 <UARTEx_SetNbDataToProcess+0xb4>)
 8008f10:	5c8a      	ldrb	r2, [r1, r2]
 8008f12:	435a      	muls	r2, r3
 8008f14:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f16:	193b      	adds	r3, r7, r4
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	4a08      	ldr	r2, [pc, #32]	; (8008f3c <UARTEx_SetNbDataToProcess+0xb8>)
 8008f1c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f1e:	0019      	movs	r1, r3
 8008f20:	f7f7 f98e 	bl	8000240 <__divsi3>
 8008f24:	0003      	movs	r3, r0
 8008f26:	b299      	uxth	r1, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2268      	movs	r2, #104	; 0x68
 8008f2c:	5299      	strh	r1, [r3, r2]
}
 8008f2e:	46c0      	nop			; (mov r8, r8)
 8008f30:	46bd      	mov	sp, r7
 8008f32:	b005      	add	sp, #20
 8008f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f36:	46c0      	nop			; (mov r8, r8)
 8008f38:	0800a1d0 	.word	0x0800a1d0
 8008f3c:	0800a1d8 	.word	0x0800a1d8

08008f40 <atol>:
 8008f40:	b510      	push	{r4, lr}
 8008f42:	220a      	movs	r2, #10
 8008f44:	2100      	movs	r1, #0
 8008f46:	f000 f907 	bl	8009158 <strtol>
 8008f4a:	bd10      	pop	{r4, pc}

08008f4c <__errno>:
 8008f4c:	4b01      	ldr	r3, [pc, #4]	; (8008f54 <__errno+0x8>)
 8008f4e:	6818      	ldr	r0, [r3, #0]
 8008f50:	4770      	bx	lr
 8008f52:	46c0      	nop			; (mov r8, r8)
 8008f54:	2000000c 	.word	0x2000000c

08008f58 <__libc_init_array>:
 8008f58:	b570      	push	{r4, r5, r6, lr}
 8008f5a:	2600      	movs	r6, #0
 8008f5c:	4d0c      	ldr	r5, [pc, #48]	; (8008f90 <__libc_init_array+0x38>)
 8008f5e:	4c0d      	ldr	r4, [pc, #52]	; (8008f94 <__libc_init_array+0x3c>)
 8008f60:	1b64      	subs	r4, r4, r5
 8008f62:	10a4      	asrs	r4, r4, #2
 8008f64:	42a6      	cmp	r6, r4
 8008f66:	d109      	bne.n	8008f7c <__libc_init_array+0x24>
 8008f68:	2600      	movs	r6, #0
 8008f6a:	f000 fd41 	bl	80099f0 <_init>
 8008f6e:	4d0a      	ldr	r5, [pc, #40]	; (8008f98 <__libc_init_array+0x40>)
 8008f70:	4c0a      	ldr	r4, [pc, #40]	; (8008f9c <__libc_init_array+0x44>)
 8008f72:	1b64      	subs	r4, r4, r5
 8008f74:	10a4      	asrs	r4, r4, #2
 8008f76:	42a6      	cmp	r6, r4
 8008f78:	d105      	bne.n	8008f86 <__libc_init_array+0x2e>
 8008f7a:	bd70      	pop	{r4, r5, r6, pc}
 8008f7c:	00b3      	lsls	r3, r6, #2
 8008f7e:	58eb      	ldr	r3, [r5, r3]
 8008f80:	4798      	blx	r3
 8008f82:	3601      	adds	r6, #1
 8008f84:	e7ee      	b.n	8008f64 <__libc_init_array+0xc>
 8008f86:	00b3      	lsls	r3, r6, #2
 8008f88:	58eb      	ldr	r3, [r5, r3]
 8008f8a:	4798      	blx	r3
 8008f8c:	3601      	adds	r6, #1
 8008f8e:	e7f2      	b.n	8008f76 <__libc_init_array+0x1e>
 8008f90:	0800a31c 	.word	0x0800a31c
 8008f94:	0800a31c 	.word	0x0800a31c
 8008f98:	0800a31c 	.word	0x0800a31c
 8008f9c:	0800a328 	.word	0x0800a328

08008fa0 <memcpy>:
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	b510      	push	{r4, lr}
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d100      	bne.n	8008faa <memcpy+0xa>
 8008fa8:	bd10      	pop	{r4, pc}
 8008faa:	5ccc      	ldrb	r4, [r1, r3]
 8008fac:	54c4      	strb	r4, [r0, r3]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	e7f8      	b.n	8008fa4 <memcpy+0x4>

08008fb2 <memset>:
 8008fb2:	0003      	movs	r3, r0
 8008fb4:	1882      	adds	r2, r0, r2
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d100      	bne.n	8008fbc <memset+0xa>
 8008fba:	4770      	bx	lr
 8008fbc:	7019      	strb	r1, [r3, #0]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	e7f9      	b.n	8008fb6 <memset+0x4>
	...

08008fc4 <siprintf>:
 8008fc4:	b40e      	push	{r1, r2, r3}
 8008fc6:	b500      	push	{lr}
 8008fc8:	490b      	ldr	r1, [pc, #44]	; (8008ff8 <siprintf+0x34>)
 8008fca:	b09c      	sub	sp, #112	; 0x70
 8008fcc:	ab1d      	add	r3, sp, #116	; 0x74
 8008fce:	9002      	str	r0, [sp, #8]
 8008fd0:	9006      	str	r0, [sp, #24]
 8008fd2:	9107      	str	r1, [sp, #28]
 8008fd4:	9104      	str	r1, [sp, #16]
 8008fd6:	4809      	ldr	r0, [pc, #36]	; (8008ffc <siprintf+0x38>)
 8008fd8:	4909      	ldr	r1, [pc, #36]	; (8009000 <siprintf+0x3c>)
 8008fda:	cb04      	ldmia	r3!, {r2}
 8008fdc:	9105      	str	r1, [sp, #20]
 8008fde:	6800      	ldr	r0, [r0, #0]
 8008fe0:	a902      	add	r1, sp, #8
 8008fe2:	9301      	str	r3, [sp, #4]
 8008fe4:	f000 f926 	bl	8009234 <_svfiprintf_r>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	9a02      	ldr	r2, [sp, #8]
 8008fec:	7013      	strb	r3, [r2, #0]
 8008fee:	b01c      	add	sp, #112	; 0x70
 8008ff0:	bc08      	pop	{r3}
 8008ff2:	b003      	add	sp, #12
 8008ff4:	4718      	bx	r3
 8008ff6:	46c0      	nop			; (mov r8, r8)
 8008ff8:	7fffffff 	.word	0x7fffffff
 8008ffc:	2000000c 	.word	0x2000000c
 8009000:	ffff0208 	.word	0xffff0208

08009004 <strcpy>:
 8009004:	0003      	movs	r3, r0
 8009006:	780a      	ldrb	r2, [r1, #0]
 8009008:	3101      	adds	r1, #1
 800900a:	701a      	strb	r2, [r3, #0]
 800900c:	3301      	adds	r3, #1
 800900e:	2a00      	cmp	r2, #0
 8009010:	d1f9      	bne.n	8009006 <strcpy+0x2>
 8009012:	4770      	bx	lr

08009014 <strncpy>:
 8009014:	0003      	movs	r3, r0
 8009016:	b530      	push	{r4, r5, lr}
 8009018:	001d      	movs	r5, r3
 800901a:	2a00      	cmp	r2, #0
 800901c:	d006      	beq.n	800902c <strncpy+0x18>
 800901e:	780c      	ldrb	r4, [r1, #0]
 8009020:	3a01      	subs	r2, #1
 8009022:	3301      	adds	r3, #1
 8009024:	702c      	strb	r4, [r5, #0]
 8009026:	3101      	adds	r1, #1
 8009028:	2c00      	cmp	r4, #0
 800902a:	d1f5      	bne.n	8009018 <strncpy+0x4>
 800902c:	2100      	movs	r1, #0
 800902e:	189a      	adds	r2, r3, r2
 8009030:	4293      	cmp	r3, r2
 8009032:	d100      	bne.n	8009036 <strncpy+0x22>
 8009034:	bd30      	pop	{r4, r5, pc}
 8009036:	7019      	strb	r1, [r3, #0]
 8009038:	3301      	adds	r3, #1
 800903a:	e7f9      	b.n	8009030 <strncpy+0x1c>

0800903c <_strtol_l.constprop.0>:
 800903c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800903e:	b087      	sub	sp, #28
 8009040:	001e      	movs	r6, r3
 8009042:	9005      	str	r0, [sp, #20]
 8009044:	9101      	str	r1, [sp, #4]
 8009046:	9202      	str	r2, [sp, #8]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d045      	beq.n	80090d8 <_strtol_l.constprop.0+0x9c>
 800904c:	000b      	movs	r3, r1
 800904e:	2e24      	cmp	r6, #36	; 0x24
 8009050:	d842      	bhi.n	80090d8 <_strtol_l.constprop.0+0x9c>
 8009052:	4a3f      	ldr	r2, [pc, #252]	; (8009150 <_strtol_l.constprop.0+0x114>)
 8009054:	2108      	movs	r1, #8
 8009056:	4694      	mov	ip, r2
 8009058:	001a      	movs	r2, r3
 800905a:	4660      	mov	r0, ip
 800905c:	7814      	ldrb	r4, [r2, #0]
 800905e:	3301      	adds	r3, #1
 8009060:	5d00      	ldrb	r0, [r0, r4]
 8009062:	001d      	movs	r5, r3
 8009064:	0007      	movs	r7, r0
 8009066:	400f      	ands	r7, r1
 8009068:	4208      	tst	r0, r1
 800906a:	d1f5      	bne.n	8009058 <_strtol_l.constprop.0+0x1c>
 800906c:	2c2d      	cmp	r4, #45	; 0x2d
 800906e:	d13a      	bne.n	80090e6 <_strtol_l.constprop.0+0xaa>
 8009070:	2701      	movs	r7, #1
 8009072:	781c      	ldrb	r4, [r3, #0]
 8009074:	1c95      	adds	r5, r2, #2
 8009076:	2e00      	cmp	r6, #0
 8009078:	d065      	beq.n	8009146 <_strtol_l.constprop.0+0x10a>
 800907a:	2e10      	cmp	r6, #16
 800907c:	d109      	bne.n	8009092 <_strtol_l.constprop.0+0x56>
 800907e:	2c30      	cmp	r4, #48	; 0x30
 8009080:	d107      	bne.n	8009092 <_strtol_l.constprop.0+0x56>
 8009082:	2220      	movs	r2, #32
 8009084:	782b      	ldrb	r3, [r5, #0]
 8009086:	4393      	bics	r3, r2
 8009088:	2b58      	cmp	r3, #88	; 0x58
 800908a:	d157      	bne.n	800913c <_strtol_l.constprop.0+0x100>
 800908c:	2610      	movs	r6, #16
 800908e:	786c      	ldrb	r4, [r5, #1]
 8009090:	3502      	adds	r5, #2
 8009092:	4b30      	ldr	r3, [pc, #192]	; (8009154 <_strtol_l.constprop.0+0x118>)
 8009094:	0031      	movs	r1, r6
 8009096:	18fb      	adds	r3, r7, r3
 8009098:	0018      	movs	r0, r3
 800909a:	9303      	str	r3, [sp, #12]
 800909c:	f7f7 f8cc 	bl	8000238 <__aeabi_uidivmod>
 80090a0:	2300      	movs	r3, #0
 80090a2:	2201      	movs	r2, #1
 80090a4:	4684      	mov	ip, r0
 80090a6:	0018      	movs	r0, r3
 80090a8:	9104      	str	r1, [sp, #16]
 80090aa:	4252      	negs	r2, r2
 80090ac:	0021      	movs	r1, r4
 80090ae:	3930      	subs	r1, #48	; 0x30
 80090b0:	2909      	cmp	r1, #9
 80090b2:	d81d      	bhi.n	80090f0 <_strtol_l.constprop.0+0xb4>
 80090b4:	000c      	movs	r4, r1
 80090b6:	42a6      	cmp	r6, r4
 80090b8:	dd28      	ble.n	800910c <_strtol_l.constprop.0+0xd0>
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	db24      	blt.n	8009108 <_strtol_l.constprop.0+0xcc>
 80090be:	0013      	movs	r3, r2
 80090c0:	4584      	cmp	ip, r0
 80090c2:	d306      	bcc.n	80090d2 <_strtol_l.constprop.0+0x96>
 80090c4:	d102      	bne.n	80090cc <_strtol_l.constprop.0+0x90>
 80090c6:	9904      	ldr	r1, [sp, #16]
 80090c8:	42a1      	cmp	r1, r4
 80090ca:	db02      	blt.n	80090d2 <_strtol_l.constprop.0+0x96>
 80090cc:	2301      	movs	r3, #1
 80090ce:	4370      	muls	r0, r6
 80090d0:	1820      	adds	r0, r4, r0
 80090d2:	782c      	ldrb	r4, [r5, #0]
 80090d4:	3501      	adds	r5, #1
 80090d6:	e7e9      	b.n	80090ac <_strtol_l.constprop.0+0x70>
 80090d8:	f7ff ff38 	bl	8008f4c <__errno>
 80090dc:	2316      	movs	r3, #22
 80090de:	6003      	str	r3, [r0, #0]
 80090e0:	2000      	movs	r0, #0
 80090e2:	b007      	add	sp, #28
 80090e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090e6:	2c2b      	cmp	r4, #43	; 0x2b
 80090e8:	d1c5      	bne.n	8009076 <_strtol_l.constprop.0+0x3a>
 80090ea:	781c      	ldrb	r4, [r3, #0]
 80090ec:	1c95      	adds	r5, r2, #2
 80090ee:	e7c2      	b.n	8009076 <_strtol_l.constprop.0+0x3a>
 80090f0:	0021      	movs	r1, r4
 80090f2:	3941      	subs	r1, #65	; 0x41
 80090f4:	2919      	cmp	r1, #25
 80090f6:	d801      	bhi.n	80090fc <_strtol_l.constprop.0+0xc0>
 80090f8:	3c37      	subs	r4, #55	; 0x37
 80090fa:	e7dc      	b.n	80090b6 <_strtol_l.constprop.0+0x7a>
 80090fc:	0021      	movs	r1, r4
 80090fe:	3961      	subs	r1, #97	; 0x61
 8009100:	2919      	cmp	r1, #25
 8009102:	d803      	bhi.n	800910c <_strtol_l.constprop.0+0xd0>
 8009104:	3c57      	subs	r4, #87	; 0x57
 8009106:	e7d6      	b.n	80090b6 <_strtol_l.constprop.0+0x7a>
 8009108:	0013      	movs	r3, r2
 800910a:	e7e2      	b.n	80090d2 <_strtol_l.constprop.0+0x96>
 800910c:	2b00      	cmp	r3, #0
 800910e:	da09      	bge.n	8009124 <_strtol_l.constprop.0+0xe8>
 8009110:	2322      	movs	r3, #34	; 0x22
 8009112:	9a05      	ldr	r2, [sp, #20]
 8009114:	9803      	ldr	r0, [sp, #12]
 8009116:	6013      	str	r3, [r2, #0]
 8009118:	9b02      	ldr	r3, [sp, #8]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d0e1      	beq.n	80090e2 <_strtol_l.constprop.0+0xa6>
 800911e:	1e6b      	subs	r3, r5, #1
 8009120:	9301      	str	r3, [sp, #4]
 8009122:	e007      	b.n	8009134 <_strtol_l.constprop.0+0xf8>
 8009124:	2f00      	cmp	r7, #0
 8009126:	d000      	beq.n	800912a <_strtol_l.constprop.0+0xee>
 8009128:	4240      	negs	r0, r0
 800912a:	9a02      	ldr	r2, [sp, #8]
 800912c:	2a00      	cmp	r2, #0
 800912e:	d0d8      	beq.n	80090e2 <_strtol_l.constprop.0+0xa6>
 8009130:	2b00      	cmp	r3, #0
 8009132:	d1f4      	bne.n	800911e <_strtol_l.constprop.0+0xe2>
 8009134:	9b02      	ldr	r3, [sp, #8]
 8009136:	9a01      	ldr	r2, [sp, #4]
 8009138:	601a      	str	r2, [r3, #0]
 800913a:	e7d2      	b.n	80090e2 <_strtol_l.constprop.0+0xa6>
 800913c:	2430      	movs	r4, #48	; 0x30
 800913e:	2e00      	cmp	r6, #0
 8009140:	d1a7      	bne.n	8009092 <_strtol_l.constprop.0+0x56>
 8009142:	3608      	adds	r6, #8
 8009144:	e7a5      	b.n	8009092 <_strtol_l.constprop.0+0x56>
 8009146:	2c30      	cmp	r4, #48	; 0x30
 8009148:	d09b      	beq.n	8009082 <_strtol_l.constprop.0+0x46>
 800914a:	260a      	movs	r6, #10
 800914c:	e7a1      	b.n	8009092 <_strtol_l.constprop.0+0x56>
 800914e:	46c0      	nop			; (mov r8, r8)
 8009150:	0800a1e1 	.word	0x0800a1e1
 8009154:	7fffffff 	.word	0x7fffffff

08009158 <strtol>:
 8009158:	b510      	push	{r4, lr}
 800915a:	0013      	movs	r3, r2
 800915c:	000a      	movs	r2, r1
 800915e:	0001      	movs	r1, r0
 8009160:	4802      	ldr	r0, [pc, #8]	; (800916c <strtol+0x14>)
 8009162:	6800      	ldr	r0, [r0, #0]
 8009164:	f7ff ff6a 	bl	800903c <_strtol_l.constprop.0>
 8009168:	bd10      	pop	{r4, pc}
 800916a:	46c0      	nop			; (mov r8, r8)
 800916c:	2000000c 	.word	0x2000000c

08009170 <__ssputs_r>:
 8009170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009172:	688e      	ldr	r6, [r1, #8]
 8009174:	b085      	sub	sp, #20
 8009176:	0007      	movs	r7, r0
 8009178:	000c      	movs	r4, r1
 800917a:	9203      	str	r2, [sp, #12]
 800917c:	9301      	str	r3, [sp, #4]
 800917e:	429e      	cmp	r6, r3
 8009180:	d83c      	bhi.n	80091fc <__ssputs_r+0x8c>
 8009182:	2390      	movs	r3, #144	; 0x90
 8009184:	898a      	ldrh	r2, [r1, #12]
 8009186:	00db      	lsls	r3, r3, #3
 8009188:	421a      	tst	r2, r3
 800918a:	d034      	beq.n	80091f6 <__ssputs_r+0x86>
 800918c:	6909      	ldr	r1, [r1, #16]
 800918e:	6823      	ldr	r3, [r4, #0]
 8009190:	6960      	ldr	r0, [r4, #20]
 8009192:	1a5b      	subs	r3, r3, r1
 8009194:	9302      	str	r3, [sp, #8]
 8009196:	2303      	movs	r3, #3
 8009198:	4343      	muls	r3, r0
 800919a:	0fdd      	lsrs	r5, r3, #31
 800919c:	18ed      	adds	r5, r5, r3
 800919e:	9b01      	ldr	r3, [sp, #4]
 80091a0:	9802      	ldr	r0, [sp, #8]
 80091a2:	3301      	adds	r3, #1
 80091a4:	181b      	adds	r3, r3, r0
 80091a6:	106d      	asrs	r5, r5, #1
 80091a8:	42ab      	cmp	r3, r5
 80091aa:	d900      	bls.n	80091ae <__ssputs_r+0x3e>
 80091ac:	001d      	movs	r5, r3
 80091ae:	0553      	lsls	r3, r2, #21
 80091b0:	d532      	bpl.n	8009218 <__ssputs_r+0xa8>
 80091b2:	0029      	movs	r1, r5
 80091b4:	0038      	movs	r0, r7
 80091b6:	f000 fb49 	bl	800984c <_malloc_r>
 80091ba:	1e06      	subs	r6, r0, #0
 80091bc:	d109      	bne.n	80091d2 <__ssputs_r+0x62>
 80091be:	230c      	movs	r3, #12
 80091c0:	603b      	str	r3, [r7, #0]
 80091c2:	2340      	movs	r3, #64	; 0x40
 80091c4:	2001      	movs	r0, #1
 80091c6:	89a2      	ldrh	r2, [r4, #12]
 80091c8:	4240      	negs	r0, r0
 80091ca:	4313      	orrs	r3, r2
 80091cc:	81a3      	strh	r3, [r4, #12]
 80091ce:	b005      	add	sp, #20
 80091d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091d2:	9a02      	ldr	r2, [sp, #8]
 80091d4:	6921      	ldr	r1, [r4, #16]
 80091d6:	f7ff fee3 	bl	8008fa0 <memcpy>
 80091da:	89a3      	ldrh	r3, [r4, #12]
 80091dc:	4a14      	ldr	r2, [pc, #80]	; (8009230 <__ssputs_r+0xc0>)
 80091de:	401a      	ands	r2, r3
 80091e0:	2380      	movs	r3, #128	; 0x80
 80091e2:	4313      	orrs	r3, r2
 80091e4:	81a3      	strh	r3, [r4, #12]
 80091e6:	9b02      	ldr	r3, [sp, #8]
 80091e8:	6126      	str	r6, [r4, #16]
 80091ea:	18f6      	adds	r6, r6, r3
 80091ec:	6026      	str	r6, [r4, #0]
 80091ee:	6165      	str	r5, [r4, #20]
 80091f0:	9e01      	ldr	r6, [sp, #4]
 80091f2:	1aed      	subs	r5, r5, r3
 80091f4:	60a5      	str	r5, [r4, #8]
 80091f6:	9b01      	ldr	r3, [sp, #4]
 80091f8:	429e      	cmp	r6, r3
 80091fa:	d900      	bls.n	80091fe <__ssputs_r+0x8e>
 80091fc:	9e01      	ldr	r6, [sp, #4]
 80091fe:	0032      	movs	r2, r6
 8009200:	9903      	ldr	r1, [sp, #12]
 8009202:	6820      	ldr	r0, [r4, #0]
 8009204:	f000 faa3 	bl	800974e <memmove>
 8009208:	68a3      	ldr	r3, [r4, #8]
 800920a:	2000      	movs	r0, #0
 800920c:	1b9b      	subs	r3, r3, r6
 800920e:	60a3      	str	r3, [r4, #8]
 8009210:	6823      	ldr	r3, [r4, #0]
 8009212:	199e      	adds	r6, r3, r6
 8009214:	6026      	str	r6, [r4, #0]
 8009216:	e7da      	b.n	80091ce <__ssputs_r+0x5e>
 8009218:	002a      	movs	r2, r5
 800921a:	0038      	movs	r0, r7
 800921c:	f000 fb8c 	bl	8009938 <_realloc_r>
 8009220:	1e06      	subs	r6, r0, #0
 8009222:	d1e0      	bne.n	80091e6 <__ssputs_r+0x76>
 8009224:	0038      	movs	r0, r7
 8009226:	6921      	ldr	r1, [r4, #16]
 8009228:	f000 faa4 	bl	8009774 <_free_r>
 800922c:	e7c7      	b.n	80091be <__ssputs_r+0x4e>
 800922e:	46c0      	nop			; (mov r8, r8)
 8009230:	fffffb7f 	.word	0xfffffb7f

08009234 <_svfiprintf_r>:
 8009234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009236:	b0a1      	sub	sp, #132	; 0x84
 8009238:	9003      	str	r0, [sp, #12]
 800923a:	001d      	movs	r5, r3
 800923c:	898b      	ldrh	r3, [r1, #12]
 800923e:	000f      	movs	r7, r1
 8009240:	0016      	movs	r6, r2
 8009242:	061b      	lsls	r3, r3, #24
 8009244:	d511      	bpl.n	800926a <_svfiprintf_r+0x36>
 8009246:	690b      	ldr	r3, [r1, #16]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10e      	bne.n	800926a <_svfiprintf_r+0x36>
 800924c:	2140      	movs	r1, #64	; 0x40
 800924e:	f000 fafd 	bl	800984c <_malloc_r>
 8009252:	6038      	str	r0, [r7, #0]
 8009254:	6138      	str	r0, [r7, #16]
 8009256:	2800      	cmp	r0, #0
 8009258:	d105      	bne.n	8009266 <_svfiprintf_r+0x32>
 800925a:	230c      	movs	r3, #12
 800925c:	9a03      	ldr	r2, [sp, #12]
 800925e:	3801      	subs	r0, #1
 8009260:	6013      	str	r3, [r2, #0]
 8009262:	b021      	add	sp, #132	; 0x84
 8009264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009266:	2340      	movs	r3, #64	; 0x40
 8009268:	617b      	str	r3, [r7, #20]
 800926a:	2300      	movs	r3, #0
 800926c:	ac08      	add	r4, sp, #32
 800926e:	6163      	str	r3, [r4, #20]
 8009270:	3320      	adds	r3, #32
 8009272:	7663      	strb	r3, [r4, #25]
 8009274:	3310      	adds	r3, #16
 8009276:	76a3      	strb	r3, [r4, #26]
 8009278:	9507      	str	r5, [sp, #28]
 800927a:	0035      	movs	r5, r6
 800927c:	782b      	ldrb	r3, [r5, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d001      	beq.n	8009286 <_svfiprintf_r+0x52>
 8009282:	2b25      	cmp	r3, #37	; 0x25
 8009284:	d147      	bne.n	8009316 <_svfiprintf_r+0xe2>
 8009286:	1bab      	subs	r3, r5, r6
 8009288:	9305      	str	r3, [sp, #20]
 800928a:	42b5      	cmp	r5, r6
 800928c:	d00c      	beq.n	80092a8 <_svfiprintf_r+0x74>
 800928e:	0032      	movs	r2, r6
 8009290:	0039      	movs	r1, r7
 8009292:	9803      	ldr	r0, [sp, #12]
 8009294:	f7ff ff6c 	bl	8009170 <__ssputs_r>
 8009298:	1c43      	adds	r3, r0, #1
 800929a:	d100      	bne.n	800929e <_svfiprintf_r+0x6a>
 800929c:	e0ae      	b.n	80093fc <_svfiprintf_r+0x1c8>
 800929e:	6962      	ldr	r2, [r4, #20]
 80092a0:	9b05      	ldr	r3, [sp, #20]
 80092a2:	4694      	mov	ip, r2
 80092a4:	4463      	add	r3, ip
 80092a6:	6163      	str	r3, [r4, #20]
 80092a8:	782b      	ldrb	r3, [r5, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d100      	bne.n	80092b0 <_svfiprintf_r+0x7c>
 80092ae:	e0a5      	b.n	80093fc <_svfiprintf_r+0x1c8>
 80092b0:	2201      	movs	r2, #1
 80092b2:	2300      	movs	r3, #0
 80092b4:	4252      	negs	r2, r2
 80092b6:	6062      	str	r2, [r4, #4]
 80092b8:	a904      	add	r1, sp, #16
 80092ba:	3254      	adds	r2, #84	; 0x54
 80092bc:	1852      	adds	r2, r2, r1
 80092be:	1c6e      	adds	r6, r5, #1
 80092c0:	6023      	str	r3, [r4, #0]
 80092c2:	60e3      	str	r3, [r4, #12]
 80092c4:	60a3      	str	r3, [r4, #8]
 80092c6:	7013      	strb	r3, [r2, #0]
 80092c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80092ca:	2205      	movs	r2, #5
 80092cc:	7831      	ldrb	r1, [r6, #0]
 80092ce:	4854      	ldr	r0, [pc, #336]	; (8009420 <_svfiprintf_r+0x1ec>)
 80092d0:	f000 fa32 	bl	8009738 <memchr>
 80092d4:	1c75      	adds	r5, r6, #1
 80092d6:	2800      	cmp	r0, #0
 80092d8:	d11f      	bne.n	800931a <_svfiprintf_r+0xe6>
 80092da:	6822      	ldr	r2, [r4, #0]
 80092dc:	06d3      	lsls	r3, r2, #27
 80092de:	d504      	bpl.n	80092ea <_svfiprintf_r+0xb6>
 80092e0:	2353      	movs	r3, #83	; 0x53
 80092e2:	a904      	add	r1, sp, #16
 80092e4:	185b      	adds	r3, r3, r1
 80092e6:	2120      	movs	r1, #32
 80092e8:	7019      	strb	r1, [r3, #0]
 80092ea:	0713      	lsls	r3, r2, #28
 80092ec:	d504      	bpl.n	80092f8 <_svfiprintf_r+0xc4>
 80092ee:	2353      	movs	r3, #83	; 0x53
 80092f0:	a904      	add	r1, sp, #16
 80092f2:	185b      	adds	r3, r3, r1
 80092f4:	212b      	movs	r1, #43	; 0x2b
 80092f6:	7019      	strb	r1, [r3, #0]
 80092f8:	7833      	ldrb	r3, [r6, #0]
 80092fa:	2b2a      	cmp	r3, #42	; 0x2a
 80092fc:	d016      	beq.n	800932c <_svfiprintf_r+0xf8>
 80092fe:	0035      	movs	r5, r6
 8009300:	2100      	movs	r1, #0
 8009302:	200a      	movs	r0, #10
 8009304:	68e3      	ldr	r3, [r4, #12]
 8009306:	782a      	ldrb	r2, [r5, #0]
 8009308:	1c6e      	adds	r6, r5, #1
 800930a:	3a30      	subs	r2, #48	; 0x30
 800930c:	2a09      	cmp	r2, #9
 800930e:	d94e      	bls.n	80093ae <_svfiprintf_r+0x17a>
 8009310:	2900      	cmp	r1, #0
 8009312:	d111      	bne.n	8009338 <_svfiprintf_r+0x104>
 8009314:	e017      	b.n	8009346 <_svfiprintf_r+0x112>
 8009316:	3501      	adds	r5, #1
 8009318:	e7b0      	b.n	800927c <_svfiprintf_r+0x48>
 800931a:	4b41      	ldr	r3, [pc, #260]	; (8009420 <_svfiprintf_r+0x1ec>)
 800931c:	6822      	ldr	r2, [r4, #0]
 800931e:	1ac0      	subs	r0, r0, r3
 8009320:	2301      	movs	r3, #1
 8009322:	4083      	lsls	r3, r0
 8009324:	4313      	orrs	r3, r2
 8009326:	002e      	movs	r6, r5
 8009328:	6023      	str	r3, [r4, #0]
 800932a:	e7ce      	b.n	80092ca <_svfiprintf_r+0x96>
 800932c:	9b07      	ldr	r3, [sp, #28]
 800932e:	1d19      	adds	r1, r3, #4
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	9107      	str	r1, [sp, #28]
 8009334:	2b00      	cmp	r3, #0
 8009336:	db01      	blt.n	800933c <_svfiprintf_r+0x108>
 8009338:	930b      	str	r3, [sp, #44]	; 0x2c
 800933a:	e004      	b.n	8009346 <_svfiprintf_r+0x112>
 800933c:	425b      	negs	r3, r3
 800933e:	60e3      	str	r3, [r4, #12]
 8009340:	2302      	movs	r3, #2
 8009342:	4313      	orrs	r3, r2
 8009344:	6023      	str	r3, [r4, #0]
 8009346:	782b      	ldrb	r3, [r5, #0]
 8009348:	2b2e      	cmp	r3, #46	; 0x2e
 800934a:	d10a      	bne.n	8009362 <_svfiprintf_r+0x12e>
 800934c:	786b      	ldrb	r3, [r5, #1]
 800934e:	2b2a      	cmp	r3, #42	; 0x2a
 8009350:	d135      	bne.n	80093be <_svfiprintf_r+0x18a>
 8009352:	9b07      	ldr	r3, [sp, #28]
 8009354:	3502      	adds	r5, #2
 8009356:	1d1a      	adds	r2, r3, #4
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	9207      	str	r2, [sp, #28]
 800935c:	2b00      	cmp	r3, #0
 800935e:	db2b      	blt.n	80093b8 <_svfiprintf_r+0x184>
 8009360:	9309      	str	r3, [sp, #36]	; 0x24
 8009362:	4e30      	ldr	r6, [pc, #192]	; (8009424 <_svfiprintf_r+0x1f0>)
 8009364:	2203      	movs	r2, #3
 8009366:	0030      	movs	r0, r6
 8009368:	7829      	ldrb	r1, [r5, #0]
 800936a:	f000 f9e5 	bl	8009738 <memchr>
 800936e:	2800      	cmp	r0, #0
 8009370:	d006      	beq.n	8009380 <_svfiprintf_r+0x14c>
 8009372:	2340      	movs	r3, #64	; 0x40
 8009374:	1b80      	subs	r0, r0, r6
 8009376:	4083      	lsls	r3, r0
 8009378:	6822      	ldr	r2, [r4, #0]
 800937a:	3501      	adds	r5, #1
 800937c:	4313      	orrs	r3, r2
 800937e:	6023      	str	r3, [r4, #0]
 8009380:	7829      	ldrb	r1, [r5, #0]
 8009382:	2206      	movs	r2, #6
 8009384:	4828      	ldr	r0, [pc, #160]	; (8009428 <_svfiprintf_r+0x1f4>)
 8009386:	1c6e      	adds	r6, r5, #1
 8009388:	7621      	strb	r1, [r4, #24]
 800938a:	f000 f9d5 	bl	8009738 <memchr>
 800938e:	2800      	cmp	r0, #0
 8009390:	d03c      	beq.n	800940c <_svfiprintf_r+0x1d8>
 8009392:	4b26      	ldr	r3, [pc, #152]	; (800942c <_svfiprintf_r+0x1f8>)
 8009394:	2b00      	cmp	r3, #0
 8009396:	d125      	bne.n	80093e4 <_svfiprintf_r+0x1b0>
 8009398:	2207      	movs	r2, #7
 800939a:	9b07      	ldr	r3, [sp, #28]
 800939c:	3307      	adds	r3, #7
 800939e:	4393      	bics	r3, r2
 80093a0:	3308      	adds	r3, #8
 80093a2:	9307      	str	r3, [sp, #28]
 80093a4:	6963      	ldr	r3, [r4, #20]
 80093a6:	9a04      	ldr	r2, [sp, #16]
 80093a8:	189b      	adds	r3, r3, r2
 80093aa:	6163      	str	r3, [r4, #20]
 80093ac:	e765      	b.n	800927a <_svfiprintf_r+0x46>
 80093ae:	4343      	muls	r3, r0
 80093b0:	0035      	movs	r5, r6
 80093b2:	2101      	movs	r1, #1
 80093b4:	189b      	adds	r3, r3, r2
 80093b6:	e7a6      	b.n	8009306 <_svfiprintf_r+0xd2>
 80093b8:	2301      	movs	r3, #1
 80093ba:	425b      	negs	r3, r3
 80093bc:	e7d0      	b.n	8009360 <_svfiprintf_r+0x12c>
 80093be:	2300      	movs	r3, #0
 80093c0:	200a      	movs	r0, #10
 80093c2:	001a      	movs	r2, r3
 80093c4:	3501      	adds	r5, #1
 80093c6:	6063      	str	r3, [r4, #4]
 80093c8:	7829      	ldrb	r1, [r5, #0]
 80093ca:	1c6e      	adds	r6, r5, #1
 80093cc:	3930      	subs	r1, #48	; 0x30
 80093ce:	2909      	cmp	r1, #9
 80093d0:	d903      	bls.n	80093da <_svfiprintf_r+0x1a6>
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d0c5      	beq.n	8009362 <_svfiprintf_r+0x12e>
 80093d6:	9209      	str	r2, [sp, #36]	; 0x24
 80093d8:	e7c3      	b.n	8009362 <_svfiprintf_r+0x12e>
 80093da:	4342      	muls	r2, r0
 80093dc:	0035      	movs	r5, r6
 80093de:	2301      	movs	r3, #1
 80093e0:	1852      	adds	r2, r2, r1
 80093e2:	e7f1      	b.n	80093c8 <_svfiprintf_r+0x194>
 80093e4:	ab07      	add	r3, sp, #28
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	003a      	movs	r2, r7
 80093ea:	0021      	movs	r1, r4
 80093ec:	4b10      	ldr	r3, [pc, #64]	; (8009430 <_svfiprintf_r+0x1fc>)
 80093ee:	9803      	ldr	r0, [sp, #12]
 80093f0:	e000      	b.n	80093f4 <_svfiprintf_r+0x1c0>
 80093f2:	bf00      	nop
 80093f4:	9004      	str	r0, [sp, #16]
 80093f6:	9b04      	ldr	r3, [sp, #16]
 80093f8:	3301      	adds	r3, #1
 80093fa:	d1d3      	bne.n	80093a4 <_svfiprintf_r+0x170>
 80093fc:	89bb      	ldrh	r3, [r7, #12]
 80093fe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009400:	065b      	lsls	r3, r3, #25
 8009402:	d400      	bmi.n	8009406 <_svfiprintf_r+0x1d2>
 8009404:	e72d      	b.n	8009262 <_svfiprintf_r+0x2e>
 8009406:	2001      	movs	r0, #1
 8009408:	4240      	negs	r0, r0
 800940a:	e72a      	b.n	8009262 <_svfiprintf_r+0x2e>
 800940c:	ab07      	add	r3, sp, #28
 800940e:	9300      	str	r3, [sp, #0]
 8009410:	003a      	movs	r2, r7
 8009412:	0021      	movs	r1, r4
 8009414:	4b06      	ldr	r3, [pc, #24]	; (8009430 <_svfiprintf_r+0x1fc>)
 8009416:	9803      	ldr	r0, [sp, #12]
 8009418:	f000 f87c 	bl	8009514 <_printf_i>
 800941c:	e7ea      	b.n	80093f4 <_svfiprintf_r+0x1c0>
 800941e:	46c0      	nop			; (mov r8, r8)
 8009420:	0800a2e1 	.word	0x0800a2e1
 8009424:	0800a2e7 	.word	0x0800a2e7
 8009428:	0800a2eb 	.word	0x0800a2eb
 800942c:	00000000 	.word	0x00000000
 8009430:	08009171 	.word	0x08009171

08009434 <_printf_common>:
 8009434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009436:	0015      	movs	r5, r2
 8009438:	9301      	str	r3, [sp, #4]
 800943a:	688a      	ldr	r2, [r1, #8]
 800943c:	690b      	ldr	r3, [r1, #16]
 800943e:	000c      	movs	r4, r1
 8009440:	9000      	str	r0, [sp, #0]
 8009442:	4293      	cmp	r3, r2
 8009444:	da00      	bge.n	8009448 <_printf_common+0x14>
 8009446:	0013      	movs	r3, r2
 8009448:	0022      	movs	r2, r4
 800944a:	602b      	str	r3, [r5, #0]
 800944c:	3243      	adds	r2, #67	; 0x43
 800944e:	7812      	ldrb	r2, [r2, #0]
 8009450:	2a00      	cmp	r2, #0
 8009452:	d001      	beq.n	8009458 <_printf_common+0x24>
 8009454:	3301      	adds	r3, #1
 8009456:	602b      	str	r3, [r5, #0]
 8009458:	6823      	ldr	r3, [r4, #0]
 800945a:	069b      	lsls	r3, r3, #26
 800945c:	d502      	bpl.n	8009464 <_printf_common+0x30>
 800945e:	682b      	ldr	r3, [r5, #0]
 8009460:	3302      	adds	r3, #2
 8009462:	602b      	str	r3, [r5, #0]
 8009464:	6822      	ldr	r2, [r4, #0]
 8009466:	2306      	movs	r3, #6
 8009468:	0017      	movs	r7, r2
 800946a:	401f      	ands	r7, r3
 800946c:	421a      	tst	r2, r3
 800946e:	d027      	beq.n	80094c0 <_printf_common+0x8c>
 8009470:	0023      	movs	r3, r4
 8009472:	3343      	adds	r3, #67	; 0x43
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	1e5a      	subs	r2, r3, #1
 8009478:	4193      	sbcs	r3, r2
 800947a:	6822      	ldr	r2, [r4, #0]
 800947c:	0692      	lsls	r2, r2, #26
 800947e:	d430      	bmi.n	80094e2 <_printf_common+0xae>
 8009480:	0022      	movs	r2, r4
 8009482:	9901      	ldr	r1, [sp, #4]
 8009484:	9800      	ldr	r0, [sp, #0]
 8009486:	9e08      	ldr	r6, [sp, #32]
 8009488:	3243      	adds	r2, #67	; 0x43
 800948a:	47b0      	blx	r6
 800948c:	1c43      	adds	r3, r0, #1
 800948e:	d025      	beq.n	80094dc <_printf_common+0xa8>
 8009490:	2306      	movs	r3, #6
 8009492:	6820      	ldr	r0, [r4, #0]
 8009494:	682a      	ldr	r2, [r5, #0]
 8009496:	68e1      	ldr	r1, [r4, #12]
 8009498:	2500      	movs	r5, #0
 800949a:	4003      	ands	r3, r0
 800949c:	2b04      	cmp	r3, #4
 800949e:	d103      	bne.n	80094a8 <_printf_common+0x74>
 80094a0:	1a8d      	subs	r5, r1, r2
 80094a2:	43eb      	mvns	r3, r5
 80094a4:	17db      	asrs	r3, r3, #31
 80094a6:	401d      	ands	r5, r3
 80094a8:	68a3      	ldr	r3, [r4, #8]
 80094aa:	6922      	ldr	r2, [r4, #16]
 80094ac:	4293      	cmp	r3, r2
 80094ae:	dd01      	ble.n	80094b4 <_printf_common+0x80>
 80094b0:	1a9b      	subs	r3, r3, r2
 80094b2:	18ed      	adds	r5, r5, r3
 80094b4:	2700      	movs	r7, #0
 80094b6:	42bd      	cmp	r5, r7
 80094b8:	d120      	bne.n	80094fc <_printf_common+0xc8>
 80094ba:	2000      	movs	r0, #0
 80094bc:	e010      	b.n	80094e0 <_printf_common+0xac>
 80094be:	3701      	adds	r7, #1
 80094c0:	68e3      	ldr	r3, [r4, #12]
 80094c2:	682a      	ldr	r2, [r5, #0]
 80094c4:	1a9b      	subs	r3, r3, r2
 80094c6:	42bb      	cmp	r3, r7
 80094c8:	ddd2      	ble.n	8009470 <_printf_common+0x3c>
 80094ca:	0022      	movs	r2, r4
 80094cc:	2301      	movs	r3, #1
 80094ce:	9901      	ldr	r1, [sp, #4]
 80094d0:	9800      	ldr	r0, [sp, #0]
 80094d2:	9e08      	ldr	r6, [sp, #32]
 80094d4:	3219      	adds	r2, #25
 80094d6:	47b0      	blx	r6
 80094d8:	1c43      	adds	r3, r0, #1
 80094da:	d1f0      	bne.n	80094be <_printf_common+0x8a>
 80094dc:	2001      	movs	r0, #1
 80094de:	4240      	negs	r0, r0
 80094e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80094e2:	2030      	movs	r0, #48	; 0x30
 80094e4:	18e1      	adds	r1, r4, r3
 80094e6:	3143      	adds	r1, #67	; 0x43
 80094e8:	7008      	strb	r0, [r1, #0]
 80094ea:	0021      	movs	r1, r4
 80094ec:	1c5a      	adds	r2, r3, #1
 80094ee:	3145      	adds	r1, #69	; 0x45
 80094f0:	7809      	ldrb	r1, [r1, #0]
 80094f2:	18a2      	adds	r2, r4, r2
 80094f4:	3243      	adds	r2, #67	; 0x43
 80094f6:	3302      	adds	r3, #2
 80094f8:	7011      	strb	r1, [r2, #0]
 80094fa:	e7c1      	b.n	8009480 <_printf_common+0x4c>
 80094fc:	0022      	movs	r2, r4
 80094fe:	2301      	movs	r3, #1
 8009500:	9901      	ldr	r1, [sp, #4]
 8009502:	9800      	ldr	r0, [sp, #0]
 8009504:	9e08      	ldr	r6, [sp, #32]
 8009506:	321a      	adds	r2, #26
 8009508:	47b0      	blx	r6
 800950a:	1c43      	adds	r3, r0, #1
 800950c:	d0e6      	beq.n	80094dc <_printf_common+0xa8>
 800950e:	3701      	adds	r7, #1
 8009510:	e7d1      	b.n	80094b6 <_printf_common+0x82>
	...

08009514 <_printf_i>:
 8009514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009516:	b08b      	sub	sp, #44	; 0x2c
 8009518:	9206      	str	r2, [sp, #24]
 800951a:	000a      	movs	r2, r1
 800951c:	3243      	adds	r2, #67	; 0x43
 800951e:	9307      	str	r3, [sp, #28]
 8009520:	9005      	str	r0, [sp, #20]
 8009522:	9204      	str	r2, [sp, #16]
 8009524:	7e0a      	ldrb	r2, [r1, #24]
 8009526:	000c      	movs	r4, r1
 8009528:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800952a:	2a78      	cmp	r2, #120	; 0x78
 800952c:	d807      	bhi.n	800953e <_printf_i+0x2a>
 800952e:	2a62      	cmp	r2, #98	; 0x62
 8009530:	d809      	bhi.n	8009546 <_printf_i+0x32>
 8009532:	2a00      	cmp	r2, #0
 8009534:	d100      	bne.n	8009538 <_printf_i+0x24>
 8009536:	e0c1      	b.n	80096bc <_printf_i+0x1a8>
 8009538:	2a58      	cmp	r2, #88	; 0x58
 800953a:	d100      	bne.n	800953e <_printf_i+0x2a>
 800953c:	e08c      	b.n	8009658 <_printf_i+0x144>
 800953e:	0026      	movs	r6, r4
 8009540:	3642      	adds	r6, #66	; 0x42
 8009542:	7032      	strb	r2, [r6, #0]
 8009544:	e022      	b.n	800958c <_printf_i+0x78>
 8009546:	0010      	movs	r0, r2
 8009548:	3863      	subs	r0, #99	; 0x63
 800954a:	2815      	cmp	r0, #21
 800954c:	d8f7      	bhi.n	800953e <_printf_i+0x2a>
 800954e:	f7f6 fde3 	bl	8000118 <__gnu_thumb1_case_shi>
 8009552:	0016      	.short	0x0016
 8009554:	fff6001f 	.word	0xfff6001f
 8009558:	fff6fff6 	.word	0xfff6fff6
 800955c:	001ffff6 	.word	0x001ffff6
 8009560:	fff6fff6 	.word	0xfff6fff6
 8009564:	fff6fff6 	.word	0xfff6fff6
 8009568:	003600a8 	.word	0x003600a8
 800956c:	fff6009a 	.word	0xfff6009a
 8009570:	00b9fff6 	.word	0x00b9fff6
 8009574:	0036fff6 	.word	0x0036fff6
 8009578:	fff6fff6 	.word	0xfff6fff6
 800957c:	009e      	.short	0x009e
 800957e:	0026      	movs	r6, r4
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	3642      	adds	r6, #66	; 0x42
 8009584:	1d11      	adds	r1, r2, #4
 8009586:	6019      	str	r1, [r3, #0]
 8009588:	6813      	ldr	r3, [r2, #0]
 800958a:	7033      	strb	r3, [r6, #0]
 800958c:	2301      	movs	r3, #1
 800958e:	e0a7      	b.n	80096e0 <_printf_i+0x1cc>
 8009590:	6808      	ldr	r0, [r1, #0]
 8009592:	6819      	ldr	r1, [r3, #0]
 8009594:	1d0a      	adds	r2, r1, #4
 8009596:	0605      	lsls	r5, r0, #24
 8009598:	d50b      	bpl.n	80095b2 <_printf_i+0x9e>
 800959a:	680d      	ldr	r5, [r1, #0]
 800959c:	601a      	str	r2, [r3, #0]
 800959e:	2d00      	cmp	r5, #0
 80095a0:	da03      	bge.n	80095aa <_printf_i+0x96>
 80095a2:	232d      	movs	r3, #45	; 0x2d
 80095a4:	9a04      	ldr	r2, [sp, #16]
 80095a6:	426d      	negs	r5, r5
 80095a8:	7013      	strb	r3, [r2, #0]
 80095aa:	4b61      	ldr	r3, [pc, #388]	; (8009730 <_printf_i+0x21c>)
 80095ac:	270a      	movs	r7, #10
 80095ae:	9303      	str	r3, [sp, #12]
 80095b0:	e01b      	b.n	80095ea <_printf_i+0xd6>
 80095b2:	680d      	ldr	r5, [r1, #0]
 80095b4:	601a      	str	r2, [r3, #0]
 80095b6:	0641      	lsls	r1, r0, #25
 80095b8:	d5f1      	bpl.n	800959e <_printf_i+0x8a>
 80095ba:	b22d      	sxth	r5, r5
 80095bc:	e7ef      	b.n	800959e <_printf_i+0x8a>
 80095be:	680d      	ldr	r5, [r1, #0]
 80095c0:	6819      	ldr	r1, [r3, #0]
 80095c2:	1d08      	adds	r0, r1, #4
 80095c4:	6018      	str	r0, [r3, #0]
 80095c6:	062e      	lsls	r6, r5, #24
 80095c8:	d501      	bpl.n	80095ce <_printf_i+0xba>
 80095ca:	680d      	ldr	r5, [r1, #0]
 80095cc:	e003      	b.n	80095d6 <_printf_i+0xc2>
 80095ce:	066d      	lsls	r5, r5, #25
 80095d0:	d5fb      	bpl.n	80095ca <_printf_i+0xb6>
 80095d2:	680d      	ldr	r5, [r1, #0]
 80095d4:	b2ad      	uxth	r5, r5
 80095d6:	4b56      	ldr	r3, [pc, #344]	; (8009730 <_printf_i+0x21c>)
 80095d8:	2708      	movs	r7, #8
 80095da:	9303      	str	r3, [sp, #12]
 80095dc:	2a6f      	cmp	r2, #111	; 0x6f
 80095de:	d000      	beq.n	80095e2 <_printf_i+0xce>
 80095e0:	3702      	adds	r7, #2
 80095e2:	0023      	movs	r3, r4
 80095e4:	2200      	movs	r2, #0
 80095e6:	3343      	adds	r3, #67	; 0x43
 80095e8:	701a      	strb	r2, [r3, #0]
 80095ea:	6863      	ldr	r3, [r4, #4]
 80095ec:	60a3      	str	r3, [r4, #8]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	db03      	blt.n	80095fa <_printf_i+0xe6>
 80095f2:	2204      	movs	r2, #4
 80095f4:	6821      	ldr	r1, [r4, #0]
 80095f6:	4391      	bics	r1, r2
 80095f8:	6021      	str	r1, [r4, #0]
 80095fa:	2d00      	cmp	r5, #0
 80095fc:	d102      	bne.n	8009604 <_printf_i+0xf0>
 80095fe:	9e04      	ldr	r6, [sp, #16]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d00c      	beq.n	800961e <_printf_i+0x10a>
 8009604:	9e04      	ldr	r6, [sp, #16]
 8009606:	0028      	movs	r0, r5
 8009608:	0039      	movs	r1, r7
 800960a:	f7f6 fe15 	bl	8000238 <__aeabi_uidivmod>
 800960e:	9b03      	ldr	r3, [sp, #12]
 8009610:	3e01      	subs	r6, #1
 8009612:	5c5b      	ldrb	r3, [r3, r1]
 8009614:	7033      	strb	r3, [r6, #0]
 8009616:	002b      	movs	r3, r5
 8009618:	0005      	movs	r5, r0
 800961a:	429f      	cmp	r7, r3
 800961c:	d9f3      	bls.n	8009606 <_printf_i+0xf2>
 800961e:	2f08      	cmp	r7, #8
 8009620:	d109      	bne.n	8009636 <_printf_i+0x122>
 8009622:	6823      	ldr	r3, [r4, #0]
 8009624:	07db      	lsls	r3, r3, #31
 8009626:	d506      	bpl.n	8009636 <_printf_i+0x122>
 8009628:	6863      	ldr	r3, [r4, #4]
 800962a:	6922      	ldr	r2, [r4, #16]
 800962c:	4293      	cmp	r3, r2
 800962e:	dc02      	bgt.n	8009636 <_printf_i+0x122>
 8009630:	2330      	movs	r3, #48	; 0x30
 8009632:	3e01      	subs	r6, #1
 8009634:	7033      	strb	r3, [r6, #0]
 8009636:	9b04      	ldr	r3, [sp, #16]
 8009638:	1b9b      	subs	r3, r3, r6
 800963a:	6123      	str	r3, [r4, #16]
 800963c:	9b07      	ldr	r3, [sp, #28]
 800963e:	0021      	movs	r1, r4
 8009640:	9300      	str	r3, [sp, #0]
 8009642:	9805      	ldr	r0, [sp, #20]
 8009644:	9b06      	ldr	r3, [sp, #24]
 8009646:	aa09      	add	r2, sp, #36	; 0x24
 8009648:	f7ff fef4 	bl	8009434 <_printf_common>
 800964c:	1c43      	adds	r3, r0, #1
 800964e:	d14c      	bne.n	80096ea <_printf_i+0x1d6>
 8009650:	2001      	movs	r0, #1
 8009652:	4240      	negs	r0, r0
 8009654:	b00b      	add	sp, #44	; 0x2c
 8009656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009658:	3145      	adds	r1, #69	; 0x45
 800965a:	700a      	strb	r2, [r1, #0]
 800965c:	4a34      	ldr	r2, [pc, #208]	; (8009730 <_printf_i+0x21c>)
 800965e:	9203      	str	r2, [sp, #12]
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	6821      	ldr	r1, [r4, #0]
 8009664:	ca20      	ldmia	r2!, {r5}
 8009666:	601a      	str	r2, [r3, #0]
 8009668:	0608      	lsls	r0, r1, #24
 800966a:	d516      	bpl.n	800969a <_printf_i+0x186>
 800966c:	07cb      	lsls	r3, r1, #31
 800966e:	d502      	bpl.n	8009676 <_printf_i+0x162>
 8009670:	2320      	movs	r3, #32
 8009672:	4319      	orrs	r1, r3
 8009674:	6021      	str	r1, [r4, #0]
 8009676:	2710      	movs	r7, #16
 8009678:	2d00      	cmp	r5, #0
 800967a:	d1b2      	bne.n	80095e2 <_printf_i+0xce>
 800967c:	2320      	movs	r3, #32
 800967e:	6822      	ldr	r2, [r4, #0]
 8009680:	439a      	bics	r2, r3
 8009682:	6022      	str	r2, [r4, #0]
 8009684:	e7ad      	b.n	80095e2 <_printf_i+0xce>
 8009686:	2220      	movs	r2, #32
 8009688:	6809      	ldr	r1, [r1, #0]
 800968a:	430a      	orrs	r2, r1
 800968c:	6022      	str	r2, [r4, #0]
 800968e:	0022      	movs	r2, r4
 8009690:	2178      	movs	r1, #120	; 0x78
 8009692:	3245      	adds	r2, #69	; 0x45
 8009694:	7011      	strb	r1, [r2, #0]
 8009696:	4a27      	ldr	r2, [pc, #156]	; (8009734 <_printf_i+0x220>)
 8009698:	e7e1      	b.n	800965e <_printf_i+0x14a>
 800969a:	0648      	lsls	r0, r1, #25
 800969c:	d5e6      	bpl.n	800966c <_printf_i+0x158>
 800969e:	b2ad      	uxth	r5, r5
 80096a0:	e7e4      	b.n	800966c <_printf_i+0x158>
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	680d      	ldr	r5, [r1, #0]
 80096a6:	1d10      	adds	r0, r2, #4
 80096a8:	6949      	ldr	r1, [r1, #20]
 80096aa:	6018      	str	r0, [r3, #0]
 80096ac:	6813      	ldr	r3, [r2, #0]
 80096ae:	062e      	lsls	r6, r5, #24
 80096b0:	d501      	bpl.n	80096b6 <_printf_i+0x1a2>
 80096b2:	6019      	str	r1, [r3, #0]
 80096b4:	e002      	b.n	80096bc <_printf_i+0x1a8>
 80096b6:	066d      	lsls	r5, r5, #25
 80096b8:	d5fb      	bpl.n	80096b2 <_printf_i+0x19e>
 80096ba:	8019      	strh	r1, [r3, #0]
 80096bc:	2300      	movs	r3, #0
 80096be:	9e04      	ldr	r6, [sp, #16]
 80096c0:	6123      	str	r3, [r4, #16]
 80096c2:	e7bb      	b.n	800963c <_printf_i+0x128>
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	1d11      	adds	r1, r2, #4
 80096c8:	6019      	str	r1, [r3, #0]
 80096ca:	6816      	ldr	r6, [r2, #0]
 80096cc:	2100      	movs	r1, #0
 80096ce:	0030      	movs	r0, r6
 80096d0:	6862      	ldr	r2, [r4, #4]
 80096d2:	f000 f831 	bl	8009738 <memchr>
 80096d6:	2800      	cmp	r0, #0
 80096d8:	d001      	beq.n	80096de <_printf_i+0x1ca>
 80096da:	1b80      	subs	r0, r0, r6
 80096dc:	6060      	str	r0, [r4, #4]
 80096de:	6863      	ldr	r3, [r4, #4]
 80096e0:	6123      	str	r3, [r4, #16]
 80096e2:	2300      	movs	r3, #0
 80096e4:	9a04      	ldr	r2, [sp, #16]
 80096e6:	7013      	strb	r3, [r2, #0]
 80096e8:	e7a8      	b.n	800963c <_printf_i+0x128>
 80096ea:	6923      	ldr	r3, [r4, #16]
 80096ec:	0032      	movs	r2, r6
 80096ee:	9906      	ldr	r1, [sp, #24]
 80096f0:	9805      	ldr	r0, [sp, #20]
 80096f2:	9d07      	ldr	r5, [sp, #28]
 80096f4:	47a8      	blx	r5
 80096f6:	1c43      	adds	r3, r0, #1
 80096f8:	d0aa      	beq.n	8009650 <_printf_i+0x13c>
 80096fa:	6823      	ldr	r3, [r4, #0]
 80096fc:	079b      	lsls	r3, r3, #30
 80096fe:	d415      	bmi.n	800972c <_printf_i+0x218>
 8009700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009702:	68e0      	ldr	r0, [r4, #12]
 8009704:	4298      	cmp	r0, r3
 8009706:	daa5      	bge.n	8009654 <_printf_i+0x140>
 8009708:	0018      	movs	r0, r3
 800970a:	e7a3      	b.n	8009654 <_printf_i+0x140>
 800970c:	0022      	movs	r2, r4
 800970e:	2301      	movs	r3, #1
 8009710:	9906      	ldr	r1, [sp, #24]
 8009712:	9805      	ldr	r0, [sp, #20]
 8009714:	9e07      	ldr	r6, [sp, #28]
 8009716:	3219      	adds	r2, #25
 8009718:	47b0      	blx	r6
 800971a:	1c43      	adds	r3, r0, #1
 800971c:	d098      	beq.n	8009650 <_printf_i+0x13c>
 800971e:	3501      	adds	r5, #1
 8009720:	68e3      	ldr	r3, [r4, #12]
 8009722:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009724:	1a9b      	subs	r3, r3, r2
 8009726:	42ab      	cmp	r3, r5
 8009728:	dcf0      	bgt.n	800970c <_printf_i+0x1f8>
 800972a:	e7e9      	b.n	8009700 <_printf_i+0x1ec>
 800972c:	2500      	movs	r5, #0
 800972e:	e7f7      	b.n	8009720 <_printf_i+0x20c>
 8009730:	0800a2f2 	.word	0x0800a2f2
 8009734:	0800a303 	.word	0x0800a303

08009738 <memchr>:
 8009738:	b2c9      	uxtb	r1, r1
 800973a:	1882      	adds	r2, r0, r2
 800973c:	4290      	cmp	r0, r2
 800973e:	d101      	bne.n	8009744 <memchr+0xc>
 8009740:	2000      	movs	r0, #0
 8009742:	4770      	bx	lr
 8009744:	7803      	ldrb	r3, [r0, #0]
 8009746:	428b      	cmp	r3, r1
 8009748:	d0fb      	beq.n	8009742 <memchr+0xa>
 800974a:	3001      	adds	r0, #1
 800974c:	e7f6      	b.n	800973c <memchr+0x4>

0800974e <memmove>:
 800974e:	b510      	push	{r4, lr}
 8009750:	4288      	cmp	r0, r1
 8009752:	d902      	bls.n	800975a <memmove+0xc>
 8009754:	188b      	adds	r3, r1, r2
 8009756:	4298      	cmp	r0, r3
 8009758:	d303      	bcc.n	8009762 <memmove+0x14>
 800975a:	2300      	movs	r3, #0
 800975c:	e007      	b.n	800976e <memmove+0x20>
 800975e:	5c8b      	ldrb	r3, [r1, r2]
 8009760:	5483      	strb	r3, [r0, r2]
 8009762:	3a01      	subs	r2, #1
 8009764:	d2fb      	bcs.n	800975e <memmove+0x10>
 8009766:	bd10      	pop	{r4, pc}
 8009768:	5ccc      	ldrb	r4, [r1, r3]
 800976a:	54c4      	strb	r4, [r0, r3]
 800976c:	3301      	adds	r3, #1
 800976e:	429a      	cmp	r2, r3
 8009770:	d1fa      	bne.n	8009768 <memmove+0x1a>
 8009772:	e7f8      	b.n	8009766 <memmove+0x18>

08009774 <_free_r>:
 8009774:	b570      	push	{r4, r5, r6, lr}
 8009776:	0005      	movs	r5, r0
 8009778:	2900      	cmp	r1, #0
 800977a:	d010      	beq.n	800979e <_free_r+0x2a>
 800977c:	1f0c      	subs	r4, r1, #4
 800977e:	6823      	ldr	r3, [r4, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	da00      	bge.n	8009786 <_free_r+0x12>
 8009784:	18e4      	adds	r4, r4, r3
 8009786:	0028      	movs	r0, r5
 8009788:	f000 f918 	bl	80099bc <__malloc_lock>
 800978c:	4a1d      	ldr	r2, [pc, #116]	; (8009804 <_free_r+0x90>)
 800978e:	6813      	ldr	r3, [r2, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d105      	bne.n	80097a0 <_free_r+0x2c>
 8009794:	6063      	str	r3, [r4, #4]
 8009796:	6014      	str	r4, [r2, #0]
 8009798:	0028      	movs	r0, r5
 800979a:	f000 f917 	bl	80099cc <__malloc_unlock>
 800979e:	bd70      	pop	{r4, r5, r6, pc}
 80097a0:	42a3      	cmp	r3, r4
 80097a2:	d908      	bls.n	80097b6 <_free_r+0x42>
 80097a4:	6821      	ldr	r1, [r4, #0]
 80097a6:	1860      	adds	r0, r4, r1
 80097a8:	4283      	cmp	r3, r0
 80097aa:	d1f3      	bne.n	8009794 <_free_r+0x20>
 80097ac:	6818      	ldr	r0, [r3, #0]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	1841      	adds	r1, r0, r1
 80097b2:	6021      	str	r1, [r4, #0]
 80097b4:	e7ee      	b.n	8009794 <_free_r+0x20>
 80097b6:	001a      	movs	r2, r3
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d001      	beq.n	80097c2 <_free_r+0x4e>
 80097be:	42a3      	cmp	r3, r4
 80097c0:	d9f9      	bls.n	80097b6 <_free_r+0x42>
 80097c2:	6811      	ldr	r1, [r2, #0]
 80097c4:	1850      	adds	r0, r2, r1
 80097c6:	42a0      	cmp	r0, r4
 80097c8:	d10b      	bne.n	80097e2 <_free_r+0x6e>
 80097ca:	6820      	ldr	r0, [r4, #0]
 80097cc:	1809      	adds	r1, r1, r0
 80097ce:	1850      	adds	r0, r2, r1
 80097d0:	6011      	str	r1, [r2, #0]
 80097d2:	4283      	cmp	r3, r0
 80097d4:	d1e0      	bne.n	8009798 <_free_r+0x24>
 80097d6:	6818      	ldr	r0, [r3, #0]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	1841      	adds	r1, r0, r1
 80097dc:	6011      	str	r1, [r2, #0]
 80097de:	6053      	str	r3, [r2, #4]
 80097e0:	e7da      	b.n	8009798 <_free_r+0x24>
 80097e2:	42a0      	cmp	r0, r4
 80097e4:	d902      	bls.n	80097ec <_free_r+0x78>
 80097e6:	230c      	movs	r3, #12
 80097e8:	602b      	str	r3, [r5, #0]
 80097ea:	e7d5      	b.n	8009798 <_free_r+0x24>
 80097ec:	6821      	ldr	r1, [r4, #0]
 80097ee:	1860      	adds	r0, r4, r1
 80097f0:	4283      	cmp	r3, r0
 80097f2:	d103      	bne.n	80097fc <_free_r+0x88>
 80097f4:	6818      	ldr	r0, [r3, #0]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	1841      	adds	r1, r0, r1
 80097fa:	6021      	str	r1, [r4, #0]
 80097fc:	6063      	str	r3, [r4, #4]
 80097fe:	6054      	str	r4, [r2, #4]
 8009800:	e7ca      	b.n	8009798 <_free_r+0x24>
 8009802:	46c0      	nop			; (mov r8, r8)
 8009804:	20000414 	.word	0x20000414

08009808 <sbrk_aligned>:
 8009808:	b570      	push	{r4, r5, r6, lr}
 800980a:	4e0f      	ldr	r6, [pc, #60]	; (8009848 <sbrk_aligned+0x40>)
 800980c:	000d      	movs	r5, r1
 800980e:	6831      	ldr	r1, [r6, #0]
 8009810:	0004      	movs	r4, r0
 8009812:	2900      	cmp	r1, #0
 8009814:	d102      	bne.n	800981c <sbrk_aligned+0x14>
 8009816:	f000 f8bf 	bl	8009998 <_sbrk_r>
 800981a:	6030      	str	r0, [r6, #0]
 800981c:	0029      	movs	r1, r5
 800981e:	0020      	movs	r0, r4
 8009820:	f000 f8ba 	bl	8009998 <_sbrk_r>
 8009824:	1c43      	adds	r3, r0, #1
 8009826:	d00a      	beq.n	800983e <sbrk_aligned+0x36>
 8009828:	2303      	movs	r3, #3
 800982a:	1cc5      	adds	r5, r0, #3
 800982c:	439d      	bics	r5, r3
 800982e:	42a8      	cmp	r0, r5
 8009830:	d007      	beq.n	8009842 <sbrk_aligned+0x3a>
 8009832:	1a29      	subs	r1, r5, r0
 8009834:	0020      	movs	r0, r4
 8009836:	f000 f8af 	bl	8009998 <_sbrk_r>
 800983a:	1c43      	adds	r3, r0, #1
 800983c:	d101      	bne.n	8009842 <sbrk_aligned+0x3a>
 800983e:	2501      	movs	r5, #1
 8009840:	426d      	negs	r5, r5
 8009842:	0028      	movs	r0, r5
 8009844:	bd70      	pop	{r4, r5, r6, pc}
 8009846:	46c0      	nop			; (mov r8, r8)
 8009848:	20000418 	.word	0x20000418

0800984c <_malloc_r>:
 800984c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800984e:	2203      	movs	r2, #3
 8009850:	1ccb      	adds	r3, r1, #3
 8009852:	4393      	bics	r3, r2
 8009854:	3308      	adds	r3, #8
 8009856:	0006      	movs	r6, r0
 8009858:	001f      	movs	r7, r3
 800985a:	2b0c      	cmp	r3, #12
 800985c:	d232      	bcs.n	80098c4 <_malloc_r+0x78>
 800985e:	270c      	movs	r7, #12
 8009860:	42b9      	cmp	r1, r7
 8009862:	d831      	bhi.n	80098c8 <_malloc_r+0x7c>
 8009864:	0030      	movs	r0, r6
 8009866:	f000 f8a9 	bl	80099bc <__malloc_lock>
 800986a:	4d32      	ldr	r5, [pc, #200]	; (8009934 <_malloc_r+0xe8>)
 800986c:	682b      	ldr	r3, [r5, #0]
 800986e:	001c      	movs	r4, r3
 8009870:	2c00      	cmp	r4, #0
 8009872:	d12e      	bne.n	80098d2 <_malloc_r+0x86>
 8009874:	0039      	movs	r1, r7
 8009876:	0030      	movs	r0, r6
 8009878:	f7ff ffc6 	bl	8009808 <sbrk_aligned>
 800987c:	0004      	movs	r4, r0
 800987e:	1c43      	adds	r3, r0, #1
 8009880:	d11e      	bne.n	80098c0 <_malloc_r+0x74>
 8009882:	682c      	ldr	r4, [r5, #0]
 8009884:	0025      	movs	r5, r4
 8009886:	2d00      	cmp	r5, #0
 8009888:	d14a      	bne.n	8009920 <_malloc_r+0xd4>
 800988a:	6823      	ldr	r3, [r4, #0]
 800988c:	0029      	movs	r1, r5
 800988e:	18e3      	adds	r3, r4, r3
 8009890:	0030      	movs	r0, r6
 8009892:	9301      	str	r3, [sp, #4]
 8009894:	f000 f880 	bl	8009998 <_sbrk_r>
 8009898:	9b01      	ldr	r3, [sp, #4]
 800989a:	4283      	cmp	r3, r0
 800989c:	d143      	bne.n	8009926 <_malloc_r+0xda>
 800989e:	6823      	ldr	r3, [r4, #0]
 80098a0:	3703      	adds	r7, #3
 80098a2:	1aff      	subs	r7, r7, r3
 80098a4:	2303      	movs	r3, #3
 80098a6:	439f      	bics	r7, r3
 80098a8:	3708      	adds	r7, #8
 80098aa:	2f0c      	cmp	r7, #12
 80098ac:	d200      	bcs.n	80098b0 <_malloc_r+0x64>
 80098ae:	270c      	movs	r7, #12
 80098b0:	0039      	movs	r1, r7
 80098b2:	0030      	movs	r0, r6
 80098b4:	f7ff ffa8 	bl	8009808 <sbrk_aligned>
 80098b8:	1c43      	adds	r3, r0, #1
 80098ba:	d034      	beq.n	8009926 <_malloc_r+0xda>
 80098bc:	6823      	ldr	r3, [r4, #0]
 80098be:	19df      	adds	r7, r3, r7
 80098c0:	6027      	str	r7, [r4, #0]
 80098c2:	e013      	b.n	80098ec <_malloc_r+0xa0>
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	dacb      	bge.n	8009860 <_malloc_r+0x14>
 80098c8:	230c      	movs	r3, #12
 80098ca:	2500      	movs	r5, #0
 80098cc:	6033      	str	r3, [r6, #0]
 80098ce:	0028      	movs	r0, r5
 80098d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80098d2:	6822      	ldr	r2, [r4, #0]
 80098d4:	1bd1      	subs	r1, r2, r7
 80098d6:	d420      	bmi.n	800991a <_malloc_r+0xce>
 80098d8:	290b      	cmp	r1, #11
 80098da:	d917      	bls.n	800990c <_malloc_r+0xc0>
 80098dc:	19e2      	adds	r2, r4, r7
 80098de:	6027      	str	r7, [r4, #0]
 80098e0:	42a3      	cmp	r3, r4
 80098e2:	d111      	bne.n	8009908 <_malloc_r+0xbc>
 80098e4:	602a      	str	r2, [r5, #0]
 80098e6:	6863      	ldr	r3, [r4, #4]
 80098e8:	6011      	str	r1, [r2, #0]
 80098ea:	6053      	str	r3, [r2, #4]
 80098ec:	0030      	movs	r0, r6
 80098ee:	0025      	movs	r5, r4
 80098f0:	f000 f86c 	bl	80099cc <__malloc_unlock>
 80098f4:	2207      	movs	r2, #7
 80098f6:	350b      	adds	r5, #11
 80098f8:	1d23      	adds	r3, r4, #4
 80098fa:	4395      	bics	r5, r2
 80098fc:	1aea      	subs	r2, r5, r3
 80098fe:	429d      	cmp	r5, r3
 8009900:	d0e5      	beq.n	80098ce <_malloc_r+0x82>
 8009902:	1b5b      	subs	r3, r3, r5
 8009904:	50a3      	str	r3, [r4, r2]
 8009906:	e7e2      	b.n	80098ce <_malloc_r+0x82>
 8009908:	605a      	str	r2, [r3, #4]
 800990a:	e7ec      	b.n	80098e6 <_malloc_r+0x9a>
 800990c:	6862      	ldr	r2, [r4, #4]
 800990e:	42a3      	cmp	r3, r4
 8009910:	d101      	bne.n	8009916 <_malloc_r+0xca>
 8009912:	602a      	str	r2, [r5, #0]
 8009914:	e7ea      	b.n	80098ec <_malloc_r+0xa0>
 8009916:	605a      	str	r2, [r3, #4]
 8009918:	e7e8      	b.n	80098ec <_malloc_r+0xa0>
 800991a:	0023      	movs	r3, r4
 800991c:	6864      	ldr	r4, [r4, #4]
 800991e:	e7a7      	b.n	8009870 <_malloc_r+0x24>
 8009920:	002c      	movs	r4, r5
 8009922:	686d      	ldr	r5, [r5, #4]
 8009924:	e7af      	b.n	8009886 <_malloc_r+0x3a>
 8009926:	230c      	movs	r3, #12
 8009928:	0030      	movs	r0, r6
 800992a:	6033      	str	r3, [r6, #0]
 800992c:	f000 f84e 	bl	80099cc <__malloc_unlock>
 8009930:	e7cd      	b.n	80098ce <_malloc_r+0x82>
 8009932:	46c0      	nop			; (mov r8, r8)
 8009934:	20000414 	.word	0x20000414

08009938 <_realloc_r>:
 8009938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800993a:	0007      	movs	r7, r0
 800993c:	000e      	movs	r6, r1
 800993e:	0014      	movs	r4, r2
 8009940:	2900      	cmp	r1, #0
 8009942:	d105      	bne.n	8009950 <_realloc_r+0x18>
 8009944:	0011      	movs	r1, r2
 8009946:	f7ff ff81 	bl	800984c <_malloc_r>
 800994a:	0005      	movs	r5, r0
 800994c:	0028      	movs	r0, r5
 800994e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009950:	2a00      	cmp	r2, #0
 8009952:	d103      	bne.n	800995c <_realloc_r+0x24>
 8009954:	f7ff ff0e 	bl	8009774 <_free_r>
 8009958:	0025      	movs	r5, r4
 800995a:	e7f7      	b.n	800994c <_realloc_r+0x14>
 800995c:	f000 f83e 	bl	80099dc <_malloc_usable_size_r>
 8009960:	9001      	str	r0, [sp, #4]
 8009962:	4284      	cmp	r4, r0
 8009964:	d803      	bhi.n	800996e <_realloc_r+0x36>
 8009966:	0035      	movs	r5, r6
 8009968:	0843      	lsrs	r3, r0, #1
 800996a:	42a3      	cmp	r3, r4
 800996c:	d3ee      	bcc.n	800994c <_realloc_r+0x14>
 800996e:	0021      	movs	r1, r4
 8009970:	0038      	movs	r0, r7
 8009972:	f7ff ff6b 	bl	800984c <_malloc_r>
 8009976:	1e05      	subs	r5, r0, #0
 8009978:	d0e8      	beq.n	800994c <_realloc_r+0x14>
 800997a:	9b01      	ldr	r3, [sp, #4]
 800997c:	0022      	movs	r2, r4
 800997e:	429c      	cmp	r4, r3
 8009980:	d900      	bls.n	8009984 <_realloc_r+0x4c>
 8009982:	001a      	movs	r2, r3
 8009984:	0031      	movs	r1, r6
 8009986:	0028      	movs	r0, r5
 8009988:	f7ff fb0a 	bl	8008fa0 <memcpy>
 800998c:	0031      	movs	r1, r6
 800998e:	0038      	movs	r0, r7
 8009990:	f7ff fef0 	bl	8009774 <_free_r>
 8009994:	e7da      	b.n	800994c <_realloc_r+0x14>
	...

08009998 <_sbrk_r>:
 8009998:	2300      	movs	r3, #0
 800999a:	b570      	push	{r4, r5, r6, lr}
 800999c:	4d06      	ldr	r5, [pc, #24]	; (80099b8 <_sbrk_r+0x20>)
 800999e:	0004      	movs	r4, r0
 80099a0:	0008      	movs	r0, r1
 80099a2:	602b      	str	r3, [r5, #0]
 80099a4:	f7f9 ff26 	bl	80037f4 <_sbrk>
 80099a8:	1c43      	adds	r3, r0, #1
 80099aa:	d103      	bne.n	80099b4 <_sbrk_r+0x1c>
 80099ac:	682b      	ldr	r3, [r5, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d000      	beq.n	80099b4 <_sbrk_r+0x1c>
 80099b2:	6023      	str	r3, [r4, #0]
 80099b4:	bd70      	pop	{r4, r5, r6, pc}
 80099b6:	46c0      	nop			; (mov r8, r8)
 80099b8:	2000041c 	.word	0x2000041c

080099bc <__malloc_lock>:
 80099bc:	b510      	push	{r4, lr}
 80099be:	4802      	ldr	r0, [pc, #8]	; (80099c8 <__malloc_lock+0xc>)
 80099c0:	f000 f814 	bl	80099ec <__retarget_lock_acquire_recursive>
 80099c4:	bd10      	pop	{r4, pc}
 80099c6:	46c0      	nop			; (mov r8, r8)
 80099c8:	20000420 	.word	0x20000420

080099cc <__malloc_unlock>:
 80099cc:	b510      	push	{r4, lr}
 80099ce:	4802      	ldr	r0, [pc, #8]	; (80099d8 <__malloc_unlock+0xc>)
 80099d0:	f000 f80d 	bl	80099ee <__retarget_lock_release_recursive>
 80099d4:	bd10      	pop	{r4, pc}
 80099d6:	46c0      	nop			; (mov r8, r8)
 80099d8:	20000420 	.word	0x20000420

080099dc <_malloc_usable_size_r>:
 80099dc:	1f0b      	subs	r3, r1, #4
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	1f18      	subs	r0, r3, #4
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	da01      	bge.n	80099ea <_malloc_usable_size_r+0xe>
 80099e6:	580b      	ldr	r3, [r1, r0]
 80099e8:	18c0      	adds	r0, r0, r3
 80099ea:	4770      	bx	lr

080099ec <__retarget_lock_acquire_recursive>:
 80099ec:	4770      	bx	lr

080099ee <__retarget_lock_release_recursive>:
 80099ee:	4770      	bx	lr

080099f0 <_init>:
 80099f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099f2:	46c0      	nop			; (mov r8, r8)
 80099f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099f6:	bc08      	pop	{r3}
 80099f8:	469e      	mov	lr, r3
 80099fa:	4770      	bx	lr

080099fc <_fini>:
 80099fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fe:	46c0      	nop			; (mov r8, r8)
 8009a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a02:	bc08      	pop	{r3}
 8009a04:	469e      	mov	lr, r3
 8009a06:	4770      	bx	lr
