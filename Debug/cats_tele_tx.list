
cats_tele_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b63c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab4  0800b6f8  0800b6f8  0001b6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1ac  0800c1ac  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1ac  0800c1ac  0001c1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1b4  0800c1b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0800c1b4  0800c1b4  0001c1b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1c8  0800c1c8  0001c1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800c1cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000620  20000070  0800c23c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000690  0800c23c  00020690  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031d78  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005973  00000000  00000000  00051e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001910  00000000  00000000  00057788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001780  00000000  00000000  00059098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e80b  00000000  00000000  0005a818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ee35  00000000  00000000  00079023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4597  00000000  00000000  00097e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014c3ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060f8  00000000  00000000  0014c444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800b6e0 	.word	0x0800b6e0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	0800b6e0 	.word	0x0800b6e0

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f001 f81f 	bl	800146c <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 ff69 	bl	8001310 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f811 	bl	800146c <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f807 	bl	800146c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff8b 	bl	8001388 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff81 	bl	8001388 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_uldivmod>:
 8000494:	2b00      	cmp	r3, #0
 8000496:	d111      	bne.n	80004bc <__aeabi_uldivmod+0x28>
 8000498:	2a00      	cmp	r2, #0
 800049a:	d10f      	bne.n	80004bc <__aeabi_uldivmod+0x28>
 800049c:	2900      	cmp	r1, #0
 800049e:	d100      	bne.n	80004a2 <__aeabi_uldivmod+0xe>
 80004a0:	2800      	cmp	r0, #0
 80004a2:	d002      	beq.n	80004aa <__aeabi_uldivmod+0x16>
 80004a4:	2100      	movs	r1, #0
 80004a6:	43c9      	mvns	r1, r1
 80004a8:	1c08      	adds	r0, r1, #0
 80004aa:	b407      	push	{r0, r1, r2}
 80004ac:	4802      	ldr	r0, [pc, #8]	; (80004b8 <__aeabi_uldivmod+0x24>)
 80004ae:	a102      	add	r1, pc, #8	; (adr r1, 80004b8 <__aeabi_uldivmod+0x24>)
 80004b0:	1840      	adds	r0, r0, r1
 80004b2:	9002      	str	r0, [sp, #8]
 80004b4:	bd03      	pop	{r0, r1, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	ffffff5d 	.word	0xffffff5d
 80004bc:	b403      	push	{r0, r1}
 80004be:	4668      	mov	r0, sp
 80004c0:	b501      	push	{r0, lr}
 80004c2:	9802      	ldr	r0, [sp, #8]
 80004c4:	f000 f806 	bl	80004d4 <__udivmoddi4>
 80004c8:	9b01      	ldr	r3, [sp, #4]
 80004ca:	469e      	mov	lr, r3
 80004cc:	b002      	add	sp, #8
 80004ce:	bc0c      	pop	{r2, r3}
 80004d0:	4770      	bx	lr
 80004d2:	46c0      	nop			; (mov r8, r8)

080004d4 <__udivmoddi4>:
 80004d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d6:	4657      	mov	r7, sl
 80004d8:	464e      	mov	r6, r9
 80004da:	4645      	mov	r5, r8
 80004dc:	46de      	mov	lr, fp
 80004de:	b5e0      	push	{r5, r6, r7, lr}
 80004e0:	0004      	movs	r4, r0
 80004e2:	000d      	movs	r5, r1
 80004e4:	4692      	mov	sl, r2
 80004e6:	4699      	mov	r9, r3
 80004e8:	b083      	sub	sp, #12
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d830      	bhi.n	8000550 <__udivmoddi4+0x7c>
 80004ee:	d02d      	beq.n	800054c <__udivmoddi4+0x78>
 80004f0:	4649      	mov	r1, r9
 80004f2:	4650      	mov	r0, sl
 80004f4:	f001 f89e 	bl	8001634 <__clzdi2>
 80004f8:	0029      	movs	r1, r5
 80004fa:	0006      	movs	r6, r0
 80004fc:	0020      	movs	r0, r4
 80004fe:	f001 f899 	bl	8001634 <__clzdi2>
 8000502:	1a33      	subs	r3, r6, r0
 8000504:	4698      	mov	r8, r3
 8000506:	3b20      	subs	r3, #32
 8000508:	469b      	mov	fp, r3
 800050a:	d433      	bmi.n	8000574 <__udivmoddi4+0xa0>
 800050c:	465a      	mov	r2, fp
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	4642      	mov	r2, r8
 8000514:	001f      	movs	r7, r3
 8000516:	4653      	mov	r3, sl
 8000518:	4093      	lsls	r3, r2
 800051a:	001e      	movs	r6, r3
 800051c:	42af      	cmp	r7, r5
 800051e:	d83a      	bhi.n	8000596 <__udivmoddi4+0xc2>
 8000520:	42af      	cmp	r7, r5
 8000522:	d100      	bne.n	8000526 <__udivmoddi4+0x52>
 8000524:	e078      	b.n	8000618 <__udivmoddi4+0x144>
 8000526:	465b      	mov	r3, fp
 8000528:	1ba4      	subs	r4, r4, r6
 800052a:	41bd      	sbcs	r5, r7
 800052c:	2b00      	cmp	r3, #0
 800052e:	da00      	bge.n	8000532 <__udivmoddi4+0x5e>
 8000530:	e075      	b.n	800061e <__udivmoddi4+0x14a>
 8000532:	2200      	movs	r2, #0
 8000534:	2300      	movs	r3, #0
 8000536:	9200      	str	r2, [sp, #0]
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	2301      	movs	r3, #1
 800053c:	465a      	mov	r2, fp
 800053e:	4093      	lsls	r3, r2
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	2301      	movs	r3, #1
 8000544:	4642      	mov	r2, r8
 8000546:	4093      	lsls	r3, r2
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	e028      	b.n	800059e <__udivmoddi4+0xca>
 800054c:	4282      	cmp	r2, r0
 800054e:	d9cf      	bls.n	80004f0 <__udivmoddi4+0x1c>
 8000550:	2200      	movs	r2, #0
 8000552:	2300      	movs	r3, #0
 8000554:	9200      	str	r2, [sp, #0]
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <__udivmoddi4+0x8e>
 800055e:	601c      	str	r4, [r3, #0]
 8000560:	605d      	str	r5, [r3, #4]
 8000562:	9800      	ldr	r0, [sp, #0]
 8000564:	9901      	ldr	r1, [sp, #4]
 8000566:	b003      	add	sp, #12
 8000568:	bcf0      	pop	{r4, r5, r6, r7}
 800056a:	46bb      	mov	fp, r7
 800056c:	46b2      	mov	sl, r6
 800056e:	46a9      	mov	r9, r5
 8000570:	46a0      	mov	r8, r4
 8000572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000574:	4642      	mov	r2, r8
 8000576:	2320      	movs	r3, #32
 8000578:	1a9b      	subs	r3, r3, r2
 800057a:	4652      	mov	r2, sl
 800057c:	40da      	lsrs	r2, r3
 800057e:	4641      	mov	r1, r8
 8000580:	0013      	movs	r3, r2
 8000582:	464a      	mov	r2, r9
 8000584:	408a      	lsls	r2, r1
 8000586:	0017      	movs	r7, r2
 8000588:	4642      	mov	r2, r8
 800058a:	431f      	orrs	r7, r3
 800058c:	4653      	mov	r3, sl
 800058e:	4093      	lsls	r3, r2
 8000590:	001e      	movs	r6, r3
 8000592:	42af      	cmp	r7, r5
 8000594:	d9c4      	bls.n	8000520 <__udivmoddi4+0x4c>
 8000596:	2200      	movs	r2, #0
 8000598:	2300      	movs	r3, #0
 800059a:	9200      	str	r2, [sp, #0]
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	4643      	mov	r3, r8
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d0d9      	beq.n	8000558 <__udivmoddi4+0x84>
 80005a4:	07fb      	lsls	r3, r7, #31
 80005a6:	0872      	lsrs	r2, r6, #1
 80005a8:	431a      	orrs	r2, r3
 80005aa:	4646      	mov	r6, r8
 80005ac:	087b      	lsrs	r3, r7, #1
 80005ae:	e00e      	b.n	80005ce <__udivmoddi4+0xfa>
 80005b0:	42ab      	cmp	r3, r5
 80005b2:	d101      	bne.n	80005b8 <__udivmoddi4+0xe4>
 80005b4:	42a2      	cmp	r2, r4
 80005b6:	d80c      	bhi.n	80005d2 <__udivmoddi4+0xfe>
 80005b8:	1aa4      	subs	r4, r4, r2
 80005ba:	419d      	sbcs	r5, r3
 80005bc:	2001      	movs	r0, #1
 80005be:	1924      	adds	r4, r4, r4
 80005c0:	416d      	adcs	r5, r5
 80005c2:	2100      	movs	r1, #0
 80005c4:	3e01      	subs	r6, #1
 80005c6:	1824      	adds	r4, r4, r0
 80005c8:	414d      	adcs	r5, r1
 80005ca:	2e00      	cmp	r6, #0
 80005cc:	d006      	beq.n	80005dc <__udivmoddi4+0x108>
 80005ce:	42ab      	cmp	r3, r5
 80005d0:	d9ee      	bls.n	80005b0 <__udivmoddi4+0xdc>
 80005d2:	3e01      	subs	r6, #1
 80005d4:	1924      	adds	r4, r4, r4
 80005d6:	416d      	adcs	r5, r5
 80005d8:	2e00      	cmp	r6, #0
 80005da:	d1f8      	bne.n	80005ce <__udivmoddi4+0xfa>
 80005dc:	9800      	ldr	r0, [sp, #0]
 80005de:	9901      	ldr	r1, [sp, #4]
 80005e0:	465b      	mov	r3, fp
 80005e2:	1900      	adds	r0, r0, r4
 80005e4:	4169      	adcs	r1, r5
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	db24      	blt.n	8000634 <__udivmoddi4+0x160>
 80005ea:	002b      	movs	r3, r5
 80005ec:	465a      	mov	r2, fp
 80005ee:	4644      	mov	r4, r8
 80005f0:	40d3      	lsrs	r3, r2
 80005f2:	002a      	movs	r2, r5
 80005f4:	40e2      	lsrs	r2, r4
 80005f6:	001c      	movs	r4, r3
 80005f8:	465b      	mov	r3, fp
 80005fa:	0015      	movs	r5, r2
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db2a      	blt.n	8000656 <__udivmoddi4+0x182>
 8000600:	0026      	movs	r6, r4
 8000602:	409e      	lsls	r6, r3
 8000604:	0033      	movs	r3, r6
 8000606:	0026      	movs	r6, r4
 8000608:	4647      	mov	r7, r8
 800060a:	40be      	lsls	r6, r7
 800060c:	0032      	movs	r2, r6
 800060e:	1a80      	subs	r0, r0, r2
 8000610:	4199      	sbcs	r1, r3
 8000612:	9000      	str	r0, [sp, #0]
 8000614:	9101      	str	r1, [sp, #4]
 8000616:	e79f      	b.n	8000558 <__udivmoddi4+0x84>
 8000618:	42a3      	cmp	r3, r4
 800061a:	d8bc      	bhi.n	8000596 <__udivmoddi4+0xc2>
 800061c:	e783      	b.n	8000526 <__udivmoddi4+0x52>
 800061e:	4642      	mov	r2, r8
 8000620:	2320      	movs	r3, #32
 8000622:	2100      	movs	r1, #0
 8000624:	1a9b      	subs	r3, r3, r2
 8000626:	2200      	movs	r2, #0
 8000628:	9100      	str	r1, [sp, #0]
 800062a:	9201      	str	r2, [sp, #4]
 800062c:	2201      	movs	r2, #1
 800062e:	40da      	lsrs	r2, r3
 8000630:	9201      	str	r2, [sp, #4]
 8000632:	e786      	b.n	8000542 <__udivmoddi4+0x6e>
 8000634:	4642      	mov	r2, r8
 8000636:	2320      	movs	r3, #32
 8000638:	1a9b      	subs	r3, r3, r2
 800063a:	002a      	movs	r2, r5
 800063c:	4646      	mov	r6, r8
 800063e:	409a      	lsls	r2, r3
 8000640:	0023      	movs	r3, r4
 8000642:	40f3      	lsrs	r3, r6
 8000644:	4644      	mov	r4, r8
 8000646:	4313      	orrs	r3, r2
 8000648:	002a      	movs	r2, r5
 800064a:	40e2      	lsrs	r2, r4
 800064c:	001c      	movs	r4, r3
 800064e:	465b      	mov	r3, fp
 8000650:	0015      	movs	r5, r2
 8000652:	2b00      	cmp	r3, #0
 8000654:	dad4      	bge.n	8000600 <__udivmoddi4+0x12c>
 8000656:	4642      	mov	r2, r8
 8000658:	002f      	movs	r7, r5
 800065a:	2320      	movs	r3, #32
 800065c:	0026      	movs	r6, r4
 800065e:	4097      	lsls	r7, r2
 8000660:	1a9b      	subs	r3, r3, r2
 8000662:	40de      	lsrs	r6, r3
 8000664:	003b      	movs	r3, r7
 8000666:	4333      	orrs	r3, r6
 8000668:	e7cd      	b.n	8000606 <__udivmoddi4+0x132>
 800066a:	46c0      	nop			; (mov r8, r8)

0800066c <__aeabi_dadd>:
 800066c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800066e:	464f      	mov	r7, r9
 8000670:	46d6      	mov	lr, sl
 8000672:	4646      	mov	r6, r8
 8000674:	000d      	movs	r5, r1
 8000676:	0001      	movs	r1, r0
 8000678:	0018      	movs	r0, r3
 800067a:	b5c0      	push	{r6, r7, lr}
 800067c:	0017      	movs	r7, r2
 800067e:	032b      	lsls	r3, r5, #12
 8000680:	0a5a      	lsrs	r2, r3, #9
 8000682:	0f4b      	lsrs	r3, r1, #29
 8000684:	4313      	orrs	r3, r2
 8000686:	00ca      	lsls	r2, r1, #3
 8000688:	4691      	mov	r9, r2
 800068a:	0302      	lsls	r2, r0, #12
 800068c:	006e      	lsls	r6, r5, #1
 800068e:	0041      	lsls	r1, r0, #1
 8000690:	0a52      	lsrs	r2, r2, #9
 8000692:	0fec      	lsrs	r4, r5, #31
 8000694:	0f7d      	lsrs	r5, r7, #29
 8000696:	4315      	orrs	r5, r2
 8000698:	0d76      	lsrs	r6, r6, #21
 800069a:	0d49      	lsrs	r1, r1, #21
 800069c:	0fc0      	lsrs	r0, r0, #31
 800069e:	4682      	mov	sl, r0
 80006a0:	46ac      	mov	ip, r5
 80006a2:	00ff      	lsls	r7, r7, #3
 80006a4:	1a72      	subs	r2, r6, r1
 80006a6:	4284      	cmp	r4, r0
 80006a8:	d100      	bne.n	80006ac <__aeabi_dadd+0x40>
 80006aa:	e098      	b.n	80007de <__aeabi_dadd+0x172>
 80006ac:	2a00      	cmp	r2, #0
 80006ae:	dc00      	bgt.n	80006b2 <__aeabi_dadd+0x46>
 80006b0:	e081      	b.n	80007b6 <__aeabi_dadd+0x14a>
 80006b2:	2900      	cmp	r1, #0
 80006b4:	d100      	bne.n	80006b8 <__aeabi_dadd+0x4c>
 80006b6:	e0b6      	b.n	8000826 <__aeabi_dadd+0x1ba>
 80006b8:	49c9      	ldr	r1, [pc, #804]	; (80009e0 <__aeabi_dadd+0x374>)
 80006ba:	428e      	cmp	r6, r1
 80006bc:	d100      	bne.n	80006c0 <__aeabi_dadd+0x54>
 80006be:	e172      	b.n	80009a6 <__aeabi_dadd+0x33a>
 80006c0:	2180      	movs	r1, #128	; 0x80
 80006c2:	0028      	movs	r0, r5
 80006c4:	0409      	lsls	r1, r1, #16
 80006c6:	4308      	orrs	r0, r1
 80006c8:	4684      	mov	ip, r0
 80006ca:	2a38      	cmp	r2, #56	; 0x38
 80006cc:	dd00      	ble.n	80006d0 <__aeabi_dadd+0x64>
 80006ce:	e15e      	b.n	800098e <__aeabi_dadd+0x322>
 80006d0:	2a1f      	cmp	r2, #31
 80006d2:	dd00      	ble.n	80006d6 <__aeabi_dadd+0x6a>
 80006d4:	e1ee      	b.n	8000ab4 <__aeabi_dadd+0x448>
 80006d6:	2020      	movs	r0, #32
 80006d8:	0039      	movs	r1, r7
 80006da:	4665      	mov	r5, ip
 80006dc:	1a80      	subs	r0, r0, r2
 80006de:	4087      	lsls	r7, r0
 80006e0:	40d1      	lsrs	r1, r2
 80006e2:	4085      	lsls	r5, r0
 80006e4:	430d      	orrs	r5, r1
 80006e6:	0039      	movs	r1, r7
 80006e8:	1e4f      	subs	r7, r1, #1
 80006ea:	41b9      	sbcs	r1, r7
 80006ec:	4667      	mov	r7, ip
 80006ee:	40d7      	lsrs	r7, r2
 80006f0:	4329      	orrs	r1, r5
 80006f2:	1bdb      	subs	r3, r3, r7
 80006f4:	464a      	mov	r2, r9
 80006f6:	1a55      	subs	r5, r2, r1
 80006f8:	45a9      	cmp	r9, r5
 80006fa:	4189      	sbcs	r1, r1
 80006fc:	4249      	negs	r1, r1
 80006fe:	1a5b      	subs	r3, r3, r1
 8000700:	4698      	mov	r8, r3
 8000702:	4643      	mov	r3, r8
 8000704:	021b      	lsls	r3, r3, #8
 8000706:	d400      	bmi.n	800070a <__aeabi_dadd+0x9e>
 8000708:	e0cc      	b.n	80008a4 <__aeabi_dadd+0x238>
 800070a:	4643      	mov	r3, r8
 800070c:	025b      	lsls	r3, r3, #9
 800070e:	0a5b      	lsrs	r3, r3, #9
 8000710:	4698      	mov	r8, r3
 8000712:	4643      	mov	r3, r8
 8000714:	2b00      	cmp	r3, #0
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0xae>
 8000718:	e12c      	b.n	8000974 <__aeabi_dadd+0x308>
 800071a:	4640      	mov	r0, r8
 800071c:	f000 ff6c 	bl	80015f8 <__clzsi2>
 8000720:	0001      	movs	r1, r0
 8000722:	3908      	subs	r1, #8
 8000724:	2220      	movs	r2, #32
 8000726:	0028      	movs	r0, r5
 8000728:	4643      	mov	r3, r8
 800072a:	1a52      	subs	r2, r2, r1
 800072c:	408b      	lsls	r3, r1
 800072e:	40d0      	lsrs	r0, r2
 8000730:	408d      	lsls	r5, r1
 8000732:	4303      	orrs	r3, r0
 8000734:	428e      	cmp	r6, r1
 8000736:	dd00      	ble.n	800073a <__aeabi_dadd+0xce>
 8000738:	e117      	b.n	800096a <__aeabi_dadd+0x2fe>
 800073a:	1b8e      	subs	r6, r1, r6
 800073c:	1c72      	adds	r2, r6, #1
 800073e:	2a1f      	cmp	r2, #31
 8000740:	dd00      	ble.n	8000744 <__aeabi_dadd+0xd8>
 8000742:	e1a7      	b.n	8000a94 <__aeabi_dadd+0x428>
 8000744:	2120      	movs	r1, #32
 8000746:	0018      	movs	r0, r3
 8000748:	002e      	movs	r6, r5
 800074a:	1a89      	subs	r1, r1, r2
 800074c:	408d      	lsls	r5, r1
 800074e:	4088      	lsls	r0, r1
 8000750:	40d6      	lsrs	r6, r2
 8000752:	40d3      	lsrs	r3, r2
 8000754:	1e69      	subs	r1, r5, #1
 8000756:	418d      	sbcs	r5, r1
 8000758:	4330      	orrs	r0, r6
 800075a:	4698      	mov	r8, r3
 800075c:	2600      	movs	r6, #0
 800075e:	4305      	orrs	r5, r0
 8000760:	076b      	lsls	r3, r5, #29
 8000762:	d009      	beq.n	8000778 <__aeabi_dadd+0x10c>
 8000764:	230f      	movs	r3, #15
 8000766:	402b      	ands	r3, r5
 8000768:	2b04      	cmp	r3, #4
 800076a:	d005      	beq.n	8000778 <__aeabi_dadd+0x10c>
 800076c:	1d2b      	adds	r3, r5, #4
 800076e:	42ab      	cmp	r3, r5
 8000770:	41ad      	sbcs	r5, r5
 8000772:	426d      	negs	r5, r5
 8000774:	44a8      	add	r8, r5
 8000776:	001d      	movs	r5, r3
 8000778:	4643      	mov	r3, r8
 800077a:	021b      	lsls	r3, r3, #8
 800077c:	d400      	bmi.n	8000780 <__aeabi_dadd+0x114>
 800077e:	e094      	b.n	80008aa <__aeabi_dadd+0x23e>
 8000780:	4b97      	ldr	r3, [pc, #604]	; (80009e0 <__aeabi_dadd+0x374>)
 8000782:	1c72      	adds	r2, r6, #1
 8000784:	429a      	cmp	r2, r3
 8000786:	d100      	bne.n	800078a <__aeabi_dadd+0x11e>
 8000788:	e09d      	b.n	80008c6 <__aeabi_dadd+0x25a>
 800078a:	4641      	mov	r1, r8
 800078c:	4b95      	ldr	r3, [pc, #596]	; (80009e4 <__aeabi_dadd+0x378>)
 800078e:	08ed      	lsrs	r5, r5, #3
 8000790:	4019      	ands	r1, r3
 8000792:	000b      	movs	r3, r1
 8000794:	0552      	lsls	r2, r2, #21
 8000796:	0749      	lsls	r1, r1, #29
 8000798:	025b      	lsls	r3, r3, #9
 800079a:	4329      	orrs	r1, r5
 800079c:	0b1b      	lsrs	r3, r3, #12
 800079e:	0d52      	lsrs	r2, r2, #21
 80007a0:	0512      	lsls	r2, r2, #20
 80007a2:	4313      	orrs	r3, r2
 80007a4:	07e4      	lsls	r4, r4, #31
 80007a6:	4323      	orrs	r3, r4
 80007a8:	0008      	movs	r0, r1
 80007aa:	0019      	movs	r1, r3
 80007ac:	bce0      	pop	{r5, r6, r7}
 80007ae:	46ba      	mov	sl, r7
 80007b0:	46b1      	mov	r9, r6
 80007b2:	46a8      	mov	r8, r5
 80007b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d043      	beq.n	8000842 <__aeabi_dadd+0x1d6>
 80007ba:	1b8a      	subs	r2, r1, r6
 80007bc:	2e00      	cmp	r6, #0
 80007be:	d000      	beq.n	80007c2 <__aeabi_dadd+0x156>
 80007c0:	e12a      	b.n	8000a18 <__aeabi_dadd+0x3ac>
 80007c2:	464c      	mov	r4, r9
 80007c4:	431c      	orrs	r4, r3
 80007c6:	d100      	bne.n	80007ca <__aeabi_dadd+0x15e>
 80007c8:	e1d1      	b.n	8000b6e <__aeabi_dadd+0x502>
 80007ca:	1e54      	subs	r4, r2, #1
 80007cc:	2a01      	cmp	r2, #1
 80007ce:	d100      	bne.n	80007d2 <__aeabi_dadd+0x166>
 80007d0:	e21f      	b.n	8000c12 <__aeabi_dadd+0x5a6>
 80007d2:	4d83      	ldr	r5, [pc, #524]	; (80009e0 <__aeabi_dadd+0x374>)
 80007d4:	42aa      	cmp	r2, r5
 80007d6:	d100      	bne.n	80007da <__aeabi_dadd+0x16e>
 80007d8:	e272      	b.n	8000cc0 <__aeabi_dadd+0x654>
 80007da:	0022      	movs	r2, r4
 80007dc:	e123      	b.n	8000a26 <__aeabi_dadd+0x3ba>
 80007de:	2a00      	cmp	r2, #0
 80007e0:	dc00      	bgt.n	80007e4 <__aeabi_dadd+0x178>
 80007e2:	e098      	b.n	8000916 <__aeabi_dadd+0x2aa>
 80007e4:	2900      	cmp	r1, #0
 80007e6:	d042      	beq.n	800086e <__aeabi_dadd+0x202>
 80007e8:	497d      	ldr	r1, [pc, #500]	; (80009e0 <__aeabi_dadd+0x374>)
 80007ea:	428e      	cmp	r6, r1
 80007ec:	d100      	bne.n	80007f0 <__aeabi_dadd+0x184>
 80007ee:	e0da      	b.n	80009a6 <__aeabi_dadd+0x33a>
 80007f0:	2180      	movs	r1, #128	; 0x80
 80007f2:	0028      	movs	r0, r5
 80007f4:	0409      	lsls	r1, r1, #16
 80007f6:	4308      	orrs	r0, r1
 80007f8:	4684      	mov	ip, r0
 80007fa:	2a38      	cmp	r2, #56	; 0x38
 80007fc:	dd00      	ble.n	8000800 <__aeabi_dadd+0x194>
 80007fe:	e129      	b.n	8000a54 <__aeabi_dadd+0x3e8>
 8000800:	2a1f      	cmp	r2, #31
 8000802:	dc00      	bgt.n	8000806 <__aeabi_dadd+0x19a>
 8000804:	e187      	b.n	8000b16 <__aeabi_dadd+0x4aa>
 8000806:	0011      	movs	r1, r2
 8000808:	4665      	mov	r5, ip
 800080a:	3920      	subs	r1, #32
 800080c:	40cd      	lsrs	r5, r1
 800080e:	2a20      	cmp	r2, #32
 8000810:	d004      	beq.n	800081c <__aeabi_dadd+0x1b0>
 8000812:	2040      	movs	r0, #64	; 0x40
 8000814:	4661      	mov	r1, ip
 8000816:	1a82      	subs	r2, r0, r2
 8000818:	4091      	lsls	r1, r2
 800081a:	430f      	orrs	r7, r1
 800081c:	0039      	movs	r1, r7
 800081e:	1e4f      	subs	r7, r1, #1
 8000820:	41b9      	sbcs	r1, r7
 8000822:	430d      	orrs	r5, r1
 8000824:	e11b      	b.n	8000a5e <__aeabi_dadd+0x3f2>
 8000826:	0029      	movs	r1, r5
 8000828:	4339      	orrs	r1, r7
 800082a:	d100      	bne.n	800082e <__aeabi_dadd+0x1c2>
 800082c:	e0b5      	b.n	800099a <__aeabi_dadd+0x32e>
 800082e:	1e51      	subs	r1, r2, #1
 8000830:	2a01      	cmp	r2, #1
 8000832:	d100      	bne.n	8000836 <__aeabi_dadd+0x1ca>
 8000834:	e1ab      	b.n	8000b8e <__aeabi_dadd+0x522>
 8000836:	486a      	ldr	r0, [pc, #424]	; (80009e0 <__aeabi_dadd+0x374>)
 8000838:	4282      	cmp	r2, r0
 800083a:	d100      	bne.n	800083e <__aeabi_dadd+0x1d2>
 800083c:	e1b2      	b.n	8000ba4 <__aeabi_dadd+0x538>
 800083e:	000a      	movs	r2, r1
 8000840:	e743      	b.n	80006ca <__aeabi_dadd+0x5e>
 8000842:	4969      	ldr	r1, [pc, #420]	; (80009e8 <__aeabi_dadd+0x37c>)
 8000844:	1c75      	adds	r5, r6, #1
 8000846:	420d      	tst	r5, r1
 8000848:	d000      	beq.n	800084c <__aeabi_dadd+0x1e0>
 800084a:	e0cf      	b.n	80009ec <__aeabi_dadd+0x380>
 800084c:	2e00      	cmp	r6, #0
 800084e:	d000      	beq.n	8000852 <__aeabi_dadd+0x1e6>
 8000850:	e193      	b.n	8000b7a <__aeabi_dadd+0x50e>
 8000852:	4649      	mov	r1, r9
 8000854:	4319      	orrs	r1, r3
 8000856:	d100      	bne.n	800085a <__aeabi_dadd+0x1ee>
 8000858:	e1d1      	b.n	8000bfe <__aeabi_dadd+0x592>
 800085a:	4661      	mov	r1, ip
 800085c:	4339      	orrs	r1, r7
 800085e:	d000      	beq.n	8000862 <__aeabi_dadd+0x1f6>
 8000860:	e1e3      	b.n	8000c2a <__aeabi_dadd+0x5be>
 8000862:	4649      	mov	r1, r9
 8000864:	0758      	lsls	r0, r3, #29
 8000866:	08c9      	lsrs	r1, r1, #3
 8000868:	4301      	orrs	r1, r0
 800086a:	08db      	lsrs	r3, r3, #3
 800086c:	e026      	b.n	80008bc <__aeabi_dadd+0x250>
 800086e:	0029      	movs	r1, r5
 8000870:	4339      	orrs	r1, r7
 8000872:	d100      	bne.n	8000876 <__aeabi_dadd+0x20a>
 8000874:	e091      	b.n	800099a <__aeabi_dadd+0x32e>
 8000876:	1e51      	subs	r1, r2, #1
 8000878:	2a01      	cmp	r2, #1
 800087a:	d005      	beq.n	8000888 <__aeabi_dadd+0x21c>
 800087c:	4858      	ldr	r0, [pc, #352]	; (80009e0 <__aeabi_dadd+0x374>)
 800087e:	4282      	cmp	r2, r0
 8000880:	d100      	bne.n	8000884 <__aeabi_dadd+0x218>
 8000882:	e18f      	b.n	8000ba4 <__aeabi_dadd+0x538>
 8000884:	000a      	movs	r2, r1
 8000886:	e7b8      	b.n	80007fa <__aeabi_dadd+0x18e>
 8000888:	003d      	movs	r5, r7
 800088a:	444d      	add	r5, r9
 800088c:	454d      	cmp	r5, r9
 800088e:	4189      	sbcs	r1, r1
 8000890:	4463      	add	r3, ip
 8000892:	4698      	mov	r8, r3
 8000894:	4249      	negs	r1, r1
 8000896:	4488      	add	r8, r1
 8000898:	4643      	mov	r3, r8
 800089a:	2602      	movs	r6, #2
 800089c:	021b      	lsls	r3, r3, #8
 800089e:	d500      	bpl.n	80008a2 <__aeabi_dadd+0x236>
 80008a0:	e0eb      	b.n	8000a7a <__aeabi_dadd+0x40e>
 80008a2:	3e01      	subs	r6, #1
 80008a4:	076b      	lsls	r3, r5, #29
 80008a6:	d000      	beq.n	80008aa <__aeabi_dadd+0x23e>
 80008a8:	e75c      	b.n	8000764 <__aeabi_dadd+0xf8>
 80008aa:	4643      	mov	r3, r8
 80008ac:	08e9      	lsrs	r1, r5, #3
 80008ae:	075a      	lsls	r2, r3, #29
 80008b0:	4311      	orrs	r1, r2
 80008b2:	0032      	movs	r2, r6
 80008b4:	08db      	lsrs	r3, r3, #3
 80008b6:	484a      	ldr	r0, [pc, #296]	; (80009e0 <__aeabi_dadd+0x374>)
 80008b8:	4282      	cmp	r2, r0
 80008ba:	d021      	beq.n	8000900 <__aeabi_dadd+0x294>
 80008bc:	031b      	lsls	r3, r3, #12
 80008be:	0552      	lsls	r2, r2, #21
 80008c0:	0b1b      	lsrs	r3, r3, #12
 80008c2:	0d52      	lsrs	r2, r2, #21
 80008c4:	e76c      	b.n	80007a0 <__aeabi_dadd+0x134>
 80008c6:	2300      	movs	r3, #0
 80008c8:	2100      	movs	r1, #0
 80008ca:	e769      	b.n	80007a0 <__aeabi_dadd+0x134>
 80008cc:	002a      	movs	r2, r5
 80008ce:	433a      	orrs	r2, r7
 80008d0:	d069      	beq.n	80009a6 <__aeabi_dadd+0x33a>
 80008d2:	464a      	mov	r2, r9
 80008d4:	0758      	lsls	r0, r3, #29
 80008d6:	08d1      	lsrs	r1, r2, #3
 80008d8:	08da      	lsrs	r2, r3, #3
 80008da:	2380      	movs	r3, #128	; 0x80
 80008dc:	031b      	lsls	r3, r3, #12
 80008de:	4308      	orrs	r0, r1
 80008e0:	421a      	tst	r2, r3
 80008e2:	d007      	beq.n	80008f4 <__aeabi_dadd+0x288>
 80008e4:	0029      	movs	r1, r5
 80008e6:	08ed      	lsrs	r5, r5, #3
 80008e8:	421d      	tst	r5, r3
 80008ea:	d103      	bne.n	80008f4 <__aeabi_dadd+0x288>
 80008ec:	002a      	movs	r2, r5
 80008ee:	08ff      	lsrs	r7, r7, #3
 80008f0:	0748      	lsls	r0, r1, #29
 80008f2:	4338      	orrs	r0, r7
 80008f4:	0f43      	lsrs	r3, r0, #29
 80008f6:	00c1      	lsls	r1, r0, #3
 80008f8:	075b      	lsls	r3, r3, #29
 80008fa:	08c9      	lsrs	r1, r1, #3
 80008fc:	4319      	orrs	r1, r3
 80008fe:	0013      	movs	r3, r2
 8000900:	000a      	movs	r2, r1
 8000902:	431a      	orrs	r2, r3
 8000904:	d100      	bne.n	8000908 <__aeabi_dadd+0x29c>
 8000906:	e213      	b.n	8000d30 <__aeabi_dadd+0x6c4>
 8000908:	2280      	movs	r2, #128	; 0x80
 800090a:	0312      	lsls	r2, r2, #12
 800090c:	4313      	orrs	r3, r2
 800090e:	031b      	lsls	r3, r3, #12
 8000910:	4a33      	ldr	r2, [pc, #204]	; (80009e0 <__aeabi_dadd+0x374>)
 8000912:	0b1b      	lsrs	r3, r3, #12
 8000914:	e744      	b.n	80007a0 <__aeabi_dadd+0x134>
 8000916:	2a00      	cmp	r2, #0
 8000918:	d04b      	beq.n	80009b2 <__aeabi_dadd+0x346>
 800091a:	1b8a      	subs	r2, r1, r6
 800091c:	2e00      	cmp	r6, #0
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x2b6>
 8000920:	e0e7      	b.n	8000af2 <__aeabi_dadd+0x486>
 8000922:	482f      	ldr	r0, [pc, #188]	; (80009e0 <__aeabi_dadd+0x374>)
 8000924:	4281      	cmp	r1, r0
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x2be>
 8000928:	e195      	b.n	8000c56 <__aeabi_dadd+0x5ea>
 800092a:	2080      	movs	r0, #128	; 0x80
 800092c:	0400      	lsls	r0, r0, #16
 800092e:	4303      	orrs	r3, r0
 8000930:	2a38      	cmp	r2, #56	; 0x38
 8000932:	dd00      	ble.n	8000936 <__aeabi_dadd+0x2ca>
 8000934:	e143      	b.n	8000bbe <__aeabi_dadd+0x552>
 8000936:	2a1f      	cmp	r2, #31
 8000938:	dd00      	ble.n	800093c <__aeabi_dadd+0x2d0>
 800093a:	e1db      	b.n	8000cf4 <__aeabi_dadd+0x688>
 800093c:	2020      	movs	r0, #32
 800093e:	001d      	movs	r5, r3
 8000940:	464e      	mov	r6, r9
 8000942:	1a80      	subs	r0, r0, r2
 8000944:	4085      	lsls	r5, r0
 8000946:	40d6      	lsrs	r6, r2
 8000948:	4335      	orrs	r5, r6
 800094a:	464e      	mov	r6, r9
 800094c:	4086      	lsls	r6, r0
 800094e:	0030      	movs	r0, r6
 8000950:	40d3      	lsrs	r3, r2
 8000952:	1e46      	subs	r6, r0, #1
 8000954:	41b0      	sbcs	r0, r6
 8000956:	449c      	add	ip, r3
 8000958:	4305      	orrs	r5, r0
 800095a:	19ed      	adds	r5, r5, r7
 800095c:	42bd      	cmp	r5, r7
 800095e:	419b      	sbcs	r3, r3
 8000960:	425b      	negs	r3, r3
 8000962:	4463      	add	r3, ip
 8000964:	4698      	mov	r8, r3
 8000966:	000e      	movs	r6, r1
 8000968:	e07f      	b.n	8000a6a <__aeabi_dadd+0x3fe>
 800096a:	4a1e      	ldr	r2, [pc, #120]	; (80009e4 <__aeabi_dadd+0x378>)
 800096c:	1a76      	subs	r6, r6, r1
 800096e:	4013      	ands	r3, r2
 8000970:	4698      	mov	r8, r3
 8000972:	e6f5      	b.n	8000760 <__aeabi_dadd+0xf4>
 8000974:	0028      	movs	r0, r5
 8000976:	f000 fe3f 	bl	80015f8 <__clzsi2>
 800097a:	0001      	movs	r1, r0
 800097c:	3118      	adds	r1, #24
 800097e:	291f      	cmp	r1, #31
 8000980:	dc00      	bgt.n	8000984 <__aeabi_dadd+0x318>
 8000982:	e6cf      	b.n	8000724 <__aeabi_dadd+0xb8>
 8000984:	002b      	movs	r3, r5
 8000986:	3808      	subs	r0, #8
 8000988:	4083      	lsls	r3, r0
 800098a:	2500      	movs	r5, #0
 800098c:	e6d2      	b.n	8000734 <__aeabi_dadd+0xc8>
 800098e:	4662      	mov	r2, ip
 8000990:	433a      	orrs	r2, r7
 8000992:	0011      	movs	r1, r2
 8000994:	1e4f      	subs	r7, r1, #1
 8000996:	41b9      	sbcs	r1, r7
 8000998:	e6ac      	b.n	80006f4 <__aeabi_dadd+0x88>
 800099a:	4649      	mov	r1, r9
 800099c:	0758      	lsls	r0, r3, #29
 800099e:	08c9      	lsrs	r1, r1, #3
 80009a0:	4301      	orrs	r1, r0
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	e787      	b.n	80008b6 <__aeabi_dadd+0x24a>
 80009a6:	4649      	mov	r1, r9
 80009a8:	075a      	lsls	r2, r3, #29
 80009aa:	08c9      	lsrs	r1, r1, #3
 80009ac:	4311      	orrs	r1, r2
 80009ae:	08db      	lsrs	r3, r3, #3
 80009b0:	e7a6      	b.n	8000900 <__aeabi_dadd+0x294>
 80009b2:	490d      	ldr	r1, [pc, #52]	; (80009e8 <__aeabi_dadd+0x37c>)
 80009b4:	1c70      	adds	r0, r6, #1
 80009b6:	4208      	tst	r0, r1
 80009b8:	d000      	beq.n	80009bc <__aeabi_dadd+0x350>
 80009ba:	e0bb      	b.n	8000b34 <__aeabi_dadd+0x4c8>
 80009bc:	2e00      	cmp	r6, #0
 80009be:	d000      	beq.n	80009c2 <__aeabi_dadd+0x356>
 80009c0:	e114      	b.n	8000bec <__aeabi_dadd+0x580>
 80009c2:	4649      	mov	r1, r9
 80009c4:	4319      	orrs	r1, r3
 80009c6:	d100      	bne.n	80009ca <__aeabi_dadd+0x35e>
 80009c8:	e175      	b.n	8000cb6 <__aeabi_dadd+0x64a>
 80009ca:	0029      	movs	r1, r5
 80009cc:	4339      	orrs	r1, r7
 80009ce:	d000      	beq.n	80009d2 <__aeabi_dadd+0x366>
 80009d0:	e17e      	b.n	8000cd0 <__aeabi_dadd+0x664>
 80009d2:	4649      	mov	r1, r9
 80009d4:	0758      	lsls	r0, r3, #29
 80009d6:	08c9      	lsrs	r1, r1, #3
 80009d8:	4301      	orrs	r1, r0
 80009da:	08db      	lsrs	r3, r3, #3
 80009dc:	e76e      	b.n	80008bc <__aeabi_dadd+0x250>
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	000007ff 	.word	0x000007ff
 80009e4:	ff7fffff 	.word	0xff7fffff
 80009e8:	000007fe 	.word	0x000007fe
 80009ec:	4649      	mov	r1, r9
 80009ee:	1bcd      	subs	r5, r1, r7
 80009f0:	4661      	mov	r1, ip
 80009f2:	1a58      	subs	r0, r3, r1
 80009f4:	45a9      	cmp	r9, r5
 80009f6:	4189      	sbcs	r1, r1
 80009f8:	4249      	negs	r1, r1
 80009fa:	4688      	mov	r8, r1
 80009fc:	0001      	movs	r1, r0
 80009fe:	4640      	mov	r0, r8
 8000a00:	1a09      	subs	r1, r1, r0
 8000a02:	4688      	mov	r8, r1
 8000a04:	0209      	lsls	r1, r1, #8
 8000a06:	d500      	bpl.n	8000a0a <__aeabi_dadd+0x39e>
 8000a08:	e0a6      	b.n	8000b58 <__aeabi_dadd+0x4ec>
 8000a0a:	4641      	mov	r1, r8
 8000a0c:	4329      	orrs	r1, r5
 8000a0e:	d000      	beq.n	8000a12 <__aeabi_dadd+0x3a6>
 8000a10:	e67f      	b.n	8000712 <__aeabi_dadd+0xa6>
 8000a12:	2300      	movs	r3, #0
 8000a14:	2400      	movs	r4, #0
 8000a16:	e751      	b.n	80008bc <__aeabi_dadd+0x250>
 8000a18:	4cc7      	ldr	r4, [pc, #796]	; (8000d38 <__aeabi_dadd+0x6cc>)
 8000a1a:	42a1      	cmp	r1, r4
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_dadd+0x3b4>
 8000a1e:	e0c7      	b.n	8000bb0 <__aeabi_dadd+0x544>
 8000a20:	2480      	movs	r4, #128	; 0x80
 8000a22:	0424      	lsls	r4, r4, #16
 8000a24:	4323      	orrs	r3, r4
 8000a26:	2a38      	cmp	r2, #56	; 0x38
 8000a28:	dc54      	bgt.n	8000ad4 <__aeabi_dadd+0x468>
 8000a2a:	2a1f      	cmp	r2, #31
 8000a2c:	dd00      	ble.n	8000a30 <__aeabi_dadd+0x3c4>
 8000a2e:	e0cc      	b.n	8000bca <__aeabi_dadd+0x55e>
 8000a30:	2420      	movs	r4, #32
 8000a32:	4648      	mov	r0, r9
 8000a34:	1aa4      	subs	r4, r4, r2
 8000a36:	001d      	movs	r5, r3
 8000a38:	464e      	mov	r6, r9
 8000a3a:	40a0      	lsls	r0, r4
 8000a3c:	40d6      	lsrs	r6, r2
 8000a3e:	40a5      	lsls	r5, r4
 8000a40:	0004      	movs	r4, r0
 8000a42:	40d3      	lsrs	r3, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	4335      	orrs	r5, r6
 8000a48:	1e66      	subs	r6, r4, #1
 8000a4a:	41b4      	sbcs	r4, r6
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	469c      	mov	ip, r3
 8000a50:	4325      	orrs	r5, r4
 8000a52:	e044      	b.n	8000ade <__aeabi_dadd+0x472>
 8000a54:	4662      	mov	r2, ip
 8000a56:	433a      	orrs	r2, r7
 8000a58:	0015      	movs	r5, r2
 8000a5a:	1e6f      	subs	r7, r5, #1
 8000a5c:	41bd      	sbcs	r5, r7
 8000a5e:	444d      	add	r5, r9
 8000a60:	454d      	cmp	r5, r9
 8000a62:	4189      	sbcs	r1, r1
 8000a64:	4249      	negs	r1, r1
 8000a66:	4688      	mov	r8, r1
 8000a68:	4498      	add	r8, r3
 8000a6a:	4643      	mov	r3, r8
 8000a6c:	021b      	lsls	r3, r3, #8
 8000a6e:	d400      	bmi.n	8000a72 <__aeabi_dadd+0x406>
 8000a70:	e718      	b.n	80008a4 <__aeabi_dadd+0x238>
 8000a72:	4bb1      	ldr	r3, [pc, #708]	; (8000d38 <__aeabi_dadd+0x6cc>)
 8000a74:	3601      	adds	r6, #1
 8000a76:	429e      	cmp	r6, r3
 8000a78:	d049      	beq.n	8000b0e <__aeabi_dadd+0x4a2>
 8000a7a:	4642      	mov	r2, r8
 8000a7c:	4baf      	ldr	r3, [pc, #700]	; (8000d3c <__aeabi_dadd+0x6d0>)
 8000a7e:	2101      	movs	r1, #1
 8000a80:	401a      	ands	r2, r3
 8000a82:	0013      	movs	r3, r2
 8000a84:	086a      	lsrs	r2, r5, #1
 8000a86:	400d      	ands	r5, r1
 8000a88:	4315      	orrs	r5, r2
 8000a8a:	07d9      	lsls	r1, r3, #31
 8000a8c:	085b      	lsrs	r3, r3, #1
 8000a8e:	4698      	mov	r8, r3
 8000a90:	430d      	orrs	r5, r1
 8000a92:	e665      	b.n	8000760 <__aeabi_dadd+0xf4>
 8000a94:	0018      	movs	r0, r3
 8000a96:	3e1f      	subs	r6, #31
 8000a98:	40f0      	lsrs	r0, r6
 8000a9a:	2a20      	cmp	r2, #32
 8000a9c:	d003      	beq.n	8000aa6 <__aeabi_dadd+0x43a>
 8000a9e:	2140      	movs	r1, #64	; 0x40
 8000aa0:	1a8a      	subs	r2, r1, r2
 8000aa2:	4093      	lsls	r3, r2
 8000aa4:	431d      	orrs	r5, r3
 8000aa6:	1e69      	subs	r1, r5, #1
 8000aa8:	418d      	sbcs	r5, r1
 8000aaa:	2300      	movs	r3, #0
 8000aac:	2600      	movs	r6, #0
 8000aae:	4698      	mov	r8, r3
 8000ab0:	4305      	orrs	r5, r0
 8000ab2:	e6f7      	b.n	80008a4 <__aeabi_dadd+0x238>
 8000ab4:	0011      	movs	r1, r2
 8000ab6:	4665      	mov	r5, ip
 8000ab8:	3920      	subs	r1, #32
 8000aba:	40cd      	lsrs	r5, r1
 8000abc:	2a20      	cmp	r2, #32
 8000abe:	d004      	beq.n	8000aca <__aeabi_dadd+0x45e>
 8000ac0:	2040      	movs	r0, #64	; 0x40
 8000ac2:	4661      	mov	r1, ip
 8000ac4:	1a82      	subs	r2, r0, r2
 8000ac6:	4091      	lsls	r1, r2
 8000ac8:	430f      	orrs	r7, r1
 8000aca:	0039      	movs	r1, r7
 8000acc:	1e4f      	subs	r7, r1, #1
 8000ace:	41b9      	sbcs	r1, r7
 8000ad0:	4329      	orrs	r1, r5
 8000ad2:	e60f      	b.n	80006f4 <__aeabi_dadd+0x88>
 8000ad4:	464a      	mov	r2, r9
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	001d      	movs	r5, r3
 8000ada:	1e6b      	subs	r3, r5, #1
 8000adc:	419d      	sbcs	r5, r3
 8000ade:	1b7d      	subs	r5, r7, r5
 8000ae0:	42af      	cmp	r7, r5
 8000ae2:	419b      	sbcs	r3, r3
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	425b      	negs	r3, r3
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	4698      	mov	r8, r3
 8000aec:	4654      	mov	r4, sl
 8000aee:	000e      	movs	r6, r1
 8000af0:	e607      	b.n	8000702 <__aeabi_dadd+0x96>
 8000af2:	4648      	mov	r0, r9
 8000af4:	4318      	orrs	r0, r3
 8000af6:	d100      	bne.n	8000afa <__aeabi_dadd+0x48e>
 8000af8:	e0b3      	b.n	8000c62 <__aeabi_dadd+0x5f6>
 8000afa:	1e50      	subs	r0, r2, #1
 8000afc:	2a01      	cmp	r2, #1
 8000afe:	d100      	bne.n	8000b02 <__aeabi_dadd+0x496>
 8000b00:	e10d      	b.n	8000d1e <__aeabi_dadd+0x6b2>
 8000b02:	4d8d      	ldr	r5, [pc, #564]	; (8000d38 <__aeabi_dadd+0x6cc>)
 8000b04:	42aa      	cmp	r2, r5
 8000b06:	d100      	bne.n	8000b0a <__aeabi_dadd+0x49e>
 8000b08:	e0a5      	b.n	8000c56 <__aeabi_dadd+0x5ea>
 8000b0a:	0002      	movs	r2, r0
 8000b0c:	e710      	b.n	8000930 <__aeabi_dadd+0x2c4>
 8000b0e:	0032      	movs	r2, r6
 8000b10:	2300      	movs	r3, #0
 8000b12:	2100      	movs	r1, #0
 8000b14:	e644      	b.n	80007a0 <__aeabi_dadd+0x134>
 8000b16:	2120      	movs	r1, #32
 8000b18:	0038      	movs	r0, r7
 8000b1a:	1a89      	subs	r1, r1, r2
 8000b1c:	4665      	mov	r5, ip
 8000b1e:	408f      	lsls	r7, r1
 8000b20:	408d      	lsls	r5, r1
 8000b22:	40d0      	lsrs	r0, r2
 8000b24:	1e79      	subs	r1, r7, #1
 8000b26:	418f      	sbcs	r7, r1
 8000b28:	4305      	orrs	r5, r0
 8000b2a:	433d      	orrs	r5, r7
 8000b2c:	4667      	mov	r7, ip
 8000b2e:	40d7      	lsrs	r7, r2
 8000b30:	19db      	adds	r3, r3, r7
 8000b32:	e794      	b.n	8000a5e <__aeabi_dadd+0x3f2>
 8000b34:	4a80      	ldr	r2, [pc, #512]	; (8000d38 <__aeabi_dadd+0x6cc>)
 8000b36:	4290      	cmp	r0, r2
 8000b38:	d100      	bne.n	8000b3c <__aeabi_dadd+0x4d0>
 8000b3a:	e0ec      	b.n	8000d16 <__aeabi_dadd+0x6aa>
 8000b3c:	0039      	movs	r1, r7
 8000b3e:	4449      	add	r1, r9
 8000b40:	4549      	cmp	r1, r9
 8000b42:	4192      	sbcs	r2, r2
 8000b44:	4463      	add	r3, ip
 8000b46:	4252      	negs	r2, r2
 8000b48:	189b      	adds	r3, r3, r2
 8000b4a:	07dd      	lsls	r5, r3, #31
 8000b4c:	0849      	lsrs	r1, r1, #1
 8000b4e:	085b      	lsrs	r3, r3, #1
 8000b50:	4698      	mov	r8, r3
 8000b52:	0006      	movs	r6, r0
 8000b54:	430d      	orrs	r5, r1
 8000b56:	e6a5      	b.n	80008a4 <__aeabi_dadd+0x238>
 8000b58:	464a      	mov	r2, r9
 8000b5a:	1abd      	subs	r5, r7, r2
 8000b5c:	42af      	cmp	r7, r5
 8000b5e:	4189      	sbcs	r1, r1
 8000b60:	4662      	mov	r2, ip
 8000b62:	4249      	negs	r1, r1
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	1a5b      	subs	r3, r3, r1
 8000b68:	4698      	mov	r8, r3
 8000b6a:	4654      	mov	r4, sl
 8000b6c:	e5d1      	b.n	8000712 <__aeabi_dadd+0xa6>
 8000b6e:	076c      	lsls	r4, r5, #29
 8000b70:	08f9      	lsrs	r1, r7, #3
 8000b72:	4321      	orrs	r1, r4
 8000b74:	08eb      	lsrs	r3, r5, #3
 8000b76:	0004      	movs	r4, r0
 8000b78:	e69d      	b.n	80008b6 <__aeabi_dadd+0x24a>
 8000b7a:	464a      	mov	r2, r9
 8000b7c:	431a      	orrs	r2, r3
 8000b7e:	d175      	bne.n	8000c6c <__aeabi_dadd+0x600>
 8000b80:	4661      	mov	r1, ip
 8000b82:	4339      	orrs	r1, r7
 8000b84:	d114      	bne.n	8000bb0 <__aeabi_dadd+0x544>
 8000b86:	2380      	movs	r3, #128	; 0x80
 8000b88:	2400      	movs	r4, #0
 8000b8a:	031b      	lsls	r3, r3, #12
 8000b8c:	e6bc      	b.n	8000908 <__aeabi_dadd+0x29c>
 8000b8e:	464a      	mov	r2, r9
 8000b90:	1bd5      	subs	r5, r2, r7
 8000b92:	45a9      	cmp	r9, r5
 8000b94:	4189      	sbcs	r1, r1
 8000b96:	4662      	mov	r2, ip
 8000b98:	4249      	negs	r1, r1
 8000b9a:	1a9b      	subs	r3, r3, r2
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	4698      	mov	r8, r3
 8000ba0:	2601      	movs	r6, #1
 8000ba2:	e5ae      	b.n	8000702 <__aeabi_dadd+0x96>
 8000ba4:	464a      	mov	r2, r9
 8000ba6:	08d1      	lsrs	r1, r2, #3
 8000ba8:	075a      	lsls	r2, r3, #29
 8000baa:	4311      	orrs	r1, r2
 8000bac:	08db      	lsrs	r3, r3, #3
 8000bae:	e6a7      	b.n	8000900 <__aeabi_dadd+0x294>
 8000bb0:	4663      	mov	r3, ip
 8000bb2:	08f9      	lsrs	r1, r7, #3
 8000bb4:	075a      	lsls	r2, r3, #29
 8000bb6:	4654      	mov	r4, sl
 8000bb8:	4311      	orrs	r1, r2
 8000bba:	08db      	lsrs	r3, r3, #3
 8000bbc:	e6a0      	b.n	8000900 <__aeabi_dadd+0x294>
 8000bbe:	464a      	mov	r2, r9
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	001d      	movs	r5, r3
 8000bc4:	1e6b      	subs	r3, r5, #1
 8000bc6:	419d      	sbcs	r5, r3
 8000bc8:	e6c7      	b.n	800095a <__aeabi_dadd+0x2ee>
 8000bca:	0014      	movs	r4, r2
 8000bcc:	001e      	movs	r6, r3
 8000bce:	3c20      	subs	r4, #32
 8000bd0:	40e6      	lsrs	r6, r4
 8000bd2:	2a20      	cmp	r2, #32
 8000bd4:	d005      	beq.n	8000be2 <__aeabi_dadd+0x576>
 8000bd6:	2440      	movs	r4, #64	; 0x40
 8000bd8:	1aa2      	subs	r2, r4, r2
 8000bda:	4093      	lsls	r3, r2
 8000bdc:	464a      	mov	r2, r9
 8000bde:	431a      	orrs	r2, r3
 8000be0:	4691      	mov	r9, r2
 8000be2:	464d      	mov	r5, r9
 8000be4:	1e6b      	subs	r3, r5, #1
 8000be6:	419d      	sbcs	r5, r3
 8000be8:	4335      	orrs	r5, r6
 8000bea:	e778      	b.n	8000ade <__aeabi_dadd+0x472>
 8000bec:	464a      	mov	r2, r9
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	d000      	beq.n	8000bf4 <__aeabi_dadd+0x588>
 8000bf2:	e66b      	b.n	80008cc <__aeabi_dadd+0x260>
 8000bf4:	076b      	lsls	r3, r5, #29
 8000bf6:	08f9      	lsrs	r1, r7, #3
 8000bf8:	4319      	orrs	r1, r3
 8000bfa:	08eb      	lsrs	r3, r5, #3
 8000bfc:	e680      	b.n	8000900 <__aeabi_dadd+0x294>
 8000bfe:	4661      	mov	r1, ip
 8000c00:	4339      	orrs	r1, r7
 8000c02:	d054      	beq.n	8000cae <__aeabi_dadd+0x642>
 8000c04:	4663      	mov	r3, ip
 8000c06:	08f9      	lsrs	r1, r7, #3
 8000c08:	075c      	lsls	r4, r3, #29
 8000c0a:	4321      	orrs	r1, r4
 8000c0c:	08db      	lsrs	r3, r3, #3
 8000c0e:	0004      	movs	r4, r0
 8000c10:	e654      	b.n	80008bc <__aeabi_dadd+0x250>
 8000c12:	464a      	mov	r2, r9
 8000c14:	1abd      	subs	r5, r7, r2
 8000c16:	42af      	cmp	r7, r5
 8000c18:	4189      	sbcs	r1, r1
 8000c1a:	4662      	mov	r2, ip
 8000c1c:	4249      	negs	r1, r1
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	4698      	mov	r8, r3
 8000c24:	0004      	movs	r4, r0
 8000c26:	2601      	movs	r6, #1
 8000c28:	e56b      	b.n	8000702 <__aeabi_dadd+0x96>
 8000c2a:	464a      	mov	r2, r9
 8000c2c:	1bd5      	subs	r5, r2, r7
 8000c2e:	45a9      	cmp	r9, r5
 8000c30:	4189      	sbcs	r1, r1
 8000c32:	4662      	mov	r2, ip
 8000c34:	4249      	negs	r1, r1
 8000c36:	1a9a      	subs	r2, r3, r2
 8000c38:	1a52      	subs	r2, r2, r1
 8000c3a:	4690      	mov	r8, r2
 8000c3c:	0212      	lsls	r2, r2, #8
 8000c3e:	d532      	bpl.n	8000ca6 <__aeabi_dadd+0x63a>
 8000c40:	464a      	mov	r2, r9
 8000c42:	1abd      	subs	r5, r7, r2
 8000c44:	42af      	cmp	r7, r5
 8000c46:	4189      	sbcs	r1, r1
 8000c48:	4662      	mov	r2, ip
 8000c4a:	4249      	negs	r1, r1
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	1a5b      	subs	r3, r3, r1
 8000c50:	4698      	mov	r8, r3
 8000c52:	0004      	movs	r4, r0
 8000c54:	e584      	b.n	8000760 <__aeabi_dadd+0xf4>
 8000c56:	4663      	mov	r3, ip
 8000c58:	08f9      	lsrs	r1, r7, #3
 8000c5a:	075a      	lsls	r2, r3, #29
 8000c5c:	4311      	orrs	r1, r2
 8000c5e:	08db      	lsrs	r3, r3, #3
 8000c60:	e64e      	b.n	8000900 <__aeabi_dadd+0x294>
 8000c62:	08f9      	lsrs	r1, r7, #3
 8000c64:	0768      	lsls	r0, r5, #29
 8000c66:	4301      	orrs	r1, r0
 8000c68:	08eb      	lsrs	r3, r5, #3
 8000c6a:	e624      	b.n	80008b6 <__aeabi_dadd+0x24a>
 8000c6c:	4662      	mov	r2, ip
 8000c6e:	433a      	orrs	r2, r7
 8000c70:	d100      	bne.n	8000c74 <__aeabi_dadd+0x608>
 8000c72:	e698      	b.n	80009a6 <__aeabi_dadd+0x33a>
 8000c74:	464a      	mov	r2, r9
 8000c76:	08d1      	lsrs	r1, r2, #3
 8000c78:	075a      	lsls	r2, r3, #29
 8000c7a:	4311      	orrs	r1, r2
 8000c7c:	08da      	lsrs	r2, r3, #3
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	031b      	lsls	r3, r3, #12
 8000c82:	421a      	tst	r2, r3
 8000c84:	d008      	beq.n	8000c98 <__aeabi_dadd+0x62c>
 8000c86:	4660      	mov	r0, ip
 8000c88:	08c5      	lsrs	r5, r0, #3
 8000c8a:	421d      	tst	r5, r3
 8000c8c:	d104      	bne.n	8000c98 <__aeabi_dadd+0x62c>
 8000c8e:	4654      	mov	r4, sl
 8000c90:	002a      	movs	r2, r5
 8000c92:	08f9      	lsrs	r1, r7, #3
 8000c94:	0743      	lsls	r3, r0, #29
 8000c96:	4319      	orrs	r1, r3
 8000c98:	0f4b      	lsrs	r3, r1, #29
 8000c9a:	00c9      	lsls	r1, r1, #3
 8000c9c:	075b      	lsls	r3, r3, #29
 8000c9e:	08c9      	lsrs	r1, r1, #3
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	0013      	movs	r3, r2
 8000ca4:	e62c      	b.n	8000900 <__aeabi_dadd+0x294>
 8000ca6:	4641      	mov	r1, r8
 8000ca8:	4329      	orrs	r1, r5
 8000caa:	d000      	beq.n	8000cae <__aeabi_dadd+0x642>
 8000cac:	e5fa      	b.n	80008a4 <__aeabi_dadd+0x238>
 8000cae:	2300      	movs	r3, #0
 8000cb0:	000a      	movs	r2, r1
 8000cb2:	2400      	movs	r4, #0
 8000cb4:	e602      	b.n	80008bc <__aeabi_dadd+0x250>
 8000cb6:	076b      	lsls	r3, r5, #29
 8000cb8:	08f9      	lsrs	r1, r7, #3
 8000cba:	4319      	orrs	r1, r3
 8000cbc:	08eb      	lsrs	r3, r5, #3
 8000cbe:	e5fd      	b.n	80008bc <__aeabi_dadd+0x250>
 8000cc0:	4663      	mov	r3, ip
 8000cc2:	08f9      	lsrs	r1, r7, #3
 8000cc4:	075b      	lsls	r3, r3, #29
 8000cc6:	4319      	orrs	r1, r3
 8000cc8:	4663      	mov	r3, ip
 8000cca:	0004      	movs	r4, r0
 8000ccc:	08db      	lsrs	r3, r3, #3
 8000cce:	e617      	b.n	8000900 <__aeabi_dadd+0x294>
 8000cd0:	003d      	movs	r5, r7
 8000cd2:	444d      	add	r5, r9
 8000cd4:	4463      	add	r3, ip
 8000cd6:	454d      	cmp	r5, r9
 8000cd8:	4189      	sbcs	r1, r1
 8000cda:	4698      	mov	r8, r3
 8000cdc:	4249      	negs	r1, r1
 8000cde:	4488      	add	r8, r1
 8000ce0:	4643      	mov	r3, r8
 8000ce2:	021b      	lsls	r3, r3, #8
 8000ce4:	d400      	bmi.n	8000ce8 <__aeabi_dadd+0x67c>
 8000ce6:	e5dd      	b.n	80008a4 <__aeabi_dadd+0x238>
 8000ce8:	4642      	mov	r2, r8
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <__aeabi_dadd+0x6d0>)
 8000cec:	2601      	movs	r6, #1
 8000cee:	401a      	ands	r2, r3
 8000cf0:	4690      	mov	r8, r2
 8000cf2:	e5d7      	b.n	80008a4 <__aeabi_dadd+0x238>
 8000cf4:	0010      	movs	r0, r2
 8000cf6:	001e      	movs	r6, r3
 8000cf8:	3820      	subs	r0, #32
 8000cfa:	40c6      	lsrs	r6, r0
 8000cfc:	2a20      	cmp	r2, #32
 8000cfe:	d005      	beq.n	8000d0c <__aeabi_dadd+0x6a0>
 8000d00:	2040      	movs	r0, #64	; 0x40
 8000d02:	1a82      	subs	r2, r0, r2
 8000d04:	4093      	lsls	r3, r2
 8000d06:	464a      	mov	r2, r9
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	4691      	mov	r9, r2
 8000d0c:	464d      	mov	r5, r9
 8000d0e:	1e6b      	subs	r3, r5, #1
 8000d10:	419d      	sbcs	r5, r3
 8000d12:	4335      	orrs	r5, r6
 8000d14:	e621      	b.n	800095a <__aeabi_dadd+0x2ee>
 8000d16:	0002      	movs	r2, r0
 8000d18:	2300      	movs	r3, #0
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	e540      	b.n	80007a0 <__aeabi_dadd+0x134>
 8000d1e:	464a      	mov	r2, r9
 8000d20:	19d5      	adds	r5, r2, r7
 8000d22:	42bd      	cmp	r5, r7
 8000d24:	4189      	sbcs	r1, r1
 8000d26:	4463      	add	r3, ip
 8000d28:	4698      	mov	r8, r3
 8000d2a:	4249      	negs	r1, r1
 8000d2c:	4488      	add	r8, r1
 8000d2e:	e5b3      	b.n	8000898 <__aeabi_dadd+0x22c>
 8000d30:	2100      	movs	r1, #0
 8000d32:	4a01      	ldr	r2, [pc, #4]	; (8000d38 <__aeabi_dadd+0x6cc>)
 8000d34:	000b      	movs	r3, r1
 8000d36:	e533      	b.n	80007a0 <__aeabi_dadd+0x134>
 8000d38:	000007ff 	.word	0x000007ff
 8000d3c:	ff7fffff 	.word	0xff7fffff

08000d40 <__aeabi_ddiv>:
 8000d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d42:	4657      	mov	r7, sl
 8000d44:	464e      	mov	r6, r9
 8000d46:	4645      	mov	r5, r8
 8000d48:	46de      	mov	lr, fp
 8000d4a:	b5e0      	push	{r5, r6, r7, lr}
 8000d4c:	4681      	mov	r9, r0
 8000d4e:	0005      	movs	r5, r0
 8000d50:	030c      	lsls	r4, r1, #12
 8000d52:	0048      	lsls	r0, r1, #1
 8000d54:	4692      	mov	sl, r2
 8000d56:	001f      	movs	r7, r3
 8000d58:	b085      	sub	sp, #20
 8000d5a:	0b24      	lsrs	r4, r4, #12
 8000d5c:	0d40      	lsrs	r0, r0, #21
 8000d5e:	0fce      	lsrs	r6, r1, #31
 8000d60:	2800      	cmp	r0, #0
 8000d62:	d059      	beq.n	8000e18 <__aeabi_ddiv+0xd8>
 8000d64:	4b87      	ldr	r3, [pc, #540]	; (8000f84 <__aeabi_ddiv+0x244>)
 8000d66:	4298      	cmp	r0, r3
 8000d68:	d100      	bne.n	8000d6c <__aeabi_ddiv+0x2c>
 8000d6a:	e098      	b.n	8000e9e <__aeabi_ddiv+0x15e>
 8000d6c:	0f6b      	lsrs	r3, r5, #29
 8000d6e:	00e4      	lsls	r4, r4, #3
 8000d70:	431c      	orrs	r4, r3
 8000d72:	2380      	movs	r3, #128	; 0x80
 8000d74:	041b      	lsls	r3, r3, #16
 8000d76:	4323      	orrs	r3, r4
 8000d78:	4698      	mov	r8, r3
 8000d7a:	4b83      	ldr	r3, [pc, #524]	; (8000f88 <__aeabi_ddiv+0x248>)
 8000d7c:	00ed      	lsls	r5, r5, #3
 8000d7e:	469b      	mov	fp, r3
 8000d80:	2300      	movs	r3, #0
 8000d82:	4699      	mov	r9, r3
 8000d84:	4483      	add	fp, r0
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	033c      	lsls	r4, r7, #12
 8000d8a:	007b      	lsls	r3, r7, #1
 8000d8c:	4650      	mov	r0, sl
 8000d8e:	0b24      	lsrs	r4, r4, #12
 8000d90:	0d5b      	lsrs	r3, r3, #21
 8000d92:	0fff      	lsrs	r7, r7, #31
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d067      	beq.n	8000e68 <__aeabi_ddiv+0x128>
 8000d98:	4a7a      	ldr	r2, [pc, #488]	; (8000f84 <__aeabi_ddiv+0x244>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d018      	beq.n	8000dd0 <__aeabi_ddiv+0x90>
 8000d9e:	497a      	ldr	r1, [pc, #488]	; (8000f88 <__aeabi_ddiv+0x248>)
 8000da0:	0f42      	lsrs	r2, r0, #29
 8000da2:	468c      	mov	ip, r1
 8000da4:	00e4      	lsls	r4, r4, #3
 8000da6:	4659      	mov	r1, fp
 8000da8:	4314      	orrs	r4, r2
 8000daa:	2280      	movs	r2, #128	; 0x80
 8000dac:	4463      	add	r3, ip
 8000dae:	0412      	lsls	r2, r2, #16
 8000db0:	1acb      	subs	r3, r1, r3
 8000db2:	4314      	orrs	r4, r2
 8000db4:	469b      	mov	fp, r3
 8000db6:	00c2      	lsls	r2, r0, #3
 8000db8:	2000      	movs	r0, #0
 8000dba:	0033      	movs	r3, r6
 8000dbc:	407b      	eors	r3, r7
 8000dbe:	469a      	mov	sl, r3
 8000dc0:	464b      	mov	r3, r9
 8000dc2:	2b0f      	cmp	r3, #15
 8000dc4:	d900      	bls.n	8000dc8 <__aeabi_ddiv+0x88>
 8000dc6:	e0ef      	b.n	8000fa8 <__aeabi_ddiv+0x268>
 8000dc8:	4970      	ldr	r1, [pc, #448]	; (8000f8c <__aeabi_ddiv+0x24c>)
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	58cb      	ldr	r3, [r1, r3]
 8000dce:	469f      	mov	pc, r3
 8000dd0:	4b6f      	ldr	r3, [pc, #444]	; (8000f90 <__aeabi_ddiv+0x250>)
 8000dd2:	4652      	mov	r2, sl
 8000dd4:	469c      	mov	ip, r3
 8000dd6:	4322      	orrs	r2, r4
 8000dd8:	44e3      	add	fp, ip
 8000dda:	2a00      	cmp	r2, #0
 8000ddc:	d000      	beq.n	8000de0 <__aeabi_ddiv+0xa0>
 8000dde:	e095      	b.n	8000f0c <__aeabi_ddiv+0x1cc>
 8000de0:	4649      	mov	r1, r9
 8000de2:	2302      	movs	r3, #2
 8000de4:	4319      	orrs	r1, r3
 8000de6:	4689      	mov	r9, r1
 8000de8:	2400      	movs	r4, #0
 8000dea:	2002      	movs	r0, #2
 8000dec:	e7e5      	b.n	8000dba <__aeabi_ddiv+0x7a>
 8000dee:	2300      	movs	r3, #0
 8000df0:	2400      	movs	r4, #0
 8000df2:	2500      	movs	r5, #0
 8000df4:	4652      	mov	r2, sl
 8000df6:	051b      	lsls	r3, r3, #20
 8000df8:	4323      	orrs	r3, r4
 8000dfa:	07d2      	lsls	r2, r2, #31
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	0028      	movs	r0, r5
 8000e00:	0019      	movs	r1, r3
 8000e02:	b005      	add	sp, #20
 8000e04:	bcf0      	pop	{r4, r5, r6, r7}
 8000e06:	46bb      	mov	fp, r7
 8000e08:	46b2      	mov	sl, r6
 8000e0a:	46a9      	mov	r9, r5
 8000e0c:	46a0      	mov	r8, r4
 8000e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e10:	2400      	movs	r4, #0
 8000e12:	2500      	movs	r5, #0
 8000e14:	4b5b      	ldr	r3, [pc, #364]	; (8000f84 <__aeabi_ddiv+0x244>)
 8000e16:	e7ed      	b.n	8000df4 <__aeabi_ddiv+0xb4>
 8000e18:	464b      	mov	r3, r9
 8000e1a:	4323      	orrs	r3, r4
 8000e1c:	4698      	mov	r8, r3
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_ddiv+0xe2>
 8000e20:	e089      	b.n	8000f36 <__aeabi_ddiv+0x1f6>
 8000e22:	2c00      	cmp	r4, #0
 8000e24:	d100      	bne.n	8000e28 <__aeabi_ddiv+0xe8>
 8000e26:	e1e0      	b.n	80011ea <__aeabi_ddiv+0x4aa>
 8000e28:	0020      	movs	r0, r4
 8000e2a:	f000 fbe5 	bl	80015f8 <__clzsi2>
 8000e2e:	0001      	movs	r1, r0
 8000e30:	0002      	movs	r2, r0
 8000e32:	390b      	subs	r1, #11
 8000e34:	231d      	movs	r3, #29
 8000e36:	1a5b      	subs	r3, r3, r1
 8000e38:	4649      	mov	r1, r9
 8000e3a:	0010      	movs	r0, r2
 8000e3c:	40d9      	lsrs	r1, r3
 8000e3e:	3808      	subs	r0, #8
 8000e40:	4084      	lsls	r4, r0
 8000e42:	000b      	movs	r3, r1
 8000e44:	464d      	mov	r5, r9
 8000e46:	4323      	orrs	r3, r4
 8000e48:	4698      	mov	r8, r3
 8000e4a:	4085      	lsls	r5, r0
 8000e4c:	4851      	ldr	r0, [pc, #324]	; (8000f94 <__aeabi_ddiv+0x254>)
 8000e4e:	033c      	lsls	r4, r7, #12
 8000e50:	1a83      	subs	r3, r0, r2
 8000e52:	469b      	mov	fp, r3
 8000e54:	2300      	movs	r3, #0
 8000e56:	4699      	mov	r9, r3
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	007b      	lsls	r3, r7, #1
 8000e5c:	4650      	mov	r0, sl
 8000e5e:	0b24      	lsrs	r4, r4, #12
 8000e60:	0d5b      	lsrs	r3, r3, #21
 8000e62:	0fff      	lsrs	r7, r7, #31
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d197      	bne.n	8000d98 <__aeabi_ddiv+0x58>
 8000e68:	4652      	mov	r2, sl
 8000e6a:	4322      	orrs	r2, r4
 8000e6c:	d055      	beq.n	8000f1a <__aeabi_ddiv+0x1da>
 8000e6e:	2c00      	cmp	r4, #0
 8000e70:	d100      	bne.n	8000e74 <__aeabi_ddiv+0x134>
 8000e72:	e1ca      	b.n	800120a <__aeabi_ddiv+0x4ca>
 8000e74:	0020      	movs	r0, r4
 8000e76:	f000 fbbf 	bl	80015f8 <__clzsi2>
 8000e7a:	0002      	movs	r2, r0
 8000e7c:	3a0b      	subs	r2, #11
 8000e7e:	231d      	movs	r3, #29
 8000e80:	0001      	movs	r1, r0
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	4652      	mov	r2, sl
 8000e86:	3908      	subs	r1, #8
 8000e88:	40da      	lsrs	r2, r3
 8000e8a:	408c      	lsls	r4, r1
 8000e8c:	4314      	orrs	r4, r2
 8000e8e:	4652      	mov	r2, sl
 8000e90:	408a      	lsls	r2, r1
 8000e92:	4b41      	ldr	r3, [pc, #260]	; (8000f98 <__aeabi_ddiv+0x258>)
 8000e94:	4458      	add	r0, fp
 8000e96:	469b      	mov	fp, r3
 8000e98:	4483      	add	fp, r0
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	e78d      	b.n	8000dba <__aeabi_ddiv+0x7a>
 8000e9e:	464b      	mov	r3, r9
 8000ea0:	4323      	orrs	r3, r4
 8000ea2:	4698      	mov	r8, r3
 8000ea4:	d140      	bne.n	8000f28 <__aeabi_ddiv+0x1e8>
 8000ea6:	2308      	movs	r3, #8
 8000ea8:	4699      	mov	r9, r3
 8000eaa:	3b06      	subs	r3, #6
 8000eac:	2500      	movs	r5, #0
 8000eae:	4683      	mov	fp, r0
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	e769      	b.n	8000d88 <__aeabi_ddiv+0x48>
 8000eb4:	46b2      	mov	sl, r6
 8000eb6:	9b00      	ldr	r3, [sp, #0]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d0a9      	beq.n	8000e10 <__aeabi_ddiv+0xd0>
 8000ebc:	2b03      	cmp	r3, #3
 8000ebe:	d100      	bne.n	8000ec2 <__aeabi_ddiv+0x182>
 8000ec0:	e211      	b.n	80012e6 <__aeabi_ddiv+0x5a6>
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d093      	beq.n	8000dee <__aeabi_ddiv+0xae>
 8000ec6:	4a35      	ldr	r2, [pc, #212]	; (8000f9c <__aeabi_ddiv+0x25c>)
 8000ec8:	445a      	add	r2, fp
 8000eca:	2a00      	cmp	r2, #0
 8000ecc:	dc00      	bgt.n	8000ed0 <__aeabi_ddiv+0x190>
 8000ece:	e13c      	b.n	800114a <__aeabi_ddiv+0x40a>
 8000ed0:	076b      	lsls	r3, r5, #29
 8000ed2:	d000      	beq.n	8000ed6 <__aeabi_ddiv+0x196>
 8000ed4:	e1a7      	b.n	8001226 <__aeabi_ddiv+0x4e6>
 8000ed6:	08ed      	lsrs	r5, r5, #3
 8000ed8:	4643      	mov	r3, r8
 8000eda:	01db      	lsls	r3, r3, #7
 8000edc:	d506      	bpl.n	8000eec <__aeabi_ddiv+0x1ac>
 8000ede:	4642      	mov	r2, r8
 8000ee0:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <__aeabi_ddiv+0x260>)
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	4690      	mov	r8, r2
 8000ee6:	2280      	movs	r2, #128	; 0x80
 8000ee8:	00d2      	lsls	r2, r2, #3
 8000eea:	445a      	add	r2, fp
 8000eec:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <__aeabi_ddiv+0x264>)
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	dc8e      	bgt.n	8000e10 <__aeabi_ddiv+0xd0>
 8000ef2:	4643      	mov	r3, r8
 8000ef4:	0552      	lsls	r2, r2, #21
 8000ef6:	0758      	lsls	r0, r3, #29
 8000ef8:	025c      	lsls	r4, r3, #9
 8000efa:	4305      	orrs	r5, r0
 8000efc:	0b24      	lsrs	r4, r4, #12
 8000efe:	0d53      	lsrs	r3, r2, #21
 8000f00:	e778      	b.n	8000df4 <__aeabi_ddiv+0xb4>
 8000f02:	46ba      	mov	sl, r7
 8000f04:	46a0      	mov	r8, r4
 8000f06:	0015      	movs	r5, r2
 8000f08:	9000      	str	r0, [sp, #0]
 8000f0a:	e7d4      	b.n	8000eb6 <__aeabi_ddiv+0x176>
 8000f0c:	464a      	mov	r2, r9
 8000f0e:	2303      	movs	r3, #3
 8000f10:	431a      	orrs	r2, r3
 8000f12:	4691      	mov	r9, r2
 8000f14:	2003      	movs	r0, #3
 8000f16:	4652      	mov	r2, sl
 8000f18:	e74f      	b.n	8000dba <__aeabi_ddiv+0x7a>
 8000f1a:	4649      	mov	r1, r9
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	4319      	orrs	r1, r3
 8000f20:	4689      	mov	r9, r1
 8000f22:	2400      	movs	r4, #0
 8000f24:	2001      	movs	r0, #1
 8000f26:	e748      	b.n	8000dba <__aeabi_ddiv+0x7a>
 8000f28:	230c      	movs	r3, #12
 8000f2a:	4699      	mov	r9, r3
 8000f2c:	3b09      	subs	r3, #9
 8000f2e:	46a0      	mov	r8, r4
 8000f30:	4683      	mov	fp, r0
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	e728      	b.n	8000d88 <__aeabi_ddiv+0x48>
 8000f36:	2304      	movs	r3, #4
 8000f38:	4699      	mov	r9, r3
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	469b      	mov	fp, r3
 8000f3e:	3301      	adds	r3, #1
 8000f40:	2500      	movs	r5, #0
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	e720      	b.n	8000d88 <__aeabi_ddiv+0x48>
 8000f46:	2300      	movs	r3, #0
 8000f48:	2480      	movs	r4, #128	; 0x80
 8000f4a:	469a      	mov	sl, r3
 8000f4c:	2500      	movs	r5, #0
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <__aeabi_ddiv+0x244>)
 8000f50:	0324      	lsls	r4, r4, #12
 8000f52:	e74f      	b.n	8000df4 <__aeabi_ddiv+0xb4>
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	4641      	mov	r1, r8
 8000f58:	031b      	lsls	r3, r3, #12
 8000f5a:	4219      	tst	r1, r3
 8000f5c:	d008      	beq.n	8000f70 <__aeabi_ddiv+0x230>
 8000f5e:	421c      	tst	r4, r3
 8000f60:	d106      	bne.n	8000f70 <__aeabi_ddiv+0x230>
 8000f62:	431c      	orrs	r4, r3
 8000f64:	0324      	lsls	r4, r4, #12
 8000f66:	46ba      	mov	sl, r7
 8000f68:	0015      	movs	r5, r2
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <__aeabi_ddiv+0x244>)
 8000f6c:	0b24      	lsrs	r4, r4, #12
 8000f6e:	e741      	b.n	8000df4 <__aeabi_ddiv+0xb4>
 8000f70:	2480      	movs	r4, #128	; 0x80
 8000f72:	4643      	mov	r3, r8
 8000f74:	0324      	lsls	r4, r4, #12
 8000f76:	431c      	orrs	r4, r3
 8000f78:	0324      	lsls	r4, r4, #12
 8000f7a:	46b2      	mov	sl, r6
 8000f7c:	4b01      	ldr	r3, [pc, #4]	; (8000f84 <__aeabi_ddiv+0x244>)
 8000f7e:	0b24      	lsrs	r4, r4, #12
 8000f80:	e738      	b.n	8000df4 <__aeabi_ddiv+0xb4>
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	000007ff 	.word	0x000007ff
 8000f88:	fffffc01 	.word	0xfffffc01
 8000f8c:	0800b818 	.word	0x0800b818
 8000f90:	fffff801 	.word	0xfffff801
 8000f94:	fffffc0d 	.word	0xfffffc0d
 8000f98:	000003f3 	.word	0x000003f3
 8000f9c:	000003ff 	.word	0x000003ff
 8000fa0:	feffffff 	.word	0xfeffffff
 8000fa4:	000007fe 	.word	0x000007fe
 8000fa8:	4544      	cmp	r4, r8
 8000faa:	d200      	bcs.n	8000fae <__aeabi_ddiv+0x26e>
 8000fac:	e116      	b.n	80011dc <__aeabi_ddiv+0x49c>
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_ddiv+0x272>
 8000fb0:	e111      	b.n	80011d6 <__aeabi_ddiv+0x496>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	425b      	negs	r3, r3
 8000fb6:	469c      	mov	ip, r3
 8000fb8:	002e      	movs	r6, r5
 8000fba:	4640      	mov	r0, r8
 8000fbc:	2500      	movs	r5, #0
 8000fbe:	44e3      	add	fp, ip
 8000fc0:	0223      	lsls	r3, r4, #8
 8000fc2:	0e14      	lsrs	r4, r2, #24
 8000fc4:	431c      	orrs	r4, r3
 8000fc6:	0c1b      	lsrs	r3, r3, #16
 8000fc8:	4699      	mov	r9, r3
 8000fca:	0423      	lsls	r3, r4, #16
 8000fcc:	0c1f      	lsrs	r7, r3, #16
 8000fce:	0212      	lsls	r2, r2, #8
 8000fd0:	4649      	mov	r1, r9
 8000fd2:	9200      	str	r2, [sp, #0]
 8000fd4:	9701      	str	r7, [sp, #4]
 8000fd6:	f7ff f92f 	bl	8000238 <__aeabi_uidivmod>
 8000fda:	0002      	movs	r2, r0
 8000fdc:	437a      	muls	r2, r7
 8000fde:	040b      	lsls	r3, r1, #16
 8000fe0:	0c31      	lsrs	r1, r6, #16
 8000fe2:	4680      	mov	r8, r0
 8000fe4:	4319      	orrs	r1, r3
 8000fe6:	428a      	cmp	r2, r1
 8000fe8:	d90b      	bls.n	8001002 <__aeabi_ddiv+0x2c2>
 8000fea:	2301      	movs	r3, #1
 8000fec:	425b      	negs	r3, r3
 8000fee:	469c      	mov	ip, r3
 8000ff0:	1909      	adds	r1, r1, r4
 8000ff2:	44e0      	add	r8, ip
 8000ff4:	428c      	cmp	r4, r1
 8000ff6:	d804      	bhi.n	8001002 <__aeabi_ddiv+0x2c2>
 8000ff8:	428a      	cmp	r2, r1
 8000ffa:	d902      	bls.n	8001002 <__aeabi_ddiv+0x2c2>
 8000ffc:	1e83      	subs	r3, r0, #2
 8000ffe:	4698      	mov	r8, r3
 8001000:	1909      	adds	r1, r1, r4
 8001002:	1a88      	subs	r0, r1, r2
 8001004:	4649      	mov	r1, r9
 8001006:	f7ff f917 	bl	8000238 <__aeabi_uidivmod>
 800100a:	0409      	lsls	r1, r1, #16
 800100c:	468c      	mov	ip, r1
 800100e:	0431      	lsls	r1, r6, #16
 8001010:	4666      	mov	r6, ip
 8001012:	9a01      	ldr	r2, [sp, #4]
 8001014:	0c09      	lsrs	r1, r1, #16
 8001016:	4342      	muls	r2, r0
 8001018:	0003      	movs	r3, r0
 800101a:	4331      	orrs	r1, r6
 800101c:	428a      	cmp	r2, r1
 800101e:	d904      	bls.n	800102a <__aeabi_ddiv+0x2ea>
 8001020:	1909      	adds	r1, r1, r4
 8001022:	3b01      	subs	r3, #1
 8001024:	428c      	cmp	r4, r1
 8001026:	d800      	bhi.n	800102a <__aeabi_ddiv+0x2ea>
 8001028:	e111      	b.n	800124e <__aeabi_ddiv+0x50e>
 800102a:	1a89      	subs	r1, r1, r2
 800102c:	4642      	mov	r2, r8
 800102e:	9e00      	ldr	r6, [sp, #0]
 8001030:	0412      	lsls	r2, r2, #16
 8001032:	431a      	orrs	r2, r3
 8001034:	0c33      	lsrs	r3, r6, #16
 8001036:	001f      	movs	r7, r3
 8001038:	0c10      	lsrs	r0, r2, #16
 800103a:	4690      	mov	r8, r2
 800103c:	9302      	str	r3, [sp, #8]
 800103e:	0413      	lsls	r3, r2, #16
 8001040:	0432      	lsls	r2, r6, #16
 8001042:	0c16      	lsrs	r6, r2, #16
 8001044:	0032      	movs	r2, r6
 8001046:	0c1b      	lsrs	r3, r3, #16
 8001048:	435a      	muls	r2, r3
 800104a:	9603      	str	r6, [sp, #12]
 800104c:	437b      	muls	r3, r7
 800104e:	4346      	muls	r6, r0
 8001050:	4378      	muls	r0, r7
 8001052:	0c17      	lsrs	r7, r2, #16
 8001054:	46bc      	mov	ip, r7
 8001056:	199b      	adds	r3, r3, r6
 8001058:	4463      	add	r3, ip
 800105a:	429e      	cmp	r6, r3
 800105c:	d903      	bls.n	8001066 <__aeabi_ddiv+0x326>
 800105e:	2680      	movs	r6, #128	; 0x80
 8001060:	0276      	lsls	r6, r6, #9
 8001062:	46b4      	mov	ip, r6
 8001064:	4460      	add	r0, ip
 8001066:	0c1e      	lsrs	r6, r3, #16
 8001068:	1830      	adds	r0, r6, r0
 800106a:	0416      	lsls	r6, r2, #16
 800106c:	041b      	lsls	r3, r3, #16
 800106e:	0c36      	lsrs	r6, r6, #16
 8001070:	199e      	adds	r6, r3, r6
 8001072:	4281      	cmp	r1, r0
 8001074:	d200      	bcs.n	8001078 <__aeabi_ddiv+0x338>
 8001076:	e09c      	b.n	80011b2 <__aeabi_ddiv+0x472>
 8001078:	d100      	bne.n	800107c <__aeabi_ddiv+0x33c>
 800107a:	e097      	b.n	80011ac <__aeabi_ddiv+0x46c>
 800107c:	1bae      	subs	r6, r5, r6
 800107e:	1a09      	subs	r1, r1, r0
 8001080:	42b5      	cmp	r5, r6
 8001082:	4180      	sbcs	r0, r0
 8001084:	4240      	negs	r0, r0
 8001086:	1a08      	subs	r0, r1, r0
 8001088:	4284      	cmp	r4, r0
 800108a:	d100      	bne.n	800108e <__aeabi_ddiv+0x34e>
 800108c:	e111      	b.n	80012b2 <__aeabi_ddiv+0x572>
 800108e:	4649      	mov	r1, r9
 8001090:	f7ff f8d2 	bl	8000238 <__aeabi_uidivmod>
 8001094:	9a01      	ldr	r2, [sp, #4]
 8001096:	040b      	lsls	r3, r1, #16
 8001098:	4342      	muls	r2, r0
 800109a:	0c31      	lsrs	r1, r6, #16
 800109c:	0005      	movs	r5, r0
 800109e:	4319      	orrs	r1, r3
 80010a0:	428a      	cmp	r2, r1
 80010a2:	d907      	bls.n	80010b4 <__aeabi_ddiv+0x374>
 80010a4:	1909      	adds	r1, r1, r4
 80010a6:	3d01      	subs	r5, #1
 80010a8:	428c      	cmp	r4, r1
 80010aa:	d803      	bhi.n	80010b4 <__aeabi_ddiv+0x374>
 80010ac:	428a      	cmp	r2, r1
 80010ae:	d901      	bls.n	80010b4 <__aeabi_ddiv+0x374>
 80010b0:	1e85      	subs	r5, r0, #2
 80010b2:	1909      	adds	r1, r1, r4
 80010b4:	1a88      	subs	r0, r1, r2
 80010b6:	4649      	mov	r1, r9
 80010b8:	f7ff f8be 	bl	8000238 <__aeabi_uidivmod>
 80010bc:	0409      	lsls	r1, r1, #16
 80010be:	468c      	mov	ip, r1
 80010c0:	0431      	lsls	r1, r6, #16
 80010c2:	4666      	mov	r6, ip
 80010c4:	9a01      	ldr	r2, [sp, #4]
 80010c6:	0c09      	lsrs	r1, r1, #16
 80010c8:	4342      	muls	r2, r0
 80010ca:	0003      	movs	r3, r0
 80010cc:	4331      	orrs	r1, r6
 80010ce:	428a      	cmp	r2, r1
 80010d0:	d907      	bls.n	80010e2 <__aeabi_ddiv+0x3a2>
 80010d2:	1909      	adds	r1, r1, r4
 80010d4:	3b01      	subs	r3, #1
 80010d6:	428c      	cmp	r4, r1
 80010d8:	d803      	bhi.n	80010e2 <__aeabi_ddiv+0x3a2>
 80010da:	428a      	cmp	r2, r1
 80010dc:	d901      	bls.n	80010e2 <__aeabi_ddiv+0x3a2>
 80010de:	1e83      	subs	r3, r0, #2
 80010e0:	1909      	adds	r1, r1, r4
 80010e2:	9e03      	ldr	r6, [sp, #12]
 80010e4:	1a89      	subs	r1, r1, r2
 80010e6:	0032      	movs	r2, r6
 80010e8:	042d      	lsls	r5, r5, #16
 80010ea:	431d      	orrs	r5, r3
 80010ec:	9f02      	ldr	r7, [sp, #8]
 80010ee:	042b      	lsls	r3, r5, #16
 80010f0:	0c1b      	lsrs	r3, r3, #16
 80010f2:	435a      	muls	r2, r3
 80010f4:	437b      	muls	r3, r7
 80010f6:	469c      	mov	ip, r3
 80010f8:	0c28      	lsrs	r0, r5, #16
 80010fa:	4346      	muls	r6, r0
 80010fc:	0c13      	lsrs	r3, r2, #16
 80010fe:	44b4      	add	ip, r6
 8001100:	4463      	add	r3, ip
 8001102:	4378      	muls	r0, r7
 8001104:	429e      	cmp	r6, r3
 8001106:	d903      	bls.n	8001110 <__aeabi_ddiv+0x3d0>
 8001108:	2680      	movs	r6, #128	; 0x80
 800110a:	0276      	lsls	r6, r6, #9
 800110c:	46b4      	mov	ip, r6
 800110e:	4460      	add	r0, ip
 8001110:	0c1e      	lsrs	r6, r3, #16
 8001112:	0412      	lsls	r2, r2, #16
 8001114:	041b      	lsls	r3, r3, #16
 8001116:	0c12      	lsrs	r2, r2, #16
 8001118:	1830      	adds	r0, r6, r0
 800111a:	189b      	adds	r3, r3, r2
 800111c:	4281      	cmp	r1, r0
 800111e:	d306      	bcc.n	800112e <__aeabi_ddiv+0x3ee>
 8001120:	d002      	beq.n	8001128 <__aeabi_ddiv+0x3e8>
 8001122:	2301      	movs	r3, #1
 8001124:	431d      	orrs	r5, r3
 8001126:	e6ce      	b.n	8000ec6 <__aeabi_ddiv+0x186>
 8001128:	2b00      	cmp	r3, #0
 800112a:	d100      	bne.n	800112e <__aeabi_ddiv+0x3ee>
 800112c:	e6cb      	b.n	8000ec6 <__aeabi_ddiv+0x186>
 800112e:	1861      	adds	r1, r4, r1
 8001130:	1e6e      	subs	r6, r5, #1
 8001132:	42a1      	cmp	r1, r4
 8001134:	d200      	bcs.n	8001138 <__aeabi_ddiv+0x3f8>
 8001136:	e0a4      	b.n	8001282 <__aeabi_ddiv+0x542>
 8001138:	4281      	cmp	r1, r0
 800113a:	d200      	bcs.n	800113e <__aeabi_ddiv+0x3fe>
 800113c:	e0c9      	b.n	80012d2 <__aeabi_ddiv+0x592>
 800113e:	d100      	bne.n	8001142 <__aeabi_ddiv+0x402>
 8001140:	e0d9      	b.n	80012f6 <__aeabi_ddiv+0x5b6>
 8001142:	0035      	movs	r5, r6
 8001144:	e7ed      	b.n	8001122 <__aeabi_ddiv+0x3e2>
 8001146:	2501      	movs	r5, #1
 8001148:	426d      	negs	r5, r5
 800114a:	2101      	movs	r1, #1
 800114c:	1a89      	subs	r1, r1, r2
 800114e:	2938      	cmp	r1, #56	; 0x38
 8001150:	dd00      	ble.n	8001154 <__aeabi_ddiv+0x414>
 8001152:	e64c      	b.n	8000dee <__aeabi_ddiv+0xae>
 8001154:	291f      	cmp	r1, #31
 8001156:	dc00      	bgt.n	800115a <__aeabi_ddiv+0x41a>
 8001158:	e07f      	b.n	800125a <__aeabi_ddiv+0x51a>
 800115a:	231f      	movs	r3, #31
 800115c:	425b      	negs	r3, r3
 800115e:	1a9a      	subs	r2, r3, r2
 8001160:	4643      	mov	r3, r8
 8001162:	40d3      	lsrs	r3, r2
 8001164:	2920      	cmp	r1, #32
 8001166:	d004      	beq.n	8001172 <__aeabi_ddiv+0x432>
 8001168:	4644      	mov	r4, r8
 800116a:	4a65      	ldr	r2, [pc, #404]	; (8001300 <__aeabi_ddiv+0x5c0>)
 800116c:	445a      	add	r2, fp
 800116e:	4094      	lsls	r4, r2
 8001170:	4325      	orrs	r5, r4
 8001172:	1e6a      	subs	r2, r5, #1
 8001174:	4195      	sbcs	r5, r2
 8001176:	2207      	movs	r2, #7
 8001178:	432b      	orrs	r3, r5
 800117a:	0015      	movs	r5, r2
 800117c:	2400      	movs	r4, #0
 800117e:	401d      	ands	r5, r3
 8001180:	421a      	tst	r2, r3
 8001182:	d100      	bne.n	8001186 <__aeabi_ddiv+0x446>
 8001184:	e0a1      	b.n	80012ca <__aeabi_ddiv+0x58a>
 8001186:	220f      	movs	r2, #15
 8001188:	2400      	movs	r4, #0
 800118a:	401a      	ands	r2, r3
 800118c:	2a04      	cmp	r2, #4
 800118e:	d100      	bne.n	8001192 <__aeabi_ddiv+0x452>
 8001190:	e098      	b.n	80012c4 <__aeabi_ddiv+0x584>
 8001192:	1d1a      	adds	r2, r3, #4
 8001194:	429a      	cmp	r2, r3
 8001196:	419b      	sbcs	r3, r3
 8001198:	425b      	negs	r3, r3
 800119a:	18e4      	adds	r4, r4, r3
 800119c:	0013      	movs	r3, r2
 800119e:	0222      	lsls	r2, r4, #8
 80011a0:	d400      	bmi.n	80011a4 <__aeabi_ddiv+0x464>
 80011a2:	e08f      	b.n	80012c4 <__aeabi_ddiv+0x584>
 80011a4:	2301      	movs	r3, #1
 80011a6:	2400      	movs	r4, #0
 80011a8:	2500      	movs	r5, #0
 80011aa:	e623      	b.n	8000df4 <__aeabi_ddiv+0xb4>
 80011ac:	42b5      	cmp	r5, r6
 80011ae:	d300      	bcc.n	80011b2 <__aeabi_ddiv+0x472>
 80011b0:	e764      	b.n	800107c <__aeabi_ddiv+0x33c>
 80011b2:	4643      	mov	r3, r8
 80011b4:	1e5a      	subs	r2, r3, #1
 80011b6:	9b00      	ldr	r3, [sp, #0]
 80011b8:	469c      	mov	ip, r3
 80011ba:	4465      	add	r5, ip
 80011bc:	001f      	movs	r7, r3
 80011be:	429d      	cmp	r5, r3
 80011c0:	419b      	sbcs	r3, r3
 80011c2:	425b      	negs	r3, r3
 80011c4:	191b      	adds	r3, r3, r4
 80011c6:	18c9      	adds	r1, r1, r3
 80011c8:	428c      	cmp	r4, r1
 80011ca:	d23a      	bcs.n	8001242 <__aeabi_ddiv+0x502>
 80011cc:	4288      	cmp	r0, r1
 80011ce:	d863      	bhi.n	8001298 <__aeabi_ddiv+0x558>
 80011d0:	d060      	beq.n	8001294 <__aeabi_ddiv+0x554>
 80011d2:	4690      	mov	r8, r2
 80011d4:	e752      	b.n	800107c <__aeabi_ddiv+0x33c>
 80011d6:	42aa      	cmp	r2, r5
 80011d8:	d900      	bls.n	80011dc <__aeabi_ddiv+0x49c>
 80011da:	e6ea      	b.n	8000fb2 <__aeabi_ddiv+0x272>
 80011dc:	4643      	mov	r3, r8
 80011de:	07de      	lsls	r6, r3, #31
 80011e0:	0858      	lsrs	r0, r3, #1
 80011e2:	086b      	lsrs	r3, r5, #1
 80011e4:	431e      	orrs	r6, r3
 80011e6:	07ed      	lsls	r5, r5, #31
 80011e8:	e6ea      	b.n	8000fc0 <__aeabi_ddiv+0x280>
 80011ea:	4648      	mov	r0, r9
 80011ec:	f000 fa04 	bl	80015f8 <__clzsi2>
 80011f0:	0001      	movs	r1, r0
 80011f2:	0002      	movs	r2, r0
 80011f4:	3115      	adds	r1, #21
 80011f6:	3220      	adds	r2, #32
 80011f8:	291c      	cmp	r1, #28
 80011fa:	dc00      	bgt.n	80011fe <__aeabi_ddiv+0x4be>
 80011fc:	e61a      	b.n	8000e34 <__aeabi_ddiv+0xf4>
 80011fe:	464b      	mov	r3, r9
 8001200:	3808      	subs	r0, #8
 8001202:	4083      	lsls	r3, r0
 8001204:	2500      	movs	r5, #0
 8001206:	4698      	mov	r8, r3
 8001208:	e620      	b.n	8000e4c <__aeabi_ddiv+0x10c>
 800120a:	f000 f9f5 	bl	80015f8 <__clzsi2>
 800120e:	0003      	movs	r3, r0
 8001210:	001a      	movs	r2, r3
 8001212:	3215      	adds	r2, #21
 8001214:	3020      	adds	r0, #32
 8001216:	2a1c      	cmp	r2, #28
 8001218:	dc00      	bgt.n	800121c <__aeabi_ddiv+0x4dc>
 800121a:	e630      	b.n	8000e7e <__aeabi_ddiv+0x13e>
 800121c:	4654      	mov	r4, sl
 800121e:	3b08      	subs	r3, #8
 8001220:	2200      	movs	r2, #0
 8001222:	409c      	lsls	r4, r3
 8001224:	e635      	b.n	8000e92 <__aeabi_ddiv+0x152>
 8001226:	230f      	movs	r3, #15
 8001228:	402b      	ands	r3, r5
 800122a:	2b04      	cmp	r3, #4
 800122c:	d100      	bne.n	8001230 <__aeabi_ddiv+0x4f0>
 800122e:	e652      	b.n	8000ed6 <__aeabi_ddiv+0x196>
 8001230:	2305      	movs	r3, #5
 8001232:	425b      	negs	r3, r3
 8001234:	42ab      	cmp	r3, r5
 8001236:	419b      	sbcs	r3, r3
 8001238:	3504      	adds	r5, #4
 800123a:	425b      	negs	r3, r3
 800123c:	08ed      	lsrs	r5, r5, #3
 800123e:	4498      	add	r8, r3
 8001240:	e64a      	b.n	8000ed8 <__aeabi_ddiv+0x198>
 8001242:	428c      	cmp	r4, r1
 8001244:	d1c5      	bne.n	80011d2 <__aeabi_ddiv+0x492>
 8001246:	42af      	cmp	r7, r5
 8001248:	d9c0      	bls.n	80011cc <__aeabi_ddiv+0x48c>
 800124a:	4690      	mov	r8, r2
 800124c:	e716      	b.n	800107c <__aeabi_ddiv+0x33c>
 800124e:	428a      	cmp	r2, r1
 8001250:	d800      	bhi.n	8001254 <__aeabi_ddiv+0x514>
 8001252:	e6ea      	b.n	800102a <__aeabi_ddiv+0x2ea>
 8001254:	1e83      	subs	r3, r0, #2
 8001256:	1909      	adds	r1, r1, r4
 8001258:	e6e7      	b.n	800102a <__aeabi_ddiv+0x2ea>
 800125a:	4a2a      	ldr	r2, [pc, #168]	; (8001304 <__aeabi_ddiv+0x5c4>)
 800125c:	0028      	movs	r0, r5
 800125e:	445a      	add	r2, fp
 8001260:	4643      	mov	r3, r8
 8001262:	4095      	lsls	r5, r2
 8001264:	4093      	lsls	r3, r2
 8001266:	40c8      	lsrs	r0, r1
 8001268:	1e6a      	subs	r2, r5, #1
 800126a:	4195      	sbcs	r5, r2
 800126c:	4644      	mov	r4, r8
 800126e:	4303      	orrs	r3, r0
 8001270:	432b      	orrs	r3, r5
 8001272:	40cc      	lsrs	r4, r1
 8001274:	075a      	lsls	r2, r3, #29
 8001276:	d092      	beq.n	800119e <__aeabi_ddiv+0x45e>
 8001278:	220f      	movs	r2, #15
 800127a:	401a      	ands	r2, r3
 800127c:	2a04      	cmp	r2, #4
 800127e:	d188      	bne.n	8001192 <__aeabi_ddiv+0x452>
 8001280:	e78d      	b.n	800119e <__aeabi_ddiv+0x45e>
 8001282:	0035      	movs	r5, r6
 8001284:	4281      	cmp	r1, r0
 8001286:	d000      	beq.n	800128a <__aeabi_ddiv+0x54a>
 8001288:	e74b      	b.n	8001122 <__aeabi_ddiv+0x3e2>
 800128a:	9a00      	ldr	r2, [sp, #0]
 800128c:	4293      	cmp	r3, r2
 800128e:	d000      	beq.n	8001292 <__aeabi_ddiv+0x552>
 8001290:	e747      	b.n	8001122 <__aeabi_ddiv+0x3e2>
 8001292:	e618      	b.n	8000ec6 <__aeabi_ddiv+0x186>
 8001294:	42ae      	cmp	r6, r5
 8001296:	d99c      	bls.n	80011d2 <__aeabi_ddiv+0x492>
 8001298:	2302      	movs	r3, #2
 800129a:	425b      	negs	r3, r3
 800129c:	469c      	mov	ip, r3
 800129e:	9b00      	ldr	r3, [sp, #0]
 80012a0:	44e0      	add	r8, ip
 80012a2:	469c      	mov	ip, r3
 80012a4:	4465      	add	r5, ip
 80012a6:	429d      	cmp	r5, r3
 80012a8:	419b      	sbcs	r3, r3
 80012aa:	425b      	negs	r3, r3
 80012ac:	191b      	adds	r3, r3, r4
 80012ae:	18c9      	adds	r1, r1, r3
 80012b0:	e6e4      	b.n	800107c <__aeabi_ddiv+0x33c>
 80012b2:	4a15      	ldr	r2, [pc, #84]	; (8001308 <__aeabi_ddiv+0x5c8>)
 80012b4:	445a      	add	r2, fp
 80012b6:	2a00      	cmp	r2, #0
 80012b8:	dc00      	bgt.n	80012bc <__aeabi_ddiv+0x57c>
 80012ba:	e744      	b.n	8001146 <__aeabi_ddiv+0x406>
 80012bc:	2301      	movs	r3, #1
 80012be:	2500      	movs	r5, #0
 80012c0:	4498      	add	r8, r3
 80012c2:	e609      	b.n	8000ed8 <__aeabi_ddiv+0x198>
 80012c4:	0765      	lsls	r5, r4, #29
 80012c6:	0264      	lsls	r4, r4, #9
 80012c8:	0b24      	lsrs	r4, r4, #12
 80012ca:	08db      	lsrs	r3, r3, #3
 80012cc:	431d      	orrs	r5, r3
 80012ce:	2300      	movs	r3, #0
 80012d0:	e590      	b.n	8000df4 <__aeabi_ddiv+0xb4>
 80012d2:	9e00      	ldr	r6, [sp, #0]
 80012d4:	3d02      	subs	r5, #2
 80012d6:	0072      	lsls	r2, r6, #1
 80012d8:	42b2      	cmp	r2, r6
 80012da:	41bf      	sbcs	r7, r7
 80012dc:	427f      	negs	r7, r7
 80012de:	193c      	adds	r4, r7, r4
 80012e0:	1909      	adds	r1, r1, r4
 80012e2:	9200      	str	r2, [sp, #0]
 80012e4:	e7ce      	b.n	8001284 <__aeabi_ddiv+0x544>
 80012e6:	2480      	movs	r4, #128	; 0x80
 80012e8:	4643      	mov	r3, r8
 80012ea:	0324      	lsls	r4, r4, #12
 80012ec:	431c      	orrs	r4, r3
 80012ee:	0324      	lsls	r4, r4, #12
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <__aeabi_ddiv+0x5cc>)
 80012f2:	0b24      	lsrs	r4, r4, #12
 80012f4:	e57e      	b.n	8000df4 <__aeabi_ddiv+0xb4>
 80012f6:	9a00      	ldr	r2, [sp, #0]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d3ea      	bcc.n	80012d2 <__aeabi_ddiv+0x592>
 80012fc:	0035      	movs	r5, r6
 80012fe:	e7c4      	b.n	800128a <__aeabi_ddiv+0x54a>
 8001300:	0000043e 	.word	0x0000043e
 8001304:	0000041e 	.word	0x0000041e
 8001308:	000003ff 	.word	0x000003ff
 800130c:	000007ff 	.word	0x000007ff

08001310 <__eqdf2>:
 8001310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001312:	464f      	mov	r7, r9
 8001314:	4646      	mov	r6, r8
 8001316:	46d6      	mov	lr, sl
 8001318:	4694      	mov	ip, r2
 800131a:	4691      	mov	r9, r2
 800131c:	031a      	lsls	r2, r3, #12
 800131e:	0b12      	lsrs	r2, r2, #12
 8001320:	4d18      	ldr	r5, [pc, #96]	; (8001384 <__eqdf2+0x74>)
 8001322:	b5c0      	push	{r6, r7, lr}
 8001324:	004c      	lsls	r4, r1, #1
 8001326:	030f      	lsls	r7, r1, #12
 8001328:	4692      	mov	sl, r2
 800132a:	005a      	lsls	r2, r3, #1
 800132c:	0006      	movs	r6, r0
 800132e:	4680      	mov	r8, r0
 8001330:	0b3f      	lsrs	r7, r7, #12
 8001332:	2001      	movs	r0, #1
 8001334:	0d64      	lsrs	r4, r4, #21
 8001336:	0fc9      	lsrs	r1, r1, #31
 8001338:	0d52      	lsrs	r2, r2, #21
 800133a:	0fdb      	lsrs	r3, r3, #31
 800133c:	42ac      	cmp	r4, r5
 800133e:	d00a      	beq.n	8001356 <__eqdf2+0x46>
 8001340:	42aa      	cmp	r2, r5
 8001342:	d003      	beq.n	800134c <__eqdf2+0x3c>
 8001344:	4294      	cmp	r4, r2
 8001346:	d101      	bne.n	800134c <__eqdf2+0x3c>
 8001348:	4557      	cmp	r7, sl
 800134a:	d00d      	beq.n	8001368 <__eqdf2+0x58>
 800134c:	bce0      	pop	{r5, r6, r7}
 800134e:	46ba      	mov	sl, r7
 8001350:	46b1      	mov	r9, r6
 8001352:	46a8      	mov	r8, r5
 8001354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001356:	003d      	movs	r5, r7
 8001358:	4335      	orrs	r5, r6
 800135a:	d1f7      	bne.n	800134c <__eqdf2+0x3c>
 800135c:	42a2      	cmp	r2, r4
 800135e:	d1f5      	bne.n	800134c <__eqdf2+0x3c>
 8001360:	4652      	mov	r2, sl
 8001362:	4665      	mov	r5, ip
 8001364:	432a      	orrs	r2, r5
 8001366:	d1f1      	bne.n	800134c <__eqdf2+0x3c>
 8001368:	2001      	movs	r0, #1
 800136a:	45c8      	cmp	r8, r9
 800136c:	d1ee      	bne.n	800134c <__eqdf2+0x3c>
 800136e:	4299      	cmp	r1, r3
 8001370:	d006      	beq.n	8001380 <__eqdf2+0x70>
 8001372:	2c00      	cmp	r4, #0
 8001374:	d1ea      	bne.n	800134c <__eqdf2+0x3c>
 8001376:	433e      	orrs	r6, r7
 8001378:	0030      	movs	r0, r6
 800137a:	1e46      	subs	r6, r0, #1
 800137c:	41b0      	sbcs	r0, r6
 800137e:	e7e5      	b.n	800134c <__eqdf2+0x3c>
 8001380:	2000      	movs	r0, #0
 8001382:	e7e3      	b.n	800134c <__eqdf2+0x3c>
 8001384:	000007ff 	.word	0x000007ff

08001388 <__gedf2>:
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138a:	464e      	mov	r6, r9
 800138c:	4645      	mov	r5, r8
 800138e:	4657      	mov	r7, sl
 8001390:	46de      	mov	lr, fp
 8001392:	0004      	movs	r4, r0
 8001394:	0018      	movs	r0, r3
 8001396:	b5e0      	push	{r5, r6, r7, lr}
 8001398:	0016      	movs	r6, r2
 800139a:	031b      	lsls	r3, r3, #12
 800139c:	0b1b      	lsrs	r3, r3, #12
 800139e:	4d32      	ldr	r5, [pc, #200]	; (8001468 <__gedf2+0xe0>)
 80013a0:	030f      	lsls	r7, r1, #12
 80013a2:	004a      	lsls	r2, r1, #1
 80013a4:	4699      	mov	r9, r3
 80013a6:	0043      	lsls	r3, r0, #1
 80013a8:	46a4      	mov	ip, r4
 80013aa:	46b0      	mov	r8, r6
 80013ac:	0b3f      	lsrs	r7, r7, #12
 80013ae:	0d52      	lsrs	r2, r2, #21
 80013b0:	0fc9      	lsrs	r1, r1, #31
 80013b2:	0d5b      	lsrs	r3, r3, #21
 80013b4:	0fc0      	lsrs	r0, r0, #31
 80013b6:	42aa      	cmp	r2, r5
 80013b8:	d029      	beq.n	800140e <__gedf2+0x86>
 80013ba:	42ab      	cmp	r3, r5
 80013bc:	d018      	beq.n	80013f0 <__gedf2+0x68>
 80013be:	2a00      	cmp	r2, #0
 80013c0:	d12a      	bne.n	8001418 <__gedf2+0x90>
 80013c2:	433c      	orrs	r4, r7
 80013c4:	46a3      	mov	fp, r4
 80013c6:	4265      	negs	r5, r4
 80013c8:	4165      	adcs	r5, r4
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d102      	bne.n	80013d4 <__gedf2+0x4c>
 80013ce:	464c      	mov	r4, r9
 80013d0:	4326      	orrs	r6, r4
 80013d2:	d027      	beq.n	8001424 <__gedf2+0x9c>
 80013d4:	2d00      	cmp	r5, #0
 80013d6:	d115      	bne.n	8001404 <__gedf2+0x7c>
 80013d8:	4281      	cmp	r1, r0
 80013da:	d028      	beq.n	800142e <__gedf2+0xa6>
 80013dc:	2002      	movs	r0, #2
 80013de:	3901      	subs	r1, #1
 80013e0:	4008      	ands	r0, r1
 80013e2:	3801      	subs	r0, #1
 80013e4:	bcf0      	pop	{r4, r5, r6, r7}
 80013e6:	46bb      	mov	fp, r7
 80013e8:	46b2      	mov	sl, r6
 80013ea:	46a9      	mov	r9, r5
 80013ec:	46a0      	mov	r8, r4
 80013ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f0:	464d      	mov	r5, r9
 80013f2:	432e      	orrs	r6, r5
 80013f4:	d12f      	bne.n	8001456 <__gedf2+0xce>
 80013f6:	2a00      	cmp	r2, #0
 80013f8:	d1ee      	bne.n	80013d8 <__gedf2+0x50>
 80013fa:	433c      	orrs	r4, r7
 80013fc:	4265      	negs	r5, r4
 80013fe:	4165      	adcs	r5, r4
 8001400:	2d00      	cmp	r5, #0
 8001402:	d0e9      	beq.n	80013d8 <__gedf2+0x50>
 8001404:	2800      	cmp	r0, #0
 8001406:	d1ed      	bne.n	80013e4 <__gedf2+0x5c>
 8001408:	2001      	movs	r0, #1
 800140a:	4240      	negs	r0, r0
 800140c:	e7ea      	b.n	80013e4 <__gedf2+0x5c>
 800140e:	003d      	movs	r5, r7
 8001410:	4325      	orrs	r5, r4
 8001412:	d120      	bne.n	8001456 <__gedf2+0xce>
 8001414:	4293      	cmp	r3, r2
 8001416:	d0eb      	beq.n	80013f0 <__gedf2+0x68>
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1dd      	bne.n	80013d8 <__gedf2+0x50>
 800141c:	464c      	mov	r4, r9
 800141e:	4326      	orrs	r6, r4
 8001420:	d1da      	bne.n	80013d8 <__gedf2+0x50>
 8001422:	e7db      	b.n	80013dc <__gedf2+0x54>
 8001424:	465b      	mov	r3, fp
 8001426:	2000      	movs	r0, #0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0db      	beq.n	80013e4 <__gedf2+0x5c>
 800142c:	e7d6      	b.n	80013dc <__gedf2+0x54>
 800142e:	429a      	cmp	r2, r3
 8001430:	dc0a      	bgt.n	8001448 <__gedf2+0xc0>
 8001432:	dbe7      	blt.n	8001404 <__gedf2+0x7c>
 8001434:	454f      	cmp	r7, r9
 8001436:	d8d1      	bhi.n	80013dc <__gedf2+0x54>
 8001438:	d010      	beq.n	800145c <__gedf2+0xd4>
 800143a:	2000      	movs	r0, #0
 800143c:	454f      	cmp	r7, r9
 800143e:	d2d1      	bcs.n	80013e4 <__gedf2+0x5c>
 8001440:	2900      	cmp	r1, #0
 8001442:	d0e1      	beq.n	8001408 <__gedf2+0x80>
 8001444:	0008      	movs	r0, r1
 8001446:	e7cd      	b.n	80013e4 <__gedf2+0x5c>
 8001448:	4243      	negs	r3, r0
 800144a:	4158      	adcs	r0, r3
 800144c:	2302      	movs	r3, #2
 800144e:	4240      	negs	r0, r0
 8001450:	4018      	ands	r0, r3
 8001452:	3801      	subs	r0, #1
 8001454:	e7c6      	b.n	80013e4 <__gedf2+0x5c>
 8001456:	2002      	movs	r0, #2
 8001458:	4240      	negs	r0, r0
 800145a:	e7c3      	b.n	80013e4 <__gedf2+0x5c>
 800145c:	45c4      	cmp	ip, r8
 800145e:	d8bd      	bhi.n	80013dc <__gedf2+0x54>
 8001460:	2000      	movs	r0, #0
 8001462:	45c4      	cmp	ip, r8
 8001464:	d2be      	bcs.n	80013e4 <__gedf2+0x5c>
 8001466:	e7eb      	b.n	8001440 <__gedf2+0xb8>
 8001468:	000007ff 	.word	0x000007ff

0800146c <__ledf2>:
 800146c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146e:	464e      	mov	r6, r9
 8001470:	4645      	mov	r5, r8
 8001472:	4657      	mov	r7, sl
 8001474:	46de      	mov	lr, fp
 8001476:	0004      	movs	r4, r0
 8001478:	0018      	movs	r0, r3
 800147a:	b5e0      	push	{r5, r6, r7, lr}
 800147c:	0016      	movs	r6, r2
 800147e:	031b      	lsls	r3, r3, #12
 8001480:	0b1b      	lsrs	r3, r3, #12
 8001482:	4d31      	ldr	r5, [pc, #196]	; (8001548 <__ledf2+0xdc>)
 8001484:	030f      	lsls	r7, r1, #12
 8001486:	004a      	lsls	r2, r1, #1
 8001488:	4699      	mov	r9, r3
 800148a:	0043      	lsls	r3, r0, #1
 800148c:	46a4      	mov	ip, r4
 800148e:	46b0      	mov	r8, r6
 8001490:	0b3f      	lsrs	r7, r7, #12
 8001492:	0d52      	lsrs	r2, r2, #21
 8001494:	0fc9      	lsrs	r1, r1, #31
 8001496:	0d5b      	lsrs	r3, r3, #21
 8001498:	0fc0      	lsrs	r0, r0, #31
 800149a:	42aa      	cmp	r2, r5
 800149c:	d011      	beq.n	80014c2 <__ledf2+0x56>
 800149e:	42ab      	cmp	r3, r5
 80014a0:	d014      	beq.n	80014cc <__ledf2+0x60>
 80014a2:	2a00      	cmp	r2, #0
 80014a4:	d12f      	bne.n	8001506 <__ledf2+0x9a>
 80014a6:	433c      	orrs	r4, r7
 80014a8:	46a3      	mov	fp, r4
 80014aa:	4265      	negs	r5, r4
 80014ac:	4165      	adcs	r5, r4
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d114      	bne.n	80014dc <__ledf2+0x70>
 80014b2:	464c      	mov	r4, r9
 80014b4:	4326      	orrs	r6, r4
 80014b6:	d111      	bne.n	80014dc <__ledf2+0x70>
 80014b8:	465b      	mov	r3, fp
 80014ba:	2000      	movs	r0, #0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d017      	beq.n	80014f0 <__ledf2+0x84>
 80014c0:	e010      	b.n	80014e4 <__ledf2+0x78>
 80014c2:	003d      	movs	r5, r7
 80014c4:	4325      	orrs	r5, r4
 80014c6:	d112      	bne.n	80014ee <__ledf2+0x82>
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d11c      	bne.n	8001506 <__ledf2+0x9a>
 80014cc:	464d      	mov	r5, r9
 80014ce:	432e      	orrs	r6, r5
 80014d0:	d10d      	bne.n	80014ee <__ledf2+0x82>
 80014d2:	2a00      	cmp	r2, #0
 80014d4:	d104      	bne.n	80014e0 <__ledf2+0x74>
 80014d6:	433c      	orrs	r4, r7
 80014d8:	4265      	negs	r5, r4
 80014da:	4165      	adcs	r5, r4
 80014dc:	2d00      	cmp	r5, #0
 80014de:	d10d      	bne.n	80014fc <__ledf2+0x90>
 80014e0:	4281      	cmp	r1, r0
 80014e2:	d016      	beq.n	8001512 <__ledf2+0xa6>
 80014e4:	2002      	movs	r0, #2
 80014e6:	3901      	subs	r1, #1
 80014e8:	4008      	ands	r0, r1
 80014ea:	3801      	subs	r0, #1
 80014ec:	e000      	b.n	80014f0 <__ledf2+0x84>
 80014ee:	2002      	movs	r0, #2
 80014f0:	bcf0      	pop	{r4, r5, r6, r7}
 80014f2:	46bb      	mov	fp, r7
 80014f4:	46b2      	mov	sl, r6
 80014f6:	46a9      	mov	r9, r5
 80014f8:	46a0      	mov	r8, r4
 80014fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014fc:	2800      	cmp	r0, #0
 80014fe:	d1f7      	bne.n	80014f0 <__ledf2+0x84>
 8001500:	2001      	movs	r0, #1
 8001502:	4240      	negs	r0, r0
 8001504:	e7f4      	b.n	80014f0 <__ledf2+0x84>
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1ea      	bne.n	80014e0 <__ledf2+0x74>
 800150a:	464c      	mov	r4, r9
 800150c:	4326      	orrs	r6, r4
 800150e:	d1e7      	bne.n	80014e0 <__ledf2+0x74>
 8001510:	e7e8      	b.n	80014e4 <__ledf2+0x78>
 8001512:	429a      	cmp	r2, r3
 8001514:	dd06      	ble.n	8001524 <__ledf2+0xb8>
 8001516:	4243      	negs	r3, r0
 8001518:	4158      	adcs	r0, r3
 800151a:	2302      	movs	r3, #2
 800151c:	4240      	negs	r0, r0
 800151e:	4018      	ands	r0, r3
 8001520:	3801      	subs	r0, #1
 8001522:	e7e5      	b.n	80014f0 <__ledf2+0x84>
 8001524:	429a      	cmp	r2, r3
 8001526:	dbe9      	blt.n	80014fc <__ledf2+0x90>
 8001528:	454f      	cmp	r7, r9
 800152a:	d8db      	bhi.n	80014e4 <__ledf2+0x78>
 800152c:	d006      	beq.n	800153c <__ledf2+0xd0>
 800152e:	2000      	movs	r0, #0
 8001530:	454f      	cmp	r7, r9
 8001532:	d2dd      	bcs.n	80014f0 <__ledf2+0x84>
 8001534:	2900      	cmp	r1, #0
 8001536:	d0e3      	beq.n	8001500 <__ledf2+0x94>
 8001538:	0008      	movs	r0, r1
 800153a:	e7d9      	b.n	80014f0 <__ledf2+0x84>
 800153c:	45c4      	cmp	ip, r8
 800153e:	d8d1      	bhi.n	80014e4 <__ledf2+0x78>
 8001540:	2000      	movs	r0, #0
 8001542:	45c4      	cmp	ip, r8
 8001544:	d2d4      	bcs.n	80014f0 <__ledf2+0x84>
 8001546:	e7f5      	b.n	8001534 <__ledf2+0xc8>
 8001548:	000007ff 	.word	0x000007ff

0800154c <__aeabi_i2d>:
 800154c:	b570      	push	{r4, r5, r6, lr}
 800154e:	2800      	cmp	r0, #0
 8001550:	d016      	beq.n	8001580 <__aeabi_i2d+0x34>
 8001552:	17c3      	asrs	r3, r0, #31
 8001554:	18c5      	adds	r5, r0, r3
 8001556:	405d      	eors	r5, r3
 8001558:	0fc4      	lsrs	r4, r0, #31
 800155a:	0028      	movs	r0, r5
 800155c:	f000 f84c 	bl	80015f8 <__clzsi2>
 8001560:	4a11      	ldr	r2, [pc, #68]	; (80015a8 <__aeabi_i2d+0x5c>)
 8001562:	1a12      	subs	r2, r2, r0
 8001564:	280a      	cmp	r0, #10
 8001566:	dc16      	bgt.n	8001596 <__aeabi_i2d+0x4a>
 8001568:	0003      	movs	r3, r0
 800156a:	002e      	movs	r6, r5
 800156c:	3315      	adds	r3, #21
 800156e:	409e      	lsls	r6, r3
 8001570:	230b      	movs	r3, #11
 8001572:	1a18      	subs	r0, r3, r0
 8001574:	40c5      	lsrs	r5, r0
 8001576:	0553      	lsls	r3, r2, #21
 8001578:	032d      	lsls	r5, r5, #12
 800157a:	0b2d      	lsrs	r5, r5, #12
 800157c:	0d5b      	lsrs	r3, r3, #21
 800157e:	e003      	b.n	8001588 <__aeabi_i2d+0x3c>
 8001580:	2400      	movs	r4, #0
 8001582:	2300      	movs	r3, #0
 8001584:	2500      	movs	r5, #0
 8001586:	2600      	movs	r6, #0
 8001588:	051b      	lsls	r3, r3, #20
 800158a:	432b      	orrs	r3, r5
 800158c:	07e4      	lsls	r4, r4, #31
 800158e:	4323      	orrs	r3, r4
 8001590:	0030      	movs	r0, r6
 8001592:	0019      	movs	r1, r3
 8001594:	bd70      	pop	{r4, r5, r6, pc}
 8001596:	380b      	subs	r0, #11
 8001598:	4085      	lsls	r5, r0
 800159a:	0553      	lsls	r3, r2, #21
 800159c:	032d      	lsls	r5, r5, #12
 800159e:	2600      	movs	r6, #0
 80015a0:	0b2d      	lsrs	r5, r5, #12
 80015a2:	0d5b      	lsrs	r3, r3, #21
 80015a4:	e7f0      	b.n	8001588 <__aeabi_i2d+0x3c>
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	0000041e 	.word	0x0000041e

080015ac <__aeabi_ui2d>:
 80015ac:	b510      	push	{r4, lr}
 80015ae:	1e04      	subs	r4, r0, #0
 80015b0:	d010      	beq.n	80015d4 <__aeabi_ui2d+0x28>
 80015b2:	f000 f821 	bl	80015f8 <__clzsi2>
 80015b6:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <__aeabi_ui2d+0x48>)
 80015b8:	1a1b      	subs	r3, r3, r0
 80015ba:	280a      	cmp	r0, #10
 80015bc:	dc11      	bgt.n	80015e2 <__aeabi_ui2d+0x36>
 80015be:	220b      	movs	r2, #11
 80015c0:	0021      	movs	r1, r4
 80015c2:	1a12      	subs	r2, r2, r0
 80015c4:	40d1      	lsrs	r1, r2
 80015c6:	3015      	adds	r0, #21
 80015c8:	030a      	lsls	r2, r1, #12
 80015ca:	055b      	lsls	r3, r3, #21
 80015cc:	4084      	lsls	r4, r0
 80015ce:	0b12      	lsrs	r2, r2, #12
 80015d0:	0d5b      	lsrs	r3, r3, #21
 80015d2:	e001      	b.n	80015d8 <__aeabi_ui2d+0x2c>
 80015d4:	2300      	movs	r3, #0
 80015d6:	2200      	movs	r2, #0
 80015d8:	051b      	lsls	r3, r3, #20
 80015da:	4313      	orrs	r3, r2
 80015dc:	0020      	movs	r0, r4
 80015de:	0019      	movs	r1, r3
 80015e0:	bd10      	pop	{r4, pc}
 80015e2:	0022      	movs	r2, r4
 80015e4:	380b      	subs	r0, #11
 80015e6:	4082      	lsls	r2, r0
 80015e8:	055b      	lsls	r3, r3, #21
 80015ea:	0312      	lsls	r2, r2, #12
 80015ec:	2400      	movs	r4, #0
 80015ee:	0b12      	lsrs	r2, r2, #12
 80015f0:	0d5b      	lsrs	r3, r3, #21
 80015f2:	e7f1      	b.n	80015d8 <__aeabi_ui2d+0x2c>
 80015f4:	0000041e 	.word	0x0000041e

080015f8 <__clzsi2>:
 80015f8:	211c      	movs	r1, #28
 80015fa:	2301      	movs	r3, #1
 80015fc:	041b      	lsls	r3, r3, #16
 80015fe:	4298      	cmp	r0, r3
 8001600:	d301      	bcc.n	8001606 <__clzsi2+0xe>
 8001602:	0c00      	lsrs	r0, r0, #16
 8001604:	3910      	subs	r1, #16
 8001606:	0a1b      	lsrs	r3, r3, #8
 8001608:	4298      	cmp	r0, r3
 800160a:	d301      	bcc.n	8001610 <__clzsi2+0x18>
 800160c:	0a00      	lsrs	r0, r0, #8
 800160e:	3908      	subs	r1, #8
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	4298      	cmp	r0, r3
 8001614:	d301      	bcc.n	800161a <__clzsi2+0x22>
 8001616:	0900      	lsrs	r0, r0, #4
 8001618:	3904      	subs	r1, #4
 800161a:	a202      	add	r2, pc, #8	; (adr r2, 8001624 <__clzsi2+0x2c>)
 800161c:	5c10      	ldrb	r0, [r2, r0]
 800161e:	1840      	adds	r0, r0, r1
 8001620:	4770      	bx	lr
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	02020304 	.word	0x02020304
 8001628:	01010101 	.word	0x01010101
	...

08001634 <__clzdi2>:
 8001634:	b510      	push	{r4, lr}
 8001636:	2900      	cmp	r1, #0
 8001638:	d103      	bne.n	8001642 <__clzdi2+0xe>
 800163a:	f7ff ffdd 	bl	80015f8 <__clzsi2>
 800163e:	3020      	adds	r0, #32
 8001640:	e002      	b.n	8001648 <__clzdi2+0x14>
 8001642:	1c08      	adds	r0, r1, #0
 8001644:	f7ff ffd8 	bl	80015f8 <__clzsi2>
 8001648:	bd10      	pop	{r4, pc}
 800164a:	46c0      	nop			; (mov r8, r8)

0800164c <_Z8containsih>:

*/

uint16_t crc16(uint8_t const *data, int32_t size);

uint8_t contains(int current_pos, uint8_t value) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	000a      	movs	r2, r1
 8001656:	1cfb      	adds	r3, r7, #3
 8001658:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < current_pos; i++) {
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	429a      	cmp	r2, r3
 8001664:	da0d      	bge.n	8001682 <_Z8containsih+0x36>
    if (FHSSsequence[i] == value)
 8001666:	4a09      	ldr	r2, [pc, #36]	; (800168c <_Z8containsih+0x40>)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	18d3      	adds	r3, r2, r3
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	1cfa      	adds	r2, r7, #3
 8001670:	7812      	ldrb	r2, [r2, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d101      	bne.n	800167a <_Z8containsih+0x2e>
      return 1;
 8001676:	2301      	movs	r3, #1
 8001678:	e004      	b.n	8001684 <_Z8containsih+0x38>
  for (int i = 0; i < current_pos; i++) {
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	3301      	adds	r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	e7ed      	b.n	800165e <_Z8containsih+0x12>
  }
  return 0;
 8001682:	2300      	movs	r3, #0
}
 8001684:	0018      	movs	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	b004      	add	sp, #16
 800168a:	bd80      	pop	{r7, pc}
 800168c:	2000008c 	.word	0x2000008c

08001690 <_Z25FHSSrandomiseFHSSsequencem>:

void FHSSrandomiseFHSSsequence(uint32_t crc) {
 8001690:	b5b0      	push	{r4, r5, r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  rngSeed(crc);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	0018      	movs	r0, r3
 800169c:	f000 f8ac 	bl	80017f8 <_Z7rngSeedm>
  int i = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]
  while (i < FHSS_SEQUENCE_CNT) {
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2b13      	cmp	r3, #19
 80016a8:	dc1e      	bgt.n	80016e8 <_Z25FHSSrandomiseFHSSsequencem+0x58>
    uint8_t next_freq = (uint8_t)rngN(FHSS_FREQ_CNT);
 80016aa:	250b      	movs	r5, #11
 80016ac:	197c      	adds	r4, r7, r5
 80016ae:	2050      	movs	r0, #80	; 0x50
 80016b0:	f000 f8b0 	bl	8001814 <_Z4rngNh>
 80016b4:	0003      	movs	r3, r0
 80016b6:	7023      	strb	r3, [r4, #0]
    if (contains(i, next_freq) == 0) {
 80016b8:	002c      	movs	r4, r5
 80016ba:	193b      	adds	r3, r7, r4
 80016bc:	781a      	ldrb	r2, [r3, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	0011      	movs	r1, r2
 80016c2:	0018      	movs	r0, r3
 80016c4:	f7ff ffc2 	bl	800164c <_Z8containsih>
 80016c8:	0003      	movs	r3, r0
 80016ca:	425a      	negs	r2, r3
 80016cc:	4153      	adcs	r3, r2
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0e7      	beq.n	80016a4 <_Z25FHSSrandomiseFHSSsequencem+0x14>
      FHSSsequence[i] = next_freq;
 80016d4:	4a09      	ldr	r2, [pc, #36]	; (80016fc <_Z25FHSSrandomiseFHSSsequencem+0x6c>)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	18d3      	adds	r3, r2, r3
 80016da:	193a      	adds	r2, r7, r4
 80016dc:	7812      	ldrb	r2, [r2, #0]
 80016de:	701a      	strb	r2, [r3, #0]
      i++;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	3301      	adds	r3, #1
 80016e4:	60fb      	str	r3, [r7, #12]
  while (i < FHSS_SEQUENCE_CNT) {
 80016e6:	e7dd      	b.n	80016a4 <_Z25FHSSrandomiseFHSSsequencem+0x14>
    }
  }
  sync_channel = FHSSsequence[0];
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <_Z25FHSSrandomiseFHSSsequencem+0x6c>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	001a      	movs	r2, r3
 80016ee:	4b04      	ldr	r3, [pc, #16]	; (8001700 <_Z25FHSSrandomiseFHSSsequencem+0x70>)
 80016f0:	601a      	str	r2, [r3, #0]
}
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b004      	add	sp, #16
 80016f8:	bdb0      	pop	{r4, r5, r7, pc}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	2000008c 	.word	0x2000008c
 8001700:	200000a4 	.word	0x200000a4

08001704 <_Z5crc32PKhj>:
		0x78, 0x49, 0x1a, 0x2b, 0xbc, 0x8d, 0xde, 0xef,
		0x82, 0xb3, 0xe0, 0xd1, 0x46, 0x77, 0x24, 0x15,
		0x3b, 0x0a, 0x59, 0x68, 0xff, 0xce, 0x9d, 0xac
};

uint32_t crc32(const uint8_t *buf, size_t size) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  const uint8_t *p = buf;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	60fb      	str	r3, [r7, #12]
  uint32_t crc;

  crc = ~0U;
 8001712:	2301      	movs	r3, #1
 8001714:	425b      	negs	r3, r3
 8001716:	60bb      	str	r3, [r7, #8]
  while (size--)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	1e5a      	subs	r2, r3, #1
 800171c:	603a      	str	r2, [r7, #0]
 800171e:	1e5a      	subs	r2, r3, #1
 8001720:	4193      	sbcs	r3, r2
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	d010      	beq.n	800174a <_Z5crc32PKhj+0x46>
    crc = crc32_tab[(crc ^ *p++) & 0xFF] ^ (crc >> 8);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	60fa      	str	r2, [r7, #12]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	001a      	movs	r2, r3
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	4053      	eors	r3, r2
 8001736:	22ff      	movs	r2, #255	; 0xff
 8001738:	401a      	ands	r2, r3
 800173a:	4b07      	ldr	r3, [pc, #28]	; (8001758 <_Z5crc32PKhj+0x54>)
 800173c:	0092      	lsls	r2, r2, #2
 800173e:	58d2      	ldr	r2, [r2, r3]
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	0a1b      	lsrs	r3, r3, #8
 8001744:	4053      	eors	r3, r2
 8001746:	60bb      	str	r3, [r7, #8]
  while (size--)
 8001748:	e7e6      	b.n	8001718 <_Z5crc32PKhj+0x14>
  return crc ^ ~0U;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	43db      	mvns	r3, r3
}
 800174e:	0018      	movs	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	b004      	add	sp, #16
 8001754:	bd80      	pop	{r7, pc}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	0800b99c 	.word	0x0800b99c

0800175c <_Z4crc8PKhj>:

uint8_t crc8(const uint8_t *buf, size_t size) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]

	uint8_t crc = 0;
 8001766:	230f      	movs	r3, #15
 8001768:	18fb      	adds	r3, r7, r3
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++)
 800176e:	2300      	movs	r3, #0
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d911      	bls.n	800179e <_Z4crc8PKhj+0x42>
	 crc = crc8_tab[crc ^ *buf++];
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	1c5a      	adds	r2, r3, #1
 800177e:	607a      	str	r2, [r7, #4]
 8001780:	781a      	ldrb	r2, [r3, #0]
 8001782:	200f      	movs	r0, #15
 8001784:	183b      	adds	r3, r7, r0
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	4053      	eors	r3, r2
 800178a:	b2db      	uxtb	r3, r3
 800178c:	0019      	movs	r1, r3
 800178e:	183b      	adds	r3, r7, r0
 8001790:	4a06      	ldr	r2, [pc, #24]	; (80017ac <_Z4crc8PKhj+0x50>)
 8001792:	5c52      	ldrb	r2, [r2, r1]
 8001794:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++)
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	3301      	adds	r3, #1
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	e7e9      	b.n	8001772 <_Z4crc8PKhj+0x16>

	return crc;
 800179e:	230f      	movs	r3, #15
 80017a0:	18fb      	adds	r3, r7, r3
 80017a2:	781b      	ldrb	r3, [r3, #0]
}
 80017a4:	0018      	movs	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b004      	add	sp, #16
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	0800bd9c 	.word	0x0800bd9c

080017b0 <_Z3rngv>:
static uint32_t seed = 0;

// returns values between 0 and 0x7FFF
// NB rngN depends on this output range, so if we change the
// behaviour rngN will need updating
uint16_t rng(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
  const uint32_t m = 2147483648;
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	061b      	lsls	r3, r3, #24
 80017ba:	60fb      	str	r3, [r7, #12]
  const uint32_t a = 214013;
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <_Z3rngv+0x3c>)
 80017be:	60bb      	str	r3, [r7, #8]
  const uint32_t c = 2531011;
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <_Z3rngv+0x40>)
 80017c2:	607b      	str	r3, [r7, #4]
  seed = (a * seed + c) % m;
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <_Z3rngv+0x44>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a08      	ldr	r2, [pc, #32]	; (80017ec <_Z3rngv+0x3c>)
 80017ca:	4353      	muls	r3, r2
 80017cc:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <_Z3rngv+0x40>)
 80017ce:	4694      	mov	ip, r2
 80017d0:	4463      	add	r3, ip
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	085a      	lsrs	r2, r3, #1
 80017d6:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <_Z3rngv+0x44>)
 80017d8:	601a      	str	r2, [r3, #0]
  return seed >> 16;
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <_Z3rngv+0x44>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	0c1b      	lsrs	r3, r3, #16
 80017e0:	b29b      	uxth	r3, r3
}
 80017e2:	0018      	movs	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	b004      	add	sp, #16
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	000343fd 	.word	0x000343fd
 80017f0:	00269ec3 	.word	0x00269ec3
 80017f4:	200000a8 	.word	0x200000a8

080017f8 <_Z7rngSeedm>:

void rngSeed(const uint32_t newSeed) { seed = newSeed; }
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	4b03      	ldr	r3, [pc, #12]	; (8001810 <_Z7rngSeedm+0x18>)
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	46bd      	mov	sp, r7
 800180a:	b002      	add	sp, #8
 800180c:	bd80      	pop	{r7, pc}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	200000a8 	.word	0x200000a8

08001814 <_Z4rngNh>:

// returns 0 <= x < max where max < 256
uint8_t rngN(const uint8_t max) { return rng() % max; }
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	0002      	movs	r2, r0
 800181c:	1dfb      	adds	r3, r7, #7
 800181e:	701a      	strb	r2, [r3, #0]
 8001820:	f7ff ffc6 	bl	80017b0 <_Z3rngv>
 8001824:	0003      	movs	r3, r0
 8001826:	001a      	movs	r2, r3
 8001828:	1dfb      	adds	r3, r7, #7
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	0019      	movs	r1, r3
 800182e:	0010      	movs	r0, r2
 8001830:	f7fe fdec 	bl	800040c <__aeabi_idivmod>
 8001834:	000b      	movs	r3, r1
 8001836:	b2db      	uxtb	r3, r3
 8001838:	0018      	movs	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	b002      	add	sp, #8
 800183e:	bd80      	pop	{r7, pc}

08001840 <_ZNK9SX1280Hal9BusyDelayEm>:
  void RXenable();
  void TXRXdisable();

  static void (*RadioIsrCallback)(); // function pointer for callback

  void BusyDelay(uint32_t duration) const { (void)duration; };
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	46bd      	mov	sp, r7
 800184e:	b002      	add	sp, #8
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <_ZN12SX1280DriverC1Ev>:
#define RX_TIMEOUT_PERIOD_BASE SX1280_RADIO_TICK_SIZE_0015_US
#define RX_TIMEOUT_PERIOD_BASE_NANOS 15625

void nullCallback(void) {}

SX1280Driver::SX1280Driver() { instance = this; }
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	4252      	negs	r2, r2
 8001862:	861a      	strh	r2, [r3, #48]	; 0x30
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	223c      	movs	r2, #60	; 0x3c
 8001868:	2100      	movs	r1, #0
 800186a:	5499      	strb	r1, [r3, r2]
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <_ZN12SX1280DriverC1Ev+0x28>)
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	0018      	movs	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	b002      	add	sp, #8
 800187a:	bd80      	pop	{r7, pc}
 800187c:	200000b0 	.word	0x200000b0

08001880 <_ZN12SX1280Driver5BeginEv>:
  RXdoneCallback = &nullCallback;
  currFreq = 2400000000;
  PayloadLength = 8; // Dummy default value which is overwritten during setup.
}

bool SX1280Driver::Begin() {
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	b087      	sub	sp, #28
 8001884:	af02      	add	r7, sp, #8
 8001886:	6078      	str	r0, [r7, #4]
  hal.init();
 8001888:	4b41      	ldr	r3, [pc, #260]	; (8001990 <_ZN12SX1280Driver5BeginEv+0x110>)
 800188a:	0018      	movs	r0, r3
 800188c:	f000 fd7e 	bl	800238c <_ZN9SX1280Hal4initEv>
  // hal.RadioIsrCallback = &SX1280Driver::IsrCallback;

  hal.reset();
 8001890:	4b3f      	ldr	r3, [pc, #252]	; (8001990 <_ZN12SX1280Driver5BeginEv+0x110>)
 8001892:	0018      	movs	r0, r3
 8001894:	f000 fd82 	bl	800239c <_ZN9SX1280Hal5resetEv>
  // DBGLN("SX1280 Begin");
  HAL_Delay(100);
 8001898:	2064      	movs	r0, #100	; 0x64
 800189a:	f003 ff3b 	bl	8005714 <HAL_Delay>
  uint16_t firmwareRev =
      (((hal.ReadRegister(REG_LR_FIRMWARE_VERSION_MSB)) << 8) |
 800189e:	2354      	movs	r3, #84	; 0x54
 80018a0:	33ff      	adds	r3, #255	; 0xff
 80018a2:	001a      	movs	r2, r3
 80018a4:	4b3a      	ldr	r3, [pc, #232]	; (8001990 <_ZN12SX1280Driver5BeginEv+0x110>)
 80018a6:	0011      	movs	r1, r2
 80018a8:	0018      	movs	r0, r3
 80018aa:	f000 ff23 	bl	80026f4 <_ZN9SX1280Hal12ReadRegisterEt>
 80018ae:	0003      	movs	r3, r0
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	b21c      	sxth	r4, r3
       (hal.ReadRegister(REG_LR_FIRMWARE_VERSION_MSB + 1)));
 80018b4:	23aa      	movs	r3, #170	; 0xaa
 80018b6:	005a      	lsls	r2, r3, #1
 80018b8:	4b35      	ldr	r3, [pc, #212]	; (8001990 <_ZN12SX1280Driver5BeginEv+0x110>)
 80018ba:	0011      	movs	r1, r2
 80018bc:	0018      	movs	r0, r3
 80018be:	f000 ff19 	bl	80026f4 <_ZN9SX1280Hal12ReadRegisterEt>
 80018c2:	0003      	movs	r3, r0
 80018c4:	b21b      	sxth	r3, r3
      (((hal.ReadRegister(REG_LR_FIRMWARE_VERSION_MSB)) << 8) |
 80018c6:	4323      	orrs	r3, r4
 80018c8:	b21a      	sxth	r2, r3
       (hal.ReadRegister(REG_LR_FIRMWARE_VERSION_MSB + 1)));
 80018ca:	210e      	movs	r1, #14
 80018cc:	187b      	adds	r3, r7, r1
 80018ce:	801a      	strh	r2, [r3, #0]
  // DBGLN("Read Vers: %d", firmwareRev);
  if ((firmwareRev == 0) || (firmwareRev == 65535)) {
 80018d0:	000a      	movs	r2, r1
 80018d2:	18bb      	adds	r3, r7, r2
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d004      	beq.n	80018e4 <_ZN12SX1280Driver5BeginEv+0x64>
 80018da:	18bb      	adds	r3, r7, r2
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	4a2d      	ldr	r2, [pc, #180]	; (8001994 <_ZN12SX1280Driver5BeginEv+0x114>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d101      	bne.n	80018e8 <_ZN12SX1280Driver5BeginEv+0x68>
    // SPI communication failed, just return without configuration
    return false;
 80018e4:	2300      	movs	r3, #0
 80018e6:	e04e      	b.n	8001986 <_ZN12SX1280Driver5BeginEv+0x106>
  }

  SetMode(SX1280_MODE_STDBY_RC); // Put in STDBY_RC mode
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2102      	movs	r1, #2
 80018ec:	0018      	movs	r0, r3
 80018ee:	f000 f945 	bl	8001b7c <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>
  hal.WriteCommand(SX1280_RADIO_SET_PACKETTYPE,
 80018f2:	4b27      	ldr	r3, [pc, #156]	; (8001990 <_ZN12SX1280Driver5BeginEv+0x110>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	218a      	movs	r1, #138	; 0x8a
 80018f8:	0018      	movs	r0, r3
 80018fa:	f000 fd57 	bl	80023ac <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
                   SX1280_PACKET_TYPE_LORA); // Set packet type to LoRa
  ConfigModParamsLoRa(SX1280_LORA_BW_0800, SX1280_LORA_SF6,
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	2303      	movs	r3, #3
 8001902:	2260      	movs	r2, #96	; 0x60
 8001904:	2118      	movs	r1, #24
 8001906:	f000 f9b9 	bl	8001c7c <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh>
                      SX1280_LORA_CR_4_7); // Configure Modulation Params
  hal.WriteCommand(SX1280_RADIO_SET_AUTOFS, 0x01); // Enable auto FS
 800190a:	4b21      	ldr	r3, [pc, #132]	; (8001990 <_ZN12SX1280Driver5BeginEv+0x110>)
 800190c:	2201      	movs	r2, #1
 800190e:	219e      	movs	r1, #158	; 0x9e
 8001910:	0018      	movs	r0, r3
 8001912:	f000 fd4b 	bl	80023ac <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
  hal.WriteRegister(
      0x0891,
      (hal.ReadRegister(0x0891) |
 8001916:	4a20      	ldr	r2, [pc, #128]	; (8001998 <_ZN12SX1280Driver5BeginEv+0x118>)
 8001918:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <_ZN12SX1280Driver5BeginEv+0x110>)
 800191a:	0011      	movs	r1, r2
 800191c:	0018      	movs	r0, r3
 800191e:	f000 fee9 	bl	80026f4 <_ZN9SX1280Hal12ReadRegisterEt>
 8001922:	0003      	movs	r3, r0
 8001924:	001a      	movs	r2, r3
  hal.WriteRegister(
 8001926:	2340      	movs	r3, #64	; 0x40
 8001928:	425b      	negs	r3, r3
 800192a:	4313      	orrs	r3, r2
 800192c:	b2da      	uxtb	r2, r3
 800192e:	491a      	ldr	r1, [pc, #104]	; (8001998 <_ZN12SX1280Driver5BeginEv+0x118>)
 8001930:	4b17      	ldr	r3, [pc, #92]	; (8001990 <_ZN12SX1280Driver5BeginEv+0x110>)
 8001932:	0018      	movs	r0, r3
 8001934:	f000 fe76 	bl	8002624 <_ZN9SX1280Hal13WriteRegisterEth>
       0xC0)); // default is low power mode, switch to high sensitivity instead
  SetPacketParamsLoRa(12, SX1280_LORA_PACKET_IMPLICIT, 8, SX1280_LORA_CRC_OFF,
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	2340      	movs	r3, #64	; 0x40
 800193c:	9301      	str	r3, [sp, #4]
 800193e:	2300      	movs	r3, #0
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2308      	movs	r3, #8
 8001944:	2280      	movs	r2, #128	; 0x80
 8001946:	210c      	movs	r1, #12
 8001948:	f000 f9e4 	bl	8001d14 <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th>
                      SX1280_LORA_IQ_NORMAL); // default params
  SetFrequencyReg(currFreq);                  // Set Freq
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	0011      	movs	r1, r2
 8001954:	0018      	movs	r0, r3
 8001956:	f000 fadb 	bl	8001f10 <_ZN12SX1280Driver15SetFrequencyRegEm>
  SetFIFOaddr(0x00, 0x00);                    // Config FIFO addr
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	2100      	movs	r1, #0
 8001960:	0018      	movs	r0, r3
 8001962:	f000 fb05 	bl	8001f70 <_ZN12SX1280Driver11SetFIFOaddrEhh>
  SetDioIrqParams(
 8001966:	490b      	ldr	r1, [pc, #44]	; (8001994 <_ZN12SX1280Driver5BeginEv+0x114>)
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	2300      	movs	r3, #0
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2300      	movs	r3, #0
 8001970:	2203      	movs	r2, #3
 8001972:	f000 fb1f 	bl	8001fb4 <_ZN12SX1280Driver15SetDioIrqParamsEtttt>
      SX1280_IRQ_RADIO_ALL,
      SX1280_IRQ_TX_DONE |
          SX1280_IRQ_RX_DONE); // set IRQ to both RXdone/TXdone on DIO1
  instance->ClearIrqStatus(SX1280_IRQ_RADIO_ALL);
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <_ZN12SX1280Driver5BeginEv+0x11c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a06      	ldr	r2, [pc, #24]	; (8001994 <_ZN12SX1280Driver5BeginEv+0x114>)
 800197c:	0011      	movs	r1, r2
 800197e:	0018      	movs	r0, r3
 8001980:	f000 fb86 	bl	8002090 <_ZN12SX1280Driver14ClearIrqStatusEt>
  return true;
 8001984:	2301      	movs	r3, #1
}
 8001986:	0018      	movs	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	b005      	add	sp, #20
 800198c:	bd90      	pop	{r4, r7, pc}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	200000ac 	.word	0x200000ac
 8001994:	0000ffff 	.word	0x0000ffff
 8001998:	00000891 	.word	0x00000891
 800199c:	200000b0 	.word	0x200000b0

080019a0 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth>:

void SX1280Driver::Config(uint8_t bw, uint8_t sf, uint8_t cr, uint32_t freq,
                          uint8_t PreambleLength, bool InvertIQ,
                          uint8_t _PayloadLength, uint32_t interval,
                          uint32_t flrcSyncWord, uint16_t flrcCrcSeed,
                          uint8_t flrc) {
 80019a0:	b5b0      	push	{r4, r5, r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af04      	add	r7, sp, #16
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	000c      	movs	r4, r1
 80019aa:	0010      	movs	r0, r2
 80019ac:	0019      	movs	r1, r3
 80019ae:	1cfb      	adds	r3, r7, #3
 80019b0:	1c22      	adds	r2, r4, #0
 80019b2:	701a      	strb	r2, [r3, #0]
 80019b4:	1cbb      	adds	r3, r7, #2
 80019b6:	1c02      	adds	r2, r0, #0
 80019b8:	701a      	strb	r2, [r3, #0]
 80019ba:	1c7b      	adds	r3, r7, #1
 80019bc:	1c0a      	adds	r2, r1, #0
 80019be:	701a      	strb	r2, [r3, #0]
  uint8_t irqs = SX1280_IRQ_TX_DONE | SX1280_IRQ_RX_DONE;
 80019c0:	230f      	movs	r3, #15
 80019c2:	18fb      	adds	r3, r7, r3
 80019c4:	2203      	movs	r2, #3
 80019c6:	701a      	strb	r2, [r3, #0]
  uint8_t const mode =
      (flrc) ? SX1280_PACKET_TYPE_FLRC : SX1280_PACKET_TYPE_LORA;
 80019c8:	233c      	movs	r3, #60	; 0x3c
 80019ca:	18fb      	adds	r3, r7, r3
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0x36>
 80019d2:	2203      	movs	r2, #3
 80019d4:	e000      	b.n	80019d8 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0x38>
 80019d6:	2201      	movs	r2, #1
  uint8_t const mode =
 80019d8:	240e      	movs	r4, #14
 80019da:	193b      	adds	r3, r7, r4
 80019dc:	701a      	strb	r2, [r3, #0]

  PayloadLength = _PayloadLength;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	252c      	movs	r5, #44	; 0x2c
 80019e2:	197a      	adds	r2, r7, r5
 80019e4:	2138      	movs	r1, #56	; 0x38
 80019e6:	7812      	ldrb	r2, [r2, #0]
 80019e8:	545a      	strb	r2, [r3, r1]
  IQinverted = InvertIQ;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2228      	movs	r2, #40	; 0x28
 80019ee:	18ba      	adds	r2, r7, r2
 80019f0:	2139      	movs	r1, #57	; 0x39
 80019f2:	7812      	ldrb	r2, [r2, #0]
 80019f4:	545a      	strb	r2, [r3, r1]
  SetMode(SX1280_MODE_STDBY_XOSC);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2103      	movs	r1, #3
 80019fa:	0018      	movs	r0, r3
 80019fc:	f000 f8be 	bl	8001b7c <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>

  hal.WriteCommand(SX1280_RADIO_SET_PACKETTYPE, mode);
 8001a00:	193b      	adds	r3, r7, r4
 8001a02:	781a      	ldrb	r2, [r3, #0]
 8001a04:	4b31      	ldr	r3, [pc, #196]	; (8001acc <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0x12c>)
 8001a06:	218a      	movs	r1, #138	; 0x8a
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f000 fccf 	bl	80023ac <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
  if (mode == SX1280_PACKET_TYPE_FLRC) {
 8001a0e:	193b      	adds	r3, r7, r4
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d123      	bne.n	8001a5e <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0xbe>
    // DBGLN("Config FLRC");
    ConfigModParamsFLRC(bw, cr, sf);
 8001a16:	1cbb      	adds	r3, r7, #2
 8001a18:	781c      	ldrb	r4, [r3, #0]
 8001a1a:	1c7b      	adds	r3, r7, #1
 8001a1c:	781a      	ldrb	r2, [r3, #0]
 8001a1e:	1cfb      	adds	r3, r7, #3
 8001a20:	7819      	ldrb	r1, [r3, #0]
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	0023      	movs	r3, r4
 8001a26:	f000 f9b5 	bl	8001d94 <_ZN12SX1280Driver19ConfigModParamsFLRCEhhh>
    SetPacketParamsFLRC(SX1280_FLRC_PACKET_FIXED_LENGTH, /*crc=*/1,
 8001a2a:	2324      	movs	r3, #36	; 0x24
 8001a2c:	18fb      	adds	r3, r7, r3
 8001a2e:	781a      	ldrb	r2, [r3, #0]
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	2338      	movs	r3, #56	; 0x38
 8001a34:	18fb      	adds	r3, r7, r3
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	9302      	str	r3, [sp, #8]
 8001a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3c:	9301      	str	r3, [sp, #4]
 8001a3e:	197b      	adds	r3, r7, r5
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	0013      	movs	r3, r2
 8001a46:	2201      	movs	r2, #1
 8001a48:	2100      	movs	r1, #0
 8001a4a:	f000 f9cd 	bl	8001de8 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt>
                        PreambleLength, _PayloadLength, flrcSyncWord,
                        flrcCrcSeed);
    irqs |= SX1280_IRQ_CRC_ERROR;
 8001a4e:	220f      	movs	r2, #15
 8001a50:	18bb      	adds	r3, r7, r2
 8001a52:	18ba      	adds	r2, r7, r2
 8001a54:	7812      	ldrb	r2, [r2, #0]
 8001a56:	2140      	movs	r1, #64	; 0x40
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	701a      	strb	r2, [r3, #0]
 8001a5c:	e01a      	b.n	8001a94 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0xf4>
  } else {
    // DBGLN("Config LoRa");
    ConfigModParamsLoRa(bw, sf, cr);
 8001a5e:	1c7b      	adds	r3, r7, #1
 8001a60:	781c      	ldrb	r4, [r3, #0]
 8001a62:	1cbb      	adds	r3, r7, #2
 8001a64:	781a      	ldrb	r2, [r3, #0]
 8001a66:	1cfb      	adds	r3, r7, #3
 8001a68:	7819      	ldrb	r1, [r3, #0]
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	0023      	movs	r3, r4
 8001a6e:	f000 f905 	bl	8001c7c <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh>
    SetPacketParamsLoRa(PreambleLength, SX1280_LORA_PACKET_IMPLICIT,
 8001a72:	2328      	movs	r3, #40	; 0x28
 8001a74:	18fb      	adds	r3, r7, r3
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	222c      	movs	r2, #44	; 0x2c
 8001a7a:	18ba      	adds	r2, r7, r2
 8001a7c:	7814      	ldrb	r4, [r2, #0]
 8001a7e:	2224      	movs	r2, #36	; 0x24
 8001a80:	18ba      	adds	r2, r7, r2
 8001a82:	7811      	ldrb	r1, [r2, #0]
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	9301      	str	r3, [sp, #4]
 8001a88:	2300      	movs	r3, #0
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	0023      	movs	r3, r4
 8001a8e:	2280      	movs	r2, #128	; 0x80
 8001a90:	f000 f940 	bl	8001d14 <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th>
                        _PayloadLength, SX1280_LORA_CRC_OFF, InvertIQ);
  }
  SetFrequencyReg(freq);
 8001a94:	6a3a      	ldr	r2, [r7, #32]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	0011      	movs	r1, r2
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f000 fa38 	bl	8001f10 <_ZN12SX1280Driver15SetFrequencyRegEm>
  SetDioIrqParams(SX1280_IRQ_RADIO_ALL, irqs);
 8001aa0:	230f      	movs	r3, #15
 8001aa2:	18fb      	adds	r3, r7, r3
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	4909      	ldr	r1, [pc, #36]	; (8001ad0 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0x130>)
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	2300      	movs	r3, #0
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f000 fa7f 	bl	8001fb4 <_ZN12SX1280Driver15SetDioIrqParamsEtttt>
  SetRxTimeoutUs(interval);
 8001ab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	0011      	movs	r1, r2
 8001abc:	0018      	movs	r0, r3
 8001abe:	f000 f809 	bl	8001ad4 <_ZN12SX1280Driver14SetRxTimeoutUsEm>
}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b004      	add	sp, #16
 8001ac8:	bdb0      	pop	{r4, r5, r7, pc}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	200000ac 	.word	0x200000ac
 8001ad0:	0000ffff 	.word	0x0000ffff

08001ad4 <_ZN12SX1280Driver14SetRxTimeoutUsEm>:

void SX1280Driver::SetRxTimeoutUs(uint32_t interval) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  if (interval) {
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00f      	beq.n	8001b04 <_ZN12SX1280Driver14SetRxTimeoutUsEm+0x30>
    timeout =
        interval * 1000 / RX_TIMEOUT_PERIOD_BASE_NANOS; // number of periods for
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	0013      	movs	r3, r2
 8001ae8:	015b      	lsls	r3, r3, #5
 8001aea:	1a9b      	subs	r3, r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	189b      	adds	r3, r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	4908      	ldr	r1, [pc, #32]	; (8001b14 <_ZN12SX1280Driver14SetRxTimeoutUsEm+0x40>)
 8001af4:	0018      	movs	r0, r3
 8001af6:	f7fe fb19 	bl	800012c <__udivsi3>
 8001afa:	0003      	movs	r3, r0
    timeout =
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	861a      	strh	r2, [r3, #48]	; 0x30
                                                        // the SX1280 to timeout
  } else {
    timeout = 0xFFFF; // no timeout, continuous mode
  }
}
 8001b02:	e003      	b.n	8001b0c <_ZN12SX1280Driver14SetRxTimeoutUsEm+0x38>
    timeout = 0xFFFF; // no timeout, continuous mode
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	4252      	negs	r2, r2
 8001b0a:	861a      	strh	r2, [r3, #48]	; 0x30
}
 8001b0c:	46c0      	nop			; (mov r8, r8)
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b002      	add	sp, #8
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	00003d09 	.word	0x00003d09

08001b18 <_ZN12SX1280Driver14SetOutputPowerEa>:

void SX1280Driver::SetOutputPower(int8_t power) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	000a      	movs	r2, r1
 8001b22:	1cfb      	adds	r3, r7, #3
 8001b24:	701a      	strb	r2, [r3, #0]
  if (power < -18)
 8001b26:	1cfb      	adds	r3, r7, #3
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	b25b      	sxtb	r3, r3
 8001b2c:	3312      	adds	r3, #18
 8001b2e:	da03      	bge.n	8001b38 <_ZN12SX1280Driver14SetOutputPowerEa+0x20>
    power = -18;
 8001b30:	1cfb      	adds	r3, r7, #3
 8001b32:	22ee      	movs	r2, #238	; 0xee
 8001b34:	701a      	strb	r2, [r3, #0]
 8001b36:	e007      	b.n	8001b48 <_ZN12SX1280Driver14SetOutputPowerEa+0x30>
  else if (13 < power)
 8001b38:	1cfb      	adds	r3, r7, #3
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	b25b      	sxtb	r3, r3
 8001b3e:	2b0d      	cmp	r3, #13
 8001b40:	dd02      	ble.n	8001b48 <_ZN12SX1280Driver14SetOutputPowerEa+0x30>
    power = 13;
 8001b42:	1cfb      	adds	r3, r7, #3
 8001b44:	220d      	movs	r2, #13
 8001b46:	701a      	strb	r2, [r3, #0]
  uint8_t buf[2] = {(uint8_t)(power + 18), (uint8_t)SX1280_RADIO_RAMP_04_US};
 8001b48:	210c      	movs	r1, #12
 8001b4a:	187b      	adds	r3, r7, r1
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	801a      	strh	r2, [r3, #0]
 8001b50:	187b      	adds	r3, r7, r1
 8001b52:	2220      	movs	r2, #32
 8001b54:	705a      	strb	r2, [r3, #1]
 8001b56:	1cfb      	adds	r3, r7, #3
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	3312      	adds	r3, #18
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	187b      	adds	r3, r7, r1
 8001b60:	701a      	strb	r2, [r3, #0]
  hal.WriteCommand(SX1280_RADIO_SET_TXPARAMS, buf, sizeof(buf));
 8001b62:	187a      	adds	r2, r7, r1
 8001b64:	4804      	ldr	r0, [pc, #16]	; (8001b78 <_ZN12SX1280Driver14SetOutputPowerEa+0x60>)
 8001b66:	2302      	movs	r3, #2
 8001b68:	218e      	movs	r1, #142	; 0x8e
 8001b6a:	f000 fc59 	bl	8002420 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
  // DBGLN("SetPower: %d", buf[0]);
  return;
 8001b6e:	46c0      	nop			; (mov r8, r8)
}
 8001b70:	46bd      	mov	sp, r7
 8001b72:	b004      	add	sp, #16
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	200000ac 	.word	0x200000ac

08001b7c <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>:

void SX1280Driver::SetMode(SX1280_RadioOperatingModes_t OPmode) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	000a      	movs	r2, r1
 8001b86:	1cfb      	adds	r3, r7, #3
 8001b88:	701a      	strb	r2, [r3, #0]
  if (OPmode == currOpmode) {
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	223c      	movs	r2, #60	; 0x3c
 8001b8e:	5c9b      	ldrb	r3, [r3, r2]
 8001b90:	1cfa      	adds	r2, r7, #3
 8001b92:	7812      	ldrb	r2, [r2, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d066      	beq.n	8001c66 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xea>
    return;
  }

  uint8_t buf[3];
  uint32_t switchDelay = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]

  switch (OPmode) {
 8001b9c:	1cfb      	adds	r3, r7, #3
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b07      	cmp	r3, #7
 8001ba2:	d851      	bhi.n	8001c48 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xcc>
 8001ba4:	009a      	lsls	r2, r3, #2
 8001ba6:	4b32      	ldr	r3, [pc, #200]	; (8001c70 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf4>)
 8001ba8:	18d3      	adds	r3, r2, r3
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	469f      	mov	pc, r3

  case SX1280_MODE_SLEEP:
    hal.WriteCommand(SX1280_RADIO_SET_SLEEP, 0x01);
 8001bae:	4b31      	ldr	r3, [pc, #196]	; (8001c74 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	2184      	movs	r1, #132	; 0x84
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f000 fbf9 	bl	80023ac <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
    break;
 8001bba:	e048      	b.n	8001c4e <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd2>

  case SX1280_MODE_CALIBRATION:
    break;

  case SX1280_MODE_STDBY_RC:
    hal.WriteCommand(SX1280_RADIO_SET_STANDBY, SX1280_STDBY_RC);
 8001bbc:	4b2d      	ldr	r3, [pc, #180]	; (8001c74 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2180      	movs	r1, #128	; 0x80
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f000 fbf2 	bl	80023ac <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
    switchDelay = 1500;
 8001bc8:	4b2b      	ldr	r3, [pc, #172]	; (8001c78 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xfc>)
 8001bca:	60fb      	str	r3, [r7, #12]
    break;
 8001bcc:	e03f      	b.n	8001c4e <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd2>

  case SX1280_MODE_STDBY_XOSC:
    hal.WriteCommand(SX1280_RADIO_SET_STANDBY, SX1280_STDBY_XOSC);
 8001bce:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	2180      	movs	r1, #128	; 0x80
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f000 fbe9 	bl	80023ac <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
    switchDelay = 50;
 8001bda:	2332      	movs	r3, #50	; 0x32
 8001bdc:	60fb      	str	r3, [r7, #12]
    break;
 8001bde:	e036      	b.n	8001c4e <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd2>

  case SX1280_MODE_FS:
    hal.WriteCommand(SX1280_RADIO_SET_FS, 0x00);
 8001be0:	4b24      	ldr	r3, [pc, #144]	; (8001c74 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	21c1      	movs	r1, #193	; 0xc1
 8001be6:	0018      	movs	r0, r3
 8001be8:	f000 fbe0 	bl	80023ac <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
    switchDelay = 70;
 8001bec:	2346      	movs	r3, #70	; 0x46
 8001bee:	60fb      	str	r3, [r7, #12]
    break;
 8001bf0:	e02d      	b.n	8001c4e <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd2>

  case SX1280_MODE_RX:
    buf[0] = RX_TIMEOUT_PERIOD_BASE;
 8001bf2:	2108      	movs	r1, #8
 8001bf4:	187b      	adds	r3, r7, r1
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
    buf[1] = timeout >> 8;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001bfe:	121b      	asrs	r3, r3, #8
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	187b      	adds	r3, r7, r1
 8001c04:	705a      	strb	r2, [r3, #1]
    buf[2] = timeout & 0xFF;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	187b      	adds	r3, r7, r1
 8001c0e:	709a      	strb	r2, [r3, #2]
    hal.WriteCommand(SX1280_RADIO_SET_RX, buf, sizeof(buf));
 8001c10:	187a      	adds	r2, r7, r1
 8001c12:	4818      	ldr	r0, [pc, #96]	; (8001c74 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8001c14:	2303      	movs	r3, #3
 8001c16:	2182      	movs	r1, #130	; 0x82
 8001c18:	f000 fc02 	bl	8002420 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
    switchDelay = 100;
 8001c1c:	2364      	movs	r3, #100	; 0x64
 8001c1e:	60fb      	str	r3, [r7, #12]
    break;
 8001c20:	e015      	b.n	8001c4e <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd2>

  case SX1280_MODE_TX:
    // uses timeout Time-out duration = periodBase * periodBaseCount
    buf[0] = RX_TIMEOUT_PERIOD_BASE;
 8001c22:	2108      	movs	r1, #8
 8001c24:	187b      	adds	r3, r7, r1
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
    buf[1] = 0xFF; // no timeout set for now
 8001c2a:	187b      	adds	r3, r7, r1
 8001c2c:	22ff      	movs	r2, #255	; 0xff
 8001c2e:	705a      	strb	r2, [r3, #1]
    buf[2] = 0xFF; // TODO dynamic timeout based on expected onairtime
 8001c30:	187b      	adds	r3, r7, r1
 8001c32:	22ff      	movs	r2, #255	; 0xff
 8001c34:	709a      	strb	r2, [r3, #2]
    hal.WriteCommand(SX1280_RADIO_SET_TX, buf, sizeof(buf));
 8001c36:	187a      	adds	r2, r7, r1
 8001c38:	480e      	ldr	r0, [pc, #56]	; (8001c74 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	2183      	movs	r1, #131	; 0x83
 8001c3e:	f000 fbef 	bl	8002420 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
    switchDelay = 100;
 8001c42:	2364      	movs	r3, #100	; 0x64
 8001c44:	60fb      	str	r3, [r7, #12]
    break;
 8001c46:	e002      	b.n	8001c4e <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd2>

  case SX1280_MODE_CAD:
    break;

  default:
    break;
 8001c48:	46c0      	nop			; (mov r8, r8)
 8001c4a:	e000      	b.n	8001c4e <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd2>
    break;
 8001c4c:	46c0      	nop			; (mov r8, r8)
  }
  hal.BusyDelay(switchDelay);
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8001c52:	0011      	movs	r1, r2
 8001c54:	0018      	movs	r0, r3
 8001c56:	f7ff fdf3 	bl	8001840 <_ZNK9SX1280Hal9BusyDelayEm>

  currOpmode = OPmode;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	1cfa      	adds	r2, r7, #3
 8001c5e:	213c      	movs	r1, #60	; 0x3c
 8001c60:	7812      	ldrb	r2, [r2, #0]
 8001c62:	545a      	strb	r2, [r3, r1]
 8001c64:	e000      	b.n	8001c68 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xec>
    return;
 8001c66:	46c0      	nop			; (mov r8, r8)
}
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	b004      	add	sp, #16
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	0800be9c 	.word	0x0800be9c
 8001c74:	200000ac 	.word	0x200000ac
 8001c78:	000005dc 	.word	0x000005dc

08001c7c <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh>:

void SX1280Driver::ConfigModParamsLoRa(uint8_t bw, uint8_t sf, uint8_t cr) {
 8001c7c:	b590      	push	{r4, r7, lr}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	000c      	movs	r4, r1
 8001c86:	0010      	movs	r0, r2
 8001c88:	0019      	movs	r1, r3
 8001c8a:	1cfb      	adds	r3, r7, #3
 8001c8c:	1c22      	adds	r2, r4, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
 8001c90:	1cbb      	adds	r3, r7, #2
 8001c92:	1c02      	adds	r2, r0, #0
 8001c94:	701a      	strb	r2, [r3, #0]
 8001c96:	1c7b      	adds	r3, r7, #1
 8001c98:	1c0a      	adds	r2, r1, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
  // Care must therefore be taken to ensure that modulation parameters are set
  // using the command SetModulationParam() only after defining the packet type
  // SetPacketType() to be used

  uint8_t rfparams[3] = {sf, bw, cr};
 8001c9c:	210c      	movs	r1, #12
 8001c9e:	187b      	adds	r3, r7, r1
 8001ca0:	1cba      	adds	r2, r7, #2
 8001ca2:	7812      	ldrb	r2, [r2, #0]
 8001ca4:	701a      	strb	r2, [r3, #0]
 8001ca6:	187b      	adds	r3, r7, r1
 8001ca8:	1cfa      	adds	r2, r7, #3
 8001caa:	7812      	ldrb	r2, [r2, #0]
 8001cac:	705a      	strb	r2, [r3, #1]
 8001cae:	187b      	adds	r3, r7, r1
 8001cb0:	1c7a      	adds	r2, r7, #1
 8001cb2:	7812      	ldrb	r2, [r2, #0]
 8001cb4:	709a      	strb	r2, [r3, #2]

  hal.WriteCommand(SX1280_RADIO_SET_MODULATIONPARAMS, rfparams,
 8001cb6:	187a      	adds	r2, r7, r1
 8001cb8:	4814      	ldr	r0, [pc, #80]	; (8001d0c <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x90>)
 8001cba:	2303      	movs	r3, #3
 8001cbc:	218b      	movs	r1, #139	; 0x8b
 8001cbe:	f000 fbaf 	bl	8002420 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
                   sizeof(rfparams));

  switch (sf) {
 8001cc2:	1cbb      	adds	r3, r7, #2
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b80      	cmp	r3, #128	; 0x80
 8001cc8:	d00e      	beq.n	8001ce8 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x6c>
 8001cca:	dc14      	bgt.n	8001cf6 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x7a>
 8001ccc:	2b70      	cmp	r3, #112	; 0x70
 8001cce:	d00b      	beq.n	8001ce8 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x6c>
 8001cd0:	dc11      	bgt.n	8001cf6 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x7a>
 8001cd2:	2b50      	cmp	r3, #80	; 0x50
 8001cd4:	d001      	beq.n	8001cda <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x5e>
 8001cd6:	2b60      	cmp	r3, #96	; 0x60
 8001cd8:	d10d      	bne.n	8001cf6 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x7a>
  case SX1280_LORA_SF5:
  case SX1280_LORA_SF6:
    hal.WriteRegister(0x925, 0x1E); // for SF5 or SF6
 8001cda:	490d      	ldr	r1, [pc, #52]	; (8001d10 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x94>)
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x90>)
 8001cde:	221e      	movs	r2, #30
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f000 fc9f 	bl	8002624 <_ZN9SX1280Hal13WriteRegisterEth>
    break;
 8001ce6:	e00d      	b.n	8001d04 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x88>
  case SX1280_LORA_SF7:
  case SX1280_LORA_SF8:
    hal.WriteRegister(0x925, 0x37); // for SF7 or SF8
 8001ce8:	4909      	ldr	r1, [pc, #36]	; (8001d10 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x94>)
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x90>)
 8001cec:	2237      	movs	r2, #55	; 0x37
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f000 fc98 	bl	8002624 <_ZN9SX1280Hal13WriteRegisterEth>
    break;
 8001cf4:	e006      	b.n	8001d04 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x88>
  default:
    hal.WriteRegister(0x925, 0x32); // for SF9, SF10, SF11, SF12
 8001cf6:	4906      	ldr	r1, [pc, #24]	; (8001d10 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x94>)
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x90>)
 8001cfa:	2232      	movs	r2, #50	; 0x32
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f000 fc91 	bl	8002624 <_ZN9SX1280Hal13WriteRegisterEth>
  }
}
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	46c0      	nop			; (mov r8, r8)
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b005      	add	sp, #20
 8001d0a:	bd90      	pop	{r4, r7, pc}
 8001d0c:	200000ac 	.word	0x200000ac
 8001d10:	00000925 	.word	0x00000925

08001d14 <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th>:

void SX1280Driver::SetPacketParamsLoRa(
    uint8_t PreambleLength, SX1280_RadioLoRaPacketLengthsModes_t HeaderType,
    uint8_t PayloadLength, SX1280_RadioLoRaCrcModes_t crc, uint8_t InvertIQ) {
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	000c      	movs	r4, r1
 8001d1e:	0010      	movs	r0, r2
 8001d20:	0019      	movs	r1, r3
 8001d22:	1cfb      	adds	r3, r7, #3
 8001d24:	1c22      	adds	r2, r4, #0
 8001d26:	701a      	strb	r2, [r3, #0]
 8001d28:	1cbb      	adds	r3, r7, #2
 8001d2a:	1c02      	adds	r2, r0, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
 8001d2e:	1c7b      	adds	r3, r7, #1
 8001d30:	1c0a      	adds	r2, r1, #0
 8001d32:	701a      	strb	r2, [r3, #0]
  uint8_t buf[7];

  buf[0] = PreambleLength;
 8001d34:	2108      	movs	r1, #8
 8001d36:	187b      	adds	r3, r7, r1
 8001d38:	1cfa      	adds	r2, r7, #3
 8001d3a:	7812      	ldrb	r2, [r2, #0]
 8001d3c:	701a      	strb	r2, [r3, #0]
  buf[1] = HeaderType;
 8001d3e:	187b      	adds	r3, r7, r1
 8001d40:	1cba      	adds	r2, r7, #2
 8001d42:	7812      	ldrb	r2, [r2, #0]
 8001d44:	705a      	strb	r2, [r3, #1]
  buf[2] = PayloadLength;
 8001d46:	187b      	adds	r3, r7, r1
 8001d48:	1c7a      	adds	r2, r7, #1
 8001d4a:	7812      	ldrb	r2, [r2, #0]
 8001d4c:	709a      	strb	r2, [r3, #2]
  buf[3] = crc;
 8001d4e:	187a      	adds	r2, r7, r1
 8001d50:	2320      	movs	r3, #32
 8001d52:	18fb      	adds	r3, r7, r3
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	70d3      	strb	r3, [r2, #3]
  buf[4] = InvertIQ ? SX1280_LORA_IQ_INVERTED : SX1280_LORA_IQ_NORMAL;
 8001d58:	2324      	movs	r3, #36	; 0x24
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th+0x52>
 8001d62:	2200      	movs	r2, #0
 8001d64:	e000      	b.n	8001d68 <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th+0x54>
 8001d66:	2240      	movs	r2, #64	; 0x40
 8001d68:	2108      	movs	r1, #8
 8001d6a:	187b      	adds	r3, r7, r1
 8001d6c:	711a      	strb	r2, [r3, #4]
  buf[5] = 0x00;
 8001d6e:	187b      	adds	r3, r7, r1
 8001d70:	2200      	movs	r2, #0
 8001d72:	715a      	strb	r2, [r3, #5]
  buf[6] = 0x00;
 8001d74:	187b      	adds	r3, r7, r1
 8001d76:	2200      	movs	r2, #0
 8001d78:	719a      	strb	r2, [r3, #6]

  hal.WriteCommand(SX1280_RADIO_SET_PACKETPARAMS, buf, sizeof(buf));
 8001d7a:	187a      	adds	r2, r7, r1
 8001d7c:	4804      	ldr	r0, [pc, #16]	; (8001d90 <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th+0x7c>)
 8001d7e:	2307      	movs	r3, #7
 8001d80:	218c      	movs	r1, #140	; 0x8c
 8001d82:	f000 fb4d 	bl	8002420 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b005      	add	sp, #20
 8001d8c:	bd90      	pop	{r4, r7, pc}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	200000ac 	.word	0x200000ac

08001d94 <_ZN12SX1280Driver19ConfigModParamsFLRCEhhh>:

void SX1280Driver::ConfigModParamsFLRC(uint8_t bw, uint8_t cr, uint8_t bt) {
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	000c      	movs	r4, r1
 8001d9e:	0010      	movs	r0, r2
 8001da0:	0019      	movs	r1, r3
 8001da2:	1cfb      	adds	r3, r7, #3
 8001da4:	1c22      	adds	r2, r4, #0
 8001da6:	701a      	strb	r2, [r3, #0]
 8001da8:	1cbb      	adds	r3, r7, #2
 8001daa:	1c02      	adds	r2, r0, #0
 8001dac:	701a      	strb	r2, [r3, #0]
 8001dae:	1c7b      	adds	r3, r7, #1
 8001db0:	1c0a      	adds	r2, r1, #0
 8001db2:	701a      	strb	r2, [r3, #0]
  uint8_t rfparams[3] = {bw, cr, bt};
 8001db4:	210c      	movs	r1, #12
 8001db6:	187b      	adds	r3, r7, r1
 8001db8:	1cfa      	adds	r2, r7, #3
 8001dba:	7812      	ldrb	r2, [r2, #0]
 8001dbc:	701a      	strb	r2, [r3, #0]
 8001dbe:	187b      	adds	r3, r7, r1
 8001dc0:	1cba      	adds	r2, r7, #2
 8001dc2:	7812      	ldrb	r2, [r2, #0]
 8001dc4:	705a      	strb	r2, [r3, #1]
 8001dc6:	187b      	adds	r3, r7, r1
 8001dc8:	1c7a      	adds	r2, r7, #1
 8001dca:	7812      	ldrb	r2, [r2, #0]
 8001dcc:	709a      	strb	r2, [r3, #2]
  hal.WriteCommand(SX1280_RADIO_SET_MODULATIONPARAMS, rfparams,
 8001dce:	187a      	adds	r2, r7, r1
 8001dd0:	4804      	ldr	r0, [pc, #16]	; (8001de4 <_ZN12SX1280Driver19ConfigModParamsFLRCEhhh+0x50>)
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	218b      	movs	r1, #139	; 0x8b
 8001dd6:	f000 fb23 	bl	8002420 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
                   sizeof(rfparams));
}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b005      	add	sp, #20
 8001de0:	bd90      	pop	{r4, r7, pc}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	200000ac 	.word	0x200000ac

08001de8 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt>:

void SX1280Driver::SetPacketParamsFLRC(uint8_t HeaderType, uint8_t crc,
                                       uint8_t PreambleLength,
                                       uint8_t PayloadLength, uint32_t syncWord,
                                       uint16_t crcSeed) {
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	000c      	movs	r4, r1
 8001df2:	0010      	movs	r0, r2
 8001df4:	0019      	movs	r1, r3
 8001df6:	1cfb      	adds	r3, r7, #3
 8001df8:	1c22      	adds	r2, r4, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
 8001dfc:	1cbb      	adds	r3, r7, #2
 8001dfe:	1c02      	adds	r2, r0, #0
 8001e00:	701a      	strb	r2, [r3, #0]
 8001e02:	1c7b      	adds	r3, r7, #1
 8001e04:	1c0a      	adds	r2, r1, #0
 8001e06:	701a      	strb	r2, [r3, #0]
  if (PreambleLength < 8)
 8001e08:	1c7b      	adds	r3, r7, #1
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b07      	cmp	r3, #7
 8001e0e:	d802      	bhi.n	8001e16 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x2e>
    PreambleLength = 8;
 8001e10:	1c7b      	adds	r3, r7, #1
 8001e12:	2208      	movs	r2, #8
 8001e14:	701a      	strb	r2, [r3, #0]
  PreambleLength = ((PreambleLength / 4) - 1) << 4;
 8001e16:	1c7b      	adds	r3, r7, #1
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	1c7b      	adds	r3, r7, #1
 8001e24:	0112      	lsls	r2, r2, #4
 8001e26:	701a      	strb	r2, [r3, #0]
  crc = (crc) ? SX1280_FLRC_CRC_2_BYTE : SX1280_FLRC_CRC_OFF;
 8001e28:	1cbb      	adds	r3, r7, #2
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x4c>
 8001e30:	2220      	movs	r2, #32
 8001e32:	e000      	b.n	8001e36 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x4e>
 8001e34:	2200      	movs	r2, #0
 8001e36:	1cbb      	adds	r3, r7, #2
 8001e38:	701a      	strb	r2, [r3, #0]

  uint8_t buf[7];
  buf[0] = PreambleLength;                   // AGCPreambleLength
 8001e3a:	2108      	movs	r1, #8
 8001e3c:	187b      	adds	r3, r7, r1
 8001e3e:	1c7a      	adds	r2, r7, #1
 8001e40:	7812      	ldrb	r2, [r2, #0]
 8001e42:	701a      	strb	r2, [r3, #0]
  buf[1] = SX1280_FLRC_SYNC_WORD_LEN_P32S;   // SyncWordLength
 8001e44:	187b      	adds	r3, r7, r1
 8001e46:	2204      	movs	r2, #4
 8001e48:	705a      	strb	r2, [r3, #1]
  buf[2] = SX1280_FLRC_RX_MATCH_SYNC_WORD_1; // SyncWordMatch
 8001e4a:	187b      	adds	r3, r7, r1
 8001e4c:	2210      	movs	r2, #16
 8001e4e:	709a      	strb	r2, [r3, #2]
  buf[3] = HeaderType;                       // PacketType
 8001e50:	187b      	adds	r3, r7, r1
 8001e52:	1cfa      	adds	r2, r7, #3
 8001e54:	7812      	ldrb	r2, [r2, #0]
 8001e56:	70da      	strb	r2, [r3, #3]
  buf[4] = PayloadLength;                    // PayloadLength
 8001e58:	187a      	adds	r2, r7, r1
 8001e5a:	2320      	movs	r3, #32
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	7113      	strb	r3, [r2, #4]
  buf[5] = (crc << 4);                       // CrcLength
 8001e62:	1cbb      	adds	r3, r7, #2
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	000c      	movs	r4, r1
 8001e6c:	193b      	adds	r3, r7, r4
 8001e6e:	715a      	strb	r2, [r3, #5]
  buf[6] = 0x08;                             // Must be whitening disabled
 8001e70:	193b      	adds	r3, r7, r4
 8001e72:	2208      	movs	r2, #8
 8001e74:	719a      	strb	r2, [r3, #6]
  hal.WriteCommand(SX1280_RADIO_SET_PACKETPARAMS, buf, sizeof(buf));
 8001e76:	193a      	adds	r2, r7, r4
 8001e78:	4821      	ldr	r0, [pc, #132]	; (8001f00 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x118>)
 8001e7a:	2307      	movs	r3, #7
 8001e7c:	218c      	movs	r1, #140	; 0x8c
 8001e7e:	f000 facf 	bl	8002420 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>

  // CRC seed (use dedicated cipher)
  buf[0] = (uint8_t)(crcSeed >> 8);
 8001e82:	2028      	movs	r0, #40	; 0x28
 8001e84:	183b      	adds	r3, r7, r0
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	121b      	asrs	r3, r3, #8
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	0021      	movs	r1, r4
 8001e8e:	187b      	adds	r3, r7, r1
 8001e90:	701a      	strb	r2, [r3, #0]
  buf[1] = (uint8_t)crcSeed;
 8001e92:	183b      	adds	r3, r7, r0
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	187b      	adds	r3, r7, r1
 8001e9a:	705a      	strb	r2, [r3, #1]
  hal.WriteRegister(SX1280_REG_FLRC_CRC_SEED, buf, 2);
 8001e9c:	000c      	movs	r4, r1
 8001e9e:	193a      	adds	r2, r7, r4
 8001ea0:	4918      	ldr	r1, [pc, #96]	; (8001f04 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x11c>)
 8001ea2:	4817      	ldr	r0, [pc, #92]	; (8001f00 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x118>)
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	f000 fb6b 	bl	8002580 <_ZN9SX1280Hal13WriteRegisterEtPhh>

  // CRC POLY 0x3D65
  buf[0] = 0x3D;
 8001eaa:	193b      	adds	r3, r7, r4
 8001eac:	223d      	movs	r2, #61	; 0x3d
 8001eae:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x65;
 8001eb0:	193b      	adds	r3, r7, r4
 8001eb2:	2265      	movs	r2, #101	; 0x65
 8001eb4:	705a      	strb	r2, [r3, #1]
  hal.WriteRegister(SX1280_REG_FLRC_CRC_POLY, buf, 2);
 8001eb6:	193a      	adds	r2, r7, r4
 8001eb8:	4913      	ldr	r1, [pc, #76]	; (8001f08 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x120>)
 8001eba:	4811      	ldr	r0, [pc, #68]	; (8001f00 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x118>)
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	f000 fb5f 	bl	8002580 <_ZN9SX1280Hal13WriteRegisterEtPhh>

  // Set SyncWord1
  buf[0] = (uint8_t)(syncWord >> 24);
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	0e1b      	lsrs	r3, r3, #24
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	0021      	movs	r1, r4
 8001eca:	187b      	adds	r3, r7, r1
 8001ecc:	701a      	strb	r2, [r3, #0]
  buf[1] = (uint8_t)(syncWord >> 16);
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	0c1b      	lsrs	r3, r3, #16
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	187b      	adds	r3, r7, r1
 8001ed6:	705a      	strb	r2, [r3, #1]
  buf[2] = (uint8_t)(syncWord >> 8);
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	0a1b      	lsrs	r3, r3, #8
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	187b      	adds	r3, r7, r1
 8001ee0:	709a      	strb	r2, [r3, #2]
  buf[3] = (uint8_t)syncWord;
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	187b      	adds	r3, r7, r1
 8001ee8:	70da      	strb	r2, [r3, #3]
  hal.WriteRegister(SX1280_REG_FLRC_SYNC_WORD, buf, 4);
 8001eea:	187a      	adds	r2, r7, r1
 8001eec:	4907      	ldr	r1, [pc, #28]	; (8001f0c <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x124>)
 8001eee:	4804      	ldr	r0, [pc, #16]	; (8001f00 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x118>)
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	f000 fb45 	bl	8002580 <_ZN9SX1280Hal13WriteRegisterEtPhh>
}
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	b005      	add	sp, #20
 8001efc:	bd90      	pop	{r4, r7, pc}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	200000ac 	.word	0x200000ac
 8001f04:	000009c8 	.word	0x000009c8
 8001f08:	000009c6 	.word	0x000009c6
 8001f0c:	000009cf 	.word	0x000009cf

08001f10 <_ZN12SX1280Driver15SetFrequencyRegEm>:

  hal.WriteCommand(SX1280_RADIO_SET_RFFREQUENCY, buf, sizeof(buf));
  currFreq = Reqfreq;
}

void SX1280Driver::SetFrequencyReg(uint32_t freq) {
 8001f10:	b590      	push	{r4, r7, lr}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint8_t buf[3] = {0};
 8001f1a:	240c      	movs	r4, #12
 8001f1c:	193b      	adds	r3, r7, r4
 8001f1e:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <_ZN12SX1280Driver15SetFrequencyRegEm+0x58>)
 8001f20:	7812      	ldrb	r2, [r2, #0]
 8001f22:	701a      	strb	r2, [r3, #0]
 8001f24:	2201      	movs	r2, #1
 8001f26:	189b      	adds	r3, r3, r2
 8001f28:	2202      	movs	r2, #2
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f008 fefc 	bl	800ad2a <memset>

  buf[0] = (uint8_t)((freq >> 16) & 0xFF);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	0c1b      	lsrs	r3, r3, #16
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	193b      	adds	r3, r7, r4
 8001f3a:	701a      	strb	r2, [r3, #0]
  buf[1] = (uint8_t)((freq >> 8) & 0xFF);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	0a1b      	lsrs	r3, r3, #8
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	193b      	adds	r3, r7, r4
 8001f44:	705a      	strb	r2, [r3, #1]
  buf[2] = (uint8_t)(freq & 0xFF);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	193b      	adds	r3, r7, r4
 8001f4c:	709a      	strb	r2, [r3, #2]

  hal.WriteCommand(SX1280_RADIO_SET_RFFREQUENCY, buf, sizeof(buf));
 8001f4e:	193a      	adds	r2, r7, r4
 8001f50:	4806      	ldr	r0, [pc, #24]	; (8001f6c <_ZN12SX1280Driver15SetFrequencyRegEm+0x5c>)
 8001f52:	2303      	movs	r3, #3
 8001f54:	2186      	movs	r1, #134	; 0x86
 8001f56:	f000 fa63 	bl	8002420 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
  currFreq = freq;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001f60:	46c0      	nop			; (mov r8, r8)
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b005      	add	sp, #20
 8001f66:	bd90      	pop	{r4, r7, pc}
 8001f68:	0800b6f8 	.word	0x0800b6f8
 8001f6c:	200000ac 	.word	0x200000ac

08001f70 <_ZN12SX1280Driver11SetFIFOaddrEhh>:

  efeHz = 1.55 * efe / (1600.0f / 800000.0f);
  return efeHz;
}

void SX1280Driver::SetFIFOaddr(uint8_t txBaseAddr, uint8_t rxBaseAddr) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	0008      	movs	r0, r1
 8001f7a:	0011      	movs	r1, r2
 8001f7c:	1cfb      	adds	r3, r7, #3
 8001f7e:	1c02      	adds	r2, r0, #0
 8001f80:	701a      	strb	r2, [r3, #0]
 8001f82:	1cbb      	adds	r3, r7, #2
 8001f84:	1c0a      	adds	r2, r1, #0
 8001f86:	701a      	strb	r2, [r3, #0]
  uint8_t buf[2];

  buf[0] = txBaseAddr;
 8001f88:	210c      	movs	r1, #12
 8001f8a:	187b      	adds	r3, r7, r1
 8001f8c:	1cfa      	adds	r2, r7, #3
 8001f8e:	7812      	ldrb	r2, [r2, #0]
 8001f90:	701a      	strb	r2, [r3, #0]
  buf[1] = rxBaseAddr;
 8001f92:	187b      	adds	r3, r7, r1
 8001f94:	1cba      	adds	r2, r7, #2
 8001f96:	7812      	ldrb	r2, [r2, #0]
 8001f98:	705a      	strb	r2, [r3, #1]
  hal.WriteCommand(SX1280_RADIO_SET_BUFFERBASEADDRESS, buf, sizeof(buf));
 8001f9a:	187a      	adds	r2, r7, r1
 8001f9c:	4804      	ldr	r0, [pc, #16]	; (8001fb0 <_ZN12SX1280Driver11SetFIFOaddrEhh+0x40>)
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	218f      	movs	r1, #143	; 0x8f
 8001fa2:	f000 fa3d 	bl	8002420 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
}
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	b004      	add	sp, #16
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	200000ac 	.word	0x200000ac

08001fb4 <_ZN12SX1280Driver15SetDioIrqParamsEtttt>:

void SX1280Driver::SetDioIrqParams(uint16_t irqMask, uint16_t dio1Mask,
                                   uint16_t dio2Mask, uint16_t dio3Mask) {
 8001fb4:	b5b0      	push	{r4, r5, r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	000c      	movs	r4, r1
 8001fbe:	0010      	movs	r0, r2
 8001fc0:	0019      	movs	r1, r3
 8001fc2:	250a      	movs	r5, #10
 8001fc4:	197b      	adds	r3, r7, r5
 8001fc6:	1c22      	adds	r2, r4, #0
 8001fc8:	801a      	strh	r2, [r3, #0]
 8001fca:	2408      	movs	r4, #8
 8001fcc:	193b      	adds	r3, r7, r4
 8001fce:	1c02      	adds	r2, r0, #0
 8001fd0:	801a      	strh	r2, [r3, #0]
 8001fd2:	1dbb      	adds	r3, r7, #6
 8001fd4:	1c0a      	adds	r2, r1, #0
 8001fd6:	801a      	strh	r2, [r3, #0]
  uint8_t buf[8];

  buf[0] = (uint8_t)((irqMask >> 8) & 0x00FF);
 8001fd8:	0028      	movs	r0, r5
 8001fda:	183b      	adds	r3, r7, r0
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	2110      	movs	r1, #16
 8001fe6:	187b      	adds	r3, r7, r1
 8001fe8:	701a      	strb	r2, [r3, #0]
  buf[1] = (uint8_t)(irqMask & 0x00FF);
 8001fea:	183b      	adds	r3, r7, r0
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	187b      	adds	r3, r7, r1
 8001ff2:	705a      	strb	r2, [r3, #1]
  buf[2] = (uint8_t)((dio1Mask >> 8) & 0x00FF);
 8001ff4:	193b      	adds	r3, r7, r4
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	0a1b      	lsrs	r3, r3, #8
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	187b      	adds	r3, r7, r1
 8002000:	709a      	strb	r2, [r3, #2]
  buf[3] = (uint8_t)(dio1Mask & 0x00FF);
 8002002:	193b      	adds	r3, r7, r4
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	b2da      	uxtb	r2, r3
 8002008:	187b      	adds	r3, r7, r1
 800200a:	70da      	strb	r2, [r3, #3]
  buf[4] = (uint8_t)((dio2Mask >> 8) & 0x00FF);
 800200c:	1dbb      	adds	r3, r7, #6
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	0a1b      	lsrs	r3, r3, #8
 8002012:	b29b      	uxth	r3, r3
 8002014:	b2da      	uxtb	r2, r3
 8002016:	187b      	adds	r3, r7, r1
 8002018:	711a      	strb	r2, [r3, #4]
  buf[5] = (uint8_t)(dio2Mask & 0x00FF);
 800201a:	1dbb      	adds	r3, r7, #6
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	b2da      	uxtb	r2, r3
 8002020:	187b      	adds	r3, r7, r1
 8002022:	715a      	strb	r2, [r3, #5]
  buf[6] = (uint8_t)((dio3Mask >> 8) & 0x00FF);
 8002024:	2028      	movs	r0, #40	; 0x28
 8002026:	183b      	adds	r3, r7, r0
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	0a1b      	lsrs	r3, r3, #8
 800202c:	b29b      	uxth	r3, r3
 800202e:	b2da      	uxtb	r2, r3
 8002030:	187b      	adds	r3, r7, r1
 8002032:	719a      	strb	r2, [r3, #6]
  buf[7] = (uint8_t)(dio3Mask & 0x00FF);
 8002034:	183b      	adds	r3, r7, r0
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	187b      	adds	r3, r7, r1
 800203c:	71da      	strb	r2, [r3, #7]

  hal.WriteCommand(SX1280_RADIO_SET_DIOIRQPARAMS, buf, sizeof(buf));
 800203e:	187a      	adds	r2, r7, r1
 8002040:	4804      	ldr	r0, [pc, #16]	; (8002054 <_ZN12SX1280Driver15SetDioIrqParamsEtttt+0xa0>)
 8002042:	2308      	movs	r3, #8
 8002044:	218d      	movs	r1, #141	; 0x8d
 8002046:	f000 f9eb 	bl	8002420 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
}
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	46bd      	mov	sp, r7
 800204e:	b006      	add	sp, #24
 8002050:	bdb0      	pop	{r4, r5, r7, pc}
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	200000ac 	.word	0x200000ac

08002058 <_ZN12SX1280Driver12GetIrqStatusEv>:

uint16_t SX1280Driver::GetIrqStatus() {
 8002058:	b590      	push	{r4, r7, lr}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint8_t status[2];

  hal.ReadCommand(SX1280_RADIO_GET_IRQSTATUS, status, 2);
 8002060:	240c      	movs	r4, #12
 8002062:	193a      	adds	r2, r7, r4
 8002064:	4809      	ldr	r0, [pc, #36]	; (800208c <_ZN12SX1280Driver12GetIrqStatusEv+0x34>)
 8002066:	2302      	movs	r3, #2
 8002068:	2115      	movs	r1, #21
 800206a:	f000 fa1f 	bl	80024ac <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh>
  return status[0] << 8 | status[1];
 800206e:	0021      	movs	r1, r4
 8002070:	187b      	adds	r3, r7, r1
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	b21a      	sxth	r2, r3
 8002078:	187b      	adds	r3, r7, r1
 800207a:	785b      	ldrb	r3, [r3, #1]
 800207c:	b21b      	sxth	r3, r3
 800207e:	4313      	orrs	r3, r2
 8002080:	b21b      	sxth	r3, r3
 8002082:	b29b      	uxth	r3, r3
}
 8002084:	0018      	movs	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	b005      	add	sp, #20
 800208a:	bd90      	pop	{r4, r7, pc}
 800208c:	200000ac 	.word	0x200000ac

08002090 <_ZN12SX1280Driver14ClearIrqStatusEt>:

void SX1280Driver::ClearIrqStatus(uint16_t irqMask) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	000a      	movs	r2, r1
 800209a:	1cbb      	adds	r3, r7, #2
 800209c:	801a      	strh	r2, [r3, #0]
  uint8_t buf[2];

  buf[0] = (uint8_t)(((uint16_t)irqMask >> 8) & 0x00FF);
 800209e:	1cbb      	adds	r3, r7, #2
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	0a1b      	lsrs	r3, r3, #8
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	210c      	movs	r1, #12
 80020aa:	187b      	adds	r3, r7, r1
 80020ac:	701a      	strb	r2, [r3, #0]
  buf[1] = (uint8_t)((uint16_t)irqMask & 0x00FF);
 80020ae:	1cbb      	adds	r3, r7, #2
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	187b      	adds	r3, r7, r1
 80020b6:	705a      	strb	r2, [r3, #1]

  hal.WriteCommand(SX1280_RADIO_CLR_IRQSTATUS, buf, sizeof(buf));
 80020b8:	187a      	adds	r2, r7, r1
 80020ba:	4804      	ldr	r0, [pc, #16]	; (80020cc <_ZN12SX1280Driver14ClearIrqStatusEt+0x3c>)
 80020bc:	2302      	movs	r3, #2
 80020be:	2197      	movs	r1, #151	; 0x97
 80020c0:	f000 f9ae 	bl	8002420 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
}
 80020c4:	46c0      	nop			; (mov r8, r8)
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b004      	add	sp, #16
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	200000ac 	.word	0x200000ac

080020d0 <_ZN12SX1280Driver7TXnbISREv>:

void SX1280Driver::TXnbISR() {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  currOpmode = SX1280_MODE_FS; // radio goes to FS after TX
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	223c      	movs	r2, #60	; 0x3c
 80020dc:	2104      	movs	r1, #4
 80020de:	5499      	strb	r1, [r3, r2]
#ifdef DEBUG_SX1280_OTA_TIMING
  endTX = micros();
  DBGLN("TOA: %d", endTX - beginTX);
#endif
  if (TXdoneCallback)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <_ZN12SX1280Driver7TXnbISREv+0x1e>
    TXdoneCallback();
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	4798      	blx	r3
}
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b002      	add	sp, #8
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <_ZN12SX1280Driver4TXnbEv>:

uint8_t FIFOaddr = 0;

void SX1280Driver::TXnb() {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if (currOpmode == SX1280_MODE_TX) // catch TX timeout
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	223c      	movs	r2, #60	; 0x3c
 8002104:	5c9b      	ldrb	r3, [r3, r2]
 8002106:	2b06      	cmp	r3, #6
 8002108:	d109      	bne.n	800211e <_ZN12SX1280Driver4TXnbEv+0x26>
  {
    // DBGLN("Timeout!");
    SetMode(SX1280_MODE_FS);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2104      	movs	r1, #4
 800210e:	0018      	movs	r0, r3
 8002110:	f7ff fd34 	bl	8001b7c <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>
    TXnbISR();
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	0018      	movs	r0, r3
 8002118:	f7ff ffda 	bl	80020d0 <_ZN12SX1280Driver7TXnbISREv>
    return;
 800211c:	e02b      	b.n	8002176 <_ZN12SX1280Driver4TXnbEv+0x7e>
  }
  hal.TXenable(); // do first to allow PA stablise
 800211e:	4b17      	ldr	r3, [pc, #92]	; (800217c <_ZN12SX1280Driver4TXnbEv+0x84>)
 8002120:	0018      	movs	r0, r3
 8002122:	f000 fbcd 	bl	80028c0 <_ZN9SX1280Hal8TXenableEv>
  hal.TXenable();
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <_ZN12SX1280Driver4TXnbEv+0x84>)
 8002128:	0018      	movs	r0, r3
 800212a:	f000 fbc9 	bl	80028c0 <_ZN9SX1280Hal8TXenableEv>
  hal.TXenable();
 800212e:	4b13      	ldr	r3, [pc, #76]	; (800217c <_ZN12SX1280Driver4TXnbEv+0x84>)
 8002130:	0018      	movs	r0, r3
 8002132:	f000 fbc5 	bl	80028c0 <_ZN9SX1280Hal8TXenableEv>
  hal.TXenable();
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <_ZN12SX1280Driver4TXnbEv+0x84>)
 8002138:	0018      	movs	r0, r3
 800213a:	f000 fbc1 	bl	80028c0 <_ZN9SX1280Hal8TXenableEv>
  hal.TXenable();
 800213e:	4b0f      	ldr	r3, [pc, #60]	; (800217c <_ZN12SX1280Driver4TXnbEv+0x84>)
 8002140:	0018      	movs	r0, r3
 8002142:	f000 fbbd 	bl	80028c0 <_ZN9SX1280Hal8TXenableEv>
  hal.TXenable();
 8002146:	4b0d      	ldr	r3, [pc, #52]	; (800217c <_ZN12SX1280Driver4TXnbEv+0x84>)
 8002148:	0018      	movs	r0, r3
 800214a:	f000 fbb9 	bl	80028c0 <_ZN9SX1280Hal8TXenableEv>
  hal.TXenable();
 800214e:	4b0b      	ldr	r3, [pc, #44]	; (800217c <_ZN12SX1280Driver4TXnbEv+0x84>)
 8002150:	0018      	movs	r0, r3
 8002152:	f000 fbb5 	bl	80028c0 <_ZN9SX1280Hal8TXenableEv>
  hal.WriteBuffer(0x00, TXdataBuffer,
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3308      	adds	r3, #8
 800215a:	001a      	movs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2138      	movs	r1, #56	; 0x38
 8002160:	5c5b      	ldrb	r3, [r3, r1]
 8002162:	4806      	ldr	r0, [pc, #24]	; (800217c <_ZN12SX1280Driver4TXnbEv+0x84>)
 8002164:	2100      	movs	r1, #0
 8002166:	f000 fadb 	bl	8002720 <_ZN9SX1280Hal11WriteBufferEhPVhh>
                  PayloadLength); // todo fix offset to equal fifo addr
  instance->SetMode(SX1280_MODE_TX);
 800216a:	4b05      	ldr	r3, [pc, #20]	; (8002180 <_ZN12SX1280Driver4TXnbEv+0x88>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2106      	movs	r1, #6
 8002170:	0018      	movs	r0, r3
 8002172:	f7ff fd03 	bl	8001b7c <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>
#ifdef DEBUG_SX1280_OTA_TIMING
  beginTX = micros();
#endif
}
 8002176:	46bd      	mov	sp, r7
 8002178:	b002      	add	sp, #8
 800217a:	bd80      	pop	{r7, pc}
 800217c:	200000ac 	.word	0x200000ac
 8002180:	200000b0 	.word	0x200000b0

08002184 <_ZN12SX1280Driver7RXnbISREv>:

void SX1280Driver::RXnbISR() {
 8002184:	b5b0      	push	{r4, r5, r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  // In continuous receive mode, the device stays in Rx mode
  if (timeout != 0xFFFF) {
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002190:	4a14      	ldr	r2, [pc, #80]	; (80021e4 <_ZN12SX1280Driver7RXnbISREv+0x60>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d003      	beq.n	800219e <_ZN12SX1280Driver7RXnbISREv+0x1a>
    // From table 11-28, pg 81 datasheet rev 3.2
    // upon successsful receipt, when the timer is active or in single mode, it
    // returns to STDBY_RC but because we have AUTO_FS enabled we automatically
    // transition to state SX1280_MODE_FS
    currOpmode = SX1280_MODE_FS;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	223c      	movs	r2, #60	; 0x3c
 800219a:	2104      	movs	r1, #4
 800219c:	5499      	strb	r1, [r3, r2]
  }
  uint8_t FIFOaddr = GetRxBufferAddr();
 800219e:	250f      	movs	r5, #15
 80021a0:	197c      	adds	r4, r7, r5
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	0018      	movs	r0, r3
 80021a6:	f000 f835 	bl	8002214 <_ZN12SX1280Driver15GetRxBufferAddrEv>
 80021aa:	0003      	movs	r3, r0
 80021ac:	7023      	strb	r3, [r4, #0]
  hal.ReadBuffer(FIFOaddr, RXdataBuffer, PayloadLength);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	331c      	adds	r3, #28
 80021b2:	001a      	movs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2138      	movs	r1, #56	; 0x38
 80021b8:	5c5c      	ldrb	r4, [r3, r1]
 80021ba:	197b      	adds	r3, r7, r5
 80021bc:	7819      	ldrb	r1, [r3, #0]
 80021be:	480a      	ldr	r0, [pc, #40]	; (80021e8 <_ZN12SX1280Driver7RXnbISREv+0x64>)
 80021c0:	0023      	movs	r3, r4
 80021c2:	f000 faff 	bl	80027c4 <_ZN9SX1280Hal10ReadBufferEhPVhh>
  GetLastPacketStats();
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	0018      	movs	r0, r3
 80021ca:	f000 f83b 	bl	8002244 <_ZN12SX1280Driver18GetLastPacketStatsEv>
  if (RXdoneCallback)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d002      	beq.n	80021dc <_ZN12SX1280Driver7RXnbISREv+0x58>
    RXdoneCallback();
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4798      	blx	r3
}
 80021dc:	46c0      	nop			; (mov r8, r8)
 80021de:	46bd      	mov	sp, r7
 80021e0:	b004      	add	sp, #16
 80021e2:	bdb0      	pop	{r4, r5, r7, pc}
 80021e4:	0000ffff 	.word	0x0000ffff
 80021e8:	200000ac 	.word	0x200000ac

080021ec <_ZN12SX1280Driver4RXnbEv>:

void SX1280Driver::RXnb() {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  hal.RXenable();
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <_ZN12SX1280Driver4RXnbEv+0x24>)
 80021f6:	0018      	movs	r0, r3
 80021f8:	f000 fb82 	bl	8002900 <_ZN9SX1280Hal8RXenableEv>
  SetMode(SX1280_MODE_RX);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2105      	movs	r1, #5
 8002200:	0018      	movs	r0, r3
 8002202:	f7ff fcbb 	bl	8001b7c <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>
}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	46bd      	mov	sp, r7
 800220a:	b002      	add	sp, #8
 800220c:	bd80      	pop	{r7, pc}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	200000ac 	.word	0x200000ac

08002214 <_ZN12SX1280Driver15GetRxBufferAddrEv>:

uint8_t SX1280Driver::GetRxBufferAddr() {
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint8_t status[2] = {0};
 800221c:	210c      	movs	r1, #12
 800221e:	187b      	adds	r3, r7, r1
 8002220:	2200      	movs	r2, #0
 8002222:	801a      	strh	r2, [r3, #0]
  hal.ReadCommand(SX1280_RADIO_GET_RXBUFFERSTATUS, status, 2);
 8002224:	000c      	movs	r4, r1
 8002226:	187a      	adds	r2, r7, r1
 8002228:	4805      	ldr	r0, [pc, #20]	; (8002240 <_ZN12SX1280Driver15GetRxBufferAddrEv+0x2c>)
 800222a:	2302      	movs	r3, #2
 800222c:	2117      	movs	r1, #23
 800222e:	f000 f93d 	bl	80024ac <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh>
  return status[1];
 8002232:	193b      	adds	r3, r7, r4
 8002234:	785b      	ldrb	r3, [r3, #1]
}
 8002236:	0018      	movs	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	b005      	add	sp, #20
 800223c:	bd90      	pop	{r4, r7, pc}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	200000ac 	.word	0x200000ac

08002244 <_ZN12SX1280Driver18GetLastPacketStatsEv>:

  hal.ReadCommand(SX1280_RADIO_GET_RSSIINST, (uint8_t *)&status, 1);
  return -(int8_t)(status / 2);
}

void SX1280Driver::GetLastPacketStats() {
 8002244:	b590      	push	{r4, r7, lr}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint8_t status[2];

  hal.ReadCommand(SX1280_RADIO_GET_PACKETSTATUS, status, 2);
 800224c:	240c      	movs	r4, #12
 800224e:	193a      	adds	r2, r7, r4
 8002250:	481a      	ldr	r0, [pc, #104]	; (80022bc <_ZN12SX1280Driver18GetLastPacketStatsEv+0x78>)
 8002252:	2302      	movs	r3, #2
 8002254:	211d      	movs	r1, #29
 8002256:	f000 f929 	bl	80024ac <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh>
  LastPacketRSSI = -(int8_t)(status[0] / 2);
 800225a:	0020      	movs	r0, r4
 800225c:	183b      	adds	r3, r7, r0
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	085b      	lsrs	r3, r3, #1
 8002262:	b2db      	uxtb	r3, r3
 8002264:	425b      	negs	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	b259      	sxtb	r1, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	223a      	movs	r2, #58	; 0x3a
 800226e:	5499      	strb	r1, [r3, r2]
  LastPacketSNR = (int8_t)status[1] / 4;
 8002270:	183b      	adds	r3, r7, r0
 8002272:	785b      	ldrb	r3, [r3, #1]
 8002274:	b25b      	sxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	da00      	bge.n	800227c <_ZN12SX1280Driver18GetLastPacketStatsEv+0x38>
 800227a:	3303      	adds	r3, #3
 800227c:	109b      	asrs	r3, r3, #2
 800227e:	b259      	sxtb	r1, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	223b      	movs	r2, #59	; 0x3b
 8002284:	5499      	strb	r1, [r3, r2]
  // https://www.mouser.com/datasheet/2/761/DS_SX1280-1_V2.2-1511144.pdf
  // need to subtract SNR from RSSI when SNR <= 0;
  int8_t negOffset = (LastPacketSNR < 0) ? LastPacketSNR : 0;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	223b      	movs	r2, #59	; 0x3b
 800228a:	569b      	ldrsb	r3, [r3, r2]
 800228c:	220f      	movs	r2, #15
 800228e:	18ba      	adds	r2, r7, r2
 8002290:	b259      	sxtb	r1, r3
 8002292:	2900      	cmp	r1, #0
 8002294:	dd00      	ble.n	8002298 <_ZN12SX1280Driver18GetLastPacketStatsEv+0x54>
 8002296:	2300      	movs	r3, #0
 8002298:	7013      	strb	r3, [r2, #0]
  LastPacketRSSI += negOffset;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	223a      	movs	r2, #58	; 0x3a
 800229e:	569b      	ldrsb	r3, [r3, r2]
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	230f      	movs	r3, #15
 80022a4:	18fb      	adds	r3, r7, r3
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	18d3      	adds	r3, r2, r3
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	b259      	sxtb	r1, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	223a      	movs	r2, #58	; 0x3a
 80022b2:	5499      	strb	r1, [r3, r2]
}
 80022b4:	46c0      	nop			; (mov r8, r8)
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b005      	add	sp, #20
 80022ba:	bd90      	pop	{r4, r7, pc}
 80022bc:	200000ac 	.word	0x200000ac

080022c0 <_ZN12SX1280Driver11IsrCallbackEv>:

void SX1280Driver::IsrCallback() {
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
  uint16_t irqStatus = instance->GetIrqStatus();
 80022c6:	4b15      	ldr	r3, [pc, #84]	; (800231c <_ZN12SX1280Driver11IsrCallbackEv+0x5c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	1dbc      	adds	r4, r7, #6
 80022cc:	0018      	movs	r0, r3
 80022ce:	f7ff fec3 	bl	8002058 <_ZN12SX1280Driver12GetIrqStatusEv>
 80022d2:	0003      	movs	r3, r0
 80022d4:	8023      	strh	r3, [r4, #0]
  instance->ClearIrqStatus(SX1280_IRQ_RADIO_ALL);
 80022d6:	4b11      	ldr	r3, [pc, #68]	; (800231c <_ZN12SX1280Driver11IsrCallbackEv+0x5c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a11      	ldr	r2, [pc, #68]	; (8002320 <_ZN12SX1280Driver11IsrCallbackEv+0x60>)
 80022dc:	0011      	movs	r1, r2
 80022de:	0018      	movs	r0, r3
 80022e0:	f7ff fed6 	bl	8002090 <_ZN12SX1280Driver14ClearIrqStatusEt>
  if (irqStatus & SX1280_IRQ_TX_DONE) {
 80022e4:	1dbb      	adds	r3, r7, #6
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	2201      	movs	r2, #1
 80022ea:	4013      	ands	r3, r2
 80022ec:	d008      	beq.n	8002300 <_ZN12SX1280Driver11IsrCallbackEv+0x40>
    hal.TXRXdisable();
 80022ee:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <_ZN12SX1280Driver11IsrCallbackEv+0x64>)
 80022f0:	0018      	movs	r0, r3
 80022f2:	f000 fb25 	bl	8002940 <_ZN9SX1280Hal11TXRXdisableEv>
    instance->TXnbISR();
 80022f6:	4b09      	ldr	r3, [pc, #36]	; (800231c <_ZN12SX1280Driver11IsrCallbackEv+0x5c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	0018      	movs	r0, r3
 80022fc:	f7ff fee8 	bl	80020d0 <_ZN12SX1280Driver7TXnbISREv>
  }
  if (irqStatus & SX1280_IRQ_RX_DONE)
 8002300:	1dbb      	adds	r3, r7, #6
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	2202      	movs	r2, #2
 8002306:	4013      	ands	r3, r2
 8002308:	d004      	beq.n	8002314 <_ZN12SX1280Driver11IsrCallbackEv+0x54>
    instance->RXnbISR();
 800230a:	4b04      	ldr	r3, [pc, #16]	; (800231c <_ZN12SX1280Driver11IsrCallbackEv+0x5c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	0018      	movs	r0, r3
 8002310:	f7ff ff38 	bl	8002184 <_ZN12SX1280Driver7RXnbISREv>
}
 8002314:	46c0      	nop			; (mov r8, r8)
 8002316:	46bd      	mov	sp, r7
 8002318:	b003      	add	sp, #12
 800231a:	bd90      	pop	{r4, r7, pc}
 800231c:	200000b0 	.word	0x200000b0
 8002320:	0000ffff 	.word	0x0000ffff
 8002324:	200000ac 	.word	0x200000ac

08002328 <_Z41__static_initialization_and_destruction_0ii>:
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d107      	bne.n	8002348 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	4a05      	ldr	r2, [pc, #20]	; (8002350 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d103      	bne.n	8002348 <_Z41__static_initialization_and_destruction_0ii+0x20>
SX1280Hal hal;
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8002342:	0018      	movs	r0, r3
 8002344:	f000 f814 	bl	8002370 <_ZN9SX1280HalC1Ev>
}
 8002348:	46c0      	nop			; (mov r8, r8)
 800234a:	46bd      	mov	sp, r7
 800234c:	b002      	add	sp, #8
 800234e:	bd80      	pop	{r7, pc}
 8002350:	0000ffff 	.word	0x0000ffff
 8002354:	200000ac 	.word	0x200000ac

08002358 <_GLOBAL__sub_I_hal>:
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <_GLOBAL__sub_I_hal+0x14>)
 800235e:	0019      	movs	r1, r3
 8002360:	2001      	movs	r0, #1
 8002362:	f7ff ffe1 	bl	8002328 <_Z41__static_initialization_and_destruction_0ii>
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	0000ffff 	.word	0x0000ffff

08002370 <_ZN9SX1280HalC1Ev>:

SX1280Hal *SX1280Hal::instance = NULL;

uint8_t OutBuffer[64];

SX1280Hal::SX1280Hal() { instance = this; }
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	4b03      	ldr	r3, [pc, #12]	; (8002388 <_ZN9SX1280HalC1Ev+0x18>)
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	0018      	movs	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	b002      	add	sp, #8
 8002386:	bd80      	pop	{r7, pc}
 8002388:	200000b4 	.word	0x200000b4

0800238c <_ZN9SX1280Hal4initEv>:

void SX1280Hal::end() {
  TXRXdisable(); // make sure the RX/TX amp pins are disabled
}

void SX1280Hal::init() {}
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	46c0      	nop			; (mov r8, r8)
 8002396:	46bd      	mov	sp, r7
 8002398:	b002      	add	sp, #8
 800239a:	bd80      	pop	{r7, pc}

0800239c <_ZN9SX1280Hal5resetEv>:

void SX1280Hal::reset(void) {
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  // We do not have this pin
}
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b002      	add	sp, #8
 80023aa:	bd80      	pop	{r7, pc}

080023ac <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>:

void SX1280Hal::WriteCommand(SX1280_RadioCommands_t command, uint8_t val) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	0008      	movs	r0, r1
 80023b6:	0011      	movs	r1, r2
 80023b8:	1cfb      	adds	r3, r7, #3
 80023ba:	1c02      	adds	r2, r0, #0
 80023bc:	701a      	strb	r2, [r3, #0]
 80023be:	1cbb      	adds	r3, r7, #2
 80023c0:	1c0a      	adds	r2, r1, #0
 80023c2:	701a      	strb	r2, [r3, #0]
  WaitOnBusy();
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	0018      	movs	r0, r3
 80023c8:	f000 fa50 	bl	800286c <_ZN9SX1280Hal10WaitOnBusyEv>
  OutBuffer[0] = command;
 80023cc:	4b11      	ldr	r3, [pc, #68]	; (8002414 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x68>)
 80023ce:	1cfa      	adds	r2, r7, #3
 80023d0:	7812      	ldrb	r2, [r2, #0]
 80023d2:	701a      	strb	r2, [r3, #0]
  OutBuffer[1] = val;
 80023d4:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x68>)
 80023d6:	1cba      	adds	r2, r7, #2
 80023d8:	7812      	ldrb	r2, [r2, #0]
 80023da:	705a      	strb	r2, [r3, #1]
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80023dc:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x6c>)
 80023de:	2200      	movs	r2, #0
 80023e0:	2101      	movs	r1, #1
 80023e2:	0018      	movs	r0, r3
 80023e4:	f004 f999 	bl	800671a <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(RADIO_SPI, OutBuffer, 2, 5);
 80023e8:	490a      	ldr	r1, [pc, #40]	; (8002414 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x68>)
 80023ea:	480c      	ldr	r0, [pc, #48]	; (800241c <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x70>)
 80023ec:	2305      	movs	r3, #5
 80023ee:	2202      	movs	r2, #2
 80023f0:	f005 f986 	bl	8007700 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80023f4:	4b08      	ldr	r3, [pc, #32]	; (8002418 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x6c>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	2101      	movs	r1, #1
 80023fa:	0018      	movs	r0, r3
 80023fc:	f004 f98d 	bl	800671a <HAL_GPIO_WritePin>

  BusyDelay(12);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	210c      	movs	r1, #12
 8002404:	0018      	movs	r0, r3
 8002406:	f7ff fa1b 	bl	8001840 <_ZNK9SX1280Hal9BusyDelayEm>
}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	46bd      	mov	sp, r7
 800240e:	b002      	add	sp, #8
 8002410:	bd80      	pop	{r7, pc}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	200000b8 	.word	0x200000b8
 8002418:	50000400 	.word	0x50000400
 800241c:	2000040c 	.word	0x2000040c

08002420 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>:

void SX1280Hal::WriteCommand(SX1280_RadioCommands_t command, uint8_t *buffer,
                             uint8_t size) {
 8002420:	b5b0      	push	{r4, r5, r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	0008      	movs	r0, r1
 800242a:	607a      	str	r2, [r7, #4]
 800242c:	0019      	movs	r1, r3
 800242e:	250b      	movs	r5, #11
 8002430:	197b      	adds	r3, r7, r5
 8002432:	1c02      	adds	r2, r0, #0
 8002434:	701a      	strb	r2, [r3, #0]
 8002436:	240a      	movs	r4, #10
 8002438:	193b      	adds	r3, r7, r4
 800243a:	1c0a      	adds	r2, r1, #0
 800243c:	701a      	strb	r2, [r3, #0]
  OutBuffer[0] = (uint8_t)command;
 800243e:	4b17      	ldr	r3, [pc, #92]	; (800249c <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x7c>)
 8002440:	197a      	adds	r2, r7, r5
 8002442:	7812      	ldrb	r2, [r2, #0]
 8002444:	701a      	strb	r2, [r3, #0]
  memcpy(OutBuffer + 1, buffer, size);
 8002446:	4816      	ldr	r0, [pc, #88]	; (80024a0 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x80>)
 8002448:	193b      	adds	r3, r7, r4
 800244a:	781a      	ldrb	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	0019      	movs	r1, r3
 8002450:	f008 fc62 	bl	800ad18 <memcpy>

  WaitOnBusy();
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	0018      	movs	r0, r3
 8002458:	f000 fa08 	bl	800286c <_ZN9SX1280Hal10WaitOnBusyEv>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x84>)
 800245e:	2200      	movs	r2, #0
 8002460:	2101      	movs	r1, #1
 8002462:	0018      	movs	r0, r3
 8002464:	f004 f959 	bl	800671a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(RADIO_SPI, OutBuffer, size + 1, 5);
 8002468:	193b      	adds	r3, r7, r4
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	b29b      	uxth	r3, r3
 800246e:	3301      	adds	r3, #1
 8002470:	b29a      	uxth	r2, r3
 8002472:	490a      	ldr	r1, [pc, #40]	; (800249c <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x7c>)
 8002474:	480c      	ldr	r0, [pc, #48]	; (80024a8 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x88>)
 8002476:	2305      	movs	r3, #5
 8002478:	f005 f942 	bl	8007700 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x84>)
 800247e:	2201      	movs	r2, #1
 8002480:	2101      	movs	r1, #1
 8002482:	0018      	movs	r0, r3
 8002484:	f004 f949 	bl	800671a <HAL_GPIO_WritePin>

  BusyDelay(12);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	210c      	movs	r1, #12
 800248c:	0018      	movs	r0, r3
 800248e:	f7ff f9d7 	bl	8001840 <_ZNK9SX1280Hal9BusyDelayEm>
}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	46bd      	mov	sp, r7
 8002496:	b004      	add	sp, #16
 8002498:	bdb0      	pop	{r4, r5, r7, pc}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	200000b8 	.word	0x200000b8
 80024a0:	200000b9 	.word	0x200000b9
 80024a4:	50000400 	.word	0x50000400
 80024a8:	2000040c 	.word	0x2000040c

080024ac <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh>:

void SX1280Hal::ReadCommand(SX1280_RadioCommands_t command, uint8_t *buffer,
                            uint8_t size) {
 80024ac:	b5b0      	push	{r4, r5, r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af02      	add	r7, sp, #8
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	0008      	movs	r0, r1
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	0019      	movs	r1, r3
 80024ba:	240b      	movs	r4, #11
 80024bc:	193b      	adds	r3, r7, r4
 80024be:	1c02      	adds	r2, r0, #0
 80024c0:	701a      	strb	r2, [r3, #0]
 80024c2:	230a      	movs	r3, #10
 80024c4:	18fb      	adds	r3, r7, r3
 80024c6:	1c0a      	adds	r2, r1, #0
 80024c8:	701a      	strb	r2, [r3, #0]
#define RADIO_GET_STATUS_BUF_SIZEOF                                            \
  3 // special case for command == SX1280_RADIO_GET_STATUS, fixed 3 bytes packet
    // size

  WaitOnBusy();
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	0018      	movs	r0, r3
 80024ce:	f000 f9cd 	bl	800286c <_ZN9SX1280Hal10WaitOnBusyEv>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80024d2:	4b27      	ldr	r3, [pc, #156]	; (8002570 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc4>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	2101      	movs	r1, #1
 80024d8:	0018      	movs	r0, r3
 80024da:	f004 f91e 	bl	800671a <HAL_GPIO_WritePin>

  if (command == SX1280_RADIO_GET_STATUS) {
 80024de:	193b      	adds	r3, r7, r4
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2bc0      	cmp	r3, #192	; 0xc0
 80024e4:	d116      	bne.n	8002514 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0x68>
    OutBuffer[0] = (uint8_t)command;
 80024e6:	4b23      	ldr	r3, [pc, #140]	; (8002574 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 80024e8:	193a      	adds	r2, r7, r4
 80024ea:	7812      	ldrb	r2, [r2, #0]
 80024ec:	701a      	strb	r2, [r3, #0]
    OutBuffer[1] = 0x00;
 80024ee:	4b21      	ldr	r3, [pc, #132]	; (8002574 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	705a      	strb	r2, [r3, #1]
    OutBuffer[2] = 0x00;
 80024f4:	4b1f      	ldr	r3, [pc, #124]	; (8002574 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	709a      	strb	r2, [r3, #2]
    HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer,
 80024fa:	4a1e      	ldr	r2, [pc, #120]	; (8002574 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 80024fc:	491d      	ldr	r1, [pc, #116]	; (8002574 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 80024fe:	481e      	ldr	r0, [pc, #120]	; (8002578 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xcc>)
 8002500:	2305      	movs	r3, #5
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	2303      	movs	r3, #3
 8002506:	f005 fa53 	bl	80079b0 <HAL_SPI_TransmitReceive>
                            RADIO_GET_STATUS_BUF_SIZEOF, 5);
    buffer[0] = OutBuffer[0];
 800250a:	4b1a      	ldr	r3, [pc, #104]	; (8002574 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 800250c:	781a      	ldrb	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	701a      	strb	r2, [r3, #0]
 8002512:	e022      	b.n	800255a <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xae>
  } else {
    OutBuffer[0] = (uint8_t)command;
 8002514:	4b17      	ldr	r3, [pc, #92]	; (8002574 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 8002516:	220b      	movs	r2, #11
 8002518:	18ba      	adds	r2, r7, r2
 800251a:	7812      	ldrb	r2, [r2, #0]
 800251c:	701a      	strb	r2, [r3, #0]
    OutBuffer[1] = 0x00;
 800251e:	4b15      	ldr	r3, [pc, #84]	; (8002574 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 8002520:	2200      	movs	r2, #0
 8002522:	705a      	strb	r2, [r3, #1]
    memcpy(OutBuffer + 2, buffer, size);
 8002524:	4815      	ldr	r0, [pc, #84]	; (800257c <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xd0>)
 8002526:	250a      	movs	r5, #10
 8002528:	197b      	adds	r3, r7, r5
 800252a:	781a      	ldrb	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	0019      	movs	r1, r3
 8002530:	f008 fbf2 	bl	800ad18 <memcpy>
    HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer, size + 2, 5);
 8002534:	197b      	adds	r3, r7, r5
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	b29b      	uxth	r3, r3
 800253a:	3302      	adds	r3, #2
 800253c:	b29b      	uxth	r3, r3
 800253e:	4a0d      	ldr	r2, [pc, #52]	; (8002574 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 8002540:	490c      	ldr	r1, [pc, #48]	; (8002574 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 8002542:	480d      	ldr	r0, [pc, #52]	; (8002578 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xcc>)
 8002544:	2405      	movs	r4, #5
 8002546:	9400      	str	r4, [sp, #0]
 8002548:	f005 fa32 	bl	80079b0 <HAL_SPI_TransmitReceive>
    memcpy(buffer, OutBuffer + 2, size);
 800254c:	490b      	ldr	r1, [pc, #44]	; (800257c <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xd0>)
 800254e:	197b      	adds	r3, r7, r5
 8002550:	781a      	ldrb	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	0018      	movs	r0, r3
 8002556:	f008 fbdf 	bl	800ad18 <memcpy>
  }
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800255a:	4b05      	ldr	r3, [pc, #20]	; (8002570 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc4>)
 800255c:	2201      	movs	r2, #1
 800255e:	2101      	movs	r1, #1
 8002560:	0018      	movs	r0, r3
 8002562:	f004 f8da 	bl	800671a <HAL_GPIO_WritePin>
}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	46bd      	mov	sp, r7
 800256a:	b004      	add	sp, #16
 800256c:	bdb0      	pop	{r4, r5, r7, pc}
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	50000400 	.word	0x50000400
 8002574:	200000b8 	.word	0x200000b8
 8002578:	2000040c 	.word	0x2000040c
 800257c:	200000ba 	.word	0x200000ba

08002580 <_ZN9SX1280Hal13WriteRegisterEtPhh>:

void SX1280Hal::WriteRegister(uint16_t address, uint8_t *buffer, uint8_t size) {
 8002580:	b5b0      	push	{r4, r5, r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af02      	add	r7, sp, #8
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	0008      	movs	r0, r1
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	0019      	movs	r1, r3
 800258e:	240a      	movs	r4, #10
 8002590:	193b      	adds	r3, r7, r4
 8002592:	1c02      	adds	r2, r0, #0
 8002594:	801a      	strh	r2, [r3, #0]
 8002596:	2509      	movs	r5, #9
 8002598:	197b      	adds	r3, r7, r5
 800259a:	1c0a      	adds	r2, r1, #0
 800259c:	701a      	strb	r2, [r3, #0]
  OutBuffer[0] = (SX1280_RADIO_WRITE_REGISTER);
 800259e:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x94>)
 80025a0:	2218      	movs	r2, #24
 80025a2:	701a      	strb	r2, [r3, #0]
  OutBuffer[1] = ((address & 0xFF00) >> 8);
 80025a4:	193b      	adds	r3, r7, r4
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	0a1b      	lsrs	r3, r3, #8
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	4b19      	ldr	r3, [pc, #100]	; (8002614 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x94>)
 80025b0:	705a      	strb	r2, [r3, #1]
  OutBuffer[2] = (address & 0x00FF);
 80025b2:	193b      	adds	r3, r7, r4
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	4b16      	ldr	r3, [pc, #88]	; (8002614 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x94>)
 80025ba:	709a      	strb	r2, [r3, #2]

  memcpy(OutBuffer + 3, buffer, size);
 80025bc:	4816      	ldr	r0, [pc, #88]	; (8002618 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x98>)
 80025be:	197b      	adds	r3, r7, r5
 80025c0:	781a      	ldrb	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	0019      	movs	r1, r3
 80025c6:	f008 fba7 	bl	800ad18 <memcpy>

  WaitOnBusy();
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	0018      	movs	r0, r3
 80025ce:	f000 f94d 	bl	800286c <_ZN9SX1280Hal10WaitOnBusyEv>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80025d2:	4b12      	ldr	r3, [pc, #72]	; (800261c <_ZN9SX1280Hal13WriteRegisterEtPhh+0x9c>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	2101      	movs	r1, #1
 80025d8:	0018      	movs	r0, r3
 80025da:	f004 f89e 	bl	800671a <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer, size + 3, 5);
 80025de:	197b      	adds	r3, r7, r5
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3303      	adds	r3, #3
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	4a0a      	ldr	r2, [pc, #40]	; (8002614 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x94>)
 80025ea:	490a      	ldr	r1, [pc, #40]	; (8002614 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x94>)
 80025ec:	480c      	ldr	r0, [pc, #48]	; (8002620 <_ZN9SX1280Hal13WriteRegisterEtPhh+0xa0>)
 80025ee:	2405      	movs	r4, #5
 80025f0:	9400      	str	r4, [sp, #0]
 80025f2:	f005 f9dd 	bl	80079b0 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <_ZN9SX1280Hal13WriteRegisterEtPhh+0x9c>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	2101      	movs	r1, #1
 80025fc:	0018      	movs	r0, r3
 80025fe:	f004 f88c 	bl	800671a <HAL_GPIO_WritePin>

  BusyDelay(12);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	210c      	movs	r1, #12
 8002606:	0018      	movs	r0, r3
 8002608:	f7ff f91a 	bl	8001840 <_ZNK9SX1280Hal9BusyDelayEm>
}
 800260c:	46c0      	nop			; (mov r8, r8)
 800260e:	46bd      	mov	sp, r7
 8002610:	b004      	add	sp, #16
 8002612:	bdb0      	pop	{r4, r5, r7, pc}
 8002614:	200000b8 	.word	0x200000b8
 8002618:	200000bb 	.word	0x200000bb
 800261c:	50000400 	.word	0x50000400
 8002620:	2000040c 	.word	0x2000040c

08002624 <_ZN9SX1280Hal13WriteRegisterEth>:

void SX1280Hal::WriteRegister(uint16_t address, uint8_t value) {
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	0008      	movs	r0, r1
 800262e:	0011      	movs	r1, r2
 8002630:	1cbb      	adds	r3, r7, #2
 8002632:	1c02      	adds	r2, r0, #0
 8002634:	801a      	strh	r2, [r3, #0]
 8002636:	1c7b      	adds	r3, r7, #1
 8002638:	1c0a      	adds	r2, r1, #0
 800263a:	701a      	strb	r2, [r3, #0]
  WriteRegister(address, &value, 1);
 800263c:	1c7a      	adds	r2, r7, #1
 800263e:	1cbb      	adds	r3, r7, #2
 8002640:	8819      	ldrh	r1, [r3, #0]
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	2301      	movs	r3, #1
 8002646:	f7ff ff9b 	bl	8002580 <_ZN9SX1280Hal13WriteRegisterEtPhh>
}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	46bd      	mov	sp, r7
 800264e:	b002      	add	sp, #8
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <_ZN9SX1280Hal12ReadRegisterEtPhh>:

void SX1280Hal::ReadRegister(uint16_t address, uint8_t *buffer, uint8_t size) {
 8002654:	b5b0      	push	{r4, r5, r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af02      	add	r7, sp, #8
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	0008      	movs	r0, r1
 800265e:	607a      	str	r2, [r7, #4]
 8002660:	0019      	movs	r1, r3
 8002662:	240a      	movs	r4, #10
 8002664:	193b      	adds	r3, r7, r4
 8002666:	1c02      	adds	r2, r0, #0
 8002668:	801a      	strh	r2, [r3, #0]
 800266a:	2509      	movs	r5, #9
 800266c:	197b      	adds	r3, r7, r5
 800266e:	1c0a      	adds	r2, r1, #0
 8002670:	701a      	strb	r2, [r3, #0]
  OutBuffer[0] = (SX1280_RADIO_READ_REGISTER);
 8002672:	4b1c      	ldr	r3, [pc, #112]	; (80026e4 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 8002674:	2219      	movs	r2, #25
 8002676:	701a      	strb	r2, [r3, #0]
  OutBuffer[1] = ((address & 0xFF00) >> 8);
 8002678:	193b      	adds	r3, r7, r4
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	0a1b      	lsrs	r3, r3, #8
 800267e:	b29b      	uxth	r3, r3
 8002680:	b2da      	uxtb	r2, r3
 8002682:	4b18      	ldr	r3, [pc, #96]	; (80026e4 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 8002684:	705a      	strb	r2, [r3, #1]
  OutBuffer[2] = (address & 0x00FF);
 8002686:	193b      	adds	r3, r7, r4
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	b2da      	uxtb	r2, r3
 800268c:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 800268e:	709a      	strb	r2, [r3, #2]
  OutBuffer[3] = 0x00;
 8002690:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 8002692:	2200      	movs	r2, #0
 8002694:	70da      	strb	r2, [r3, #3]

  WaitOnBusy();
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	0018      	movs	r0, r3
 800269a:	f000 f8e7 	bl	800286c <_ZN9SX1280Hal10WaitOnBusyEv>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800269e:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x94>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	2101      	movs	r1, #1
 80026a4:	0018      	movs	r0, r3
 80026a6:	f004 f838 	bl	800671a <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer, size + 4, 5);
 80026aa:	197b      	adds	r3, r7, r5
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	3304      	adds	r3, #4
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	4a0b      	ldr	r2, [pc, #44]	; (80026e4 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 80026b6:	490b      	ldr	r1, [pc, #44]	; (80026e4 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 80026b8:	480c      	ldr	r0, [pc, #48]	; (80026ec <_ZN9SX1280Hal12ReadRegisterEtPhh+0x98>)
 80026ba:	2405      	movs	r4, #5
 80026bc:	9400      	str	r4, [sp, #0]
 80026be:	f005 f977 	bl	80079b0 <HAL_SPI_TransmitReceive>
  memcpy(buffer, OutBuffer + 4, size);
 80026c2:	490b      	ldr	r1, [pc, #44]	; (80026f0 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x9c>)
 80026c4:	197b      	adds	r3, r7, r5
 80026c6:	781a      	ldrb	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	0018      	movs	r0, r3
 80026cc:	f008 fb24 	bl	800ad18 <memcpy>

  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x94>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	2101      	movs	r1, #1
 80026d6:	0018      	movs	r0, r3
 80026d8:	f004 f81f 	bl	800671a <HAL_GPIO_WritePin>
}
 80026dc:	46c0      	nop			; (mov r8, r8)
 80026de:	46bd      	mov	sp, r7
 80026e0:	b004      	add	sp, #16
 80026e2:	bdb0      	pop	{r4, r5, r7, pc}
 80026e4:	200000b8 	.word	0x200000b8
 80026e8:	50000400 	.word	0x50000400
 80026ec:	2000040c 	.word	0x2000040c
 80026f0:	200000bc 	.word	0x200000bc

080026f4 <_ZN9SX1280Hal12ReadRegisterEt>:

uint8_t SX1280Hal::ReadRegister(uint16_t address) {
 80026f4:	b590      	push	{r4, r7, lr}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	000a      	movs	r2, r1
 80026fe:	1cbb      	adds	r3, r7, #2
 8002700:	801a      	strh	r2, [r3, #0]
  uint8_t data;
  ReadRegister(address, &data, 1);
 8002702:	240f      	movs	r4, #15
 8002704:	193a      	adds	r2, r7, r4
 8002706:	1cbb      	adds	r3, r7, #2
 8002708:	8819      	ldrh	r1, [r3, #0]
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	2301      	movs	r3, #1
 800270e:	f7ff ffa1 	bl	8002654 <_ZN9SX1280Hal12ReadRegisterEtPhh>
  return data;
 8002712:	193b      	adds	r3, r7, r4
 8002714:	781b      	ldrb	r3, [r3, #0]
}
 8002716:	0018      	movs	r0, r3
 8002718:	46bd      	mov	sp, r7
 800271a:	b005      	add	sp, #20
 800271c:	bd90      	pop	{r4, r7, pc}
	...

08002720 <_ZN9SX1280Hal11WriteBufferEhPVhh>:

void SX1280Hal::WriteBuffer(uint8_t offset, volatile uint8_t *buffer,
                            uint8_t size) {
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b089      	sub	sp, #36	; 0x24
 8002724:	af02      	add	r7, sp, #8
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	0008      	movs	r0, r1
 800272a:	607a      	str	r2, [r7, #4]
 800272c:	0019      	movs	r1, r3
 800272e:	240b      	movs	r4, #11
 8002730:	193b      	adds	r3, r7, r4
 8002732:	1c02      	adds	r2, r0, #0
 8002734:	701a      	strb	r2, [r3, #0]
 8002736:	230a      	movs	r3, #10
 8002738:	18fb      	adds	r3, r7, r3
 800273a:	1c0a      	adds	r2, r1, #0
 800273c:	701a      	strb	r2, [r3, #0]
  OutBuffer[0] = SX1280_RADIO_WRITE_BUFFER;
 800273e:	4b1e      	ldr	r3, [pc, #120]	; (80027b8 <_ZN9SX1280Hal11WriteBufferEhPVhh+0x98>)
 8002740:	221a      	movs	r2, #26
 8002742:	701a      	strb	r2, [r3, #0]
  OutBuffer[1] = offset;
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <_ZN9SX1280Hal11WriteBufferEhPVhh+0x98>)
 8002746:	193a      	adds	r2, r7, r4
 8002748:	7812      	ldrb	r2, [r2, #0]
 800274a:	705a      	strb	r2, [r3, #1]

  for (int i = 0; i < size; i++) {
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	230a      	movs	r3, #10
 8002752:	18fb      	adds	r3, r7, r3
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	429a      	cmp	r2, r3
 800275a:	da0c      	bge.n	8002776 <_ZN9SX1280Hal11WriteBufferEhPVhh+0x56>
    OutBuffer[i + 2] = buffer[i];
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	18d2      	adds	r2, r2, r3
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	3302      	adds	r3, #2
 8002766:	7812      	ldrb	r2, [r2, #0]
 8002768:	b2d1      	uxtb	r1, r2
 800276a:	4a13      	ldr	r2, [pc, #76]	; (80027b8 <_ZN9SX1280Hal11WriteBufferEhPVhh+0x98>)
 800276c:	54d1      	strb	r1, [r2, r3]
  for (int i = 0; i < size; i++) {
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	3301      	adds	r3, #1
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	e7ec      	b.n	8002750 <_ZN9SX1280Hal11WriteBufferEhPVhh+0x30>
  }

  WaitOnBusy();
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	0018      	movs	r0, r3
 800277a:	f000 f877 	bl	800286c <_ZN9SX1280Hal10WaitOnBusyEv>

  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800277e:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <_ZN9SX1280Hal11WriteBufferEhPVhh+0x9c>)
 8002780:	2200      	movs	r2, #0
 8002782:	2101      	movs	r1, #1
 8002784:	0018      	movs	r0, r3
 8002786:	f003 ffc8 	bl	800671a <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer, size + 2, 5);
 800278a:	230a      	movs	r3, #10
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	b29b      	uxth	r3, r3
 8002792:	3302      	adds	r3, #2
 8002794:	b29b      	uxth	r3, r3
 8002796:	4a08      	ldr	r2, [pc, #32]	; (80027b8 <_ZN9SX1280Hal11WriteBufferEhPVhh+0x98>)
 8002798:	4907      	ldr	r1, [pc, #28]	; (80027b8 <_ZN9SX1280Hal11WriteBufferEhPVhh+0x98>)
 800279a:	4809      	ldr	r0, [pc, #36]	; (80027c0 <_ZN9SX1280Hal11WriteBufferEhPVhh+0xa0>)
 800279c:	2405      	movs	r4, #5
 800279e:	9400      	str	r4, [sp, #0]
 80027a0:	f005 f906 	bl	80079b0 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80027a4:	4b05      	ldr	r3, [pc, #20]	; (80027bc <_ZN9SX1280Hal11WriteBufferEhPVhh+0x9c>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	2101      	movs	r1, #1
 80027aa:	0018      	movs	r0, r3
 80027ac:	f003 ffb5 	bl	800671a <HAL_GPIO_WritePin>
}
 80027b0:	46c0      	nop			; (mov r8, r8)
 80027b2:	46bd      	mov	sp, r7
 80027b4:	b007      	add	sp, #28
 80027b6:	bd90      	pop	{r4, r7, pc}
 80027b8:	200000b8 	.word	0x200000b8
 80027bc:	50000400 	.word	0x50000400
 80027c0:	2000040c 	.word	0x2000040c

080027c4 <_ZN9SX1280Hal10ReadBufferEhPVhh>:

void SX1280Hal::ReadBuffer(uint8_t offset, volatile uint8_t *buffer,
                           uint8_t size) {
 80027c4:	b5b0      	push	{r4, r5, r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	0008      	movs	r0, r1
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	0019      	movs	r1, r3
 80027d2:	240b      	movs	r4, #11
 80027d4:	193b      	adds	r3, r7, r4
 80027d6:	1c02      	adds	r2, r0, #0
 80027d8:	701a      	strb	r2, [r3, #0]
 80027da:	250a      	movs	r5, #10
 80027dc:	197b      	adds	r3, r7, r5
 80027de:	1c0a      	adds	r2, r1, #0
 80027e0:	701a      	strb	r2, [r3, #0]
  OutBuffer[0] = SX1280_RADIO_READ_BUFFER;
 80027e2:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 80027e4:	221b      	movs	r2, #27
 80027e6:	701a      	strb	r2, [r3, #0]
  OutBuffer[1] = offset;
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 80027ea:	193a      	adds	r2, r7, r4
 80027ec:	7812      	ldrb	r2, [r2, #0]
 80027ee:	705a      	strb	r2, [r3, #1]
  OutBuffer[2] = 0x00;
 80027f0:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	709a      	strb	r2, [r3, #2]

  WaitOnBusy();
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	0018      	movs	r0, r3
 80027fa:	f000 f837 	bl	800286c <_ZN9SX1280Hal10WaitOnBusyEv>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80027fe:	4b19      	ldr	r3, [pc, #100]	; (8002864 <_ZN9SX1280Hal10ReadBufferEhPVhh+0xa0>)
 8002800:	2200      	movs	r2, #0
 8002802:	2101      	movs	r1, #1
 8002804:	0018      	movs	r0, r3
 8002806:	f003 ff88 	bl	800671a <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer, size + 3, 5);
 800280a:	197b      	adds	r3, r7, r5
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	b29b      	uxth	r3, r3
 8002810:	3303      	adds	r3, #3
 8002812:	b29b      	uxth	r3, r3
 8002814:	4a12      	ldr	r2, [pc, #72]	; (8002860 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 8002816:	4912      	ldr	r1, [pc, #72]	; (8002860 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 8002818:	4813      	ldr	r0, [pc, #76]	; (8002868 <_ZN9SX1280Hal10ReadBufferEhPVhh+0xa4>)
 800281a:	2405      	movs	r4, #5
 800281c:	9400      	str	r4, [sp, #0]
 800281e:	f005 f8c7 	bl	80079b0 <HAL_SPI_TransmitReceive>

  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002822:	4b10      	ldr	r3, [pc, #64]	; (8002864 <_ZN9SX1280Hal10ReadBufferEhPVhh+0xa0>)
 8002824:	2201      	movs	r2, #1
 8002826:	2101      	movs	r1, #1
 8002828:	0018      	movs	r0, r3
 800282a:	f003 ff76 	bl	800671a <HAL_GPIO_WritePin>

  for (int i = 0; i < size; i++) {
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	230a      	movs	r3, #10
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	429a      	cmp	r2, r3
 800283c:	da0b      	bge.n	8002856 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x92>
    buffer[i] = OutBuffer[i + 3];
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	1cda      	adds	r2, r3, #3
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	18cb      	adds	r3, r1, r3
 8002848:	4905      	ldr	r1, [pc, #20]	; (8002860 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 800284a:	5c8a      	ldrb	r2, [r1, r2]
 800284c:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < size; i++) {
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	3301      	adds	r3, #1
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	e7ed      	b.n	8002832 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x6e>
  }
}
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	46bd      	mov	sp, r7
 800285a:	b006      	add	sp, #24
 800285c:	bdb0      	pop	{r4, r5, r7, pc}
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	200000b8 	.word	0x200000b8
 8002864:	50000400 	.word	0x50000400
 8002868:	2000040c 	.word	0x2000040c

0800286c <_ZN9SX1280Hal10WaitOnBusyEv>:

bool SX1280Hal::WaitOnBusy() {
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t startTime = HAL_GetTick();
 8002874:	f002 ff44 	bl	8005700 <HAL_GetTick>
 8002878:	0003      	movs	r3, r0
 800287a:	60fb      	str	r3, [r7, #12]

  while (HAL_GPIO_ReadPin(BUSY_GPIO_Port,
 800287c:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <_ZN9SX1280Hal10WaitOnBusyEv+0x50>)
 800287e:	2102      	movs	r1, #2
 8002880:	0018      	movs	r0, r3
 8002882:	f003 ff2d 	bl	80066e0 <HAL_GPIO_ReadPin>
 8002886:	0003      	movs	r3, r0
                          BUSY_Pin)) // wait until not busy or until timeout
 8002888:	1e5a      	subs	r2, r3, #1
 800288a:	4193      	sbcs	r3, r2
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00f      	beq.n	80028b2 <_ZN9SX1280Hal10WaitOnBusyEv+0x46>
  {
    if ((HAL_GetTick() - startTime) >= 2) // 2ms timeout
 8002892:	f002 ff35 	bl	8005700 <HAL_GetTick>
 8002896:	0002      	movs	r2, r0
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2201      	movs	r2, #1
 800289e:	429a      	cmp	r2, r3
 80028a0:	419b      	sbcs	r3, r3
 80028a2:	425b      	negs	r3, r3
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <_ZN9SX1280Hal10WaitOnBusyEv+0x42>
    {
      return false;
 80028aa:	2300      	movs	r3, #0
 80028ac:	e002      	b.n	80028b4 <_ZN9SX1280Hal10WaitOnBusyEv+0x48>
    } else {
      asm("NOP");
 80028ae:	46c0      	nop			; (mov r8, r8)
  while (HAL_GPIO_ReadPin(BUSY_GPIO_Port,
 80028b0:	e7e4      	b.n	800287c <_ZN9SX1280Hal10WaitOnBusyEv+0x10>
    }
  }
  return true;
 80028b2:	2301      	movs	r3, #1
}
 80028b4:	0018      	movs	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b004      	add	sp, #16
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	50000400 	.word	0x50000400

080028c0 <_ZN9SX1280Hal8TXenableEv>:

void SX1280Hal::TXenable() {
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  // Enable Front End
  HAL_GPIO_WritePin(FE_EN_GPIO_Port, FE_EN_Pin, GPIO_PIN_SET);
 80028c8:	2380      	movs	r3, #128	; 0x80
 80028ca:	0059      	lsls	r1, r3, #1
 80028cc:	23a0      	movs	r3, #160	; 0xa0
 80028ce:	05db      	lsls	r3, r3, #23
 80028d0:	2201      	movs	r2, #1
 80028d2:	0018      	movs	r0, r3
 80028d4:	f003 ff21 	bl	800671a <HAL_GPIO_WritePin>

  // Enable TX
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_SET);
 80028d8:	4b08      	ldr	r3, [pc, #32]	; (80028fc <_ZN9SX1280Hal8TXenableEv+0x3c>)
 80028da:	2201      	movs	r2, #1
 80028dc:	2140      	movs	r1, #64	; 0x40
 80028de:	0018      	movs	r0, r3
 80028e0:	f003 ff1b 	bl	800671a <HAL_GPIO_WritePin>

  // Disable RX
  HAL_GPIO_WritePin(RX_EN_GPIO_Port, RX_EN_Pin, GPIO_PIN_RESET);
 80028e4:	2380      	movs	r3, #128	; 0x80
 80028e6:	0119      	lsls	r1, r3, #4
 80028e8:	23a0      	movs	r3, #160	; 0xa0
 80028ea:	05db      	lsls	r3, r3, #23
 80028ec:	2200      	movs	r2, #0
 80028ee:	0018      	movs	r0, r3
 80028f0:	f003 ff13 	bl	800671a <HAL_GPIO_WritePin>
}
 80028f4:	46c0      	nop			; (mov r8, r8)
 80028f6:	46bd      	mov	sp, r7
 80028f8:	b002      	add	sp, #8
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	50000800 	.word	0x50000800

08002900 <_ZN9SX1280Hal8RXenableEv>:

void SX1280Hal::RXenable() {
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  // Enable Front End
  HAL_GPIO_WritePin(FE_EN_GPIO_Port, FE_EN_Pin, GPIO_PIN_SET);
 8002908:	2380      	movs	r3, #128	; 0x80
 800290a:	0059      	lsls	r1, r3, #1
 800290c:	23a0      	movs	r3, #160	; 0xa0
 800290e:	05db      	lsls	r3, r3, #23
 8002910:	2201      	movs	r2, #1
 8002912:	0018      	movs	r0, r3
 8002914:	f003 ff01 	bl	800671a <HAL_GPIO_WritePin>

  // Disable TX
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 8002918:	4b08      	ldr	r3, [pc, #32]	; (800293c <_ZN9SX1280Hal8RXenableEv+0x3c>)
 800291a:	2200      	movs	r2, #0
 800291c:	2140      	movs	r1, #64	; 0x40
 800291e:	0018      	movs	r0, r3
 8002920:	f003 fefb 	bl	800671a <HAL_GPIO_WritePin>

  // Enable RX
  HAL_GPIO_WritePin(RX_EN_GPIO_Port, RX_EN_Pin, GPIO_PIN_SET);
 8002924:	2380      	movs	r3, #128	; 0x80
 8002926:	0119      	lsls	r1, r3, #4
 8002928:	23a0      	movs	r3, #160	; 0xa0
 800292a:	05db      	lsls	r3, r3, #23
 800292c:	2201      	movs	r2, #1
 800292e:	0018      	movs	r0, r3
 8002930:	f003 fef3 	bl	800671a <HAL_GPIO_WritePin>
}
 8002934:	46c0      	nop			; (mov r8, r8)
 8002936:	46bd      	mov	sp, r7
 8002938:	b002      	add	sp, #8
 800293a:	bd80      	pop	{r7, pc}
 800293c:	50000800 	.word	0x50000800

08002940 <_ZN9SX1280Hal11TXRXdisableEv>:

void SX1280Hal::TXRXdisable() {
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  // Disable Front End
  HAL_GPIO_WritePin(FE_EN_GPIO_Port, FE_EN_Pin, GPIO_PIN_RESET);
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	0059      	lsls	r1, r3, #1
 800294c:	23a0      	movs	r3, #160	; 0xa0
 800294e:	05db      	lsls	r3, r3, #23
 8002950:	2200      	movs	r2, #0
 8002952:	0018      	movs	r0, r3
 8002954:	f003 fee1 	bl	800671a <HAL_GPIO_WritePin>

  // Disable TX
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 8002958:	4b08      	ldr	r3, [pc, #32]	; (800297c <_ZN9SX1280Hal11TXRXdisableEv+0x3c>)
 800295a:	2200      	movs	r2, #0
 800295c:	2140      	movs	r1, #64	; 0x40
 800295e:	0018      	movs	r0, r3
 8002960:	f003 fedb 	bl	800671a <HAL_GPIO_WritePin>

  // Disable RX
  HAL_GPIO_WritePin(RX_EN_GPIO_Port, RX_EN_Pin, GPIO_PIN_RESET);
 8002964:	2380      	movs	r3, #128	; 0x80
 8002966:	0119      	lsls	r1, r3, #4
 8002968:	23a0      	movs	r3, #160	; 0xa0
 800296a:	05db      	lsls	r3, r3, #23
 800296c:	2200      	movs	r2, #0
 800296e:	0018      	movs	r0, r3
 8002970:	f003 fed3 	bl	800671a <HAL_GPIO_WritePin>
}
 8002974:	46c0      	nop			; (mov r8, r8)
 8002976:	46bd      	mov	sp, r7
 8002978:	b002      	add	sp, #8
 800297a:	bd80      	pop	{r7, pc}
 800297c:	50000800 	.word	0x50000800

08002980 <HAL_GPIO_EXTI_Rising_Callback>:

// EXTI External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	0002      	movs	r2, r0
 8002988:	1dbb      	adds	r3, r7, #6
 800298a:	801a      	strh	r2, [r3, #0]
  if (GPIO_Pin == DIO1_Pin) //
 800298c:	1dbb      	adds	r3, r7, #6
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	2b20      	cmp	r3, #32
 8002992:	d101      	bne.n	8002998 <HAL_GPIO_EXTI_Rising_Callback+0x18>
  {
    SX1280Driver::IsrCallback();
 8002994:	f7ff fc94 	bl	80022c0 <_ZN12SX1280Driver11IsrCallbackEv>
    // if (SX1280Hal::RadioIsrCallback) SX1280Hal::RadioIsrCallback();
  }
}
 8002998:	46c0      	nop			; (mov r8, r8)
 800299a:	46bd      	mov	sp, r7
 800299c:	b002      	add	sp, #8
 800299e:	bd80      	pop	{r7, pc}

080029a0 <_ZN6Parser5resetEv>:
public:
  void process(uint8_t ch);

  void parse();

  void reset() {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  	dataIndex = 0;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	615a      	str	r2, [r3, #20]
      opCodeIndex = -1;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	4252      	negs	r2, r2
 80029b4:	619a      	str	r2, [r3, #24]
      state = STATE_OP;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	771a      	strb	r2, [r3, #28]
    }
 80029bc:	46c0      	nop			; (mov r8, r8)
 80029be:	46bd      	mov	sp, r7
 80029c0:	b002      	add	sp, #8
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <_ZN6Parser5parseEv>:

#include "Parser.h"
#include "common.h"
#include "FHSS/crc.h"

void Parser::parse() {
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]

  cmd_table[opCodeIndex].cmd(&buffer[2], dataIndex);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	3304      	adds	r3, #4
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	18d3      	adds	r3, r2, r3
 80029d8:	3304      	adds	r3, #4
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	1c98      	adds	r0, r3, #2
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	0019      	movs	r1, r3
 80029e6:	4790      	blx	r2

  /* Reset the parser buffer */
  reset();
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	0018      	movs	r0, r3
 80029ec:	f7ff ffd8 	bl	80029a0 <_ZN6Parser5resetEv>
}
 80029f0:	46c0      	nop			; (mov r8, r8)
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b002      	add	sp, #8
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <_ZN6Parser14getOpCodeIndexEh>:

int32_t Parser::getOpCodeIndex(uint8_t opCode) {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	000a      	movs	r2, r1
 8002a02:	1cfb      	adds	r3, r7, #3
 8002a04:	701a      	strb	r2, [r3, #0]
  for (int32_t i = 0; i < CMD_NUMBER; i++) {
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2b0d      	cmp	r3, #13
 8002a0e:	dc0e      	bgt.n	8002a2e <_ZN6Parser14getOpCodeIndexEh+0x36>
    if (opCode == cmd_table[i].identifier)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	3204      	adds	r2, #4
 8002a16:	00d2      	lsls	r2, r2, #3
 8002a18:	5cd3      	ldrb	r3, [r2, r3]
 8002a1a:	1cfa      	adds	r2, r7, #3
 8002a1c:	7812      	ldrb	r2, [r2, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d101      	bne.n	8002a26 <_ZN6Parser14getOpCodeIndexEh+0x2e>
      return i;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	e005      	b.n	8002a32 <_ZN6Parser14getOpCodeIndexEh+0x3a>
  for (int32_t i = 0; i < CMD_NUMBER; i++) {
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	e7ed      	b.n	8002a0a <_ZN6Parser14getOpCodeIndexEh+0x12>
  }
  return -1;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	425b      	negs	r3, r3
}
 8002a32:	0018      	movs	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	b004      	add	sp, #16
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <_ZN6Parser7processEh>:

void Parser::process(uint8_t ch) {
 8002a3a:	b5b0      	push	{r4, r5, r7, lr}
 8002a3c:	b084      	sub	sp, #16
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	000a      	movs	r2, r1
 8002a44:	1cfb      	adds	r3, r7, #3
 8002a46:	701a      	strb	r2, [r3, #0]
  switch(state){
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	7f1b      	ldrb	r3, [r3, #28]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d051      	beq.n	8002af4 <_ZN6Parser7processEh+0xba>
 8002a50:	dd00      	ble.n	8002a54 <_ZN6Parser7processEh+0x1a>
 8002a52:	e06b      	b.n	8002b2c <_ZN6Parser7processEh+0xf2>
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d02f      	beq.n	8002ab8 <_ZN6Parser7processEh+0x7e>
 8002a58:	dc68      	bgt.n	8002b2c <_ZN6Parser7processEh+0xf2>
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <_ZN6Parser7processEh+0x2a>
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d016      	beq.n	8002a90 <_ZN6Parser7processEh+0x56>
			reset();
		}
  	  }
    break;
  default:
	break;
 8002a62:	e063      	b.n	8002b2c <_ZN6Parser7processEh+0xf2>
	  opCodeIndex = getOpCodeIndex(ch);
 8002a64:	1cfb      	adds	r3, r7, #3
 8002a66:	781a      	ldrb	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	0011      	movs	r1, r2
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f7ff ffc3 	bl	80029f8 <_ZN6Parser14getOpCodeIndexEh>
 8002a72:	0002      	movs	r2, r0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	619a      	str	r2, [r3, #24]
	  if(opCodeIndex >= 0){
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	db57      	blt.n	8002b30 <_ZN6Parser7processEh+0xf6>
		  buffer[INDEX_OP] = ch;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	1cfa      	adds	r2, r7, #3
 8002a84:	7812      	ldrb	r2, [r2, #0]
 8002a86:	701a      	strb	r2, [r3, #0]
		  state = STATE_LEN;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	771a      	strb	r2, [r3, #28]
	break;
 8002a8e:	e04f      	b.n	8002b30 <_ZN6Parser7processEh+0xf6>
	  if (ch <= 16){
 8002a90:	1cfb      	adds	r3, r7, #3
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b10      	cmp	r3, #16
 8002a96:	d84d      	bhi.n	8002b34 <_ZN6Parser7processEh+0xfa>
		  buffer[INDEX_LEN] = ch;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	1cfa      	adds	r2, r7, #3
 8002a9c:	7812      	ldrb	r2, [r2, #0]
 8002a9e:	705a      	strb	r2, [r3, #1]
		  if(ch > 0){
 8002aa0:	1cfb      	adds	r3, r7, #3
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <_ZN6Parser7processEh+0x76>
			  state = STATE_DATA;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	771a      	strb	r2, [r3, #28]
    break;
 8002aae:	e041      	b.n	8002b34 <_ZN6Parser7processEh+0xfa>
			  state = STATE_CRC;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	771a      	strb	r2, [r3, #28]
    break;
 8002ab6:	e03d      	b.n	8002b34 <_ZN6Parser7processEh+0xfa>
	  if((buffer[INDEX_LEN] - dataIndex) > 0){
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	785b      	ldrb	r3, [r3, #1]
 8002abc:	001a      	movs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d00b      	beq.n	8002ade <_ZN6Parser7processEh+0xa4>
		  buffer[dataIndex + 2] = ch;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	3302      	adds	r3, #2
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	1cf9      	adds	r1, r7, #3
 8002ad0:	7809      	ldrb	r1, [r1, #0]
 8002ad2:	54d1      	strb	r1, [r2, r3]
		  dataIndex++;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	615a      	str	r2, [r3, #20]
	  if((buffer[INDEX_LEN] - dataIndex) == 0){
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	785b      	ldrb	r3, [r3, #1]
 8002ae2:	001a      	movs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d125      	bne.n	8002b38 <_ZN6Parser7processEh+0xfe>
		  state = STATE_CRC;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2203      	movs	r2, #3
 8002af0:	771a      	strb	r2, [r3, #28]
    break;
 8002af2:	e021      	b.n	8002b38 <_ZN6Parser7processEh+0xfe>
	  uint8_t crc = crc8(buffer, dataIndex + 2);
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	3302      	adds	r3, #2
 8002afc:	250f      	movs	r5, #15
 8002afe:	197c      	adds	r4, r7, r5
 8002b00:	0019      	movs	r1, r3
 8002b02:	0010      	movs	r0, r2
 8002b04:	f7fe fe2a 	bl	800175c <_Z4crc8PKhj>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	7023      	strb	r3, [r4, #0]
	  if(crc == ch) {
 8002b0c:	197a      	adds	r2, r7, r5
 8002b0e:	1cfb      	adds	r3, r7, #3
 8002b10:	7812      	ldrb	r2, [r2, #0]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d104      	bne.n	8002b22 <_ZN6Parser7processEh+0xe8>
			parse();
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f7ff ff52 	bl	80029c4 <_ZN6Parser5parseEv>
    break;
 8002b20:	e00b      	b.n	8002b3a <_ZN6Parser7processEh+0x100>
			reset();
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	0018      	movs	r0, r3
 8002b26:	f7ff ff3b 	bl	80029a0 <_ZN6Parser5resetEv>
    break;
 8002b2a:	e006      	b.n	8002b3a <_ZN6Parser7processEh+0x100>
	break;
 8002b2c:	46c0      	nop			; (mov r8, r8)
 8002b2e:	e004      	b.n	8002b3a <_ZN6Parser7processEh+0x100>
	break;
 8002b30:	46c0      	nop			; (mov r8, r8)
 8002b32:	e002      	b.n	8002b3a <_ZN6Parser7processEh+0x100>
    break;
 8002b34:	46c0      	nop			; (mov r8, r8)
 8002b36:	e000      	b.n	8002b3a <_ZN6Parser7processEh+0x100>
    break;
 8002b38:	46c0      	nop			; (mov r8, r8)
  }
}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b004      	add	sp, #16
 8002b40:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002b44 <_ZN6Parser12cmdDirectionEPhm>:

void Parser::cmdDirection(uint8_t *args, uint32_t length) {
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  if (length != 1)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d10f      	bne.n	8002b74 <_ZN6Parser12cmdDirectionEPhm+0x30>
    return;

  if (args[0] == TX || args[0] == RX) {
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <_ZN6Parser12cmdDirectionEPhm+0x20>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d108      	bne.n	8002b76 <_ZN6Parser12cmdDirectionEPhm+0x32>
    Link.setDirection((transmission_direction_e)args[0]);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	781a      	ldrb	r2, [r3, #0]
 8002b68:	4b04      	ldr	r3, [pc, #16]	; (8002b7c <_ZN6Parser12cmdDirectionEPhm+0x38>)
 8002b6a:	0011      	movs	r1, r2
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f001 f8a8 	bl	8003cc2 <_ZN12Transmission12setDirectionE24transmission_direction_e>
 8002b72:	e000      	b.n	8002b76 <_ZN6Parser12cmdDirectionEPhm+0x32>
    return;
 8002b74:	46c0      	nop			; (mov r8, r8)
  }
}
 8002b76:	46bd      	mov	sp, r7
 8002b78:	b002      	add	sp, #8
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	20000100 	.word	0x20000100

08002b80 <_ZN6Parser9cmdPAGainEPhm>:

void Parser::cmdPAGain(uint8_t *args, uint32_t length) {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  if (length != 1)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d10c      	bne.n	8002baa <_ZN6Parser9cmdPAGainEPhm+0x2a>
    return;

  if (args[0] < 50) {
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b31      	cmp	r3, #49	; 0x31
 8002b96:	d809      	bhi.n	8002bac <_ZN6Parser9cmdPAGainEPhm+0x2c>
    Link.setPAGain(args[0]);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	b25a      	sxtb	r2, r3
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <_ZN6Parser9cmdPAGainEPhm+0x34>)
 8002ba0:	0011      	movs	r1, r2
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f001 f8bd 	bl	8003d22 <_ZN12Transmission9setPAGainEa>
 8002ba8:	e000      	b.n	8002bac <_ZN6Parser9cmdPAGainEPhm+0x2c>
    return;
 8002baa:	46c0      	nop			; (mov r8, r8)
  }
}
 8002bac:	46bd      	mov	sp, r7
 8002bae:	b002      	add	sp, #8
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	20000100 	.word	0x20000100

08002bb8 <_ZN6Parser13cmdPowerLevelEPhm>:

void Parser::cmdPowerLevel(uint8_t *args, uint32_t length) {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  if (length != 1)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d108      	bne.n	8002bda <_ZN6Parser13cmdPowerLevelEPhm+0x22>
    return;

  Link.setPowerLevel(args[0]);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	b25a      	sxtb	r2, r3
 8002bce:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <_ZN6Parser13cmdPowerLevelEPhm+0x2c>)
 8002bd0:	0011      	movs	r1, r2
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f001 f8c9 	bl	8003d6a <_ZN12Transmission13setPowerLevelEa>
 8002bd8:	e000      	b.n	8002bdc <_ZN6Parser13cmdPowerLevelEPhm+0x24>
    return;
 8002bda:	46c0      	nop			; (mov r8, r8)
}
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	b002      	add	sp, #8
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	20000100 	.word	0x20000100

08002be8 <_ZN6Parser7cmdModeEPhm>:

void Parser::cmdMode(uint8_t *args, uint32_t length) {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  if (length != 1)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d107      	bne.n	8002c08 <_ZN6Parser7cmdModeEPhm+0x20>
    return;

  Link.setMode((transmission_mode_e)args[0]);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	781a      	ldrb	r2, [r3, #0]
 8002bfc:	4b04      	ldr	r3, [pc, #16]	; (8002c10 <_ZN6Parser7cmdModeEPhm+0x28>)
 8002bfe:	0011      	movs	r1, r2
 8002c00:	0018      	movs	r0, r3
 8002c02:	f001 f87e 	bl	8003d02 <_ZN12Transmission7setModeE19transmission_mode_e>
 8002c06:	e000      	b.n	8002c0a <_ZN6Parser7cmdModeEPhm+0x22>
    return;
 8002c08:	46c0      	nop			; (mov r8, r8)
}
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b002      	add	sp, #8
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20000100 	.word	0x20000100

08002c14 <_ZN6Parser12cmdModeIndexEPhm>:

void Parser::cmdModeIndex(uint8_t *args, uint32_t length) {
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  // UNUSED
}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	46bd      	mov	sp, r7
 8002c22:	b002      	add	sp, #8
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <_ZN6Parser13cmdLinkPhraseEPhm>:

void Parser::cmdLinkPhrase(uint8_t *args, uint32_t length) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  if (length != 8)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d10a      	bne.n	8002c4e <_ZN6Parser13cmdLinkPhraseEPhm+0x26>
    return;

  if (args[0] != 0) {
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d007      	beq.n	8002c50 <_ZN6Parser13cmdLinkPhraseEPhm+0x28>
    Link.setLinkPhrase(args, length);
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4b04      	ldr	r3, [pc, #16]	; (8002c58 <_ZN6Parser13cmdLinkPhraseEPhm+0x30>)
 8002c46:	0018      	movs	r0, r3
 8002c48:	f001 f81a 	bl	8003c80 <_ZN12Transmission13setLinkPhraseEPKhm>
 8002c4c:	e000      	b.n	8002c50 <_ZN6Parser13cmdLinkPhraseEPhm+0x28>
    return;
 8002c4e:	46c0      	nop			; (mov r8, r8)
  }
}
 8002c50:	46bd      	mov	sp, r7
 8002c52:	b002      	add	sp, #8
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	20000100 	.word	0x20000100

08002c5c <_ZN6Parser9cmdEnableEPhm>:

void Parser::cmdEnable(uint8_t *args, uint32_t length) {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  if (length != 0)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d104      	bne.n	8002c76 <_ZN6Parser9cmdEnableEPhm+0x1a>
    return;
  Link.enableTransmission();
 8002c6c:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <_ZN6Parser9cmdEnableEPhm+0x24>)
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f001 f8d6 	bl	8003e20 <_ZN12Transmission18enableTransmissionEv>
 8002c74:	e000      	b.n	8002c78 <_ZN6Parser9cmdEnableEPhm+0x1c>
    return;
 8002c76:	46c0      	nop			; (mov r8, r8)
}
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	b002      	add	sp, #8
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	20000100 	.word	0x20000100

08002c84 <_ZN6Parser10cmdDisableEPhm>:

void Parser::cmdDisable(uint8_t *args, uint32_t length) {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  if (length != 0)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d104      	bne.n	8002c9e <_ZN6Parser10cmdDisableEPhm+0x1a>
    return;
  Link.disableTransmission();
 8002c94:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <_ZN6Parser10cmdDisableEPhm+0x24>)
 8002c96:	0018      	movs	r0, r3
 8002c98:	f001 f992 	bl	8003fc0 <_ZN12Transmission19disableTransmissionEv>
 8002c9c:	e000      	b.n	8002ca0 <_ZN6Parser10cmdDisableEPhm+0x1c>
    return;
 8002c9e:	46c0      	nop			; (mov r8, r8)
}
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	b002      	add	sp, #8
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	20000100 	.word	0x20000100

08002cac <_ZN6Parser5cmdTXEPhm>:

void Parser::cmdTX(uint8_t *args, uint32_t length) {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  Link.writeBytes(args, length);
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <_ZN6Parser5cmdTXEPhm+0x20>)
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f001 f864 	bl	8003d8a <_ZN12Transmission10writeBytesEPKhm>
}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	b002      	add	sp, #8
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	20000100 	.word	0x20000100

08002cd0 <_ZN6Parser5cmdRXEPhm>:

void Parser::cmdRX(uint8_t *args, uint32_t length) {
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  // UNUSED
}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	b002      	add	sp, #8
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <_ZN6Parser7cmdInfoEPhm>:

void Parser::cmdInfo(uint8_t *args, uint32_t length) {
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	6039      	str	r1, [r7, #0]
  // UNUSED
}
 8002cec:	46c0      	nop			; (mov r8, r8)
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b002      	add	sp, #8
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <_ZN6Parser10cmdGNSSLocEPhm>:

void Parser::cmdGNSSLoc(uint8_t *args, uint32_t length) {
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  // UNUSED
}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	46bd      	mov	sp, r7
 8002d02:	b002      	add	sp, #8
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <_ZN6Parser11cmdGNSSTimeEPhm>:

void Parser::cmdGNSSTime(uint8_t *args, uint32_t length) {
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
 8002d0e:	6039      	str	r1, [r7, #0]
  // UNUSED
}
 8002d10:	46c0      	nop			; (mov r8, r8)
 8002d12:	46bd      	mov	sp, r7
 8002d14:	b002      	add	sp, #8
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <_ZN6Parser11cmdGNSSInfoEPhm>:

void Parser::cmdGNSSInfo(uint8_t *args, uint32_t length) {
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  // UNUSED
}
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b002      	add	sp, #8
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <_Z12start_serialv>:
extern TinyGPSPlus gps;

static uint8_t c2;
extern uint32_t lr2;

void start_serial() {
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  lr2 = HAL_GetTick();
 8002d30:	f002 fce6 	bl	8005700 <HAL_GetTick>
 8002d34:	0002      	movs	r2, r0
 8002d36:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <_Z12start_serialv+0x20>)
 8002d38:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&c2, 1);
 8002d3a:	4905      	ldr	r1, [pc, #20]	; (8002d50 <_Z12start_serialv+0x24>)
 8002d3c:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <_Z12start_serialv+0x28>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	0018      	movs	r0, r3
 8002d42:	f006 f83d 	bl	8008dc0 <HAL_UART_Receive_IT>
}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	2000066c 	.word	0x2000066c
 8002d50:	200000f8 	.word	0x200000f8
 8002d54:	2000054c 	.word	0x2000054c

08002d58 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  if (huart == &huart1) {
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	4b17      	ldr	r3, [pc, #92]	; (8002dc0 <HAL_UART_RxCpltCallback+0x68>)
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d111      	bne.n	8002d8c <HAL_UART_RxCpltCallback+0x34>
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&c1, 1);
 8002d68:	4916      	ldr	r1, [pc, #88]	; (8002dc4 <HAL_UART_RxCpltCallback+0x6c>)
 8002d6a:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <HAL_UART_RxCpltCallback+0x68>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f006 f826 	bl	8008dc0 <HAL_UART_Receive_IT>
    lr1 = HAL_GetTick();
 8002d74:	f002 fcc4 	bl	8005700 <HAL_GetTick>
 8002d78:	0002      	movs	r2, r0
 8002d7a:	4b13      	ldr	r3, [pc, #76]	; (8002dc8 <HAL_UART_RxCpltCallback+0x70>)
 8002d7c:	601a      	str	r2, [r3, #0]
    Uart1Buffer.push(c1);
 8002d7e:	4911      	ldr	r1, [pc, #68]	; (8002dc4 <HAL_UART_RxCpltCallback+0x6c>)
 8002d80:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <HAL_UART_RxCpltCallback+0x74>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	0018      	movs	r0, r3
 8002d86:	f000 f82b 	bl	8002de0 <_ZN10RingBufferIhLj128EE4pushERKhb>
  } else if (huart == &huart2) {
    HAL_UART_Receive_IT(&huart2, (uint8_t *)&c2, 1);
    lr2 = HAL_GetTick();
    Uart2Buffer.push(c2);
  }
}
 8002d8a:	e014      	b.n	8002db6 <HAL_UART_RxCpltCallback+0x5e>
  } else if (huart == &huart2) {
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <HAL_UART_RxCpltCallback+0x78>)
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d110      	bne.n	8002db6 <HAL_UART_RxCpltCallback+0x5e>
    HAL_UART_Receive_IT(&huart2, (uint8_t *)&c2, 1);
 8002d94:	490f      	ldr	r1, [pc, #60]	; (8002dd4 <HAL_UART_RxCpltCallback+0x7c>)
 8002d96:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <HAL_UART_RxCpltCallback+0x78>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f006 f810 	bl	8008dc0 <HAL_UART_Receive_IT>
    lr2 = HAL_GetTick();
 8002da0:	f002 fcae 	bl	8005700 <HAL_GetTick>
 8002da4:	0002      	movs	r2, r0
 8002da6:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <HAL_UART_RxCpltCallback+0x80>)
 8002da8:	601a      	str	r2, [r3, #0]
    Uart2Buffer.push(c2);
 8002daa:	490a      	ldr	r1, [pc, #40]	; (8002dd4 <HAL_UART_RxCpltCallback+0x7c>)
 8002dac:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <HAL_UART_RxCpltCallback+0x84>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	0018      	movs	r0, r3
 8002db2:	f000 f815 	bl	8002de0 <_ZN10RingBufferIhLj128EE4pushERKhb>
}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	46bd      	mov	sp, r7
 8002dba:	b002      	add	sp, #8
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	200004bc 	.word	0x200004bc
 8002dc4:	200002c8 	.word	0x200002c8
 8002dc8:	200002cc 	.word	0x200002cc
 8002dcc:	200001b8 	.word	0x200001b8
 8002dd0:	2000054c 	.word	0x2000054c
 8002dd4:	200000f8 	.word	0x200000f8
 8002dd8:	2000066c 	.word	0x2000066c
 8002ddc:	20000240 	.word	0x20000240

08002de0 <_ZN10RingBufferIhLj128EE4pushERKhb>:
   * the oldest element will either be overwritten (when overwrite is true) or
   * this add will have no effect (when overwrite is false).
   *
   * Return: true if there was room in the buffer to add this element
   */
  bool push(const Type &obj, bool overwrite = false) {
 8002de0:	b5b0      	push	{r4, r5, r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	1dfb      	adds	r3, r7, #7
 8002dec:	701a      	strb	r2, [r3, #0]
    bool full = false;
 8002dee:	2517      	movs	r5, #23
 8002df0:	197b      	adds	r3, r7, r5
 8002df2:	2200      	movs	r2, #0
 8002df4:	701a      	strb	r2, [r3, #0]

    {
      full = isFull();
 8002df6:	197c      	adds	r4, r7, r5
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f000 f837 	bl	8002e6e <_ZNK10RingBufferIhLj128EE6isFullEv>
 8002e00:	0003      	movs	r3, r0
 8002e02:	7023      	strb	r3, [r4, #0]
      if (!full || overwrite) {
 8002e04:	197b      	adds	r3, r7, r5
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	4053      	eors	r3, r2
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d103      	bne.n	8002e1a <_ZN10RingBufferIhLj128EE4pushERKhb+0x3a>
 8002e12:	1dfb      	adds	r3, r7, #7
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d01f      	beq.n	8002e5a <_ZN10RingBufferIhLj128EE4pushERKhb+0x7a>
        _buf[_head] = obj;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2280      	movs	r2, #128	; 0x80
 8002e1e:	589b      	ldr	r3, [r3, r2]
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	7811      	ldrb	r1, [r2, #0]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	54d1      	strb	r1, [r2, r3]
        _head = (_head + 1) % MaxElements;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2280      	movs	r2, #128	; 0x80
 8002e2c:	589b      	ldr	r3, [r3, r2]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	227f      	movs	r2, #127	; 0x7f
 8002e32:	401a      	ands	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2180      	movs	r1, #128	; 0x80
 8002e38:	505a      	str	r2, [r3, r1]
        _numElements = full ? _numElements : (_numElements + 1);
 8002e3a:	2317      	movs	r3, #23
 8002e3c:	18fb      	adds	r3, r7, r3
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <_ZN10RingBufferIhLj128EE4pushERKhb+0x6c>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2284      	movs	r2, #132	; 0x84
 8002e48:	589b      	ldr	r3, [r3, r2]
 8002e4a:	e003      	b.n	8002e54 <_ZN10RingBufferIhLj128EE4pushERKhb+0x74>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2284      	movs	r2, #132	; 0x84
 8002e50:	589b      	ldr	r3, [r3, r2]
 8002e52:	3301      	adds	r3, #1
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	2184      	movs	r1, #132	; 0x84
 8002e58:	5053      	str	r3, [r2, r1]
      }
    }

    return !full;
 8002e5a:	2317      	movs	r3, #23
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2201      	movs	r2, #1
 8002e62:	4053      	eors	r3, r2
 8002e64:	b2db      	uxtb	r3, r3
  }
 8002e66:	0018      	movs	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b006      	add	sp, #24
 8002e6c:	bdb0      	pop	{r4, r5, r7, pc}

08002e6e <_ZNK10RingBufferIhLj128EE6isFullEv>:
  }

  /**
   * Return: true if buffer is full
   */
  bool isFull() const {
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b084      	sub	sp, #16
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
    bool ret;

    { ret = _numElements >= MaxElements; }
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2284      	movs	r2, #132	; 0x84
 8002e7a:	589a      	ldr	r2, [r3, r2]
 8002e7c:	200f      	movs	r0, #15
 8002e7e:	183b      	adds	r3, r7, r0
 8002e80:	217f      	movs	r1, #127	; 0x7f
 8002e82:	4291      	cmp	r1, r2
 8002e84:	4192      	sbcs	r2, r2
 8002e86:	4252      	negs	r2, r2
 8002e88:	701a      	strb	r2, [r3, #0]

    return ret;
 8002e8a:	183b      	adds	r3, r7, r0
 8002e8c:	781b      	ldrb	r3, [r3, #0]
  }
 8002e8e:	0018      	movs	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b004      	add	sp, #16
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <_ZN10RawDegreesC1Ev>:
  uint16_t deg;
  uint32_t billionths;
  bool negative;

public:
  RawDegrees() : deg(0), billionths(0), negative(false) {}
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	801a      	strh	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	721a      	strb	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	b002      	add	sp, #8
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <_ZN15TinyGPSLocationC1Ev>:
    return rawLngData;
  }
  double lat();
  double lng();

  TinyGPSLocation() : valid(false), updated(false) {}
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	705a      	strb	r2, [r3, #1]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f7ff ffdf 	bl	8002e96 <_ZN10RawDegreesC1Ev>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3310      	adds	r3, #16
 8002edc:	0018      	movs	r0, r3
 8002ede:	f7ff ffda 	bl	8002e96 <_ZN10RawDegreesC1Ev>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	331c      	adds	r3, #28
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f7ff ffd5 	bl	8002e96 <_ZN10RawDegreesC1Ev>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3328      	adds	r3, #40	; 0x28
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f7ff ffd0 	bl	8002e96 <_ZN10RawDegreesC1Ev>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	0018      	movs	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	b002      	add	sp, #8
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <_ZN11TinyGPSDateC1Ev>:
  }
  uint16_t year();
  uint8_t month();
  uint8_t day();

  TinyGPSDate() : valid(false), updated(false), date(0) {}
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	701a      	strb	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	705a      	strb	r2, [r3, #1]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	605a      	str	r2, [r3, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b002      	add	sp, #8
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <_ZN11TinyGPSTimeC1Ev>:
  uint8_t hour();
  uint8_t minute();
  uint8_t second();
  uint8_t centisecond();

  TinyGPSTime() : valid(false), updated(false), time(0) {}
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	701a      	strb	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	705a      	strb	r2, [r3, #1]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	0018      	movs	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b002      	add	sp, #8
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <_ZN14TinyGPSDecimalC1Ev>:
  int32_t value() {
    updated = false;
    return val;
  }

  TinyGPSDecimal() : valid(false), updated(false), val(0) {}
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	701a      	strb	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	705a      	strb	r2, [r3, #1]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	609a      	str	r2, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	0018      	movs	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b002      	add	sp, #8
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <_ZN14TinyGPSIntegerC1Ev>:
  uint32_t value() {
    updated = false;
    return val;
  }

  TinyGPSInteger() : valid(false), updated(false), val(0) {}
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	701a      	strb	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	705a      	strb	r2, [r3, #1]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	609a      	str	r2, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	0018      	movs	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	b002      	add	sp, #8
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <_ZN12TinyGPSSpeedC1Ev>:
  uint32_t val, newval;
  void commit();
  void set(const char *term);
};

struct TinyGPSSpeed : TinyGPSDecimal {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f7ff ffd4 	bl	8002f48 <_ZN14TinyGPSDecimalC1Ev>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	b002      	add	sp, #8
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <_ZN13TinyGPSCourseC1Ev>:
  double mph() { return _GPS_MPH_PER_KNOT * value() / 100.0; }
  double mps() { return _GPS_MPS_PER_KNOT * value() / 100.0; }
  double kmph() { return _GPS_KMPH_PER_KNOT * value() / 100.0; }
};

struct TinyGPSCourse : public TinyGPSDecimal {
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f7ff ffc7 	bl	8002f48 <_ZN14TinyGPSDecimalC1Ev>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b002      	add	sp, #8
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <_ZN15TinyGPSAltitudeC1Ev>:
  double deg() { return value() / 100.0; }
};

struct TinyGPSAltitude : TinyGPSDecimal {
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f7ff ffba 	bl	8002f48 <_ZN14TinyGPSDecimalC1Ev>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b002      	add	sp, #8
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <_ZN11TinyGPSHDOPC1Ev>:
  double miles() { return _GPS_MILES_PER_METER * value() / 100.0; }
  double kilometers() { return _GPS_KM_PER_METER * value() / 100.0; }
  double feet() { return _GPS_FEET_PER_METER * value() / 100.0; }
};

struct TinyGPSHDOP : TinyGPSDecimal {
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b082      	sub	sp, #8
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f7ff ffad 	bl	8002f48 <_ZN14TinyGPSDecimalC1Ev>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b002      	add	sp, #8
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <_ZN11TinyGPSPlusC1Ev>:
#define _GPRMCterm "GPRMC"
#define _GPGGAterm "GPGGA"
#define _GNRMCterm "GNRMC"
#define _GNGGAterm "GNGGA"

TinyGPSPlus::TinyGPSPlus()
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
    : parity(0), isChecksumTerm(false), curSentenceType(GPS_SENTENCE_OTHER),
      curTermNumber(0), curTermOffset(0), sentenceHasFix(false), customElts(0),
      customCandidates(0), encodedCharCount(0), sentencesWithFixCount(0),
      failedChecksumCount(0), passedChecksumCount(0) {
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	0018      	movs	r0, r3
 8003004:	f7ff ff59 	bl	8002eba <_ZN15TinyGPSLocationC1Ev>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3338      	adds	r3, #56	; 0x38
 800300c:	0018      	movs	r0, r3
 800300e:	f7ff ff77 	bl	8002f00 <_ZN11TinyGPSDateC1Ev>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3348      	adds	r3, #72	; 0x48
 8003016:	0018      	movs	r0, r3
 8003018:	f7ff ff84 	bl	8002f24 <_ZN11TinyGPSTimeC1Ev>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3358      	adds	r3, #88	; 0x58
 8003020:	0018      	movs	r0, r3
 8003022:	f7ff ffb5 	bl	8002f90 <_ZN12TinyGPSSpeedC1Ev>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3368      	adds	r3, #104	; 0x68
 800302a:	0018      	movs	r0, r3
 800302c:	f7ff ffbd 	bl	8002faa <_ZN13TinyGPSCourseC1Ev>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3378      	adds	r3, #120	; 0x78
 8003034:	0018      	movs	r0, r3
 8003036:	f7ff ffc5 	bl	8002fc4 <_ZN15TinyGPSAltitudeC1Ev>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3388      	adds	r3, #136	; 0x88
 800303e:	0018      	movs	r0, r3
 8003040:	f7ff ff94 	bl	8002f6c <_ZN14TinyGPSIntegerC1Ev>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3398      	adds	r3, #152	; 0x98
 8003048:	0018      	movs	r0, r3
 800304a:	f7ff ffc8 	bl	8002fde <_ZN11TinyGPSHDOPC1Ev>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	22a8      	movs	r2, #168	; 0xa8
 8003052:	2100      	movs	r1, #0
 8003054:	5499      	strb	r1, [r3, r2]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	22a9      	movs	r2, #169	; 0xa9
 800305a:	2100      	movs	r1, #0
 800305c:	5499      	strb	r1, [r3, r2]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	22b9      	movs	r2, #185	; 0xb9
 8003062:	2102      	movs	r1, #2
 8003064:	5499      	strb	r1, [r3, r2]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	22ba      	movs	r2, #186	; 0xba
 800306a:	2100      	movs	r1, #0
 800306c:	5499      	strb	r1, [r3, r2]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	22bb      	movs	r2, #187	; 0xbb
 8003072:	2100      	movs	r1, #0
 8003074:	5499      	strb	r1, [r3, r2]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	22bc      	movs	r2, #188	; 0xbc
 800307a:	2100      	movs	r1, #0
 800307c:	5499      	strb	r1, [r3, r2]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	22c0      	movs	r2, #192	; 0xc0
 8003082:	2100      	movs	r1, #0
 8003084:	5099      	str	r1, [r3, r2]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	22c4      	movs	r2, #196	; 0xc4
 800308a:	2100      	movs	r1, #0
 800308c:	5099      	str	r1, [r3, r2]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	22c8      	movs	r2, #200	; 0xc8
 8003092:	2100      	movs	r1, #0
 8003094:	5099      	str	r1, [r3, r2]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	22cc      	movs	r2, #204	; 0xcc
 800309a:	2100      	movs	r1, #0
 800309c:	5099      	str	r1, [r3, r2]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	22d0      	movs	r2, #208	; 0xd0
 80030a2:	2100      	movs	r1, #0
 80030a4:	5099      	str	r1, [r3, r2]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	22d4      	movs	r2, #212	; 0xd4
 80030aa:	2100      	movs	r1, #0
 80030ac:	5099      	str	r1, [r3, r2]
  term[0] = '\0';
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	22aa      	movs	r2, #170	; 0xaa
 80030b2:	2100      	movs	r1, #0
 80030b4:	5499      	strb	r1, [r3, r2]
}
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	0018      	movs	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b002      	add	sp, #8
 80030be:	bd80      	pop	{r7, pc}

080030c0 <_ZN11TinyGPSPlus6encodeEc>:

//
// public methods
//

bool TinyGPSPlus::encode(char c) {
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	000a      	movs	r2, r1
 80030ca:	1cfb      	adds	r3, r7, #3
 80030cc:	701a      	strb	r2, [r3, #0]
  ++encodedCharCount;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	22c8      	movs	r2, #200	; 0xc8
 80030d2:	589b      	ldr	r3, [r3, r2]
 80030d4:	1c5a      	adds	r2, r3, #1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	21c8      	movs	r1, #200	; 0xc8
 80030da:	505a      	str	r2, [r3, r1]

  switch (c) {
 80030dc:	1cfb      	adds	r3, r7, #3
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	3b0a      	subs	r3, #10
 80030e2:	2b22      	cmp	r3, #34	; 0x22
 80030e4:	d85d      	bhi.n	80031a2 <_ZN11TinyGPSPlus6encodeEc+0xe2>
 80030e6:	009a      	lsls	r2, r3, #2
 80030e8:	4b44      	ldr	r3, [pc, #272]	; (80031fc <_ZN11TinyGPSPlus6encodeEc+0x13c>)
 80030ea:	18d3      	adds	r3, r2, r3
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	469f      	mov	pc, r3
  case ',': // term terminators
    parity ^= (uint8_t)c;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	22a8      	movs	r2, #168	; 0xa8
 80030f4:	5c9a      	ldrb	r2, [r3, r2]
 80030f6:	1cfb      	adds	r3, r7, #3
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	4053      	eors	r3, r2
 80030fc:	b2d9      	uxtb	r1, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	22a8      	movs	r2, #168	; 0xa8
 8003102:	5499      	strb	r1, [r3, r2]
  case '\r':
  case '\n':
  case '*': {
    bool isValidSentence = false;
 8003104:	200f      	movs	r0, #15
 8003106:	183b      	adds	r3, r7, r0
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
    if (curTermOffset < sizeof(term)) {
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	22bb      	movs	r2, #187	; 0xbb
 8003110:	5c9b      	ldrb	r3, [r3, r2]
 8003112:	2b0e      	cmp	r3, #14
 8003114:	d810      	bhi.n	8003138 <_ZN11TinyGPSPlus6encodeEc+0x78>
      term[curTermOffset] = 0;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	22bb      	movs	r2, #187	; 0xbb
 800311a:	5c9b      	ldrb	r3, [r3, r2]
 800311c:	0019      	movs	r1, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	22aa      	movs	r2, #170	; 0xaa
 8003122:	185b      	adds	r3, r3, r1
 8003124:	189b      	adds	r3, r3, r2
 8003126:	2200      	movs	r2, #0
 8003128:	701a      	strb	r2, [r3, #0]
      isValidSentence = endOfTermHandler();
 800312a:	183c      	adds	r4, r7, r0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	0018      	movs	r0, r3
 8003130:	f000 f964 	bl	80033fc <_ZN11TinyGPSPlus16endOfTermHandlerEv>
 8003134:	0003      	movs	r3, r0
 8003136:	7023      	strb	r3, [r4, #0]
    }
    ++curTermNumber;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	22ba      	movs	r2, #186	; 0xba
 800313c:	5c9b      	ldrb	r3, [r3, r2]
 800313e:	3301      	adds	r3, #1
 8003140:	b2d9      	uxtb	r1, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	22ba      	movs	r2, #186	; 0xba
 8003146:	5499      	strb	r1, [r3, r2]
    curTermOffset = 0;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	22bb      	movs	r2, #187	; 0xbb
 800314c:	2100      	movs	r1, #0
 800314e:	5499      	strb	r1, [r3, r2]
    isChecksumTerm = c == '*';
 8003150:	1cfb      	adds	r3, r7, #3
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	3b2a      	subs	r3, #42	; 0x2a
 8003156:	425a      	negs	r2, r3
 8003158:	4153      	adcs	r3, r2
 800315a:	b2d9      	uxtb	r1, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	22a9      	movs	r2, #169	; 0xa9
 8003160:	5499      	strb	r1, [r3, r2]
    return isValidSentence;
 8003162:	230f      	movs	r3, #15
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	e043      	b.n	80031f2 <_ZN11TinyGPSPlus6encodeEc+0x132>
  } break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	22bb      	movs	r2, #187	; 0xbb
 800316e:	2100      	movs	r1, #0
 8003170:	5499      	strb	r1, [r3, r2]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	22bb      	movs	r2, #187	; 0xbb
 8003176:	5c99      	ldrb	r1, [r3, r2]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	22ba      	movs	r2, #186	; 0xba
 800317c:	5499      	strb	r1, [r3, r2]
    parity = 0;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	22a8      	movs	r2, #168	; 0xa8
 8003182:	2100      	movs	r1, #0
 8003184:	5499      	strb	r1, [r3, r2]
    curSentenceType = GPS_SENTENCE_OTHER;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	22b9      	movs	r2, #185	; 0xb9
 800318a:	2102      	movs	r1, #2
 800318c:	5499      	strb	r1, [r3, r2]
    isChecksumTerm = false;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	22a9      	movs	r2, #169	; 0xa9
 8003192:	2100      	movs	r1, #0
 8003194:	5499      	strb	r1, [r3, r2]
    sentenceHasFix = false;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	22bc      	movs	r2, #188	; 0xbc
 800319a:	2100      	movs	r1, #0
 800319c:	5499      	strb	r1, [r3, r2]
    return false;
 800319e:	2300      	movs	r3, #0
 80031a0:	e027      	b.n	80031f2 <_ZN11TinyGPSPlus6encodeEc+0x132>

  default: // ordinary characters
    if (curTermOffset < sizeof(term) - 1)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	22bb      	movs	r2, #187	; 0xbb
 80031a6:	5c9b      	ldrb	r3, [r3, r2]
 80031a8:	2b0d      	cmp	r3, #13
 80031aa:	d80f      	bhi.n	80031cc <_ZN11TinyGPSPlus6encodeEc+0x10c>
      term[curTermOffset++] = c;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	22bb      	movs	r2, #187	; 0xbb
 80031b0:	5c9b      	ldrb	r3, [r3, r2]
 80031b2:	1c5a      	adds	r2, r3, #1
 80031b4:	b2d0      	uxtb	r0, r2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	21bb      	movs	r1, #187	; 0xbb
 80031ba:	5450      	strb	r0, [r2, r1]
 80031bc:	0019      	movs	r1, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	22aa      	movs	r2, #170	; 0xaa
 80031c2:	185b      	adds	r3, r3, r1
 80031c4:	189b      	adds	r3, r3, r2
 80031c6:	1cfa      	adds	r2, r7, #3
 80031c8:	7812      	ldrb	r2, [r2, #0]
 80031ca:	701a      	strb	r2, [r3, #0]
    if (!isChecksumTerm)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	22a9      	movs	r2, #169	; 0xa9
 80031d0:	5c9b      	ldrb	r3, [r3, r2]
 80031d2:	2201      	movs	r2, #1
 80031d4:	4053      	eors	r3, r2
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d009      	beq.n	80031f0 <_ZN11TinyGPSPlus6encodeEc+0x130>
      parity ^= c;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	22a8      	movs	r2, #168	; 0xa8
 80031e0:	5c9a      	ldrb	r2, [r3, r2]
 80031e2:	1cfb      	adds	r3, r7, #3
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	4053      	eors	r3, r2
 80031e8:	b2d9      	uxtb	r1, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	22a8      	movs	r2, #168	; 0xa8
 80031ee:	5499      	strb	r1, [r3, r2]
    return false;
 80031f0:	2300      	movs	r3, #0
  }

  return false;
}
 80031f2:	0018      	movs	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b005      	add	sp, #20
 80031f8:	bd90      	pop	{r4, r7, pc}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	0800bebc 	.word	0x0800bebc

08003200 <_ZN11TinyGPSPlus7fromHexEc>:

//
// internal utilities
//
int TinyGPSPlus::fromHex(char a) {
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	000a      	movs	r2, r1
 800320a:	1cfb      	adds	r3, r7, #3
 800320c:	701a      	strb	r2, [r3, #0]
  if (a >= 'A' && a <= 'F')
 800320e:	1cfb      	adds	r3, r7, #3
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b40      	cmp	r3, #64	; 0x40
 8003214:	d907      	bls.n	8003226 <_ZN11TinyGPSPlus7fromHexEc+0x26>
 8003216:	1cfb      	adds	r3, r7, #3
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b46      	cmp	r3, #70	; 0x46
 800321c:	d803      	bhi.n	8003226 <_ZN11TinyGPSPlus7fromHexEc+0x26>
    return a - 'A' + 10;
 800321e:	1cfb      	adds	r3, r7, #3
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	3b37      	subs	r3, #55	; 0x37
 8003224:	e00e      	b.n	8003244 <_ZN11TinyGPSPlus7fromHexEc+0x44>
  else if (a >= 'a' && a <= 'f')
 8003226:	1cfb      	adds	r3, r7, #3
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b60      	cmp	r3, #96	; 0x60
 800322c:	d907      	bls.n	800323e <_ZN11TinyGPSPlus7fromHexEc+0x3e>
 800322e:	1cfb      	adds	r3, r7, #3
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b66      	cmp	r3, #102	; 0x66
 8003234:	d803      	bhi.n	800323e <_ZN11TinyGPSPlus7fromHexEc+0x3e>
    return a - 'a' + 10;
 8003236:	1cfb      	adds	r3, r7, #3
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	3b57      	subs	r3, #87	; 0x57
 800323c:	e002      	b.n	8003244 <_ZN11TinyGPSPlus7fromHexEc+0x44>
  else
    return a - '0';
 800323e:	1cfb      	adds	r3, r7, #3
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	3b30      	subs	r3, #48	; 0x30
}
 8003244:	0018      	movs	r0, r3
 8003246:	46bd      	mov	sp, r7
 8003248:	b002      	add	sp, #8
 800324a:	bd80      	pop	{r7, pc}

0800324c <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term) {
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  bool negative = *term == '-';
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	781a      	ldrb	r2, [r3, #0]
 8003258:	200b      	movs	r0, #11
 800325a:	183b      	adds	r3, r7, r0
 800325c:	3a2d      	subs	r2, #45	; 0x2d
 800325e:	4251      	negs	r1, r2
 8003260:	414a      	adcs	r2, r1
 8003262:	701a      	strb	r2, [r3, #0]
  if (negative)
 8003264:	183b      	adds	r3, r7, r0
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d002      	beq.n	8003272 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x26>
    ++term;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3301      	adds	r3, #1
 8003270:	607b      	str	r3, [r7, #4]
  int32_t ret = 100 * (int32_t)atol(term);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	0018      	movs	r0, r3
 8003276:	f007 fd1f 	bl	800acb8 <atol>
 800327a:	0003      	movs	r3, r0
 800327c:	2264      	movs	r2, #100	; 0x64
 800327e:	4353      	muls	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]
  while (isdigit(*term))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	3b30      	subs	r3, #48	; 0x30
 8003288:	001a      	movs	r2, r3
 800328a:	2109      	movs	r1, #9
 800328c:	2300      	movs	r3, #0
 800328e:	4291      	cmp	r1, r2
 8003290:	415b      	adcs	r3, r3
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x54>
    ++term;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3301      	adds	r3, #1
 800329c:	607b      	str	r3, [r7, #4]
  while (isdigit(*term))
 800329e:	e7f0      	b.n	8003282 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x36>
  if (*term == '.' && isdigit(term[1])) {
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b2e      	cmp	r3, #46	; 0x2e
 80032a6:	d12b      	bne.n	8003300 <_ZN11TinyGPSPlus12parseDecimalEPKc+0xb4>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3301      	adds	r3, #1
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	3b30      	subs	r3, #48	; 0x30
 80032b0:	001a      	movs	r2, r3
 80032b2:	2109      	movs	r1, #9
 80032b4:	2300      	movs	r3, #0
 80032b6:	4291      	cmp	r1, r2
 80032b8:	415b      	adcs	r3, r3
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d01f      	beq.n	8003300 <_ZN11TinyGPSPlus12parseDecimalEPKc+0xb4>
    ret += 10 * (term[1] - '0');
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3301      	adds	r3, #1
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	3b30      	subs	r3, #48	; 0x30
 80032c8:	001a      	movs	r2, r3
 80032ca:	0013      	movs	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	189b      	adds	r3, r3, r2
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	001a      	movs	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	189b      	adds	r3, r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
    if (isdigit(term[2]))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3302      	adds	r3, #2
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	3b30      	subs	r3, #48	; 0x30
 80032e2:	001a      	movs	r2, r3
 80032e4:	2109      	movs	r1, #9
 80032e6:	2300      	movs	r3, #0
 80032e8:	4291      	cmp	r1, r2
 80032ea:	415b      	adcs	r3, r3
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d006      	beq.n	8003300 <_ZN11TinyGPSPlus12parseDecimalEPKc+0xb4>
      ret += term[2] - '0';
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3302      	adds	r3, #2
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	3b30      	subs	r3, #48	; 0x30
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	18d3      	adds	r3, r2, r3
 80032fe:	60fb      	str	r3, [r7, #12]
  }
  return negative ? -ret : ret;
 8003300:	230b      	movs	r3, #11
 8003302:	18fb      	adds	r3, r7, r3
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <_ZN11TinyGPSPlus12parseDecimalEPKc+0xc4>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	425b      	negs	r3, r3
 800330e:	e000      	b.n	8003312 <_ZN11TinyGPSPlus12parseDecimalEPKc+0xc6>
 8003310:	68fb      	ldr	r3, [r7, #12]
}
 8003312:	0018      	movs	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	b004      	add	sp, #16
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg) {
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t leftOfDecimal = (uint32_t)atol(term);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	0018      	movs	r0, r3
 800332a:	f007 fcc5 	bl	800acb8 <atol>
 800332e:	0003      	movs	r3, r0
 8003330:	60fb      	str	r3, [r7, #12]
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2164      	movs	r1, #100	; 0x64
 8003336:	0018      	movs	r0, r3
 8003338:	f7fc ff7e 	bl	8000238 <__aeabi_uidivmod>
 800333c:	000b      	movs	r3, r1
 800333e:	001a      	movs	r2, r3
 8003340:	210a      	movs	r1, #10
 8003342:	187b      	adds	r3, r7, r1
 8003344:	801a      	strh	r2, [r3, #0]
  uint32_t multiplier = 10000000UL;
 8003346:	4b2c      	ldr	r3, [pc, #176]	; (80033f8 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0xdc>)
 8003348:	617b      	str	r3, [r7, #20]
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
 800334a:	187b      	adds	r3, r7, r1
 800334c:	881a      	ldrh	r2, [r3, #0]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	4353      	muls	r3, r2
 8003352:	613b      	str	r3, [r7, #16]

  deg.deg = (int16_t)(leftOfDecimal / 100);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2164      	movs	r1, #100	; 0x64
 8003358:	0018      	movs	r0, r3
 800335a:	f7fc fee7 	bl	800012c <__udivsi3>
 800335e:	0003      	movs	r3, r0
 8003360:	b29a      	uxth	r2, r3
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	801a      	strh	r2, [r3, #0]

  while (isdigit(*term))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	3b30      	subs	r3, #48	; 0x30
 800336c:	001a      	movs	r2, r3
 800336e:	2109      	movs	r1, #9
 8003370:	2300      	movs	r3, #0
 8003372:	4291      	cmp	r1, r2
 8003374:	415b      	adcs	r3, r3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x68>
    ++term;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3301      	adds	r3, #1
 8003380:	607b      	str	r3, [r7, #4]
  while (isdigit(*term))
 8003382:	e7f0      	b.n	8003366 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x4a>

  if (*term == '.')
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b2e      	cmp	r3, #46	; 0x2e
 800338a:	d121      	bne.n	80033d0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0xb4>
    while (isdigit(*++term)) {
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3301      	adds	r3, #1
 8003390:	607b      	str	r3, [r7, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	3b30      	subs	r3, #48	; 0x30
 8003398:	001a      	movs	r2, r3
 800339a:	2109      	movs	r1, #9
 800339c:	2300      	movs	r3, #0
 800339e:	4291      	cmp	r1, r2
 80033a0:	415b      	adcs	r3, r3
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	1e5a      	subs	r2, r3, #1
 80033a6:	4193      	sbcs	r3, r2
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d010      	beq.n	80033d0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0xb4>
      multiplier /= 10;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	210a      	movs	r1, #10
 80033b2:	0018      	movs	r0, r3
 80033b4:	f7fc feba 	bl	800012c <__udivsi3>
 80033b8:	0003      	movs	r3, r0
 80033ba:	617b      	str	r3, [r7, #20]
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	3b30      	subs	r3, #48	; 0x30
 80033c2:	001a      	movs	r2, r3
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	4353      	muls	r3, r2
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	18d3      	adds	r3, r2, r3
 80033cc:	613b      	str	r3, [r7, #16]
    while (isdigit(*++term)) {
 80033ce:	e7dd      	b.n	800338c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x70>
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	0013      	movs	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	189b      	adds	r3, r3, r2
 80033d8:	3301      	adds	r3, #1
 80033da:	2103      	movs	r1, #3
 80033dc:	0018      	movs	r0, r3
 80033de:	f7fc fea5 	bl	800012c <__udivsi3>
 80033e2:	0003      	movs	r3, r0
 80033e4:	001a      	movs	r2, r3
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	605a      	str	r2, [r3, #4]
  deg.negative = false;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2200      	movs	r2, #0
 80033ee:	721a      	strb	r2, [r3, #8]
}
 80033f0:	46c0      	nop			; (mov r8, r8)
 80033f2:	46bd      	mov	sp, r7
 80033f4:	b006      	add	sp, #24
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	00989680 	.word	0x00989680

080033fc <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
#define COMBINE(sentence_type, term_number)                                    \
  (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler() {
 80033fc:	b590      	push	{r4, r7, lr}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm) {
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	22a9      	movs	r2, #169	; 0xa9
 8003408:	5c9b      	ldrb	r3, [r3, r2]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d100      	bne.n	8003410 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x14>
 800340e:	e09e      	b.n	800354e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x152>
    uint8_t checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	22aa      	movs	r2, #170	; 0xaa
 8003414:	5c9a      	ldrb	r2, [r3, r2]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	0011      	movs	r1, r2
 800341a:	0018      	movs	r0, r3
 800341c:	f7ff fef0 	bl	8003200 <_ZN11TinyGPSPlus7fromHexEc>
 8003420:	0003      	movs	r3, r0
 8003422:	b2db      	uxtb	r3, r3
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	b2dc      	uxtb	r4, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	22ab      	movs	r2, #171	; 0xab
 800342c:	5c9a      	ldrb	r2, [r3, r2]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	0011      	movs	r1, r2
 8003432:	0018      	movs	r0, r3
 8003434:	f7ff fee4 	bl	8003200 <_ZN11TinyGPSPlus7fromHexEc>
 8003438:	0003      	movs	r3, r0
 800343a:	b2da      	uxtb	r2, r3
 800343c:	210f      	movs	r1, #15
 800343e:	187b      	adds	r3, r7, r1
 8003440:	18a2      	adds	r2, r4, r2
 8003442:	701a      	strb	r2, [r3, #0]
    if (checksum == parity) {
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	22a8      	movs	r2, #168	; 0xa8
 8003448:	5c9b      	ldrb	r3, [r3, r2]
 800344a:	187a      	adds	r2, r7, r1
 800344c:	7812      	ldrb	r2, [r2, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d000      	beq.n	8003454 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x58>
 8003452:	e073      	b.n	800353c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x140>
      passedChecksumCount++;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	22d4      	movs	r2, #212	; 0xd4
 8003458:	589b      	ldr	r3, [r3, r2]
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	21d4      	movs	r1, #212	; 0xd4
 8003460:	505a      	str	r2, [r3, r1]
      if (sentenceHasFix)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	22bc      	movs	r2, #188	; 0xbc
 8003466:	5c9b      	ldrb	r3, [r3, r2]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d006      	beq.n	800347a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7e>
        ++sentencesWithFixCount;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	22cc      	movs	r2, #204	; 0xcc
 8003470:	589b      	ldr	r3, [r3, r2]
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	21cc      	movs	r1, #204	; 0xcc
 8003478:	505a      	str	r2, [r3, r1]

      switch (curSentenceType) {
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	22b9      	movs	r2, #185	; 0xb9
 800347e:	5c9b      	ldrb	r3, [r3, r2]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d01f      	beq.n	80034c4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xc8>
 8003484:	2b01      	cmp	r3, #1
 8003486:	d13c      	bne.n	8003502 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x106>
      case GPS_SENTENCE_GPRMC:
        date.commit();
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3338      	adds	r3, #56	; 0x38
 800348c:	0018      	movs	r0, r3
 800348e:	f000 fa5f 	bl	8003950 <_ZN11TinyGPSDate6commitEv>
        time.commit();
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3348      	adds	r3, #72	; 0x48
 8003496:	0018      	movs	r0, r3
 8003498:	f000 fa72 	bl	8003980 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix) {
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	22bc      	movs	r2, #188	; 0xbc
 80034a0:	5c9b      	ldrb	r3, [r3, r2]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d02c      	beq.n	8003500 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x104>
          location.commit();
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	0018      	movs	r0, r3
 80034aa:	f000 f999 	bl	80037e0 <_ZN15TinyGPSLocation6commitEv>
          speed.commit();
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3358      	adds	r3, #88	; 0x58
 80034b2:	0018      	movs	r0, r3
 80034b4:	f000 fa9e 	bl	80039f4 <_ZN14TinyGPSDecimal6commitEv>
          course.commit();
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3368      	adds	r3, #104	; 0x68
 80034bc:	0018      	movs	r0, r3
 80034be:	f000 fa99 	bl	80039f4 <_ZN14TinyGPSDecimal6commitEv>
        }
        break;
 80034c2:	e01d      	b.n	8003500 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x104>
      case GPS_SENTENCE_GPGGA:
        time.commit();
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3348      	adds	r3, #72	; 0x48
 80034c8:	0018      	movs	r0, r3
 80034ca:	f000 fa59 	bl	8003980 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix) {
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	22bc      	movs	r2, #188	; 0xbc
 80034d2:	5c9b      	ldrb	r3, [r3, r2]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d008      	beq.n	80034ea <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xee>
          location.commit();
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	0018      	movs	r0, r3
 80034dc:	f000 f980 	bl	80037e0 <_ZN15TinyGPSLocation6commitEv>
          altitude.commit();
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3378      	adds	r3, #120	; 0x78
 80034e4:	0018      	movs	r0, r3
 80034e6:	f000 fa85 	bl	80039f4 <_ZN14TinyGPSDecimal6commitEv>
        }
        satellites.commit();
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3388      	adds	r3, #136	; 0x88
 80034ee:	0018      	movs	r0, r3
 80034f0:	f000 faa8 	bl	8003a44 <_ZN14TinyGPSInteger6commitEv>
        hdop.commit();
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3398      	adds	r3, #152	; 0x98
 80034f8:	0018      	movs	r0, r3
 80034fa:	f000 fa7b 	bl	80039f4 <_ZN14TinyGPSDecimal6commitEv>
        break;
 80034fe:	e000      	b.n	8003502 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x106>
        break;
 8003500:	46c0      	nop			; (mov r8, r8)
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	22c4      	movs	r2, #196	; 0xc4
 8003506:	589b      	ldr	r3, [r3, r2]
 8003508:	617b      	str	r3, [r7, #20]
           p != NULL &&
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d013      	beq.n	8003538 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x13c>
           strcmp(p->sentenceName, customCandidates->sentenceName) == 0;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	21c4      	movs	r1, #196	; 0xc4
 8003518:	585b      	ldr	r3, [r3, r1]
 800351a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351c:	0019      	movs	r1, r3
 800351e:	0010      	movs	r0, r2
 8003520:	f7fc fdf0 	bl	8000104 <strcmp>
 8003524:	1e03      	subs	r3, r0, #0
           p != NULL &&
 8003526:	d107      	bne.n	8003538 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x13c>
           p = p->next)
        p->commit();
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	0018      	movs	r0, r3
 800352c:	f000 fab3 	bl	8003a96 <_ZN13TinyGPSCustom6commitEv>
           p = p->next)
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	617b      	str	r3, [r7, #20]
      for (TinyGPSCustom *p = customCandidates;
 8003536:	e7e8      	b.n	800350a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x10e>
      return true;
 8003538:	2301      	movs	r3, #1
 800353a:	e143      	b.n	80037c4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c8>
    }

    else {
      ++failedChecksumCount;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	22d0      	movs	r2, #208	; 0xd0
 8003540:	589b      	ldr	r3, [r3, r2]
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	21d0      	movs	r1, #208	; 0xd0
 8003548:	505a      	str	r2, [r3, r1]
    }

    return false;
 800354a:	2300      	movs	r3, #0
 800354c:	e13a      	b.n	80037c4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c8>
  }

  // the first term determines the sentence type
  if (curTermNumber == 0) {
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	22ba      	movs	r2, #186	; 0xba
 8003552:	5c9b      	ldrb	r3, [r3, r2]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d000      	beq.n	800355a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x15e>
 8003558:	e067      	b.n	800362a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x22e>
    if (!strcmp(term, _GPRMCterm) || !strcmp(term, _GNRMCterm))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	33aa      	adds	r3, #170	; 0xaa
 800355e:	4a9b      	ldr	r2, [pc, #620]	; (80037cc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3d0>)
 8003560:	0011      	movs	r1, r2
 8003562:	0018      	movs	r0, r3
 8003564:	f7fc fdce 	bl	8000104 <strcmp>
 8003568:	1e03      	subs	r3, r0, #0
 800356a:	d008      	beq.n	800357e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x182>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	33aa      	adds	r3, #170	; 0xaa
 8003570:	4a97      	ldr	r2, [pc, #604]	; (80037d0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3d4>)
 8003572:	0011      	movs	r1, r2
 8003574:	0018      	movs	r0, r3
 8003576:	f7fc fdc5 	bl	8000104 <strcmp>
 800357a:	1e03      	subs	r3, r0, #0
 800357c:	d104      	bne.n	8003588 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x18c>
      curSentenceType = GPS_SENTENCE_GPRMC;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	22b9      	movs	r2, #185	; 0xb9
 8003582:	2101      	movs	r1, #1
 8003584:	5499      	strb	r1, [r3, r2]
 8003586:	e01a      	b.n	80035be <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1c2>
    else if (!strcmp(term, _GPGGAterm) || !strcmp(term, _GNGGAterm))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	33aa      	adds	r3, #170	; 0xaa
 800358c:	4a91      	ldr	r2, [pc, #580]	; (80037d4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3d8>)
 800358e:	0011      	movs	r1, r2
 8003590:	0018      	movs	r0, r3
 8003592:	f7fc fdb7 	bl	8000104 <strcmp>
 8003596:	1e03      	subs	r3, r0, #0
 8003598:	d008      	beq.n	80035ac <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1b0>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	33aa      	adds	r3, #170	; 0xaa
 800359e:	4a8e      	ldr	r2, [pc, #568]	; (80037d8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3dc>)
 80035a0:	0011      	movs	r1, r2
 80035a2:	0018      	movs	r0, r3
 80035a4:	f7fc fdae 	bl	8000104 <strcmp>
 80035a8:	1e03      	subs	r3, r0, #0
 80035aa:	d104      	bne.n	80035b6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ba>
      curSentenceType = GPS_SENTENCE_GPGGA;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	22b9      	movs	r2, #185	; 0xb9
 80035b0:	2100      	movs	r1, #0
 80035b2:	5499      	strb	r1, [r3, r2]
 80035b4:	e003      	b.n	80035be <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1c2>
    else
      curSentenceType = GPS_SENTENCE_OTHER;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	22b9      	movs	r2, #185	; 0xb9
 80035ba:	2102      	movs	r1, #2
 80035bc:	5499      	strb	r1, [r3, r2]

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	22c0      	movs	r2, #192	; 0xc0
 80035c2:	589a      	ldr	r2, [r3, r2]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	21c4      	movs	r1, #196	; 0xc4
 80035c8:	505a      	str	r2, [r3, r1]
         customCandidates != NULL &&
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	22c4      	movs	r2, #196	; 0xc4
 80035ce:	589b      	ldr	r3, [r3, r2]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d013      	beq.n	80035fc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
         strcmp(customCandidates->sentenceName, term) < 0;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	22c4      	movs	r2, #196	; 0xc4
 80035d8:	589b      	ldr	r3, [r3, r2]
 80035da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	33aa      	adds	r3, #170	; 0xaa
 80035e0:	0019      	movs	r1, r3
 80035e2:	0010      	movs	r0, r2
 80035e4:	f7fc fd8e 	bl	8000104 <strcmp>
 80035e8:	1e03      	subs	r3, r0, #0
         customCandidates != NULL &&
 80035ea:	da07      	bge.n	80035fc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
         customCandidates = customCandidates->next)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	22c4      	movs	r2, #196	; 0xc4
 80035f0:	589b      	ldr	r3, [r3, r2]
 80035f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	21c4      	movs	r1, #196	; 0xc4
 80035f8:	505a      	str	r2, [r3, r1]
    for (customCandidates = customElts;
 80035fa:	e7e6      	b.n	80035ca <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ce>
      ;
    if (customCandidates != NULL &&
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	22c4      	movs	r2, #196	; 0xc4
 8003600:	589b      	ldr	r3, [r3, r2]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00f      	beq.n	8003626 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x22a>
        strcmp(customCandidates->sentenceName, term) > 0)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	22c4      	movs	r2, #196	; 0xc4
 800360a:	589b      	ldr	r3, [r3, r2]
 800360c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	33aa      	adds	r3, #170	; 0xaa
 8003612:	0019      	movs	r1, r3
 8003614:	0010      	movs	r0, r2
 8003616:	f7fc fd75 	bl	8000104 <strcmp>
 800361a:	1e03      	subs	r3, r0, #0
    if (customCandidates != NULL &&
 800361c:	dd03      	ble.n	8003626 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x22a>
      customCandidates = NULL;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	22c4      	movs	r2, #196	; 0xc4
 8003622:	2100      	movs	r1, #0
 8003624:	5099      	str	r1, [r3, r2]

    return false;
 8003626:	2300      	movs	r3, #0
 8003628:	e0cc      	b.n	80037c4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c8>
  }

  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	22b9      	movs	r2, #185	; 0xb9
 800362e:	5c9b      	ldrb	r3, [r3, r2]
 8003630:	2b02      	cmp	r3, #2
 8003632:	d100      	bne.n	8003636 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23a>
 8003634:	e098      	b.n	8003768 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	22aa      	movs	r2, #170	; 0xaa
 800363a:	5c9b      	ldrb	r3, [r3, r2]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d100      	bne.n	8003642 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x246>
 8003640:	e092      	b.n	8003768 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    switch (COMBINE(curSentenceType, curTermNumber)) {
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	22b9      	movs	r2, #185	; 0xb9
 8003646:	5c9b      	ldrb	r3, [r3, r2]
 8003648:	015b      	lsls	r3, r3, #5
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	21ba      	movs	r1, #186	; 0xba
 800364e:	5c52      	ldrb	r2, [r2, r1]
 8003650:	4313      	orrs	r3, r2
 8003652:	2b29      	cmp	r3, #41	; 0x29
 8003654:	d900      	bls.n	8003658 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x25c>
 8003656:	e087      	b.n	8003768 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
 8003658:	009a      	lsls	r2, r3, #2
 800365a:	4b60      	ldr	r3, [pc, #384]	; (80037dc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3e0>)
 800365c:	18d3      	adds	r3, r2, r3
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	469f      	mov	pc, r3
    case COMBINE(GPS_SENTENCE_GPRMC, 1): // Time in both sentences
    case COMBINE(GPS_SENTENCE_GPGGA, 1):
      time.setTime(term);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3348      	adds	r3, #72	; 0x48
 8003666:	001a      	movs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	33aa      	adds	r3, #170	; 0xaa
 800366c:	0019      	movs	r1, r3
 800366e:	0010      	movs	r0, r2
 8003670:	f000 f99e 	bl	80039b0 <_ZN11TinyGPSTime7setTimeEPKc>
      break;
 8003674:	e078      	b.n	8003768 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 2): // GPRMC validity
      sentenceHasFix = term[0] == 'A';
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	22aa      	movs	r2, #170	; 0xaa
 800367a:	5c9b      	ldrb	r3, [r3, r2]
 800367c:	3b41      	subs	r3, #65	; 0x41
 800367e:	425a      	negs	r2, r3
 8003680:	4153      	adcs	r3, r2
 8003682:	b2d9      	uxtb	r1, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	22bc      	movs	r2, #188	; 0xbc
 8003688:	5499      	strb	r1, [r3, r2]
      break;
 800368a:	e06d      	b.n	8003768 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 3): // Latitude
    case COMBINE(GPS_SENTENCE_GPGGA, 2):
      location.setLatitude(term);
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	33aa      	adds	r3, #170	; 0xaa
 8003692:	0019      	movs	r1, r3
 8003694:	0010      	movs	r0, r2
 8003696:	f000 f8c8 	bl	800382a <_ZN15TinyGPSLocation11setLatitudeEPKc>
      break;
 800369a:	e065      	b.n	8003768 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 4): // N/S
    case COMBINE(GPS_SENTENCE_GPGGA, 3):
      location.rawNewLatData.negative = term[0] == 'S';
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	22aa      	movs	r2, #170	; 0xaa
 80036a0:	5c9b      	ldrb	r3, [r3, r2]
 80036a2:	3b53      	subs	r3, #83	; 0x53
 80036a4:	425a      	negs	r2, r3
 80036a6:	4153      	adcs	r3, r2
 80036a8:	b2d9      	uxtb	r1, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2224      	movs	r2, #36	; 0x24
 80036ae:	5499      	strb	r1, [r3, r2]
      break;
 80036b0:	e05a      	b.n	8003768 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 5): // Longitude
    case COMBINE(GPS_SENTENCE_GPGGA, 4):
      location.setLongitude(term);
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	33aa      	adds	r3, #170	; 0xaa
 80036b8:	0019      	movs	r1, r3
 80036ba:	0010      	movs	r0, r2
 80036bc:	f000 f8c6 	bl	800384c <_ZN15TinyGPSLocation12setLongitudeEPKc>
      break;
 80036c0:	e052      	b.n	8003768 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 6): // E/W
    case COMBINE(GPS_SENTENCE_GPGGA, 5):
      location.rawNewLngData.negative = term[0] == 'W';
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	22aa      	movs	r2, #170	; 0xaa
 80036c6:	5c9b      	ldrb	r3, [r3, r2]
 80036c8:	3b57      	subs	r3, #87	; 0x57
 80036ca:	425a      	negs	r2, r3
 80036cc:	4153      	adcs	r3, r2
 80036ce:	b2d9      	uxtb	r1, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2230      	movs	r2, #48	; 0x30
 80036d4:	5499      	strb	r1, [r3, r2]
      break;
 80036d6:	e047      	b.n	8003768 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 7): // Speed (GPRMC)
      speed.set(term);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3358      	adds	r3, #88	; 0x58
 80036dc:	001a      	movs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	33aa      	adds	r3, #170	; 0xaa
 80036e2:	0019      	movs	r1, r3
 80036e4:	0010      	movs	r0, r2
 80036e6:	f000 f99d 	bl	8003a24 <_ZN14TinyGPSDecimal3setEPKc>
      break;
 80036ea:	e03d      	b.n	8003768 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
      course.set(term);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3368      	adds	r3, #104	; 0x68
 80036f0:	001a      	movs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	33aa      	adds	r3, #170	; 0xaa
 80036f6:	0019      	movs	r1, r3
 80036f8:	0010      	movs	r0, r2
 80036fa:	f000 f993 	bl	8003a24 <_ZN14TinyGPSDecimal3setEPKc>
      break;
 80036fe:	e033      	b.n	8003768 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
      date.setDate(term);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3338      	adds	r3, #56	; 0x38
 8003704:	001a      	movs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	33aa      	adds	r3, #170	; 0xaa
 800370a:	0019      	movs	r1, r3
 800370c:	0010      	movs	r0, r2
 800370e:	f000 f960 	bl	80039d2 <_ZN11TinyGPSDate7setDateEPKc>
      break;
 8003712:	e029      	b.n	8003768 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPGGA, 6): // Fix data (GPGGA)
      sentenceHasFix = term[0] > '0';
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	22aa      	movs	r2, #170	; 0xaa
 8003718:	5c9b      	ldrb	r3, [r3, r2]
 800371a:	2230      	movs	r2, #48	; 0x30
 800371c:	429a      	cmp	r2, r3
 800371e:	419b      	sbcs	r3, r3
 8003720:	425b      	negs	r3, r3
 8003722:	b2d9      	uxtb	r1, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	22bc      	movs	r2, #188	; 0xbc
 8003728:	5499      	strb	r1, [r3, r2]
      break;
 800372a:	e01d      	b.n	8003768 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPGGA, 7): // Satellites used (GPGGA)
      satellites.set(term);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3388      	adds	r3, #136	; 0x88
 8003730:	001a      	movs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	33aa      	adds	r3, #170	; 0xaa
 8003736:	0019      	movs	r1, r3
 8003738:	0010      	movs	r0, r2
 800373a:	f000 f99b 	bl	8003a74 <_ZN14TinyGPSInteger3setEPKc>
      break;
 800373e:	e013      	b.n	8003768 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPGGA, 8): // HDOP
      hdop.set(term);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3398      	adds	r3, #152	; 0x98
 8003744:	001a      	movs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	33aa      	adds	r3, #170	; 0xaa
 800374a:	0019      	movs	r1, r3
 800374c:	0010      	movs	r0, r2
 800374e:	f000 f969 	bl	8003a24 <_ZN14TinyGPSDecimal3setEPKc>
      break;
 8003752:	e009      	b.n	8003768 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x36c>
    case COMBINE(GPS_SENTENCE_GPGGA, 9): // Altitude (GPGGA)
      altitude.set(term);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	3378      	adds	r3, #120	; 0x78
 8003758:	001a      	movs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	33aa      	adds	r3, #170	; 0xaa
 800375e:	0019      	movs	r1, r3
 8003760:	0010      	movs	r0, r2
 8003762:	f000 f95f 	bl	8003a24 <_ZN14TinyGPSDecimal3setEPKc>
      break;
 8003766:	46c0      	nop			; (mov r8, r8)
    }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	22c4      	movs	r2, #196	; 0xc4
 800376c:	589b      	ldr	r3, [r3, r2]
 800376e:	613b      	str	r3, [r7, #16]
       p != NULL &&
       strcmp(p->sentenceName, customCandidates->sentenceName) == 0 &&
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d025      	beq.n	80037c2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c6>
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	21c4      	movs	r1, #196	; 0xc4
 800377e:	585b      	ldr	r3, [r3, r1]
 8003780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003782:	0019      	movs	r1, r3
 8003784:	0010      	movs	r0, r2
 8003786:	f7fc fcbd 	bl	8000104 <strcmp>
 800378a:	1e03      	subs	r3, r0, #0
       p != NULL &&
 800378c:	d119      	bne.n	80037c2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c6>
       p->termNumber <= curTermNumber;
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	21ba      	movs	r1, #186	; 0xba
 8003796:	5c52      	ldrb	r2, [r2, r1]
       strcmp(p->sentenceName, customCandidates->sentenceName) == 0 &&
 8003798:	4293      	cmp	r3, r2
 800379a:	dc12      	bgt.n	80037c2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3c6>
       p = p->next)
    if (p->termNumber == curTermNumber)
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	21ba      	movs	r1, #186	; 0xba
 80037a4:	5c52      	ldrb	r2, [r2, r1]
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d107      	bne.n	80037ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x3be>
      p->set(term);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	33aa      	adds	r3, #170	; 0xaa
 80037ae:	001a      	movs	r2, r3
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	0011      	movs	r1, r2
 80037b4:	0018      	movs	r0, r3
 80037b6:	f000 f98c 	bl	8003ad2 <_ZN13TinyGPSCustom3setEPKc>
       p = p->next)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	613b      	str	r3, [r7, #16]
  for (TinyGPSCustom *p = customCandidates;
 80037c0:	e7d6      	b.n	8003770 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x374>

  return false;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	0018      	movs	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b007      	add	sp, #28
 80037ca:	bd90      	pop	{r4, r7, pc}
 80037cc:	0800b6fc 	.word	0x0800b6fc
 80037d0:	0800b704 	.word	0x0800b704
 80037d4:	0800b70c 	.word	0x0800b70c
 80037d8:	0800b714 	.word	0x0800b714
 80037dc:	0800bf48 	.word	0x0800bf48

080037e0 <_ZN15TinyGPSLocation6commitEv>:
                                     "W",  "WNW", "NW", "NNW"};
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit() {
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  rawLatData = rawNewLatData;
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	1d10      	adds	r0, r2, #4
 80037ee:	331c      	adds	r3, #28
 80037f0:	2209      	movs	r2, #9
 80037f2:	0019      	movs	r1, r3
 80037f4:	f007 fa90 	bl	800ad18 <memcpy>
  rawLngData = rawNewLngData;
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3210      	adds	r2, #16
 80037fe:	0010      	movs	r0, r2
 8003800:	3328      	adds	r3, #40	; 0x28
 8003802:	2209      	movs	r2, #9
 8003804:	0019      	movs	r1, r3
 8003806:	f007 fa87 	bl	800ad18 <memcpy>
  lastCommitTime = HAL_GetTick();
 800380a:	f001 ff79 	bl	8005700 <HAL_GetTick>
 800380e:	0002      	movs	r2, r0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	635a      	str	r2, [r3, #52]	; 0x34
  valid = updated = true;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	705a      	strb	r2, [r3, #1]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	785a      	ldrb	r2, [r3, #1]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	701a      	strb	r2, [r3, #0]
}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	46bd      	mov	sp, r7
 8003826:	b002      	add	sp, #8
 8003828:	bd80      	pop	{r7, pc}

0800382a <_ZN15TinyGPSLocation11setLatitudeEPKc>:

void TinyGPSLocation::setLatitude(const char *term) {
 800382a:	b580      	push	{r7, lr}
 800382c:	b082      	sub	sp, #8
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
 8003832:	6039      	str	r1, [r7, #0]
  TinyGPSPlus::parseDegrees(term, rawNewLatData);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	331c      	adds	r3, #28
 8003838:	001a      	movs	r2, r3
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	0011      	movs	r1, r2
 800383e:	0018      	movs	r0, r3
 8003840:	f7ff fd6c 	bl	800331c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
}
 8003844:	46c0      	nop			; (mov r8, r8)
 8003846:	46bd      	mov	sp, r7
 8003848:	b002      	add	sp, #8
 800384a:	bd80      	pop	{r7, pc}

0800384c <_ZN15TinyGPSLocation12setLongitudeEPKc>:

void TinyGPSLocation::setLongitude(const char *term) {
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  TinyGPSPlus::parseDegrees(term, rawNewLngData);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3328      	adds	r3, #40	; 0x28
 800385a:	001a      	movs	r2, r3
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	0011      	movs	r1, r2
 8003860:	0018      	movs	r0, r3
 8003862:	f7ff fd5b 	bl	800331c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
}
 8003866:	46c0      	nop			; (mov r8, r8)
 8003868:	46bd      	mov	sp, r7
 800386a:	b002      	add	sp, #8
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <_ZN15TinyGPSLocation3latEv>:

double TinyGPSLocation::lat() {
 8003870:	b5b0      	push	{r4, r5, r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
  updated = false;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	705a      	strb	r2, [r3, #1]
  double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	889b      	ldrh	r3, [r3, #4]
 8003882:	0018      	movs	r0, r3
 8003884:	f7fd fe62 	bl	800154c <__aeabi_i2d>
 8003888:	6038      	str	r0, [r7, #0]
 800388a:	6079      	str	r1, [r7, #4]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	0018      	movs	r0, r3
 8003892:	f7fd fe8b 	bl	80015ac <__aeabi_ui2d>
 8003896:	2200      	movs	r2, #0
 8003898:	4b10      	ldr	r3, [pc, #64]	; (80038dc <_ZN15TinyGPSLocation3latEv+0x6c>)
 800389a:	f7fd fa51 	bl	8000d40 <__aeabi_ddiv>
 800389e:	0002      	movs	r2, r0
 80038a0:	000b      	movs	r3, r1
 80038a2:	6838      	ldr	r0, [r7, #0]
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	f7fc fee1 	bl	800066c <__aeabi_dadd>
 80038aa:	0002      	movs	r2, r0
 80038ac:	000b      	movs	r3, r1
 80038ae:	613a      	str	r2, [r7, #16]
 80038b0:	617b      	str	r3, [r7, #20]
  return rawLatData.negative ? -ret : ret;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	7b1b      	ldrb	r3, [r3, #12]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d007      	beq.n	80038ca <_ZN15TinyGPSLocation3latEv+0x5a>
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	001c      	movs	r4, r3
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2280      	movs	r2, #128	; 0x80
 80038c2:	0612      	lsls	r2, r2, #24
 80038c4:	405a      	eors	r2, r3
 80038c6:	0015      	movs	r5, r2
 80038c8:	e001      	b.n	80038ce <_ZN15TinyGPSLocation3latEv+0x5e>
 80038ca:	693c      	ldr	r4, [r7, #16]
 80038cc:	697d      	ldr	r5, [r7, #20]
 80038ce:	0022      	movs	r2, r4
 80038d0:	002b      	movs	r3, r5
}
 80038d2:	0010      	movs	r0, r2
 80038d4:	0019      	movs	r1, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	b006      	add	sp, #24
 80038da:	bdb0      	pop	{r4, r5, r7, pc}
 80038dc:	41cdcd65 	.word	0x41cdcd65

080038e0 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng() {
 80038e0:	b5b0      	push	{r4, r5, r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
  updated = false;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	705a      	strb	r2, [r3, #1]
  double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8a1b      	ldrh	r3, [r3, #16]
 80038f2:	0018      	movs	r0, r3
 80038f4:	f7fd fe2a 	bl	800154c <__aeabi_i2d>
 80038f8:	6038      	str	r0, [r7, #0]
 80038fa:	6079      	str	r1, [r7, #4]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	0018      	movs	r0, r3
 8003902:	f7fd fe53 	bl	80015ac <__aeabi_ui2d>
 8003906:	2200      	movs	r2, #0
 8003908:	4b10      	ldr	r3, [pc, #64]	; (800394c <_ZN15TinyGPSLocation3lngEv+0x6c>)
 800390a:	f7fd fa19 	bl	8000d40 <__aeabi_ddiv>
 800390e:	0002      	movs	r2, r0
 8003910:	000b      	movs	r3, r1
 8003912:	6838      	ldr	r0, [r7, #0]
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	f7fc fea9 	bl	800066c <__aeabi_dadd>
 800391a:	0002      	movs	r2, r0
 800391c:	000b      	movs	r3, r1
 800391e:	613a      	str	r2, [r7, #16]
 8003920:	617b      	str	r3, [r7, #20]
  return rawLngData.negative ? -ret : ret;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	7e1b      	ldrb	r3, [r3, #24]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d007      	beq.n	800393a <_ZN15TinyGPSLocation3lngEv+0x5a>
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	001c      	movs	r4, r3
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2280      	movs	r2, #128	; 0x80
 8003932:	0612      	lsls	r2, r2, #24
 8003934:	405a      	eors	r2, r3
 8003936:	0015      	movs	r5, r2
 8003938:	e001      	b.n	800393e <_ZN15TinyGPSLocation3lngEv+0x5e>
 800393a:	693c      	ldr	r4, [r7, #16]
 800393c:	697d      	ldr	r5, [r7, #20]
 800393e:	0022      	movs	r2, r4
 8003940:	002b      	movs	r3, r5
}
 8003942:	0010      	movs	r0, r2
 8003944:	0019      	movs	r1, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	b006      	add	sp, #24
 800394a:	bdb0      	pop	{r4, r5, r7, pc}
 800394c:	41cdcd65 	.word	0x41cdcd65

08003950 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit() {
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  date = newDate;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	605a      	str	r2, [r3, #4]
  lastCommitTime = HAL_GetTick();
 8003960:	f001 fece 	bl	8005700 <HAL_GetTick>
 8003964:	0002      	movs	r2, r0
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	60da      	str	r2, [r3, #12]
  valid = updated = true;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	705a      	strb	r2, [r3, #1]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	785a      	ldrb	r2, [r3, #1]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	701a      	strb	r2, [r3, #0]
}
 8003978:	46c0      	nop			; (mov r8, r8)
 800397a:	46bd      	mov	sp, r7
 800397c:	b002      	add	sp, #8
 800397e:	bd80      	pop	{r7, pc}

08003980 <_ZN11TinyGPSTime6commitEv>:

void TinyGPSTime::commit() {
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  time = newTime;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	605a      	str	r2, [r3, #4]
  lastCommitTime = HAL_GetTick();
 8003990:	f001 feb6 	bl	8005700 <HAL_GetTick>
 8003994:	0002      	movs	r2, r0
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	60da      	str	r2, [r3, #12]
  valid = updated = true;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	705a      	strb	r2, [r3, #1]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	785a      	ldrb	r2, [r3, #1]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	701a      	strb	r2, [r3, #0]
}
 80039a8:	46c0      	nop			; (mov r8, r8)
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b002      	add	sp, #8
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <_ZN11TinyGPSTime7setTimeEPKc>:

void TinyGPSTime::setTime(const char *term) {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	0018      	movs	r0, r3
 80039be:	f7ff fc45 	bl	800324c <_ZN11TinyGPSPlus12parseDecimalEPKc>
 80039c2:	0003      	movs	r3, r0
 80039c4:	001a      	movs	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	609a      	str	r2, [r3, #8]
}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	46bd      	mov	sp, r7
 80039ce:	b002      	add	sp, #8
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <_ZN11TinyGPSDate7setDateEPKc>:

void TinyGPSDate::setDate(const char *term) { newDate = atol(term); }
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b082      	sub	sp, #8
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	6039      	str	r1, [r7, #0]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	0018      	movs	r0, r3
 80039e0:	f007 f96a 	bl	800acb8 <atol>
 80039e4:	0003      	movs	r3, r0
 80039e6:	001a      	movs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	609a      	str	r2, [r3, #8]
 80039ec:	46c0      	nop			; (mov r8, r8)
 80039ee:	46bd      	mov	sp, r7
 80039f0:	b002      	add	sp, #8
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <_ZN14TinyGPSDecimal6commitEv>:
uint8_t TinyGPSTime::centisecond() {
  updated = false;
  return time % 100;
}

void TinyGPSDecimal::commit() {
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  val = newval;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68da      	ldr	r2, [r3, #12]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	609a      	str	r2, [r3, #8]
  lastCommitTime = HAL_GetTick();
 8003a04:	f001 fe7c 	bl	8005700 <HAL_GetTick>
 8003a08:	0002      	movs	r2, r0
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	605a      	str	r2, [r3, #4]
  valid = updated = true;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	705a      	strb	r2, [r3, #1]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	785a      	ldrb	r2, [r3, #1]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	701a      	strb	r2, [r3, #0]
}
 8003a1c:	46c0      	nop			; (mov r8, r8)
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b002      	add	sp, #8
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <_ZN14TinyGPSDecimal3setEPKc>:

void TinyGPSDecimal::set(const char *term) {
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  newval = TinyGPSPlus::parseDecimal(term);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	0018      	movs	r0, r3
 8003a32:	f7ff fc0b 	bl	800324c <_ZN11TinyGPSPlus12parseDecimalEPKc>
 8003a36:	0002      	movs	r2, r0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	60da      	str	r2, [r3, #12]
}
 8003a3c:	46c0      	nop			; (mov r8, r8)
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	b002      	add	sp, #8
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <_ZN14TinyGPSInteger6commitEv>:

void TinyGPSInteger::commit() {
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  val = newval;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	609a      	str	r2, [r3, #8]
  lastCommitTime = HAL_GetTick();
 8003a54:	f001 fe54 	bl	8005700 <HAL_GetTick>
 8003a58:	0002      	movs	r2, r0
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	605a      	str	r2, [r3, #4]
  valid = updated = true;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	705a      	strb	r2, [r3, #1]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	785a      	ldrb	r2, [r3, #1]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	701a      	strb	r2, [r3, #0]
}
 8003a6c:	46c0      	nop			; (mov r8, r8)
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	b002      	add	sp, #8
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <_ZN14TinyGPSInteger3setEPKc>:

void TinyGPSInteger::set(const char *term) { newval = atol(term); }
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	0018      	movs	r0, r3
 8003a82:	f007 f919 	bl	800acb8 <atol>
 8003a86:	0003      	movs	r3, r0
 8003a88:	001a      	movs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	60da      	str	r2, [r3, #12]
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	46bd      	mov	sp, r7
 8003a92:	b002      	add	sp, #8
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <_ZN13TinyGPSCustom6commitEv>:

  // Insert this item into the GPS tree
  gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit() {
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b082      	sub	sp, #8
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  strcpy(this->buffer, this->stagingBuffer);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3310      	adds	r3, #16
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	0011      	movs	r1, r2
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f007 f968 	bl	800ad7c <strcpy>
  lastCommitTime = HAL_GetTick();
 8003aac:	f001 fe28 	bl	8005700 <HAL_GetTick>
 8003ab0:	0002      	movs	r2, r0
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	621a      	str	r2, [r3, #32]
  valid = updated = true;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2225      	movs	r2, #37	; 0x25
 8003aba:	2101      	movs	r1, #1
 8003abc:	5499      	strb	r1, [r3, r2]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2225      	movs	r2, #37	; 0x25
 8003ac2:	5c99      	ldrb	r1, [r3, r2]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2224      	movs	r2, #36	; 0x24
 8003ac8:	5499      	strb	r1, [r3, r2]
}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b002      	add	sp, #8
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <_ZN13TinyGPSCustom3setEPKc>:

void TinyGPSCustom::set(const char *term) {
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	6039      	str	r1, [r7, #0]
  strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6839      	ldr	r1, [r7, #0]
 8003ae0:	2210      	movs	r2, #16
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f007 f952 	bl	800ad8c <strncpy>
}
 8003ae8:	46c0      	nop			; (mov r8, r8)
 8003aea:	46bd      	mov	sp, r7
 8003aec:	b002      	add	sp, #8
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <_ZN12SX1280Driver11SetIdleModeEv>:

  ////////////////Configuration Functions/////////////
  SX1280Driver();
  bool Begin();
  void End();
  void SetIdleMode() {
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
    SetMode(SX1280_MODE_FS);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2104      	movs	r1, #4
 8003afc:	0018      	movs	r0, r3
 8003afe:	f7fe f83d 	bl	8001b7c <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>
  }; // set Idle mode used when switching from RX to TX
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	46bd      	mov	sp, r7
 8003b06:	b002      	add	sp, #8
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <_ZN12Transmission17resetTransmissionEv>:
  void txDoneISR();

private:
  void processRFPacket();

  void resetTransmission() {
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b082      	sub	sp, #8
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
    disableTransmission();
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	0018      	movs	r0, r3
 8003b16:	f000 fa53 	bl	8003fc0 <_ZN12Transmission19disableTransmissionEv>
    HAL_Delay(10);
 8003b1a:	200a      	movs	r0, #10
 8003b1c:	f001 fdfa 	bl	8005714 <HAL_Delay>
    enableTransmission();
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	0018      	movs	r0, r3
 8003b24:	f000 f97c 	bl	8003e20 <_ZN12Transmission18enableTransmissionEv>
  }
 8003b28:	46c0      	nop			; (mov r8, r8)
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	b002      	add	sp, #8
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <_ZL14GetInitialFreqv>:
void FHSSrandomiseFHSSsequence(uint32_t crc);
// The number of frequencies for this regulatory domain
uint32_t FHSSgetChannelCount(void);

// get the initial frequency, which is also the sync channel
static inline uint32_t GetInitialFreq() { return FHSSfreqs[sync_channel]; }
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	4b03      	ldr	r3, [pc, #12]	; (8003b44 <_ZL14GetInitialFreqv+0x14>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	4b03      	ldr	r3, [pc, #12]	; (8003b48 <_ZL14GetInitialFreqv+0x18>)
 8003b3a:	0092      	lsls	r2, r2, #2
 8003b3c:	58d3      	ldr	r3, [r2, r3]
 8003b3e:	0018      	movs	r0, r3
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	200000a4 	.word	0x200000a4
 8003b48:	0800b858 	.word	0x0800b858

08003b4c <_ZL16FHSSsetCurrIndexh>:

// Get the current sequence pointer
static inline uint8_t FHSSgetCurrIndex() { return FHSSptr; }

// Set the sequence pointer, used by RX on SYNC
static inline void FHSSsetCurrIndex(const uint8_t value) {
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	0002      	movs	r2, r0
 8003b54:	1dfb      	adds	r3, r7, #7
 8003b56:	701a      	strb	r2, [r3, #0]
  FHSSptr = value % FHSS_SEQUENCE_CNT;
 8003b58:	4b07      	ldr	r3, [pc, #28]	; (8003b78 <_ZL16FHSSsetCurrIndexh+0x2c>)
 8003b5a:	781a      	ldrb	r2, [r3, #0]
 8003b5c:	1dfb      	adds	r3, r7, #7
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	0011      	movs	r1, r2
 8003b62:	0018      	movs	r0, r3
 8003b64:	f7fc fb68 	bl	8000238 <__aeabi_uidivmod>
 8003b68:	000b      	movs	r3, r1
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	4b03      	ldr	r3, [pc, #12]	; (8003b7c <_ZL16FHSSsetCurrIndexh+0x30>)
 8003b6e:	701a      	strb	r2, [r3, #0]
}
 8003b70:	46c0      	nop			; (mov r8, r8)
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b002      	add	sp, #8
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	0800b998 	.word	0x0800b998
 8003b7c:	200000a0 	.word	0x200000a0

08003b80 <_ZL15FHSSgetNextFreqv>:

// Advance the pointer to the next hop and return the frequency of that channel
static inline uint32_t FHSSgetNextFreq() {
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
  FHSSptr = (FHSSptr + 1) % FHSS_SEQUENCE_CNT;
 8003b86:	4b0f      	ldr	r3, [pc, #60]	; (8003bc4 <_ZL15FHSSgetNextFreqv+0x44>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <_ZL15FHSSgetNextFreqv+0x48>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	0019      	movs	r1, r3
 8003b94:	0010      	movs	r0, r2
 8003b96:	f7fc fc39 	bl	800040c <__aeabi_idivmod>
 8003b9a:	000b      	movs	r3, r1
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <_ZL15FHSSgetNextFreqv+0x44>)
 8003ba0:	701a      	strb	r2, [r3, #0]
  uint32_t freq = FHSSfreqs[FHSSsequence[FHSSptr]];
 8003ba2:	4b08      	ldr	r3, [pc, #32]	; (8003bc4 <_ZL15FHSSgetNextFreqv+0x44>)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	001a      	movs	r2, r3
 8003baa:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <_ZL15FHSSgetNextFreqv+0x4c>)
 8003bac:	5c9b      	ldrb	r3, [r3, r2]
 8003bae:	001a      	movs	r2, r3
 8003bb0:	4b07      	ldr	r3, [pc, #28]	; (8003bd0 <_ZL15FHSSgetNextFreqv+0x50>)
 8003bb2:	0092      	lsls	r2, r2, #2
 8003bb4:	58d3      	ldr	r3, [r2, r3]
 8003bb6:	607b      	str	r3, [r7, #4]
  return freq;
 8003bb8:	687b      	ldr	r3, [r7, #4]
}
 8003bba:	0018      	movs	r0, r3
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	b002      	add	sp, #8
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	200000a0 	.word	0x200000a0
 8003bc8:	0800b998 	.word	0x0800b998
 8003bcc:	2000008c 	.word	0x2000008c
 8003bd0:	0800b858 	.word	0x0800b858

08003bd4 <_ZL10rxCallbackv>:
#include "main.h"
#include <cstring>

static Transmission *pTransmission;

static inline void rxCallback() { pTransmission->rxDoneISR(); }
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	4b03      	ldr	r3, [pc, #12]	; (8003be8 <_ZL10rxCallbackv+0x14>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f000 fa85 	bl	80040ec <_ZN12Transmission9rxDoneISREv>
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	200000fc 	.word	0x200000fc

08003bec <_ZL10txCallbackv>:

static inline void txCallback() { pTransmission->txDoneISR(); }
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	4b03      	ldr	r3, [pc, #12]	; (8003c00 <_ZL10txCallbackv+0x14>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f000 fab0 	bl	800415a <_ZN12Transmission9txDoneISREv>
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	200000fc 	.word	0x200000fc

08003c04 <_ZN12Transmission5beginEP17TIM_HandleTypeDef>:

bool Transmission::begin(TIM_HandleTypeDef *t) {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]

  /* Catch if already initalized */
  if (radioInitialized == true)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2280      	movs	r2, #128	; 0x80
 8003c12:	5c9b      	ldrb	r3, [r3, r2]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d103      	bne.n	8003c20 <_ZN12Transmission5beginEP17TIM_HandleTypeDef+0x1c>
    return radioInitialized;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2280      	movs	r2, #128	; 0x80
 8003c1c:	5c9b      	ldrb	r3, [r3, r2]
 8003c1e:	e025      	b.n	8003c6c <_ZN12Transmission5beginEP17TIM_HandleTypeDef+0x68>

  timer = t;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	679a      	str	r2, [r3, #120]	; 0x78
  pTransmission = this;
 8003c26:	4b13      	ldr	r3, [pc, #76]	; (8003c74 <_ZN12Transmission5beginEP17TIM_HandleTypeDef+0x70>)
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	601a      	str	r2, [r3, #0]
  Radio.RXdoneCallback = &rxCallback;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a12      	ldr	r2, [pc, #72]	; (8003c78 <_ZN12Transmission5beginEP17TIM_HandleTypeDef+0x74>)
 8003c30:	601a      	str	r2, [r3, #0]
  Radio.TXdoneCallback = &txCallback;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a11      	ldr	r2, [pc, #68]	; (8003c7c <_ZN12Transmission5beginEP17TIM_HandleTypeDef+0x78>)
 8003c36:	605a      	str	r2, [r3, #4]

  if (Radio.Begin() == true) {
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f7fd fe20 	bl	8001880 <_ZN12SX1280Driver5BeginEv>
 8003c40:	0003      	movs	r3, r0
 8003c42:	3b01      	subs	r3, #1
 8003c44:	425a      	negs	r2, r3
 8003c46:	4153      	adcs	r3, r2
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00b      	beq.n	8003c66 <_ZN12Transmission5beginEP17TIM_HandleTypeDef+0x62>
    radioInitialized = true;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2280      	movs	r2, #128	; 0x80
 8003c52:	2101      	movs	r1, #1
 8003c54:	5499      	strb	r1, [r3, r2]
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003c56:	2380      	movs	r3, #128	; 0x80
 8003c58:	0219      	lsls	r1, r3, #8
 8003c5a:	23a0      	movs	r3, #160	; 0xa0
 8003c5c:	05db      	lsls	r3, r3, #23
 8003c5e:	2201      	movs	r2, #1
 8003c60:	0018      	movs	r0, r3
 8003c62:	f002 fd5a 	bl	800671a <HAL_GPIO_WritePin>
  }

  return radioInitialized;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2280      	movs	r2, #128	; 0x80
 8003c6a:	5c9b      	ldrb	r3, [r3, r2]
}
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	b002      	add	sp, #8
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	200000fc 	.word	0x200000fc
 8003c78:	08003bd5 	.word	0x08003bd5
 8003c7c:	08003bed 	.word	0x08003bed

08003c80 <_ZN12Transmission13setLinkPhraseEPKhm>:

void Transmission::setLinkPhrase(const uint8_t *linkPhrase, uint32_t length) {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  // Reset the linkPhrase
  memset(Settings.linkPhrase, 0, 8);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	3350      	adds	r3, #80	; 0x50
 8003c90:	2208      	movs	r2, #8
 8003c92:	2100      	movs	r1, #0
 8003c94:	0018      	movs	r0, r3
 8003c96:	f007 f848 	bl	800ad2a <memset>
  // Copy new linkPhrase
  memcpy(Settings.linkPhrase, linkPhrase, length);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3350      	adds	r3, #80	; 0x50
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	68b9      	ldr	r1, [r7, #8]
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f007 f838 	bl	800ad18 <memcpy>

  /* If the transmission was already enabled, restart it */
  if (Settings.transmissionEnabled) {
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2258      	movs	r2, #88	; 0x58
 8003cac:	5c9b      	ldrb	r3, [r3, r2]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <_ZN12Transmission13setLinkPhraseEPKhm+0x3a>
    resetTransmission();
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	f7ff ff28 	bl	8003b0a <_ZN12Transmission17resetTransmissionEv>
  }
}
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	b004      	add	sp, #16
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <_ZN12Transmission12setDirectionE24transmission_direction_e>:

void Transmission::setDirection(
    transmission_direction_e transmissionDirection) {
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	000a      	movs	r2, r1
 8003ccc:	1cfb      	adds	r3, r7, #3
 8003cce:	701a      	strb	r2, [r3, #0]
  if (Settings.transmissionDirection != transmissionDirection) {
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	224c      	movs	r2, #76	; 0x4c
 8003cd4:	5c9b      	ldrb	r3, [r3, r2]
 8003cd6:	1cfa      	adds	r2, r7, #3
 8003cd8:	7812      	ldrb	r2, [r2, #0]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d00d      	beq.n	8003cfa <_ZN12Transmission12setDirectionE24transmission_direction_e+0x38>
    Settings.transmissionDirection = transmissionDirection;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	1cfa      	adds	r2, r7, #3
 8003ce2:	214c      	movs	r1, #76	; 0x4c
 8003ce4:	7812      	ldrb	r2, [r2, #0]
 8003ce6:	545a      	strb	r2, [r3, r1]
    if (Settings.transmissionEnabled) {
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2258      	movs	r2, #88	; 0x58
 8003cec:	5c9b      	ldrb	r3, [r3, r2]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <_ZN12Transmission12setDirectionE24transmission_direction_e+0x38>
      resetTransmission();
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f7ff ff08 	bl	8003b0a <_ZN12Transmission17resetTransmissionEv>
    }
  }
}
 8003cfa:	46c0      	nop			; (mov r8, r8)
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	b002      	add	sp, #8
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <_ZN12Transmission7setModeE19transmission_mode_e>:

void Transmission::setMode(transmission_mode_e transmissionMode) {
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	000a      	movs	r2, r1
 8003d0c:	1cfb      	adds	r3, r7, #3
 8003d0e:	701a      	strb	r2, [r3, #0]
  Settings.transmissionMode = transmissionMode;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	1cfa      	adds	r2, r7, #3
 8003d14:	214d      	movs	r1, #77	; 0x4d
 8003d16:	7812      	ldrb	r2, [r2, #0]
 8003d18:	545a      	strb	r2, [r3, r1]
}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b002      	add	sp, #8
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <_ZN12Transmission9setPAGainEa>:

void Transmission::setPAGain(int8_t gain) {
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	000a      	movs	r2, r1
 8003d2c:	1cfb      	adds	r3, r7, #3
 8003d2e:	701a      	strb	r2, [r3, #0]
  Settings.paGain = gain;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	1cfa      	adds	r2, r7, #3
 8003d34:	214e      	movs	r1, #78	; 0x4e
 8003d36:	7812      	ldrb	r2, [r2, #0]
 8003d38:	545a      	strb	r2, [r3, r1]

  if (Settings.transmissionEnabled) {
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2258      	movs	r2, #88	; 0x58
 8003d3e:	5c9b      	ldrb	r3, [r3, r2]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00e      	beq.n	8003d62 <_ZN12Transmission9setPAGainEa+0x40>
    Radio.SetOutputPower(Settings.powerLevel - Settings.paGain);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	224f      	movs	r2, #79	; 0x4f
 8003d4a:	569b      	ldrsb	r3, [r3, r2]
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	214e      	movs	r1, #78	; 0x4e
 8003d52:	565b      	ldrsb	r3, [r3, r1]
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	b25b      	sxtb	r3, r3
 8003d5c:	0019      	movs	r1, r3
 8003d5e:	f7fd fedb 	bl	8001b18 <_ZN12SX1280Driver14SetOutputPowerEa>
  }
}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	46bd      	mov	sp, r7
 8003d66:	b002      	add	sp, #8
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <_ZN12Transmission13setPowerLevelEa>:

void Transmission::setPowerLevel(int8_t gain) { Settings.powerLevel = gain; }
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	000a      	movs	r2, r1
 8003d74:	1cfb      	adds	r3, r7, #3
 8003d76:	701a      	strb	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	1cfa      	adds	r2, r7, #3
 8003d7c:	214f      	movs	r1, #79	; 0x4f
 8003d7e:	7812      	ldrb	r2, [r2, #0]
 8003d80:	545a      	strb	r2, [r3, r1]
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	46bd      	mov	sp, r7
 8003d86:	b002      	add	sp, #8
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <_ZN12Transmission10writeBytesEPKhm>:

void Transmission::writeBytes(const uint8_t *data, uint32_t length) {
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	607a      	str	r2, [r7, #4]
  if (length > payloadLength)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	228c      	movs	r2, #140	; 0x8c
 8003d9a:	589b      	ldr	r3, [r3, r2]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d80f      	bhi.n	8003dc2 <_ZN12Transmission10writeBytesEPKhm+0x38>
    return;
  memcpy(txData, data, length);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3390      	adds	r3, #144	; 0x90
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	68b9      	ldr	r1, [r7, #8]
 8003daa:	0018      	movs	r0, r3
 8003dac:	f006 ffb4 	bl	800ad18 <memcpy>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8003db0:	2380      	movs	r3, #128	; 0x80
 8003db2:	021a      	lsls	r2, r3, #8
 8003db4:	23a0      	movs	r3, #160	; 0xa0
 8003db6:	05db      	lsls	r3, r3, #23
 8003db8:	0011      	movs	r1, r2
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f002 fcca 	bl	8006754 <HAL_GPIO_TogglePin>
 8003dc0:	e000      	b.n	8003dc4 <_ZN12Transmission10writeBytesEPKhm+0x3a>
    return;
 8003dc2:	46c0      	nop			; (mov r8, r8)
}
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	b004      	add	sp, #16
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <_ZN12Transmission9availableEv>:

bool Transmission::available() { return dataAvailable; }
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2288      	movs	r2, #136	; 0x88
 8003dd6:	5c9b      	ldrb	r3, [r3, r2]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	0018      	movs	r0, r3
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	b002      	add	sp, #8
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <_ZN12Transmission9readBytesEPhm>:

bool Transmission::readBytes(uint8_t *buffer, uint32_t length) {
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	607a      	str	r2, [r7, #4]
  if (dataAvailable) {
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2288      	movs	r2, #136	; 0x88
 8003df2:	5c9b      	ldrb	r3, [r3, r2]
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00d      	beq.n	8003e16 <_ZN12Transmission9readBytesEPhm+0x34>
    memcpy(buffer, rxData, length);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	33a4      	adds	r3, #164	; 0xa4
 8003dfe:	0019      	movs	r1, r3
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	0018      	movs	r0, r3
 8003e06:	f006 ff87 	bl	800ad18 <memcpy>
    dataAvailable = false;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2288      	movs	r2, #136	; 0x88
 8003e0e:	2100      	movs	r1, #0
 8003e10:	5499      	strb	r1, [r3, r2]
    return true;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e000      	b.n	8003e18 <_ZN12Transmission9readBytesEPhm+0x36>
  }
  return false;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	0018      	movs	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	b004      	add	sp, #16
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <_ZN12Transmission18enableTransmissionEv>:

void Transmission::enableTransmission() {
 8003e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e22:	46ce      	mov	lr, r9
 8003e24:	4647      	mov	r7, r8
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b08d      	sub	sp, #52	; 0x34
 8003e2a:	af08      	add	r7, sp, #32
 8003e2c:	6078      	str	r0, [r7, #4]

  if (radioInitialized == false)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2280      	movs	r2, #128	; 0x80
 8003e32:	5c9b      	ldrb	r3, [r3, r2]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d100      	bne.n	8003e3a <_ZN12Transmission18enableTransmissionEv+0x1a>
 8003e38:	e0b6      	b.n	8003fa8 <_ZN12Transmission18enableTransmissionEv+0x188>
    return;

  if (Settings.transmissionEnabled)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2258      	movs	r2, #88	; 0x58
 8003e3e:	5c9b      	ldrb	r3, [r3, r2]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d000      	beq.n	8003e46 <_ZN12Transmission18enableTransmissionEv+0x26>
 8003e44:	e0b2      	b.n	8003fac <_ZN12Transmission18enableTransmissionEv+0x18c>
    return;

  Settings.transmissionEnabled = true;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2258      	movs	r2, #88	; 0x58
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	5499      	strb	r1, [r3, r2]

  linkCRC = crc32(Settings.linkPhrase, 8);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	3350      	adds	r3, #80	; 0x50
 8003e52:	2108      	movs	r1, #8
 8003e54:	0018      	movs	r0, r3
 8003e56:	f7fd fc55 	bl	8001704 <_Z5crc32PKhj>
 8003e5a:	0002      	movs	r2, r0
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2184      	movs	r1, #132	; 0x84
 8003e60:	505a      	str	r2, [r3, r1]
  linkXOR = linkCRC & 0xFF;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2284      	movs	r2, #132	; 0x84
 8003e66:	589b      	ldr	r3, [r3, r2]
 8003e68:	b2d9      	uxtb	r1, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2283      	movs	r2, #131	; 0x83
 8003e6e:	5499      	strb	r1, [r3, r2]

  FHSSrandomiseFHSSsequence(linkCRC);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2284      	movs	r2, #132	; 0x84
 8003e74:	589b      	ldr	r3, [r3, r2]
 8003e76:	0018      	movs	r0, r3
 8003e78:	f7fd fc0a 	bl	8001690 <_Z25FHSSrandomiseFHSSsequencem>

  Radio.SetOutputPower(Settings.powerLevel - Settings.paGain);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	224f      	movs	r2, #79	; 0x4f
 8003e82:	569b      	ldrsb	r3, [r3, r2]
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	214e      	movs	r1, #78	; 0x4e
 8003e8a:	565b      	ldrsb	r3, [r3, r1]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	b25b      	sxtb	r3, r3
 8003e94:	0019      	movs	r1, r3
 8003e96:	f7fd fe3f 	bl	8001b18 <_ZN12SX1280Driver14SetOutputPowerEa>

  HAL_Delay(10);
 8003e9a:	200a      	movs	r0, #10
 8003e9c:	f001 fc3a 	bl	8005714 <HAL_Delay>

  /* Get the modulation settings */
  modulation_settings_s *const modParams =
      &Settings.modulationConfig[Settings.modeIndex];
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  modulation_settings_s *const modParams =
 8003ea4:	0013      	movs	r3, r2
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	189b      	adds	r3, r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	3358      	adds	r3, #88	; 0x58
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	18d3      	adds	r3, r2, r3
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	60fb      	str	r3, [r7, #12]

  if (Settings.transmissionDirection == TX) {
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	224c      	movs	r2, #76	; 0x4c
 8003eba:	5c9b      	ldrb	r3, [r3, r2]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d12a      	bne.n	8003f16 <_ZN12Transmission18enableTransmissionEv+0xf6>
    Radio.Config(modParams->bw, modParams->sf, modParams->cr, GetInitialFreq(),
 8003ec0:	687c      	ldr	r4, [r7, #4]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	781d      	ldrb	r5, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	785e      	ldrb	r6, [r3, #1]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	789b      	ldrb	r3, [r3, #2]
 8003ece:	4698      	mov	r8, r3
 8003ed0:	f7ff fe2e 	bl	8003b30 <_ZL14GetInitialFreqv>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	7a1a      	ldrb	r2, [r3, #8]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	7a59      	ldrb	r1, [r3, #9]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	4699      	mov	r9, r3
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	469c      	mov	ip, r3
 8003ee6:	4663      	mov	r3, ip
 8003ee8:	9307      	str	r3, [sp, #28]
 8003eea:	2300      	movs	r3, #0
 8003eec:	469c      	mov	ip, r3
 8003eee:	4663      	mov	r3, ip
 8003ef0:	9306      	str	r3, [sp, #24]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	469c      	mov	ip, r3
 8003ef6:	4663      	mov	r3, ip
 8003ef8:	9305      	str	r3, [sp, #20]
 8003efa:	464b      	mov	r3, r9
 8003efc:	9304      	str	r3, [sp, #16]
 8003efe:	9103      	str	r1, [sp, #12]
 8003f00:	2300      	movs	r3, #0
 8003f02:	9302      	str	r3, [sp, #8]
 8003f04:	9201      	str	r2, [sp, #4]
 8003f06:	9000      	str	r0, [sp, #0]
 8003f08:	4643      	mov	r3, r8
 8003f0a:	0032      	movs	r2, r6
 8003f0c:	0029      	movs	r1, r5
 8003f0e:	0020      	movs	r0, r4
 8003f10:	f7fd fd46 	bl	80019a0 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth>
 8003f14:	e021      	b.n	8003f5a <_ZN12Transmission18enableTransmissionEv+0x13a>
                 modParams->PreambleLen, 0, modParams->PayloadLength,
                 modParams->interval);
  } else {
    Radio.Config(modParams->bw, modParams->sf, modParams->cr, GetInitialFreq(),
 8003f16:	687c      	ldr	r4, [r7, #4]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	781d      	ldrb	r5, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	785e      	ldrb	r6, [r3, #1]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	789b      	ldrb	r3, [r3, #2]
 8003f24:	4698      	mov	r8, r3
 8003f26:	f7ff fe03 	bl	8003b30 <_ZL14GetInitialFreqv>
 8003f2a:	0001      	movs	r1, r0
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	7a1b      	ldrb	r3, [r3, #8]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	7a52      	ldrb	r2, [r2, #9]
 8003f34:	2000      	movs	r0, #0
 8003f36:	9007      	str	r0, [sp, #28]
 8003f38:	2000      	movs	r0, #0
 8003f3a:	9006      	str	r0, [sp, #24]
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	9005      	str	r0, [sp, #20]
 8003f40:	2000      	movs	r0, #0
 8003f42:	9004      	str	r0, [sp, #16]
 8003f44:	9203      	str	r2, [sp, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	9202      	str	r2, [sp, #8]
 8003f4a:	9301      	str	r3, [sp, #4]
 8003f4c:	9100      	str	r1, [sp, #0]
 8003f4e:	4643      	mov	r3, r8
 8003f50:	0032      	movs	r2, r6
 8003f52:	0029      	movs	r1, r5
 8003f54:	0020      	movs	r0, r4
 8003f56:	f7fd fd23 	bl	80019a0 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth>
                 modParams->PreambleLen, 0, modParams->PayloadLength, 0);
  }

  payloadLength = modParams->PayloadLength;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	7a5b      	ldrb	r3, [r3, #9]
 8003f5e:	0019      	movs	r1, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	228c      	movs	r2, #140	; 0x8c
 8003f64:	5099      	str	r1, [r3, r2]

  HAL_Delay(10);
 8003f66:	200a      	movs	r0, #10
 8003f68:	f001 fbd4 	bl	8005714 <HAL_Delay>

  if (Settings.transmissionDirection == TX) {
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	224c      	movs	r2, #76	; 0x4c
 8003f70:	5c9b      	ldrb	r3, [r3, r2]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10a      	bne.n	8003f8c <_ZN12Transmission18enableTransmissionEv+0x16c>
    TIM2->ARR = 1000;
 8003f76:	2380      	movs	r3, #128	; 0x80
 8003f78:	05db      	lsls	r3, r3, #23
 8003f7a:	22fa      	movs	r2, #250	; 0xfa
 8003f7c:	0092      	lsls	r2, r2, #2
 8003f7e:	62da      	str	r2, [r3, #44]	; 0x2c
    HAL_TIM_Base_Start_IT(timer);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f84:	0018      	movs	r0, r3
 8003f86:	f004 f9cf 	bl	8008328 <HAL_TIM_Base_Start_IT>
 8003f8a:	e010      	b.n	8003fae <_ZN12Transmission18enableTransmissionEv+0x18e>
  } else {
    TIM2->ARR = 1005;
 8003f8c:	2380      	movs	r3, #128	; 0x80
 8003f8e:	05db      	lsls	r3, r3, #23
 8003f90:	4a0a      	ldr	r2, [pc, #40]	; (8003fbc <_ZN12Transmission18enableTransmissionEv+0x19c>)
 8003f92:	62da      	str	r2, [r3, #44]	; 0x2c
    Radio.RXnb();
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	0018      	movs	r0, r3
 8003f98:	f7fe f928 	bl	80021ec <_ZN12SX1280Driver4RXnbEv>
    HAL_TIM_Base_Start_IT(timer);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	f004 f9c1 	bl	8008328 <HAL_TIM_Base_Start_IT>
 8003fa6:	e002      	b.n	8003fae <_ZN12Transmission18enableTransmissionEv+0x18e>
    return;
 8003fa8:	46c0      	nop			; (mov r8, r8)
 8003faa:	e000      	b.n	8003fae <_ZN12Transmission18enableTransmissionEv+0x18e>
    return;
 8003fac:	46c0      	nop			; (mov r8, r8)
  }
}
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	b005      	add	sp, #20
 8003fb2:	bcc0      	pop	{r6, r7}
 8003fb4:	46b9      	mov	r9, r7
 8003fb6:	46b0      	mov	r8, r6
 8003fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fba:	46c0      	nop			; (mov r8, r8)
 8003fbc:	000003ed 	.word	0x000003ed

08003fc0 <_ZN12Transmission19disableTransmissionEv>:

void Transmission::disableTransmission() {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Wait until done transmitting / receiving*/
  while (busyTransmitting)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2282      	movs	r2, #130	; 0x82
 8003fcc:	5c9b      	ldrb	r3, [r3, r2]
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d000      	beq.n	8003fd6 <_ZN12Transmission19disableTransmissionEv+0x16>
 8003fd4:	e7f8      	b.n	8003fc8 <_ZN12Transmission19disableTransmissionEv+0x8>
    ;

  if (!Settings.transmissionEnabled)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2258      	movs	r2, #88	; 0x58
 8003fda:	5c9b      	ldrb	r3, [r3, r2]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	4053      	eors	r3, r2
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d122      	bne.n	800402c <_ZN12Transmission19disableTransmissionEv+0x6c>
    return;

  Settings.transmissionEnabled = false;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2258      	movs	r2, #88	; 0x58
 8003fea:	2100      	movs	r1, #0
 8003fec:	5499      	strb	r1, [r3, r2]

  /* Disable Timer */
  HAL_TIM_Base_Stop_IT(timer);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	f004 f9f4 	bl	80083e0 <HAL_TIM_Base_Stop_IT>
  TIM2->CNT = 0;
 8003ff8:	2380      	movs	r3, #128	; 0x80
 8003ffa:	05db      	lsls	r3, r3, #23
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Put Radio in Idle Mode */
  Radio.SetIdleMode();
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	0018      	movs	r0, r3
 8004004:	f7ff fd74 	bl	8003af0 <_ZN12SX1280Driver11SetIdleModeEv>

  LQCalc.reset();
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3340      	adds	r3, #64	; 0x40
 800400c:	0018      	movs	r0, r3
 800400e:	f000 f97f 	bl	8004310 <_ZN6LQCALCILh30EE5resetEv>
  connectionState = disconnected;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2281      	movs	r2, #129	; 0x81
 8004016:	2102      	movs	r1, #2
 8004018:	5499      	strb	r1, [r3, r2]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800401a:	2380      	movs	r3, #128	; 0x80
 800401c:	0219      	lsls	r1, r3, #8
 800401e:	23a0      	movs	r3, #160	; 0xa0
 8004020:	05db      	lsls	r3, r3, #23
 8004022:	2201      	movs	r2, #1
 8004024:	0018      	movs	r0, r3
 8004026:	f002 fb78 	bl	800671a <HAL_GPIO_WritePin>
 800402a:	e000      	b.n	800402e <_ZN12Transmission19disableTransmissionEv+0x6e>
    return;
 800402c:	46c0      	nop			; (mov r8, r8)
}
 800402e:	46bd      	mov	sp, r7
 8004030:	b002      	add	sp, #8
 8004032:	bd80      	pop	{r7, pc}

08004034 <_ZN12Transmission15processRFPacketEv>:

void Transmission::processRFPacket() {
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  LQCalc.inc();
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3340      	adds	r3, #64	; 0x40
 8004040:	0018      	movs	r0, r3
 8004042:	f000 f98c 	bl	800435e <_ZN6LQCALCILh30EE3incEv>

  uint8_t crc =
      (uint8_t)crc32((const uint8_t *)Radio.RXdataBuffer, payloadLength - 1);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	331c      	adds	r3, #28
 800404a:	001a      	movs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	218c      	movs	r1, #140	; 0x8c
 8004050:	585b      	ldr	r3, [r3, r1]
 8004052:	3b01      	subs	r3, #1
 8004054:	0019      	movs	r1, r3
 8004056:	0010      	movs	r0, r2
 8004058:	f7fd fb54 	bl	8001704 <_Z5crc32PKhj>
 800405c:	0002      	movs	r2, r0
 800405e:	210f      	movs	r1, #15
 8004060:	187b      	adds	r3, r7, r1
 8004062:	701a      	strb	r2, [r3, #0]

  if ((linkXOR ^ crc) == Radio.RXdataBuffer[payloadLength - 1]) {
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2283      	movs	r2, #131	; 0x83
 8004068:	5c9a      	ldrb	r2, [r3, r2]
 800406a:	187b      	adds	r3, r7, r1
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	4053      	eors	r3, r2
 8004070:	b2da      	uxtb	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	218c      	movs	r1, #140	; 0x8c
 8004076:	585b      	ldr	r3, [r3, r1]
 8004078:	3b01      	subs	r3, #1
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	18cb      	adds	r3, r1, r3
 800407e:	7f1b      	ldrb	r3, [r3, #28]
 8004080:	b2db      	uxtb	r3, r3
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	425a      	negs	r2, r3
 8004086:	4153      	adcs	r3, r2
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d02a      	beq.n	80040e4 <_ZN12Transmission15processRFPacketEv+0xb0>
	if(connectionState == tentative)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2281      	movs	r2, #129	; 0x81
 8004092:	5c9b      	ldrb	r3, [r3, r2]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d104      	bne.n	80040a2 <_ZN12Transmission15processRFPacketEv+0x6e>
		connectionState = connected;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2281      	movs	r2, #129	; 0x81
 800409c:	2100      	movs	r1, #0
 800409e:	5499      	strb	r1, [r3, r2]
 80040a0:	e008      	b.n	80040b4 <_ZN12Transmission15processRFPacketEv+0x80>
	else if(connectionState == disconnected)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2281      	movs	r2, #129	; 0x81
 80040a6:	5c9b      	ldrb	r3, [r3, r2]
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d103      	bne.n	80040b4 <_ZN12Transmission15processRFPacketEv+0x80>
		connectionState = tentative;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2281      	movs	r2, #129	; 0x81
 80040b0:	2101      	movs	r1, #1
 80040b2:	5499      	strb	r1, [r3, r2]
    dataAvailable = true;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2288      	movs	r2, #136	; 0x88
 80040b8:	2101      	movs	r1, #1
 80040ba:	5499      	strb	r1, [r3, r2]
    timeout = 0;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	67da      	str	r2, [r3, #124]	; 0x7c

    memcpy(rxData, (const uint8_t *)Radio.RXdataBuffer, payloadLength);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	33a4      	adds	r3, #164	; 0xa4
 80040c6:	0018      	movs	r0, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	331c      	adds	r3, #28
 80040cc:	0019      	movs	r1, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	228c      	movs	r2, #140	; 0x8c
 80040d2:	589b      	ldr	r3, [r3, r2]
 80040d4:	001a      	movs	r2, r3
 80040d6:	f006 fe1f 	bl	800ad18 <memcpy>

    LQCalc.add();
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	3340      	adds	r3, #64	; 0x40
 80040de:	0018      	movs	r0, r3
 80040e0:	f000 f995 	bl	800440e <_ZN6LQCALCILh30EE3addEv>
  }
}
 80040e4:	46c0      	nop			; (mov r8, r8)
 80040e6:	46bd      	mov	sp, r7
 80040e8:	b004      	add	sp, #16
 80040ea:	bd80      	pop	{r7, pc}

080040ec <_ZN12Transmission9rxDoneISREv>:

void Transmission::rxDoneISR() {
 80040ec:	b590      	push	{r4, r7, lr}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  busyTransmitting = false;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2282      	movs	r2, #130	; 0x82
 80040f8:	2100      	movs	r1, #0
 80040fa:	5499      	strb	r1, [r3, r2]

  /* Reset the timer */
  HAL_TIM_Base_Stop_IT(timer);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004100:	0018      	movs	r0, r3
 8004102:	f004 f96d 	bl	80083e0 <HAL_TIM_Base_Stop_IT>
  TIM2->CNT = 0;
 8004106:	2380      	movs	r3, #128	; 0x80
 8004108:	05db      	lsls	r3, r3, #23
 800410a:	2200      	movs	r2, #0
 800410c:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start_IT(timer);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004112:	0018      	movs	r0, r3
 8004114:	f004 f908 	bl	8008328 <HAL_TIM_Base_Start_IT>

  processRFPacket();
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	0018      	movs	r0, r3
 800411c:	f7ff ff8a 	bl	8004034 <_ZN12Transmission15processRFPacketEv>

  if (connectionState == connected) {
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2281      	movs	r2, #129	; 0x81
 8004124:	5c9b      	ldrb	r3, [r3, r2]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d107      	bne.n	800413a <_ZN12Transmission9rxDoneISREv+0x4e>
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800412a:	2380      	movs	r3, #128	; 0x80
 800412c:	021a      	lsls	r2, r3, #8
 800412e:	23a0      	movs	r3, #160	; 0xa0
 8004130:	05db      	lsls	r3, r3, #23
 8004132:	0011      	movs	r1, r2
 8004134:	0018      	movs	r0, r3
 8004136:	f002 fb0d 	bl	8006754 <HAL_GPIO_TogglePin>
  }

  Radio.SetFrequencyReg(FHSSgetNextFreq());
 800413a:	687c      	ldr	r4, [r7, #4]
 800413c:	f7ff fd20 	bl	8003b80 <_ZL15FHSSgetNextFreqv>
 8004140:	0003      	movs	r3, r0
 8004142:	0019      	movs	r1, r3
 8004144:	0020      	movs	r0, r4
 8004146:	f7fd fee3 	bl	8001f10 <_ZN12SX1280Driver15SetFrequencyRegEm>

  Radio.RXnb();
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	0018      	movs	r0, r3
 800414e:	f7fe f84d 	bl	80021ec <_ZN12SX1280Driver4RXnbEv>
}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	46bd      	mov	sp, r7
 8004156:	b003      	add	sp, #12
 8004158:	bd90      	pop	{r4, r7, pc}

0800415a <_ZN12Transmission9txDoneISREv>:

void Transmission::txDoneISR() {
 800415a:	b590      	push	{r4, r7, lr}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  busyTransmitting = false;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2282      	movs	r2, #130	; 0x82
 8004166:	2100      	movs	r1, #0
 8004168:	5499      	strb	r1, [r3, r2]

  Radio.SetFrequencyReg(FHSSgetNextFreq());
 800416a:	687c      	ldr	r4, [r7, #4]
 800416c:	f7ff fd08 	bl	8003b80 <_ZL15FHSSgetNextFreqv>
 8004170:	0003      	movs	r3, r0
 8004172:	0019      	movs	r1, r3
 8004174:	0020      	movs	r0, r4
 8004176:	f7fd fecb 	bl	8001f10 <_ZN12SX1280Driver15SetFrequencyRegEm>
}
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	46bd      	mov	sp, r7
 800417e:	b003      	add	sp, #12
 8004180:	bd90      	pop	{r4, r7, pc}

08004182 <_ZN12Transmission9rxTimeoutEv>:

void Transmission::rxTimeout() {
 8004182:	b590      	push	{r4, r7, lr}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]

  if (timeout == 50) {
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800418e:	2b32      	cmp	r3, #50	; 0x32
 8004190:	d11b      	bne.n	80041ca <_ZN12Transmission9rxTimeoutEv+0x48>
    LQCalc.reset();
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3340      	adds	r3, #64	; 0x40
 8004196:	0018      	movs	r0, r3
 8004198:	f000 f8ba 	bl	8004310 <_ZN6LQCALCILh30EE5resetEv>
    connectionState = disconnected;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2281      	movs	r2, #129	; 0x81
 80041a0:	2102      	movs	r1, #2
 80041a2:	5499      	strb	r1, [r3, r2]
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80041a4:	2380      	movs	r3, #128	; 0x80
 80041a6:	0219      	lsls	r1, r3, #8
 80041a8:	23a0      	movs	r3, #160	; 0xa0
 80041aa:	05db      	lsls	r3, r3, #23
 80041ac:	2201      	movs	r2, #1
 80041ae:	0018      	movs	r0, r3
 80041b0:	f002 fab3 	bl	800671a <HAL_GPIO_WritePin>
    FHSSsetCurrIndex(0);
 80041b4:	2000      	movs	r0, #0
 80041b6:	f7ff fcc9 	bl	8003b4c <_ZL16FHSSsetCurrIndexh>
    Radio.SetFrequencyReg(GetInitialFreq());
 80041ba:	687c      	ldr	r4, [r7, #4]
 80041bc:	f7ff fcb8 	bl	8003b30 <_ZL14GetInitialFreqv>
 80041c0:	0003      	movs	r3, r0
 80041c2:	0019      	movs	r1, r3
 80041c4:	0020      	movs	r0, r4
 80041c6:	f7fd fea3 	bl	8001f10 <_ZN12SX1280Driver15SetFrequencyRegEm>
  }

  if (connectionState == connected) {
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2281      	movs	r2, #129	; 0x81
 80041ce:	5c9b      	ldrb	r3, [r3, r2]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10d      	bne.n	80041f0 <_ZN12Transmission9rxTimeoutEv+0x6e>
    LQCalc.inc();
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3340      	adds	r3, #64	; 0x40
 80041d8:	0018      	movs	r0, r3
 80041da:	f000 f8c0 	bl	800435e <_ZN6LQCALCILh30EE3incEv>
    Radio.SetFrequencyReg(FHSSgetNextFreq());
 80041de:	687c      	ldr	r4, [r7, #4]
 80041e0:	f7ff fcce 	bl	8003b80 <_ZL15FHSSgetNextFreqv>
 80041e4:	0003      	movs	r3, r0
 80041e6:	0019      	movs	r1, r3
 80041e8:	0020      	movs	r0, r4
 80041ea:	f7fd fe91 	bl	8001f10 <_ZN12SX1280Driver15SetFrequencyRegEm>
 80041ee:	e00e      	b.n	800420e <_ZN12Transmission9rxTimeoutEv+0x8c>
  } else {
    if (timeout > 5) {
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041f4:	2b05      	cmp	r3, #5
 80041f6:	d90a      	bls.n	800420e <_ZN12Transmission9rxTimeoutEv+0x8c>
      timeout = 0;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	67da      	str	r2, [r3, #124]	; 0x7c
      Radio.SetFrequencyReg(FHSSgetNextFreq());
 80041fe:	687c      	ldr	r4, [r7, #4]
 8004200:	f7ff fcbe 	bl	8003b80 <_ZL15FHSSgetNextFreqv>
 8004204:	0003      	movs	r3, r0
 8004206:	0019      	movs	r1, r3
 8004208:	0020      	movs	r0, r4
 800420a:	f7fd fe81 	bl	8001f10 <_ZN12SX1280Driver15SetFrequencyRegEm>
    }
  }

  timeout++;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004212:	1c5a      	adds	r2, r3, #1
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8004218:	46c0      	nop			; (mov r8, r8)
 800421a:	46bd      	mov	sp, r7
 800421c:	b003      	add	sp, #12
 800421e:	bd90      	pop	{r4, r7, pc}

08004220 <_ZN12Transmission10txTransmitEv>:

void Transmission::txTransmit() {
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Add payload to tx buffer */
  for (uint32_t i = 0; i < payloadLength - 1; i++) {
 8004228:	2300      	movs	r3, #0
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	228c      	movs	r2, #140	; 0x8c
 8004230:	589b      	ldr	r3, [r3, r2]
 8004232:	3b01      	subs	r3, #1
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	429a      	cmp	r2, r3
 8004238:	d20f      	bcs.n	800425a <_ZN12Transmission10txTransmitEv+0x3a>
    Radio.TXdataBuffer[i] = txData[i];
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	2190      	movs	r1, #144	; 0x90
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	18d3      	adds	r3, r2, r3
 8004242:	185b      	adds	r3, r3, r1
 8004244:	7819      	ldrb	r1, [r3, #0]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	18d3      	adds	r3, r2, r3
 800424c:	3308      	adds	r3, #8
 800424e:	1c0a      	adds	r2, r1, #0
 8004250:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < payloadLength - 1; i++) {
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3301      	adds	r3, #1
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	e7e8      	b.n	800422c <_ZN12Transmission10txTransmitEv+0xc>
  }

  /* Calculate CRC and store in last position */
  uint8_t crc = (uint8_t)crc32((const uint8_t *)txData, payloadLength - 1);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3390      	adds	r3, #144	; 0x90
 800425e:	001a      	movs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	218c      	movs	r1, #140	; 0x8c
 8004264:	585b      	ldr	r3, [r3, r1]
 8004266:	3b01      	subs	r3, #1
 8004268:	0019      	movs	r1, r3
 800426a:	0010      	movs	r0, r2
 800426c:	f7fd fa4a 	bl	8001704 <_Z5crc32PKhj>
 8004270:	0002      	movs	r2, r0
 8004272:	200b      	movs	r0, #11
 8004274:	183b      	adds	r3, r7, r0
 8004276:	701a      	strb	r2, [r3, #0]
  Radio.TXdataBuffer[payloadLength - 1] = linkXOR ^ crc;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2283      	movs	r2, #131	; 0x83
 800427c:	5c99      	ldrb	r1, [r3, r2]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	228c      	movs	r2, #140	; 0x8c
 8004282:	589b      	ldr	r3, [r3, r2]
 8004284:	3b01      	subs	r3, #1
 8004286:	183a      	adds	r2, r7, r0
 8004288:	7812      	ldrb	r2, [r2, #0]
 800428a:	404a      	eors	r2, r1
 800428c:	b2d1      	uxtb	r1, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	18d3      	adds	r3, r2, r3
 8004292:	1c0a      	adds	r2, r1, #0
 8004294:	721a      	strb	r2, [r3, #8]

  /* Transmit message */
  if (!busyTransmitting)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2282      	movs	r2, #130	; 0x82
 800429a:	5c9b      	ldrb	r3, [r3, r2]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2201      	movs	r2, #1
 80042a0:	4053      	eors	r3, r2
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <_ZN12Transmission10txTransmitEv+0x90>
    Radio.TXnb();
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	0018      	movs	r0, r3
 80042ac:	f7fd ff24 	bl	80020f8 <_ZN12SX1280Driver4TXnbEv>
}
 80042b0:	46c0      	nop			; (mov r8, r8)
 80042b2:	46bd      	mov	sp, r7
 80042b4:	b004      	add	sp, #16
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <_ZN12Transmission12getDirectionEv>:

transmission_direction_e Transmission::getDirection() {
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  return Settings.transmissionDirection;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	224c      	movs	r2, #76	; 0x4c
 80042c4:	5c9b      	ldrb	r3, [r3, r2]
}
 80042c6:	0018      	movs	r0, r3
 80042c8:	46bd      	mov	sp, r7
 80042ca:	b002      	add	sp, #8
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  if (pTransmission->getDirection() == TX) {
 80042d8:	4b0c      	ldr	r3, [pc, #48]	; (800430c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	0018      	movs	r0, r3
 80042de:	f7ff ffeb 	bl	80042b8 <_ZN12Transmission12getDirectionEv>
 80042e2:	0003      	movs	r3, r0
 80042e4:	425a      	negs	r2, r3
 80042e6:	4153      	adcs	r3, r2
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d005      	beq.n	80042fa <HAL_TIM_PeriodElapsedCallback+0x2a>
    pTransmission->txTransmit();
 80042ee:	4b07      	ldr	r3, [pc, #28]	; (800430c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	0018      	movs	r0, r3
 80042f4:	f7ff ff94 	bl	8004220 <_ZN12Transmission10txTransmitEv>
  } else {
    pTransmission->rxTimeout();
  }
}
 80042f8:	e004      	b.n	8004304 <HAL_TIM_PeriodElapsedCallback+0x34>
    pTransmission->rxTimeout();
 80042fa:	4b04      	ldr	r3, [pc, #16]	; (800430c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	0018      	movs	r0, r3
 8004300:	f7ff ff3f 	bl	8004182 <_ZN12Transmission9rxTimeoutEv>
}
 8004304:	46c0      	nop			; (mov r8, r8)
 8004306:	46bd      	mov	sp, r7
 8004308:	b002      	add	sp, #8
 800430a:	bd80      	pop	{r7, pc}
 800430c:	200000fc 	.word	0x200000fc

08004310 <_ZN6LQCALCILh30EE5resetEv>:

  /* Return N, the size of the LQ history */
  uint8_t getSize() const { return N; }

  /* Initialize and zero the history */
  void reset() {
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
    // count is intentonally not zeroed here to start LQ counting up from 0
    // after a failsafe, instead of down from 100
    LQ = 0;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	701a      	strb	r2, [r3, #0]
    index = 0;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	705a      	strb	r2, [r3, #1]
    LQmask = (1 << 0);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	605a      	str	r2, [r3, #4]
    for (uint8_t i = 0; i < (sizeof(LQArray) / sizeof(LQArray[0])); i++)
 800432a:	230f      	movs	r3, #15
 800432c:	18fb      	adds	r3, r7, r3
 800432e:	2200      	movs	r2, #0
 8004330:	701a      	strb	r2, [r3, #0]
 8004332:	200f      	movs	r0, #15
 8004334:	183b      	adds	r3, r7, r0
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10c      	bne.n	8004356 <_ZN6LQCALCILh30EE5resetEv+0x46>
      LQArray[i] = 0;
 800433c:	183b      	adds	r3, r7, r0
 800433e:	781a      	ldrb	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3202      	adds	r2, #2
 8004344:	0092      	lsls	r2, r2, #2
 8004346:	2100      	movs	r1, #0
 8004348:	50d1      	str	r1, [r2, r3]
    for (uint8_t i = 0; i < (sizeof(LQArray) / sizeof(LQArray[0])); i++)
 800434a:	183b      	adds	r3, r7, r0
 800434c:	781a      	ldrb	r2, [r3, #0]
 800434e:	183b      	adds	r3, r7, r0
 8004350:	3201      	adds	r2, #1
 8004352:	701a      	strb	r2, [r3, #0]
 8004354:	e7ed      	b.n	8004332 <_ZN6LQCALCILh30EE5resetEv+0x22>
  }
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	46bd      	mov	sp, r7
 800435a:	b004      	add	sp, #16
 800435c:	bd80      	pop	{r7, pc}

0800435e <_ZN6LQCALCILh30EE3incEv>:
  void inc() {
 800435e:	b580      	push	{r7, lr}
 8004360:	b082      	sub	sp, #8
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
    LQmask = LQmask << 1;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	005a      	lsls	r2, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	605a      	str	r2, [r3, #4]
    if (LQmask == 0) {
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d108      	bne.n	800438a <_ZN6LQCALCILh30EE3incEv+0x2c>
      LQmask = (1 << 0);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	605a      	str	r2, [r3, #4]
      index += 1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	785b      	ldrb	r3, [r3, #1]
 8004382:	3301      	adds	r3, #1
 8004384:	b2da      	uxtb	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	705a      	strb	r2, [r3, #1]
    if ((index == (N / 32)) && (LQmask & (1 << (N % 32)))) {
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	785b      	ldrb	r3, [r3, #1]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10b      	bne.n	80043aa <_ZN6LQCALCILh30EE3incEv+0x4c>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	2380      	movs	r3, #128	; 0x80
 8004398:	05db      	lsls	r3, r3, #23
 800439a:	4013      	ands	r3, r2
 800439c:	d005      	beq.n	80043aa <_ZN6LQCALCILh30EE3incEv+0x4c>
      index = 0;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	705a      	strb	r2, [r3, #1]
      LQmask = (1 << 0);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	605a      	str	r2, [r3, #4]
    if ((LQArray[index] & LQmask) != 0) {
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	785b      	ldrb	r3, [r3, #1]
 80043ae:	001a      	movs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3202      	adds	r2, #2
 80043b4:	0092      	lsls	r2, r2, #2
 80043b6:	58d2      	ldr	r2, [r2, r3]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	4013      	ands	r3, r2
 80043be:	d018      	beq.n	80043f2 <_ZN6LQCALCILh30EE3incEv+0x94>
      LQArray[index] &= ~LQmask;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	785b      	ldrb	r3, [r3, #1]
 80043c4:	001a      	movs	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3202      	adds	r2, #2
 80043ca:	0092      	lsls	r2, r2, #2
 80043cc:	58d2      	ldr	r2, [r2, r3]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	43db      	mvns	r3, r3
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	7849      	ldrb	r1, [r1, #1]
 80043d8:	0008      	movs	r0, r1
 80043da:	4013      	ands	r3, r2
 80043dc:	0019      	movs	r1, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	1c82      	adds	r2, r0, #2
 80043e2:	0092      	lsls	r2, r2, #2
 80043e4:	50d1      	str	r1, [r2, r3]
      LQ -= 1;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	701a      	strb	r2, [r3, #0]
    if (count < N)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	789b      	ldrb	r3, [r3, #2]
 80043f6:	2b1d      	cmp	r3, #29
 80043f8:	d805      	bhi.n	8004406 <_ZN6LQCALCILh30EE3incEv+0xa8>
      ++count;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	789b      	ldrb	r3, [r3, #2]
 80043fe:	3301      	adds	r3, #1
 8004400:	b2da      	uxtb	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	709a      	strb	r2, [r3, #2]
  }
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	46bd      	mov	sp, r7
 800440a:	b002      	add	sp, #8
 800440c:	bd80      	pop	{r7, pc}

0800440e <_ZN6LQCALCILh30EE3addEv>:
  void add() {
 800440e:	b580      	push	{r7, lr}
 8004410:	b082      	sub	sp, #8
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
    if (currentIsSet())
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	0018      	movs	r0, r3
 800441a:	f000 f81f 	bl	800445c <_ZNK6LQCALCILh30EE12currentIsSetEv>
 800441e:	1e03      	subs	r3, r0, #0
 8004420:	d118      	bne.n	8004454 <_ZN6LQCALCILh30EE3addEv+0x46>
    LQArray[index] |= LQmask;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	785b      	ldrb	r3, [r3, #1]
 8004426:	001a      	movs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3202      	adds	r2, #2
 800442c:	0092      	lsls	r2, r2, #2
 800442e:	58d2      	ldr	r2, [r2, r3]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	7849      	ldrb	r1, [r1, #1]
 8004438:	0008      	movs	r0, r1
 800443a:	431a      	orrs	r2, r3
 800443c:	0011      	movs	r1, r2
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	1c82      	adds	r2, r0, #2
 8004442:	0092      	lsls	r2, r2, #2
 8004444:	50d1      	str	r1, [r2, r3]
    LQ += 1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	3301      	adds	r3, #1
 800444c:	b2da      	uxtb	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	701a      	strb	r2, [r3, #0]
 8004452:	e000      	b.n	8004456 <_ZN6LQCALCILh30EE3addEv+0x48>
      return;
 8004454:	46c0      	nop			; (mov r8, r8)
  }
 8004456:	46bd      	mov	sp, r7
 8004458:	b002      	add	sp, #8
 800445a:	bd80      	pop	{r7, pc}

0800445c <_ZNK6LQCALCILh30EE12currentIsSetEv>:

  /*  Return true if the current period was add()ed */
  bool currentIsSet() const { return LQArray[index] & LQmask; }
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	785b      	ldrb	r3, [r3, #1]
 8004468:	001a      	movs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3202      	adds	r2, #2
 800446e:	0092      	lsls	r2, r2, #2
 8004470:	58d2      	ldr	r2, [r2, r3]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	4013      	ands	r3, r2
 8004478:	1e5a      	subs	r2, r3, #1
 800447a:	4193      	sbcs	r3, r2
 800447c:	b2db      	uxtb	r3, r3
 800447e:	0018      	movs	r0, r3
 8004480:	46bd      	mov	sp, r7
 8004482:	b002      	add	sp, #8
 8004484:	bd80      	pop	{r7, pc}
	...

08004488 <_ZN20TransmissionSettingsC1Ev>:

#include "SX1280Driver/SX1280_Regs.h"
#include "telemetry_reg.h"
#include <cstdint>

class TransmissionSettings {
 8004488:	b590      	push	{r4, r7, lr}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	701a      	strb	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	705a      	strb	r2, [r3, #1]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2222      	movs	r2, #34	; 0x22
 80044a0:	709a      	strb	r2, [r3, #2]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2214      	movs	r2, #20
 80044a6:	70da      	strb	r2, [r3, #3]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	731a      	strb	r2, [r3, #12]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	611a      	str	r2, [r3, #16]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a05      	ldr	r2, [pc, #20]	; (80044cc <_ZN20TransmissionSettingsC1Ev+0x44>)
 80044b8:	3314      	adds	r3, #20
 80044ba:	ca13      	ldmia	r2!, {r0, r1, r4}
 80044bc:	c313      	stmia	r3!, {r0, r1, r4}
 80044be:	ca13      	ldmia	r2!, {r0, r1, r4}
 80044c0:	c313      	stmia	r3!, {r0, r1, r4}
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	0018      	movs	r0, r3
 80044c6:	46bd      	mov	sp, r7
 80044c8:	b003      	add	sp, #12
 80044ca:	bd90      	pop	{r4, r7, pc}
 80044cc:	0800b75c 	.word	0x0800b75c

080044d0 <_ZN12TransmissionC1Ev>:
class Transmission {
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	0018      	movs	r0, r3
 80044dc:	f7fd f9ba 	bl	8001854 <_ZN12SX1280DriverC1Ev>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3340      	adds	r3, #64	; 0x40
 80044e4:	0018      	movs	r0, r3
 80044e6:	f000 f81d 	bl	8004524 <_ZN6LQCALCILh30EEC1Ev>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	334c      	adds	r3, #76	; 0x4c
 80044ee:	0018      	movs	r0, r3
 80044f0:	f7ff ffca 	bl	8004488 <_ZN20TransmissionSettingsC1Ev>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	67da      	str	r2, [r3, #124]	; 0x7c
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2280      	movs	r2, #128	; 0x80
 80044fe:	2100      	movs	r1, #0
 8004500:	5499      	strb	r1, [r3, r2]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2281      	movs	r2, #129	; 0x81
 8004506:	2102      	movs	r1, #2
 8004508:	5499      	strb	r1, [r3, r2]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2288      	movs	r2, #136	; 0x88
 800450e:	2100      	movs	r1, #0
 8004510:	5499      	strb	r1, [r3, r2]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	228c      	movs	r2, #140	; 0x8c
 8004516:	2100      	movs	r1, #0
 8004518:	5099      	str	r1, [r3, r2]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	0018      	movs	r0, r3
 800451e:	46bd      	mov	sp, r7
 8004520:	b002      	add	sp, #8
 8004522:	bd80      	pop	{r7, pc}

08004524 <_ZN6LQCALCILh30EEC1Ev>:
  LQCALC(void) {
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
    reset();
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	0018      	movs	r0, r3
 8004530:	f7ff feee 	bl	8004310 <_ZN6LQCALCILh30EE5resetEv>
    count = 1;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	709a      	strb	r2, [r3, #2]
  }
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	0018      	movs	r0, r3
 800453e:	46bd      	mov	sp, r7
 8004540:	b002      	add	sp, #8
 8004542:	bd80      	pop	{r7, pc}

08004544 <_ZN10RingBufferIhLj128EEC1Ev>:
  RingBuffer() {
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
      _numElements = 0;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2284      	movs	r2, #132	; 0x84
 8004550:	2100      	movs	r1, #0
 8004552:	5099      	str	r1, [r3, r2]
      _head = 0;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2280      	movs	r2, #128	; 0x80
 8004558:	2100      	movs	r1, #0
 800455a:	5099      	str	r1, [r3, r2]
  }
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	0018      	movs	r0, r3
 8004560:	46bd      	mov	sp, r7
 8004562:	b002      	add	sp, #8
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <_Z41__static_initialization_and_destruction_0ii>:
#include "common.h"

Transmission Link;

RingBuffer<uint8_t, 128> Uart1Buffer;
RingBuffer<uint8_t, 128> Uart2Buffer;
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d10f      	bne.n	8004598 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	4a09      	ldr	r2, [pc, #36]	; (80045a0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d10b      	bne.n	8004598 <_Z41__static_initialization_and_destruction_0ii+0x30>
Transmission Link;
 8004580:	4b08      	ldr	r3, [pc, #32]	; (80045a4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8004582:	0018      	movs	r0, r3
 8004584:	f7ff ffa4 	bl	80044d0 <_ZN12TransmissionC1Ev>
RingBuffer<uint8_t, 128> Uart1Buffer;
 8004588:	4b07      	ldr	r3, [pc, #28]	; (80045a8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800458a:	0018      	movs	r0, r3
 800458c:	f7ff ffda 	bl	8004544 <_ZN10RingBufferIhLj128EEC1Ev>
RingBuffer<uint8_t, 128> Uart2Buffer;
 8004590:	4b06      	ldr	r3, [pc, #24]	; (80045ac <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8004592:	0018      	movs	r0, r3
 8004594:	f7ff ffd6 	bl	8004544 <_ZN10RingBufferIhLj128EEC1Ev>
 8004598:	46c0      	nop			; (mov r8, r8)
 800459a:	46bd      	mov	sp, r7
 800459c:	b002      	add	sp, #8
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	0000ffff 	.word	0x0000ffff
 80045a4:	20000100 	.word	0x20000100
 80045a8:	200001b8 	.word	0x200001b8
 80045ac:	20000240 	.word	0x20000240

080045b0 <_GLOBAL__sub_I_Link>:
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	4b03      	ldr	r3, [pc, #12]	; (80045c4 <_GLOBAL__sub_I_Link+0x14>)
 80045b6:	0019      	movs	r1, r3
 80045b8:	2001      	movs	r0, #1
 80045ba:	f7ff ffd5 	bl	8004568 <_Z41__static_initialization_and_destruction_0ii>
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	0000ffff 	.word	0x0000ffff

080045c8 <_ZNK15TinyGPSLocation7isValidEv>:
  bool isValid() const { return valid; }
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	0018      	movs	r0, r3
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b002      	add	sp, #8
 80045da:	bd80      	pop	{r7, pc}

080045dc <_Z8gpsSetupv>:

TinyGPSPlus gps;

extern UART_HandleTypeDef huart1;

void gpsSetup() {
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0

  uint8_t command[20];

  /* Request UART speed of 115200 */
  sprintf((char *)command, "$PCAS01,5*19\r\n");
 80045e2:	4a23      	ldr	r2, [pc, #140]	; (8004670 <_Z8gpsSetupv+0x94>)
 80045e4:	1d3b      	adds	r3, r7, #4
 80045e6:	0011      	movs	r1, r2
 80045e8:	0018      	movs	r0, r3
 80045ea:	f006 fba7 	bl	800ad3c <siprintf>
  HAL_UART_Transmit(&huart1, command, 14, 100);
 80045ee:	1d39      	adds	r1, r7, #4
 80045f0:	4820      	ldr	r0, [pc, #128]	; (8004674 <_Z8gpsSetupv+0x98>)
 80045f2:	2364      	movs	r3, #100	; 0x64
 80045f4:	220e      	movs	r2, #14
 80045f6:	f004 fb37 	bl	8008c68 <HAL_UART_Transmit>

  HAL_Delay(200);
 80045fa:	20c8      	movs	r0, #200	; 0xc8
 80045fc:	f001 f88a 	bl	8005714 <HAL_Delay>

  /* Change bus speed to 115200 */
  USART1->CR1 &= ~(USART_CR1_UE);
 8004600:	4b1d      	ldr	r3, [pc, #116]	; (8004678 <_Z8gpsSetupv+0x9c>)
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	4b1c      	ldr	r3, [pc, #112]	; (8004678 <_Z8gpsSetupv+0x9c>)
 8004606:	2101      	movs	r1, #1
 8004608:	438a      	bics	r2, r1
 800460a:	601a      	str	r2, [r3, #0]
  USART1->BRR = 417; // Set baud to 115200
 800460c:	4b1a      	ldr	r3, [pc, #104]	; (8004678 <_Z8gpsSetupv+0x9c>)
 800460e:	22a2      	movs	r2, #162	; 0xa2
 8004610:	32ff      	adds	r2, #255	; 0xff
 8004612:	60da      	str	r2, [r3, #12]
  USART1->CR1 |= USART_CR1_UE;
 8004614:	4b18      	ldr	r3, [pc, #96]	; (8004678 <_Z8gpsSetupv+0x9c>)
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	4b17      	ldr	r3, [pc, #92]	; (8004678 <_Z8gpsSetupv+0x9c>)
 800461a:	2101      	movs	r1, #1
 800461c:	430a      	orrs	r2, r1
 800461e:	601a      	str	r2, [r3, #0]

  HAL_Delay(200);
 8004620:	20c8      	movs	r0, #200	; 0xc8
 8004622:	f001 f877 	bl	8005714 <HAL_Delay>

  /* Request 10Hz update rate */
  sprintf((char *)command, "$PCAS02,100*1E\r\n");
 8004626:	4a15      	ldr	r2, [pc, #84]	; (800467c <_Z8gpsSetupv+0xa0>)
 8004628:	1d3b      	adds	r3, r7, #4
 800462a:	0011      	movs	r1, r2
 800462c:	0018      	movs	r0, r3
 800462e:	f006 fb85 	bl	800ad3c <siprintf>
  HAL_UART_Transmit(&huart1, command, 16, 100);
 8004632:	1d39      	adds	r1, r7, #4
 8004634:	480f      	ldr	r0, [pc, #60]	; (8004674 <_Z8gpsSetupv+0x98>)
 8004636:	2364      	movs	r3, #100	; 0x64
 8004638:	2210      	movs	r2, #16
 800463a:	f004 fb15 	bl	8008c68 <HAL_UART_Transmit>

  HAL_Delay(10);
 800463e:	200a      	movs	r0, #10
 8004640:	f001 f868 	bl	8005714 <HAL_Delay>

  /* Request airbourne <4g mode*/
  sprintf((char *)command, "$PCAS11,7*1A\r\n");
 8004644:	4a0e      	ldr	r2, [pc, #56]	; (8004680 <_Z8gpsSetupv+0xa4>)
 8004646:	1d3b      	adds	r3, r7, #4
 8004648:	0011      	movs	r1, r2
 800464a:	0018      	movs	r0, r3
 800464c:	f006 fb76 	bl	800ad3c <siprintf>
  HAL_UART_Transmit(&huart1, command, 14, 100);
 8004650:	1d39      	adds	r1, r7, #4
 8004652:	4808      	ldr	r0, [pc, #32]	; (8004674 <_Z8gpsSetupv+0x98>)
 8004654:	2364      	movs	r3, #100	; 0x64
 8004656:	220e      	movs	r2, #14
 8004658:	f004 fb06 	bl	8008c68 <HAL_UART_Transmit>

  /* Start receiving data from the module */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&c1, 1);
 800465c:	4909      	ldr	r1, [pc, #36]	; (8004684 <_Z8gpsSetupv+0xa8>)
 800465e:	4b05      	ldr	r3, [pc, #20]	; (8004674 <_Z8gpsSetupv+0x98>)
 8004660:	2201      	movs	r2, #1
 8004662:	0018      	movs	r0, r3
 8004664:	f004 fbac 	bl	8008dc0 <HAL_UART_Receive_IT>
}
 8004668:	46c0      	nop			; (mov r8, r8)
 800466a:	46bd      	mov	sp, r7
 800466c:	b006      	add	sp, #24
 800466e:	bd80      	pop	{r7, pc}
 8004670:	0800b774 	.word	0x0800b774
 8004674:	200004bc 	.word	0x200004bc
 8004678:	40013800 	.word	0x40013800
 800467c:	0800b784 	.word	0x0800b784
 8004680:	0800b798 	.word	0x0800b798
 8004684:	200002c8 	.word	0x200002c8

08004688 <_Z6gpsRunv>:

bool gpsRun() {
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  if (HAL_GetTick() > (lr1 + 100)) {
 800468c:	f001 f838 	bl	8005700 <HAL_GetTick>
 8004690:	0002      	movs	r2, r0
 8004692:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <_Z6gpsRunv+0x38>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3364      	adds	r3, #100	; 0x64
 8004698:	4293      	cmp	r3, r2
 800469a:	419b      	sbcs	r3, r3
 800469c:	425b      	negs	r3, r3
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d005      	beq.n	80046b0 <_Z6gpsRunv+0x28>
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&c1, 1);
 80046a4:	4907      	ldr	r1, [pc, #28]	; (80046c4 <_Z6gpsRunv+0x3c>)
 80046a6:	4b08      	ldr	r3, [pc, #32]	; (80046c8 <_Z6gpsRunv+0x40>)
 80046a8:	2201      	movs	r2, #1
 80046aa:	0018      	movs	r0, r3
 80046ac:	f004 fb88 	bl	8008dc0 <HAL_UART_Receive_IT>
  }

  return gps.location.isValid();
 80046b0:	4b06      	ldr	r3, [pc, #24]	; (80046cc <_Z6gpsRunv+0x44>)
 80046b2:	0018      	movs	r0, r3
 80046b4:	f7ff ff88 	bl	80045c8 <_ZNK15TinyGPSLocation7isValidEv>
 80046b8:	0003      	movs	r3, r0
}
 80046ba:	0018      	movs	r0, r3
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	200002cc 	.word	0x200002cc
 80046c4:	200002c8 	.word	0x200002c8
 80046c8:	200004bc 	.word	0x200004bc
 80046cc:	200002d0 	.word	0x200002d0

080046d0 <_Z41__static_initialization_and_destruction_0ii>:
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d107      	bne.n	80046f0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	4a05      	ldr	r2, [pc, #20]	; (80046f8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d103      	bne.n	80046f0 <_Z41__static_initialization_and_destruction_0ii+0x20>
TinyGPSPlus gps;
 80046e8:	4b04      	ldr	r3, [pc, #16]	; (80046fc <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80046ea:	0018      	movs	r0, r3
 80046ec:	f7fe fc84 	bl	8002ff8 <_ZN11TinyGPSPlusC1Ev>
}
 80046f0:	46c0      	nop			; (mov r8, r8)
 80046f2:	46bd      	mov	sp, r7
 80046f4:	b002      	add	sp, #8
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	0000ffff 	.word	0x0000ffff
 80046fc:	200002d0 	.word	0x200002d0

08004700 <_GLOBAL__sub_I_c1>:
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
 8004704:	4b03      	ldr	r3, [pc, #12]	; (8004714 <_GLOBAL__sub_I_c1+0x14>)
 8004706:	0019      	movs	r1, r3
 8004708:	2001      	movs	r0, #1
 800470a:	f7ff ffe1 	bl	80046d0 <_Z41__static_initialization_and_destruction_0ii>
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	46c0      	nop			; (mov r8, r8)
 8004714:	0000ffff 	.word	0x0000ffff

08004718 <_ZNK15TinyGPSLocation9isUpdatedEv>:
  bool isUpdated() const { return updated; }
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	785b      	ldrb	r3, [r3, #1]
 8004724:	0018      	movs	r0, r3
 8004726:	46bd      	mov	sp, r7
 8004728:	b002      	add	sp, #8
 800472a:	bd80      	pop	{r7, pc}

0800472c <_ZNK14TinyGPSInteger7isValidEv>:
  bool isValid() const { return valid; }
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	0018      	movs	r0, r3
 800473a:	46bd      	mov	sp, r7
 800473c:	b002      	add	sp, #8
 800473e:	bd80      	pop	{r7, pc}

08004740 <_ZNK14TinyGPSInteger9isUpdatedEv>:
  bool isUpdated() const { return updated; }
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	785b      	ldrb	r3, [r3, #1]
 800474c:	0018      	movs	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	b002      	add	sp, #8
 8004752:	bd80      	pop	{r7, pc}

08004754 <_ZN14TinyGPSInteger5valueEv>:
  uint32_t value() {
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
    updated = false;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	705a      	strb	r2, [r3, #1]
    return val;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689b      	ldr	r3, [r3, #8]
  }
 8004766:	0018      	movs	r0, r3
 8004768:	46bd      	mov	sp, r7
 800476a:	b002      	add	sp, #8
 800476c:	bd80      	pop	{r7, pc}
	...

08004770 <_ZN6ParserC1Ev>:
class Parser {
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	615a      	str	r2, [r3, #20]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	4252      	negs	r2, r2
 8004784:	619a      	str	r2, [r3, #24]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	771a      	strb	r2, [r3, #28]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a06      	ldr	r2, [pc, #24]	; (80047a8 <_ZN6ParserC1Ev+0x38>)
 8004790:	3320      	adds	r3, #32
 8004792:	0011      	movs	r1, r2
 8004794:	2270      	movs	r2, #112	; 0x70
 8004796:	0018      	movs	r0, r3
 8004798:	f006 fabe 	bl	800ad18 <memcpy>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	0018      	movs	r0, r3
 80047a0:	46bd      	mov	sp, r7
 80047a2:	b002      	add	sp, #8
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	0800b7a8 	.word	0x0800b7a8

080047ac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80047ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ae:	b091      	sub	sp, #68	; 0x44
 80047b0:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 80047b2:	f000 ff29 	bl	8005608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80047b6:	f000 f94d 	bl	8004a54 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80047ba:	f000 fb81 	bl	8004ec0 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 80047be:	f000 f9af 	bl	8004b20 <_ZL12MX_ADC1_Initv>
  MX_SPI1_Init();
 80047c2:	f000 fa1f 	bl	8004c04 <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 80047c6:	f000 fabf 	bl	8004d48 <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 80047ca:	f000 fb1b 	bl	8004e04 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 80047ce:	f000 fa5b 	bl	8004c88 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  HAL_Delay(4000);
 80047d2:	23fa      	movs	r3, #250	; 0xfa
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	0018      	movs	r0, r3
 80047d8:	f000 ff9c 	bl	8005714 <HAL_Delay>
  start_serial();
 80047dc:	f7fe faa6 	bl	8002d2c <_Z12start_serialv>
  gpsSetup();
 80047e0:	f7ff fefc 	bl	80045dc <_Z8gpsSetupv>

  while (Link.begin(&htim2) == false) {
 80047e4:	4a92      	ldr	r2, [pc, #584]	; (8004a30 <main+0x284>)
 80047e6:	4b93      	ldr	r3, [pc, #588]	; (8004a34 <main+0x288>)
 80047e8:	0011      	movs	r1, r2
 80047ea:	0018      	movs	r0, r3
 80047ec:	f7ff fa0a 	bl	8003c04 <_ZN12Transmission5beginEP17TIM_HandleTypeDef>
 80047f0:	0003      	movs	r3, r0
 80047f2:	425a      	negs	r2, r3
 80047f4:	4153      	adcs	r3, r2
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <main+0x58>
    HAL_Delay(10);
 80047fc:	200a      	movs	r0, #10
 80047fe:	f000 ff89 	bl	8005714 <HAL_Delay>
  while (Link.begin(&htim2) == false) {
 8004802:	e7ef      	b.n	80047e4 <main+0x38>
  }

  uint8_t oldGpsValue = 20;
 8004804:	233f      	movs	r3, #63	; 0x3f
 8004806:	18fb      	adds	r3, r7, r3
 8004808:	2214      	movs	r2, #20
 800480a:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	uint8_t uartOutBuffer[20];

    gpsRun();
 800480c:	f7ff ff3c 	bl	8004688 <_Z6gpsRunv>
    /* Transmit GPS info */

    if (!Uart1Buffer.isEmpty()) {
 8004810:	4b89      	ldr	r3, [pc, #548]	; (8004a38 <main+0x28c>)
 8004812:	0018      	movs	r0, r3
 8004814:	f000 fc0d 	bl	8005032 <_ZNK10RingBufferIhLj128EE7isEmptyEv>
 8004818:	0003      	movs	r3, r0
 800481a:	001a      	movs	r2, r3
 800481c:	2301      	movs	r3, #1
 800481e:	4053      	eors	r3, r2
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00d      	beq.n	8004842 <main+0x96>
      uint8_t data;
      Uart1Buffer.pop(&data);
 8004826:	2427      	movs	r4, #39	; 0x27
 8004828:	193a      	adds	r2, r7, r4
 800482a:	4b83      	ldr	r3, [pc, #524]	; (8004a38 <main+0x28c>)
 800482c:	0011      	movs	r1, r2
 800482e:	0018      	movs	r0, r3
 8004830:	f000 fc11 	bl	8005056 <_ZN10RingBufferIhLj128EE3popEPh>
      gps.encode(data);
 8004834:	193b      	adds	r3, r7, r4
 8004836:	781a      	ldrb	r2, [r3, #0]
 8004838:	4b80      	ldr	r3, [pc, #512]	; (8004a3c <main+0x290>)
 800483a:	0011      	movs	r1, r2
 800483c:	0018      	movs	r0, r3
 800483e:	f7fe fc3f 	bl	80030c0 <_ZN11TinyGPSPlus6encodeEc>
    }

    if (!Uart2Buffer.isEmpty()) {
 8004842:	4b7f      	ldr	r3, [pc, #508]	; (8004a40 <main+0x294>)
 8004844:	0018      	movs	r0, r3
 8004846:	f000 fbf4 	bl	8005032 <_ZNK10RingBufferIhLj128EE7isEmptyEv>
 800484a:	0003      	movs	r3, r0
 800484c:	001a      	movs	r2, r3
 800484e:	2301      	movs	r3, #1
 8004850:	4053      	eors	r3, r2
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00d      	beq.n	8004874 <main+0xc8>
      uint8_t data;
      Uart2Buffer.pop(&data);
 8004858:	2426      	movs	r4, #38	; 0x26
 800485a:	193a      	adds	r2, r7, r4
 800485c:	4b78      	ldr	r3, [pc, #480]	; (8004a40 <main+0x294>)
 800485e:	0011      	movs	r1, r2
 8004860:	0018      	movs	r0, r3
 8004862:	f000 fbf8 	bl	8005056 <_ZN10RingBufferIhLj128EE3popEPh>
      p.process(data);
 8004866:	193b      	adds	r3, r7, r4
 8004868:	781a      	ldrb	r2, [r3, #0]
 800486a:	4b76      	ldr	r3, [pc, #472]	; (8004a44 <main+0x298>)
 800486c:	0011      	movs	r1, r2
 800486e:	0018      	movs	r0, r3
 8004870:	f7fe f8e3 	bl	8002a3a <_ZN6Parser7processEh>
    }

    if (HAL_GetTick() > (lr2 + 500)) {
 8004874:	f000 ff44 	bl	8005700 <HAL_GetTick>
 8004878:	0002      	movs	r2, r0
 800487a:	4b73      	ldr	r3, [pc, #460]	; (8004a48 <main+0x29c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	33f5      	adds	r3, #245	; 0xf5
 8004880:	33ff      	adds	r3, #255	; 0xff
 8004882:	4293      	cmp	r3, r2
 8004884:	419b      	sbcs	r3, r3
 8004886:	425b      	negs	r3, r3
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <main+0xe6>
      start_serial();
 800488e:	f7fe fa4d 	bl	8002d2c <_Z12start_serialv>
    }

    if (Link.available()) {
 8004892:	4b68      	ldr	r3, [pc, #416]	; (8004a34 <main+0x288>)
 8004894:	0018      	movs	r0, r3
 8004896:	f7ff fa98 	bl	8003dca <_ZN12Transmission9availableEv>
 800489a:	1e03      	subs	r3, r0, #0
 800489c:	d028      	beq.n	80048f0 <main+0x144>
      uint8_t rx_data[16];
      Link.readBytes(rx_data, 16);
 800489e:	2414      	movs	r4, #20
 80048a0:	1939      	adds	r1, r7, r4
 80048a2:	4b64      	ldr	r3, [pc, #400]	; (8004a34 <main+0x288>)
 80048a4:	2210      	movs	r2, #16
 80048a6:	0018      	movs	r0, r3
 80048a8:	f7ff fa9b 	bl	8003de2 <_ZN12Transmission9readBytesEPhm>

      uartOutBuffer[0] = CMD_RX;
 80048ac:	2528      	movs	r5, #40	; 0x28
 80048ae:	197b      	adds	r3, r7, r5
 80048b0:	2231      	movs	r2, #49	; 0x31
 80048b2:	701a      	strb	r2, [r3, #0]
      uartOutBuffer[1] = 16;
 80048b4:	197b      	adds	r3, r7, r5
 80048b6:	2210      	movs	r2, #16
 80048b8:	705a      	strb	r2, [r3, #1]
      memcpy(&uartOutBuffer[2], rx_data, 16);
 80048ba:	197b      	adds	r3, r7, r5
 80048bc:	2202      	movs	r2, #2
 80048be:	1939      	adds	r1, r7, r4
 80048c0:	189b      	adds	r3, r3, r2
 80048c2:	2210      	movs	r2, #16
 80048c4:	0018      	movs	r0, r3
 80048c6:	f006 fa27 	bl	800ad18 <memcpy>
      uint8_t crc = crc8(uartOutBuffer, 18);
 80048ca:	263e      	movs	r6, #62	; 0x3e
 80048cc:	19bc      	adds	r4, r7, r6
 80048ce:	197b      	adds	r3, r7, r5
 80048d0:	2112      	movs	r1, #18
 80048d2:	0018      	movs	r0, r3
 80048d4:	f7fc ff42 	bl	800175c <_Z4crc8PKhj>
 80048d8:	0003      	movs	r3, r0
 80048da:	7023      	strb	r3, [r4, #0]
      uartOutBuffer[18] = crc;
 80048dc:	197b      	adds	r3, r7, r5
 80048de:	19ba      	adds	r2, r7, r6
 80048e0:	7812      	ldrb	r2, [r2, #0]
 80048e2:	749a      	strb	r2, [r3, #18]

      HAL_UART_Transmit(&huart2, uartOutBuffer, 19, 2);
 80048e4:	1979      	adds	r1, r7, r5
 80048e6:	4859      	ldr	r0, [pc, #356]	; (8004a4c <main+0x2a0>)
 80048e8:	2302      	movs	r3, #2
 80048ea:	2213      	movs	r2, #19
 80048ec:	f004 f9bc 	bl	8008c68 <HAL_UART_Transmit>
    }

    if(gps.location.isValid() && gps.location.isUpdated()){
 80048f0:	4b52      	ldr	r3, [pc, #328]	; (8004a3c <main+0x290>)
 80048f2:	0018      	movs	r0, r3
 80048f4:	f7ff fe68 	bl	80045c8 <_ZNK15TinyGPSLocation7isValidEv>
 80048f8:	1e03      	subs	r3, r0, #0
 80048fa:	d007      	beq.n	800490c <main+0x160>
 80048fc:	4b4f      	ldr	r3, [pc, #316]	; (8004a3c <main+0x290>)
 80048fe:	0018      	movs	r0, r3
 8004900:	f7ff ff0a 	bl	8004718 <_ZNK15TinyGPSLocation9isUpdatedEv>
 8004904:	1e03      	subs	r3, r0, #0
 8004906:	d001      	beq.n	800490c <main+0x160>
 8004908:	2301      	movs	r3, #1
 800490a:	e000      	b.n	800490e <main+0x162>
 800490c:	2300      	movs	r3, #0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d041      	beq.n	8004996 <main+0x1ea>
    	double lat = gps.location.lat();
 8004912:	4b4a      	ldr	r3, [pc, #296]	; (8004a3c <main+0x290>)
 8004914:	0018      	movs	r0, r3
 8004916:	f7fe ffab 	bl	8003870 <_ZN15TinyGPSLocation3latEv>
 800491a:	0002      	movs	r2, r0
 800491c:	000b      	movs	r3, r1
 800491e:	60ba      	str	r2, [r7, #8]
 8004920:	60fb      	str	r3, [r7, #12]
    	double lng = gps.location.lng();
 8004922:	4b46      	ldr	r3, [pc, #280]	; (8004a3c <main+0x290>)
 8004924:	0018      	movs	r0, r3
 8004926:	f7fe ffdb 	bl	80038e0 <_ZN15TinyGPSLocation3lngEv>
 800492a:	0002      	movs	r2, r0
 800492c:	000b      	movs	r3, r1
 800492e:	603a      	str	r2, [r7, #0]
 8004930:	607b      	str	r3, [r7, #4]

    	if(lat != 0){
 8004932:	68b8      	ldr	r0, [r7, #8]
 8004934:	68f9      	ldr	r1, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	2300      	movs	r3, #0
 800493a:	f7fb fd7d 	bl	8000438 <__aeabi_dcmpeq>
 800493e:	1e03      	subs	r3, r0, #0
 8004940:	d129      	bne.n	8004996 <main+0x1ea>
    		uartOutBuffer[0] = CMD_GNSS_LOC;
 8004942:	2528      	movs	r5, #40	; 0x28
 8004944:	197b      	adds	r3, r7, r5
 8004946:	2240      	movs	r2, #64	; 0x40
 8004948:	701a      	strb	r2, [r3, #0]
			uartOutBuffer[1] = 16;
 800494a:	197b      	adds	r3, r7, r5
 800494c:	2210      	movs	r2, #16
 800494e:	705a      	strb	r2, [r3, #1]
			memcpy(&uartOutBuffer[2], &lat, 8);
 8004950:	2308      	movs	r3, #8
 8004952:	18f9      	adds	r1, r7, r3
 8004954:	197b      	adds	r3, r7, r5
 8004956:	3302      	adds	r3, #2
 8004958:	2208      	movs	r2, #8
 800495a:	0018      	movs	r0, r3
 800495c:	f006 f9dc 	bl	800ad18 <memcpy>
			memcpy(&uartOutBuffer[2+8], &lng, 8);
 8004960:	0039      	movs	r1, r7
 8004962:	197b      	adds	r3, r7, r5
 8004964:	330a      	adds	r3, #10
 8004966:	2208      	movs	r2, #8
 8004968:	0018      	movs	r0, r3
 800496a:	f006 f9d5 	bl	800ad18 <memcpy>
			uint8_t crc = crc8(uartOutBuffer, 18);
 800496e:	263d      	movs	r6, #61	; 0x3d
 8004970:	19bc      	adds	r4, r7, r6
 8004972:	197b      	adds	r3, r7, r5
 8004974:	2112      	movs	r1, #18
 8004976:	0018      	movs	r0, r3
 8004978:	f7fc fef0 	bl	800175c <_Z4crc8PKhj>
 800497c:	0003      	movs	r3, r0
 800497e:	7023      	strb	r3, [r4, #0]
			uartOutBuffer[18] = crc;
 8004980:	0029      	movs	r1, r5
 8004982:	187b      	adds	r3, r7, r1
 8004984:	19ba      	adds	r2, r7, r6
 8004986:	7812      	ldrb	r2, [r2, #0]
 8004988:	749a      	strb	r2, [r3, #18]

			HAL_UART_Transmit(&huart2, uartOutBuffer, 19, 2);
 800498a:	1879      	adds	r1, r7, r1
 800498c:	482f      	ldr	r0, [pc, #188]	; (8004a4c <main+0x2a0>)
 800498e:	2302      	movs	r3, #2
 8004990:	2213      	movs	r2, #19
 8004992:	f004 f969 	bl	8008c68 <HAL_UART_Transmit>
    	}
    }


    if(gps.satellites.isValid() && gps.satellites.isUpdated()){
 8004996:	4b2e      	ldr	r3, [pc, #184]	; (8004a50 <main+0x2a4>)
 8004998:	0018      	movs	r0, r3
 800499a:	f7ff fec7 	bl	800472c <_ZNK14TinyGPSInteger7isValidEv>
 800499e:	1e03      	subs	r3, r0, #0
 80049a0:	d007      	beq.n	80049b2 <main+0x206>
 80049a2:	4b2b      	ldr	r3, [pc, #172]	; (8004a50 <main+0x2a4>)
 80049a4:	0018      	movs	r0, r3
 80049a6:	f7ff fecb 	bl	8004740 <_ZNK14TinyGPSInteger9isUpdatedEv>
 80049aa:	1e03      	subs	r3, r0, #0
 80049ac:	d001      	beq.n	80049b2 <main+0x206>
 80049ae:	2301      	movs	r3, #1
 80049b0:	e000      	b.n	80049b4 <main+0x208>
 80049b2:	2300      	movs	r3, #0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d100      	bne.n	80049ba <main+0x20e>
 80049b8:	e728      	b.n	800480c <main+0x60>

    	if(oldGpsValue != gps.satellites.value()) {
 80049ba:	253f      	movs	r5, #63	; 0x3f
 80049bc:	197b      	adds	r3, r7, r5
 80049be:	781c      	ldrb	r4, [r3, #0]
 80049c0:	4b23      	ldr	r3, [pc, #140]	; (8004a50 <main+0x2a4>)
 80049c2:	0018      	movs	r0, r3
 80049c4:	f7ff fec6 	bl	8004754 <_ZN14TinyGPSInteger5valueEv>
 80049c8:	0003      	movs	r3, r0
 80049ca:	1ae3      	subs	r3, r4, r3
 80049cc:	1e5a      	subs	r2, r3, #1
 80049ce:	4193      	sbcs	r3, r2
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d100      	bne.n	80049d8 <main+0x22c>
 80049d6:	e719      	b.n	800480c <main+0x60>
    		oldGpsValue = gps.satellites.value();
 80049d8:	4b1d      	ldr	r3, [pc, #116]	; (8004a50 <main+0x2a4>)
 80049da:	0018      	movs	r0, r3
 80049dc:	f7ff feba 	bl	8004754 <_ZN14TinyGPSInteger5valueEv>
 80049e0:	0002      	movs	r2, r0
 80049e2:	197b      	adds	r3, r7, r5
 80049e4:	701a      	strb	r2, [r3, #0]
    		uartOutBuffer[0] = CMD_GNSS_INFO;
 80049e6:	2428      	movs	r4, #40	; 0x28
 80049e8:	193b      	adds	r3, r7, r4
 80049ea:	2242      	movs	r2, #66	; 0x42
 80049ec:	701a      	strb	r2, [r3, #0]
			uartOutBuffer[1] = 1;
 80049ee:	193b      	adds	r3, r7, r4
 80049f0:	2201      	movs	r2, #1
 80049f2:	705a      	strb	r2, [r3, #1]
			uartOutBuffer[2] = gps.satellites.value();
 80049f4:	4b16      	ldr	r3, [pc, #88]	; (8004a50 <main+0x2a4>)
 80049f6:	0018      	movs	r0, r3
 80049f8:	f7ff feac 	bl	8004754 <_ZN14TinyGPSInteger5valueEv>
 80049fc:	0003      	movs	r3, r0
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	0025      	movs	r5, r4
 8004a02:	197b      	adds	r3, r7, r5
 8004a04:	709a      	strb	r2, [r3, #2]
			uint8_t crc = crc8(uartOutBuffer, 3);
 8004a06:	263c      	movs	r6, #60	; 0x3c
 8004a08:	19bc      	adds	r4, r7, r6
 8004a0a:	197b      	adds	r3, r7, r5
 8004a0c:	2103      	movs	r1, #3
 8004a0e:	0018      	movs	r0, r3
 8004a10:	f7fc fea4 	bl	800175c <_Z4crc8PKhj>
 8004a14:	0003      	movs	r3, r0
 8004a16:	7023      	strb	r3, [r4, #0]
			uartOutBuffer[3] = crc;
 8004a18:	002c      	movs	r4, r5
 8004a1a:	193b      	adds	r3, r7, r4
 8004a1c:	19ba      	adds	r2, r7, r6
 8004a1e:	7812      	ldrb	r2, [r2, #0]
 8004a20:	70da      	strb	r2, [r3, #3]

			HAL_UART_Transmit(&huart2, uartOutBuffer, 4, 2);
 8004a22:	1939      	adds	r1, r7, r4
 8004a24:	4809      	ldr	r0, [pc, #36]	; (8004a4c <main+0x2a0>)
 8004a26:	2302      	movs	r3, #2
 8004a28:	2204      	movs	r2, #4
 8004a2a:	f004 f91d 	bl	8008c68 <HAL_UART_Transmit>
    //}

    // HAL_Delay(100);

    // HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
  }
 8004a2e:	e6ed      	b.n	800480c <main+0x60>
 8004a30:	20000470 	.word	0x20000470
 8004a34:	20000100 	.word	0x20000100
 8004a38:	200001b8 	.word	0x200001b8
 8004a3c:	200002d0 	.word	0x200002d0
 8004a40:	20000240 	.word	0x20000240
 8004a44:	200005dc 	.word	0x200005dc
 8004a48:	2000066c 	.word	0x2000066c
 8004a4c:	2000054c 	.word	0x2000054c
 8004a50:	20000358 	.word	0x20000358

08004a54 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004a54:	b590      	push	{r4, r7, lr}
 8004a56:	b093      	sub	sp, #76	; 0x4c
 8004a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a5a:	2410      	movs	r4, #16
 8004a5c:	193b      	adds	r3, r7, r4
 8004a5e:	0018      	movs	r0, r3
 8004a60:	2338      	movs	r3, #56	; 0x38
 8004a62:	001a      	movs	r2, r3
 8004a64:	2100      	movs	r1, #0
 8004a66:	f006 f960 	bl	800ad2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a6a:	003b      	movs	r3, r7
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	2310      	movs	r3, #16
 8004a70:	001a      	movs	r2, r3
 8004a72:	2100      	movs	r1, #0
 8004a74:	f006 f959 	bl	800ad2a <memset>

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a78:	2380      	movs	r3, #128	; 0x80
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f001 feb9 	bl	80067f4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004a82:	193b      	adds	r3, r7, r4
 8004a84:	2202      	movs	r2, #2
 8004a86:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a88:	193b      	adds	r3, r7, r4
 8004a8a:	2280      	movs	r2, #128	; 0x80
 8004a8c:	0052      	lsls	r2, r2, #1
 8004a8e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004a90:	0021      	movs	r1, r4
 8004a92:	187b      	adds	r3, r7, r1
 8004a94:	2200      	movs	r2, #0
 8004a96:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004a98:	187b      	adds	r3, r7, r1
 8004a9a:	2240      	movs	r2, #64	; 0x40
 8004a9c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a9e:	187b      	adds	r3, r7, r1
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004aa4:	187b      	adds	r3, r7, r1
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004aaa:	187b      	adds	r3, r7, r1
 8004aac:	2200      	movs	r2, #0
 8004aae:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 9;
 8004ab0:	187b      	adds	r3, r7, r1
 8004ab2:	2209      	movs	r2, #9
 8004ab4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004ab6:	187b      	adds	r3, r7, r1
 8004ab8:	2280      	movs	r2, #128	; 0x80
 8004aba:	0292      	lsls	r2, r2, #10
 8004abc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004abe:	187b      	adds	r3, r7, r1
 8004ac0:	2280      	movs	r2, #128	; 0x80
 8004ac2:	0492      	lsls	r2, r2, #18
 8004ac4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8004ac6:	187b      	adds	r3, r7, r1
 8004ac8:	2280      	movs	r2, #128	; 0x80
 8004aca:	05d2      	lsls	r2, r2, #23
 8004acc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004ace:	187b      	adds	r3, r7, r1
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	f001 fedb 	bl	800688c <HAL_RCC_OscConfig>
 8004ad6:	0003      	movs	r3, r0
 8004ad8:	1e5a      	subs	r2, r3, #1
 8004ada:	4193      	sbcs	r3, r2
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <_Z18SystemClock_Configv+0x92>
    Error_Handler();
 8004ae2:	f000 faa1 	bl	8005028 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType =
 8004ae6:	003b      	movs	r3, r7
 8004ae8:	2207      	movs	r2, #7
 8004aea:	601a      	str	r2, [r3, #0]
      RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004aec:	003b      	movs	r3, r7
 8004aee:	2202      	movs	r2, #2
 8004af0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004af2:	003b      	movs	r3, r7
 8004af4:	2200      	movs	r2, #0
 8004af6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004af8:	003b      	movs	r3, r7
 8004afa:	2200      	movs	r2, #0
 8004afc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8004afe:	003b      	movs	r3, r7
 8004b00:	2101      	movs	r1, #1
 8004b02:	0018      	movs	r0, r3
 8004b04:	f002 f9e2 	bl	8006ecc <HAL_RCC_ClockConfig>
 8004b08:	0003      	movs	r3, r0
 8004b0a:	1e5a      	subs	r2, r3, #1
 8004b0c:	4193      	sbcs	r3, r2
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <_Z18SystemClock_Configv+0xc4>
    Error_Handler();
 8004b14:	f000 fa88 	bl	8005028 <Error_Handler>
  }
}
 8004b18:	46c0      	nop			; (mov r8, r8)
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	b013      	add	sp, #76	; 0x4c
 8004b1e:	bd90      	pop	{r4, r7, pc}

08004b20 <_ZL12MX_ADC1_Initv>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004b26:	1d3b      	adds	r3, r7, #4
 8004b28:	0018      	movs	r0, r3
 8004b2a:	230c      	movs	r3, #12
 8004b2c:	001a      	movs	r2, r3
 8004b2e:	2100      	movs	r1, #0
 8004b30:	f006 f8fb 	bl	800ad2a <memset>

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data
   * Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 8004b34:	4b31      	ldr	r3, [pc, #196]	; (8004bfc <_ZL12MX_ADC1_Initv+0xdc>)
 8004b36:	4a32      	ldr	r2, [pc, #200]	; (8004c00 <_ZL12MX_ADC1_Initv+0xe0>)
 8004b38:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004b3a:	4b30      	ldr	r3, [pc, #192]	; (8004bfc <_ZL12MX_ADC1_Initv+0xdc>)
 8004b3c:	2280      	movs	r2, #128	; 0x80
 8004b3e:	05d2      	lsls	r2, r2, #23
 8004b40:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004b42:	4b2e      	ldr	r3, [pc, #184]	; (8004bfc <_ZL12MX_ADC1_Initv+0xdc>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004b48:	4b2c      	ldr	r3, [pc, #176]	; (8004bfc <_ZL12MX_ADC1_Initv+0xdc>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004b4e:	4b2b      	ldr	r3, [pc, #172]	; (8004bfc <_ZL12MX_ADC1_Initv+0xdc>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004b54:	4b29      	ldr	r3, [pc, #164]	; (8004bfc <_ZL12MX_ADC1_Initv+0xdc>)
 8004b56:	2204      	movs	r2, #4
 8004b58:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004b5a:	4b28      	ldr	r3, [pc, #160]	; (8004bfc <_ZL12MX_ADC1_Initv+0xdc>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8004b60:	4b26      	ldr	r3, [pc, #152]	; (8004bfc <_ZL12MX_ADC1_Initv+0xdc>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004b66:	4b25      	ldr	r3, [pc, #148]	; (8004bfc <_ZL12MX_ADC1_Initv+0xdc>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8004b6c:	4b23      	ldr	r3, [pc, #140]	; (8004bfc <_ZL12MX_ADC1_Initv+0xdc>)
 8004b6e:	2201      	movs	r2, #1
 8004b70:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004b72:	4b22      	ldr	r3, [pc, #136]	; (8004bfc <_ZL12MX_ADC1_Initv+0xdc>)
 8004b74:	2220      	movs	r2, #32
 8004b76:	2100      	movs	r1, #0
 8004b78:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004b7a:	4b20      	ldr	r3, [pc, #128]	; (8004bfc <_ZL12MX_ADC1_Initv+0xdc>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004b80:	4b1e      	ldr	r3, [pc, #120]	; (8004bfc <_ZL12MX_ADC1_Initv+0xdc>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004b86:	4b1d      	ldr	r3, [pc, #116]	; (8004bfc <_ZL12MX_ADC1_Initv+0xdc>)
 8004b88:	222c      	movs	r2, #44	; 0x2c
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004b8e:	4b1b      	ldr	r3, [pc, #108]	; (8004bfc <_ZL12MX_ADC1_Initv+0xdc>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8004b94:	4b19      	ldr	r3, [pc, #100]	; (8004bfc <_ZL12MX_ADC1_Initv+0xdc>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8004b9a:	4b18      	ldr	r3, [pc, #96]	; (8004bfc <_ZL12MX_ADC1_Initv+0xdc>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8004ba0:	4b16      	ldr	r3, [pc, #88]	; (8004bfc <_ZL12MX_ADC1_Initv+0xdc>)
 8004ba2:	223c      	movs	r2, #60	; 0x3c
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8004ba8:	4b14      	ldr	r3, [pc, #80]	; (8004bfc <_ZL12MX_ADC1_Initv+0xdc>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8004bae:	4b13      	ldr	r3, [pc, #76]	; (8004bfc <_ZL12MX_ADC1_Initv+0xdc>)
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	f000 fed1 	bl	8005958 <HAL_ADC_Init>
 8004bb6:	0003      	movs	r3, r0
 8004bb8:	1e5a      	subs	r2, r3, #1
 8004bba:	4193      	sbcs	r3, r2
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <_ZL12MX_ADC1_Initv+0xa6>
    Error_Handler();
 8004bc2:	f000 fa31 	bl	8005028 <Error_Handler>
  }
  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_0;
 8004bc6:	1d3b      	adds	r3, r7, #4
 8004bc8:	2201      	movs	r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004bcc:	1d3b      	adds	r3, r7, #4
 8004bce:	2200      	movs	r2, #0
 8004bd0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8004bd2:	1d3b      	adds	r3, r7, #4
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8004bd8:	1d3a      	adds	r2, r7, #4
 8004bda:	4b08      	ldr	r3, [pc, #32]	; (8004bfc <_ZL12MX_ADC1_Initv+0xdc>)
 8004bdc:	0011      	movs	r1, r2
 8004bde:	0018      	movs	r0, r3
 8004be0:	f001 f898 	bl	8005d14 <HAL_ADC_ConfigChannel>
 8004be4:	0003      	movs	r3, r0
 8004be6:	1e5a      	subs	r2, r3, #1
 8004be8:	4193      	sbcs	r3, r2
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <_ZL12MX_ADC1_Initv+0xd4>
    Error_Handler();
 8004bf0:	f000 fa1a 	bl	8005028 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8004bf4:	46c0      	nop			; (mov r8, r8)
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	b004      	add	sp, #16
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	200003a8 	.word	0x200003a8
 8004c00:	40012400 	.word	0x40012400

08004c04 <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004c08:	4b1d      	ldr	r3, [pc, #116]	; (8004c80 <_ZL12MX_SPI1_Initv+0x7c>)
 8004c0a:	4a1e      	ldr	r2, [pc, #120]	; (8004c84 <_ZL12MX_SPI1_Initv+0x80>)
 8004c0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004c0e:	4b1c      	ldr	r3, [pc, #112]	; (8004c80 <_ZL12MX_SPI1_Initv+0x7c>)
 8004c10:	2282      	movs	r2, #130	; 0x82
 8004c12:	0052      	lsls	r2, r2, #1
 8004c14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004c16:	4b1a      	ldr	r3, [pc, #104]	; (8004c80 <_ZL12MX_SPI1_Initv+0x7c>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004c1c:	4b18      	ldr	r3, [pc, #96]	; (8004c80 <_ZL12MX_SPI1_Initv+0x7c>)
 8004c1e:	22e0      	movs	r2, #224	; 0xe0
 8004c20:	00d2      	lsls	r2, r2, #3
 8004c22:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c24:	4b16      	ldr	r3, [pc, #88]	; (8004c80 <_ZL12MX_SPI1_Initv+0x7c>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004c2a:	4b15      	ldr	r3, [pc, #84]	; (8004c80 <_ZL12MX_SPI1_Initv+0x7c>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004c30:	4b13      	ldr	r3, [pc, #76]	; (8004c80 <_ZL12MX_SPI1_Initv+0x7c>)
 8004c32:	2280      	movs	r2, #128	; 0x80
 8004c34:	0092      	lsls	r2, r2, #2
 8004c36:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004c38:	4b11      	ldr	r3, [pc, #68]	; (8004c80 <_ZL12MX_SPI1_Initv+0x7c>)
 8004c3a:	2210      	movs	r2, #16
 8004c3c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004c3e:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <_ZL12MX_SPI1_Initv+0x7c>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004c44:	4b0e      	ldr	r3, [pc, #56]	; (8004c80 <_ZL12MX_SPI1_Initv+0x7c>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c4a:	4b0d      	ldr	r3, [pc, #52]	; (8004c80 <_ZL12MX_SPI1_Initv+0x7c>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004c50:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <_ZL12MX_SPI1_Initv+0x7c>)
 8004c52:	2207      	movs	r2, #7
 8004c54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004c56:	4b0a      	ldr	r3, [pc, #40]	; (8004c80 <_ZL12MX_SPI1_Initv+0x7c>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004c5c:	4b08      	ldr	r3, [pc, #32]	; (8004c80 <_ZL12MX_SPI1_Initv+0x7c>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8004c62:	4b07      	ldr	r3, [pc, #28]	; (8004c80 <_ZL12MX_SPI1_Initv+0x7c>)
 8004c64:	0018      	movs	r0, r3
 8004c66:	f002 fc93 	bl	8007590 <HAL_SPI_Init>
 8004c6a:	0003      	movs	r3, r0
 8004c6c:	1e5a      	subs	r2, r3, #1
 8004c6e:	4193      	sbcs	r3, r2
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <_ZL12MX_SPI1_Initv+0x76>
    Error_Handler();
 8004c76:	f000 f9d7 	bl	8005028 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	2000040c 	.word	0x2000040c
 8004c84:	40013000 	.word	0x40013000

08004c88 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c8e:	2310      	movs	r3, #16
 8004c90:	18fb      	adds	r3, r7, r3
 8004c92:	0018      	movs	r0, r3
 8004c94:	2310      	movs	r3, #16
 8004c96:	001a      	movs	r2, r3
 8004c98:	2100      	movs	r1, #0
 8004c9a:	f006 f846 	bl	800ad2a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c9e:	1d3b      	adds	r3, r7, #4
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	230c      	movs	r3, #12
 8004ca4:	001a      	movs	r2, r3
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	f006 f83f 	bl	800ad2a <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004cac:	4b25      	ldr	r3, [pc, #148]	; (8004d44 <_ZL12MX_TIM2_Initv+0xbc>)
 8004cae:	2280      	movs	r2, #128	; 0x80
 8004cb0:	05d2      	lsls	r2, r2, #23
 8004cb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4800;
 8004cb4:	4b23      	ldr	r3, [pc, #140]	; (8004d44 <_ZL12MX_TIM2_Initv+0xbc>)
 8004cb6:	2296      	movs	r2, #150	; 0x96
 8004cb8:	0152      	lsls	r2, r2, #5
 8004cba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cbc:	4b21      	ldr	r3, [pc, #132]	; (8004d44 <_ZL12MX_TIM2_Initv+0xbc>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8004cc2:	4b20      	ldr	r3, [pc, #128]	; (8004d44 <_ZL12MX_TIM2_Initv+0xbc>)
 8004cc4:	22fa      	movs	r2, #250	; 0xfa
 8004cc6:	0092      	lsls	r2, r2, #2
 8004cc8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cca:	4b1e      	ldr	r3, [pc, #120]	; (8004d44 <_ZL12MX_TIM2_Initv+0xbc>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004cd0:	4b1c      	ldr	r3, [pc, #112]	; (8004d44 <_ZL12MX_TIM2_Initv+0xbc>)
 8004cd2:	2280      	movs	r2, #128	; 0x80
 8004cd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8004cd6:	4b1b      	ldr	r3, [pc, #108]	; (8004d44 <_ZL12MX_TIM2_Initv+0xbc>)
 8004cd8:	0018      	movs	r0, r3
 8004cda:	f003 facd 	bl	8008278 <HAL_TIM_Base_Init>
 8004cde:	0003      	movs	r3, r0
 8004ce0:	1e5a      	subs	r2, r3, #1
 8004ce2:	4193      	sbcs	r3, r2
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <_ZL12MX_TIM2_Initv+0x66>
    Error_Handler();
 8004cea:	f000 f99d 	bl	8005028 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004cee:	2110      	movs	r1, #16
 8004cf0:	187b      	adds	r3, r7, r1
 8004cf2:	2280      	movs	r2, #128	; 0x80
 8004cf4:	0152      	lsls	r2, r2, #5
 8004cf6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8004cf8:	187a      	adds	r2, r7, r1
 8004cfa:	4b12      	ldr	r3, [pc, #72]	; (8004d44 <_ZL12MX_TIM2_Initv+0xbc>)
 8004cfc:	0011      	movs	r1, r2
 8004cfe:	0018      	movs	r0, r3
 8004d00:	f003 fcce 	bl	80086a0 <HAL_TIM_ConfigClockSource>
 8004d04:	0003      	movs	r3, r0
 8004d06:	1e5a      	subs	r2, r3, #1
 8004d08:	4193      	sbcs	r3, r2
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d001      	beq.n	8004d14 <_ZL12MX_TIM2_Initv+0x8c>
    Error_Handler();
 8004d10:	f000 f98a 	bl	8005028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004d14:	1d3b      	adds	r3, r7, #4
 8004d16:	2220      	movs	r2, #32
 8004d18:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d1a:	1d3b      	adds	r3, r7, #4
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8004d20:	1d3a      	adds	r2, r7, #4
 8004d22:	4b08      	ldr	r3, [pc, #32]	; (8004d44 <_ZL12MX_TIM2_Initv+0xbc>)
 8004d24:	0011      	movs	r1, r2
 8004d26:	0018      	movs	r0, r3
 8004d28:	f003 fec2 	bl	8008ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8004d2c:	0003      	movs	r3, r0
 8004d2e:	1e5a      	subs	r2, r3, #1
 8004d30:	4193      	sbcs	r3, r2
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <_ZL12MX_TIM2_Initv+0xb4>
    Error_Handler();
 8004d38:	f000 f976 	bl	8005028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 8004d3c:	46c0      	nop			; (mov r8, r8)
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	b008      	add	sp, #32
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	20000470 	.word	0x20000470

08004d48 <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004d4c:	4b2b      	ldr	r3, [pc, #172]	; (8004dfc <_ZL19MX_USART1_UART_Initv+0xb4>)
 8004d4e:	4a2c      	ldr	r2, [pc, #176]	; (8004e00 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004d50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004d52:	4b2a      	ldr	r3, [pc, #168]	; (8004dfc <_ZL19MX_USART1_UART_Initv+0xb4>)
 8004d54:	2296      	movs	r2, #150	; 0x96
 8004d56:	0192      	lsls	r2, r2, #6
 8004d58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004d5a:	4b28      	ldr	r3, [pc, #160]	; (8004dfc <_ZL19MX_USART1_UART_Initv+0xb4>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004d60:	4b26      	ldr	r3, [pc, #152]	; (8004dfc <_ZL19MX_USART1_UART_Initv+0xb4>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004d66:	4b25      	ldr	r3, [pc, #148]	; (8004dfc <_ZL19MX_USART1_UART_Initv+0xb4>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004d6c:	4b23      	ldr	r3, [pc, #140]	; (8004dfc <_ZL19MX_USART1_UART_Initv+0xb4>)
 8004d6e:	220c      	movs	r2, #12
 8004d70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d72:	4b22      	ldr	r3, [pc, #136]	; (8004dfc <_ZL19MX_USART1_UART_Initv+0xb4>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d78:	4b20      	ldr	r3, [pc, #128]	; (8004dfc <_ZL19MX_USART1_UART_Initv+0xb4>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004d7e:	4b1f      	ldr	r3, [pc, #124]	; (8004dfc <_ZL19MX_USART1_UART_Initv+0xb4>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004d84:	4b1d      	ldr	r3, [pc, #116]	; (8004dfc <_ZL19MX_USART1_UART_Initv+0xb4>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004d8a:	4b1c      	ldr	r3, [pc, #112]	; (8004dfc <_ZL19MX_USART1_UART_Initv+0xb4>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK) {
 8004d90:	4b1a      	ldr	r3, [pc, #104]	; (8004dfc <_ZL19MX_USART1_UART_Initv+0xb4>)
 8004d92:	0018      	movs	r0, r3
 8004d94:	f003 ff12 	bl	8008bbc <HAL_UART_Init>
 8004d98:	0003      	movs	r3, r0
 8004d9a:	1e5a      	subs	r2, r3, #1
 8004d9c:	4193      	sbcs	r3, r2
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <_ZL19MX_USART1_UART_Initv+0x60>
    Error_Handler();
 8004da4:	f000 f940 	bl	8005028 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) !=
 8004da8:	4b14      	ldr	r3, [pc, #80]	; (8004dfc <_ZL19MX_USART1_UART_Initv+0xb4>)
 8004daa:	2100      	movs	r1, #0
 8004dac:	0018      	movs	r0, r3
 8004dae:	f005 fea3 	bl	800aaf8 <HAL_UARTEx_SetTxFifoThreshold>
 8004db2:	0003      	movs	r3, r0
 8004db4:	1e5a      	subs	r2, r3, #1
 8004db6:	4193      	sbcs	r3, r2
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <_ZL19MX_USART1_UART_Initv+0x7a>
      HAL_OK) {
    Error_Handler();
 8004dbe:	f000 f933 	bl	8005028 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) !=
 8004dc2:	4b0e      	ldr	r3, [pc, #56]	; (8004dfc <_ZL19MX_USART1_UART_Initv+0xb4>)
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	f005 fed6 	bl	800ab78 <HAL_UARTEx_SetRxFifoThreshold>
 8004dcc:	0003      	movs	r3, r0
 8004dce:	1e5a      	subs	r2, r3, #1
 8004dd0:	4193      	sbcs	r3, r2
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <_ZL19MX_USART1_UART_Initv+0x94>
      HAL_OK) {
    Error_Handler();
 8004dd8:	f000 f926 	bl	8005028 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8004ddc:	4b07      	ldr	r3, [pc, #28]	; (8004dfc <_ZL19MX_USART1_UART_Initv+0xb4>)
 8004dde:	0018      	movs	r0, r3
 8004de0:	f005 fe50 	bl	800aa84 <HAL_UARTEx_DisableFifoMode>
 8004de4:	0003      	movs	r3, r0
 8004de6:	1e5a      	subs	r2, r3, #1
 8004de8:	4193      	sbcs	r3, r2
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <_ZL19MX_USART1_UART_Initv+0xac>
    Error_Handler();
 8004df0:	f000 f91a 	bl	8005028 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8004df4:	46c0      	nop			; (mov r8, r8)
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	46c0      	nop			; (mov r8, r8)
 8004dfc:	200004bc 	.word	0x200004bc
 8004e00:	40013800 	.word	0x40013800

08004e04 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004e08:	4b2b      	ldr	r3, [pc, #172]	; (8004eb8 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8004e0a:	4a2c      	ldr	r2, [pc, #176]	; (8004ebc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8004e0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004e0e:	4b2a      	ldr	r3, [pc, #168]	; (8004eb8 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8004e10:	22e1      	movs	r2, #225	; 0xe1
 8004e12:	0252      	lsls	r2, r2, #9
 8004e14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004e16:	4b28      	ldr	r3, [pc, #160]	; (8004eb8 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004e1c:	4b26      	ldr	r3, [pc, #152]	; (8004eb8 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004e22:	4b25      	ldr	r3, [pc, #148]	; (8004eb8 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004e28:	4b23      	ldr	r3, [pc, #140]	; (8004eb8 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8004e2a:	220c      	movs	r2, #12
 8004e2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e2e:	4b22      	ldr	r3, [pc, #136]	; (8004eb8 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e34:	4b20      	ldr	r3, [pc, #128]	; (8004eb8 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004e3a:	4b1f      	ldr	r3, [pc, #124]	; (8004eb8 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004e40:	4b1d      	ldr	r3, [pc, #116]	; (8004eb8 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004e46:	4b1c      	ldr	r3, [pc, #112]	; (8004eb8 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK) {
 8004e4c:	4b1a      	ldr	r3, [pc, #104]	; (8004eb8 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f003 feb4 	bl	8008bbc <HAL_UART_Init>
 8004e54:	0003      	movs	r3, r0
 8004e56:	1e5a      	subs	r2, r3, #1
 8004e58:	4193      	sbcs	r3, r2
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <_ZL19MX_USART2_UART_Initv+0x60>
    Error_Handler();
 8004e60:	f000 f8e2 	bl	8005028 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) !=
 8004e64:	4b14      	ldr	r3, [pc, #80]	; (8004eb8 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8004e66:	2100      	movs	r1, #0
 8004e68:	0018      	movs	r0, r3
 8004e6a:	f005 fe45 	bl	800aaf8 <HAL_UARTEx_SetTxFifoThreshold>
 8004e6e:	0003      	movs	r3, r0
 8004e70:	1e5a      	subs	r2, r3, #1
 8004e72:	4193      	sbcs	r3, r2
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <_ZL19MX_USART2_UART_Initv+0x7a>
      HAL_OK) {
    Error_Handler();
 8004e7a:	f000 f8d5 	bl	8005028 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) !=
 8004e7e:	4b0e      	ldr	r3, [pc, #56]	; (8004eb8 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8004e80:	2100      	movs	r1, #0
 8004e82:	0018      	movs	r0, r3
 8004e84:	f005 fe78 	bl	800ab78 <HAL_UARTEx_SetRxFifoThreshold>
 8004e88:	0003      	movs	r3, r0
 8004e8a:	1e5a      	subs	r2, r3, #1
 8004e8c:	4193      	sbcs	r3, r2
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <_ZL19MX_USART2_UART_Initv+0x94>
      HAL_OK) {
    Error_Handler();
 8004e94:	f000 f8c8 	bl	8005028 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8004e98:	4b07      	ldr	r3, [pc, #28]	; (8004eb8 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8004e9a:	0018      	movs	r0, r3
 8004e9c:	f005 fdf2 	bl	800aa84 <HAL_UARTEx_DisableFifoMode>
 8004ea0:	0003      	movs	r3, r0
 8004ea2:	1e5a      	subs	r2, r3, #1
 8004ea4:	4193      	sbcs	r3, r2
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <_ZL19MX_USART2_UART_Initv+0xac>
    Error_Handler();
 8004eac:	f000 f8bc 	bl	8005028 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8004eb0:	46c0      	nop			; (mov r8, r8)
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	2000054c 	.word	0x2000054c
 8004ebc:	40004400 	.word	0x40004400

08004ec0 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8004ec0:	b590      	push	{r4, r7, lr}
 8004ec2:	b089      	sub	sp, #36	; 0x24
 8004ec4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ec6:	240c      	movs	r4, #12
 8004ec8:	193b      	adds	r3, r7, r4
 8004eca:	0018      	movs	r0, r3
 8004ecc:	2314      	movs	r3, #20
 8004ece:	001a      	movs	r2, r3
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	f005 ff2a 	bl	800ad2a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ed6:	4b51      	ldr	r3, [pc, #324]	; (800501c <_ZL12MX_GPIO_Initv+0x15c>)
 8004ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eda:	4b50      	ldr	r3, [pc, #320]	; (800501c <_ZL12MX_GPIO_Initv+0x15c>)
 8004edc:	2101      	movs	r1, #1
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	635a      	str	r2, [r3, #52]	; 0x34
 8004ee2:	4b4e      	ldr	r3, [pc, #312]	; (800501c <_ZL12MX_GPIO_Initv+0x15c>)
 8004ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	4013      	ands	r3, r2
 8004eea:	60bb      	str	r3, [r7, #8]
 8004eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004eee:	4b4b      	ldr	r3, [pc, #300]	; (800501c <_ZL12MX_GPIO_Initv+0x15c>)
 8004ef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ef2:	4b4a      	ldr	r3, [pc, #296]	; (800501c <_ZL12MX_GPIO_Initv+0x15c>)
 8004ef4:	2102      	movs	r1, #2
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	635a      	str	r2, [r3, #52]	; 0x34
 8004efa:	4b48      	ldr	r3, [pc, #288]	; (800501c <_ZL12MX_GPIO_Initv+0x15c>)
 8004efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efe:	2202      	movs	r2, #2
 8004f00:	4013      	ands	r3, r2
 8004f02:	607b      	str	r3, [r7, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f06:	4b45      	ldr	r3, [pc, #276]	; (800501c <_ZL12MX_GPIO_Initv+0x15c>)
 8004f08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f0a:	4b44      	ldr	r3, [pc, #272]	; (800501c <_ZL12MX_GPIO_Initv+0x15c>)
 8004f0c:	2104      	movs	r1, #4
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	635a      	str	r2, [r3, #52]	; 0x34
 8004f12:	4b42      	ldr	r3, [pc, #264]	; (800501c <_ZL12MX_GPIO_Initv+0x15c>)
 8004f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f16:	2204      	movs	r2, #4
 8004f18:	4013      	ands	r3, r2
 8004f1a:	603b      	str	r3, [r7, #0]
 8004f1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin | INT2_Pin | INT1_Pin, GPIO_PIN_RESET);
 8004f1e:	2322      	movs	r3, #34	; 0x22
 8004f20:	33ff      	adds	r3, #255	; 0xff
 8004f22:	483f      	ldr	r0, [pc, #252]	; (8005020 <_ZL12MX_GPIO_Initv+0x160>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	0019      	movs	r1, r3
 8004f28:	f001 fbf7 	bl	800671a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FE_EN_Pin | RX_EN_Pin | LED_Pin, GPIO_PIN_RESET);
 8004f2c:	2389      	movs	r3, #137	; 0x89
 8004f2e:	0219      	lsls	r1, r3, #8
 8004f30:	23a0      	movs	r3, #160	; 0xa0
 8004f32:	05db      	lsls	r3, r3, #23
 8004f34:	2200      	movs	r2, #0
 8004f36:	0018      	movs	r0, r3
 8004f38:	f001 fbef 	bl	800671a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 8004f3c:	4b39      	ldr	r3, [pc, #228]	; (8005024 <_ZL12MX_GPIO_Initv+0x164>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	2140      	movs	r1, #64	; 0x40
 8004f42:	0018      	movs	r0, r3
 8004f44:	f001 fbe9 	bl	800671a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIO2_Pin DIO1_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin | DIO1_Pin;
 8004f48:	193b      	adds	r3, r7, r4
 8004f4a:	2230      	movs	r2, #48	; 0x30
 8004f4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f4e:	193b      	adds	r3, r7, r4
 8004f50:	2288      	movs	r2, #136	; 0x88
 8004f52:	0352      	lsls	r2, r2, #13
 8004f54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f56:	193b      	adds	r3, r7, r4
 8004f58:	2200      	movs	r2, #0
 8004f5a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f5c:	193a      	adds	r2, r7, r4
 8004f5e:	23a0      	movs	r3, #160	; 0xa0
 8004f60:	05db      	lsls	r3, r3, #23
 8004f62:	0011      	movs	r1, r2
 8004f64:	0018      	movs	r0, r3
 8004f66:	f001 fa57 	bl	8006418 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin INT2_Pin INT1_Pin */
  GPIO_InitStruct.Pin = CS_Pin | INT2_Pin | INT1_Pin;
 8004f6a:	0021      	movs	r1, r4
 8004f6c:	187b      	adds	r3, r7, r1
 8004f6e:	2222      	movs	r2, #34	; 0x22
 8004f70:	32ff      	adds	r2, #255	; 0xff
 8004f72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f74:	000c      	movs	r4, r1
 8004f76:	193b      	adds	r3, r7, r4
 8004f78:	2201      	movs	r2, #1
 8004f7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7c:	193b      	adds	r3, r7, r4
 8004f7e:	2200      	movs	r2, #0
 8004f80:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f82:	193b      	adds	r3, r7, r4
 8004f84:	2200      	movs	r2, #0
 8004f86:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f88:	193b      	adds	r3, r7, r4
 8004f8a:	4a25      	ldr	r2, [pc, #148]	; (8005020 <_ZL12MX_GPIO_Initv+0x160>)
 8004f8c:	0019      	movs	r1, r3
 8004f8e:	0010      	movs	r0, r2
 8004f90:	f001 fa42 	bl	8006418 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8004f94:	193b      	adds	r3, r7, r4
 8004f96:	2202      	movs	r2, #2
 8004f98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f9a:	193b      	adds	r3, r7, r4
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fa0:	193b      	adds	r3, r7, r4
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8004fa6:	193b      	adds	r3, r7, r4
 8004fa8:	4a1d      	ldr	r2, [pc, #116]	; (8005020 <_ZL12MX_GPIO_Initv+0x160>)
 8004faa:	0019      	movs	r1, r3
 8004fac:	0010      	movs	r0, r2
 8004fae:	f001 fa33 	bl	8006418 <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_EN_Pin RX_EN_Pin LED_Pin */
  GPIO_InitStruct.Pin = FE_EN_Pin | RX_EN_Pin | LED_Pin;
 8004fb2:	0021      	movs	r1, r4
 8004fb4:	187b      	adds	r3, r7, r1
 8004fb6:	2289      	movs	r2, #137	; 0x89
 8004fb8:	0212      	lsls	r2, r2, #8
 8004fba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fbc:	000c      	movs	r4, r1
 8004fbe:	193b      	adds	r3, r7, r4
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc4:	193b      	adds	r3, r7, r4
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fca:	193b      	adds	r3, r7, r4
 8004fcc:	2200      	movs	r2, #0
 8004fce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fd0:	193a      	adds	r2, r7, r4
 8004fd2:	23a0      	movs	r3, #160	; 0xa0
 8004fd4:	05db      	lsls	r3, r3, #23
 8004fd6:	0011      	movs	r1, r2
 8004fd8:	0018      	movs	r0, r3
 8004fda:	f001 fa1d 	bl	8006418 <HAL_GPIO_Init>

  /*Configure GPIO pin : TX_EN_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
 8004fde:	0021      	movs	r1, r4
 8004fe0:	187b      	adds	r3, r7, r1
 8004fe2:	2240      	movs	r2, #64	; 0x40
 8004fe4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fe6:	187b      	adds	r3, r7, r1
 8004fe8:	2201      	movs	r2, #1
 8004fea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fec:	187b      	adds	r3, r7, r1
 8004fee:	2200      	movs	r2, #0
 8004ff0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ff2:	187b      	adds	r3, r7, r1
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 8004ff8:	187b      	adds	r3, r7, r1
 8004ffa:	4a0a      	ldr	r2, [pc, #40]	; (8005024 <_ZL12MX_GPIO_Initv+0x164>)
 8004ffc:	0019      	movs	r1, r3
 8004ffe:	0010      	movs	r0, r2
 8005000:	f001 fa0a 	bl	8006418 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8005004:	2200      	movs	r2, #0
 8005006:	2100      	movs	r1, #0
 8005008:	2007      	movs	r0, #7
 800500a:	f001 f907 	bl	800621c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800500e:	2007      	movs	r0, #7
 8005010:	f001 f919 	bl	8006246 <HAL_NVIC_EnableIRQ>
}
 8005014:	46c0      	nop			; (mov r8, r8)
 8005016:	46bd      	mov	sp, r7
 8005018:	b009      	add	sp, #36	; 0x24
 800501a:	bd90      	pop	{r4, r7, pc}
 800501c:	40021000 	.word	0x40021000
 8005020:	50000400 	.word	0x50000400
 8005024:	50000800 	.word	0x50000800

08005028 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800502c:	b672      	cpsid	i
}
 800502e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8005030:	e7fe      	b.n	8005030 <Error_Handler+0x8>

08005032 <_ZNK10RingBufferIhLj128EE7isEmptyEv>:
  }

  /**
   * Return: true if buffer is empty
   */
  bool isEmpty() const {
 8005032:	b580      	push	{r7, lr}
 8005034:	b084      	sub	sp, #16
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
    bool ret;
    { ret = !_numElements; }
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2284      	movs	r2, #132	; 0x84
 800503e:	589a      	ldr	r2, [r3, r2]
 8005040:	200f      	movs	r0, #15
 8005042:	183b      	adds	r3, r7, r0
 8005044:	4251      	negs	r1, r2
 8005046:	414a      	adcs	r2, r1
 8005048:	701a      	strb	r2, [r3, #0]

    return ret;
 800504a:	183b      	adds	r3, r7, r0
 800504c:	781b      	ldrb	r3, [r3, #0]
  }
 800504e:	0018      	movs	r0, r3
 8005050:	46bd      	mov	sp, r7
 8005052:	b004      	add	sp, #16
 8005054:	bd80      	pop	{r7, pc}

08005056 <_ZN10RingBufferIhLj128EE3popEPh>:
  bool pop(Type *dest) {
 8005056:	b590      	push	{r4, r7, lr}
 8005058:	b085      	sub	sp, #20
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
 800505e:	6039      	str	r1, [r7, #0]
    bool ret = false;
 8005060:	240f      	movs	r4, #15
 8005062:	193b      	adds	r3, r7, r4
 8005064:	2200      	movs	r2, #0
 8005066:	701a      	strb	r2, [r3, #0]
      if (!isEmpty()) {
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	0018      	movs	r0, r3
 800506c:	f7ff ffe1 	bl	8005032 <_ZNK10RingBufferIhLj128EE7isEmptyEv>
 8005070:	0003      	movs	r3, r0
 8005072:	001a      	movs	r2, r3
 8005074:	2301      	movs	r3, #1
 8005076:	4053      	eors	r3, r2
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d015      	beq.n	80050aa <_ZN10RingBufferIhLj128EE3popEPh+0x54>
        tail = getTail();
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	0018      	movs	r0, r3
 8005082:	f000 f819 	bl	80050b8 <_ZNK10RingBufferIhLj128EE7getTailEv>
 8005086:	0003      	movs	r3, r0
 8005088:	60bb      	str	r3, [r7, #8]
        *dest = _buf[tail];
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	18d3      	adds	r3, r2, r3
 8005090:	781a      	ldrb	r2, [r3, #0]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	701a      	strb	r2, [r3, #0]
        _numElements--;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2284      	movs	r2, #132	; 0x84
 800509a:	589b      	ldr	r3, [r3, r2]
 800509c:	1e5a      	subs	r2, r3, #1
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2184      	movs	r1, #132	; 0x84
 80050a2:	505a      	str	r2, [r3, r1]
        ret = true;
 80050a4:	193b      	adds	r3, r7, r4
 80050a6:	2201      	movs	r2, #1
 80050a8:	701a      	strb	r2, [r3, #0]
    return ret;
 80050aa:	230f      	movs	r3, #15
 80050ac:	18fb      	adds	r3, r7, r3
 80050ae:	781b      	ldrb	r3, [r3, #0]
  }
 80050b0:	0018      	movs	r0, r3
 80050b2:	46bd      	mov	sp, r7
 80050b4:	b005      	add	sp, #20
 80050b6:	bd90      	pop	{r4, r7, pc}

080050b8 <_ZNK10RingBufferIhLj128EE7getTailEv>:
protected:
  /**
   * Calculates the index in the array of the oldest element
   * Return: index in array of element
   */
  size_t getTail() const {
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
    return (_head + (MaxElements - _numElements)) % MaxElements;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2280      	movs	r2, #128	; 0x80
 80050c4:	589a      	ldr	r2, [r3, r2]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2184      	movs	r1, #132	; 0x84
 80050ca:	585b      	ldr	r3, [r3, r1]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	227f      	movs	r2, #127	; 0x7f
 80050d0:	4013      	ands	r3, r2
  }
 80050d2:	0018      	movs	r0, r3
 80050d4:	46bd      	mov	sp, r7
 80050d6:	b002      	add	sp, #8
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <_Z41__static_initialization_and_destruction_0ii>:
  }
  /* USER CODE END Error_Handler_Debug */
}
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d107      	bne.n	80050fc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	4a05      	ldr	r2, [pc, #20]	; (8005104 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d103      	bne.n	80050fc <_Z41__static_initialization_and_destruction_0ii+0x20>
Parser p;
 80050f4:	4b04      	ldr	r3, [pc, #16]	; (8005108 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80050f6:	0018      	movs	r0, r3
 80050f8:	f7ff fb3a 	bl	8004770 <_ZN6ParserC1Ev>
}
 80050fc:	46c0      	nop			; (mov r8, r8)
 80050fe:	46bd      	mov	sp, r7
 8005100:	b002      	add	sp, #8
 8005102:	bd80      	pop	{r7, pc}
 8005104:	0000ffff 	.word	0x0000ffff
 8005108:	200005dc 	.word	0x200005dc

0800510c <_GLOBAL__sub_I_hadc1>:
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
 8005110:	4b03      	ldr	r3, [pc, #12]	; (8005120 <_GLOBAL__sub_I_hadc1+0x14>)
 8005112:	0019      	movs	r1, r3
 8005114:	2001      	movs	r0, #1
 8005116:	f7ff ffe1 	bl	80050dc <_Z41__static_initialization_and_destruction_0ii>
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	46c0      	nop			; (mov r8, r8)
 8005120:	0000ffff 	.word	0x0000ffff

08005124 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800512a:	4b11      	ldr	r3, [pc, #68]	; (8005170 <HAL_MspInit+0x4c>)
 800512c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800512e:	4b10      	ldr	r3, [pc, #64]	; (8005170 <HAL_MspInit+0x4c>)
 8005130:	2101      	movs	r1, #1
 8005132:	430a      	orrs	r2, r1
 8005134:	641a      	str	r2, [r3, #64]	; 0x40
 8005136:	4b0e      	ldr	r3, [pc, #56]	; (8005170 <HAL_MspInit+0x4c>)
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	2201      	movs	r2, #1
 800513c:	4013      	ands	r3, r2
 800513e:	607b      	str	r3, [r7, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005142:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <HAL_MspInit+0x4c>)
 8005144:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005146:	4b0a      	ldr	r3, [pc, #40]	; (8005170 <HAL_MspInit+0x4c>)
 8005148:	2180      	movs	r1, #128	; 0x80
 800514a:	0549      	lsls	r1, r1, #21
 800514c:	430a      	orrs	r2, r1
 800514e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005150:	4b07      	ldr	r3, [pc, #28]	; (8005170 <HAL_MspInit+0x4c>)
 8005152:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005154:	2380      	movs	r3, #128	; 0x80
 8005156:	055b      	lsls	r3, r3, #21
 8005158:	4013      	ands	r3, r2
 800515a:	603b      	str	r3, [r7, #0]
 800515c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 800515e:	2380      	movs	r3, #128	; 0x80
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	0018      	movs	r0, r3
 8005164:	f000 fafa 	bl	800575c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005168:	46c0      	nop			; (mov r8, r8)
 800516a:	46bd      	mov	sp, r7
 800516c:	b002      	add	sp, #8
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40021000 	.word	0x40021000

08005174 <HAL_ADC_MspInit>:
 * @brief ADC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hadc: ADC handle pointer
 * @retval None
 */
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc) {
 8005174:	b590      	push	{r4, r7, lr}
 8005176:	b097      	sub	sp, #92	; 0x5c
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800517c:	2344      	movs	r3, #68	; 0x44
 800517e:	18fb      	adds	r3, r7, r3
 8005180:	0018      	movs	r0, r3
 8005182:	2314      	movs	r3, #20
 8005184:	001a      	movs	r2, r3
 8005186:	2100      	movs	r1, #0
 8005188:	f005 fdcf 	bl	800ad2a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800518c:	2410      	movs	r4, #16
 800518e:	193b      	adds	r3, r7, r4
 8005190:	0018      	movs	r0, r3
 8005192:	2334      	movs	r3, #52	; 0x34
 8005194:	001a      	movs	r2, r3
 8005196:	2100      	movs	r1, #0
 8005198:	f005 fdc7 	bl	800ad2a <memset>
  if (hadc->Instance == ADC1) {
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a20      	ldr	r2, [pc, #128]	; (8005224 <HAL_ADC_MspInit+0xb0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d139      	bne.n	800521a <HAL_ADC_MspInit+0xa6>
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /** Initializes the peripherals clocks
     */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80051a6:	193b      	adds	r3, r7, r4
 80051a8:	2280      	movs	r2, #128	; 0x80
 80051aa:	01d2      	lsls	r2, r2, #7
 80051ac:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80051ae:	193b      	adds	r3, r7, r4
 80051b0:	2200      	movs	r2, #0
 80051b2:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80051b4:	193b      	adds	r3, r7, r4
 80051b6:	0018      	movs	r0, r3
 80051b8:	f002 f832 	bl	8007220 <HAL_RCCEx_PeriphCLKConfig>
 80051bc:	1e03      	subs	r3, r0, #0
 80051be:	d001      	beq.n	80051c4 <HAL_ADC_MspInit+0x50>
      Error_Handler();
 80051c0:	f7ff ff32 	bl	8005028 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80051c4:	4b18      	ldr	r3, [pc, #96]	; (8005228 <HAL_ADC_MspInit+0xb4>)
 80051c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051c8:	4b17      	ldr	r3, [pc, #92]	; (8005228 <HAL_ADC_MspInit+0xb4>)
 80051ca:	2180      	movs	r1, #128	; 0x80
 80051cc:	0349      	lsls	r1, r1, #13
 80051ce:	430a      	orrs	r2, r1
 80051d0:	641a      	str	r2, [r3, #64]	; 0x40
 80051d2:	4b15      	ldr	r3, [pc, #84]	; (8005228 <HAL_ADC_MspInit+0xb4>)
 80051d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051d6:	2380      	movs	r3, #128	; 0x80
 80051d8:	035b      	lsls	r3, r3, #13
 80051da:	4013      	ands	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051e0:	4b11      	ldr	r3, [pc, #68]	; (8005228 <HAL_ADC_MspInit+0xb4>)
 80051e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051e4:	4b10      	ldr	r3, [pc, #64]	; (8005228 <HAL_ADC_MspInit+0xb4>)
 80051e6:	2101      	movs	r1, #1
 80051e8:	430a      	orrs	r2, r1
 80051ea:	635a      	str	r2, [r3, #52]	; 0x34
 80051ec:	4b0e      	ldr	r3, [pc, #56]	; (8005228 <HAL_ADC_MspInit+0xb4>)
 80051ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f0:	2201      	movs	r2, #1
 80051f2:	4013      	ands	r3, r2
 80051f4:	60bb      	str	r3, [r7, #8]
 80051f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80051f8:	2144      	movs	r1, #68	; 0x44
 80051fa:	187b      	adds	r3, r7, r1
 80051fc:	2201      	movs	r2, #1
 80051fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005200:	187b      	adds	r3, r7, r1
 8005202:	2203      	movs	r2, #3
 8005204:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005206:	187b      	adds	r3, r7, r1
 8005208:	2200      	movs	r2, #0
 800520a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800520c:	187a      	adds	r2, r7, r1
 800520e:	23a0      	movs	r3, #160	; 0xa0
 8005210:	05db      	lsls	r3, r3, #23
 8005212:	0011      	movs	r1, r2
 8005214:	0018      	movs	r0, r3
 8005216:	f001 f8ff 	bl	8006418 <HAL_GPIO_Init>

    /* USER CODE BEGIN ADC1_MspInit 1 */

    /* USER CODE END ADC1_MspInit 1 */
  }
}
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	46bd      	mov	sp, r7
 800521e:	b017      	add	sp, #92	; 0x5c
 8005220:	bd90      	pop	{r4, r7, pc}
 8005222:	46c0      	nop			; (mov r8, r8)
 8005224:	40012400 	.word	0x40012400
 8005228:	40021000 	.word	0x40021000

0800522c <HAL_SPI_MspInit>:
 * @brief SPI MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 800522c:	b590      	push	{r4, r7, lr}
 800522e:	b08b      	sub	sp, #44	; 0x2c
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005234:	2414      	movs	r4, #20
 8005236:	193b      	adds	r3, r7, r4
 8005238:	0018      	movs	r0, r3
 800523a:	2314      	movs	r3, #20
 800523c:	001a      	movs	r2, r3
 800523e:	2100      	movs	r1, #0
 8005240:	f005 fd73 	bl	800ad2a <memset>
  if (hspi->Instance == SPI1) {
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a1f      	ldr	r2, [pc, #124]	; (80052c8 <HAL_SPI_MspInit+0x9c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d138      	bne.n	80052c0 <HAL_SPI_MspInit+0x94>
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800524e:	4b1f      	ldr	r3, [pc, #124]	; (80052cc <HAL_SPI_MspInit+0xa0>)
 8005250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005252:	4b1e      	ldr	r3, [pc, #120]	; (80052cc <HAL_SPI_MspInit+0xa0>)
 8005254:	2180      	movs	r1, #128	; 0x80
 8005256:	0149      	lsls	r1, r1, #5
 8005258:	430a      	orrs	r2, r1
 800525a:	641a      	str	r2, [r3, #64]	; 0x40
 800525c:	4b1b      	ldr	r3, [pc, #108]	; (80052cc <HAL_SPI_MspInit+0xa0>)
 800525e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005260:	2380      	movs	r3, #128	; 0x80
 8005262:	015b      	lsls	r3, r3, #5
 8005264:	4013      	ands	r3, r2
 8005266:	613b      	str	r3, [r7, #16]
 8005268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800526a:	4b18      	ldr	r3, [pc, #96]	; (80052cc <HAL_SPI_MspInit+0xa0>)
 800526c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800526e:	4b17      	ldr	r3, [pc, #92]	; (80052cc <HAL_SPI_MspInit+0xa0>)
 8005270:	2101      	movs	r1, #1
 8005272:	430a      	orrs	r2, r1
 8005274:	635a      	str	r2, [r3, #52]	; 0x34
 8005276:	4b15      	ldr	r3, [pc, #84]	; (80052cc <HAL_SPI_MspInit+0xa0>)
 8005278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527a:	2201      	movs	r2, #1
 800527c:	4013      	ands	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_6 | GPIO_PIN_7;
 8005282:	0021      	movs	r1, r4
 8005284:	187b      	adds	r3, r7, r1
 8005286:	22c2      	movs	r2, #194	; 0xc2
 8005288:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800528a:	187b      	adds	r3, r7, r1
 800528c:	2202      	movs	r2, #2
 800528e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005290:	187b      	adds	r3, r7, r1
 8005292:	2200      	movs	r2, #0
 8005294:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005296:	187b      	adds	r3, r7, r1
 8005298:	2200      	movs	r2, #0
 800529a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800529c:	187b      	adds	r3, r7, r1
 800529e:	2200      	movs	r2, #0
 80052a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052a2:	187a      	adds	r2, r7, r1
 80052a4:	23a0      	movs	r3, #160	; 0xa0
 80052a6:	05db      	lsls	r3, r3, #23
 80052a8:	0011      	movs	r1, r2
 80052aa:	0018      	movs	r0, r3
 80052ac:	f001 f8b4 	bl	8006418 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80052b0:	2200      	movs	r2, #0
 80052b2:	2100      	movs	r1, #0
 80052b4:	2019      	movs	r0, #25
 80052b6:	f000 ffb1 	bl	800621c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80052ba:	2019      	movs	r0, #25
 80052bc:	f000 ffc3 	bl	8006246 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI1_MspInit 1 */

    /* USER CODE END SPI1_MspInit 1 */
  }
}
 80052c0:	46c0      	nop			; (mov r8, r8)
 80052c2:	46bd      	mov	sp, r7
 80052c4:	b00b      	add	sp, #44	; 0x2c
 80052c6:	bd90      	pop	{r4, r7, pc}
 80052c8:	40013000 	.word	0x40013000
 80052cc:	40021000 	.word	0x40021000

080052d0 <HAL_TIM_Base_MspInit>:
 * @brief TIM_Base MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base) {
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  if (htim_base->Instance == TIM2) {
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	2380      	movs	r3, #128	; 0x80
 80052de:	05db      	lsls	r3, r3, #23
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d113      	bne.n	800530c <HAL_TIM_Base_MspInit+0x3c>
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80052e4:	4b0b      	ldr	r3, [pc, #44]	; (8005314 <HAL_TIM_Base_MspInit+0x44>)
 80052e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052e8:	4b0a      	ldr	r3, [pc, #40]	; (8005314 <HAL_TIM_Base_MspInit+0x44>)
 80052ea:	2101      	movs	r1, #1
 80052ec:	430a      	orrs	r2, r1
 80052ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80052f0:	4b08      	ldr	r3, [pc, #32]	; (8005314 <HAL_TIM_Base_MspInit+0x44>)
 80052f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f4:	2201      	movs	r2, #1
 80052f6:	4013      	ands	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80052fc:	2200      	movs	r2, #0
 80052fe:	2101      	movs	r1, #1
 8005300:	200f      	movs	r0, #15
 8005302:	f000 ff8b 	bl	800621c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005306:	200f      	movs	r0, #15
 8005308:	f000 ff9d 	bl	8006246 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }
}
 800530c:	46c0      	nop			; (mov r8, r8)
 800530e:	46bd      	mov	sp, r7
 8005310:	b004      	add	sp, #16
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40021000 	.word	0x40021000

08005318 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8005318:	b590      	push	{r4, r7, lr}
 800531a:	b099      	sub	sp, #100	; 0x64
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005320:	234c      	movs	r3, #76	; 0x4c
 8005322:	18fb      	adds	r3, r7, r3
 8005324:	0018      	movs	r0, r3
 8005326:	2314      	movs	r3, #20
 8005328:	001a      	movs	r2, r3
 800532a:	2100      	movs	r1, #0
 800532c:	f005 fcfd 	bl	800ad2a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005330:	2418      	movs	r4, #24
 8005332:	193b      	adds	r3, r7, r4
 8005334:	0018      	movs	r0, r3
 8005336:	2334      	movs	r3, #52	; 0x34
 8005338:	001a      	movs	r2, r3
 800533a:	2100      	movs	r1, #0
 800533c:	f005 fcf5 	bl	800ad2a <memset>
  if (huart->Instance == USART1) {
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a4d      	ldr	r2, [pc, #308]	; (800547c <HAL_UART_MspInit+0x164>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d146      	bne.n	80053d8 <HAL_UART_MspInit+0xc0>
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /** Initializes the peripherals clocks
     */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800534a:	193b      	adds	r3, r7, r4
 800534c:	2201      	movs	r2, #1
 800534e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8005350:	193b      	adds	r3, r7, r4
 8005352:	2200      	movs	r2, #0
 8005354:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8005356:	193b      	adds	r3, r7, r4
 8005358:	0018      	movs	r0, r3
 800535a:	f001 ff61 	bl	8007220 <HAL_RCCEx_PeriphCLKConfig>
 800535e:	1e03      	subs	r3, r0, #0
 8005360:	d001      	beq.n	8005366 <HAL_UART_MspInit+0x4e>
      Error_Handler();
 8005362:	f7ff fe61 	bl	8005028 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005366:	4b46      	ldr	r3, [pc, #280]	; (8005480 <HAL_UART_MspInit+0x168>)
 8005368:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800536a:	4b45      	ldr	r3, [pc, #276]	; (8005480 <HAL_UART_MspInit+0x168>)
 800536c:	2180      	movs	r1, #128	; 0x80
 800536e:	01c9      	lsls	r1, r1, #7
 8005370:	430a      	orrs	r2, r1
 8005372:	641a      	str	r2, [r3, #64]	; 0x40
 8005374:	4b42      	ldr	r3, [pc, #264]	; (8005480 <HAL_UART_MspInit+0x168>)
 8005376:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005378:	2380      	movs	r3, #128	; 0x80
 800537a:	01db      	lsls	r3, r3, #7
 800537c:	4013      	ands	r3, r2
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005382:	4b3f      	ldr	r3, [pc, #252]	; (8005480 <HAL_UART_MspInit+0x168>)
 8005384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005386:	4b3e      	ldr	r3, [pc, #248]	; (8005480 <HAL_UART_MspInit+0x168>)
 8005388:	2102      	movs	r1, #2
 800538a:	430a      	orrs	r2, r1
 800538c:	635a      	str	r2, [r3, #52]	; 0x34
 800538e:	4b3c      	ldr	r3, [pc, #240]	; (8005480 <HAL_UART_MspInit+0x168>)
 8005390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005392:	2202      	movs	r2, #2
 8005394:	4013      	ands	r3, r2
 8005396:	613b      	str	r3, [r7, #16]
 8005398:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 800539a:	214c      	movs	r1, #76	; 0x4c
 800539c:	187b      	adds	r3, r7, r1
 800539e:	22c0      	movs	r2, #192	; 0xc0
 80053a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a2:	187b      	adds	r3, r7, r1
 80053a4:	2202      	movs	r2, #2
 80053a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a8:	187b      	adds	r3, r7, r1
 80053aa:	2200      	movs	r2, #0
 80053ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053ae:	187b      	adds	r3, r7, r1
 80053b0:	2200      	movs	r2, #0
 80053b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80053b4:	187b      	adds	r3, r7, r1
 80053b6:	2200      	movs	r2, #0
 80053b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053ba:	187b      	adds	r3, r7, r1
 80053bc:	4a31      	ldr	r2, [pc, #196]	; (8005484 <HAL_UART_MspInit+0x16c>)
 80053be:	0019      	movs	r1, r3
 80053c0:	0010      	movs	r0, r2
 80053c2:	f001 f829 	bl	8006418 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80053c6:	2200      	movs	r2, #0
 80053c8:	2102      	movs	r1, #2
 80053ca:	201b      	movs	r0, #27
 80053cc:	f000 ff26 	bl	800621c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80053d0:	201b      	movs	r0, #27
 80053d2:	f000 ff38 	bl	8006246 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
}
 80053d6:	e04c      	b.n	8005472 <HAL_UART_MspInit+0x15a>
  } else if (huart->Instance == USART2) {
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a2a      	ldr	r2, [pc, #168]	; (8005488 <HAL_UART_MspInit+0x170>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d147      	bne.n	8005472 <HAL_UART_MspInit+0x15a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80053e2:	2118      	movs	r1, #24
 80053e4:	187b      	adds	r3, r7, r1
 80053e6:	2202      	movs	r2, #2
 80053e8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80053ea:	187b      	adds	r3, r7, r1
 80053ec:	2200      	movs	r2, #0
 80053ee:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80053f0:	187b      	adds	r3, r7, r1
 80053f2:	0018      	movs	r0, r3
 80053f4:	f001 ff14 	bl	8007220 <HAL_RCCEx_PeriphCLKConfig>
 80053f8:	1e03      	subs	r3, r0, #0
 80053fa:	d001      	beq.n	8005400 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 80053fc:	f7ff fe14 	bl	8005028 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005400:	4b1f      	ldr	r3, [pc, #124]	; (8005480 <HAL_UART_MspInit+0x168>)
 8005402:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005404:	4b1e      	ldr	r3, [pc, #120]	; (8005480 <HAL_UART_MspInit+0x168>)
 8005406:	2180      	movs	r1, #128	; 0x80
 8005408:	0289      	lsls	r1, r1, #10
 800540a:	430a      	orrs	r2, r1
 800540c:	63da      	str	r2, [r3, #60]	; 0x3c
 800540e:	4b1c      	ldr	r3, [pc, #112]	; (8005480 <HAL_UART_MspInit+0x168>)
 8005410:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005412:	2380      	movs	r3, #128	; 0x80
 8005414:	029b      	lsls	r3, r3, #10
 8005416:	4013      	ands	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800541c:	4b18      	ldr	r3, [pc, #96]	; (8005480 <HAL_UART_MspInit+0x168>)
 800541e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005420:	4b17      	ldr	r3, [pc, #92]	; (8005480 <HAL_UART_MspInit+0x168>)
 8005422:	2101      	movs	r1, #1
 8005424:	430a      	orrs	r2, r1
 8005426:	635a      	str	r2, [r3, #52]	; 0x34
 8005428:	4b15      	ldr	r3, [pc, #84]	; (8005480 <HAL_UART_MspInit+0x168>)
 800542a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800542c:	2201      	movs	r2, #1
 800542e:	4013      	ands	r3, r2
 8005430:	60bb      	str	r3, [r7, #8]
 8005432:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8005434:	214c      	movs	r1, #76	; 0x4c
 8005436:	187b      	adds	r3, r7, r1
 8005438:	220c      	movs	r2, #12
 800543a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800543c:	187b      	adds	r3, r7, r1
 800543e:	2202      	movs	r2, #2
 8005440:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005442:	187b      	adds	r3, r7, r1
 8005444:	2200      	movs	r2, #0
 8005446:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005448:	187b      	adds	r3, r7, r1
 800544a:	2200      	movs	r2, #0
 800544c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800544e:	187b      	adds	r3, r7, r1
 8005450:	2201      	movs	r2, #1
 8005452:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005454:	187a      	adds	r2, r7, r1
 8005456:	23a0      	movs	r3, #160	; 0xa0
 8005458:	05db      	lsls	r3, r3, #23
 800545a:	0011      	movs	r1, r2
 800545c:	0018      	movs	r0, r3
 800545e:	f000 ffdb 	bl	8006418 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005462:	2200      	movs	r2, #0
 8005464:	2100      	movs	r1, #0
 8005466:	201c      	movs	r0, #28
 8005468:	f000 fed8 	bl	800621c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800546c:	201c      	movs	r0, #28
 800546e:	f000 feea 	bl	8006246 <HAL_NVIC_EnableIRQ>
}
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	46bd      	mov	sp, r7
 8005476:	b019      	add	sp, #100	; 0x64
 8005478:	bd90      	pop	{r4, r7, pc}
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	40013800 	.word	0x40013800
 8005480:	40021000 	.word	0x40021000
 8005484:	50000400 	.word	0x50000400
 8005488:	40004400 	.word	0x40004400

0800548c <NMI_Handler>:
/*           Cortex-M0+ Processor Interruption and Exception Handlers */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8005490:	e7fe      	b.n	8005490 <NMI_Handler+0x4>

08005492 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8005492:	b580      	push	{r7, lr}
 8005494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1) {
 8005496:	e7fe      	b.n	8005496 <HardFault_Handler+0x4>

08005498 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800549c:	46c0      	nop			; (mov r8, r8)
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80054a2:	b580      	push	{r7, lr}
 80054a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80054a6:	46c0      	nop			; (mov r8, r8)
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80054b0:	f000 f914 	bl	80056dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80054b4:	46c0      	nop			; (mov r8, r8)
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <EXTI4_15_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line 4 to 15 interrupts.
 */
void EXTI4_15_IRQHandler(void) {
 80054ba:	b580      	push	{r7, lr}
 80054bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO2_Pin);
 80054be:	2010      	movs	r0, #16
 80054c0:	f001 f964 	bl	800678c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 80054c4:	2020      	movs	r0, #32
 80054c6:	f001 f961 	bl	800678c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80054ca:	46c0      	nop			; (mov r8, r8)
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80054d4:	4b03      	ldr	r3, [pc, #12]	; (80054e4 <TIM2_IRQHandler+0x14>)
 80054d6:	0018      	movs	r0, r3
 80054d8:	f002 ffb0 	bl	800843c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80054dc:	46c0      	nop			; (mov r8, r8)
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	20000470 	.word	0x20000470

080054e8 <SPI1_IRQHandler>:

/**
 * @brief This function handles SPI1 global interrupt.
 */
void SPI1_IRQHandler(void) {
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80054ec:	4b03      	ldr	r3, [pc, #12]	; (80054fc <SPI1_IRQHandler+0x14>)
 80054ee:	0018      	movs	r0, r3
 80054f0:	f002 fc30 	bl	8007d54 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80054f4:	46c0      	nop			; (mov r8, r8)
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	46c0      	nop			; (mov r8, r8)
 80054fc:	2000040c 	.word	0x2000040c

08005500 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt / USART1 wake-up
 * interrupt through EXTI line 25.
 */
void USART1_IRQHandler(void) {
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005504:	4b03      	ldr	r3, [pc, #12]	; (8005514 <USART1_IRQHandler+0x14>)
 8005506:	0018      	movs	r0, r3
 8005508:	f003 fcc4 	bl	8008e94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800550c:	46c0      	nop			; (mov r8, r8)
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	46c0      	nop			; (mov r8, r8)
 8005514:	200004bc 	.word	0x200004bc

08005518 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt / USART2 wake-up
 * interrupt through EXTI line 26.
 */
void USART2_IRQHandler(void) {
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800551c:	4b03      	ldr	r3, [pc, #12]	; (800552c <USART2_IRQHandler+0x14>)
 800551e:	0018      	movs	r0, r3
 8005520:	f003 fcb8 	bl	8008e94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005524:	46c0      	nop			; (mov r8, r8)
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	46c0      	nop			; (mov r8, r8)
 800552c:	2000054c 	.word	0x2000054c

08005530 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr) {
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end;             /* Symbol defined in the linker script */
  extern uint8_t _estack;          /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005538:	4a14      	ldr	r2, [pc, #80]	; (800558c <_sbrk+0x5c>)
 800553a:	4b15      	ldr	r3, [pc, #84]	; (8005590 <_sbrk+0x60>)
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end) {
 8005544:	4b13      	ldr	r3, [pc, #76]	; (8005594 <_sbrk+0x64>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d102      	bne.n	8005552 <_sbrk+0x22>
    __sbrk_heap_end = &_end;
 800554c:	4b11      	ldr	r3, [pc, #68]	; (8005594 <_sbrk+0x64>)
 800554e:	4a12      	ldr	r2, [pc, #72]	; (8005598 <_sbrk+0x68>)
 8005550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap) {
 8005552:	4b10      	ldr	r3, [pc, #64]	; (8005594 <_sbrk+0x64>)
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	18d3      	adds	r3, r2, r3
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	429a      	cmp	r2, r3
 800555e:	d207      	bcs.n	8005570 <_sbrk+0x40>
    errno = ENOMEM;
 8005560:	f005 fbb0 	bl	800acc4 <__errno>
 8005564:	0003      	movs	r3, r0
 8005566:	220c      	movs	r2, #12
 8005568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800556a:	2301      	movs	r3, #1
 800556c:	425b      	negs	r3, r3
 800556e:	e009      	b.n	8005584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005570:	4b08      	ldr	r3, [pc, #32]	; (8005594 <_sbrk+0x64>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005576:	4b07      	ldr	r3, [pc, #28]	; (8005594 <_sbrk+0x64>)
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	18d2      	adds	r2, r2, r3
 800557e:	4b05      	ldr	r3, [pc, #20]	; (8005594 <_sbrk+0x64>)
 8005580:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8005582:	68fb      	ldr	r3, [r7, #12]
}
 8005584:	0018      	movs	r0, r3
 8005586:	46bd      	mov	sp, r7
 8005588:	b006      	add	sp, #24
 800558a:	bd80      	pop	{r7, pc}
 800558c:	20009000 	.word	0x20009000
 8005590:	00000400 	.word	0x00000400
 8005594:	20000670 	.word	0x20000670
 8005598:	20000690 	.word	0x20000690

0800559c <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR =
 80055a0:	4b03      	ldr	r3, [pc, #12]	; (80055b0 <SystemInit+0x14>)
 80055a2:	2280      	movs	r2, #128	; 0x80
 80055a4:	0512      	lsls	r2, r2, #20
 80055a6:	609a      	str	r2, [r3, #8]
      VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif                                         /* USER_VECT_TAB_ADDRESS */
}
 80055a8:	46c0      	nop			; (mov r8, r8)
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	46c0      	nop			; (mov r8, r8)
 80055b0:	e000ed00 	.word	0xe000ed00

080055b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80055b4:	480d      	ldr	r0, [pc, #52]	; (80055ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80055b6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80055b8:	f7ff fff0 	bl	800559c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80055bc:	480c      	ldr	r0, [pc, #48]	; (80055f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80055be:	490d      	ldr	r1, [pc, #52]	; (80055f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80055c0:	4a0d      	ldr	r2, [pc, #52]	; (80055f8 <LoopForever+0xe>)
  movs r3, #0
 80055c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055c4:	e002      	b.n	80055cc <LoopCopyDataInit>

080055c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055ca:	3304      	adds	r3, #4

080055cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055d0:	d3f9      	bcc.n	80055c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055d2:	4a0a      	ldr	r2, [pc, #40]	; (80055fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80055d4:	4c0a      	ldr	r4, [pc, #40]	; (8005600 <LoopForever+0x16>)
  movs r3, #0
 80055d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055d8:	e001      	b.n	80055de <LoopFillZerobss>

080055da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055dc:	3204      	adds	r2, #4

080055de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055e0:	d3fb      	bcc.n	80055da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80055e2:	f005 fb75 	bl	800acd0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80055e6:	f7ff f8e1 	bl	80047ac <main>

080055ea <LoopForever>:

LoopForever:
  b LoopForever
 80055ea:	e7fe      	b.n	80055ea <LoopForever>
  ldr   r0, =_estack
 80055ec:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80055f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055f4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80055f8:	0800c1cc 	.word	0x0800c1cc
  ldr r2, =_sbss
 80055fc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8005600:	20000690 	.word	0x20000690

08005604 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005604:	e7fe      	b.n	8005604 <ADC1_COMP_IRQHandler>
	...

08005608 <HAL_Init>:
 * incrementing: the tick variable counter is incremented each 1ms in the
 * SysTick_Handler() interrupt handler.
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800560e:	1dfb      	adds	r3, r7, #7
 8005610:	2200      	movs	r2, #0
 8005612:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005614:	4b0b      	ldr	r3, [pc, #44]	; (8005644 <HAL_Init+0x3c>)
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <HAL_Init+0x3c>)
 800561a:	2180      	movs	r1, #128	; 0x80
 800561c:	0049      	lsls	r1, r1, #1
 800561e:	430a      	orrs	r2, r1
 8005620:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after
   * Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK) {
 8005622:	2001      	movs	r0, #1
 8005624:	f000 f810 	bl	8005648 <HAL_InitTick>
 8005628:	1e03      	subs	r3, r0, #0
 800562a:	d003      	beq.n	8005634 <HAL_Init+0x2c>
    status = HAL_ERROR;
 800562c:	1dfb      	adds	r3, r7, #7
 800562e:	2201      	movs	r2, #1
 8005630:	701a      	strb	r2, [r3, #0]
 8005632:	e001      	b.n	8005638 <HAL_Init+0x30>
  } else {
    /* Init the low level hardware */
    HAL_MspInit();
 8005634:	f7ff fd76 	bl	8005124 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005638:	1dfb      	adds	r3, r7, #7
 800563a:	781b      	ldrb	r3, [r3, #0]
}
 800563c:	0018      	movs	r0, r3
 800563e:	46bd      	mov	sp, r7
 8005640:	b002      	add	sp, #8
 8005642:	bd80      	pop	{r7, pc}
 8005644:	40022000 	.word	0x40022000

08005648 <HAL_InitTick>:
 * declared as __weak  to be overwritten  in case of other implementation  in
 * user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8005648:	b590      	push	{r4, r7, lr}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005650:	230f      	movs	r3, #15
 8005652:	18fb      	adds	r3, r7, r3
 8005654:	2200      	movs	r2, #0
 8005656:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that
   * doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U) {
 8005658:	4b1d      	ldr	r3, [pc, #116]	; (80056d0 <HAL_InitTick+0x88>)
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d02b      	beq.n	80056b8 <HAL_InitTick+0x70>
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) ==
 8005660:	4b1c      	ldr	r3, [pc, #112]	; (80056d4 <HAL_InitTick+0x8c>)
 8005662:	681c      	ldr	r4, [r3, #0]
 8005664:	4b1a      	ldr	r3, [pc, #104]	; (80056d0 <HAL_InitTick+0x88>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	0019      	movs	r1, r3
 800566a:	23fa      	movs	r3, #250	; 0xfa
 800566c:	0098      	lsls	r0, r3, #2
 800566e:	f7fa fd5d 	bl	800012c <__udivsi3>
 8005672:	0003      	movs	r3, r0
 8005674:	0019      	movs	r1, r3
 8005676:	0020      	movs	r0, r4
 8005678:	f7fa fd58 	bl	800012c <__udivsi3>
 800567c:	0003      	movs	r3, r0
 800567e:	0018      	movs	r0, r3
 8005680:	f000 fdf1 	bl	8006266 <HAL_SYSTICK_Config>
 8005684:	1e03      	subs	r3, r0, #0
 8005686:	d112      	bne.n	80056ae <HAL_InitTick+0x66>
        0U) {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b03      	cmp	r3, #3
 800568c:	d80a      	bhi.n	80056a4 <HAL_InitTick+0x5c>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	2301      	movs	r3, #1
 8005692:	425b      	negs	r3, r3
 8005694:	2200      	movs	r2, #0
 8005696:	0018      	movs	r0, r3
 8005698:	f000 fdc0 	bl	800621c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800569c:	4b0e      	ldr	r3, [pc, #56]	; (80056d8 <HAL_InitTick+0x90>)
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	601a      	str	r2, [r3, #0]
 80056a2:	e00d      	b.n	80056c0 <HAL_InitTick+0x78>
      } else {
        status = HAL_ERROR;
 80056a4:	230f      	movs	r3, #15
 80056a6:	18fb      	adds	r3, r7, r3
 80056a8:	2201      	movs	r2, #1
 80056aa:	701a      	strb	r2, [r3, #0]
 80056ac:	e008      	b.n	80056c0 <HAL_InitTick+0x78>
      }
    } else {
      status = HAL_ERROR;
 80056ae:	230f      	movs	r3, #15
 80056b0:	18fb      	adds	r3, r7, r3
 80056b2:	2201      	movs	r2, #1
 80056b4:	701a      	strb	r2, [r3, #0]
 80056b6:	e003      	b.n	80056c0 <HAL_InitTick+0x78>
    }
  } else {
    status = HAL_ERROR;
 80056b8:	230f      	movs	r3, #15
 80056ba:	18fb      	adds	r3, r7, r3
 80056bc:	2201      	movs	r2, #1
 80056be:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80056c0:	230f      	movs	r3, #15
 80056c2:	18fb      	adds	r3, r7, r3
 80056c4:	781b      	ldrb	r3, [r3, #0]
}
 80056c6:	0018      	movs	r0, r3
 80056c8:	46bd      	mov	sp, r7
 80056ca:	b005      	add	sp, #20
 80056cc:	bd90      	pop	{r4, r7, pc}
 80056ce:	46c0      	nop			; (mov r8, r8)
 80056d0:	20000008 	.word	0x20000008
 80056d4:	20000000 	.word	0x20000000
 80056d8:	20000004 	.word	0x20000004

080056dc <HAL_IncTick>:
 *       in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) { uwTick += (uint32_t)uwTickFreq; }
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
 80056e0:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <HAL_IncTick+0x1c>)
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	001a      	movs	r2, r3
 80056e6:	4b05      	ldr	r3, [pc, #20]	; (80056fc <HAL_IncTick+0x20>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	18d2      	adds	r2, r2, r3
 80056ec:	4b03      	ldr	r3, [pc, #12]	; (80056fc <HAL_IncTick+0x20>)
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	46c0      	nop			; (mov r8, r8)
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	46c0      	nop			; (mov r8, r8)
 80056f8:	20000008 	.word	0x20000008
 80056fc:	2000067c 	.word	0x2000067c

08005700 <HAL_GetTick>:
 * @brief Provides a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) { return uwTick; }
 8005700:	b580      	push	{r7, lr}
 8005702:	af00      	add	r7, sp, #0
 8005704:	4b02      	ldr	r3, [pc, #8]	; (8005710 <HAL_GetTick+0x10>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	0018      	movs	r0, r3
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	46c0      	nop			; (mov r8, r8)
 8005710:	2000067c 	.word	0x2000067c

08005714 <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay  specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800571c:	f7ff fff0 	bl	8005700 <HAL_GetTick>
 8005720:	0003      	movs	r3, r0
 8005722:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY) {
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	3301      	adds	r3, #1
 800572c:	d005      	beq.n	800573a <HAL_Delay+0x26>
    wait += (uint32_t)(uwTickFreq);
 800572e:	4b0a      	ldr	r3, [pc, #40]	; (8005758 <HAL_Delay+0x44>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	001a      	movs	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	189b      	adds	r3, r3, r2
 8005738:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait) {
 800573a:	46c0      	nop			; (mov r8, r8)
 800573c:	f7ff ffe0 	bl	8005700 <HAL_GetTick>
 8005740:	0002      	movs	r2, r0
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	429a      	cmp	r2, r3
 800574a:	d8f7      	bhi.n	800573c <HAL_Delay+0x28>
  }
}
 800574c:	46c0      	nop			; (mov r8, r8)
 800574e:	46c0      	nop			; (mov r8, r8)
 8005750:	46bd      	mov	sp, r7
 8005752:	b004      	add	sp, #16
 8005754:	bd80      	pop	{r7, pc}
 8005756:	46c0      	nop			; (mov r8, r8)
 8005758:	20000008 	.word	0x20000008

0800575c <HAL_SYSCFG_StrobeDBattpinsConfig>:
 * following values:
 *         @arg @ref SYSCFG_UCPD1_STROBE
 *         @arg @ref SYSCFG_UCPD2_STROBE
 * @retval None
 */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery) {
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery
   * settings */
  MODIFY_REG(SYSCFG->CFGR1,
 8005764:	4b06      	ldr	r3, [pc, #24]	; (8005780 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a06      	ldr	r2, [pc, #24]	; (8005784 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800576a:	4013      	ands	r3, r2
 800576c:	0019      	movs	r1, r3
 800576e:	4b04      	ldr	r3, [pc, #16]	; (8005780 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	430a      	orrs	r2, r1
 8005774:	601a      	str	r2, [r3, #0]
             (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE),
             ConfigDeadBattery);
}
 8005776:	46c0      	nop			; (mov r8, r8)
 8005778:	46bd      	mov	sp, r7
 800577a:	b002      	add	sp, #8
 800577c:	bd80      	pop	{r7, pc}
 800577e:	46c0      	nop			; (mov r8, r8)
 8005780:	40010000 	.word	0x40010000
 8005784:	fffff9ff 	.word	0xfffff9ff

08005788 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a05      	ldr	r2, [pc, #20]	; (80057ac <LL_ADC_SetCommonPathInternalCh+0x24>)
 8005798:	401a      	ands	r2, r3
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	431a      	orrs	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	601a      	str	r2, [r3, #0]
}
 80057a2:	46c0      	nop			; (mov r8, r8)
 80057a4:	46bd      	mov	sp, r7
 80057a6:	b002      	add	sp, #8
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	46c0      	nop			; (mov r8, r8)
 80057ac:	fe3fffff 	.word	0xfe3fffff

080057b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	23e0      	movs	r3, #224	; 0xe0
 80057be:	045b      	lsls	r3, r3, #17
 80057c0:	4013      	ands	r3, r2
}
 80057c2:	0018      	movs	r0, r3
 80057c4:	46bd      	mov	sp, r7
 80057c6:	b002      	add	sp, #8
 80057c8:	bd80      	pop	{r7, pc}

080057ca <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	2104      	movs	r1, #4
 80057de:	400a      	ands	r2, r1
 80057e0:	2107      	movs	r1, #7
 80057e2:	4091      	lsls	r1, r2
 80057e4:	000a      	movs	r2, r1
 80057e6:	43d2      	mvns	r2, r2
 80057e8:	401a      	ands	r2, r3
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	2104      	movs	r1, #4
 80057ee:	400b      	ands	r3, r1
 80057f0:	6879      	ldr	r1, [r7, #4]
 80057f2:	4099      	lsls	r1, r3
 80057f4:	000b      	movs	r3, r1
 80057f6:	431a      	orrs	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80057fc:	46c0      	nop			; (mov r8, r8)
 80057fe:	46bd      	mov	sp, r7
 8005800:	b004      	add	sp, #16
 8005802:	bd80      	pop	{r7, pc}

08005804 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	211f      	movs	r1, #31
 8005818:	400a      	ands	r2, r1
 800581a:	210f      	movs	r1, #15
 800581c:	4091      	lsls	r1, r2
 800581e:	000a      	movs	r2, r1
 8005820:	43d2      	mvns	r2, r2
 8005822:	401a      	ands	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	0e9b      	lsrs	r3, r3, #26
 8005828:	210f      	movs	r1, #15
 800582a:	4019      	ands	r1, r3
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	201f      	movs	r0, #31
 8005830:	4003      	ands	r3, r0
 8005832:	4099      	lsls	r1, r3
 8005834:	000b      	movs	r3, r1
 8005836:	431a      	orrs	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800583c:	46c0      	nop			; (mov r8, r8)
 800583e:	46bd      	mov	sp, r7
 8005840:	b004      	add	sp, #16
 8005842:	bd80      	pop	{r7, pc}

08005844 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	035b      	lsls	r3, r3, #13
 8005856:	0b5b      	lsrs	r3, r3, #13
 8005858:	431a      	orrs	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800585e:	46c0      	nop			; (mov r8, r8)
 8005860:	46bd      	mov	sp, r7
 8005862:	b002      	add	sp, #8
 8005864:	bd80      	pop	{r7, pc}

08005866 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b082      	sub	sp, #8
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
 800586e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	0352      	lsls	r2, r2, #13
 8005878:	0b52      	lsrs	r2, r2, #13
 800587a:	43d2      	mvns	r2, r2
 800587c:	401a      	ands	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005882:	46c0      	nop			; (mov r8, r8)
 8005884:	46bd      	mov	sp, r7
 8005886:	b002      	add	sp, #8
 8005888:	bd80      	pop	{r7, pc}
	...

0800588c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	0212      	lsls	r2, r2, #8
 80058a0:	43d2      	mvns	r2, r2
 80058a2:	401a      	ands	r2, r3
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	021b      	lsls	r3, r3, #8
 80058a8:	6879      	ldr	r1, [r7, #4]
 80058aa:	400b      	ands	r3, r1
 80058ac:	4904      	ldr	r1, [pc, #16]	; (80058c0 <LL_ADC_SetChannelSamplingTime+0x34>)
 80058ae:	400b      	ands	r3, r1
 80058b0:	431a      	orrs	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80058b6:	46c0      	nop			; (mov r8, r8)
 80058b8:	46bd      	mov	sp, r7
 80058ba:	b004      	add	sp, #16
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	46c0      	nop			; (mov r8, r8)
 80058c0:	07ffff00 	.word	0x07ffff00

080058c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	4a05      	ldr	r2, [pc, #20]	; (80058e8 <LL_ADC_EnableInternalRegulator+0x24>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	2280      	movs	r2, #128	; 0x80
 80058d6:	0552      	lsls	r2, r2, #21
 80058d8:	431a      	orrs	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80058de:	46c0      	nop			; (mov r8, r8)
 80058e0:	46bd      	mov	sp, r7
 80058e2:	b002      	add	sp, #8
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	46c0      	nop			; (mov r8, r8)
 80058e8:	6fffffe8 	.word	0x6fffffe8

080058ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	2380      	movs	r3, #128	; 0x80
 80058fa:	055b      	lsls	r3, r3, #21
 80058fc:	401a      	ands	r2, r3
 80058fe:	2380      	movs	r3, #128	; 0x80
 8005900:	055b      	lsls	r3, r3, #21
 8005902:	429a      	cmp	r2, r3
 8005904:	d101      	bne.n	800590a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8005906:	2301      	movs	r3, #1
 8005908:	e000      	b.n	800590c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800590a:	2300      	movs	r3, #0
}
 800590c:	0018      	movs	r0, r3
 800590e:	46bd      	mov	sp, r7
 8005910:	b002      	add	sp, #8
 8005912:	bd80      	pop	{r7, pc}

08005914 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	2201      	movs	r2, #1
 8005922:	4013      	ands	r3, r2
 8005924:	2b01      	cmp	r3, #1
 8005926:	d101      	bne.n	800592c <LL_ADC_IsEnabled+0x18>
 8005928:	2301      	movs	r3, #1
 800592a:	e000      	b.n	800592e <LL_ADC_IsEnabled+0x1a>
 800592c:	2300      	movs	r3, #0
}
 800592e:	0018      	movs	r0, r3
 8005930:	46bd      	mov	sp, r7
 8005932:	b002      	add	sp, #8
 8005934:	bd80      	pop	{r7, pc}

08005936 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b082      	sub	sp, #8
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	2204      	movs	r2, #4
 8005944:	4013      	ands	r3, r2
 8005946:	2b04      	cmp	r3, #4
 8005948:	d101      	bne.n	800594e <LL_ADC_REG_IsConversionOngoing+0x18>
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800594e:	2300      	movs	r3, #0
}
 8005950:	0018      	movs	r0, r3
 8005952:	46bd      	mov	sp, r7
 8005954:	b002      	add	sp, #8
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_ADC_Init>:
 *         ADC and scope of regular group. For parameters details, see comments
 *         of structure "ADC_InitTypeDef".
 * @param hadc ADC handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc) {
 8005958:	b580      	push	{r7, lr}
 800595a:	b088      	sub	sp, #32
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005960:	231f      	movs	r3, #31
 8005962:	18fb      	adds	r3, r7, r3
 8005964:	2200      	movs	r2, #0
 8005966:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8005968:	2300      	movs	r3, #0
 800596a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800596c:	2300      	movs	r3, #0
 800596e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005970:	2300      	movs	r3, #0
 8005972:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL) {
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <HAL_ADC_Init+0x26>
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e1b1      	b.n	8005ce2 <HAL_ADC_Init+0x38a>
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) &&
                 (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET) {
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10a      	bne.n	800599c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	0018      	movs	r0, r3
 800598a:	f7ff fbf3 	bl	8005174 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2254      	movs	r2, #84	; 0x54
 8005998:	2100      	movs	r1, #0
 800599a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL) {
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	0018      	movs	r0, r3
 80059a2:	f7ff ffa3 	bl	80058ec <LL_ADC_IsInternalRegulatorEnabled>
 80059a6:	1e03      	subs	r3, r0, #0
 80059a8:	d115      	bne.n	80059d6 <HAL_ADC_Init+0x7e>
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	0018      	movs	r0, r3
 80059b0:	f7ff ff88 	bl	80058c4 <LL_ADC_EnableInternalRegulator>
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) *
                       ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80059b4:	4bcd      	ldr	r3, [pc, #820]	; (8005cec <HAL_ADC_Init+0x394>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	49cd      	ldr	r1, [pc, #820]	; (8005cf0 <HAL_ADC_Init+0x398>)
 80059ba:	0018      	movs	r0, r3
 80059bc:	f7fa fbb6 	bl	800012c <__udivsi3>
 80059c0:	0003      	movs	r3, r0
 80059c2:	3301      	adds	r3, #1
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) *
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL) {
 80059c8:	e002      	b.n	80059d0 <HAL_ADC_Init+0x78>
      wait_loop_index--;
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	3b01      	subs	r3, #1
 80059ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL) {
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1f9      	bne.n	80059ca <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL) {
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	0018      	movs	r0, r3
 80059dc:	f7ff ff86 	bl	80058ec <LL_ADC_IsInternalRegulatorEnabled>
 80059e0:	1e03      	subs	r3, r0, #0
 80059e2:	d10f      	bne.n	8005a04 <HAL_ADC_Init+0xac>
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e8:	2210      	movs	r2, #16
 80059ea:	431a      	orrs	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059f4:	2201      	movs	r2, #1
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80059fc:	231f      	movs	r3, #31
 80059fe:	18fb      	adds	r3, r7, r3
 8005a00:	2201      	movs	r2, #1
 8005a02:	701a      	strb	r2, [r3, #0]
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going =
      LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	0018      	movs	r0, r3
 8005a0a:	f7ff ff94 	bl	8005936 <LL_ADC_REG_IsConversionOngoing>
 8005a0e:	0003      	movs	r3, r0
 8005a10:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL) &&
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a16:	2210      	movs	r2, #16
 8005a18:	4013      	ands	r3, r2
 8005a1a:	d000      	beq.n	8005a1e <HAL_ADC_Init+0xc6>
 8005a1c:	e154      	b.n	8005cc8 <HAL_ADC_Init+0x370>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d000      	beq.n	8005a26 <HAL_ADC_Init+0xce>
 8005a24:	e150      	b.n	8005cc8 <HAL_ADC_Init+0x370>
      (tmp_adc_reg_is_conversion_on_going == 0UL)) {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY,
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2a:	4ab2      	ldr	r2, [pc, #712]	; (8005cf4 <HAL_ADC_Init+0x39c>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	2202      	movs	r2, #2
 8005a30:	431a      	orrs	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL) {
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	f7ff ff6a 	bl	8005914 <LL_ADC_IsEnabled>
 8005a40:	1e03      	subs	r3, r0, #0
 8005a42:	d156      	bne.n	8005af2 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_RES, hadc->Init.Resolution);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	2218      	movs	r2, #24
 8005a4c:	4393      	bics	r3, r2
 8005a4e:	0019      	movs	r1, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	60da      	str	r2, [r3, #12]

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	0f9b      	lsrs	r3, r3, #30
 8005a62:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	617b      	str	r3, [r7, #20]

      if (hadc->Init.OversamplingMode == ENABLE) {
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	223c      	movs	r2, #60	; 0x3c
 8005a74:	5c9b      	ldrb	r3, [r3, r2]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d111      	bne.n	8005a9e <HAL_ADC_Init+0x146>
        tmpCFGR2 |=
            (ADC_CFGR2_OVSE | (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	0f9b      	lsrs	r3, r3, #30
 8005a80:	079a      	lsls	r2, r3, #30
             hadc->Init.Oversampling.Ratio |
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (ADC_CFGR2_OVSE | (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005a86:	431a      	orrs	r2, r3
             hadc->Init.Oversampling.RightBitShift |
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
             hadc->Init.Oversampling.Ratio |
 8005a8c:	431a      	orrs	r2, r3
             hadc->Init.Oversampling.TriggeredMode);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
             hadc->Init.Oversampling.RightBitShift |
 8005a92:	431a      	orrs	r2, r3
        tmpCFGR2 |=
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	2201      	movs	r2, #1
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	617b      	str	r3, [r7, #20]
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	4a94      	ldr	r2, [pc, #592]	; (8005cf8 <HAL_ADC_Init+0x3a0>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	0019      	movs	r1, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	611a      	str	r2, [r3, #16]
                     ADC_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	23c0      	movs	r3, #192	; 0xc0
 8005aba:	061b      	lsls	r3, r3, #24
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d018      	beq.n	8005af2 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005ac4:	2380      	movs	r3, #128	; 0x80
 8005ac6:	05db      	lsls	r3, r3, #23
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d012      	beq.n	8005af2 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4)) {
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005ad0:	2380      	movs	r3, #128	; 0x80
 8005ad2:	061b      	lsls	r3, r3, #24
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d00c      	beq.n	8005af2 <HAL_ADC_Init+0x19a>
        MODIFY_REG(ADC1_COMMON->CCR, ADC_CCR_PRESC,
 8005ad8:	4b88      	ldr	r3, [pc, #544]	; (8005cfc <HAL_ADC_Init+0x3a4>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a88      	ldr	r2, [pc, #544]	; (8005d00 <HAL_ADC_Init+0x3a8>)
 8005ade:	4013      	ands	r3, r2
 8005ae0:	0019      	movs	r1, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	23f0      	movs	r3, #240	; 0xf0
 8005ae8:	039b      	lsls	r3, r3, #14
 8005aea:	401a      	ands	r2, r3
 8005aec:	4b83      	ldr	r3, [pc, #524]	; (8005cfc <HAL_ADC_Init+0x3a4>)
 8005aee:	430a      	orrs	r2, r1
 8005af0:	601a      	str	r2, [r3, #0]
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |=
        (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	7e1b      	ldrb	r3, [r3, #24]
 8005af6:	039a      	lsls	r2, r3, #14
         ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff) |
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	7e5b      	ldrb	r3, [r3, #25]
 8005afc:	03db      	lsls	r3, r3, #15
        (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8005afe:	431a      	orrs	r2, r3
         ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	7e9b      	ldrb	r3, [r3, #26]
 8005b04:	035b      	lsls	r3, r3, #13
         ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff) |
 8005b06:	431a      	orrs	r2, r3
         ADC_CFGR1_OVERRUN(hadc->Init.Overrun) | hadc->Init.DataAlign |
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <HAL_ADC_Init+0x1be>
 8005b10:	2380      	movs	r3, #128	; 0x80
 8005b12:	015b      	lsls	r3, r3, #5
 8005b14:	e000      	b.n	8005b18 <HAL_ADC_Init+0x1c0>
 8005b16:	2300      	movs	r3, #0
         ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8005b18:	431a      	orrs	r2, r3
         ADC_CFGR1_OVERRUN(hadc->Init.Overrun) | hadc->Init.DataAlign |
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	431a      	orrs	r2, r3
         ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode) |
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	da04      	bge.n	8005b32 <HAL_ADC_Init+0x1da>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	085b      	lsrs	r3, r3, #1
 8005b30:	e001      	b.n	8005b36 <HAL_ADC_Init+0x1de>
 8005b32:	2380      	movs	r3, #128	; 0x80
 8005b34:	039b      	lsls	r3, r3, #14
         ADC_CFGR1_OVERRUN(hadc->Init.Overrun) | hadc->Init.DataAlign |
 8005b36:	431a      	orrs	r2, r3
         ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	212c      	movs	r1, #44	; 0x2c
 8005b3c:	5c5b      	ldrb	r3, [r3, r1]
 8005b3e:	005b      	lsls	r3, r3, #1
         ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode) |
 8005b40:	4313      	orrs	r3, r2
    tmpCFGR1 |=
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled
     */
    if (hadc->Init.DiscontinuousConvMode == ENABLE) {
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	5c9b      	ldrb	r3, [r3, r2]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d115      	bne.n	8005b7e <HAL_ADC_Init+0x226>
      if (hadc->Init.ContinuousConvMode == DISABLE) {
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	7e9b      	ldrb	r3, [r3, #26]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d105      	bne.n	8005b66 <HAL_ADC_Init+0x20e>
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	2280      	movs	r2, #128	; 0x80
 8005b5e:	0252      	lsls	r2, r2, #9
 8005b60:	4313      	orrs	r3, r2
 8005b62:	61bb      	str	r3, [r7, #24]
 8005b64:	e00b      	b.n	8005b7e <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	431a      	orrs	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b76:	2201      	movs	r2, #1
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START) {
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00a      	beq.n	8005b9c <HAL_ADC_Init+0x244>
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b8a:	23e0      	movs	r3, #224	; 0xe0
 8005b8c:	005b      	lsls	r3, r3, #1
 8005b8e:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005b94:	4313      	orrs	r3, r2
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	4a58      	ldr	r2, [pc, #352]	; (8005d04 <HAL_ADC_Init+0x3ac>)
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	0019      	movs	r1, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	60da      	str	r2, [r3, #12]
                   ADC_CFGR1_CONT | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTSEL |
                   ADC_CFGR1_EXTEN | ADC_CFGR1_ALIGN | ADC_CFGR1_SCANDIR |
                   ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	4a53      	ldr	r2, [pc, #332]	; (8005d08 <HAL_ADC_Init+0x3b0>)
 8005bba:	4013      	ands	r3, r2
 8005bbc:	0019      	movs	r1, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_LFTRIG | ADC_CFGR2_OVSE | ADC_CFGR2_OVSR |
                   ADC_CFGR2_OVSS | ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance,
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6818      	ldr	r0, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd0:	001a      	movs	r2, r3
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	f7ff fdf9 	bl	80057ca <LL_ADC_SetSamplingTimeCommonChannels>
                                         LL_ADC_SAMPLINGTIME_COMMON_1,
                                         hadc->Init.SamplingTimeCommon1);
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance,
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6818      	ldr	r0, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	494a      	ldr	r1, [pc, #296]	; (8005d0c <HAL_ADC_Init+0x3b4>)
 8005be2:	001a      	movs	r2, r3
 8005be4:	f7ff fdf1 	bl	80057ca <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE) {
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d109      	bne.n	8005c04 <HAL_ADC_Init+0x2ac>
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2110      	movs	r1, #16
 8005bfc:	4249      	negs	r1, r1
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	629a      	str	r2, [r3, #40]	; 0x28
 8005c02:	e03a      	b.n	8005c7a <HAL_ADC_Init+0x322>
    } else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE) {
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691a      	ldr	r2, [r3, #16]
 8005c08:	2380      	movs	r3, #128	; 0x80
 8005c0a:	039b      	lsls	r3, r3, #14
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d134      	bne.n	8005c7a <HAL_ADC_Init+0x322>
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL;
 8005c10:	2300      	movs	r3, #0
 8005c12:	613b      	str	r3, [r7, #16]
 8005c14:	e00c      	b.n	8005c30 <HAL_ADC_Init+0x2d8>
           ADCGroupRegularSequencerRanksCount < (8UL);
           ADCGroupRegularSequencerRanksCount++) {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
              (ADCGroupRegularSequencerRanksCount * 4UL)) &
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	009b      	lsls	r3, r3, #2
        if (((hadc->ADCGroupRegularSequencerRanks >>
 8005c1e:	40da      	lsrs	r2, r3
 8005c20:	0013      	movs	r3, r2
              (ADCGroupRegularSequencerRanksCount * 4UL)) &
 8005c22:	220f      	movs	r2, #15
 8005c24:	4013      	ands	r3, r2
        if (((hadc->ADCGroupRegularSequencerRanks >>
 8005c26:	2b0f      	cmp	r3, #15
 8005c28:	d006      	beq.n	8005c38 <HAL_ADC_Init+0x2e0>
           ADCGroupRegularSequencerRanksCount++) {
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	613b      	str	r3, [r7, #16]
      for (ADCGroupRegularSequencerRanksCount = 0UL;
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	2b07      	cmp	r3, #7
 8005c34:	d9ef      	bls.n	8005c16 <HAL_ADC_Init+0x2be>
 8005c36:	e000      	b.n	8005c3a <HAL_ADC_Init+0x2e2>
             ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1) {
          break;
 8005c38:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL) {
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d109      	bne.n	8005c54 <HAL_ADC_Init+0x2fc>
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2110      	movs	r1, #16
 8005c4c:	4249      	negs	r1, r1
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	629a      	str	r2, [r3, #40]	; 0x28
 8005c52:	e012      	b.n	8005c7a <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	221c      	movs	r2, #28
 8005c64:	4013      	ands	r3, r2
 8005c66:	2210      	movs	r2, #16
 8005c68:	4252      	negs	r2, r2
 8005c6a:	409a      	lsls	r2, r3
 8005c6c:	0011      	movs	r1, r2
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN |
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	4a23      	ldr	r2, [pc, #140]	; (8005d10 <HAL_ADC_Init+0x3b8>)
 8005c82:	4013      	ands	r3, r2
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d10b      	bne.n	8005ca2 <HAL_ADC_Init+0x34a>
                                   ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES)) ==
        tmpCFGR1) {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL,
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c94:	2203      	movs	r2, #3
 8005c96:	4393      	bics	r3, r2
 8005c98:	2201      	movs	r2, #1
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN |
 8005ca0:	e01c      	b.n	8005cdc <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    } else {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL,
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca6:	2212      	movs	r2, #18
 8005ca8:	4393      	bics	r3, r2
 8005caa:	2210      	movs	r2, #16
 8005cac:	431a      	orrs	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8005cbe:	231f      	movs	r3, #31
 8005cc0:	18fb      	adds	r3, r7, r3
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN |
 8005cc6:	e009      	b.n	8005cdc <HAL_ADC_Init+0x384>
    }

  } else {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ccc:	2210      	movs	r2, #16
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005cd4:	231f      	movs	r3, #31
 8005cd6:	18fb      	adds	r3, r7, r3
 8005cd8:	2201      	movs	r2, #1
 8005cda:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005cdc:	231f      	movs	r3, #31
 8005cde:	18fb      	adds	r3, r7, r3
 8005ce0:	781b      	ldrb	r3, [r3, #0]
}
 8005ce2:	0018      	movs	r0, r3
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	b008      	add	sp, #32
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	46c0      	nop			; (mov r8, r8)
 8005cec:	20000000 	.word	0x20000000
 8005cf0:	00030d40 	.word	0x00030d40
 8005cf4:	fffffefd 	.word	0xfffffefd
 8005cf8:	1ffffc02 	.word	0x1ffffc02
 8005cfc:	40012708 	.word	0x40012708
 8005d00:	ffc3ffff 	.word	0xffc3ffff
 8005d04:	fffe0219 	.word	0xfffe0219
 8005d08:	dffffc02 	.word	0xdffffc02
 8005d0c:	07ffff04 	.word	0x07ffff04
 8005d10:	833fffe7 	.word	0x833fffe7

08005d14 <HAL_ADC_ConfigChannel>:
 * @param hadc ADC handle
 * @param pConfig Structure of ADC channel assigned to ADC group regular.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc,
                                        ADC_ChannelConfTypeDef *pConfig) {
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d1e:	2317      	movs	r3, #23
 8005d20:	18fb      	adds	r3, r7, r3
 8005d22:	2200      	movs	r2, #0
 8005d24:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005d26:	2300      	movs	r3, #0
 8005d28:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2254      	movs	r2, #84	; 0x54
 8005d2e:	5c9b      	ldrb	r3, [r3, r2]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_ADC_ConfigChannel+0x24>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e1c0      	b.n	80060ba <HAL_ADC_ConfigChannel+0x3a6>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2254      	movs	r2, #84	; 0x54
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL) {
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	0018      	movs	r0, r3
 8005d46:	f7ff fdf6 	bl	8005936 <LL_ADC_REG_IsConversionOngoing>
 8005d4a:	1e03      	subs	r3, r0, #0
 8005d4c:	d000      	beq.n	8005d50 <HAL_ADC_ConfigChannel+0x3c>
 8005d4e:	e1a3      	b.n	8006098 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE) {
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d100      	bne.n	8005d5a <HAL_ADC_ConfigChannel+0x46>
 8005d58:	e143      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED) ||
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	691a      	ldr	r2, [r3, #16]
 8005d5e:	2380      	movs	r3, #128	; 0x80
 8005d60:	061b      	lsls	r3, r3, #24
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d004      	beq.n	8005d70 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)) {
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED) ||
 8005d6a:	4ac1      	ldr	r2, [pc, #772]	; (8006070 <HAL_ADC_ConfigChannel+0x35c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d108      	bne.n	8005d82 <HAL_ADC_ConfigChannel+0x6e>
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	0019      	movs	r1, r3
 8005d7a:	0010      	movs	r0, r2
 8005d7c:	f7ff fd62 	bl	8005844 <LL_ADC_REG_SetSequencerChAdd>
 8005d80:	e0c9      	b.n	8005f16 <HAL_ADC_ConfigChannel+0x202>
      } else {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	211f      	movs	r1, #31
 8005d8c:	400b      	ands	r3, r1
 8005d8e:	210f      	movs	r1, #15
 8005d90:	4099      	lsls	r1, r3
 8005d92:	000b      	movs	r3, r1
 8005d94:	43db      	mvns	r3, r3
 8005d96:	4013      	ands	r3, r2
 8005d98:	0019      	movs	r1, r3
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	035b      	lsls	r3, r3, #13
 8005da0:	0b5b      	lsrs	r3, r3, #13
 8005da2:	d105      	bne.n	8005db0 <HAL_ADC_ConfigChannel+0x9c>
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	0e9b      	lsrs	r3, r3, #26
 8005daa:	221f      	movs	r2, #31
 8005dac:	4013      	ands	r3, r2
 8005dae:	e098      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2201      	movs	r2, #1
 8005db6:	4013      	ands	r3, r2
 8005db8:	d000      	beq.n	8005dbc <HAL_ADC_ConfigChannel+0xa8>
 8005dba:	e091      	b.n	8005ee0 <HAL_ADC_ConfigChannel+0x1cc>
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	d000      	beq.n	8005dc8 <HAL_ADC_ConfigChannel+0xb4>
 8005dc6:	e089      	b.n	8005edc <HAL_ADC_ConfigChannel+0x1c8>
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2204      	movs	r2, #4
 8005dce:	4013      	ands	r3, r2
 8005dd0:	d000      	beq.n	8005dd4 <HAL_ADC_ConfigChannel+0xc0>
 8005dd2:	e081      	b.n	8005ed8 <HAL_ADC_ConfigChannel+0x1c4>
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2208      	movs	r2, #8
 8005dda:	4013      	ands	r3, r2
 8005ddc:	d000      	beq.n	8005de0 <HAL_ADC_ConfigChannel+0xcc>
 8005dde:	e079      	b.n	8005ed4 <HAL_ADC_ConfigChannel+0x1c0>
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2210      	movs	r2, #16
 8005de6:	4013      	ands	r3, r2
 8005de8:	d000      	beq.n	8005dec <HAL_ADC_ConfigChannel+0xd8>
 8005dea:	e071      	b.n	8005ed0 <HAL_ADC_ConfigChannel+0x1bc>
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2220      	movs	r2, #32
 8005df2:	4013      	ands	r3, r2
 8005df4:	d000      	beq.n	8005df8 <HAL_ADC_ConfigChannel+0xe4>
 8005df6:	e069      	b.n	8005ecc <HAL_ADC_ConfigChannel+0x1b8>
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2240      	movs	r2, #64	; 0x40
 8005dfe:	4013      	ands	r3, r2
 8005e00:	d000      	beq.n	8005e04 <HAL_ADC_ConfigChannel+0xf0>
 8005e02:	e061      	b.n	8005ec8 <HAL_ADC_ConfigChannel+0x1b4>
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2280      	movs	r2, #128	; 0x80
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	d000      	beq.n	8005e10 <HAL_ADC_ConfigChannel+0xfc>
 8005e0e:	e059      	b.n	8005ec4 <HAL_ADC_ConfigChannel+0x1b0>
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	2380      	movs	r3, #128	; 0x80
 8005e16:	005b      	lsls	r3, r3, #1
 8005e18:	4013      	ands	r3, r2
 8005e1a:	d151      	bne.n	8005ec0 <HAL_ADC_ConfigChannel+0x1ac>
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	2380      	movs	r3, #128	; 0x80
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4013      	ands	r3, r2
 8005e26:	d149      	bne.n	8005ebc <HAL_ADC_ConfigChannel+0x1a8>
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	2380      	movs	r3, #128	; 0x80
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	4013      	ands	r3, r2
 8005e32:	d141      	bne.n	8005eb8 <HAL_ADC_ConfigChannel+0x1a4>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	2380      	movs	r3, #128	; 0x80
 8005e3a:	011b      	lsls	r3, r3, #4
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	d139      	bne.n	8005eb4 <HAL_ADC_ConfigChannel+0x1a0>
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	2380      	movs	r3, #128	; 0x80
 8005e46:	015b      	lsls	r3, r3, #5
 8005e48:	4013      	ands	r3, r2
 8005e4a:	d131      	bne.n	8005eb0 <HAL_ADC_ConfigChannel+0x19c>
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	2380      	movs	r3, #128	; 0x80
 8005e52:	019b      	lsls	r3, r3, #6
 8005e54:	4013      	ands	r3, r2
 8005e56:	d129      	bne.n	8005eac <HAL_ADC_ConfigChannel+0x198>
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	2380      	movs	r3, #128	; 0x80
 8005e5e:	01db      	lsls	r3, r3, #7
 8005e60:	4013      	ands	r3, r2
 8005e62:	d121      	bne.n	8005ea8 <HAL_ADC_ConfigChannel+0x194>
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	2380      	movs	r3, #128	; 0x80
 8005e6a:	021b      	lsls	r3, r3, #8
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	d119      	bne.n	8005ea4 <HAL_ADC_ConfigChannel+0x190>
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	2380      	movs	r3, #128	; 0x80
 8005e76:	025b      	lsls	r3, r3, #9
 8005e78:	4013      	ands	r3, r2
 8005e7a:	d111      	bne.n	8005ea0 <HAL_ADC_ConfigChannel+0x18c>
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	2380      	movs	r3, #128	; 0x80
 8005e82:	029b      	lsls	r3, r3, #10
 8005e84:	4013      	ands	r3, r2
 8005e86:	d109      	bne.n	8005e9c <HAL_ADC_ConfigChannel+0x188>
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	2380      	movs	r3, #128	; 0x80
 8005e8e:	02db      	lsls	r3, r3, #11
 8005e90:	4013      	ands	r3, r2
 8005e92:	d001      	beq.n	8005e98 <HAL_ADC_ConfigChannel+0x184>
 8005e94:	2312      	movs	r3, #18
 8005e96:	e024      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	e022      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005e9c:	2311      	movs	r3, #17
 8005e9e:	e020      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005ea0:	2310      	movs	r3, #16
 8005ea2:	e01e      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005ea4:	230f      	movs	r3, #15
 8005ea6:	e01c      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005ea8:	230e      	movs	r3, #14
 8005eaa:	e01a      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005eac:	230d      	movs	r3, #13
 8005eae:	e018      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005eb0:	230c      	movs	r3, #12
 8005eb2:	e016      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005eb4:	230b      	movs	r3, #11
 8005eb6:	e014      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005eb8:	230a      	movs	r3, #10
 8005eba:	e012      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005ebc:	2309      	movs	r3, #9
 8005ebe:	e010      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005ec0:	2308      	movs	r3, #8
 8005ec2:	e00e      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005ec4:	2307      	movs	r3, #7
 8005ec6:	e00c      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005ec8:	2306      	movs	r3, #6
 8005eca:	e00a      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005ecc:	2305      	movs	r3, #5
 8005ece:	e008      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005ed0:	2304      	movs	r3, #4
 8005ed2:	e006      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e004      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e002      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005edc:	2301      	movs	r3, #1
 8005ede:	e000      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	6852      	ldr	r2, [r2, #4]
 8005ee6:	201f      	movs	r0, #31
 8005ee8:	4002      	ands	r2, r0
 8005eea:	4093      	lsls	r3, r2
 8005eec:	000a      	movs	r2, r1
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion) {
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	089b      	lsrs	r3, r3, #2
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d808      	bhi.n	8005f16 <HAL_ADC_ConfigChannel+0x202>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank,
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6818      	ldr	r0, [r3, #0]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	6859      	ldr	r1, [r3, #4]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	001a      	movs	r2, r3
 8005f12:	f7ff fc77 	bl	8005804 <LL_ADC_REG_SetSequencerRanks>
                                       pConfig->Channel);
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel,
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6818      	ldr	r0, [r3, #0]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	6819      	ldr	r1, [r3, #0]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	001a      	movs	r2, r3
 8005f24:	f7ff fcb2 	bl	800588c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel)) {
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	db00      	blt.n	8005f32 <HAL_ADC_ConfigChannel+0x21e>
 8005f30:	e0bc      	b.n	80060ac <HAL_ADC_ConfigChannel+0x398>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(
 8005f32:	4b50      	ldr	r3, [pc, #320]	; (8006074 <HAL_ADC_ConfigChannel+0x360>)
 8005f34:	0018      	movs	r0, r3
 8005f36:	f7ff fc3b 	bl	80057b0 <LL_ADC_GetCommonPathInternalCh>
 8005f3a:	0003      	movs	r3, r0
 8005f3c:	613b      	str	r3, [r7, #16]
            __LL_ADC_COMMON_INSTANCE(hadc->Instance));

        /* If the requested internal measurement path has already been enabled,
         */
        /* bypass the configuration processing. */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a4d      	ldr	r2, [pc, #308]	; (8006078 <HAL_ADC_ConfigChannel+0x364>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d122      	bne.n	8005f8e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) ==
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	2380      	movs	r3, #128	; 0x80
 8005f4c:	041b      	lsls	r3, r3, #16
 8005f4e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005f50:	d11d      	bne.n	8005f8e <HAL_ADC_ConfigChannel+0x27a>
             0UL)) {
          LL_ADC_SetCommonPathInternalCh(
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	2280      	movs	r2, #128	; 0x80
 8005f56:	0412      	lsls	r2, r2, #16
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	4a46      	ldr	r2, [pc, #280]	; (8006074 <HAL_ADC_ConfigChannel+0x360>)
 8005f5c:	0019      	movs	r1, r3
 8005f5e:	0010      	movs	r0, r2
 8005f60:	f7ff fc12 	bl	8005788 <LL_ADC_SetCommonPathInternalCh>
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) *
                             ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005f64:	4b45      	ldr	r3, [pc, #276]	; (800607c <HAL_ADC_ConfigChannel+0x368>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4945      	ldr	r1, [pc, #276]	; (8006080 <HAL_ADC_ConfigChannel+0x36c>)
 8005f6a:	0018      	movs	r0, r3
 8005f6c:	f7fa f8de 	bl	800012c <__udivsi3>
 8005f70:	0003      	movs	r3, r0
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) *
 8005f72:	1c5a      	adds	r2, r3, #1
 8005f74:	0013      	movs	r3, r2
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	189b      	adds	r3, r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL) {
 8005f7e:	e002      	b.n	8005f86 <HAL_ADC_ConfigChannel+0x272>
            wait_loop_index--;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3b01      	subs	r3, #1
 8005f84:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL) {
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1f9      	bne.n	8005f80 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005f8c:	e08e      	b.n	80060ac <HAL_ADC_ConfigChannel+0x398>
          }
        } else if ((pConfig->Channel == ADC_CHANNEL_VBAT) &&
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a3c      	ldr	r2, [pc, #240]	; (8006084 <HAL_ADC_ConfigChannel+0x370>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d10e      	bne.n	8005fb6 <HAL_ADC_ConfigChannel+0x2a2>
                   ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) ==
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	2380      	movs	r3, #128	; 0x80
 8005f9c:	045b      	lsls	r3, r3, #17
 8005f9e:	4013      	ands	r3, r2
        } else if ((pConfig->Channel == ADC_CHANNEL_VBAT) &&
 8005fa0:	d109      	bne.n	8005fb6 <HAL_ADC_ConfigChannel+0x2a2>
                    0UL)) {
          LL_ADC_SetCommonPathInternalCh(
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	2280      	movs	r2, #128	; 0x80
 8005fa6:	0452      	lsls	r2, r2, #17
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	4a32      	ldr	r2, [pc, #200]	; (8006074 <HAL_ADC_ConfigChannel+0x360>)
 8005fac:	0019      	movs	r1, r3
 8005fae:	0010      	movs	r0, r2
 8005fb0:	f7ff fbea 	bl	8005788 <LL_ADC_SetCommonPathInternalCh>
 8005fb4:	e07a      	b.n	80060ac <HAL_ADC_ConfigChannel+0x398>
              __LL_ADC_COMMON_INSTANCE(hadc->Instance),
              LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        } else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a33      	ldr	r2, [pc, #204]	; (8006088 <HAL_ADC_ConfigChannel+0x374>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d000      	beq.n	8005fc2 <HAL_ADC_ConfigChannel+0x2ae>
 8005fc0:	e074      	b.n	80060ac <HAL_ADC_ConfigChannel+0x398>
                   ((tmp_config_internal_channel &
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	2380      	movs	r3, #128	; 0x80
 8005fc6:	03db      	lsls	r3, r3, #15
 8005fc8:	4013      	ands	r3, r2
        } else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005fca:	d000      	beq.n	8005fce <HAL_ADC_ConfigChannel+0x2ba>
 8005fcc:	e06e      	b.n	80060ac <HAL_ADC_ConfigChannel+0x398>
                     LL_ADC_PATH_INTERNAL_VREFINT) == 0UL)) {
          LL_ADC_SetCommonPathInternalCh(
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	2280      	movs	r2, #128	; 0x80
 8005fd2:	03d2      	lsls	r2, r2, #15
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	4a27      	ldr	r2, [pc, #156]	; (8006074 <HAL_ADC_ConfigChannel+0x360>)
 8005fd8:	0019      	movs	r1, r3
 8005fda:	0010      	movs	r0, r2
 8005fdc:	f7ff fbd4 	bl	8005788 <LL_ADC_SetCommonPathInternalCh>
 8005fe0:	e064      	b.n	80060ac <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED) ||
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	691a      	ldr	r2, [r3, #16]
 8005fe6:	2380      	movs	r3, #128	; 0x80
 8005fe8:	061b      	lsls	r3, r3, #24
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d004      	beq.n	8005ff8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)) {
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED) ||
 8005ff2:	4a1f      	ldr	r2, [pc, #124]	; (8006070 <HAL_ADC_ConfigChannel+0x35c>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d107      	bne.n	8006008 <HAL_ADC_ConfigChannel+0x2f4>
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	0019      	movs	r1, r3
 8006002:	0010      	movs	r0, r2
 8006004:	f7ff fc2f 	bl	8005866 <LL_ADC_REG_SetSequencerChRem>

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.
       */
      /* If internal channel selected, enable dedicated internal buffers and */
      /* paths. */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel)) {
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	da4d      	bge.n	80060ac <HAL_ADC_ConfigChannel+0x398>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(
 8006010:	4b18      	ldr	r3, [pc, #96]	; (8006074 <HAL_ADC_ConfigChannel+0x360>)
 8006012:	0018      	movs	r0, r3
 8006014:	f7ff fbcc 	bl	80057b0 <LL_ADC_GetCommonPathInternalCh>
 8006018:	0003      	movs	r3, r0
 800601a:	613b      	str	r3, [r7, #16]
            __LL_ADC_COMMON_INSTANCE(hadc->Instance));

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) {
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a15      	ldr	r2, [pc, #84]	; (8006078 <HAL_ADC_ConfigChannel+0x364>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d108      	bne.n	8006038 <HAL_ADC_ConfigChannel+0x324>
          LL_ADC_SetCommonPathInternalCh(
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	4a18      	ldr	r2, [pc, #96]	; (800608c <HAL_ADC_ConfigChannel+0x378>)
 800602a:	4013      	ands	r3, r2
 800602c:	4a11      	ldr	r2, [pc, #68]	; (8006074 <HAL_ADC_ConfigChannel+0x360>)
 800602e:	0019      	movs	r1, r3
 8006030:	0010      	movs	r0, r2
 8006032:	f7ff fba9 	bl	8005788 <LL_ADC_SetCommonPathInternalCh>
 8006036:	e039      	b.n	80060ac <HAL_ADC_ConfigChannel+0x398>
              __LL_ADC_COMMON_INSTANCE(hadc->Instance),
              ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        } else if (pConfig->Channel == ADC_CHANNEL_VBAT) {
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a11      	ldr	r2, [pc, #68]	; (8006084 <HAL_ADC_ConfigChannel+0x370>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d108      	bne.n	8006054 <HAL_ADC_ConfigChannel+0x340>
          LL_ADC_SetCommonPathInternalCh(
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	4a12      	ldr	r2, [pc, #72]	; (8006090 <HAL_ADC_ConfigChannel+0x37c>)
 8006046:	4013      	ands	r3, r2
 8006048:	4a0a      	ldr	r2, [pc, #40]	; (8006074 <HAL_ADC_ConfigChannel+0x360>)
 800604a:	0019      	movs	r1, r3
 800604c:	0010      	movs	r0, r2
 800604e:	f7ff fb9b 	bl	8005788 <LL_ADC_SetCommonPathInternalCh>
 8006052:	e02b      	b.n	80060ac <HAL_ADC_ConfigChannel+0x398>
              __LL_ADC_COMMON_INSTANCE(hadc->Instance),
              ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        } else if (pConfig->Channel == ADC_CHANNEL_VREFINT) {
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a0b      	ldr	r2, [pc, #44]	; (8006088 <HAL_ADC_ConfigChannel+0x374>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d126      	bne.n	80060ac <HAL_ADC_ConfigChannel+0x398>
          LL_ADC_SetCommonPathInternalCh(
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	4a0c      	ldr	r2, [pc, #48]	; (8006094 <HAL_ADC_ConfigChannel+0x380>)
 8006062:	4013      	ands	r3, r2
 8006064:	4a03      	ldr	r2, [pc, #12]	; (8006074 <HAL_ADC_ConfigChannel+0x360>)
 8006066:	0019      	movs	r1, r3
 8006068:	0010      	movs	r0, r2
 800606a:	f7ff fb8d 	bl	8005788 <LL_ADC_SetCommonPathInternalCh>
 800606e:	e01d      	b.n	80060ac <HAL_ADC_ConfigChannel+0x398>
 8006070:	80000004 	.word	0x80000004
 8006074:	40012708 	.word	0x40012708
 8006078:	b0001000 	.word	0xb0001000
 800607c:	20000000 	.word	0x20000000
 8006080:	00030d40 	.word	0x00030d40
 8006084:	b8004000 	.word	0xb8004000
 8006088:	b4002000 	.word	0xb4002000
 800608c:	ff7fffff 	.word	0xff7fffff
 8006090:	feffffff 	.word	0xfeffffff
 8006094:	ffbfffff 	.word	0xffbfffff
  /* If a conversion is on going on regular group, no update on regular       */
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800609c:	2220      	movs	r2, #32
 800609e:	431a      	orrs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80060a4:	2317      	movs	r3, #23
 80060a6:	18fb      	adds	r3, r7, r3
 80060a8:	2201      	movs	r2, #1
 80060aa:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2254      	movs	r2, #84	; 0x54
 80060b0:	2100      	movs	r1, #0
 80060b2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80060b4:	2317      	movs	r3, #23
 80060b6:	18fb      	adds	r3, r7, r3
 80060b8:	781b      	ldrb	r3, [r3, #0]
}
 80060ba:	0018      	movs	r0, r3
 80060bc:	46bd      	mov	sp, r7
 80060be:	b006      	add	sp, #24
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	46c0      	nop			; (mov r8, r8)

080060c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	0002      	movs	r2, r0
 80060cc:	1dfb      	adds	r3, r7, #7
 80060ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80060d0:	1dfb      	adds	r3, r7, #7
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	2b7f      	cmp	r3, #127	; 0x7f
 80060d6:	d809      	bhi.n	80060ec <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060d8:	1dfb      	adds	r3, r7, #7
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	001a      	movs	r2, r3
 80060de:	231f      	movs	r3, #31
 80060e0:	401a      	ands	r2, r3
 80060e2:	4b04      	ldr	r3, [pc, #16]	; (80060f4 <__NVIC_EnableIRQ+0x30>)
 80060e4:	2101      	movs	r1, #1
 80060e6:	4091      	lsls	r1, r2
 80060e8:	000a      	movs	r2, r1
 80060ea:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80060ec:	46c0      	nop			; (mov r8, r8)
 80060ee:	46bd      	mov	sp, r7
 80060f0:	b002      	add	sp, #8
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	e000e100 	.word	0xe000e100

080060f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060f8:	b590      	push	{r4, r7, lr}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	0002      	movs	r2, r0
 8006100:	6039      	str	r1, [r7, #0]
 8006102:	1dfb      	adds	r3, r7, #7
 8006104:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006106:	1dfb      	adds	r3, r7, #7
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	2b7f      	cmp	r3, #127	; 0x7f
 800610c:	d828      	bhi.n	8006160 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800610e:	4a2f      	ldr	r2, [pc, #188]	; (80061cc <__NVIC_SetPriority+0xd4>)
 8006110:	1dfb      	adds	r3, r7, #7
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	b25b      	sxtb	r3, r3
 8006116:	089b      	lsrs	r3, r3, #2
 8006118:	33c0      	adds	r3, #192	; 0xc0
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	589b      	ldr	r3, [r3, r2]
 800611e:	1dfa      	adds	r2, r7, #7
 8006120:	7812      	ldrb	r2, [r2, #0]
 8006122:	0011      	movs	r1, r2
 8006124:	2203      	movs	r2, #3
 8006126:	400a      	ands	r2, r1
 8006128:	00d2      	lsls	r2, r2, #3
 800612a:	21ff      	movs	r1, #255	; 0xff
 800612c:	4091      	lsls	r1, r2
 800612e:	000a      	movs	r2, r1
 8006130:	43d2      	mvns	r2, r2
 8006132:	401a      	ands	r2, r3
 8006134:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	019b      	lsls	r3, r3, #6
 800613a:	22ff      	movs	r2, #255	; 0xff
 800613c:	401a      	ands	r2, r3
 800613e:	1dfb      	adds	r3, r7, #7
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	0018      	movs	r0, r3
 8006144:	2303      	movs	r3, #3
 8006146:	4003      	ands	r3, r0
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800614c:	481f      	ldr	r0, [pc, #124]	; (80061cc <__NVIC_SetPriority+0xd4>)
 800614e:	1dfb      	adds	r3, r7, #7
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	b25b      	sxtb	r3, r3
 8006154:	089b      	lsrs	r3, r3, #2
 8006156:	430a      	orrs	r2, r1
 8006158:	33c0      	adds	r3, #192	; 0xc0
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800615e:	e031      	b.n	80061c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006160:	4a1b      	ldr	r2, [pc, #108]	; (80061d0 <__NVIC_SetPriority+0xd8>)
 8006162:	1dfb      	adds	r3, r7, #7
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	0019      	movs	r1, r3
 8006168:	230f      	movs	r3, #15
 800616a:	400b      	ands	r3, r1
 800616c:	3b08      	subs	r3, #8
 800616e:	089b      	lsrs	r3, r3, #2
 8006170:	3306      	adds	r3, #6
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	18d3      	adds	r3, r2, r3
 8006176:	3304      	adds	r3, #4
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	1dfa      	adds	r2, r7, #7
 800617c:	7812      	ldrb	r2, [r2, #0]
 800617e:	0011      	movs	r1, r2
 8006180:	2203      	movs	r2, #3
 8006182:	400a      	ands	r2, r1
 8006184:	00d2      	lsls	r2, r2, #3
 8006186:	21ff      	movs	r1, #255	; 0xff
 8006188:	4091      	lsls	r1, r2
 800618a:	000a      	movs	r2, r1
 800618c:	43d2      	mvns	r2, r2
 800618e:	401a      	ands	r2, r3
 8006190:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	019b      	lsls	r3, r3, #6
 8006196:	22ff      	movs	r2, #255	; 0xff
 8006198:	401a      	ands	r2, r3
 800619a:	1dfb      	adds	r3, r7, #7
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	0018      	movs	r0, r3
 80061a0:	2303      	movs	r3, #3
 80061a2:	4003      	ands	r3, r0
 80061a4:	00db      	lsls	r3, r3, #3
 80061a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80061a8:	4809      	ldr	r0, [pc, #36]	; (80061d0 <__NVIC_SetPriority+0xd8>)
 80061aa:	1dfb      	adds	r3, r7, #7
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	001c      	movs	r4, r3
 80061b0:	230f      	movs	r3, #15
 80061b2:	4023      	ands	r3, r4
 80061b4:	3b08      	subs	r3, #8
 80061b6:	089b      	lsrs	r3, r3, #2
 80061b8:	430a      	orrs	r2, r1
 80061ba:	3306      	adds	r3, #6
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	18c3      	adds	r3, r0, r3
 80061c0:	3304      	adds	r3, #4
 80061c2:	601a      	str	r2, [r3, #0]
}
 80061c4:	46c0      	nop			; (mov r8, r8)
 80061c6:	46bd      	mov	sp, r7
 80061c8:	b003      	add	sp, #12
 80061ca:	bd90      	pop	{r4, r7, pc}
 80061cc:	e000e100 	.word	0xe000e100
 80061d0:	e000ed00 	.word	0xe000ed00

080061d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	1e5a      	subs	r2, r3, #1
 80061e0:	2380      	movs	r3, #128	; 0x80
 80061e2:	045b      	lsls	r3, r3, #17
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d301      	bcc.n	80061ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80061e8:	2301      	movs	r3, #1
 80061ea:	e010      	b.n	800620e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061ec:	4b0a      	ldr	r3, [pc, #40]	; (8006218 <SysTick_Config+0x44>)
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	3a01      	subs	r2, #1
 80061f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80061f4:	2301      	movs	r3, #1
 80061f6:	425b      	negs	r3, r3
 80061f8:	2103      	movs	r1, #3
 80061fa:	0018      	movs	r0, r3
 80061fc:	f7ff ff7c 	bl	80060f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006200:	4b05      	ldr	r3, [pc, #20]	; (8006218 <SysTick_Config+0x44>)
 8006202:	2200      	movs	r2, #0
 8006204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006206:	4b04      	ldr	r3, [pc, #16]	; (8006218 <SysTick_Config+0x44>)
 8006208:	2207      	movs	r2, #7
 800620a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800620c:	2300      	movs	r3, #0
}
 800620e:	0018      	movs	r0, r3
 8006210:	46bd      	mov	sp, r7
 8006212:	b002      	add	sp, #8
 8006214:	bd80      	pop	{r7, pc}
 8006216:	46c0      	nop			; (mov r8, r8)
 8006218:	e000e010 	.word	0xe000e010

0800621c <HAL_NVIC_SetPriority>:
 *         with stm32g0xx devices, this parameter is a dummy value and it is
 * ignored, because no subpriority supported in Cortex M0+ based products.
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
                          uint32_t SubPriority) {
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	60b9      	str	r1, [r7, #8]
 8006224:	607a      	str	r2, [r7, #4]
 8006226:	210f      	movs	r1, #15
 8006228:	187b      	adds	r3, r7, r1
 800622a:	1c02      	adds	r2, r0, #0
 800622c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	187b      	adds	r3, r7, r1
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	b25b      	sxtb	r3, r3
 8006236:	0011      	movs	r1, r2
 8006238:	0018      	movs	r0, r3
 800623a:	f7ff ff5d 	bl	80060f8 <__NVIC_SetPriority>
}
 800623e:	46c0      	nop			; (mov r8, r8)
 8006240:	46bd      	mov	sp, r7
 8006242:	b004      	add	sp, #16
 8006244:	bd80      	pop	{r7, pc}

08006246 <HAL_NVIC_EnableIRQ>:
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to
 * the appropriate CMSIS device file (stm32g0xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn) {
 8006246:	b580      	push	{r7, lr}
 8006248:	b082      	sub	sp, #8
 800624a:	af00      	add	r7, sp, #0
 800624c:	0002      	movs	r2, r0
 800624e:	1dfb      	adds	r3, r7, #7
 8006250:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006252:	1dfb      	adds	r3, r7, #7
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	b25b      	sxtb	r3, r3
 8006258:	0018      	movs	r0, r3
 800625a:	f7ff ff33 	bl	80060c4 <__NVIC_EnableIRQ>
}
 800625e:	46c0      	nop			; (mov r8, r8)
 8006260:	46bd      	mov	sp, r7
 8006262:	b002      	add	sp, #8
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_SYSTICK_Config>:
 * periodic interrupts.
 * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
 8006266:	b580      	push	{r7, lr}
 8006268:	b082      	sub	sp, #8
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	0018      	movs	r0, r3
 8006272:	f7ff ffaf 	bl	80061d4 <SysTick_Config>
 8006276:	0003      	movs	r3, r0
}
 8006278:	0018      	movs	r0, r3
 800627a:	46bd      	mov	sp, r7
 800627c:	b002      	add	sp, #8
 800627e:	bd80      	pop	{r7, pc}

08006280 <HAL_DMA_Abort>:
 * @brief Abort the DMA Transfer.
 * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
 *             the configuration information for the specified DMA Channel.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma) {
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma) {
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_DMA_Abort+0x12>
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e050      	b.n	8006334 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY) {
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2225      	movs	r2, #37	; 0x25
 8006296:	5c9b      	ldrb	r3, [r3, r2]
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b02      	cmp	r3, #2
 800629c:	d008      	beq.n	80062b0 <HAL_DMA_Abort+0x30>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2204      	movs	r2, #4
 80062a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2224      	movs	r2, #36	; 0x24
 80062a8:	2100      	movs	r1, #0
 80062aa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e041      	b.n	8006334 <HAL_DMA_Abort+0xb4>
  } else {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	210e      	movs	r1, #14
 80062bc:	438a      	bics	r2, r1
 80062be:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ca:	491c      	ldr	r1, [pc, #112]	; (800633c <HAL_DMA_Abort+0xbc>)
 80062cc:	400a      	ands	r2, r1
 80062ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2101      	movs	r1, #1
 80062dc:	438a      	bics	r2, r1
 80062de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma,
 80062e0:	4b17      	ldr	r3, [pc, #92]	; (8006340 <HAL_DMA_Abort+0xc0>)
 80062e2:	6859      	ldr	r1, [r3, #4]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e8:	221c      	movs	r2, #28
 80062ea:	4013      	ands	r3, r2
 80062ec:	2201      	movs	r2, #1
 80062ee:	409a      	lsls	r2, r3
 80062f0:	4b13      	ldr	r3, [pc, #76]	; (8006340 <HAL_DMA_Abort+0xc0>)
 80062f2:	430a      	orrs	r2, r1
 80062f4:	605a      	str	r2, [r3, #4]
                         ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80062fe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U) {
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00c      	beq.n	8006322 <HAL_DMA_Abort+0xa2>
      /* if using DMAMUX request generator, disable the DMAMUX request generator
       * overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006312:	490a      	ldr	r1, [pc, #40]	; (800633c <HAL_DMA_Abort+0xbc>)
 8006314:	400a      	ands	r2, r1
 8006316:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006320:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2225      	movs	r2, #37	; 0x25
 8006326:	2101      	movs	r1, #1
 8006328:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2224      	movs	r2, #36	; 0x24
 800632e:	2100      	movs	r1, #0
 8006330:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	0018      	movs	r0, r3
 8006336:	46bd      	mov	sp, r7
 8006338:	b002      	add	sp, #8
 800633a:	bd80      	pop	{r7, pc}
 800633c:	fffffeff 	.word	0xfffffeff
 8006340:	40020000 	.word	0x40020000

08006344 <HAL_DMA_Abort_IT>:
 * @brief Aborts the DMA Transfer in Interrupt mode.
 * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
 *             the configuration information for the specified DMA Channel.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma) {
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800634c:	210f      	movs	r1, #15
 800634e:	187b      	adds	r3, r7, r1
 8006350:	2200      	movs	r2, #0
 8006352:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY) {
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2225      	movs	r2, #37	; 0x25
 8006358:	5c9b      	ldrb	r3, [r3, r2]
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b02      	cmp	r3, #2
 800635e:	d006      	beq.n	800636e <HAL_DMA_Abort_IT+0x2a>
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2204      	movs	r2, #4
 8006364:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006366:	187b      	adds	r3, r7, r1
 8006368:	2201      	movs	r2, #1
 800636a:	701a      	strb	r2, [r3, #0]
 800636c:	e049      	b.n	8006402 <HAL_DMA_Abort_IT+0xbe>
  } else {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	210e      	movs	r1, #14
 800637a:	438a      	bics	r2, r1
 800637c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2101      	movs	r1, #1
 800638a:	438a      	bics	r2, r1
 800638c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006398:	491d      	ldr	r1, [pc, #116]	; (8006410 <HAL_DMA_Abort_IT+0xcc>)
 800639a:	400a      	ands	r2, r1
 800639c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma,
 800639e:	4b1d      	ldr	r3, [pc, #116]	; (8006414 <HAL_DMA_Abort_IT+0xd0>)
 80063a0:	6859      	ldr	r1, [r3, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	221c      	movs	r2, #28
 80063a8:	4013      	ands	r3, r2
 80063aa:	2201      	movs	r2, #1
 80063ac:	409a      	lsls	r2, r3
 80063ae:	4b19      	ldr	r3, [pc, #100]	; (8006414 <HAL_DMA_Abort_IT+0xd0>)
 80063b0:	430a      	orrs	r2, r1
 80063b2:	605a      	str	r2, [r3, #4]
                         ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80063bc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U) {
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00c      	beq.n	80063e0 <HAL_DMA_Abort_IT+0x9c>
      /* if using DMAMUX request generator, disable the DMAMUX request generator
       * overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d0:	490f      	ldr	r1, [pc, #60]	; (8006410 <HAL_DMA_Abort_IT+0xcc>)
 80063d2:	400a      	ands	r2, r1
 80063d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80063de:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2225      	movs	r2, #37	; 0x25
 80063e4:	2101      	movs	r1, #1
 80063e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2224      	movs	r2, #36	; 0x24
 80063ec:	2100      	movs	r1, #0
 80063ee:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL) {
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d004      	beq.n	8006402 <HAL_DMA_Abort_IT+0xbe>
      hdma->XferAbortCallback(hdma);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	0010      	movs	r0, r2
 8006400:	4798      	blx	r3
    }
  }
  return status;
 8006402:	230f      	movs	r3, #15
 8006404:	18fb      	adds	r3, r7, r3
 8006406:	781b      	ldrb	r3, [r3, #0]
}
 8006408:	0018      	movs	r0, r3
 800640a:	46bd      	mov	sp, r7
 800640c:	b004      	add	sp, #16
 800640e:	bd80      	pop	{r7, pc}
 8006410:	fffffeff 	.word	0xfffffeff
 8006414:	40020000 	.word	0x40020000

08006418 <HAL_GPIO_Init>:
 * STM32G0xx family
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8006418:	b580      	push	{r7, lr}
 800641a:	b086      	sub	sp, #24
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006422:	2300      	movs	r3, #0
 8006424:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u) {
 8006426:	e147      	b.n	80066b8 <HAL_GPIO_Init+0x2a0>
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2101      	movs	r1, #1
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	4091      	lsls	r1, r2
 8006432:	000a      	movs	r2, r1
 8006434:	4013      	ands	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u) {
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d100      	bne.n	8006440 <HAL_GPIO_Init+0x28>
 800643e:	e138      	b.n	80066b2 <HAL_GPIO_Init+0x29a>
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	2203      	movs	r2, #3
 8006446:	4013      	ands	r3, r2
 8006448:	2b01      	cmp	r3, #1
 800644a:	d005      	beq.n	8006458 <HAL_GPIO_Init+0x40>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)) {
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	2203      	movs	r2, #3
 8006452:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006454:	2b02      	cmp	r3, #2
 8006456:	d130      	bne.n	80064ba <HAL_GPIO_Init+0xa2>
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	2203      	movs	r2, #3
 8006464:	409a      	lsls	r2, r3
 8006466:	0013      	movs	r3, r2
 8006468:	43da      	mvns	r2, r3
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	4013      	ands	r3, r2
 800646e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	68da      	ldr	r2, [r3, #12]
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	005b      	lsls	r3, r3, #1
 8006478:	409a      	lsls	r2, r3
 800647a:	0013      	movs	r3, r2
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	4313      	orrs	r3, r2
 8006480:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position);
 800648e:	2201      	movs	r2, #1
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	409a      	lsls	r2, r3
 8006494:	0013      	movs	r3, r2
 8006496:	43da      	mvns	r2, r3
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	4013      	ands	r3, r2
 800649c:	613b      	str	r3, [r7, #16]
        temp |=
            (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	091b      	lsrs	r3, r3, #4
 80064a4:	2201      	movs	r2, #1
 80064a6:	401a      	ands	r2, r3
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	409a      	lsls	r2, r3
 80064ac:	0013      	movs	r3, r2
        temp |=
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	2203      	movs	r2, #3
 80064c0:	4013      	ands	r3, r2
 80064c2:	2b03      	cmp	r3, #3
 80064c4:	d017      	beq.n	80064f6 <HAL_GPIO_Init+0xde>
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	2203      	movs	r2, #3
 80064d2:	409a      	lsls	r2, r3
 80064d4:	0013      	movs	r3, r2
 80064d6:	43da      	mvns	r2, r3
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	4013      	ands	r3, r2
 80064dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	689a      	ldr	r2, [r3, #8]
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	005b      	lsls	r3, r3, #1
 80064e6:	409a      	lsls	r2, r3
 80064e8:	0013      	movs	r3, r2
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	2203      	movs	r2, #3
 80064fc:	4013      	ands	r3, r2
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d123      	bne.n	800654a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	08da      	lsrs	r2, r3, #3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	3208      	adds	r2, #8
 800650a:	0092      	lsls	r2, r2, #2
 800650c:	58d3      	ldr	r3, [r2, r3]
 800650e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	2207      	movs	r2, #7
 8006514:	4013      	ands	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	220f      	movs	r2, #15
 800651a:	409a      	lsls	r2, r3
 800651c:	0013      	movs	r3, r2
 800651e:	43da      	mvns	r2, r3
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	4013      	ands	r3, r2
 8006524:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	691a      	ldr	r2, [r3, #16]
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2107      	movs	r1, #7
 800652e:	400b      	ands	r3, r1
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	409a      	lsls	r2, r3
 8006534:	0013      	movs	r3, r2
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	4313      	orrs	r3, r2
 800653a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	08da      	lsrs	r2, r3, #3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	3208      	adds	r2, #8
 8006544:	0092      	lsls	r2, r2, #2
 8006546:	6939      	ldr	r1, [r7, #16]
 8006548:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	005b      	lsls	r3, r3, #1
 8006554:	2203      	movs	r2, #3
 8006556:	409a      	lsls	r2, r3
 8006558:	0013      	movs	r3, r2
 800655a:	43da      	mvns	r2, r3
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	4013      	ands	r3, r2
 8006560:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	2203      	movs	r2, #3
 8006568:	401a      	ands	r2, r3
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	005b      	lsls	r3, r3, #1
 800656e:	409a      	lsls	r2, r3
 8006570:	0013      	movs	r3, r2
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	4313      	orrs	r3, r2
 8006576:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u) {
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	23c0      	movs	r3, #192	; 0xc0
 8006584:	029b      	lsls	r3, r3, #10
 8006586:	4013      	ands	r3, r2
 8006588:	d100      	bne.n	800658c <HAL_GPIO_Init+0x174>
 800658a:	e092      	b.n	80066b2 <HAL_GPIO_Init+0x29a>
        temp = EXTI->EXTICR[position >> 2u];
 800658c:	4a50      	ldr	r2, [pc, #320]	; (80066d0 <HAL_GPIO_Init+0x2b8>)
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	089b      	lsrs	r3, r3, #2
 8006592:	3318      	adds	r3, #24
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	589b      	ldr	r3, [r3, r2]
 8006598:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2203      	movs	r2, #3
 800659e:	4013      	ands	r3, r2
 80065a0:	00db      	lsls	r3, r3, #3
 80065a2:	220f      	movs	r2, #15
 80065a4:	409a      	lsls	r2, r3
 80065a6:	0013      	movs	r3, r2
 80065a8:	43da      	mvns	r2, r3
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	4013      	ands	r3, r2
 80065ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	23a0      	movs	r3, #160	; 0xa0
 80065b4:	05db      	lsls	r3, r3, #23
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d013      	beq.n	80065e2 <HAL_GPIO_Init+0x1ca>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a45      	ldr	r2, [pc, #276]	; (80066d4 <HAL_GPIO_Init+0x2bc>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d00d      	beq.n	80065de <HAL_GPIO_Init+0x1c6>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a44      	ldr	r2, [pc, #272]	; (80066d8 <HAL_GPIO_Init+0x2c0>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d007      	beq.n	80065da <HAL_GPIO_Init+0x1c2>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a43      	ldr	r2, [pc, #268]	; (80066dc <HAL_GPIO_Init+0x2c4>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d101      	bne.n	80065d6 <HAL_GPIO_Init+0x1be>
 80065d2:	2303      	movs	r3, #3
 80065d4:	e006      	b.n	80065e4 <HAL_GPIO_Init+0x1cc>
 80065d6:	2305      	movs	r3, #5
 80065d8:	e004      	b.n	80065e4 <HAL_GPIO_Init+0x1cc>
 80065da:	2302      	movs	r3, #2
 80065dc:	e002      	b.n	80065e4 <HAL_GPIO_Init+0x1cc>
 80065de:	2301      	movs	r3, #1
 80065e0:	e000      	b.n	80065e4 <HAL_GPIO_Init+0x1cc>
 80065e2:	2300      	movs	r3, #0
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	2103      	movs	r1, #3
 80065e8:	400a      	ands	r2, r1
 80065ea:	00d2      	lsls	r2, r2, #3
 80065ec:	4093      	lsls	r3, r2
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80065f4:	4936      	ldr	r1, [pc, #216]	; (80066d0 <HAL_GPIO_Init+0x2b8>)
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	089b      	lsrs	r3, r3, #2
 80065fa:	3318      	adds	r3, #24
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006602:	4a33      	ldr	r2, [pc, #204]	; (80066d0 <HAL_GPIO_Init+0x2b8>)
 8006604:	2380      	movs	r3, #128	; 0x80
 8006606:	58d3      	ldr	r3, [r2, r3]
 8006608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	43da      	mvns	r2, r3
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	4013      	ands	r3, r2
 8006612:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u) {
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	2380      	movs	r3, #128	; 0x80
 800661a:	025b      	lsls	r3, r3, #9
 800661c:	4013      	ands	r3, r2
 800661e:	d003      	beq.n	8006628 <HAL_GPIO_Init+0x210>
          temp |= iocurrent;
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4313      	orrs	r3, r2
 8006626:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006628:	4929      	ldr	r1, [pc, #164]	; (80066d0 <HAL_GPIO_Init+0x2b8>)
 800662a:	2280      	movs	r2, #128	; 0x80
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8006630:	4a27      	ldr	r2, [pc, #156]	; (80066d0 <HAL_GPIO_Init+0x2b8>)
 8006632:	2384      	movs	r3, #132	; 0x84
 8006634:	58d3      	ldr	r3, [r2, r3]
 8006636:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	43da      	mvns	r2, r3
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	4013      	ands	r3, r2
 8006640:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u) {
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	2380      	movs	r3, #128	; 0x80
 8006648:	029b      	lsls	r3, r3, #10
 800664a:	4013      	ands	r3, r2
 800664c:	d003      	beq.n	8006656 <HAL_GPIO_Init+0x23e>
          temp |= iocurrent;
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4313      	orrs	r3, r2
 8006654:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006656:	491e      	ldr	r1, [pc, #120]	; (80066d0 <HAL_GPIO_Init+0x2b8>)
 8006658:	2284      	movs	r2, #132	; 0x84
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800665e:	4b1c      	ldr	r3, [pc, #112]	; (80066d0 <HAL_GPIO_Init+0x2b8>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	43da      	mvns	r2, r3
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	4013      	ands	r3, r2
 800666c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u) {
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	2380      	movs	r3, #128	; 0x80
 8006674:	035b      	lsls	r3, r3, #13
 8006676:	4013      	ands	r3, r2
 8006678:	d003      	beq.n	8006682 <HAL_GPIO_Init+0x26a>
          temp |= iocurrent;
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4313      	orrs	r3, r2
 8006680:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006682:	4b13      	ldr	r3, [pc, #76]	; (80066d0 <HAL_GPIO_Init+0x2b8>)
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006688:	4b11      	ldr	r3, [pc, #68]	; (80066d0 <HAL_GPIO_Init+0x2b8>)
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	43da      	mvns	r2, r3
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	4013      	ands	r3, r2
 8006696:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u) {
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	2380      	movs	r3, #128	; 0x80
 800669e:	039b      	lsls	r3, r3, #14
 80066a0:	4013      	ands	r3, r2
 80066a2:	d003      	beq.n	80066ac <HAL_GPIO_Init+0x294>
          temp |= iocurrent;
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80066ac:	4b08      	ldr	r3, [pc, #32]	; (80066d0 <HAL_GPIO_Init+0x2b8>)
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	3301      	adds	r3, #1
 80066b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u) {
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	40da      	lsrs	r2, r3
 80066c0:	1e13      	subs	r3, r2, #0
 80066c2:	d000      	beq.n	80066c6 <HAL_GPIO_Init+0x2ae>
 80066c4:	e6b0      	b.n	8006428 <HAL_GPIO_Init+0x10>
  }
}
 80066c6:	46c0      	nop			; (mov r8, r8)
 80066c8:	46c0      	nop			; (mov r8, r8)
 80066ca:	46bd      	mov	sp, r7
 80066cc:	b006      	add	sp, #24
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	40021800 	.word	0x40021800
 80066d4:	50000400 	.word	0x50000400
 80066d8:	50000800 	.word	0x50000800
 80066dc:	50000c00 	.word	0x50000c00

080066e0 <HAL_GPIO_ReadPin>:
 * @param  GPIO_Pin specifies the port bit to read.
 *         This parameter can be any combination of GPIO_Pin_x where x can be
 * (0..15).
 * @retval The input port pin value.
 */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	000a      	movs	r2, r1
 80066ea:	1cbb      	adds	r3, r7, #2
 80066ec:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u) {
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	1cba      	adds	r2, r7, #2
 80066f4:	8812      	ldrh	r2, [r2, #0]
 80066f6:	4013      	ands	r3, r2
 80066f8:	d004      	beq.n	8006704 <HAL_GPIO_ReadPin+0x24>
    bitstatus = GPIO_PIN_SET;
 80066fa:	230f      	movs	r3, #15
 80066fc:	18fb      	adds	r3, r7, r3
 80066fe:	2201      	movs	r2, #1
 8006700:	701a      	strb	r2, [r3, #0]
 8006702:	e003      	b.n	800670c <HAL_GPIO_ReadPin+0x2c>
  } else {
    bitstatus = GPIO_PIN_RESET;
 8006704:	230f      	movs	r3, #15
 8006706:	18fb      	adds	r3, r7, r3
 8006708:	2200      	movs	r2, #0
 800670a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800670c:	230f      	movs	r3, #15
 800670e:	18fb      	adds	r3, r7, r3
 8006710:	781b      	ldrb	r3, [r3, #0]
}
 8006712:	0018      	movs	r0, r3
 8006714:	46bd      	mov	sp, r7
 8006716:	b004      	add	sp, #16
 8006718:	bd80      	pop	{r7, pc}

0800671a <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
                       GPIO_PinState PinState) {
 800671a:	b580      	push	{r7, lr}
 800671c:	b082      	sub	sp, #8
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	0008      	movs	r0, r1
 8006724:	0011      	movs	r1, r2
 8006726:	1cbb      	adds	r3, r7, #2
 8006728:	1c02      	adds	r2, r0, #0
 800672a:	801a      	strh	r2, [r3, #0]
 800672c:	1c7b      	adds	r3, r7, #1
 800672e:	1c0a      	adds	r2, r1, #0
 8006730:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET) {
 8006732:	1c7b      	adds	r3, r7, #1
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d004      	beq.n	8006744 <HAL_GPIO_WritePin+0x2a>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800673a:	1cbb      	adds	r3, r7, #2
 800673c:	881a      	ldrh	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	619a      	str	r2, [r3, #24]
  } else {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006742:	e003      	b.n	800674c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006744:	1cbb      	adds	r3, r7, #2
 8006746:	881a      	ldrh	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800674c:	46c0      	nop			; (mov r8, r8)
 800674e:	46bd      	mov	sp, r7
 8006750:	b002      	add	sp, #8
 8006752:	bd80      	pop	{r7, pc}

08006754 <HAL_GPIO_TogglePin>:
 * @param  GPIO_Pin specifies the pin to be toggled.
 *         This parameter can be any combination of GPIO_Pin_x where x can be
 * (0..15).
 * @retval None
 */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	000a      	movs	r2, r1
 800675e:	1cbb      	adds	r3, r7, #2
 8006760:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006768:	1cbb      	adds	r3, r7, #2
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	4013      	ands	r3, r2
 8006770:	041a      	lsls	r2, r3, #16
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	43db      	mvns	r3, r3
 8006776:	1cb9      	adds	r1, r7, #2
 8006778:	8809      	ldrh	r1, [r1, #0]
 800677a:	400b      	ands	r3, r1
 800677c:	431a      	orrs	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	619a      	str	r2, [r3, #24]
}
 8006782:	46c0      	nop			; (mov r8, r8)
 8006784:	46bd      	mov	sp, r7
 8006786:	b004      	add	sp, #16
 8006788:	bd80      	pop	{r7, pc}
	...

0800678c <HAL_GPIO_EXTI_IRQHandler>:
/**
 * @brief  Handle EXTI interrupt request.
 * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin) {
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	0002      	movs	r2, r0
 8006794:	1dbb      	adds	r3, r7, #6
 8006796:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u) {
 8006798:	4b10      	ldr	r3, [pc, #64]	; (80067dc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	1dba      	adds	r2, r7, #6
 800679e:	8812      	ldrh	r2, [r2, #0]
 80067a0:	4013      	ands	r3, r2
 80067a2:	d008      	beq.n	80067b6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80067a4:	4b0d      	ldr	r3, [pc, #52]	; (80067dc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80067a6:	1dba      	adds	r2, r7, #6
 80067a8:	8812      	ldrh	r2, [r2, #0]
 80067aa:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80067ac:	1dbb      	adds	r3, r7, #6
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	0018      	movs	r0, r3
 80067b2:	f7fc f8e5 	bl	8002980 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u) {
 80067b6:	4b09      	ldr	r3, [pc, #36]	; (80067dc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	1dba      	adds	r2, r7, #6
 80067bc:	8812      	ldrh	r2, [r2, #0]
 80067be:	4013      	ands	r3, r2
 80067c0:	d008      	beq.n	80067d4 <HAL_GPIO_EXTI_IRQHandler+0x48>
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80067c2:	4b06      	ldr	r3, [pc, #24]	; (80067dc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80067c4:	1dba      	adds	r2, r7, #6
 80067c6:	8812      	ldrh	r2, [r2, #0]
 80067c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80067ca:	1dbb      	adds	r3, r7, #6
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	0018      	movs	r0, r3
 80067d0:	f000 f806 	bl	80067e0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80067d4:	46c0      	nop			; (mov r8, r8)
 80067d6:	46bd      	mov	sp, r7
 80067d8:	b002      	add	sp, #8
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	40021800 	.word	0x40021800

080067e0 <HAL_GPIO_EXTI_Falling_Callback>:
/**
 * @brief  EXTI line detection callback.
 * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	0002      	movs	r2, r0
 80067e8:	1dbb      	adds	r3, r7, #6
 80067ea:	801a      	strh	r2, [r3, #0]

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user
     file
   */
}
 80067ec:	46c0      	nop			; (mov r8, r8)
 80067ee:	46bd      	mov	sp, r7
 80067f0:	b002      	add	sp, #8
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <HAL_PWREx_ControlVoltageScaling>:
 * @note  When moving from Range 2 to Range 1, the API waits for VOSF flag to be
 *        cleared before returning the status. If the flag is not cleared within
 *        6 microseconds, HAL_TIMEOUT status is reported.
 * @retval HAL Status
 */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling) {
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80067fc:	4b19      	ldr	r3, [pc, #100]	; (8006864 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a19      	ldr	r2, [pc, #100]	; (8006868 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006802:	4013      	ands	r3, r2
 8006804:	0019      	movs	r1, r3
 8006806:	4b17      	ldr	r3, [pc, #92]	; (8006864 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	430a      	orrs	r2, r1
 800680c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches
   * new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1) {
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	2380      	movs	r3, #128	; 0x80
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	429a      	cmp	r2, r3
 8006816:	d11f      	bne.n	8006858 <HAL_PWREx_ControlVoltageScaling+0x64>
    /* Set timeout value */
    wait_loop_index =
        ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006818:	4b14      	ldr	r3, [pc, #80]	; (800686c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	0013      	movs	r3, r2
 800681e:	005b      	lsls	r3, r3, #1
 8006820:	189b      	adds	r3, r3, r2
 8006822:	005b      	lsls	r3, r3, #1
 8006824:	4912      	ldr	r1, [pc, #72]	; (8006870 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8006826:	0018      	movs	r0, r3
 8006828:	f7f9 fc80 	bl	800012c <__udivsi3>
 800682c:	0003      	movs	r3, r0
    wait_loop_index =
 800682e:	3301      	adds	r3, #1
 8006830:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) {
 8006832:	e008      	b.n	8006846 <HAL_PWREx_ControlVoltageScaling+0x52>
      if (wait_loop_index != 0U) {
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <HAL_PWREx_ControlVoltageScaling+0x4e>
        wait_loop_index--;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	3b01      	subs	r3, #1
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	e001      	b.n	8006846 <HAL_PWREx_ControlVoltageScaling+0x52>
      } else {
        return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e009      	b.n	800685a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) {
 8006846:	4b07      	ldr	r3, [pc, #28]	; (8006864 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006848:	695a      	ldr	r2, [r3, #20]
 800684a:	2380      	movs	r3, #128	; 0x80
 800684c:	00db      	lsls	r3, r3, #3
 800684e:	401a      	ands	r2, r3
 8006850:	2380      	movs	r3, #128	; 0x80
 8006852:	00db      	lsls	r3, r3, #3
 8006854:	429a      	cmp	r2, r3
 8006856:	d0ed      	beq.n	8006834 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	0018      	movs	r0, r3
 800685c:	46bd      	mov	sp, r7
 800685e:	b004      	add	sp, #16
 8006860:	bd80      	pop	{r7, pc}
 8006862:	46c0      	nop			; (mov r8, r8)
 8006864:	40007000 	.word	0x40007000
 8006868:	fffff9ff 	.word	0xfffff9ff
 800686c:	20000000 	.word	0x20000000
 8006870:	000f4240 	.word	0x000f4240

08006874 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8006878:	4b03      	ldr	r3, [pc, #12]	; (8006888 <LL_RCC_GetAPB1Prescaler+0x14>)
 800687a:	689a      	ldr	r2, [r3, #8]
 800687c:	23e0      	movs	r3, #224	; 0xe0
 800687e:	01db      	lsls	r3, r3, #7
 8006880:	4013      	ands	r3, r2
}
 8006882:	0018      	movs	r0, r3
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	40021000 	.word	0x40021000

0800688c <HAL_RCC_OscConfig>:
 * @note   Transition LSE Bypass to LSE On and LSE On to LSE Bypass are not
 *         supported by this function. User should request a transition to LSE
 * Off first and then to LSE On or LSE Bypass.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct) {
 800688c:	b580      	push	{r7, lr}
 800688e:	b088      	sub	sp, #32
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL) {
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <HAL_RCC_OscConfig+0x12>
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e304      	b.n	8006ea8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) ==
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2201      	movs	r2, #1
 80068a4:	4013      	ands	r3, r2
 80068a6:	d100      	bne.n	80068aa <HAL_RCC_OscConfig+0x1e>
 80068a8:	e07c      	b.n	80069a4 <HAL_RCC_OscConfig+0x118>
      RCC_OSCILLATORTYPE_HSE) {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068aa:	4bc3      	ldr	r3, [pc, #780]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	2238      	movs	r2, #56	; 0x38
 80068b0:	4013      	ands	r3, r2
 80068b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068b4:	4bc0      	ldr	r3, [pc, #768]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	2203      	movs	r2, #3
 80068ba:	4013      	ands	r3, r2
 80068bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these
     * cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) &&
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	2b10      	cmp	r3, #16
 80068c2:	d102      	bne.n	80068ca <HAL_RCC_OscConfig+0x3e>
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	2b03      	cmp	r3, #3
 80068c8:	d002      	beq.n	80068d0 <HAL_RCC_OscConfig+0x44>
         (temp_pllckcfg == RCC_PLLSOURCE_HSE)) ||
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	2b08      	cmp	r3, #8
 80068ce:	d10b      	bne.n	80068e8 <HAL_RCC_OscConfig+0x5c>
        (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)) {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) &&
 80068d0:	4bb9      	ldr	r3, [pc, #740]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	2380      	movs	r3, #128	; 0x80
 80068d6:	029b      	lsls	r3, r3, #10
 80068d8:	4013      	ands	r3, r2
 80068da:	d062      	beq.n	80069a2 <HAL_RCC_OscConfig+0x116>
          (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) &&
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d15e      	bne.n	80069a2 <HAL_RCC_OscConfig+0x116>
        return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e2df      	b.n	8006ea8 <HAL_RCC_OscConfig+0x61c>
      }
    } else {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	2380      	movs	r3, #128	; 0x80
 80068ee:	025b      	lsls	r3, r3, #9
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d107      	bne.n	8006904 <HAL_RCC_OscConfig+0x78>
 80068f4:	4bb0      	ldr	r3, [pc, #704]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	4baf      	ldr	r3, [pc, #700]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 80068fa:	2180      	movs	r1, #128	; 0x80
 80068fc:	0249      	lsls	r1, r1, #9
 80068fe:	430a      	orrs	r2, r1
 8006900:	601a      	str	r2, [r3, #0]
 8006902:	e020      	b.n	8006946 <HAL_RCC_OscConfig+0xba>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	23a0      	movs	r3, #160	; 0xa0
 800690a:	02db      	lsls	r3, r3, #11
 800690c:	429a      	cmp	r2, r3
 800690e:	d10e      	bne.n	800692e <HAL_RCC_OscConfig+0xa2>
 8006910:	4ba9      	ldr	r3, [pc, #676]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	4ba8      	ldr	r3, [pc, #672]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006916:	2180      	movs	r1, #128	; 0x80
 8006918:	02c9      	lsls	r1, r1, #11
 800691a:	430a      	orrs	r2, r1
 800691c:	601a      	str	r2, [r3, #0]
 800691e:	4ba6      	ldr	r3, [pc, #664]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	4ba5      	ldr	r3, [pc, #660]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006924:	2180      	movs	r1, #128	; 0x80
 8006926:	0249      	lsls	r1, r1, #9
 8006928:	430a      	orrs	r2, r1
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	e00b      	b.n	8006946 <HAL_RCC_OscConfig+0xba>
 800692e:	4ba2      	ldr	r3, [pc, #648]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	4ba1      	ldr	r3, [pc, #644]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006934:	49a1      	ldr	r1, [pc, #644]	; (8006bbc <HAL_RCC_OscConfig+0x330>)
 8006936:	400a      	ands	r2, r1
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	4b9f      	ldr	r3, [pc, #636]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	4b9e      	ldr	r3, [pc, #632]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006940:	499f      	ldr	r1, [pc, #636]	; (8006bc0 <HAL_RCC_OscConfig+0x334>)
 8006942:	400a      	ands	r2, r1
 8006944:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF) {
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d014      	beq.n	8006978 <HAL_RCC_OscConfig+0xec>
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694e:	f7fe fed7 	bl	8005700 <HAL_GetTick>
 8006952:	0003      	movs	r3, r0
 8006954:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U) {
 8006956:	e008      	b.n	800696a <HAL_RCC_OscConfig+0xde>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8006958:	f7fe fed2 	bl	8005700 <HAL_GetTick>
 800695c:	0002      	movs	r2, r0
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	2b64      	cmp	r3, #100	; 0x64
 8006964:	d901      	bls.n	800696a <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e29e      	b.n	8006ea8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U) {
 800696a:	4b93      	ldr	r3, [pc, #588]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	2380      	movs	r3, #128	; 0x80
 8006970:	029b      	lsls	r3, r3, #10
 8006972:	4013      	ands	r3, r2
 8006974:	d0f0      	beq.n	8006958 <HAL_RCC_OscConfig+0xcc>
 8006976:	e015      	b.n	80069a4 <HAL_RCC_OscConfig+0x118>
          }
        }
      } else {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006978:	f7fe fec2 	bl	8005700 <HAL_GetTick>
 800697c:	0003      	movs	r3, r0
 800697e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) {
 8006980:	e008      	b.n	8006994 <HAL_RCC_OscConfig+0x108>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8006982:	f7fe febd 	bl	8005700 <HAL_GetTick>
 8006986:	0002      	movs	r2, r0
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	2b64      	cmp	r3, #100	; 0x64
 800698e:	d901      	bls.n	8006994 <HAL_RCC_OscConfig+0x108>
            return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e289      	b.n	8006ea8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) {
 8006994:	4b88      	ldr	r3, [pc, #544]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	2380      	movs	r3, #128	; 0x80
 800699a:	029b      	lsls	r3, r3, #10
 800699c:	4013      	ands	r3, r2
 800699e:	d1f0      	bne.n	8006982 <HAL_RCC_OscConfig+0xf6>
 80069a0:	e000      	b.n	80069a4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) &&
 80069a2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) ==
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2202      	movs	r2, #2
 80069aa:	4013      	ands	r3, r2
 80069ac:	d100      	bne.n	80069b0 <HAL_RCC_OscConfig+0x124>
 80069ae:	e099      	b.n	8006ae4 <HAL_RCC_OscConfig+0x258>
        IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is
     * selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069b0:	4b81      	ldr	r3, [pc, #516]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	2238      	movs	r2, #56	; 0x38
 80069b6:	4013      	ands	r3, r2
 80069b8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069ba:	4b7f      	ldr	r3, [pc, #508]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	2203      	movs	r2, #3
 80069c0:	4013      	ands	r3, r2
 80069c2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) &&
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	2b10      	cmp	r3, #16
 80069c8:	d102      	bne.n	80069d0 <HAL_RCC_OscConfig+0x144>
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d002      	beq.n	80069d6 <HAL_RCC_OscConfig+0x14a>
         (temp_pllckcfg == RCC_PLLSOURCE_HSI)) ||
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d135      	bne.n	8006a42 <HAL_RCC_OscConfig+0x1b6>
        (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)) {
      /* When HSI is used as system clock or as PLL input clock it can not be
       * disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) &&
 80069d6:	4b78      	ldr	r3, [pc, #480]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	2380      	movs	r3, #128	; 0x80
 80069dc:	00db      	lsls	r3, r3, #3
 80069de:	4013      	ands	r3, r2
 80069e0:	d005      	beq.n	80069ee <HAL_RCC_OscConfig+0x162>
          (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)) {
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68db      	ldr	r3, [r3, #12]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) &&
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <HAL_RCC_OscConfig+0x162>
        return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e25c      	b.n	8006ea8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 80069ee:	4b72      	ldr	r3, [pc, #456]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	4a74      	ldr	r2, [pc, #464]	; (8006bc4 <HAL_RCC_OscConfig+0x338>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	0019      	movs	r1, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	021a      	lsls	r2, r3, #8
 80069fe:	4b6e      	ldr	r3, [pc, #440]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006a00:	430a      	orrs	r2, r1
 8006a02:	605a      	str	r2, [r3, #4]
            RCC_OscInitStruct->HSICalibrationValue);

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) {
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d112      	bne.n	8006a30 <HAL_RCC_OscConfig+0x1a4>
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006a0a:	4b6b      	ldr	r3, [pc, #428]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a6e      	ldr	r2, [pc, #440]	; (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006a10:	4013      	ands	r3, r2
 8006a12:	0019      	movs	r1, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	691a      	ldr	r2, [r3, #16]
 8006a18:	4b67      	ldr	r3, [pc, #412]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock =
              (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >>
 8006a1e:	4b66      	ldr	r3, [pc, #408]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	0adb      	lsrs	r3, r3, #11
 8006a24:	2207      	movs	r2, #7
 8006a26:	4013      	ands	r3, r2
 8006a28:	4a68      	ldr	r2, [pc, #416]	; (8006bcc <HAL_RCC_OscConfig+0x340>)
 8006a2a:	40da      	lsrs	r2, r3
          SystemCoreClock =
 8006a2c:	4b68      	ldr	r3, [pc, #416]	; (8006bd0 <HAL_RCC_OscConfig+0x344>)
 8006a2e:	601a      	str	r2, [r3, #0]
                                    RCC_CR_HSIDIV_Pos)));
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK) {
 8006a30:	4b68      	ldr	r3, [pc, #416]	; (8006bd4 <HAL_RCC_OscConfig+0x348>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	0018      	movs	r0, r3
 8006a36:	f7fe fe07 	bl	8005648 <HAL_InitTick>
 8006a3a:	1e03      	subs	r3, r0, #0
 8006a3c:	d051      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x256>
          return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e232      	b.n	8006ea8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    } else {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF) {
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d030      	beq.n	8006aac <HAL_RCC_OscConfig+0x220>
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006a4a:	4b5b      	ldr	r3, [pc, #364]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a5e      	ldr	r2, [pc, #376]	; (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006a50:	4013      	ands	r3, r2
 8006a52:	0019      	movs	r1, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	691a      	ldr	r2, [r3, #16]
 8006a58:	4b57      	ldr	r3, [pc, #348]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006a5e:	4b56      	ldr	r3, [pc, #344]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	4b55      	ldr	r3, [pc, #340]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006a64:	2180      	movs	r1, #128	; 0x80
 8006a66:	0049      	lsls	r1, r1, #1
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a6c:	f7fe fe48 	bl	8005700 <HAL_GetTick>
 8006a70:	0003      	movs	r3, r0
 8006a72:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U) {
 8006a74:	e008      	b.n	8006a88 <HAL_RCC_OscConfig+0x1fc>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8006a76:	f7fe fe43 	bl	8005700 <HAL_GetTick>
 8006a7a:	0002      	movs	r2, r0
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d901      	bls.n	8006a88 <HAL_RCC_OscConfig+0x1fc>
            return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e20f      	b.n	8006ea8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U) {
 8006a88:	4b4b      	ldr	r3, [pc, #300]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	2380      	movs	r3, #128	; 0x80
 8006a8e:	00db      	lsls	r3, r3, #3
 8006a90:	4013      	ands	r3, r2
 8006a92:	d0f0      	beq.n	8006a76 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8006a94:	4b48      	ldr	r3, [pc, #288]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	4a4a      	ldr	r2, [pc, #296]	; (8006bc4 <HAL_RCC_OscConfig+0x338>)
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	0019      	movs	r1, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	021a      	lsls	r2, r3, #8
 8006aa4:	4b44      	ldr	r3, [pc, #272]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	605a      	str	r2, [r3, #4]
 8006aaa:	e01b      	b.n	8006ae4 <HAL_RCC_OscConfig+0x258>
            RCC_OscInitStruct->HSICalibrationValue);
      } else {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006aac:	4b42      	ldr	r3, [pc, #264]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	4b41      	ldr	r3, [pc, #260]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006ab2:	4949      	ldr	r1, [pc, #292]	; (8006bd8 <HAL_RCC_OscConfig+0x34c>)
 8006ab4:	400a      	ands	r2, r1
 8006ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab8:	f7fe fe22 	bl	8005700 <HAL_GetTick>
 8006abc:	0003      	movs	r3, r0
 8006abe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) {
 8006ac0:	e008      	b.n	8006ad4 <HAL_RCC_OscConfig+0x248>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8006ac2:	f7fe fe1d 	bl	8005700 <HAL_GetTick>
 8006ac6:	0002      	movs	r2, r0
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d901      	bls.n	8006ad4 <HAL_RCC_OscConfig+0x248>
            return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e1e9      	b.n	8006ea8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) {
 8006ad4:	4b38      	ldr	r3, [pc, #224]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	2380      	movs	r3, #128	; 0x80
 8006ada:	00db      	lsls	r3, r3, #3
 8006adc:	4013      	ands	r3, r2
 8006ade:	d1f0      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x236>
 8006ae0:	e000      	b.n	8006ae4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) &&
 8006ae2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) ==
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2208      	movs	r2, #8
 8006aea:	4013      	ands	r3, r2
 8006aec:	d047      	beq.n	8006b7e <HAL_RCC_OscConfig+0x2f2>
      RCC_OSCILLATORTYPE_LSI) {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI) {
 8006aee:	4b32      	ldr	r3, [pc, #200]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	2238      	movs	r2, #56	; 0x38
 8006af4:	4013      	ands	r3, r2
 8006af6:	2b18      	cmp	r3, #24
 8006af8:	d10a      	bne.n	8006b10 <HAL_RCC_OscConfig+0x284>
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) &&
 8006afa:	4b2f      	ldr	r3, [pc, #188]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006afe:	2202      	movs	r2, #2
 8006b00:	4013      	ands	r3, r2
 8006b02:	d03c      	beq.n	8006b7e <HAL_RCC_OscConfig+0x2f2>
          (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)) {
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	699b      	ldr	r3, [r3, #24]
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) &&
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d138      	bne.n	8006b7e <HAL_RCC_OscConfig+0x2f2>
        return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e1cb      	b.n	8006ea8 <HAL_RCC_OscConfig+0x61c>
      }
    } else {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF) {
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d019      	beq.n	8006b4c <HAL_RCC_OscConfig+0x2c0>
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006b18:	4b27      	ldr	r3, [pc, #156]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006b1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006b1c:	4b26      	ldr	r3, [pc, #152]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006b1e:	2101      	movs	r1, #1
 8006b20:	430a      	orrs	r2, r1
 8006b22:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b24:	f7fe fdec 	bl	8005700 <HAL_GetTick>
 8006b28:	0003      	movs	r3, r0
 8006b2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U) {
 8006b2c:	e008      	b.n	8006b40 <HAL_RCC_OscConfig+0x2b4>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8006b2e:	f7fe fde7 	bl	8005700 <HAL_GetTick>
 8006b32:	0002      	movs	r2, r0
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d901      	bls.n	8006b40 <HAL_RCC_OscConfig+0x2b4>
            return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e1b3      	b.n	8006ea8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U) {
 8006b40:	4b1d      	ldr	r3, [pc, #116]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b44:	2202      	movs	r2, #2
 8006b46:	4013      	ands	r3, r2
 8006b48:	d0f1      	beq.n	8006b2e <HAL_RCC_OscConfig+0x2a2>
 8006b4a:	e018      	b.n	8006b7e <HAL_RCC_OscConfig+0x2f2>
          }
        }
      } else {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006b4c:	4b1a      	ldr	r3, [pc, #104]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006b4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006b50:	4b19      	ldr	r3, [pc, #100]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006b52:	2101      	movs	r1, #1
 8006b54:	438a      	bics	r2, r1
 8006b56:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b58:	f7fe fdd2 	bl	8005700 <HAL_GetTick>
 8006b5c:	0003      	movs	r3, r0
 8006b5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U) {
 8006b60:	e008      	b.n	8006b74 <HAL_RCC_OscConfig+0x2e8>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8006b62:	f7fe fdcd 	bl	8005700 <HAL_GetTick>
 8006b66:	0002      	movs	r2, r0
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d901      	bls.n	8006b74 <HAL_RCC_OscConfig+0x2e8>
            return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e199      	b.n	8006ea8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U) {
 8006b74:	4b10      	ldr	r3, [pc, #64]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b78:	2202      	movs	r2, #2
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	d1f1      	bne.n	8006b62 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) ==
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2204      	movs	r2, #4
 8006b84:	4013      	ands	r3, r2
 8006b86:	d100      	bne.n	8006b8a <HAL_RCC_OscConfig+0x2fe>
 8006b88:	e0c6      	b.n	8006d18 <HAL_RCC_OscConfig+0x48c>
      RCC_OSCILLATORTYPE_LSE) {
    FlagStatus pwrclkchanged = RESET;
 8006b8a:	231f      	movs	r3, #31
 8006b8c:	18fb      	adds	r3, r7, r3
 8006b8e:	2200      	movs	r2, #0
 8006b90:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE) {
 8006b92:	4b09      	ldr	r3, [pc, #36]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	2238      	movs	r2, #56	; 0x38
 8006b98:	4013      	ands	r3, r2
 8006b9a:	2b20      	cmp	r3, #32
 8006b9c:	d11e      	bne.n	8006bdc <HAL_RCC_OscConfig+0x350>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) &&
 8006b9e:	4b06      	ldr	r3, [pc, #24]	; (8006bb8 <HAL_RCC_OscConfig+0x32c>)
 8006ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	d100      	bne.n	8006baa <HAL_RCC_OscConfig+0x31e>
 8006ba8:	e0b6      	b.n	8006d18 <HAL_RCC_OscConfig+0x48c>
          (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)) {
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	689b      	ldr	r3, [r3, #8]
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) &&
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d000      	beq.n	8006bb4 <HAL_RCC_OscConfig+0x328>
 8006bb2:	e0b1      	b.n	8006d18 <HAL_RCC_OscConfig+0x48c>
        return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e177      	b.n	8006ea8 <HAL_RCC_OscConfig+0x61c>
 8006bb8:	40021000 	.word	0x40021000
 8006bbc:	fffeffff 	.word	0xfffeffff
 8006bc0:	fffbffff 	.word	0xfffbffff
 8006bc4:	ffff80ff 	.word	0xffff80ff
 8006bc8:	ffffc7ff 	.word	0xffffc7ff
 8006bcc:	00f42400 	.word	0x00f42400
 8006bd0:	20000000 	.word	0x20000000
 8006bd4:	20000004 	.word	0x20000004
 8006bd8:	fffffeff 	.word	0xfffffeff
      }
    } else {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U) {
 8006bdc:	4bb4      	ldr	r3, [pc, #720]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006bde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006be0:	2380      	movs	r3, #128	; 0x80
 8006be2:	055b      	lsls	r3, r3, #21
 8006be4:	4013      	ands	r3, r2
 8006be6:	d101      	bne.n	8006bec <HAL_RCC_OscConfig+0x360>
 8006be8:	2301      	movs	r3, #1
 8006bea:	e000      	b.n	8006bee <HAL_RCC_OscConfig+0x362>
 8006bec:	2300      	movs	r3, #0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d011      	beq.n	8006c16 <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_PWR_CLK_ENABLE();
 8006bf2:	4baf      	ldr	r3, [pc, #700]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006bf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bf6:	4bae      	ldr	r3, [pc, #696]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006bf8:	2180      	movs	r1, #128	; 0x80
 8006bfa:	0549      	lsls	r1, r1, #21
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	63da      	str	r2, [r3, #60]	; 0x3c
 8006c00:	4bab      	ldr	r3, [pc, #684]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006c02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c04:	2380      	movs	r3, #128	; 0x80
 8006c06:	055b      	lsls	r3, r3, #21
 8006c08:	4013      	ands	r3, r2
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006c0e:	231f      	movs	r3, #31
 8006c10:	18fb      	adds	r3, r7, r3
 8006c12:	2201      	movs	r2, #1
 8006c14:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 8006c16:	4ba7      	ldr	r3, [pc, #668]	; (8006eb4 <HAL_RCC_OscConfig+0x628>)
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	2380      	movs	r3, #128	; 0x80
 8006c1c:	005b      	lsls	r3, r3, #1
 8006c1e:	4013      	ands	r3, r2
 8006c20:	d11a      	bne.n	8006c58 <HAL_RCC_OscConfig+0x3cc>
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c22:	4ba4      	ldr	r3, [pc, #656]	; (8006eb4 <HAL_RCC_OscConfig+0x628>)
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	4ba3      	ldr	r3, [pc, #652]	; (8006eb4 <HAL_RCC_OscConfig+0x628>)
 8006c28:	2180      	movs	r1, #128	; 0x80
 8006c2a:	0049      	lsls	r1, r1, #1
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006c30:	f7fe fd66 	bl	8005700 <HAL_GetTick>
 8006c34:	0003      	movs	r3, r0
 8006c36:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 8006c38:	e008      	b.n	8006c4c <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8006c3a:	f7fe fd61 	bl	8005700 <HAL_GetTick>
 8006c3e:	0002      	movs	r2, r0
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d901      	bls.n	8006c4c <HAL_RCC_OscConfig+0x3c0>
            return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e12d      	b.n	8006ea8 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 8006c4c:	4b99      	ldr	r3, [pc, #612]	; (8006eb4 <HAL_RCC_OscConfig+0x628>)
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	2380      	movs	r3, #128	; 0x80
 8006c52:	005b      	lsls	r3, r3, #1
 8006c54:	4013      	ands	r3, r2
 8006c56:	d0f0      	beq.n	8006c3a <HAL_RCC_OscConfig+0x3ae>
        }
      }

      /* Set the new LSE configuration
       * -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d106      	bne.n	8006c6e <HAL_RCC_OscConfig+0x3e2>
 8006c60:	4b93      	ldr	r3, [pc, #588]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006c62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c64:	4b92      	ldr	r3, [pc, #584]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006c66:	2101      	movs	r1, #1
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	65da      	str	r2, [r3, #92]	; 0x5c
 8006c6c:	e01c      	b.n	8006ca8 <HAL_RCC_OscConfig+0x41c>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	2b05      	cmp	r3, #5
 8006c74:	d10c      	bne.n	8006c90 <HAL_RCC_OscConfig+0x404>
 8006c76:	4b8e      	ldr	r3, [pc, #568]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006c78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c7a:	4b8d      	ldr	r3, [pc, #564]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006c7c:	2104      	movs	r1, #4
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	65da      	str	r2, [r3, #92]	; 0x5c
 8006c82:	4b8b      	ldr	r3, [pc, #556]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006c84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c86:	4b8a      	ldr	r3, [pc, #552]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006c88:	2101      	movs	r1, #1
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8006c8e:	e00b      	b.n	8006ca8 <HAL_RCC_OscConfig+0x41c>
 8006c90:	4b87      	ldr	r3, [pc, #540]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006c92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c94:	4b86      	ldr	r3, [pc, #536]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006c96:	2101      	movs	r1, #1
 8006c98:	438a      	bics	r2, r1
 8006c9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8006c9c:	4b84      	ldr	r3, [pc, #528]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006c9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ca0:	4b83      	ldr	r3, [pc, #524]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006ca2:	2104      	movs	r1, #4
 8006ca4:	438a      	bics	r2, r1
 8006ca6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF) {
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d014      	beq.n	8006cda <HAL_RCC_OscConfig+0x44e>
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb0:	f7fe fd26 	bl	8005700 <HAL_GetTick>
 8006cb4:	0003      	movs	r3, r0
 8006cb6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 8006cb8:	e009      	b.n	8006cce <HAL_RCC_OscConfig+0x442>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8006cba:	f7fe fd21 	bl	8005700 <HAL_GetTick>
 8006cbe:	0002      	movs	r2, r0
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	4a7c      	ldr	r2, [pc, #496]	; (8006eb8 <HAL_RCC_OscConfig+0x62c>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d901      	bls.n	8006cce <HAL_RCC_OscConfig+0x442>
            return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e0ec      	b.n	8006ea8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 8006cce:	4b78      	ldr	r3, [pc, #480]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	d0f0      	beq.n	8006cba <HAL_RCC_OscConfig+0x42e>
 8006cd8:	e013      	b.n	8006d02 <HAL_RCC_OscConfig+0x476>
          }
        }
      } else {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cda:	f7fe fd11 	bl	8005700 <HAL_GetTick>
 8006cde:	0003      	movs	r3, r0
 8006ce0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U) {
 8006ce2:	e009      	b.n	8006cf8 <HAL_RCC_OscConfig+0x46c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8006ce4:	f7fe fd0c 	bl	8005700 <HAL_GetTick>
 8006ce8:	0002      	movs	r2, r0
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	4a72      	ldr	r2, [pc, #456]	; (8006eb8 <HAL_RCC_OscConfig+0x62c>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d901      	bls.n	8006cf8 <HAL_RCC_OscConfig+0x46c>
            return HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e0d7      	b.n	8006ea8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U) {
 8006cf8:	4b6d      	ldr	r3, [pc, #436]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	4013      	ands	r3, r2
 8006d00:	d1f0      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET) {
 8006d02:	231f      	movs	r3, #31
 8006d04:	18fb      	adds	r3, r7, r3
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d105      	bne.n	8006d18 <HAL_RCC_OscConfig+0x48c>
        __HAL_RCC_PWR_CLK_DISABLE();
 8006d0c:	4b68      	ldr	r3, [pc, #416]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006d0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d10:	4b67      	ldr	r3, [pc, #412]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006d12:	496a      	ldr	r1, [pc, #424]	; (8006ebc <HAL_RCC_OscConfig+0x630>)
 8006d14:	400a      	ands	r2, r1
 8006d16:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE) {
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	69db      	ldr	r3, [r3, #28]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d100      	bne.n	8006d22 <HAL_RCC_OscConfig+0x496>
 8006d20:	e0c1      	b.n	8006ea6 <HAL_RCC_OscConfig+0x61a>
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
 8006d22:	4b63      	ldr	r3, [pc, #396]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	2238      	movs	r2, #56	; 0x38
 8006d28:	4013      	ands	r3, r2
 8006d2a:	2b10      	cmp	r3, #16
 8006d2c:	d100      	bne.n	8006d30 <HAL_RCC_OscConfig+0x4a4>
 8006d2e:	e081      	b.n	8006e34 <HAL_RCC_OscConfig+0x5a8>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON) {
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	69db      	ldr	r3, [r3, #28]
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d156      	bne.n	8006de6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d38:	4b5d      	ldr	r3, [pc, #372]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	4b5c      	ldr	r3, [pc, #368]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006d3e:	4960      	ldr	r1, [pc, #384]	; (8006ec0 <HAL_RCC_OscConfig+0x634>)
 8006d40:	400a      	ands	r2, r1
 8006d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d44:	f7fe fcdc 	bl	8005700 <HAL_GetTick>
 8006d48:	0003      	movs	r3, r0
 8006d4a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U) {
 8006d4c:	e008      	b.n	8006d60 <HAL_RCC_OscConfig+0x4d4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8006d4e:	f7fe fcd7 	bl	8005700 <HAL_GetTick>
 8006d52:	0002      	movs	r2, r0
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d901      	bls.n	8006d60 <HAL_RCC_OscConfig+0x4d4>
            return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e0a3      	b.n	8006ea8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U) {
 8006d60:	4b53      	ldr	r3, [pc, #332]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	2380      	movs	r3, #128	; 0x80
 8006d66:	049b      	lsls	r3, r3, #18
 8006d68:	4013      	ands	r3, r2
 8006d6a:	d1f0      	bne.n	8006d4e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division
         * factors. */
        __HAL_RCC_PLL_CONFIG(
 8006d6c:	4b50      	ldr	r3, [pc, #320]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	4a54      	ldr	r2, [pc, #336]	; (8006ec4 <HAL_RCC_OscConfig+0x638>)
 8006d72:	4013      	ands	r3, r2
 8006d74:	0019      	movs	r1, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a1a      	ldr	r2, [r3, #32]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d84:	021b      	lsls	r3, r3, #8
 8006d86:	431a      	orrs	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d92:	431a      	orrs	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d98:	431a      	orrs	r2, r3
 8006d9a:	4b45      	ldr	r3, [pc, #276]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006d9c:	430a      	orrs	r2, r1
 8006d9e:	60da      	str	r2, [r3, #12]
            RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
            RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006da0:	4b43      	ldr	r3, [pc, #268]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	4b42      	ldr	r3, [pc, #264]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006da6:	2180      	movs	r1, #128	; 0x80
 8006da8:	0449      	lsls	r1, r1, #17
 8006daa:	430a      	orrs	r2, r1
 8006dac:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006dae:	4b40      	ldr	r3, [pc, #256]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006db0:	68da      	ldr	r2, [r3, #12]
 8006db2:	4b3f      	ldr	r3, [pc, #252]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006db4:	2180      	movs	r1, #128	; 0x80
 8006db6:	0549      	lsls	r1, r1, #21
 8006db8:	430a      	orrs	r2, r1
 8006dba:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dbc:	f7fe fca0 	bl	8005700 <HAL_GetTick>
 8006dc0:	0003      	movs	r3, r0
 8006dc2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 8006dc4:	e008      	b.n	8006dd8 <HAL_RCC_OscConfig+0x54c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8006dc6:	f7fe fc9b 	bl	8005700 <HAL_GetTick>
 8006dca:	0002      	movs	r2, r0
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d901      	bls.n	8006dd8 <HAL_RCC_OscConfig+0x54c>
            return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e067      	b.n	8006ea8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 8006dd8:	4b35      	ldr	r3, [pc, #212]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	2380      	movs	r3, #128	; 0x80
 8006dde:	049b      	lsls	r3, r3, #18
 8006de0:	4013      	ands	r3, r2
 8006de2:	d0f0      	beq.n	8006dc6 <HAL_RCC_OscConfig+0x53a>
 8006de4:	e05f      	b.n	8006ea6 <HAL_RCC_OscConfig+0x61a>
          }
        }
      } else {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006de6:	4b32      	ldr	r3, [pc, #200]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	4b31      	ldr	r3, [pc, #196]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006dec:	4934      	ldr	r1, [pc, #208]	; (8006ec0 <HAL_RCC_OscConfig+0x634>)
 8006dee:	400a      	ands	r2, r1
 8006df0:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8006df2:	4b2f      	ldr	r3, [pc, #188]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	4b2e      	ldr	r3, [pc, #184]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006df8:	2103      	movs	r1, #3
 8006dfa:	438a      	bics	r2, r1
 8006dfc:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN |
 8006dfe:	4b2c      	ldr	r3, [pc, #176]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006e00:	68da      	ldr	r2, [r3, #12]
 8006e02:	4b2b      	ldr	r3, [pc, #172]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006e04:	4930      	ldr	r1, [pc, #192]	; (8006ec8 <HAL_RCC_OscConfig+0x63c>)
 8006e06:	400a      	ands	r2, r1
 8006e08:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e0a:	f7fe fc79 	bl	8005700 <HAL_GetTick>
 8006e0e:	0003      	movs	r3, r0
 8006e10:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U) {
 8006e12:	e008      	b.n	8006e26 <HAL_RCC_OscConfig+0x59a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8006e14:	f7fe fc74 	bl	8005700 <HAL_GetTick>
 8006e18:	0002      	movs	r2, r0
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_OscConfig+0x59a>
            return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e040      	b.n	8006ea8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U) {
 8006e26:	4b22      	ldr	r3, [pc, #136]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	2380      	movs	r3, #128	; 0x80
 8006e2c:	049b      	lsls	r3, r3, #18
 8006e2e:	4013      	ands	r3, r2
 8006e30:	d1f0      	bne.n	8006e14 <HAL_RCC_OscConfig+0x588>
 8006e32:	e038      	b.n	8006ea6 <HAL_RCC_OscConfig+0x61a>
        }
      }
    } else {
      /* Check if there is a request to disable the PLL used as System clock
       * source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) {
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	69db      	ldr	r3, [r3, #28]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d101      	bne.n	8006e40 <HAL_RCC_OscConfig+0x5b4>
        return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e033      	b.n	8006ea8 <HAL_RCC_OscConfig+0x61c>
      } else {
        /* Do not return HAL_ERROR if request repeats the current configuration
         */
        temp_pllckcfg = RCC->PLLCFGR;
 8006e40:	4b1b      	ldr	r3, [pc, #108]	; (8006eb0 <HAL_RCC_OscConfig+0x624>)
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) !=
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2203      	movs	r2, #3
 8006e4a:	401a      	ands	r2, r3
             RCC_OscInitStruct->PLL.PLLSource) ||
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) !=
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d126      	bne.n	8006ea2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) !=
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	2270      	movs	r2, #112	; 0x70
 8006e58:	401a      	ands	r2, r3
             RCC_OscInitStruct->PLL.PLLM) ||
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             RCC_OscInitStruct->PLL.PLLSource) ||
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d11f      	bne.n	8006ea2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) !=
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	23fe      	movs	r3, #254	; 0xfe
 8006e66:	01db      	lsls	r3, r3, #7
 8006e68:	401a      	ands	r2, r3
             (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6e:	021b      	lsls	r3, r3, #8
             RCC_OscInitStruct->PLL.PLLM) ||
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d116      	bne.n	8006ea2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) !=
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	23f8      	movs	r3, #248	; 0xf8
 8006e78:	039b      	lsls	r3, r3, #14
 8006e7a:	401a      	ands	r2, r3
             RCC_OscInitStruct->PLL.PLLP) ||
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
             (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d10e      	bne.n	8006ea2 <HAL_RCC_OscConfig+0x616>
#if defined(RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) !=
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	23e0      	movs	r3, #224	; 0xe0
 8006e88:	051b      	lsls	r3, r3, #20
 8006e8a:	401a      	ands	r2, r3
             RCC_OscInitStruct->PLL.PLLQ) ||
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
             RCC_OscInitStruct->PLL.PLLP) ||
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d106      	bne.n	8006ea2 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) !=
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	0f5b      	lsrs	r3, r3, #29
 8006e98:	075a      	lsls	r2, r3, #29
             RCC_OscInitStruct->PLL.PLLR)) {
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
             RCC_OscInitStruct->PLL.PLLQ) ||
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d001      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x61a>
          return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e000      	b.n	8006ea8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	0018      	movs	r0, r3
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	b008      	add	sp, #32
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	40021000 	.word	0x40021000
 8006eb4:	40007000 	.word	0x40007000
 8006eb8:	00001388 	.word	0x00001388
 8006ebc:	efffffff 	.word	0xefffffff
 8006ec0:	feffffff 	.word	0xfeffffff
 8006ec4:	11c1808c 	.word	0x11c1808c
 8006ec8:	eefeffff 	.word	0xeefeffff

08006ecc <HAL_RCC_ClockConfig>:
 * frequency (for more details refer to section above
 * "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
                                      uint32_t FLatency) {
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL) {
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <HAL_RCC_ClockConfig+0x14>
    return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e0e9      	b.n	80070b4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states
    (LATENCY) must be correctly programmed according to the frequency of the
    FLASH clock (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 8006ee0:	4b76      	ldr	r3, [pc, #472]	; (80070bc <HAL_RCC_ClockConfig+0x1f0>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2207      	movs	r2, #7
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	683a      	ldr	r2, [r7, #0]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d91e      	bls.n	8006f2c <HAL_RCC_ClockConfig+0x60>
    /* Program the new number of wait states to the LATENCY bits in the
     * FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eee:	4b73      	ldr	r3, [pc, #460]	; (80070bc <HAL_RCC_ClockConfig+0x1f0>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2207      	movs	r2, #7
 8006ef4:	4393      	bics	r3, r2
 8006ef6:	0019      	movs	r1, r3
 8006ef8:	4b70      	ldr	r3, [pc, #448]	; (80070bc <HAL_RCC_ClockConfig+0x1f0>)
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	430a      	orrs	r2, r1
 8006efe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access
    the Flash memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006f00:	f7fe fbfe 	bl	8005700 <HAL_GetTick>
 8006f04:	0003      	movs	r3, r0
 8006f06:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency) {
 8006f08:	e009      	b.n	8006f1e <HAL_RCC_ClockConfig+0x52>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8006f0a:	f7fe fbf9 	bl	8005700 <HAL_GetTick>
 8006f0e:	0002      	movs	r2, r0
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	4a6a      	ldr	r2, [pc, #424]	; (80070c0 <HAL_RCC_ClockConfig+0x1f4>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d901      	bls.n	8006f1e <HAL_RCC_ClockConfig+0x52>
        return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e0ca      	b.n	80070b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency) {
 8006f1e:	4b67      	ldr	r3, [pc, #412]	; (80070bc <HAL_RCC_ClockConfig+0x1f0>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2207      	movs	r2, #7
 8006f24:	4013      	ands	r3, r2
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d1ee      	bne.n	8006f0a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) ==
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2202      	movs	r2, #2
 8006f32:	4013      	ands	r3, r2
 8006f34:	d015      	beq.n	8006f62 <HAL_RCC_ClockConfig+0x96>
      RCC_CLOCKTYPE_HCLK) {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) ==
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2204      	movs	r2, #4
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	d006      	beq.n	8006f4e <HAL_RCC_ClockConfig+0x82>
        RCC_CLOCKTYPE_PCLK1) {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006f40:	4b60      	ldr	r3, [pc, #384]	; (80070c4 <HAL_RCC_ClockConfig+0x1f8>)
 8006f42:	689a      	ldr	r2, [r3, #8]
 8006f44:	4b5f      	ldr	r3, [pc, #380]	; (80070c4 <HAL_RCC_ClockConfig+0x1f8>)
 8006f46:	21e0      	movs	r1, #224	; 0xe0
 8006f48:	01c9      	lsls	r1, r1, #7
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f4e:	4b5d      	ldr	r3, [pc, #372]	; (80070c4 <HAL_RCC_ClockConfig+0x1f8>)
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	4a5d      	ldr	r2, [pc, #372]	; (80070c8 <HAL_RCC_ClockConfig+0x1fc>)
 8006f54:	4013      	ands	r3, r2
 8006f56:	0019      	movs	r1, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689a      	ldr	r2, [r3, #8]
 8006f5c:	4b59      	ldr	r3, [pc, #356]	; (80070c4 <HAL_RCC_ClockConfig+0x1f8>)
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) ==
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2201      	movs	r2, #1
 8006f68:	4013      	ands	r3, r2
 8006f6a:	d057      	beq.n	800701c <HAL_RCC_ClockConfig+0x150>
      RCC_CLOCKTYPE_SYSCLK) {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d107      	bne.n	8006f84 <HAL_RCC_ClockConfig+0xb8>
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U) {
 8006f74:	4b53      	ldr	r3, [pc, #332]	; (80070c4 <HAL_RCC_ClockConfig+0x1f8>)
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	2380      	movs	r3, #128	; 0x80
 8006f7a:	029b      	lsls	r3, r3, #10
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	d12b      	bne.n	8006fd8 <HAL_RCC_ClockConfig+0x10c>
        return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e097      	b.n	80070b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d107      	bne.n	8006f9c <HAL_RCC_ClockConfig+0xd0>
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U) {
 8006f8c:	4b4d      	ldr	r3, [pc, #308]	; (80070c4 <HAL_RCC_ClockConfig+0x1f8>)
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	2380      	movs	r3, #128	; 0x80
 8006f92:	049b      	lsls	r3, r3, #18
 8006f94:	4013      	ands	r3, r2
 8006f96:	d11f      	bne.n	8006fd8 <HAL_RCC_ClockConfig+0x10c>
        return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e08b      	b.n	80070b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI) {
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d107      	bne.n	8006fb4 <HAL_RCC_ClockConfig+0xe8>
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U) {
 8006fa4:	4b47      	ldr	r3, [pc, #284]	; (80070c4 <HAL_RCC_ClockConfig+0x1f8>)
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	2380      	movs	r3, #128	; 0x80
 8006faa:	00db      	lsls	r3, r3, #3
 8006fac:	4013      	ands	r3, r2
 8006fae:	d113      	bne.n	8006fd8 <HAL_RCC_ClockConfig+0x10c>
        return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e07f      	b.n	80070b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI) {
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	2b03      	cmp	r3, #3
 8006fba:	d106      	bne.n	8006fca <HAL_RCC_ClockConfig+0xfe>
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U) {
 8006fbc:	4b41      	ldr	r3, [pc, #260]	; (80070c4 <HAL_RCC_ClockConfig+0x1f8>)
 8006fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fc0:	2202      	movs	r2, #2
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	d108      	bne.n	8006fd8 <HAL_RCC_ClockConfig+0x10c>
        return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e074      	b.n	80070b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSE is selected as System Clock Source */
    else {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 8006fca:	4b3e      	ldr	r3, [pc, #248]	; (80070c4 <HAL_RCC_ClockConfig+0x1f8>)
 8006fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fce:	2202      	movs	r2, #2
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	d101      	bne.n	8006fd8 <HAL_RCC_ClockConfig+0x10c>
        return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e06d      	b.n	80070b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006fd8:	4b3a      	ldr	r3, [pc, #232]	; (80070c4 <HAL_RCC_ClockConfig+0x1f8>)
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	2207      	movs	r2, #7
 8006fde:	4393      	bics	r3, r2
 8006fe0:	0019      	movs	r1, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685a      	ldr	r2, [r3, #4]
 8006fe6:	4b37      	ldr	r3, [pc, #220]	; (80070c4 <HAL_RCC_ClockConfig+0x1f8>)
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fec:	f7fe fb88 	bl	8005700 <HAL_GetTick>
 8006ff0:	0003      	movs	r3, r0
 8006ff2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() !=
 8006ff4:	e009      	b.n	800700a <HAL_RCC_ClockConfig+0x13e>
           (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8006ff6:	f7fe fb83 	bl	8005700 <HAL_GetTick>
 8006ffa:	0002      	movs	r2, r0
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	4a2f      	ldr	r2, [pc, #188]	; (80070c0 <HAL_RCC_ClockConfig+0x1f4>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d901      	bls.n	800700a <HAL_RCC_ClockConfig+0x13e>
        return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e054      	b.n	80070b4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() !=
 800700a:	4b2e      	ldr	r3, [pc, #184]	; (80070c4 <HAL_RCC_ClockConfig+0x1f8>)
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	2238      	movs	r2, #56	; 0x38
 8007010:	401a      	ands	r2, r3
           (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	00db      	lsls	r3, r3, #3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() !=
 8007018:	429a      	cmp	r2, r3
 800701a:	d1ec      	bne.n	8006ff6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 800701c:	4b27      	ldr	r3, [pc, #156]	; (80070bc <HAL_RCC_ClockConfig+0x1f0>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2207      	movs	r2, #7
 8007022:	4013      	ands	r3, r2
 8007024:	683a      	ldr	r2, [r7, #0]
 8007026:	429a      	cmp	r2, r3
 8007028:	d21e      	bcs.n	8007068 <HAL_RCC_ClockConfig+0x19c>
    /* Program the new number of wait states to the LATENCY bits in the
     * FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800702a:	4b24      	ldr	r3, [pc, #144]	; (80070bc <HAL_RCC_ClockConfig+0x1f0>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2207      	movs	r2, #7
 8007030:	4393      	bics	r3, r2
 8007032:	0019      	movs	r1, r3
 8007034:	4b21      	ldr	r3, [pc, #132]	; (80070bc <HAL_RCC_ClockConfig+0x1f0>)
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	430a      	orrs	r2, r1
 800703a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access
    the Flash memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800703c:	f7fe fb60 	bl	8005700 <HAL_GetTick>
 8007040:	0003      	movs	r3, r0
 8007042:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency) {
 8007044:	e009      	b.n	800705a <HAL_RCC_ClockConfig+0x18e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8007046:	f7fe fb5b 	bl	8005700 <HAL_GetTick>
 800704a:	0002      	movs	r2, r0
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	4a1b      	ldr	r2, [pc, #108]	; (80070c0 <HAL_RCC_ClockConfig+0x1f4>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d901      	bls.n	800705a <HAL_RCC_ClockConfig+0x18e>
        return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e02c      	b.n	80070b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency) {
 800705a:	4b18      	ldr	r3, [pc, #96]	; (80070bc <HAL_RCC_ClockConfig+0x1f0>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2207      	movs	r2, #7
 8007060:	4013      	ands	r3, r2
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	429a      	cmp	r2, r3
 8007066:	d1ee      	bne.n	8007046 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) ==
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2204      	movs	r2, #4
 800706e:	4013      	ands	r3, r2
 8007070:	d009      	beq.n	8007086 <HAL_RCC_ClockConfig+0x1ba>
      RCC_CLOCKTYPE_PCLK1) {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007072:	4b14      	ldr	r3, [pc, #80]	; (80070c4 <HAL_RCC_ClockConfig+0x1f8>)
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	4a15      	ldr	r2, [pc, #84]	; (80070cc <HAL_RCC_ClockConfig+0x200>)
 8007078:	4013      	ands	r3, r2
 800707a:	0019      	movs	r1, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	68da      	ldr	r2, [r3, #12]
 8007080:	4b10      	ldr	r3, [pc, #64]	; (80070c4 <HAL_RCC_ClockConfig+0x1f8>)
 8007082:	430a      	orrs	r2, r1
 8007084:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock =
      (HAL_RCC_GetSysClockFreq() >>
 8007086:	f000 f829 	bl	80070dc <HAL_RCC_GetSysClockFreq>
 800708a:	0001      	movs	r1, r0
       ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) &
 800708c:	4b0d      	ldr	r3, [pc, #52]	; (80070c4 <HAL_RCC_ClockConfig+0x1f8>)
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	0a1b      	lsrs	r3, r3, #8
 8007092:	220f      	movs	r2, #15
 8007094:	401a      	ands	r2, r3
 8007096:	4b0e      	ldr	r3, [pc, #56]	; (80070d0 <HAL_RCC_ClockConfig+0x204>)
 8007098:	0092      	lsls	r2, r2, #2
 800709a:	58d3      	ldr	r3, [r2, r3]
 800709c:	221f      	movs	r2, #31
 800709e:	4013      	ands	r3, r2
      (HAL_RCC_GetSysClockFreq() >>
 80070a0:	000a      	movs	r2, r1
 80070a2:	40da      	lsrs	r2, r3
  SystemCoreClock =
 80070a4:	4b0b      	ldr	r3, [pc, #44]	; (80070d4 <HAL_RCC_ClockConfig+0x208>)
 80070a6:	601a      	str	r2, [r3, #0]
        0x1FU));

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80070a8:	4b0b      	ldr	r3, [pc, #44]	; (80070d8 <HAL_RCC_ClockConfig+0x20c>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	0018      	movs	r0, r3
 80070ae:	f7fe facb 	bl	8005648 <HAL_InitTick>
 80070b2:	0003      	movs	r3, r0
}
 80070b4:	0018      	movs	r0, r3
 80070b6:	46bd      	mov	sp, r7
 80070b8:	b004      	add	sp, #16
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	40022000 	.word	0x40022000
 80070c0:	00001388 	.word	0x00001388
 80070c4:	40021000 	.word	0x40021000
 80070c8:	fffff0ff 	.word	0xfffff0ff
 80070cc:	ffff8fff 	.word	0xffff8fff
 80070d0:	0800bff0 	.word	0x0800bff0
 80070d4:	20000000 	.word	0x20000000
 80070d8:	20000004 	.word	0x20000004

080070dc <HAL_RCC_GetSysClockFreq>:
 * function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
uint32_t HAL_RCC_GetSysClockFreq(void) {
 80070dc:	b580      	push	{r7, lr}
 80070de:	b086      	sub	sp, #24
 80070e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) {
 80070e2:	4b3c      	ldr	r3, [pc, #240]	; (80071d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	2238      	movs	r2, #56	; 0x38
 80070e8:	4013      	ands	r3, r2
 80070ea:	d10f      	bne.n	800710c <HAL_RCC_GetSysClockFreq+0x30>
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80070ec:	4b39      	ldr	r3, [pc, #228]	; (80071d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	0adb      	lsrs	r3, r3, #11
 80070f2:	2207      	movs	r2, #7
 80070f4:	4013      	ands	r3, r2
 80070f6:	2201      	movs	r2, #1
 80070f8:	409a      	lsls	r2, r3
 80070fa:	0013      	movs	r3, r2
 80070fc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80070fe:	6839      	ldr	r1, [r7, #0]
 8007100:	4835      	ldr	r0, [pc, #212]	; (80071d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007102:	f7f9 f813 	bl	800012c <__udivsi3>
 8007106:	0003      	movs	r3, r0
 8007108:	613b      	str	r3, [r7, #16]
 800710a:	e05d      	b.n	80071c8 <HAL_RCC_GetSysClockFreq+0xec>
  } else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) {
 800710c:	4b31      	ldr	r3, [pc, #196]	; (80071d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	2238      	movs	r2, #56	; 0x38
 8007112:	4013      	ands	r3, r2
 8007114:	2b08      	cmp	r3, #8
 8007116:	d102      	bne.n	800711e <HAL_RCC_GetSysClockFreq+0x42>
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007118:	4b30      	ldr	r3, [pc, #192]	; (80071dc <HAL_RCC_GetSysClockFreq+0x100>)
 800711a:	613b      	str	r3, [r7, #16]
 800711c:	e054      	b.n	80071c8 <HAL_RCC_GetSysClockFreq+0xec>
  } else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
 800711e:	4b2d      	ldr	r3, [pc, #180]	; (80071d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	2238      	movs	r2, #56	; 0x38
 8007124:	4013      	ands	r3, r2
 8007126:	2b10      	cmp	r3, #16
 8007128:	d138      	bne.n	800719c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800712a:	4b2a      	ldr	r3, [pc, #168]	; (80071d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	2203      	movs	r2, #3
 8007130:	4013      	ands	r3, r2
 8007132:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8007134:	4b27      	ldr	r3, [pc, #156]	; (80071d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	091b      	lsrs	r3, r3, #4
 800713a:	2207      	movs	r2, #7
 800713c:	4013      	ands	r3, r2
 800713e:	3301      	adds	r3, #1
 8007140:	60bb      	str	r3, [r7, #8]

    switch (pllsource) {
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2b03      	cmp	r3, #3
 8007146:	d10d      	bne.n	8007164 <HAL_RCC_GetSysClockFreq+0x88>
    case RCC_PLLSOURCE_HSE: /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) *
 8007148:	68b9      	ldr	r1, [r7, #8]
 800714a:	4824      	ldr	r0, [pc, #144]	; (80071dc <HAL_RCC_GetSysClockFreq+0x100>)
 800714c:	f7f8 ffee 	bl	800012c <__udivsi3>
 8007150:	0003      	movs	r3, r0
 8007152:	0019      	movs	r1, r3
               ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007154:	4b1f      	ldr	r3, [pc, #124]	; (80071d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	0a1b      	lsrs	r3, r3, #8
 800715a:	227f      	movs	r2, #127	; 0x7f
 800715c:	4013      	ands	r3, r2
      pllvco = (HSE_VALUE / pllm) *
 800715e:	434b      	muls	r3, r1
 8007160:	617b      	str	r3, [r7, #20]
      break;
 8007162:	e00d      	b.n	8007180 <HAL_RCC_GetSysClockFreq+0xa4>

    case RCC_PLLSOURCE_HSI: /* HSI16 used as PLL clock source */
    default:                /* HSI16 used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) *
 8007164:	68b9      	ldr	r1, [r7, #8]
 8007166:	481c      	ldr	r0, [pc, #112]	; (80071d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007168:	f7f8 ffe0 	bl	800012c <__udivsi3>
 800716c:	0003      	movs	r3, r0
 800716e:	0019      	movs	r1, r3
               ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007170:	4b18      	ldr	r3, [pc, #96]	; (80071d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	0a1b      	lsrs	r3, r3, #8
 8007176:	227f      	movs	r2, #127	; 0x7f
 8007178:	4013      	ands	r3, r2
      pllvco = (HSI_VALUE / pllm) *
 800717a:	434b      	muls	r3, r1
 800717c:	617b      	str	r3, [r7, #20]
      break;
 800717e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007180:	4b14      	ldr	r3, [pc, #80]	; (80071d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	0f5b      	lsrs	r3, r3, #29
 8007186:	2207      	movs	r2, #7
 8007188:	4013      	ands	r3, r2
 800718a:	3301      	adds	r3, #1
 800718c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800718e:	6879      	ldr	r1, [r7, #4]
 8007190:	6978      	ldr	r0, [r7, #20]
 8007192:	f7f8 ffcb 	bl	800012c <__udivsi3>
 8007196:	0003      	movs	r3, r0
 8007198:	613b      	str	r3, [r7, #16]
 800719a:	e015      	b.n	80071c8 <HAL_RCC_GetSysClockFreq+0xec>
  } else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE) {
 800719c:	4b0d      	ldr	r3, [pc, #52]	; (80071d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	2238      	movs	r2, #56	; 0x38
 80071a2:	4013      	ands	r3, r2
 80071a4:	2b20      	cmp	r3, #32
 80071a6:	d103      	bne.n	80071b0 <HAL_RCC_GetSysClockFreq+0xd4>
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80071a8:	2380      	movs	r3, #128	; 0x80
 80071aa:	021b      	lsls	r3, r3, #8
 80071ac:	613b      	str	r3, [r7, #16]
 80071ae:	e00b      	b.n	80071c8 <HAL_RCC_GetSysClockFreq+0xec>
  } else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI) {
 80071b0:	4b08      	ldr	r3, [pc, #32]	; (80071d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	2238      	movs	r2, #56	; 0x38
 80071b6:	4013      	ands	r3, r2
 80071b8:	2b18      	cmp	r3, #24
 80071ba:	d103      	bne.n	80071c4 <HAL_RCC_GetSysClockFreq+0xe8>
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80071bc:	23fa      	movs	r3, #250	; 0xfa
 80071be:	01db      	lsls	r3, r3, #7
 80071c0:	613b      	str	r3, [r7, #16]
 80071c2:	e001      	b.n	80071c8 <HAL_RCC_GetSysClockFreq+0xec>
  } else {
    sysclockfreq = 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80071c8:	693b      	ldr	r3, [r7, #16]
}
 80071ca:	0018      	movs	r0, r3
 80071cc:	46bd      	mov	sp, r7
 80071ce:	b006      	add	sp, #24
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	46c0      	nop			; (mov r8, r8)
 80071d4:	40021000 	.word	0x40021000
 80071d8:	00f42400 	.word	0x00f42400
 80071dc:	007a1200 	.word	0x007a1200

080071e0 <HAL_RCC_GetHCLKFreq>:
 *
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock
 * Frequency.
 * @retval HCLK frequency in Hz
 */
uint32_t HAL_RCC_GetHCLKFreq(void) { return SystemCoreClock; }
 80071e0:	b580      	push	{r7, lr}
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	4b02      	ldr	r3, [pc, #8]	; (80071f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	0018      	movs	r0, r3
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	46c0      	nop			; (mov r8, r8)
 80071f0:	20000000 	.word	0x20000000

080071f4 <HAL_RCC_GetPCLK1Freq>:
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this
 * function will be incorrect.
 * @retval PCLK1 frequency in Hz
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 80071f4:	b5b0      	push	{r4, r5, r7, lr}
 80071f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(),
 80071f8:	f7ff fff2 	bl	80071e0 <HAL_RCC_GetHCLKFreq>
 80071fc:	0004      	movs	r4, r0
 80071fe:	f7ff fb39 	bl	8006874 <LL_RCC_GetAPB1Prescaler>
 8007202:	0003      	movs	r3, r0
 8007204:	0b1a      	lsrs	r2, r3, #12
 8007206:	4b05      	ldr	r3, [pc, #20]	; (800721c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007208:	0092      	lsls	r2, r2, #2
 800720a:	58d3      	ldr	r3, [r2, r3]
 800720c:	221f      	movs	r2, #31
 800720e:	4013      	ands	r3, r2
 8007210:	40dc      	lsrs	r4, r3
 8007212:	0023      	movs	r3, r4
                                              LL_RCC_GetAPB1Prescaler())));
}
 8007214:	0018      	movs	r0, r3
 8007216:	46bd      	mov	sp, r7
 8007218:	bdb0      	pop	{r4, r5, r7, pc}
 800721a:	46c0      	nop			; (mov r8, r8)
 800721c:	0800c030 	.word	0x0800c030

08007220 <HAL_RCCEx_PeriphCLKConfig>:
 * enabled.
 *
 * @retval HAL status
 */
HAL_StatusTypeDef
HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef *PeriphClkInit) {
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;    /* Intermediate status */
 8007228:	2313      	movs	r3, #19
 800722a:	18fb      	adds	r3, r7, r3
 800722c:	2200      	movs	r2, #0
 800722e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK; /* Final status */
 8007230:	2312      	movs	r3, #18
 8007232:	18fb      	adds	r3, r7, r3
 8007234:	2200      	movs	r2, #0
 8007236:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration
   * ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) ==
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	2380      	movs	r3, #128	; 0x80
 800723e:	029b      	lsls	r3, r3, #10
 8007240:	4013      	ands	r3, r2
 8007242:	d100      	bne.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8007244:	e0a3      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x16e>
      RCC_PERIPHCLK_RTC) {
    FlagStatus pwrclkchanged = RESET;
 8007246:	2011      	movs	r0, #17
 8007248:	183b      	adds	r3, r7, r0
 800724a:	2200      	movs	r2, #0
 800724c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 800724e:	4bc3      	ldr	r3, [pc, #780]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007250:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007252:	2380      	movs	r3, #128	; 0x80
 8007254:	055b      	lsls	r3, r3, #21
 8007256:	4013      	ands	r3, r2
 8007258:	d110      	bne.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x5c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800725a:	4bc0      	ldr	r3, [pc, #768]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800725c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800725e:	4bbf      	ldr	r3, [pc, #764]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007260:	2180      	movs	r1, #128	; 0x80
 8007262:	0549      	lsls	r1, r1, #21
 8007264:	430a      	orrs	r2, r1
 8007266:	63da      	str	r2, [r3, #60]	; 0x3c
 8007268:	4bbc      	ldr	r3, [pc, #752]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800726a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800726c:	2380      	movs	r3, #128	; 0x80
 800726e:	055b      	lsls	r3, r3, #21
 8007270:	4013      	ands	r3, r2
 8007272:	60bb      	str	r3, [r7, #8]
 8007274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007276:	183b      	adds	r3, r7, r0
 8007278:	2201      	movs	r2, #1
 800727a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800727c:	4bb8      	ldr	r3, [pc, #736]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	4bb7      	ldr	r3, [pc, #732]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8007282:	2180      	movs	r1, #128	; 0x80
 8007284:	0049      	lsls	r1, r1, #1
 8007286:	430a      	orrs	r2, r1
 8007288:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800728a:	f7fe fa39 	bl	8005700 <HAL_GetTick>
 800728e:	0003      	movs	r3, r0
 8007290:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U) {
 8007292:	e00b      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8007294:	f7fe fa34 	bl	8005700 <HAL_GetTick>
 8007298:	0002      	movs	r2, r0
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d904      	bls.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
        ret = HAL_TIMEOUT;
 80072a2:	2313      	movs	r3, #19
 80072a4:	18fb      	adds	r3, r7, r3
 80072a6:	2203      	movs	r2, #3
 80072a8:	701a      	strb	r2, [r3, #0]
        break;
 80072aa:	e005      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U) {
 80072ac:	4bac      	ldr	r3, [pc, #688]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	2380      	movs	r3, #128	; 0x80
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	4013      	ands	r3, r2
 80072b6:	d0ed      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK) {
 80072b8:	2313      	movs	r3, #19
 80072ba:	18fb      	adds	r3, r7, r3
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d154      	bne.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      /* Reset the Backup domain only if the RTC Clock source selection is
       * modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80072c2:	4ba6      	ldr	r3, [pc, #664]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80072c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80072c6:	23c0      	movs	r3, #192	; 0xc0
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4013      	ands	r3, r2
 80072cc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is
       * modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) &&
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d019      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          (tmpregister != PeriphClkInit->RTCClockSelection)) {
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) &&
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d014      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        /* Store the content of BDCR register before the reset of Backup Domain
         */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80072de:	4b9f      	ldr	r3, [pc, #636]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80072e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072e2:	4aa0      	ldr	r2, [pc, #640]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80072e4:	4013      	ands	r3, r2
 80072e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset
         */
        __HAL_RCC_BACKUPRESET_FORCE();
 80072e8:	4b9c      	ldr	r3, [pc, #624]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80072ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80072ec:	4b9b      	ldr	r3, [pc, #620]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80072ee:	2180      	movs	r1, #128	; 0x80
 80072f0:	0249      	lsls	r1, r1, #9
 80072f2:	430a      	orrs	r2, r1
 80072f4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80072f6:	4b99      	ldr	r3, [pc, #612]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80072f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80072fa:	4b98      	ldr	r3, [pc, #608]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80072fc:	499a      	ldr	r1, [pc, #616]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80072fe:	400a      	ands	r2, r1
 8007300:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007302:	4b96      	ldr	r3, [pc, #600]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain
       * reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON)) {
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	2201      	movs	r2, #1
 800730c:	4013      	ands	r3, r2
 800730e:	d016      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007310:	f7fe f9f6 	bl	8005700 <HAL_GetTick>
 8007314:	0003      	movs	r3, r0
 8007316:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 8007318:	e00c      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x114>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 800731a:	f7fe f9f1 	bl	8005700 <HAL_GetTick>
 800731e:	0002      	movs	r2, r0
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	4a91      	ldr	r2, [pc, #580]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d904      	bls.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x114>
            ret = HAL_TIMEOUT;
 800732a:	2313      	movs	r3, #19
 800732c:	18fb      	adds	r3, r7, r3
 800732e:	2203      	movs	r2, #3
 8007330:	701a      	strb	r2, [r3, #0]
            break;
 8007332:	e004      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 8007334:	4b89      	ldr	r3, [pc, #548]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007338:	2202      	movs	r2, #2
 800733a:	4013      	ands	r3, r2
 800733c:	d0ed      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK) {
 800733e:	2313      	movs	r3, #19
 8007340:	18fb      	adds	r3, r7, r3
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10a      	bne.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x13e>
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007348:	4b84      	ldr	r3, [pc, #528]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800734a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800734c:	4a85      	ldr	r2, [pc, #532]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800734e:	4013      	ands	r3, r2
 8007350:	0019      	movs	r1, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007356:	4b81      	ldr	r3, [pc, #516]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007358:	430a      	orrs	r2, r1
 800735a:	65da      	str	r2, [r3, #92]	; 0x5c
 800735c:	e00c      	b.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x158>
      } else {
        /* set overall return value */
        status = ret;
 800735e:	2312      	movs	r3, #18
 8007360:	18fb      	adds	r3, r7, r3
 8007362:	2213      	movs	r2, #19
 8007364:	18ba      	adds	r2, r7, r2
 8007366:	7812      	ldrb	r2, [r2, #0]
 8007368:	701a      	strb	r2, [r3, #0]
 800736a:	e005      	b.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    } else {
      /* set overall return value */
      status = ret;
 800736c:	2312      	movs	r3, #18
 800736e:	18fb      	adds	r3, r7, r3
 8007370:	2213      	movs	r2, #19
 8007372:	18ba      	adds	r2, r7, r2
 8007374:	7812      	ldrb	r2, [r2, #0]
 8007376:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET) {
 8007378:	2311      	movs	r3, #17
 800737a:	18fb      	adds	r3, r7, r3
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d105      	bne.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x16e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007382:	4b76      	ldr	r3, [pc, #472]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007384:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007386:	4b75      	ldr	r3, [pc, #468]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007388:	4979      	ldr	r1, [pc, #484]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800738a:	400a      	ands	r2, r1
 800738c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration
   * -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) ==
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2201      	movs	r2, #1
 8007394:	4013      	ands	r3, r2
 8007396:	d009      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
      RCC_PERIPHCLK_USART1) {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007398:	4b70      	ldr	r3, [pc, #448]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800739a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800739c:	2203      	movs	r2, #3
 800739e:	4393      	bics	r3, r2
 80073a0:	0019      	movs	r1, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	4b6d      	ldr	r3, [pc, #436]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80073a8:	430a      	orrs	r2, r1
 80073aa:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration
   * -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) ==
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2202      	movs	r2, #2
 80073b2:	4013      	ands	r3, r2
 80073b4:	d009      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      RCC_PERIPHCLK_USART2) {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80073b6:	4b69      	ldr	r3, [pc, #420]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80073b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ba:	220c      	movs	r2, #12
 80073bc:	4393      	bics	r3, r2
 80073be:	0019      	movs	r1, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	689a      	ldr	r2, [r3, #8]
 80073c4:	4b65      	ldr	r3, [pc, #404]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80073c6:	430a      	orrs	r2, r1
 80073c8:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration
   * ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) ==
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2210      	movs	r2, #16
 80073d0:	4013      	ands	r3, r2
 80073d2:	d009      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      RCC_PERIPHCLK_LPUART1) {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80073d4:	4b61      	ldr	r3, [pc, #388]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80073d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073d8:	4a66      	ldr	r2, [pc, #408]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80073da:	4013      	ands	r3, r2
 80073dc:	0019      	movs	r1, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68da      	ldr	r2, [r3, #12]
 80073e2:	4b5e      	ldr	r3, [pc, #376]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80073e4:	430a      	orrs	r2, r1
 80073e6:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration
   * -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) ==
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	2380      	movs	r3, #128	; 0x80
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4013      	ands	r3, r2
 80073f2:	d009      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      (RCC_PERIPHCLK_LPTIM1)) {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80073f4:	4b59      	ldr	r3, [pc, #356]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80073f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073f8:	4a5f      	ldr	r2, [pc, #380]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80073fa:	4013      	ands	r3, r2
 80073fc:	0019      	movs	r1, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	699a      	ldr	r2, [r3, #24]
 8007402:	4b56      	ldr	r3, [pc, #344]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007404:	430a      	orrs	r2, r1
 8007406:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration
   * -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) ==
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	2380      	movs	r3, #128	; 0x80
 800740e:	00db      	lsls	r3, r3, #3
 8007410:	4013      	ands	r3, r2
 8007412:	d009      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x208>
      (RCC_PERIPHCLK_LPTIM2)) {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007414:	4b51      	ldr	r3, [pc, #324]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007418:	4a58      	ldr	r2, [pc, #352]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800741a:	4013      	ands	r3, r2
 800741c:	0019      	movs	r1, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	69da      	ldr	r2, [r3, #28]
 8007422:	4b4e      	ldr	r3, [pc, #312]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007424:	430a      	orrs	r2, r1
 8007426:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration
   * ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) ==
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2220      	movs	r2, #32
 800742e:	4013      	ands	r3, r2
 8007430:	d009      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x226>
      RCC_PERIPHCLK_I2C1) {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007432:	4b4a      	ldr	r3, [pc, #296]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007436:	4a52      	ldr	r2, [pc, #328]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8007438:	4013      	ands	r3, r2
 800743a:	0019      	movs	r1, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	691a      	ldr	r2, [r3, #16]
 8007440:	4b46      	ldr	r3, [pc, #280]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007442:	430a      	orrs	r2, r1
 8007444:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration
   * ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) ==
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	2380      	movs	r3, #128	; 0x80
 800744c:	01db      	lsls	r3, r3, #7
 800744e:	4013      	ands	r3, r2
 8007450:	d015      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x25e>
      RCC_PERIPHCLK_ADC) {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007452:	4b42      	ldr	r3, [pc, #264]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	0899      	lsrs	r1, r3, #2
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a1a      	ldr	r2, [r3, #32]
 800745e:	4b3f      	ldr	r3, [pc, #252]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007460:	430a      	orrs	r2, r1
 8007462:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC) {
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a1a      	ldr	r2, [r3, #32]
 8007468:	2380      	movs	r3, #128	; 0x80
 800746a:	05db      	lsls	r3, r3, #23
 800746c:	429a      	cmp	r2, r3
 800746e:	d106      	bne.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x25e>
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007470:	4b3a      	ldr	r3, [pc, #232]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007472:	68da      	ldr	r2, [r3, #12]
 8007474:	4b39      	ldr	r3, [pc, #228]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007476:	2180      	movs	r1, #128	; 0x80
 8007478:	0249      	lsls	r1, r1, #9
 800747a:	430a      	orrs	r2, r1
 800747c:	60da      	str	r2, [r3, #12]
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration
   * ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) ==
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	2380      	movs	r3, #128	; 0x80
 8007484:	031b      	lsls	r3, r3, #12
 8007486:	4013      	ands	r3, r2
 8007488:	d009      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x27e>
      RCC_PERIPHCLK_CEC) {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800748a:	4b34      	ldr	r3, [pc, #208]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800748c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800748e:	2240      	movs	r2, #64	; 0x40
 8007490:	4393      	bics	r3, r2
 8007492:	0019      	movs	r1, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007498:	4b30      	ldr	r3, [pc, #192]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800749a:	430a      	orrs	r2, r1
 800749c:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration
   * ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) ==
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	2380      	movs	r3, #128	; 0x80
 80074a4:	039b      	lsls	r3, r3, #14
 80074a6:	4013      	ands	r3, r2
 80074a8:	d016      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      RCC_PERIPHCLK_TIM1) {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80074aa:	4b2c      	ldr	r3, [pc, #176]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80074ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ae:	4a35      	ldr	r2, [pc, #212]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80074b0:	4013      	ands	r3, r2
 80074b2:	0019      	movs	r1, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074b8:	4b28      	ldr	r3, [pc, #160]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80074ba:	430a      	orrs	r2, r1
 80074bc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL) {
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074c2:	2380      	movs	r3, #128	; 0x80
 80074c4:	03db      	lsls	r3, r3, #15
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d106      	bne.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80074ca:	4b24      	ldr	r3, [pc, #144]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80074cc:	68da      	ldr	r2, [r3, #12]
 80074ce:	4b23      	ldr	r3, [pc, #140]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80074d0:	2180      	movs	r1, #128	; 0x80
 80074d2:	0449      	lsls	r1, r1, #17
 80074d4:	430a      	orrs	r2, r1
 80074d6:	60da      	str	r2, [r3, #12]
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration
   * ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) ==
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	2380      	movs	r3, #128	; 0x80
 80074de:	03db      	lsls	r3, r3, #15
 80074e0:	4013      	ands	r3, r2
 80074e2:	d016      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
      RCC_PERIPHCLK_TIM15) {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80074e4:	4b1d      	ldr	r3, [pc, #116]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80074e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e8:	4a27      	ldr	r2, [pc, #156]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80074ea:	4013      	ands	r3, r2
 80074ec:	0019      	movs	r1, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f2:	4b1a      	ldr	r3, [pc, #104]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80074f4:	430a      	orrs	r2, r1
 80074f6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL) {
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074fc:	2380      	movs	r3, #128	; 0x80
 80074fe:	045b      	lsls	r3, r3, #17
 8007500:	429a      	cmp	r2, r3
 8007502:	d106      	bne.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007504:	4b15      	ldr	r3, [pc, #84]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007506:	68da      	ldr	r2, [r3, #12]
 8007508:	4b14      	ldr	r3, [pc, #80]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800750a:	2180      	movs	r1, #128	; 0x80
 800750c:	0449      	lsls	r1, r1, #17
 800750e:	430a      	orrs	r2, r1
 8007510:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration
   * ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) ==
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	2380      	movs	r3, #128	; 0x80
 8007518:	011b      	lsls	r3, r3, #4
 800751a:	4013      	ands	r3, r2
 800751c:	d016      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x32c>
      RCC_PERIPHCLK_I2S1) {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800751e:	4b0f      	ldr	r3, [pc, #60]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007522:	4a1a      	ldr	r2, [pc, #104]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8007524:	4013      	ands	r3, r2
 8007526:	0019      	movs	r1, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	695a      	ldr	r2, [r3, #20]
 800752c:	4b0b      	ldr	r3, [pc, #44]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800752e:	430a      	orrs	r2, r1
 8007530:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL) {
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	695a      	ldr	r2, [r3, #20]
 8007536:	2380      	movs	r3, #128	; 0x80
 8007538:	01db      	lsls	r3, r3, #7
 800753a:	429a      	cmp	r2, r3
 800753c:	d106      	bne.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x32c>
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800753e:	4b07      	ldr	r3, [pc, #28]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007540:	68da      	ldr	r2, [r3, #12]
 8007542:	4b06      	ldr	r3, [pc, #24]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007544:	2180      	movs	r1, #128	; 0x80
 8007546:	0249      	lsls	r1, r1, #9
 8007548:	430a      	orrs	r2, r1
 800754a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800754c:	2312      	movs	r3, #18
 800754e:	18fb      	adds	r3, r7, r3
 8007550:	781b      	ldrb	r3, [r3, #0]
}
 8007552:	0018      	movs	r0, r3
 8007554:	46bd      	mov	sp, r7
 8007556:	b006      	add	sp, #24
 8007558:	bd80      	pop	{r7, pc}
 800755a:	46c0      	nop			; (mov r8, r8)
 800755c:	40021000 	.word	0x40021000
 8007560:	40007000 	.word	0x40007000
 8007564:	fffffcff 	.word	0xfffffcff
 8007568:	fffeffff 	.word	0xfffeffff
 800756c:	00001388 	.word	0x00001388
 8007570:	efffffff 	.word	0xefffffff
 8007574:	fffff3ff 	.word	0xfffff3ff
 8007578:	fff3ffff 	.word	0xfff3ffff
 800757c:	ffcfffff 	.word	0xffcfffff
 8007580:	ffffcfff 	.word	0xffffcfff
 8007584:	ffbfffff 	.word	0xffbfffff
 8007588:	feffffff 	.word	0xfeffffff
 800758c:	ffff3fff 	.word	0xffff3fff

08007590 <HAL_SPI_Init>:
 *         in the SPI_InitTypeDef and initialize the associated handle.
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi) {
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL) {
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <HAL_SPI_Init+0x12>
    return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e0a8      	b.n	80076f4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE) {
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d109      	bne.n	80075be <HAL_SPI_Init+0x2e>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER) {
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	2382      	movs	r3, #130	; 0x82
 80075b0:	005b      	lsls	r3, r3, #1
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d009      	beq.n	80075ca <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    } else {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default
       * value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	61da      	str	r2, [r3, #28]
 80075bc:	e005      	b.n	80075ca <HAL_SPI_Init+0x3a>
    }
  } else {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET) {
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	225d      	movs	r2, #93	; 0x5d
 80075d4:	5c9b      	ldrb	r3, [r3, r2]
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d107      	bne.n	80075ec <HAL_SPI_Init+0x5c>
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	225c      	movs	r2, #92	; 0x5c
 80075e0:	2100      	movs	r1, #0
 80075e2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	0018      	movs	r0, r3
 80075e8:	f7fd fe20 	bl	800522c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	225d      	movs	r2, #93	; 0x5d
 80075f0:	2102      	movs	r1, #2
 80075f2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2140      	movs	r1, #64	; 0x40
 8007600:	438a      	bics	r2, r1
 8007602:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT) {
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68da      	ldr	r2, [r3, #12]
 8007608:	23e0      	movs	r3, #224	; 0xe0
 800760a:	00db      	lsls	r3, r3, #3
 800760c:	429a      	cmp	r2, r3
 800760e:	d902      	bls.n	8007616 <HAL_SPI_Init+0x86>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007610:	2300      	movs	r3, #0
 8007612:	60fb      	str	r3, [r7, #12]
 8007614:	e002      	b.n	800761c <HAL_SPI_Init+0x8c>
  } else {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007616:	2380      	movs	r3, #128	; 0x80
 8007618:	015b      	lsls	r3, r3, #5
 800761a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) &&
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	68da      	ldr	r2, [r3, #12]
 8007620:	23f0      	movs	r3, #240	; 0xf0
 8007622:	011b      	lsls	r3, r3, #4
 8007624:	429a      	cmp	r2, r3
 8007626:	d008      	beq.n	800763a <HAL_SPI_Init+0xaa>
      (hspi->Init.DataSize != SPI_DATASIZE_8BIT)) {
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68da      	ldr	r2, [r3, #12]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) &&
 800762c:	23e0      	movs	r3, #224	; 0xe0
 800762e:	00db      	lsls	r3, r3, #3
 8007630:	429a      	cmp	r2, r3
 8007632:	d002      	beq.n	800763a <HAL_SPI_Init+0xaa>
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS
  management, Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1,
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	2382      	movs	r3, #130	; 0x82
 8007640:	005b      	lsls	r3, r3, #1
 8007642:	401a      	ands	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6899      	ldr	r1, [r3, #8]
 8007648:	2384      	movs	r3, #132	; 0x84
 800764a:	021b      	lsls	r3, r3, #8
 800764c:	400b      	ands	r3, r1
 800764e:	431a      	orrs	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	2102      	movs	r1, #2
 8007656:	400b      	ands	r3, r1
 8007658:	431a      	orrs	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	2101      	movs	r1, #1
 8007660:	400b      	ands	r3, r1
 8007662:	431a      	orrs	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6999      	ldr	r1, [r3, #24]
 8007668:	2380      	movs	r3, #128	; 0x80
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	400b      	ands	r3, r1
 800766e:	431a      	orrs	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	69db      	ldr	r3, [r3, #28]
 8007674:	2138      	movs	r1, #56	; 0x38
 8007676:	400b      	ands	r3, r1
 8007678:	431a      	orrs	r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	2180      	movs	r1, #128	; 0x80
 8007680:	400b      	ands	r3, r1
 8007682:	431a      	orrs	r2, r3
 8007684:	0011      	movs	r1, r2
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800768a:	2380      	movs	r3, #128	; 0x80
 800768c:	019b      	lsls	r3, r3, #6
 800768e:	401a      	ands	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	430a      	orrs	r2, r1
 8007696:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo
   * threshold */
  WRITE_REG(hspi->Instance->CR2,
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	0c1b      	lsrs	r3, r3, #16
 800769e:	2204      	movs	r2, #4
 80076a0:	401a      	ands	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a6:	2110      	movs	r1, #16
 80076a8:	400b      	ands	r3, r1
 80076aa:	431a      	orrs	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076b0:	2108      	movs	r1, #8
 80076b2:	400b      	ands	r3, r1
 80076b4:	431a      	orrs	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68d9      	ldr	r1, [r3, #12]
 80076ba:	23f0      	movs	r3, #240	; 0xf0
 80076bc:	011b      	lsls	r3, r3, #4
 80076be:	400b      	ands	r3, r1
 80076c0:	431a      	orrs	r2, r3
 80076c2:	0011      	movs	r1, r2
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	2380      	movs	r3, #128	; 0x80
 80076c8:	015b      	lsls	r3, r3, #5
 80076ca:	401a      	ands	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	430a      	orrs	r2, r1
 80076d2:	605a      	str	r2, [r3, #4]
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is
   * reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	69da      	ldr	r2, [r3, #28]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4907      	ldr	r1, [pc, #28]	; (80076fc <HAL_SPI_Init+0x16c>)
 80076e0:	400a      	ands	r2, r1
 80076e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	225d      	movs	r2, #93	; 0x5d
 80076ee:	2101      	movs	r1, #1
 80076f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	0018      	movs	r0, r3
 80076f6:	46bd      	mov	sp, r7
 80076f8:	b004      	add	sp, #16
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	fffff7ff 	.word	0xfffff7ff

08007700 <HAL_SPI_Transmit>:
 * @param  Size amount of data to be sent
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData,
                                   uint16_t Size, uint32_t Timeout) {
 8007700:	b580      	push	{r7, lr}
 8007702:	b088      	sub	sp, #32
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	603b      	str	r3, [r7, #0]
 800770c:	1dbb      	adds	r3, r7, #6
 800770e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007710:	231f      	movs	r3, #31
 8007712:	18fb      	adds	r3, r7, r3
 8007714:	2200      	movs	r2, #0
 8007716:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	225c      	movs	r2, #92	; 0x5c
 800771c:	5c9b      	ldrb	r3, [r3, r2]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d101      	bne.n	8007726 <HAL_SPI_Transmit+0x26>
 8007722:	2302      	movs	r3, #2
 8007724:	e140      	b.n	80079a8 <HAL_SPI_Transmit+0x2a8>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	225c      	movs	r2, #92	; 0x5c
 800772a:	2101      	movs	r1, #1
 800772c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800772e:	f7fd ffe7 	bl	8005700 <HAL_GetTick>
 8007732:	0003      	movs	r3, r0
 8007734:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007736:	2316      	movs	r3, #22
 8007738:	18fb      	adds	r3, r7, r3
 800773a:	1dba      	adds	r2, r7, #6
 800773c:	8812      	ldrh	r2, [r2, #0]
 800773e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY) {
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	225d      	movs	r2, #93	; 0x5d
 8007744:	5c9b      	ldrb	r3, [r3, r2]
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b01      	cmp	r3, #1
 800774a:	d004      	beq.n	8007756 <HAL_SPI_Transmit+0x56>
    errorcode = HAL_BUSY;
 800774c:	231f      	movs	r3, #31
 800774e:	18fb      	adds	r3, r7, r3
 8007750:	2202      	movs	r2, #2
 8007752:	701a      	strb	r2, [r3, #0]
    goto error;
 8007754:	e11d      	b.n	8007992 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U)) {
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d003      	beq.n	8007764 <HAL_SPI_Transmit+0x64>
 800775c:	1dbb      	adds	r3, r7, #6
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d104      	bne.n	800776e <HAL_SPI_Transmit+0x6e>
    errorcode = HAL_ERROR;
 8007764:	231f      	movs	r3, #31
 8007766:	18fb      	adds	r3, r7, r3
 8007768:	2201      	movs	r2, #1
 800776a:	701a      	strb	r2, [r3, #0]
    goto error;
 800776c:	e111      	b.n	8007992 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State = HAL_SPI_STATE_BUSY_TX;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	225d      	movs	r2, #93	; 0x5d
 8007772:	2103      	movs	r1, #3
 8007774:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr = (uint8_t *)pData;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize = Size;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	1dba      	adds	r2, r7, #6
 8007786:	8812      	ldrh	r2, [r2, #0]
 8007788:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	1dba      	adds	r2, r7, #6
 800778e:	8812      	ldrh	r2, [r2, #0]
 8007790:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr = (uint8_t *)NULL;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize = 0U;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2244      	movs	r2, #68	; 0x44
 800779c:	2100      	movs	r1, #0
 800779e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2246      	movs	r2, #70	; 0x46
 80077a4:	2100      	movs	r1, #0
 80077a6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR = NULL;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR = NULL;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE) {
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	689a      	ldr	r2, [r3, #8]
 80077b8:	2380      	movs	r3, #128	; 0x80
 80077ba:	021b      	lsls	r3, r3, #8
 80077bc:	429a      	cmp	r2, r3
 80077be:	d110      	bne.n	80077e2 <HAL_SPI_Transmit+0xe2>
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2140      	movs	r1, #64	; 0x40
 80077cc:	438a      	bics	r2, r1
 80077ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2180      	movs	r1, #128	; 0x80
 80077dc:	01c9      	lsls	r1, r1, #7
 80077de:	430a      	orrs	r2, r1
 80077e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2240      	movs	r2, #64	; 0x40
 80077ea:	4013      	ands	r3, r2
 80077ec:	2b40      	cmp	r3, #64	; 0x40
 80077ee:	d007      	beq.n	8007800 <HAL_SPI_Transmit+0x100>
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2140      	movs	r1, #64	; 0x40
 80077fc:	430a      	orrs	r2, r1
 80077fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT) {
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	68da      	ldr	r2, [r3, #12]
 8007804:	23e0      	movs	r3, #224	; 0xe0
 8007806:	00db      	lsls	r3, r3, #3
 8007808:	429a      	cmp	r2, r3
 800780a:	d94e      	bls.n	80078aa <HAL_SPI_Transmit+0x1aa>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U)) {
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d004      	beq.n	800781e <HAL_SPI_Transmit+0x11e>
 8007814:	2316      	movs	r3, #22
 8007816:	18fb      	adds	r3, r7, r3
 8007818:	881b      	ldrh	r3, [r3, #0]
 800781a:	2b01      	cmp	r3, #1
 800781c:	d13f      	bne.n	800789e <HAL_SPI_Transmit+0x19e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007822:	881a      	ldrh	r2, [r3, #0]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782e:	1c9a      	adds	r2, r3, #2
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007838:	b29b      	uxth	r3, r3
 800783a:	3b01      	subs	r3, #1
 800783c:	b29a      	uxth	r2, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U) {
 8007842:	e02c      	b.n	800789e <HAL_SPI_Transmit+0x19e>
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) {
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	2202      	movs	r2, #2
 800784c:	4013      	ands	r3, r2
 800784e:	2b02      	cmp	r3, #2
 8007850:	d112      	bne.n	8007878 <HAL_SPI_Transmit+0x178>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007856:	881a      	ldrh	r2, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007862:	1c9a      	adds	r2, r3, #2
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800786c:	b29b      	uxth	r3, r3
 800786e:	3b01      	subs	r3, #1
 8007870:	b29a      	uxth	r2, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007876:	e012      	b.n	800789e <HAL_SPI_Transmit+0x19e>
      } else {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >= Timeout) &&
 8007878:	f7fd ff42 	bl	8005700 <HAL_GetTick>
 800787c:	0002      	movs	r2, r0
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	429a      	cmp	r2, r3
 8007886:	d802      	bhi.n	800788e <HAL_SPI_Transmit+0x18e>
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	3301      	adds	r3, #1
 800788c:	d102      	bne.n	8007894 <HAL_SPI_Transmit+0x194>
             (Timeout != HAL_MAX_DELAY)) ||
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d104      	bne.n	800789e <HAL_SPI_Transmit+0x19e>
            (Timeout == 0U)) {
          errorcode = HAL_TIMEOUT;
 8007894:	231f      	movs	r3, #31
 8007896:	18fb      	adds	r3, r7, r3
 8007898:	2203      	movs	r2, #3
 800789a:	701a      	strb	r2, [r3, #0]
          goto error;
 800789c:	e079      	b.n	8007992 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U) {
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1cd      	bne.n	8007844 <HAL_SPI_Transmit+0x144>
 80078a8:	e04f      	b.n	800794a <HAL_SPI_Transmit+0x24a>
      }
    }
  }
  /* Transmit data in 8 Bit mode */
  else {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U)) {
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d004      	beq.n	80078bc <HAL_SPI_Transmit+0x1bc>
 80078b2:	2316      	movs	r3, #22
 80078b4:	18fb      	adds	r3, r7, r3
 80078b6:	881b      	ldrh	r3, [r3, #0]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d141      	bne.n	8007940 <HAL_SPI_Transmit+0x240>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	330c      	adds	r3, #12
 80078c6:	7812      	ldrb	r2, [r2, #0]
 80078c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078d8:	b29b      	uxth	r3, r3
 80078da:	3b01      	subs	r3, #1
 80078dc:	b29a      	uxth	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U) {
 80078e2:	e02d      	b.n	8007940 <HAL_SPI_Transmit+0x240>
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) {
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	2202      	movs	r2, #2
 80078ec:	4013      	ands	r3, r2
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	d113      	bne.n	800791a <HAL_SPI_Transmit+0x21a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	330c      	adds	r3, #12
 80078fc:	7812      	ldrb	r2, [r2, #0]
 80078fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007904:	1c5a      	adds	r2, r3, #1
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800790e:	b29b      	uxth	r3, r3
 8007910:	3b01      	subs	r3, #1
 8007912:	b29a      	uxth	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007918:	e012      	b.n	8007940 <HAL_SPI_Transmit+0x240>
      } else {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >= Timeout) &&
 800791a:	f7fd fef1 	bl	8005700 <HAL_GetTick>
 800791e:	0002      	movs	r2, r0
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	683a      	ldr	r2, [r7, #0]
 8007926:	429a      	cmp	r2, r3
 8007928:	d802      	bhi.n	8007930 <HAL_SPI_Transmit+0x230>
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	3301      	adds	r3, #1
 800792e:	d102      	bne.n	8007936 <HAL_SPI_Transmit+0x236>
             (Timeout != HAL_MAX_DELAY)) ||
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d104      	bne.n	8007940 <HAL_SPI_Transmit+0x240>
            (Timeout == 0U)) {
          errorcode = HAL_TIMEOUT;
 8007936:	231f      	movs	r3, #31
 8007938:	18fb      	adds	r3, r7, r3
 800793a:	2203      	movs	r2, #3
 800793c:	701a      	strb	r2, [r3, #0]
          goto error;
 800793e:	e028      	b.n	8007992 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U) {
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007944:	b29b      	uxth	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1cc      	bne.n	80078e4 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK) {
 800794a:	69ba      	ldr	r2, [r7, #24]
 800794c:	6839      	ldr	r1, [r7, #0]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	0018      	movs	r0, r3
 8007952:	f000 fc4b 	bl	80081ec <SPI_EndRxTxTransaction>
 8007956:	1e03      	subs	r3, r0, #0
 8007958:	d002      	beq.n	8007960 <HAL_SPI_Transmit+0x260>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2220      	movs	r2, #32
 800795e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not
   * read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES) {
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10a      	bne.n	800797e <HAL_SPI_Transmit+0x27e>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007968:	2300      	movs	r3, #0
 800796a:	613b      	str	r3, [r7, #16]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	613b      	str	r3, [r7, #16]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	613b      	str	r3, [r7, #16]
 800797c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE) {
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007982:	2b00      	cmp	r3, #0
 8007984:	d004      	beq.n	8007990 <HAL_SPI_Transmit+0x290>
    errorcode = HAL_ERROR;
 8007986:	231f      	movs	r3, #31
 8007988:	18fb      	adds	r3, r7, r3
 800798a:	2201      	movs	r2, #1
 800798c:	701a      	strb	r2, [r3, #0]
 800798e:	e000      	b.n	8007992 <HAL_SPI_Transmit+0x292>
  }

error:
 8007990:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	225d      	movs	r2, #93	; 0x5d
 8007996:	2101      	movs	r1, #1
 8007998:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	225c      	movs	r2, #92	; 0x5c
 800799e:	2100      	movs	r1, #0
 80079a0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80079a2:	231f      	movs	r3, #31
 80079a4:	18fb      	adds	r3, r7, r3
 80079a6:	781b      	ldrb	r3, [r3, #0]
}
 80079a8:	0018      	movs	r0, r3
 80079aa:	46bd      	mov	sp, r7
 80079ac:	b008      	add	sp, #32
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <HAL_SPI_TransmitReceive>:
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi,
                                          uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout) {
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b08a      	sub	sp, #40	; 0x28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
 80079bc:	001a      	movs	r2, r3
 80079be:	1cbb      	adds	r3, r7, #2
 80079c0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t *ptmpreg8;
  __IO uint8_t tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 80079c2:	2301      	movs	r3, #1
 80079c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 80079c6:	2323      	movs	r3, #35	; 0x23
 80079c8:	18fb      	adds	r3, r7, r3
 80079ca:	2200      	movs	r2, #0
 80079cc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	225c      	movs	r2, #92	; 0x5c
 80079d2:	5c9b      	ldrb	r3, [r3, r2]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d101      	bne.n	80079dc <HAL_SPI_TransmitReceive+0x2c>
 80079d8:	2302      	movs	r3, #2
 80079da:	e1b5      	b.n	8007d48 <HAL_SPI_TransmitReceive+0x398>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	225c      	movs	r2, #92	; 0x5c
 80079e0:	2101      	movs	r1, #1
 80079e2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079e4:	f7fd fe8c 	bl	8005700 <HAL_GetTick>
 80079e8:	0003      	movs	r3, r0
 80079ea:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state = hspi->State;
 80079ec:	201b      	movs	r0, #27
 80079ee:	183b      	adds	r3, r7, r0
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	215d      	movs	r1, #93	; 0x5d
 80079f4:	5c52      	ldrb	r2, [r2, r1]
 80079f6:	701a      	strb	r2, [r3, #0]
  tmp_mode = hspi->Init.Mode;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80079fe:	2312      	movs	r3, #18
 8007a00:	18fb      	adds	r3, r7, r3
 8007a02:	1cba      	adds	r2, r7, #2
 8007a04:	8812      	ldrh	r2, [r2, #0]
 8007a06:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1 = READ_REG(hspi->Instance->CR1);
  spi_cr2 = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007a08:	183b      	adds	r3, r7, r0
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d011      	beq.n	8007a34 <HAL_SPI_TransmitReceive+0x84>
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	2382      	movs	r3, #130	; 0x82
 8007a14:	005b      	lsls	r3, r3, #1
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d107      	bne.n	8007a2a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) &&
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) &&
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d103      	bne.n	8007a2a <HAL_SPI_TransmitReceive+0x7a>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007a22:	183b      	adds	r3, r7, r0
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	2b04      	cmp	r3, #4
 8007a28:	d004      	beq.n	8007a34 <HAL_SPI_TransmitReceive+0x84>
         (tmp_state == HAL_SPI_STATE_BUSY_RX)))) {
    errorcode = HAL_BUSY;
 8007a2a:	2323      	movs	r3, #35	; 0x23
 8007a2c:	18fb      	adds	r3, r7, r3
 8007a2e:	2202      	movs	r2, #2
 8007a30:	701a      	strb	r2, [r3, #0]
    goto error;
 8007a32:	e17e      	b.n	8007d32 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U)) {
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d006      	beq.n	8007a48 <HAL_SPI_TransmitReceive+0x98>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d003      	beq.n	8007a48 <HAL_SPI_TransmitReceive+0x98>
 8007a40:	1cbb      	adds	r3, r7, #2
 8007a42:	881b      	ldrh	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d104      	bne.n	8007a52 <HAL_SPI_TransmitReceive+0xa2>
    errorcode = HAL_ERROR;
 8007a48:	2323      	movs	r3, #35	; 0x23
 8007a4a:	18fb      	adds	r3, r7, r3
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	701a      	strb	r2, [r3, #0]
    goto error;
 8007a50:	e16f      	b.n	8007d32 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX) {
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	225d      	movs	r2, #93	; 0x5d
 8007a56:	5c9b      	ldrb	r3, [r3, r2]
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b04      	cmp	r3, #4
 8007a5c:	d003      	beq.n	8007a66 <HAL_SPI_TransmitReceive+0xb6>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	225d      	movs	r2, #93	; 0x5d
 8007a62:	2105      	movs	r1, #5
 8007a64:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr = (uint8_t *)pRxData;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	1cba      	adds	r2, r7, #2
 8007a76:	2146      	movs	r1, #70	; 0x46
 8007a78:	8812      	ldrh	r2, [r2, #0]
 8007a7a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize = Size;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	1cba      	adds	r2, r7, #2
 8007a80:	2144      	movs	r1, #68	; 0x44
 8007a82:	8812      	ldrh	r2, [r2, #0]
 8007a84:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr = (uint8_t *)pTxData;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	68ba      	ldr	r2, [r7, #8]
 8007a8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	1cba      	adds	r2, r7, #2
 8007a90:	8812      	ldrh	r2, [r2, #0]
 8007a92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize = Size;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	1cba      	adds	r2, r7, #2
 8007a98:	8812      	ldrh	r2, [r2, #0]
 8007a9a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR = NULL;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR = NULL;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT) {
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	68da      	ldr	r2, [r3, #12]
 8007aac:	23e0      	movs	r3, #224	; 0xe0
 8007aae:	00db      	lsls	r3, r3, #3
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d908      	bls.n	8007ac6 <HAL_SPI_TransmitReceive+0x116>
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685a      	ldr	r2, [r3, #4]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	49a4      	ldr	r1, [pc, #656]	; (8007d50 <HAL_SPI_TransmitReceive+0x3a0>)
 8007ac0:	400a      	ands	r2, r1
 8007ac2:	605a      	str	r2, [r3, #4]
 8007ac4:	e008      	b.n	8007ad8 <HAL_SPI_TransmitReceive+0x128>
  } else {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2180      	movs	r1, #128	; 0x80
 8007ad2:	0149      	lsls	r1, r1, #5
 8007ad4:	430a      	orrs	r2, r1
 8007ad6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2240      	movs	r2, #64	; 0x40
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	2b40      	cmp	r3, #64	; 0x40
 8007ae4:	d007      	beq.n	8007af6 <HAL_SPI_TransmitReceive+0x146>
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2140      	movs	r1, #64	; 0x40
 8007af2:	430a      	orrs	r2, r1
 8007af4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT) {
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	68da      	ldr	r2, [r3, #12]
 8007afa:	23e0      	movs	r3, #224	; 0xe0
 8007afc:	00db      	lsls	r3, r3, #3
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d800      	bhi.n	8007b04 <HAL_SPI_TransmitReceive+0x154>
 8007b02:	e07f      	b.n	8007c04 <HAL_SPI_TransmitReceive+0x254>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U)) {
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d005      	beq.n	8007b18 <HAL_SPI_TransmitReceive+0x168>
 8007b0c:	2312      	movs	r3, #18
 8007b0e:	18fb      	adds	r3, r7, r3
 8007b10:	881b      	ldrh	r3, [r3, #0]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d000      	beq.n	8007b18 <HAL_SPI_TransmitReceive+0x168>
 8007b16:	e069      	b.n	8007bec <HAL_SPI_TransmitReceive+0x23c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1c:	881a      	ldrh	r2, [r3, #0]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b28:	1c9a      	adds	r2, r3, #2
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	3b01      	subs	r3, #1
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8007b3c:	e056      	b.n	8007bec <HAL_SPI_TransmitReceive+0x23c>
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) &&
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	2202      	movs	r2, #2
 8007b46:	4013      	ands	r3, r2
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d11b      	bne.n	8007b84 <HAL_SPI_TransmitReceive+0x1d4>
          (hspi->TxXferCount > 0U) && (txallowed == 1U)) {
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b50:	b29b      	uxth	r3, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) &&
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d016      	beq.n	8007b84 <HAL_SPI_TransmitReceive+0x1d4>
          (hspi->TxXferCount > 0U) && (txallowed == 1U)) {
 8007b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d113      	bne.n	8007b84 <HAL_SPI_TransmitReceive+0x1d4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b60:	881a      	ldrh	r2, [r3, #0]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6c:	1c9a      	adds	r2, r3, #2
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b80:	2300      	movs	r3, #0
 8007b82:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) &&
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d11c      	bne.n	8007bcc <HAL_SPI_TransmitReceive+0x21c>
          (hspi->RxXferCount > 0U)) {
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2246      	movs	r2, #70	; 0x46
 8007b96:	5a9b      	ldrh	r3, [r3, r2]
 8007b98:	b29b      	uxth	r3, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) &&
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d016      	beq.n	8007bcc <HAL_SPI_TransmitReceive+0x21c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68da      	ldr	r2, [r3, #12]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba8:	b292      	uxth	r2, r2
 8007baa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb0:	1c9a      	adds	r2, r3, #2
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2246      	movs	r2, #70	; 0x46
 8007bba:	5a9b      	ldrh	r3, [r3, r2]
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	b299      	uxth	r1, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2246      	movs	r2, #70	; 0x46
 8007bc6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >= Timeout) &&
 8007bcc:	f7fd fd98 	bl	8005700 <HAL_GetTick>
 8007bd0:	0002      	movs	r2, r0
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d807      	bhi.n	8007bec <HAL_SPI_TransmitReceive+0x23c>
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bde:	3301      	adds	r3, #1
 8007be0:	d004      	beq.n	8007bec <HAL_SPI_TransmitReceive+0x23c>
          (Timeout != HAL_MAX_DELAY)) {
        errorcode = HAL_TIMEOUT;
 8007be2:	2323      	movs	r3, #35	; 0x23
 8007be4:	18fb      	adds	r3, r7, r3
 8007be6:	2203      	movs	r2, #3
 8007be8:	701a      	strb	r2, [r3, #0]
        goto error;
 8007bea:	e0a2      	b.n	8007d32 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1a3      	bne.n	8007b3e <HAL_SPI_TransmitReceive+0x18e>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2246      	movs	r2, #70	; 0x46
 8007bfa:	5a9b      	ldrh	r3, [r3, r2]
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d19d      	bne.n	8007b3e <HAL_SPI_TransmitReceive+0x18e>
 8007c02:	e085      	b.n	8007d10 <HAL_SPI_TransmitReceive+0x360>
      }
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U)) {
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d005      	beq.n	8007c18 <HAL_SPI_TransmitReceive+0x268>
 8007c0c:	2312      	movs	r3, #18
 8007c0e:	18fb      	adds	r3, r7, r3
 8007c10:	881b      	ldrh	r3, [r3, #0]
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d000      	beq.n	8007c18 <HAL_SPI_TransmitReceive+0x268>
 8007c16:	e070      	b.n	8007cfa <HAL_SPI_TransmitReceive+0x34a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	330c      	adds	r3, #12
 8007c22:	7812      	ldrb	r2, [r2, #0]
 8007c24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2a:	1c5a      	adds	r2, r3, #1
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	3b01      	subs	r3, #1
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8007c3e:	e05c      	b.n	8007cfa <HAL_SPI_TransmitReceive+0x34a>
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) &&
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	2202      	movs	r2, #2
 8007c48:	4013      	ands	r3, r2
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d11c      	bne.n	8007c88 <HAL_SPI_TransmitReceive+0x2d8>
          (hspi->TxXferCount > 0U) && (txallowed == 1U)) {
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c52:	b29b      	uxth	r3, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) &&
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d017      	beq.n	8007c88 <HAL_SPI_TransmitReceive+0x2d8>
          (hspi->TxXferCount > 0U) && (txallowed == 1U)) {
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d114      	bne.n	8007c88 <HAL_SPI_TransmitReceive+0x2d8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	330c      	adds	r3, #12
 8007c68:	7812      	ldrb	r2, [r2, #0]
 8007c6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c70:	1c5a      	adds	r2, r3, #1
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c84:	2300      	movs	r3, #0
 8007c86:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) &&
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	4013      	ands	r3, r2
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d11e      	bne.n	8007cd4 <HAL_SPI_TransmitReceive+0x324>
          (hspi->RxXferCount > 0U)) {
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2246      	movs	r2, #70	; 0x46
 8007c9a:	5a9b      	ldrh	r3, [r3, r2]
 8007c9c:	b29b      	uxth	r3, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) &&
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d018      	beq.n	8007cd4 <HAL_SPI_TransmitReceive+0x324>
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	330c      	adds	r3, #12
 8007ca8:	001a      	movs	r2, r3
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cae:	7812      	ldrb	r2, [r2, #0]
 8007cb0:	b2d2      	uxtb	r2, r2
 8007cb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb8:	1c5a      	adds	r2, r3, #1
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2246      	movs	r2, #70	; 0x46
 8007cc2:	5a9b      	ldrh	r3, [r3, r2]
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	b299      	uxth	r1, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2246      	movs	r2, #70	; 0x46
 8007cce:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >= Timeout) &&
 8007cd4:	f7fd fd14 	bl	8005700 <HAL_GetTick>
 8007cd8:	0002      	movs	r2, r0
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d802      	bhi.n	8007cea <HAL_SPI_TransmitReceive+0x33a>
 8007ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	d102      	bne.n	8007cf0 <HAL_SPI_TransmitReceive+0x340>
           ((Timeout != HAL_MAX_DELAY))) ||
 8007cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d104      	bne.n	8007cfa <HAL_SPI_TransmitReceive+0x34a>
          (Timeout == 0U)) {
        errorcode = HAL_TIMEOUT;
 8007cf0:	2323      	movs	r3, #35	; 0x23
 8007cf2:	18fb      	adds	r3, r7, r3
 8007cf4:	2203      	movs	r2, #3
 8007cf6:	701a      	strb	r2, [r3, #0]
        goto error;
 8007cf8:	e01b      	b.n	8007d32 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d19d      	bne.n	8007c40 <HAL_SPI_TransmitReceive+0x290>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2246      	movs	r2, #70	; 0x46
 8007d08:	5a9b      	ldrh	r3, [r3, r2]
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d197      	bne.n	8007c40 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK) {
 8007d10:	69fa      	ldr	r2, [r7, #28]
 8007d12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	0018      	movs	r0, r3
 8007d18:	f000 fa68 	bl	80081ec <SPI_EndRxTxTransaction>
 8007d1c:	1e03      	subs	r3, r0, #0
 8007d1e:	d007      	beq.n	8007d30 <HAL_SPI_TransmitReceive+0x380>
    errorcode = HAL_ERROR;
 8007d20:	2323      	movs	r3, #35	; 0x23
 8007d22:	18fb      	adds	r3, r7, r3
 8007d24:	2201      	movs	r2, #1
 8007d26:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2220      	movs	r2, #32
 8007d2c:	661a      	str	r2, [r3, #96]	; 0x60
 8007d2e:	e000      	b.n	8007d32 <HAL_SPI_TransmitReceive+0x382>
  }

error:
 8007d30:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	225d      	movs	r2, #93	; 0x5d
 8007d36:	2101      	movs	r1, #1
 8007d38:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	225c      	movs	r2, #92	; 0x5c
 8007d3e:	2100      	movs	r1, #0
 8007d40:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007d42:	2323      	movs	r3, #35	; 0x23
 8007d44:	18fb      	adds	r3, r7, r3
 8007d46:	781b      	ldrb	r3, [r3, #0]
}
 8007d48:	0018      	movs	r0, r3
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	b00a      	add	sp, #40	; 0x28
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	ffffefff 	.word	0xffffefff

08007d54 <HAL_SPI_IRQHandler>:
 * @brief  Handle SPI interrupt request.
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for the specified SPI module.
 * @retval None
 */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi) {
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b088      	sub	sp, #32
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	61fb      	str	r3, [r7, #28]
  uint32_t itflag = hspi->Instance->SR;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	099b      	lsrs	r3, r3, #6
 8007d70:	001a      	movs	r2, r3
 8007d72:	2301      	movs	r3, #1
 8007d74:	4013      	ands	r3, r2
 8007d76:	d10f      	bne.n	8007d98 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) &&
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d7e:	d00b      	beq.n	8007d98 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET)) {
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	099b      	lsrs	r3, r3, #6
 8007d84:	001a      	movs	r2, r3
 8007d86:	2301      	movs	r3, #1
 8007d88:	4013      	ands	r3, r2
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) &&
 8007d8a:	d005      	beq.n	8007d98 <HAL_SPI_IRQHandler+0x44>
    hspi->RxISR(hspi);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	0010      	movs	r0, r2
 8007d94:	4798      	blx	r3
    return;
 8007d96:	e0d5      	b.n	8007f44 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) &&
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	085b      	lsrs	r3, r3, #1
 8007d9c:	001a      	movs	r2, r3
 8007d9e:	2301      	movs	r3, #1
 8007da0:	4013      	ands	r3, r2
 8007da2:	d00b      	beq.n	8007dbc <HAL_SPI_IRQHandler+0x68>
      (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET)) {
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	09db      	lsrs	r3, r3, #7
 8007da8:	001a      	movs	r2, r3
 8007daa:	2301      	movs	r3, #1
 8007dac:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) &&
 8007dae:	d005      	beq.n	8007dbc <HAL_SPI_IRQHandler+0x68>
    hspi->TxISR(hspi);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	0010      	movs	r0, r2
 8007db8:	4798      	blx	r3
    return;
 8007dba:	e0c3      	b.n	8007f44 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) ||
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	095b      	lsrs	r3, r3, #5
 8007dc0:	001a      	movs	r2, r3
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	d10c      	bne.n	8007de2 <HAL_SPI_IRQHandler+0x8e>
       (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) ||
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	099b      	lsrs	r3, r3, #6
 8007dcc:	001a      	movs	r2, r3
 8007dce:	2301      	movs	r3, #1
 8007dd0:	4013      	ands	r3, r2
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) ||
 8007dd2:	d106      	bne.n	8007de2 <HAL_SPI_IRQHandler+0x8e>
       (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) &&
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	0a1b      	lsrs	r3, r3, #8
 8007dd8:	001a      	movs	r2, r3
 8007dda:	2301      	movs	r3, #1
 8007ddc:	4013      	ands	r3, r2
       (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) ||
 8007dde:	d100      	bne.n	8007de2 <HAL_SPI_IRQHandler+0x8e>
 8007de0:	e0b0      	b.n	8007f44 <HAL_SPI_IRQHandler+0x1f0>
      (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET)) {
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	095b      	lsrs	r3, r3, #5
 8007de6:	001a      	movs	r2, r3
 8007de8:	2301      	movs	r3, #1
 8007dea:	4013      	ands	r3, r2
       (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) &&
 8007dec:	d100      	bne.n	8007df0 <HAL_SPI_IRQHandler+0x9c>
 8007dee:	e0a9      	b.n	8007f44 <HAL_SPI_IRQHandler+0x1f0>
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) {
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	099b      	lsrs	r3, r3, #6
 8007df4:	001a      	movs	r2, r3
 8007df6:	2301      	movs	r3, #1
 8007df8:	4013      	ands	r3, r2
 8007dfa:	d023      	beq.n	8007e44 <HAL_SPI_IRQHandler+0xf0>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX) {
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	225d      	movs	r2, #93	; 0x5d
 8007e00:	5c9b      	ldrb	r3, [r3, r2]
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	2b03      	cmp	r3, #3
 8007e06:	d011      	beq.n	8007e2c <HAL_SPI_IRQHandler+0xd8>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e0c:	2204      	movs	r2, #4
 8007e0e:	431a      	orrs	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e14:	2300      	movs	r3, #0
 8007e16:	617b      	str	r3, [r7, #20]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	617b      	str	r3, [r7, #20]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	617b      	str	r3, [r7, #20]
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	e00b      	b.n	8007e44 <HAL_SPI_IRQHandler+0xf0>
      } else {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	613b      	str	r3, [r7, #16]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	613b      	str	r3, [r7, #16]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	613b      	str	r3, [r7, #16]
 8007e40:	693b      	ldr	r3, [r7, #16]
        return;
 8007e42:	e07f      	b.n	8007f44 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) {
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	095b      	lsrs	r3, r3, #5
 8007e48:	001a      	movs	r2, r3
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	d014      	beq.n	8007e7a <HAL_SPI_IRQHandler+0x126>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e54:	2201      	movs	r2, #1
 8007e56:	431a      	orrs	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	60fb      	str	r3, [r7, #12]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	60fb      	str	r3, [r7, #12]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2140      	movs	r1, #64	; 0x40
 8007e74:	438a      	bics	r2, r1
 8007e76:	601a      	str	r2, [r3, #0]
 8007e78:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET) {
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	0a1b      	lsrs	r3, r3, #8
 8007e7e:	001a      	movs	r2, r3
 8007e80:	2301      	movs	r3, #1
 8007e82:	4013      	ands	r3, r2
 8007e84:	d00c      	beq.n	8007ea0 <HAL_SPI_IRQHandler+0x14c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e8a:	2208      	movs	r2, #8
 8007e8c:	431a      	orrs	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e92:	2300      	movs	r3, #0
 8007e94:	60bb      	str	r3, [r7, #8]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	60bb      	str	r3, [r7, #8]
 8007e9e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE) {
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d04c      	beq.n	8007f42 <HAL_SPI_IRQHandler+0x1ee>
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	21e0      	movs	r1, #224	; 0xe0
 8007eb4:	438a      	bics	r2, r1
 8007eb6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	225d      	movs	r2, #93	; 0x5d
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) ||
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	d103      	bne.n	8007ed0 <HAL_SPI_IRQHandler+0x17c>
          (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN))) {
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) ||
 8007ece:	d032      	beq.n	8007f36 <HAL_SPI_IRQHandler+0x1e2>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2103      	movs	r1, #3
 8007edc:	438a      	bics	r2, r1
 8007ede:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL) {
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d010      	beq.n	8007f0a <HAL_SPI_IRQHandler+0x1b6>
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort
          procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eec:	4a17      	ldr	r2, [pc, #92]	; (8007f4c <HAL_SPI_IRQHandler+0x1f8>)
 8007eee:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx)) {
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef4:	0018      	movs	r0, r3
 8007ef6:	f7fe fa25 	bl	8006344 <HAL_DMA_Abort_IT>
 8007efa:	1e03      	subs	r3, r0, #0
 8007efc:	d005      	beq.n	8007f0a <HAL_SPI_IRQHandler+0x1b6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f02:	2240      	movs	r2, #64	; 0x40
 8007f04:	431a      	orrs	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL) {
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d016      	beq.n	8007f40 <HAL_SPI_IRQHandler+0x1ec>
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort
          procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f16:	4a0d      	ldr	r2, [pc, #52]	; (8007f4c <HAL_SPI_IRQHandler+0x1f8>)
 8007f18:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx)) {
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f1e:	0018      	movs	r0, r3
 8007f20:	f7fe fa10 	bl	8006344 <HAL_DMA_Abort_IT>
 8007f24:	1e03      	subs	r3, r0, #0
 8007f26:	d00b      	beq.n	8007f40 <HAL_SPI_IRQHandler+0x1ec>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f2c:	2240      	movs	r2, #64	; 0x40
 8007f2e:	431a      	orrs	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL) {
 8007f34:	e004      	b.n	8007f40 <HAL_SPI_IRQHandler+0x1ec>
      } else {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	0018      	movs	r0, r3
 8007f3a:	f000 f809 	bl	8007f50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007f3e:	e000      	b.n	8007f42 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL) {
 8007f40:	46c0      	nop			; (mov r8, r8)
    return;
 8007f42:	46c0      	nop			; (mov r8, r8)
  }
}
 8007f44:	46bd      	mov	sp, r7
 8007f46:	b008      	add	sp, #32
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	46c0      	nop			; (mov r8, r8)
 8007f4c:	08007f61 	.word	0x08007f61

08007f50 <HAL_SPI_ErrorCallback>:
 * @brief  SPI error callback.
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval None
 */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI
     processes and user can use HAL_SPI_GetError() API to check the latest error
     occurred
   */
}
 8007f58:	46c0      	nop			; (mov r8, r8)
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	b002      	add	sp, #8
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <SPI_DMAAbortOnError>:
 * on Error (To be called at end of DMA Abort procedure following error
 * occurrence).
 * @param  hdma DMA handle.
 * @retval None
 */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma) {
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi =
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6c:	60fb      	str	r3, [r7, #12]
      (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)
                                ->Parent); /* Derogation MISRAC2012-Rule-11.5 */
  hspi->RxXferCount = 0U;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2246      	movs	r2, #70	; 0x46
 8007f72:	2100      	movs	r1, #0
 8007f74:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	0018      	movs	r0, r3
 8007f80:	f7ff ffe6 	bl	8007f50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f84:	46c0      	nop			; (mov r8, r8)
 8007f86:	46bd      	mov	sp, r7
 8007f88:	b004      	add	sp, #16
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <SPI_WaitFlagStateUntilTimeout>:
 */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi,
                                                       uint32_t Flag,
                                                       FlagStatus State,
                                                       uint32_t Timeout,
                                                       uint32_t Tickstart) {
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b088      	sub	sp, #32
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	603b      	str	r3, [r7, #0]
 8007f98:	1dfb      	adds	r3, r7, #7
 8007f9a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007f9c:	f7fd fbb0 	bl	8005700 <HAL_GetTick>
 8007fa0:	0002      	movs	r2, r0
 8007fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa4:	1a9b      	subs	r3, r3, r2
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	18d3      	adds	r3, r2, r3
 8007faa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007fac:	f7fd fba8 	bl	8005700 <HAL_GetTick>
 8007fb0:	0003      	movs	r3, r0
 8007fb2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if
   * Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007fb4:	4b3a      	ldr	r3, [pc, #232]	; (80080a0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	015b      	lsls	r3, r3, #5
 8007fba:	0d1b      	lsrs	r3, r3, #20
 8007fbc:	69fa      	ldr	r2, [r7, #28]
 8007fbe:	4353      	muls	r3, r2
 8007fc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State) {
 8007fc2:	e058      	b.n	8008076 <SPI_WaitFlagStateUntilTimeout+0xea>
    if (Timeout != HAL_MAX_DELAY) {
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	d055      	beq.n	8008076 <SPI_WaitFlagStateUntilTimeout+0xea>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) ||
 8007fca:	f7fd fb99 	bl	8005700 <HAL_GetTick>
 8007fce:	0002      	movs	r2, r0
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	69fa      	ldr	r2, [r7, #28]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d902      	bls.n	8007fe0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d142      	bne.n	8008066 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	685a      	ldr	r2, [r3, #4]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	21e0      	movs	r1, #224	; 0xe0
 8007fec:	438a      	bics	r2, r1
 8007fee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) &&
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	685a      	ldr	r2, [r3, #4]
 8007ff4:	2382      	movs	r3, #130	; 0x82
 8007ff6:	005b      	lsls	r3, r3, #1
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d113      	bne.n	8008024 <SPI_WaitFlagStateUntilTimeout+0x98>
            ((hspi->Init.Direction == SPI_DIRECTION_1LINE) ||
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	689a      	ldr	r2, [r3, #8]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) &&
 8008000:	2380      	movs	r3, #128	; 0x80
 8008002:	021b      	lsls	r3, r3, #8
 8008004:	429a      	cmp	r2, r3
 8008006:	d005      	beq.n	8008014 <SPI_WaitFlagStateUntilTimeout+0x88>
             (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))) {
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	689a      	ldr	r2, [r3, #8]
            ((hspi->Init.Direction == SPI_DIRECTION_1LINE) ||
 800800c:	2380      	movs	r3, #128	; 0x80
 800800e:	00db      	lsls	r3, r3, #3
 8008010:	429a      	cmp	r2, r3
 8008012:	d107      	bne.n	8008024 <SPI_WaitFlagStateUntilTimeout+0x98>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2140      	movs	r1, #64	; 0x40
 8008020:	438a      	bics	r2, r1
 8008022:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) {
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008028:	2380      	movs	r3, #128	; 0x80
 800802a:	019b      	lsls	r3, r3, #6
 800802c:	429a      	cmp	r2, r3
 800802e:	d110      	bne.n	8008052 <SPI_WaitFlagStateUntilTimeout+0xc6>
          SPI_RESET_CRC(hspi);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	491a      	ldr	r1, [pc, #104]	; (80080a4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800803c:	400a      	ands	r2, r1
 800803e:	601a      	str	r2, [r3, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2180      	movs	r1, #128	; 0x80
 800804c:	0189      	lsls	r1, r1, #6
 800804e:	430a      	orrs	r2, r1
 8008050:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	225d      	movs	r2, #93	; 0x5d
 8008056:	2101      	movs	r1, #1
 8008058:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	225c      	movs	r2, #92	; 0x5c
 800805e:	2100      	movs	r1, #0
 8008060:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e017      	b.n	8008096 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in
       * disable loop procedure */
      if (count == 0U) {
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d101      	bne.n	8008070 <SPI_WaitFlagStateUntilTimeout+0xe4>
        tmp_timeout = 0U;
 800806c:	2300      	movs	r3, #0
 800806e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	3b01      	subs	r3, #1
 8008074:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State) {
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	4013      	ands	r3, r2
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	425a      	negs	r2, r3
 8008086:	4153      	adcs	r3, r2
 8008088:	b2db      	uxtb	r3, r3
 800808a:	001a      	movs	r2, r3
 800808c:	1dfb      	adds	r3, r7, #7
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	429a      	cmp	r2, r3
 8008092:	d197      	bne.n	8007fc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	0018      	movs	r0, r3
 8008098:	46bd      	mov	sp, r7
 800809a:	b008      	add	sp, #32
 800809c:	bd80      	pop	{r7, pc}
 800809e:	46c0      	nop			; (mov r8, r8)
 80080a0:	20000000 	.word	0x20000000
 80080a4:	ffffdfff 	.word	0xffffdfff

080080a8 <SPI_WaitFifoStateUntilTimeout>:
 */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi,
                                                       uint32_t Fifo,
                                                       uint32_t State,
                                                       uint32_t Timeout,
                                                       uint32_t Tickstart) {
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b08a      	sub	sp, #40	; 0x28
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
 80080b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t *ptmpreg8;
  __IO uint8_t tmpreg8 = 0;
 80080b6:	2317      	movs	r3, #23
 80080b8:	18fb      	adds	r3, r7, r3
 80080ba:	2200      	movs	r2, #0
 80080bc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80080be:	f7fd fb1f 	bl	8005700 <HAL_GetTick>
 80080c2:	0002      	movs	r2, r0
 80080c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c6:	1a9b      	subs	r3, r3, r2
 80080c8:	683a      	ldr	r2, [r7, #0]
 80080ca:	18d3      	adds	r3, r2, r3
 80080cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80080ce:	f7fd fb17 	bl	8005700 <HAL_GetTick>
 80080d2:	0003      	movs	r3, r0
 80080d4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	330c      	adds	r3, #12
 80080dc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if
   * Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80080de:	4b41      	ldr	r3, [pc, #260]	; (80081e4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	0013      	movs	r3, r2
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	189b      	adds	r3, r3, r2
 80080e8:	00da      	lsls	r2, r3, #3
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	0d1b      	lsrs	r3, r3, #20
 80080ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080f0:	4353      	muls	r3, r2
 80080f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State) {
 80080f4:	e068      	b.n	80081c8 <SPI_WaitFifoStateUntilTimeout+0x120>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY)) {
 80080f6:	68ba      	ldr	r2, [r7, #8]
 80080f8:	23c0      	movs	r3, #192	; 0xc0
 80080fa:	00db      	lsls	r3, r3, #3
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d10a      	bne.n	8008116 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d107      	bne.n	8008116 <SPI_WaitFifoStateUntilTimeout+0x6e>
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	b2da      	uxtb	r2, r3
 800810c:	2117      	movs	r1, #23
 800810e:	187b      	adds	r3, r7, r1
 8008110:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008112:	187b      	adds	r3, r7, r1
 8008114:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY) {
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	3301      	adds	r3, #1
 800811a:	d055      	beq.n	80081c8 <SPI_WaitFifoStateUntilTimeout+0x120>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) ||
 800811c:	f7fd faf0 	bl	8005700 <HAL_GetTick>
 8008120:	0002      	movs	r2, r0
 8008122:	6a3b      	ldr	r3, [r7, #32]
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008128:	429a      	cmp	r2, r3
 800812a:	d902      	bls.n	8008132 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800812c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812e:	2b00      	cmp	r3, #0
 8008130:	d142      	bne.n	80081b8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	685a      	ldr	r2, [r3, #4]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	21e0      	movs	r1, #224	; 0xe0
 800813e:	438a      	bics	r2, r1
 8008140:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) &&
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	685a      	ldr	r2, [r3, #4]
 8008146:	2382      	movs	r3, #130	; 0x82
 8008148:	005b      	lsls	r3, r3, #1
 800814a:	429a      	cmp	r2, r3
 800814c:	d113      	bne.n	8008176 <SPI_WaitFifoStateUntilTimeout+0xce>
            ((hspi->Init.Direction == SPI_DIRECTION_1LINE) ||
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	689a      	ldr	r2, [r3, #8]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) &&
 8008152:	2380      	movs	r3, #128	; 0x80
 8008154:	021b      	lsls	r3, r3, #8
 8008156:	429a      	cmp	r2, r3
 8008158:	d005      	beq.n	8008166 <SPI_WaitFifoStateUntilTimeout+0xbe>
             (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))) {
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	689a      	ldr	r2, [r3, #8]
            ((hspi->Init.Direction == SPI_DIRECTION_1LINE) ||
 800815e:	2380      	movs	r3, #128	; 0x80
 8008160:	00db      	lsls	r3, r3, #3
 8008162:	429a      	cmp	r2, r3
 8008164:	d107      	bne.n	8008176 <SPI_WaitFifoStateUntilTimeout+0xce>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2140      	movs	r1, #64	; 0x40
 8008172:	438a      	bics	r2, r1
 8008174:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) {
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800817a:	2380      	movs	r3, #128	; 0x80
 800817c:	019b      	lsls	r3, r3, #6
 800817e:	429a      	cmp	r2, r3
 8008180:	d110      	bne.n	80081a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
          SPI_RESET_CRC(hspi);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4916      	ldr	r1, [pc, #88]	; (80081e8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800818e:	400a      	ands	r2, r1
 8008190:	601a      	str	r2, [r3, #0]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2180      	movs	r1, #128	; 0x80
 800819e:	0189      	lsls	r1, r1, #6
 80081a0:	430a      	orrs	r2, r1
 80081a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	225d      	movs	r2, #93	; 0x5d
 80081a8:	2101      	movs	r1, #1
 80081aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	225c      	movs	r2, #92	; 0x5c
 80081b0:	2100      	movs	r1, #0
 80081b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e010      	b.n	80081da <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in
       * disable loop procedure */
      if (count == 0U) {
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d101      	bne.n	80081c2 <SPI_WaitFifoStateUntilTimeout+0x11a>
        tmp_timeout = 0U;
 80081be:	2300      	movs	r3, #0
 80081c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	3b01      	subs	r3, #1
 80081c6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State) {
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	4013      	ands	r3, r2
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d18e      	bne.n	80080f6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	0018      	movs	r0, r3
 80081dc:	46bd      	mov	sp, r7
 80081de:	b00a      	add	sp, #40	; 0x28
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	46c0      	nop			; (mov r8, r8)
 80081e4:	20000000 	.word	0x20000000
 80081e8:	ffffdfff 	.word	0xffffdfff

080081ec <SPI_EndRxTxTransaction>:
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi,
                                                uint32_t Timeout,
                                                uint32_t Tickstart) {
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b086      	sub	sp, #24
 80081f0:	af02      	add	r7, sp, #8
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY,
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	23c0      	movs	r3, #192	; 0xc0
 80081fc:	0159      	lsls	r1, r3, #5
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	0013      	movs	r3, r2
 8008206:	2200      	movs	r2, #0
 8008208:	f7ff ff4e 	bl	80080a8 <SPI_WaitFifoStateUntilTimeout>
 800820c:	1e03      	subs	r3, r0, #0
 800820e:	d007      	beq.n	8008220 <SPI_EndRxTxTransaction+0x34>
                                    Timeout, Tickstart) != HAL_OK) {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008214:	2220      	movs	r2, #32
 8008216:	431a      	orrs	r2, r3
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800821c:	2303      	movs	r3, #3
 800821e:	e027      	b.n	8008270 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout,
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	0013      	movs	r3, r2
 800822a:	2200      	movs	r2, #0
 800822c:	2180      	movs	r1, #128	; 0x80
 800822e:	f7ff fead 	bl	8007f8c <SPI_WaitFlagStateUntilTimeout>
 8008232:	1e03      	subs	r3, r0, #0
 8008234:	d007      	beq.n	8008246 <SPI_EndRxTxTransaction+0x5a>
                                    Tickstart) != HAL_OK) {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800823a:	2220      	movs	r2, #32
 800823c:	431a      	orrs	r2, r3
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008242:	2303      	movs	r3, #3
 8008244:	e014      	b.n	8008270 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY,
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	23c0      	movs	r3, #192	; 0xc0
 800824a:	00d9      	lsls	r1, r3, #3
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	0013      	movs	r3, r2
 8008254:	2200      	movs	r2, #0
 8008256:	f7ff ff27 	bl	80080a8 <SPI_WaitFifoStateUntilTimeout>
 800825a:	1e03      	subs	r3, r0, #0
 800825c:	d007      	beq.n	800826e <SPI_EndRxTxTransaction+0x82>
                                    Timeout, Tickstart) != HAL_OK) {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008262:	2220      	movs	r2, #32
 8008264:	431a      	orrs	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800826a:	2303      	movs	r3, #3
 800826c:	e000      	b.n	8008270 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	0018      	movs	r0, r3
 8008272:	46bd      	mov	sp, r7
 8008274:	b004      	add	sp, #16
 8008276:	bd80      	pop	{r7, pc}

08008278 <HAL_TIM_Base_Init>:
 * readonly in center aligned mode. Ex: call @ref HAL_TIM_Base_DeInit() before
 * HAL_TIM_Base_Init()
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim) {
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL) {
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d101      	bne.n	800828a <HAL_TIM_Base_Init+0x12>
    return HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	e04a      	b.n	8008320 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET) {
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	223d      	movs	r2, #61	; 0x3d
 800828e:	5c9b      	ldrb	r3, [r3, r2]
 8008290:	b2db      	uxtb	r3, r3
 8008292:	2b00      	cmp	r3, #0
 8008294:	d107      	bne.n	80082a6 <HAL_TIM_Base_Init+0x2e>
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	223c      	movs	r2, #60	; 0x3c
 800829a:	2100      	movs	r1, #0
 800829c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	0018      	movs	r0, r3
 80082a2:	f7fd f815 	bl	80052d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	223d      	movs	r2, #61	; 0x3d
 80082aa:	2102      	movs	r1, #2
 80082ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	3304      	adds	r3, #4
 80082b6:	0019      	movs	r1, r3
 80082b8:	0010      	movs	r0, r2
 80082ba:	f000 fadd 	bl	8008878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2248      	movs	r2, #72	; 0x48
 80082c2:	2101      	movs	r1, #1
 80082c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	223e      	movs	r2, #62	; 0x3e
 80082ca:	2101      	movs	r1, #1
 80082cc:	5499      	strb	r1, [r3, r2]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	223f      	movs	r2, #63	; 0x3f
 80082d2:	2101      	movs	r1, #1
 80082d4:	5499      	strb	r1, [r3, r2]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2240      	movs	r2, #64	; 0x40
 80082da:	2101      	movs	r1, #1
 80082dc:	5499      	strb	r1, [r3, r2]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2241      	movs	r2, #65	; 0x41
 80082e2:	2101      	movs	r1, #1
 80082e4:	5499      	strb	r1, [r3, r2]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2242      	movs	r2, #66	; 0x42
 80082ea:	2101      	movs	r1, #1
 80082ec:	5499      	strb	r1, [r3, r2]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2243      	movs	r2, #67	; 0x43
 80082f2:	2101      	movs	r1, #1
 80082f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2244      	movs	r2, #68	; 0x44
 80082fa:	2101      	movs	r1, #1
 80082fc:	5499      	strb	r1, [r3, r2]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2245      	movs	r2, #69	; 0x45
 8008302:	2101      	movs	r1, #1
 8008304:	5499      	strb	r1, [r3, r2]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2246      	movs	r2, #70	; 0x46
 800830a:	2101      	movs	r1, #1
 800830c:	5499      	strb	r1, [r3, r2]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2247      	movs	r2, #71	; 0x47
 8008312:	2101      	movs	r1, #1
 8008314:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	223d      	movs	r2, #61	; 0x3d
 800831a:	2101      	movs	r1, #1
 800831c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	0018      	movs	r0, r3
 8008322:	46bd      	mov	sp, r7
 8008324:	b002      	add	sp, #8
 8008326:	bd80      	pop	{r7, pc}

08008328 <HAL_TIM_Base_Start_IT>:
/**
 * @brief  Starts the TIM Base generation in interrupt mode.
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim) {
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY) {
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	223d      	movs	r2, #61	; 0x3d
 8008334:	5c9b      	ldrb	r3, [r3, r2]
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2b01      	cmp	r3, #1
 800833a:	d001      	beq.n	8008340 <HAL_TIM_Base_Start_IT+0x18>
    return HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	e042      	b.n	80083c6 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	223d      	movs	r2, #61	; 0x3d
 8008344:	2102      	movs	r1, #2
 8008346:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68da      	ldr	r2, [r3, #12]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2101      	movs	r1, #1
 8008354:	430a      	orrs	r2, r1
 8008356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically
   * done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance)) {
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a1c      	ldr	r2, [pc, #112]	; (80083d0 <HAL_TIM_Base_Start_IT+0xa8>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d00f      	beq.n	8008382 <HAL_TIM_Base_Start_IT+0x5a>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	2380      	movs	r3, #128	; 0x80
 8008368:	05db      	lsls	r3, r3, #23
 800836a:	429a      	cmp	r2, r3
 800836c:	d009      	beq.n	8008382 <HAL_TIM_Base_Start_IT+0x5a>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a18      	ldr	r2, [pc, #96]	; (80083d4 <HAL_TIM_Base_Start_IT+0xac>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d004      	beq.n	8008382 <HAL_TIM_Base_Start_IT+0x5a>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a16      	ldr	r2, [pc, #88]	; (80083d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d116      	bne.n	80083b0 <HAL_TIM_Base_Start_IT+0x88>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	4a14      	ldr	r2, [pc, #80]	; (80083dc <HAL_TIM_Base_Start_IT+0xb4>)
 800838a:	4013      	ands	r3, r2
 800838c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2b06      	cmp	r3, #6
 8008392:	d016      	beq.n	80083c2 <HAL_TIM_Base_Start_IT+0x9a>
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	2380      	movs	r3, #128	; 0x80
 8008398:	025b      	lsls	r3, r3, #9
 800839a:	429a      	cmp	r2, r3
 800839c:	d011      	beq.n	80083c2 <HAL_TIM_Base_Start_IT+0x9a>
      __HAL_TIM_ENABLE(htim);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2101      	movs	r1, #1
 80083aa:	430a      	orrs	r2, r1
 80083ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 80083ae:	e008      	b.n	80083c2 <HAL_TIM_Base_Start_IT+0x9a>
    }
  } else {
    __HAL_TIM_ENABLE(htim);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2101      	movs	r1, #1
 80083bc:	430a      	orrs	r2, r1
 80083be:	601a      	str	r2, [r3, #0]
 80083c0:	e000      	b.n	80083c4 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 80083c2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	0018      	movs	r0, r3
 80083c8:	46bd      	mov	sp, r7
 80083ca:	b004      	add	sp, #16
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	46c0      	nop			; (mov r8, r8)
 80083d0:	40012c00 	.word	0x40012c00
 80083d4:	40000400 	.word	0x40000400
 80083d8:	40014000 	.word	0x40014000
 80083dc:	00010007 	.word	0x00010007

080083e0 <HAL_TIM_Base_Stop_IT>:
/**
 * @brief  Stops the TIM Base generation in interrupt mode.
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim) {
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	68da      	ldr	r2, [r3, #12]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2101      	movs	r1, #1
 80083f4:	438a      	bics	r2, r1
 80083f6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	6a1b      	ldr	r3, [r3, #32]
 80083fe:	4a0d      	ldr	r2, [pc, #52]	; (8008434 <HAL_TIM_Base_Stop_IT+0x54>)
 8008400:	4013      	ands	r3, r2
 8008402:	d10d      	bne.n	8008420 <HAL_TIM_Base_Stop_IT+0x40>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6a1b      	ldr	r3, [r3, #32]
 800840a:	4a0b      	ldr	r2, [pc, #44]	; (8008438 <HAL_TIM_Base_Stop_IT+0x58>)
 800840c:	4013      	ands	r3, r2
 800840e:	d107      	bne.n	8008420 <HAL_TIM_Base_Stop_IT+0x40>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2101      	movs	r1, #1
 800841c:	438a      	bics	r2, r1
 800841e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	223d      	movs	r2, #61	; 0x3d
 8008424:	2101      	movs	r1, #1
 8008426:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	0018      	movs	r0, r3
 800842c:	46bd      	mov	sp, r7
 800842e:	b002      	add	sp, #8
 8008430:	bd80      	pop	{r7, pc}
 8008432:	46c0      	nop			; (mov r8, r8)
 8008434:	00001111 	.word	0x00001111
 8008438:	00000444 	.word	0x00000444

0800843c <HAL_TIM_IRQHandler>:
/**
 * @brief  This function handles TIM interrupts requests.
 * @param  htim TIM  handle
 * @retval None
 */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim) {
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET) {
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	2202      	movs	r2, #2
 800844c:	4013      	ands	r3, r2
 800844e:	2b02      	cmp	r3, #2
 8008450:	d124      	bne.n	800849c <HAL_TIM_IRQHandler+0x60>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET) {
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	2202      	movs	r2, #2
 800845a:	4013      	ands	r3, r2
 800845c:	2b02      	cmp	r3, #2
 800845e:	d11d      	bne.n	800849c <HAL_TIM_IRQHandler+0x60>
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2203      	movs	r2, #3
 8008466:	4252      	negs	r2, r2
 8008468:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2201      	movs	r2, #1
 800846e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U) {
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	2203      	movs	r2, #3
 8008478:	4013      	ands	r3, r2
 800847a:	d004      	beq.n	8008486 <HAL_TIM_IRQHandler+0x4a>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	0018      	movs	r0, r3
 8008480:	f000 f9e2 	bl	8008848 <HAL_TIM_IC_CaptureCallback>
 8008484:	e007      	b.n	8008496 <HAL_TIM_IRQHandler+0x5a>
        else {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	0018      	movs	r0, r3
 800848a:	f000 f9d5 	bl	8008838 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	0018      	movs	r0, r3
 8008492:	f000 f9e1 	bl	8008858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET) {
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	2204      	movs	r2, #4
 80084a4:	4013      	ands	r3, r2
 80084a6:	2b04      	cmp	r3, #4
 80084a8:	d125      	bne.n	80084f6 <HAL_TIM_IRQHandler+0xba>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET) {
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	2204      	movs	r2, #4
 80084b2:	4013      	ands	r3, r2
 80084b4:	2b04      	cmp	r3, #4
 80084b6:	d11e      	bne.n	80084f6 <HAL_TIM_IRQHandler+0xba>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2205      	movs	r2, #5
 80084be:	4252      	negs	r2, r2
 80084c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2202      	movs	r2, #2
 80084c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U) {
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	699a      	ldr	r2, [r3, #24]
 80084ce:	23c0      	movs	r3, #192	; 0xc0
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	4013      	ands	r3, r2
 80084d4:	d004      	beq.n	80084e0 <HAL_TIM_IRQHandler+0xa4>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	0018      	movs	r0, r3
 80084da:	f000 f9b5 	bl	8008848 <HAL_TIM_IC_CaptureCallback>
 80084de:	e007      	b.n	80084f0 <HAL_TIM_IRQHandler+0xb4>
      else {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	0018      	movs	r0, r3
 80084e4:	f000 f9a8 	bl	8008838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	0018      	movs	r0, r3
 80084ec:	f000 f9b4 	bl	8008858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET) {
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	2208      	movs	r2, #8
 80084fe:	4013      	ands	r3, r2
 8008500:	2b08      	cmp	r3, #8
 8008502:	d124      	bne.n	800854e <HAL_TIM_IRQHandler+0x112>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET) {
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	2208      	movs	r2, #8
 800850c:	4013      	ands	r3, r2
 800850e:	2b08      	cmp	r3, #8
 8008510:	d11d      	bne.n	800854e <HAL_TIM_IRQHandler+0x112>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2209      	movs	r2, #9
 8008518:	4252      	negs	r2, r2
 800851a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2204      	movs	r2, #4
 8008520:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U) {
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	69db      	ldr	r3, [r3, #28]
 8008528:	2203      	movs	r2, #3
 800852a:	4013      	ands	r3, r2
 800852c:	d004      	beq.n	8008538 <HAL_TIM_IRQHandler+0xfc>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	0018      	movs	r0, r3
 8008532:	f000 f989 	bl	8008848 <HAL_TIM_IC_CaptureCallback>
 8008536:	e007      	b.n	8008548 <HAL_TIM_IRQHandler+0x10c>
      else {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	0018      	movs	r0, r3
 800853c:	f000 f97c 	bl	8008838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	0018      	movs	r0, r3
 8008544:	f000 f988 	bl	8008858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET) {
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	2210      	movs	r2, #16
 8008556:	4013      	ands	r3, r2
 8008558:	2b10      	cmp	r3, #16
 800855a:	d125      	bne.n	80085a8 <HAL_TIM_IRQHandler+0x16c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET) {
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	2210      	movs	r2, #16
 8008564:	4013      	ands	r3, r2
 8008566:	2b10      	cmp	r3, #16
 8008568:	d11e      	bne.n	80085a8 <HAL_TIM_IRQHandler+0x16c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2211      	movs	r2, #17
 8008570:	4252      	negs	r2, r2
 8008572:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2208      	movs	r2, #8
 8008578:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U) {
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	69da      	ldr	r2, [r3, #28]
 8008580:	23c0      	movs	r3, #192	; 0xc0
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4013      	ands	r3, r2
 8008586:	d004      	beq.n	8008592 <HAL_TIM_IRQHandler+0x156>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	0018      	movs	r0, r3
 800858c:	f000 f95c 	bl	8008848 <HAL_TIM_IC_CaptureCallback>
 8008590:	e007      	b.n	80085a2 <HAL_TIM_IRQHandler+0x166>
      else {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	0018      	movs	r0, r3
 8008596:	f000 f94f 	bl	8008838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	0018      	movs	r0, r3
 800859e:	f000 f95b 	bl	8008858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET) {
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	2201      	movs	r2, #1
 80085b0:	4013      	ands	r3, r2
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d10f      	bne.n	80085d6 <HAL_TIM_IRQHandler+0x19a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET) {
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	2201      	movs	r2, #1
 80085be:	4013      	ands	r3, r2
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d108      	bne.n	80085d6 <HAL_TIM_IRQHandler+0x19a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2202      	movs	r2, #2
 80085ca:	4252      	negs	r2, r2
 80085cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	0018      	movs	r0, r3
 80085d2:	f7fb fe7d 	bl	80042d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET) {
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	2280      	movs	r2, #128	; 0x80
 80085de:	4013      	ands	r3, r2
 80085e0:	2b80      	cmp	r3, #128	; 0x80
 80085e2:	d10f      	bne.n	8008604 <HAL_TIM_IRQHandler+0x1c8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET) {
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	2280      	movs	r2, #128	; 0x80
 80085ec:	4013      	ands	r3, r2
 80085ee:	2b80      	cmp	r3, #128	; 0x80
 80085f0:	d108      	bne.n	8008604 <HAL_TIM_IRQHandler+0x1c8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2281      	movs	r2, #129	; 0x81
 80085f8:	4252      	negs	r2, r2
 80085fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	0018      	movs	r0, r3
 8008600:	f000 facc 	bl	8008b9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET) {
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	691a      	ldr	r2, [r3, #16]
 800860a:	2380      	movs	r3, #128	; 0x80
 800860c:	005b      	lsls	r3, r3, #1
 800860e:	401a      	ands	r2, r3
 8008610:	2380      	movs	r3, #128	; 0x80
 8008612:	005b      	lsls	r3, r3, #1
 8008614:	429a      	cmp	r2, r3
 8008616:	d10e      	bne.n	8008636 <HAL_TIM_IRQHandler+0x1fa>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET) {
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	2280      	movs	r2, #128	; 0x80
 8008620:	4013      	ands	r3, r2
 8008622:	2b80      	cmp	r3, #128	; 0x80
 8008624:	d107      	bne.n	8008636 <HAL_TIM_IRQHandler+0x1fa>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a1c      	ldr	r2, [pc, #112]	; (800869c <HAL_TIM_IRQHandler+0x260>)
 800862c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	0018      	movs	r0, r3
 8008632:	f000 fabb 	bl	8008bac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET) {
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	2240      	movs	r2, #64	; 0x40
 800863e:	4013      	ands	r3, r2
 8008640:	2b40      	cmp	r3, #64	; 0x40
 8008642:	d10f      	bne.n	8008664 <HAL_TIM_IRQHandler+0x228>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET) {
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	2240      	movs	r2, #64	; 0x40
 800864c:	4013      	ands	r3, r2
 800864e:	2b40      	cmp	r3, #64	; 0x40
 8008650:	d108      	bne.n	8008664 <HAL_TIM_IRQHandler+0x228>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2241      	movs	r2, #65	; 0x41
 8008658:	4252      	negs	r2, r2
 800865a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	0018      	movs	r0, r3
 8008660:	f000 f902 	bl	8008868 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET) {
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	2220      	movs	r2, #32
 800866c:	4013      	ands	r3, r2
 800866e:	2b20      	cmp	r3, #32
 8008670:	d10f      	bne.n	8008692 <HAL_TIM_IRQHandler+0x256>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET) {
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	2220      	movs	r2, #32
 800867a:	4013      	ands	r3, r2
 800867c:	2b20      	cmp	r3, #32
 800867e:	d108      	bne.n	8008692 <HAL_TIM_IRQHandler+0x256>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2221      	movs	r2, #33	; 0x21
 8008686:	4252      	negs	r2, r2
 8008688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	0018      	movs	r0, r3
 800868e:	f000 fa7d 	bl	8008b8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008692:	46c0      	nop			; (mov r8, r8)
 8008694:	46bd      	mov	sp, r7
 8008696:	b002      	add	sp, #8
 8008698:	bd80      	pop	{r7, pc}
 800869a:	46c0      	nop			; (mov r8, r8)
 800869c:	fffffeff 	.word	0xfffffeff

080086a0 <HAL_TIM_ConfigClockSource>:
 *         contains the clock source information for the TIM peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef
HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim,
                          TIM_ClockConfigTypeDef *sClockSourceConfig) {
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	223c      	movs	r2, #60	; 0x3c
 80086ae:	5c9b      	ldrb	r3, [r3, r2]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d101      	bne.n	80086b8 <HAL_TIM_ConfigClockSource+0x18>
 80086b4:	2302      	movs	r3, #2
 80086b6:	e0b7      	b.n	8008828 <HAL_TIM_ConfigClockSource+0x188>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	223c      	movs	r2, #60	; 0x3c
 80086bc:	2101      	movs	r1, #1
 80086be:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	223d      	movs	r2, #61	; 0x3d
 80086c4:	2102      	movs	r1, #2
 80086c6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	4a57      	ldr	r2, [pc, #348]	; (8008830 <HAL_TIM_ConfigClockSource+0x190>)
 80086d4:	4013      	ands	r3, r2
 80086d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	4a56      	ldr	r2, [pc, #344]	; (8008834 <HAL_TIM_ConfigClockSource+0x194>)
 80086dc:	4013      	ands	r3, r2
 80086de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource) {
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2280      	movs	r2, #128	; 0x80
 80086ee:	0192      	lsls	r2, r2, #6
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d040      	beq.n	8008776 <HAL_TIM_ConfigClockSource+0xd6>
 80086f4:	2280      	movs	r2, #128	; 0x80
 80086f6:	0192      	lsls	r2, r2, #6
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d900      	bls.n	80086fe <HAL_TIM_ConfigClockSource+0x5e>
 80086fc:	e088      	b.n	8008810 <HAL_TIM_ConfigClockSource+0x170>
 80086fe:	2280      	movs	r2, #128	; 0x80
 8008700:	0152      	lsls	r2, r2, #5
 8008702:	4293      	cmp	r3, r2
 8008704:	d100      	bne.n	8008708 <HAL_TIM_ConfigClockSource+0x68>
 8008706:	e085      	b.n	8008814 <HAL_TIM_ConfigClockSource+0x174>
 8008708:	2280      	movs	r2, #128	; 0x80
 800870a:	0152      	lsls	r2, r2, #5
 800870c:	4293      	cmp	r3, r2
 800870e:	d900      	bls.n	8008712 <HAL_TIM_ConfigClockSource+0x72>
 8008710:	e07e      	b.n	8008810 <HAL_TIM_ConfigClockSource+0x170>
 8008712:	2b70      	cmp	r3, #112	; 0x70
 8008714:	d018      	beq.n	8008748 <HAL_TIM_ConfigClockSource+0xa8>
 8008716:	d900      	bls.n	800871a <HAL_TIM_ConfigClockSource+0x7a>
 8008718:	e07a      	b.n	8008810 <HAL_TIM_ConfigClockSource+0x170>
 800871a:	2b60      	cmp	r3, #96	; 0x60
 800871c:	d04f      	beq.n	80087be <HAL_TIM_ConfigClockSource+0x11e>
 800871e:	d900      	bls.n	8008722 <HAL_TIM_ConfigClockSource+0x82>
 8008720:	e076      	b.n	8008810 <HAL_TIM_ConfigClockSource+0x170>
 8008722:	2b50      	cmp	r3, #80	; 0x50
 8008724:	d03b      	beq.n	800879e <HAL_TIM_ConfigClockSource+0xfe>
 8008726:	d900      	bls.n	800872a <HAL_TIM_ConfigClockSource+0x8a>
 8008728:	e072      	b.n	8008810 <HAL_TIM_ConfigClockSource+0x170>
 800872a:	2b40      	cmp	r3, #64	; 0x40
 800872c:	d057      	beq.n	80087de <HAL_TIM_ConfigClockSource+0x13e>
 800872e:	d900      	bls.n	8008732 <HAL_TIM_ConfigClockSource+0x92>
 8008730:	e06e      	b.n	8008810 <HAL_TIM_ConfigClockSource+0x170>
 8008732:	2b30      	cmp	r3, #48	; 0x30
 8008734:	d063      	beq.n	80087fe <HAL_TIM_ConfigClockSource+0x15e>
 8008736:	d86b      	bhi.n	8008810 <HAL_TIM_ConfigClockSource+0x170>
 8008738:	2b20      	cmp	r3, #32
 800873a:	d060      	beq.n	80087fe <HAL_TIM_ConfigClockSource+0x15e>
 800873c:	d868      	bhi.n	8008810 <HAL_TIM_ConfigClockSource+0x170>
 800873e:	2b00      	cmp	r3, #0
 8008740:	d05d      	beq.n	80087fe <HAL_TIM_ConfigClockSource+0x15e>
 8008742:	2b10      	cmp	r3, #16
 8008744:	d05b      	beq.n	80087fe <HAL_TIM_ConfigClockSource+0x15e>
    TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
    break;
  }

  default:
    break;
 8008746:	e063      	b.n	8008810 <HAL_TIM_ConfigClockSource+0x170>
    TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6818      	ldr	r0, [r3, #0]
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	6899      	ldr	r1, [r3, #8]
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	685a      	ldr	r2, [r3, #4]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	f000 f98a 	bl	8008a70 <TIM_ETR_SetConfig>
    tmpsmcr = htim->Instance->SMCR;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	60fb      	str	r3, [r7, #12]
    tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2277      	movs	r2, #119	; 0x77
 8008768:	4313      	orrs	r3, r2
 800876a:	60fb      	str	r3, [r7, #12]
    htim->Instance->SMCR = tmpsmcr;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	609a      	str	r2, [r3, #8]
    break;
 8008774:	e04f      	b.n	8008816 <HAL_TIM_ConfigClockSource+0x176>
    TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6818      	ldr	r0, [r3, #0]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	6899      	ldr	r1, [r3, #8]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	685a      	ldr	r2, [r3, #4]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	f000 f973 	bl	8008a70 <TIM_ETR_SetConfig>
    htim->Instance->SMCR |= TIM_SMCR_ECE;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	689a      	ldr	r2, [r3, #8]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2180      	movs	r1, #128	; 0x80
 8008796:	01c9      	lsls	r1, r1, #7
 8008798:	430a      	orrs	r2, r1
 800879a:	609a      	str	r2, [r3, #8]
    break;
 800879c:	e03b      	b.n	8008816 <HAL_TIM_ConfigClockSource+0x176>
    TIM_TI1_ConfigInputStage(htim->Instance, sClockSourceConfig->ClockPolarity,
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6818      	ldr	r0, [r3, #0]
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	6859      	ldr	r1, [r3, #4]
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	001a      	movs	r2, r3
 80087ac:	f000 f8e4 	bl	8008978 <TIM_TI1_ConfigInputStage>
    TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2150      	movs	r1, #80	; 0x50
 80087b6:	0018      	movs	r0, r3
 80087b8:	f000 f93e 	bl	8008a38 <TIM_ITRx_SetConfig>
    break;
 80087bc:	e02b      	b.n	8008816 <HAL_TIM_ConfigClockSource+0x176>
    TIM_TI2_ConfigInputStage(htim->Instance, sClockSourceConfig->ClockPolarity,
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6818      	ldr	r0, [r3, #0]
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	6859      	ldr	r1, [r3, #4]
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	001a      	movs	r2, r3
 80087cc:	f000 f902 	bl	80089d4 <TIM_TI2_ConfigInputStage>
    TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2160      	movs	r1, #96	; 0x60
 80087d6:	0018      	movs	r0, r3
 80087d8:	f000 f92e 	bl	8008a38 <TIM_ITRx_SetConfig>
    break;
 80087dc:	e01b      	b.n	8008816 <HAL_TIM_ConfigClockSource+0x176>
    TIM_TI1_ConfigInputStage(htim->Instance, sClockSourceConfig->ClockPolarity,
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6818      	ldr	r0, [r3, #0]
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	6859      	ldr	r1, [r3, #4]
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	001a      	movs	r2, r3
 80087ec:	f000 f8c4 	bl	8008978 <TIM_TI1_ConfigInputStage>
    TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2140      	movs	r1, #64	; 0x40
 80087f6:	0018      	movs	r0, r3
 80087f8:	f000 f91e 	bl	8008a38 <TIM_ITRx_SetConfig>
    break;
 80087fc:	e00b      	b.n	8008816 <HAL_TIM_ConfigClockSource+0x176>
    TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	0019      	movs	r1, r3
 8008808:	0010      	movs	r0, r2
 800880a:	f000 f915 	bl	8008a38 <TIM_ITRx_SetConfig>
    break;
 800880e:	e002      	b.n	8008816 <HAL_TIM_ConfigClockSource+0x176>
    break;
 8008810:	46c0      	nop			; (mov r8, r8)
 8008812:	e000      	b.n	8008816 <HAL_TIM_ConfigClockSource+0x176>
    break;
 8008814:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	223d      	movs	r2, #61	; 0x3d
 800881a:	2101      	movs	r1, #1
 800881c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	223c      	movs	r2, #60	; 0x3c
 8008822:	2100      	movs	r1, #0
 8008824:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	0018      	movs	r0, r3
 800882a:	46bd      	mov	sp, r7
 800882c:	b004      	add	sp, #16
 800882e:	bd80      	pop	{r7, pc}
 8008830:	ffceff88 	.word	0xffceff88
 8008834:	ffff00ff 	.word	0xffff00ff

08008838 <HAL_TIM_OC_DelayElapsedCallback>:
/**
 * @brief  Output Compare callback in non-blocking mode
 * @param  htim TIM OC handle
 * @retval None
 */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user
     file
   */
}
 8008840:	46c0      	nop			; (mov r8, r8)
 8008842:	46bd      	mov	sp, r7
 8008844:	b002      	add	sp, #8
 8008846:	bd80      	pop	{r7, pc}

08008848 <HAL_TIM_IC_CaptureCallback>:
/**
 * @brief  Input Capture callback in non-blocking mode
 * @param  htim TIM IC handle
 * @retval None
 */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008850:	46c0      	nop			; (mov r8, r8)
 8008852:	46bd      	mov	sp, r7
 8008854:	b002      	add	sp, #8
 8008856:	bd80      	pop	{r7, pc}

08008858 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
 * @brief  PWM Pulse finished callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the
     user file
   */
}
 8008860:	46c0      	nop			; (mov r8, r8)
 8008862:	46bd      	mov	sp, r7
 8008864:	b002      	add	sp, #8
 8008866:	bd80      	pop	{r7, pc}

08008868 <HAL_TIM_TriggerCallback>:
/**
 * @brief  Hall Trigger detection callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim) {
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008870:	46c0      	nop			; (mov r8, r8)
 8008872:	46bd      	mov	sp, r7
 8008874:	b002      	add	sp, #8
 8008876:	bd80      	pop	{r7, pc}

08008878 <TIM_Base_SetConfig>:
 * @brief  Time Base configuration
 * @param  TIMx TIM peripheral
 * @param  Structure TIM Base configuration structure
 * @retval None
 */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure) {
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx)) {
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a34      	ldr	r2, [pc, #208]	; (800895c <TIM_Base_SetConfig+0xe4>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d008      	beq.n	80088a2 <TIM_Base_SetConfig+0x2a>
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	2380      	movs	r3, #128	; 0x80
 8008894:	05db      	lsls	r3, r3, #23
 8008896:	429a      	cmp	r2, r3
 8008898:	d003      	beq.n	80088a2 <TIM_Base_SetConfig+0x2a>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a30      	ldr	r2, [pc, #192]	; (8008960 <TIM_Base_SetConfig+0xe8>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d108      	bne.n	80088b4 <TIM_Base_SetConfig+0x3c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2270      	movs	r2, #112	; 0x70
 80088a6:	4393      	bics	r3, r2
 80088a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx)) {
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a29      	ldr	r2, [pc, #164]	; (800895c <TIM_Base_SetConfig+0xe4>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d018      	beq.n	80088ee <TIM_Base_SetConfig+0x76>
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	2380      	movs	r3, #128	; 0x80
 80088c0:	05db      	lsls	r3, r3, #23
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d013      	beq.n	80088ee <TIM_Base_SetConfig+0x76>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4a25      	ldr	r2, [pc, #148]	; (8008960 <TIM_Base_SetConfig+0xe8>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d00f      	beq.n	80088ee <TIM_Base_SetConfig+0x76>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4a24      	ldr	r2, [pc, #144]	; (8008964 <TIM_Base_SetConfig+0xec>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d00b      	beq.n	80088ee <TIM_Base_SetConfig+0x76>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a23      	ldr	r2, [pc, #140]	; (8008968 <TIM_Base_SetConfig+0xf0>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d007      	beq.n	80088ee <TIM_Base_SetConfig+0x76>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4a22      	ldr	r2, [pc, #136]	; (800896c <TIM_Base_SetConfig+0xf4>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d003      	beq.n	80088ee <TIM_Base_SetConfig+0x76>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4a21      	ldr	r2, [pc, #132]	; (8008970 <TIM_Base_SetConfig+0xf8>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d108      	bne.n	8008900 <TIM_Base_SetConfig+0x88>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	4a20      	ldr	r2, [pc, #128]	; (8008974 <TIM_Base_SetConfig+0xfc>)
 80088f2:	4013      	ands	r3, r2
 80088f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2280      	movs	r2, #128	; 0x80
 8008904:	4393      	bics	r3, r2
 8008906:	001a      	movs	r2, r3
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	695b      	ldr	r3, [r3, #20]
 800890c:	4313      	orrs	r3, r2
 800890e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period;
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	689a      	ldr	r2, [r3, #8]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx)) {
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a0c      	ldr	r2, [pc, #48]	; (800895c <TIM_Base_SetConfig+0xe4>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d00b      	beq.n	8008946 <TIM_Base_SetConfig+0xce>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a0d      	ldr	r2, [pc, #52]	; (8008968 <TIM_Base_SetConfig+0xf0>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d007      	beq.n	8008946 <TIM_Base_SetConfig+0xce>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a0c      	ldr	r2, [pc, #48]	; (800896c <TIM_Base_SetConfig+0xf4>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d003      	beq.n	8008946 <TIM_Base_SetConfig+0xce>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a0b      	ldr	r2, [pc, #44]	; (8008970 <TIM_Base_SetConfig+0xf8>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d103      	bne.n	800894e <TIM_Base_SetConfig+0xd6>
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	691a      	ldr	r2, [r3, #16]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	615a      	str	r2, [r3, #20]
}
 8008954:	46c0      	nop			; (mov r8, r8)
 8008956:	46bd      	mov	sp, r7
 8008958:	b004      	add	sp, #16
 800895a:	bd80      	pop	{r7, pc}
 800895c:	40012c00 	.word	0x40012c00
 8008960:	40000400 	.word	0x40000400
 8008964:	40002000 	.word	0x40002000
 8008968:	40014000 	.word	0x40014000
 800896c:	40014400 	.word	0x40014400
 8008970:	40014800 	.word	0x40014800
 8008974:	fffffcff 	.word	0xfffffcff

08008978 <TIM_TI1_ConfigInputStage>:
 * @param  TIM_ICFilter Specifies the Input Capture Filter.
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity,
                                     uint32_t TIM_ICFilter) {
 8008978:	b580      	push	{r7, lr}
 800897a:	b086      	sub	sp, #24
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6a1b      	ldr	r3, [r3, #32]
 8008988:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6a1b      	ldr	r3, [r3, #32]
 800898e:	2201      	movs	r2, #1
 8008990:	4393      	bics	r3, r2
 8008992:	001a      	movs	r2, r3
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	22f0      	movs	r2, #240	; 0xf0
 80089a2:	4393      	bics	r3, r2
 80089a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	011b      	lsls	r3, r3, #4
 80089aa:	693a      	ldr	r2, [r7, #16]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	220a      	movs	r2, #10
 80089b4:	4393      	bics	r3, r2
 80089b6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089b8:	697a      	ldr	r2, [r7, #20]
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	4313      	orrs	r3, r2
 80089be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	693a      	ldr	r2, [r7, #16]
 80089c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	697a      	ldr	r2, [r7, #20]
 80089ca:	621a      	str	r2, [r3, #32]
}
 80089cc:	46c0      	nop			; (mov r8, r8)
 80089ce:	46bd      	mov	sp, r7
 80089d0:	b006      	add	sp, #24
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <TIM_TI2_ConfigInputStage>:
 * @param  TIM_ICFilter Specifies the Input Capture Filter.
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity,
                                     uint32_t TIM_ICFilter) {
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b086      	sub	sp, #24
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6a1b      	ldr	r3, [r3, #32]
 80089e4:	2210      	movs	r2, #16
 80089e6:	4393      	bics	r3, r2
 80089e8:	001a      	movs	r2, r3
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	699b      	ldr	r3, [r3, #24]
 80089f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6a1b      	ldr	r3, [r3, #32]
 80089f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	4a0d      	ldr	r2, [pc, #52]	; (8008a34 <TIM_TI2_ConfigInputStage+0x60>)
 80089fe:	4013      	ands	r3, r2
 8008a00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	031b      	lsls	r3, r3, #12
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	22a0      	movs	r2, #160	; 0xa0
 8008a10:	4393      	bics	r3, r2
 8008a12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	011b      	lsls	r3, r3, #4
 8008a18:	693a      	ldr	r2, [r7, #16]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	697a      	ldr	r2, [r7, #20]
 8008a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	693a      	ldr	r2, [r7, #16]
 8008a28:	621a      	str	r2, [r3, #32]
}
 8008a2a:	46c0      	nop			; (mov r8, r8)
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	b006      	add	sp, #24
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	46c0      	nop			; (mov r8, r8)
 8008a34:	ffff0fff 	.word	0xffff0fff

08008a38 <TIM_ITRx_SetConfig>:
 *            @arg TIM_TS_TI1FP1: Filtered Timer Input 1
 *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
 *            @arg TIM_TS_ETRF: External Trigger input
 * @retval None
 */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource) {
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	4a08      	ldr	r2, [pc, #32]	; (8008a6c <TIM_ITRx_SetConfig+0x34>)
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a50:	683a      	ldr	r2, [r7, #0]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	2207      	movs	r2, #7
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	609a      	str	r2, [r3, #8]
}
 8008a62:	46c0      	nop			; (mov r8, r8)
 8008a64:	46bd      	mov	sp, r7
 8008a66:	b004      	add	sp, #16
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	46c0      	nop			; (mov r8, r8)
 8008a6c:	ffcfff8f 	.word	0xffcfff8f

08008a70 <TIM_ETR_SetConfig>:
 * @param  ExtTRGFilter External Trigger Filter.
 *          This parameter must be a value between 0x00 and 0x0F
 * @retval None
 */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter) {
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b086      	sub	sp, #24
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
 8008a7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	4a09      	ldr	r2, [pc, #36]	; (8008aac <TIM_ETR_SetConfig+0x3c>)
 8008a88:	4013      	ands	r3, r2
 8008a8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler |
                        (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	021a      	lsls	r2, r3, #8
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	431a      	orrs	r2, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler |
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	609a      	str	r2, [r3, #8]
}
 8008aa4:	46c0      	nop			; (mov r8, r8)
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	b006      	add	sp, #24
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	ffff00ff 	.word	0xffff00ff

08008ab0 <HAL_TIMEx_MasterConfigSynchronization>:
 *         mode.
 * @retval HAL status
 */
HAL_StatusTypeDef
HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                      TIM_MasterConfigTypeDef *sMasterConfig) {
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	223c      	movs	r2, #60	; 0x3c
 8008abe:	5c9b      	ldrb	r3, [r3, r2]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d101      	bne.n	8008ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ac4:	2302      	movs	r3, #2
 8008ac6:	e055      	b.n	8008b74 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	223c      	movs	r2, #60	; 0x3c
 8008acc:	2101      	movs	r1, #1
 8008ace:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	223d      	movs	r2, #61	; 0x3d
 8008ad4:	2102      	movs	r1, #2
 8008ad6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master
   * mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance)) {
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a23      	ldr	r2, [pc, #140]	; (8008b7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d108      	bne.n	8008b04 <HAL_TIMEx_MasterConfigSynchronization+0x54>
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	4a22      	ldr	r2, [pc, #136]	; (8008b80 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008af6:	4013      	ands	r3, r2
 8008af8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2270      	movs	r2, #112	; 0x70
 8008b08:	4393      	bics	r3, r2
 8008b0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |= sMasterConfig->MasterOutputTrigger;
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68fa      	ldr	r2, [r7, #12]
 8008b1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance)) {
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a16      	ldr	r2, [pc, #88]	; (8008b7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d00f      	beq.n	8008b48 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	2380      	movs	r3, #128	; 0x80
 8008b2e:	05db      	lsls	r3, r3, #23
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d009      	beq.n	8008b48 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a12      	ldr	r2, [pc, #72]	; (8008b84 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d004      	beq.n	8008b48 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a11      	ldr	r2, [pc, #68]	; (8008b88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d10c      	bne.n	8008b62 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	2280      	movs	r2, #128	; 0x80
 8008b4c:	4393      	bics	r3, r2
 8008b4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	223d      	movs	r2, #61	; 0x3d
 8008b66:	2101      	movs	r1, #1
 8008b68:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	223c      	movs	r2, #60	; 0x3c
 8008b6e:	2100      	movs	r1, #0
 8008b70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	0018      	movs	r0, r3
 8008b76:	46bd      	mov	sp, r7
 8008b78:	b004      	add	sp, #16
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	40012c00 	.word	0x40012c00
 8008b80:	ff0fffff 	.word	0xff0fffff
 8008b84:	40000400 	.word	0x40000400
 8008b88:	40014000 	.word	0x40014000

08008b8c <HAL_TIMEx_CommutCallback>:
/**
 * @brief  Hall commutation changed callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim) {
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b94:	46c0      	nop			; (mov r8, r8)
 8008b96:	46bd      	mov	sp, r7
 8008b98:	b002      	add	sp, #8
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <HAL_TIMEx_BreakCallback>:
/**
 * @brief  Hall Break detection callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim) {
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ba4:	46c0      	nop			; (mov r8, r8)
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	b002      	add	sp, #8
 8008baa:	bd80      	pop	{r7, pc}

08008bac <HAL_TIMEx_Break2Callback>:
/**
 * @brief  Hall Break2 detection callback in non blocking mode
 * @param  htim: TIM handle
 * @retval None
 */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim) {
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008bb4:	46c0      	nop			; (mov r8, r8)
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	b002      	add	sp, #8
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <HAL_UART_Init>:
 *        parameters in the UART_InitTypeDef and initialize the associated
 * handle.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL) {
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d101      	bne.n	8008bce <HAL_UART_Init+0x12>
    return HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e046      	b.n	8008c5c <HAL_UART_Init+0xa0>
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) ||
                 (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET) {
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2284      	movs	r2, #132	; 0x84
 8008bd2:	589b      	ldr	r3, [r3, r2]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d107      	bne.n	8008be8 <HAL_UART_Init+0x2c>
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2280      	movs	r2, #128	; 0x80
 8008bdc:	2100      	movs	r1, #0
 8008bde:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	0018      	movs	r0, r3
 8008be4:	f7fc fb98 	bl	8005318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2284      	movs	r2, #132	; 0x84
 8008bec:	2124      	movs	r1, #36	; 0x24
 8008bee:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2101      	movs	r1, #1
 8008bfc:	438a      	bics	r2, r1
 8008bfe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR) {
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	0018      	movs	r0, r3
 8008c04:	f000 fc7c 	bl	8009500 <UART_SetConfig>
 8008c08:	0003      	movs	r3, r0
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d101      	bne.n	8008c12 <HAL_UART_Init+0x56>
    return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e024      	b.n	8008c5c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT) {
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d003      	beq.n	8008c22 <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	0018      	movs	r0, r3
 8008c1e:	f000 ff4d 	bl	8009abc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	685a      	ldr	r2, [r3, #4]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	490d      	ldr	r1, [pc, #52]	; (8008c64 <HAL_UART_Init+0xa8>)
 8008c2e:	400a      	ands	r2, r1
 8008c30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3,
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	689a      	ldr	r2, [r3, #8]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	212a      	movs	r1, #42	; 0x2a
 8008c3e:	438a      	bics	r2, r1
 8008c40:	609a      	str	r2, [r3, #8]
            (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

  __HAL_UART_ENABLE(huart);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2101      	movs	r1, #1
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState
   * to Ready */
  return (UART_CheckIdleState(huart));
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	0018      	movs	r0, r3
 8008c56:	f000 ffe5 	bl	8009c24 <UART_CheckIdleState>
 8008c5a:	0003      	movs	r3, r0
}
 8008c5c:	0018      	movs	r0, r3
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	b002      	add	sp, #8
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	ffffb7ff 	.word	0xffffb7ff

08008c68 <HAL_UART_Transmit>:
 * @param Size    Amount of data elements (u8 or u16) to be sent.
 * @param Timeout Timeout duration.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData,
                                    uint16_t Size, uint32_t Timeout) {
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b08a      	sub	sp, #40	; 0x28
 8008c6c:	af02      	add	r7, sp, #8
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	603b      	str	r3, [r7, #0]
 8008c74:	1dbb      	adds	r3, r7, #6
 8008c76:	801a      	strh	r2, [r3, #0]
  uint8_t *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY) {
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2284      	movs	r2, #132	; 0x84
 8008c7c:	589b      	ldr	r3, [r3, r2]
 8008c7e:	2b20      	cmp	r3, #32
 8008c80:	d000      	beq.n	8008c84 <HAL_UART_Transmit+0x1c>
 8008c82:	e097      	b.n	8008db4 <HAL_UART_Transmit+0x14c>
    if ((pData == NULL) || (Size == 0U)) {
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d003      	beq.n	8008c92 <HAL_UART_Transmit+0x2a>
 8008c8a:	1dbb      	adds	r3, r7, #6
 8008c8c:	881b      	ldrh	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d101      	bne.n	8008c96 <HAL_UART_Transmit+0x2e>
      return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e08f      	b.n	8008db6 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input
       parameter should be aligned on a u16 frontier, as data to be filled into
       TDR will be handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) &&
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	689a      	ldr	r2, [r3, #8]
 8008c9a:	2380      	movs	r3, #128	; 0x80
 8008c9c:	015b      	lsls	r3, r3, #5
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d109      	bne.n	8008cb6 <HAL_UART_Transmit+0x4e>
        (huart->Init.Parity == UART_PARITY_NONE)) {
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	691b      	ldr	r3, [r3, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) &&
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d105      	bne.n	8008cb6 <HAL_UART_Transmit+0x4e>
      if ((((uint32_t)pData) & 1U) != 0U) {
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	2201      	movs	r2, #1
 8008cae:	4013      	ands	r3, r2
 8008cb0:	d001      	beq.n	8008cb6 <HAL_UART_Transmit+0x4e>
        return HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e07f      	b.n	8008db6 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2280      	movs	r2, #128	; 0x80
 8008cba:	5c9b      	ldrb	r3, [r3, r2]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d101      	bne.n	8008cc4 <HAL_UART_Transmit+0x5c>
 8008cc0:	2302      	movs	r3, #2
 8008cc2:	e078      	b.n	8008db6 <HAL_UART_Transmit+0x14e>
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2280      	movs	r2, #128	; 0x80
 8008cc8:	2101      	movs	r1, #1
 8008cca:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	228c      	movs	r2, #140	; 0x8c
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2284      	movs	r2, #132	; 0x84
 8008cd8:	2121      	movs	r1, #33	; 0x21
 8008cda:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008cdc:	f7fc fd10 	bl	8005700 <HAL_GetTick>
 8008ce0:	0003      	movs	r3, r0
 8008ce2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	1dba      	adds	r2, r7, #6
 8008ce8:	2154      	movs	r1, #84	; 0x54
 8008cea:	8812      	ldrh	r2, [r2, #0]
 8008cec:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	1dba      	adds	r2, r7, #6
 8008cf2:	2156      	movs	r1, #86	; 0x56
 8008cf4:	8812      	ldrh	r2, [r2, #0]
 8008cf6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a
     * uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) &&
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	689a      	ldr	r2, [r3, #8]
 8008cfc:	2380      	movs	r3, #128	; 0x80
 8008cfe:	015b      	lsls	r3, r3, #5
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d108      	bne.n	8008d16 <HAL_UART_Transmit+0xae>
        (huart->Init.Parity == UART_PARITY_NONE)) {
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	691b      	ldr	r3, [r3, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) &&
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d104      	bne.n	8008d16 <HAL_UART_Transmit+0xae>
      pdata8bits = NULL;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *)pData;
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	61bb      	str	r3, [r7, #24]
 8008d14:	e003      	b.n	8008d1e <HAL_UART_Transmit+0xb6>
    } else {
      pdata8bits = pData;
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2280      	movs	r2, #128	; 0x80
 8008d22:	2100      	movs	r1, #0
 8008d24:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U) {
 8008d26:	e02c      	b.n	8008d82 <HAL_UART_Transmit+0x11a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart,
 8008d28:	697a      	ldr	r2, [r7, #20]
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	9300      	str	r3, [sp, #0]
 8008d30:	0013      	movs	r3, r2
 8008d32:	2200      	movs	r2, #0
 8008d34:	2180      	movs	r1, #128	; 0x80
 8008d36:	f000 ffbf 	bl	8009cb8 <UART_WaitOnFlagUntilTimeout>
 8008d3a:	1e03      	subs	r3, r0, #0
 8008d3c:	d001      	beq.n	8008d42 <HAL_UART_Transmit+0xda>
                                      Timeout) != HAL_OK) {
        return HAL_TIMEOUT;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e039      	b.n	8008db6 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL) {
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d10b      	bne.n	8008d60 <HAL_UART_Transmit+0xf8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	881b      	ldrh	r3, [r3, #0]
 8008d4c:	001a      	movs	r2, r3
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	05d2      	lsls	r2, r2, #23
 8008d54:	0dd2      	lsrs	r2, r2, #23
 8008d56:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	3302      	adds	r3, #2
 8008d5c:	61bb      	str	r3, [r7, #24]
 8008d5e:	e007      	b.n	8008d70 <HAL_UART_Transmit+0x108>
      } else {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	781a      	ldrb	r2, [r3, #0]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2256      	movs	r2, #86	; 0x56
 8008d74:	5a9b      	ldrh	r3, [r3, r2]
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	b299      	uxth	r1, r3
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2256      	movs	r2, #86	; 0x56
 8008d80:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U) {
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2256      	movs	r2, #86	; 0x56
 8008d86:	5a9b      	ldrh	r3, [r3, r2]
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1cc      	bne.n	8008d28 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart,
 8008d8e:	697a      	ldr	r2, [r7, #20]
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	0013      	movs	r3, r2
 8008d98:	2200      	movs	r2, #0
 8008d9a:	2140      	movs	r1, #64	; 0x40
 8008d9c:	f000 ff8c 	bl	8009cb8 <UART_WaitOnFlagUntilTimeout>
 8008da0:	1e03      	subs	r3, r0, #0
 8008da2:	d001      	beq.n	8008da8 <HAL_UART_Transmit+0x140>
                                    Timeout) != HAL_OK) {
      return HAL_TIMEOUT;
 8008da4:	2303      	movs	r3, #3
 8008da6:	e006      	b.n	8008db6 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2284      	movs	r2, #132	; 0x84
 8008dac:	2120      	movs	r1, #32
 8008dae:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8008db0:	2300      	movs	r3, #0
 8008db2:	e000      	b.n	8008db6 <HAL_UART_Transmit+0x14e>
  } else {
    return HAL_BUSY;
 8008db4:	2302      	movs	r3, #2
  }
}
 8008db6:	0018      	movs	r0, r3
 8008db8:	46bd      	mov	sp, r7
 8008dba:	b008      	add	sp, #32
 8008dbc:	bd80      	pop	{r7, pc}
	...

08008dc0 <HAL_UART_Receive_IT>:
 * @param pData Pointer to data buffer (u8 or u16 data elements).
 * @param Size  Amount of data elements (u8 or u16) to be received.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData,
                                      uint16_t Size) {
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b088      	sub	sp, #32
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	1dbb      	adds	r3, r7, #6
 8008dcc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY) {
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2288      	movs	r2, #136	; 0x88
 8008dd2:	589b      	ldr	r3, [r3, r2]
 8008dd4:	2b20      	cmp	r3, #32
 8008dd6:	d155      	bne.n	8008e84 <HAL_UART_Receive_IT+0xc4>
    if ((pData == NULL) || (Size == 0U)) {
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d003      	beq.n	8008de6 <HAL_UART_Receive_IT+0x26>
 8008dde:	1dbb      	adds	r3, r7, #6
 8008de0:	881b      	ldrh	r3, [r3, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d101      	bne.n	8008dea <HAL_UART_Receive_IT+0x2a>
      return HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	e04d      	b.n	8008e86 <HAL_UART_Receive_IT+0xc6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input
       parameter should be aligned on a u16 frontier, as data to be received
       from RDR will be handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) &&
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	689a      	ldr	r2, [r3, #8]
 8008dee:	2380      	movs	r3, #128	; 0x80
 8008df0:	015b      	lsls	r3, r3, #5
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d109      	bne.n	8008e0a <HAL_UART_Receive_IT+0x4a>
        (huart->Init.Parity == UART_PARITY_NONE)) {
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	691b      	ldr	r3, [r3, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) &&
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d105      	bne.n	8008e0a <HAL_UART_Receive_IT+0x4a>
      if ((((uint32_t)pData) & 1U) != 0U) {
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	2201      	movs	r2, #1
 8008e02:	4013      	ands	r3, r2
 8008e04:	d001      	beq.n	8008e0a <HAL_UART_Receive_IT+0x4a>
        return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e03d      	b.n	8008e86 <HAL_UART_Receive_IT+0xc6>
      }
    }

    __HAL_LOCK(huart);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2280      	movs	r2, #128	; 0x80
 8008e0e:	5c9b      	ldrb	r3, [r3, r2]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d101      	bne.n	8008e18 <HAL_UART_Receive_IT+0x58>
 8008e14:	2302      	movs	r3, #2
 8008e16:	e036      	b.n	8008e86 <HAL_UART_Receive_IT+0xc6>
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2280      	movs	r2, #128	; 0x80
 8008e1c:	2101      	movs	r1, #1
 8008e1e:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2200      	movs	r2, #0
 8008e24:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance))) {
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a19      	ldr	r2, [pc, #100]	; (8008e90 <HAL_UART_Receive_IT+0xd0>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d020      	beq.n	8008e72 <HAL_UART_Receive_IT+0xb2>
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U) {
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	685a      	ldr	r2, [r3, #4]
 8008e36:	2380      	movs	r3, #128	; 0x80
 8008e38:	041b      	lsls	r3, r3, #16
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	d019      	beq.n	8008e72 <HAL_UART_Receive_IT+0xb2>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8008e42:	613b      	str	r3, [r7, #16]
  return(result);
 8008e44:	693b      	ldr	r3, [r7, #16]
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e46:	61fb      	str	r3, [r7, #28]
 8008e48:	2301      	movs	r3, #1
 8008e4a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	f383 8810 	msr	PRIMASK, r3
}
 8008e52:	46c0      	nop			; (mov r8, r8)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2180      	movs	r1, #128	; 0x80
 8008e60:	04c9      	lsls	r1, r1, #19
 8008e62:	430a      	orrs	r2, r1
 8008e64:	601a      	str	r2, [r3, #0]
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	f383 8810 	msr	PRIMASK, r3
}
 8008e70:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008e72:	1dbb      	adds	r3, r7, #6
 8008e74:	881a      	ldrh	r2, [r3, #0]
 8008e76:	68b9      	ldr	r1, [r7, #8]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	0018      	movs	r0, r3
 8008e7c:	f000 ffe4 	bl	8009e48 <UART_Start_Receive_IT>
 8008e80:	0003      	movs	r3, r0
 8008e82:	e000      	b.n	8008e86 <HAL_UART_Receive_IT+0xc6>
  } else {
    return HAL_BUSY;
 8008e84:	2302      	movs	r3, #2
  }
}
 8008e86:	0018      	movs	r0, r3
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	b008      	add	sp, #32
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	46c0      	nop			; (mov r8, r8)
 8008e90:	40008000 	.word	0x40008000

08008e94 <HAL_UART_IRQHandler>:
/**
 * @brief Handle UART interrupt request.
 * @param huart UART handle.
 * @retval None
 */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart) {
 8008e94:	b5b0      	push	{r4, r5, r7, lr}
 8008e96:	b0aa      	sub	sp, #168	; 0xa8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(huart->Instance->ISR);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	69db      	ldr	r3, [r3, #28]
 8008ea2:	22a4      	movs	r2, #164	; 0xa4
 8008ea4:	18b9      	adds	r1, r7, r2
 8008ea6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its = READ_REG(huart->Instance->CR1);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	20a0      	movs	r0, #160	; 0xa0
 8008eb0:	1839      	adds	r1, r7, r0
 8008eb2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its = READ_REG(huart->Instance->CR3);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	249c      	movs	r4, #156	; 0x9c
 8008ebc:	1939      	adds	r1, r7, r4
 8008ebe:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags =
 8008ec0:	0011      	movs	r1, r2
 8008ec2:	18bb      	adds	r3, r7, r2
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4aa0      	ldr	r2, [pc, #640]	; (8009148 <HAL_UART_IRQHandler+0x2b4>)
 8008ec8:	4013      	ands	r3, r2
 8008eca:	2298      	movs	r2, #152	; 0x98
 8008ecc:	18bd      	adds	r5, r7, r2
 8008ece:	602b      	str	r3, [r5, #0]
      (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE |
                             USART_ISR_NE | USART_ISR_RTOF));
  if (errorflags == 0U) {
 8008ed0:	18bb      	adds	r3, r7, r2
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d11a      	bne.n	8008f0e <HAL_UART_IRQHandler+0x7a>
    /* UART in mode Receiver
     * ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U) &&
 8008ed8:	187b      	adds	r3, r7, r1
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2220      	movs	r2, #32
 8008ede:	4013      	ands	r3, r2
 8008ee0:	d015      	beq.n	8008f0e <HAL_UART_IRQHandler+0x7a>
        (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008ee2:	183b      	adds	r3, r7, r0
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2220      	movs	r2, #32
 8008ee8:	4013      	ands	r3, r2
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U) &&
 8008eea:	d105      	bne.n	8008ef8 <HAL_UART_IRQHandler+0x64>
         ((cr3its & USART_CR3_RXFTIE) != 0U))) {
 8008eec:	193b      	adds	r3, r7, r4
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	2380      	movs	r3, #128	; 0x80
 8008ef2:	055b      	lsls	r3, r3, #21
 8008ef4:	4013      	ands	r3, r2
        (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008ef6:	d00a      	beq.n	8008f0e <HAL_UART_IRQHandler+0x7a>
      if (huart->RxISR != NULL) {
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d100      	bne.n	8008f02 <HAL_UART_IRQHandler+0x6e>
 8008f00:	e2cf      	b.n	80094a2 <HAL_UART_IRQHandler+0x60e>
        huart->RxISR(huart);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	0010      	movs	r0, r2
 8008f0a:	4798      	blx	r3
      }
      return;
 8008f0c:	e2c9      	b.n	80094a2 <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U) &&
 8008f0e:	2398      	movs	r3, #152	; 0x98
 8008f10:	18fb      	adds	r3, r7, r3
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d100      	bne.n	8008f1a <HAL_UART_IRQHandler+0x86>
 8008f18:	e11e      	b.n	8009158 <HAL_UART_IRQHandler+0x2c4>
      ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U) ||
 8008f1a:	239c      	movs	r3, #156	; 0x9c
 8008f1c:	18fb      	adds	r3, r7, r3
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a8a      	ldr	r2, [pc, #552]	; (800914c <HAL_UART_IRQHandler+0x2b8>)
 8008f22:	4013      	ands	r3, r2
  if ((errorflags != 0U) &&
 8008f24:	d106      	bne.n	8008f34 <HAL_UART_IRQHandler+0xa0>
        ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f26:	23a0      	movs	r3, #160	; 0xa0
 8008f28:	18fb      	adds	r3, r7, r3
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a88      	ldr	r2, [pc, #544]	; (8009150 <HAL_UART_IRQHandler+0x2bc>)
 8008f2e:	4013      	ands	r3, r2
      ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U) ||
 8008f30:	d100      	bne.n	8008f34 <HAL_UART_IRQHandler+0xa0>
 8008f32:	e111      	b.n	8009158 <HAL_UART_IRQHandler+0x2c4>
                    USART_CR1_RTOIE)) != 0U)))) {
    /* UART parity error interrupt occurred
     * -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) &&
 8008f34:	23a4      	movs	r3, #164	; 0xa4
 8008f36:	18fb      	adds	r3, r7, r3
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	d012      	beq.n	8008f66 <HAL_UART_IRQHandler+0xd2>
        ((cr1its & USART_CR1_PEIE) != 0U)) {
 8008f40:	23a0      	movs	r3, #160	; 0xa0
 8008f42:	18fb      	adds	r3, r7, r3
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	2380      	movs	r3, #128	; 0x80
 8008f48:	005b      	lsls	r3, r3, #1
 8008f4a:	4013      	ands	r3, r2
    if (((isrflags & USART_ISR_PE) != 0U) &&
 8008f4c:	d00b      	beq.n	8008f66 <HAL_UART_IRQHandler+0xd2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2201      	movs	r2, #1
 8008f54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	228c      	movs	r2, #140	; 0x8c
 8008f5a:	589b      	ldr	r3, [r3, r2]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	431a      	orrs	r2, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	218c      	movs	r1, #140	; 0x8c
 8008f64:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred
     * --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U)) {
 8008f66:	23a4      	movs	r3, #164	; 0xa4
 8008f68:	18fb      	adds	r3, r7, r3
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2202      	movs	r2, #2
 8008f6e:	4013      	ands	r3, r2
 8008f70:	d011      	beq.n	8008f96 <HAL_UART_IRQHandler+0x102>
 8008f72:	239c      	movs	r3, #156	; 0x9c
 8008f74:	18fb      	adds	r3, r7, r3
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	4013      	ands	r3, r2
 8008f7c:	d00b      	beq.n	8008f96 <HAL_UART_IRQHandler+0x102>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2202      	movs	r2, #2
 8008f84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	228c      	movs	r2, #140	; 0x8c
 8008f8a:	589b      	ldr	r3, [r3, r2]
 8008f8c:	2204      	movs	r2, #4
 8008f8e:	431a      	orrs	r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	218c      	movs	r1, #140	; 0x8c
 8008f94:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred
     * --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U)) {
 8008f96:	23a4      	movs	r3, #164	; 0xa4
 8008f98:	18fb      	adds	r3, r7, r3
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2204      	movs	r2, #4
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	d011      	beq.n	8008fc6 <HAL_UART_IRQHandler+0x132>
 8008fa2:	239c      	movs	r3, #156	; 0x9c
 8008fa4:	18fb      	adds	r3, r7, r3
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	4013      	ands	r3, r2
 8008fac:	d00b      	beq.n	8008fc6 <HAL_UART_IRQHandler+0x132>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2204      	movs	r2, #4
 8008fb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	228c      	movs	r2, #140	; 0x8c
 8008fba:	589b      	ldr	r3, [r3, r2]
 8008fbc:	2202      	movs	r2, #2
 8008fbe:	431a      	orrs	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	218c      	movs	r1, #140	; 0x8c
 8008fc4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred
     * -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U) &&
 8008fc6:	23a4      	movs	r3, #164	; 0xa4
 8008fc8:	18fb      	adds	r3, r7, r3
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2208      	movs	r2, #8
 8008fce:	4013      	ands	r3, r2
 8008fd0:	d017      	beq.n	8009002 <HAL_UART_IRQHandler+0x16e>
        (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008fd2:	23a0      	movs	r3, #160	; 0xa0
 8008fd4:	18fb      	adds	r3, r7, r3
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2220      	movs	r2, #32
 8008fda:	4013      	ands	r3, r2
    if (((isrflags & USART_ISR_ORE) != 0U) &&
 8008fdc:	d105      	bne.n	8008fea <HAL_UART_IRQHandler+0x156>
         ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U))) {
 8008fde:	239c      	movs	r3, #156	; 0x9c
 8008fe0:	18fb      	adds	r3, r7, r3
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a59      	ldr	r2, [pc, #356]	; (800914c <HAL_UART_IRQHandler+0x2b8>)
 8008fe6:	4013      	ands	r3, r2
        (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008fe8:	d00b      	beq.n	8009002 <HAL_UART_IRQHandler+0x16e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2208      	movs	r2, #8
 8008ff0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	228c      	movs	r2, #140	; 0x8c
 8008ff6:	589b      	ldr	r3, [r3, r2]
 8008ff8:	2208      	movs	r2, #8
 8008ffa:	431a      	orrs	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	218c      	movs	r1, #140	; 0x8c
 8009000:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred
     * ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) &&
 8009002:	23a4      	movs	r3, #164	; 0xa4
 8009004:	18fb      	adds	r3, r7, r3
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	2380      	movs	r3, #128	; 0x80
 800900a:	011b      	lsls	r3, r3, #4
 800900c:	4013      	ands	r3, r2
 800900e:	d013      	beq.n	8009038 <HAL_UART_IRQHandler+0x1a4>
        ((cr1its & USART_CR1_RTOIE) != 0U)) {
 8009010:	23a0      	movs	r3, #160	; 0xa0
 8009012:	18fb      	adds	r3, r7, r3
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	2380      	movs	r3, #128	; 0x80
 8009018:	04db      	lsls	r3, r3, #19
 800901a:	4013      	ands	r3, r2
    if (((isrflags & USART_ISR_RTOF) != 0U) &&
 800901c:	d00c      	beq.n	8009038 <HAL_UART_IRQHandler+0x1a4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2280      	movs	r2, #128	; 0x80
 8009024:	0112      	lsls	r2, r2, #4
 8009026:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	228c      	movs	r2, #140	; 0x8c
 800902c:	589b      	ldr	r3, [r3, r2]
 800902e:	2220      	movs	r2, #32
 8009030:	431a      	orrs	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	218c      	movs	r1, #140	; 0x8c
 8009036:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be
     * ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE) {
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	228c      	movs	r2, #140	; 0x8c
 800903c:	589b      	ldr	r3, [r3, r2]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d100      	bne.n	8009044 <HAL_UART_IRQHandler+0x1b0>
 8009042:	e230      	b.n	80094a6 <HAL_UART_IRQHandler+0x612>
      /* UART in mode Receiver
       * --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U) &&
 8009044:	23a4      	movs	r3, #164	; 0xa4
 8009046:	18fb      	adds	r3, r7, r3
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2220      	movs	r2, #32
 800904c:	4013      	ands	r3, r2
 800904e:	d015      	beq.n	800907c <HAL_UART_IRQHandler+0x1e8>
          (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009050:	23a0      	movs	r3, #160	; 0xa0
 8009052:	18fb      	adds	r3, r7, r3
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2220      	movs	r2, #32
 8009058:	4013      	ands	r3, r2
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U) &&
 800905a:	d106      	bne.n	800906a <HAL_UART_IRQHandler+0x1d6>
           ((cr3its & USART_CR3_RXFTIE) != 0U))) {
 800905c:	239c      	movs	r3, #156	; 0x9c
 800905e:	18fb      	adds	r3, r7, r3
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	2380      	movs	r3, #128	; 0x80
 8009064:	055b      	lsls	r3, r3, #21
 8009066:	4013      	ands	r3, r2
          (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009068:	d008      	beq.n	800907c <HAL_UART_IRQHandler+0x1e8>
        if (huart->RxISR != NULL) {
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800906e:	2b00      	cmp	r3, #0
 8009070:	d004      	beq.n	800907c <HAL_UART_IRQHandler+0x1e8>
          huart->RxISR(huart);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	0010      	movs	r0, r2
 800907a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	228c      	movs	r2, #140	; 0x8c
 8009080:	589b      	ldr	r3, [r3, r2]
 8009082:	2194      	movs	r1, #148	; 0x94
 8009084:	187a      	adds	r2, r7, r1
 8009086:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	2240      	movs	r2, #64	; 0x40
 8009090:	4013      	ands	r3, r2
 8009092:	2b40      	cmp	r3, #64	; 0x40
 8009094:	d004      	beq.n	80090a0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U)) {
 8009096:	187b      	adds	r3, r7, r1
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2228      	movs	r2, #40	; 0x28
 800909c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800909e:	d047      	beq.n	8009130 <HAL_UART_IRQHandler+0x29c>
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	0018      	movs	r0, r3
 80090a4:	f000 ffdc 	bl	800a060 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	2240      	movs	r2, #64	; 0x40
 80090b0:	4013      	ands	r3, r2
 80090b2:	2b40      	cmp	r3, #64	; 0x40
 80090b4:	d137      	bne.n	8009126 <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090b6:	f3ef 8310 	mrs	r3, PRIMASK
 80090ba:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80090bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090be:	2090      	movs	r0, #144	; 0x90
 80090c0:	183a      	adds	r2, r7, r0
 80090c2:	6013      	str	r3, [r2, #0]
 80090c4:	2301      	movs	r3, #1
 80090c6:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090ca:	f383 8810 	msr	PRIMASK, r3
}
 80090ce:	46c0      	nop			; (mov r8, r8)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	689a      	ldr	r2, [r3, #8]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2140      	movs	r1, #64	; 0x40
 80090dc:	438a      	bics	r2, r1
 80090de:	609a      	str	r2, [r3, #8]
 80090e0:	183b      	adds	r3, r7, r0
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090e8:	f383 8810 	msr	PRIMASK, r3
}
 80090ec:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL) {
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d012      	beq.n	800911c <HAL_UART_IRQHandler+0x288>
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort
               procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090fa:	4a16      	ldr	r2, [pc, #88]	; (8009154 <HAL_UART_IRQHandler+0x2c0>)
 80090fc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK) {
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009102:	0018      	movs	r0, r3
 8009104:	f7fd f91e 	bl	8006344 <HAL_DMA_Abort_IT>
 8009108:	1e03      	subs	r3, r0, #0
 800910a:	d01a      	beq.n	8009142 <HAL_UART_IRQHandler+0x2ae>
              /* Call Directly huart->hdmarx->XferAbortCallback function in case
               * of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009116:	0018      	movs	r0, r3
 8009118:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 800911a:	e012      	b.n	8009142 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	0018      	movs	r0, r3
 8009120:	f000 f9da 	bl	80094d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8009124:	e00d      	b.n	8009142 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	0018      	movs	r0, r3
 800912a:	f000 f9d5 	bl	80094d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 800912e:	e008      	b.n	8009142 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	0018      	movs	r0, r3
 8009134:	f000 f9d0 	bl	80094d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	228c      	movs	r2, #140	; 0x8c
 800913c:	2100      	movs	r1, #0
 800913e:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8009140:	e1b1      	b.n	80094a6 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8009142:	46c0      	nop			; (mov r8, r8)
    return;
 8009144:	e1af      	b.n	80094a6 <HAL_UART_IRQHandler+0x612>
 8009146:	46c0      	nop			; (mov r8, r8)
 8009148:	0000080f 	.word	0x0000080f
 800914c:	10000001 	.word	0x10000001
 8009150:	04000120 	.word	0x04000120
 8009154:	0800a12d 	.word	0x0800a12d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) &&
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800915c:	2b01      	cmp	r3, #1
 800915e:	d000      	beq.n	8009162 <HAL_UART_IRQHandler+0x2ce>
 8009160:	e135      	b.n	80093ce <HAL_UART_IRQHandler+0x53a>
      ((isrflags & USART_ISR_IDLE) != 0U) &&
 8009162:	23a4      	movs	r3, #164	; 0xa4
 8009164:	18fb      	adds	r3, r7, r3
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2210      	movs	r2, #16
 800916a:	4013      	ands	r3, r2
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) &&
 800916c:	d100      	bne.n	8009170 <HAL_UART_IRQHandler+0x2dc>
 800916e:	e12e      	b.n	80093ce <HAL_UART_IRQHandler+0x53a>
      ((cr1its & USART_ISR_IDLE) != 0U)) {
 8009170:	23a0      	movs	r3, #160	; 0xa0
 8009172:	18fb      	adds	r3, r7, r3
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2210      	movs	r2, #16
 8009178:	4013      	ands	r3, r2
      ((isrflags & USART_ISR_IDLE) != 0U) &&
 800917a:	d100      	bne.n	800917e <HAL_UART_IRQHandler+0x2ea>
 800917c:	e127      	b.n	80093ce <HAL_UART_IRQHandler+0x53a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2210      	movs	r2, #16
 8009184:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	2240      	movs	r2, #64	; 0x40
 800918e:	4013      	ands	r3, r2
 8009190:	2b40      	cmp	r3, #64	; 0x40
 8009192:	d000      	beq.n	8009196 <HAL_UART_IRQHandler+0x302>
 8009194:	e09e      	b.n	80092d4 <HAL_UART_IRQHandler+0x440>
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event
         is to be notified to user */
      uint16_t nb_remaining_rx_data =
          (uint16_t)__HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	685a      	ldr	r2, [r3, #4]
      uint16_t nb_remaining_rx_data =
 800919e:	217e      	movs	r1, #126	; 0x7e
 80091a0:	187b      	adds	r3, r7, r1
 80091a2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U) &&
 80091a4:	187b      	adds	r3, r7, r1
 80091a6:	881b      	ldrh	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d100      	bne.n	80091ae <HAL_UART_IRQHandler+0x31a>
 80091ac:	e17d      	b.n	80094aa <HAL_UART_IRQHandler+0x616>
          (nb_remaining_rx_data < huart->RxXferSize)) {
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	225c      	movs	r2, #92	; 0x5c
 80091b2:	5a9b      	ldrh	r3, [r3, r2]
      if ((nb_remaining_rx_data > 0U) &&
 80091b4:	187a      	adds	r2, r7, r1
 80091b6:	8812      	ldrh	r2, [r2, #0]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d300      	bcc.n	80091be <HAL_UART_IRQHandler+0x32a>
 80091bc:	e175      	b.n	80094aa <HAL_UART_IRQHandler+0x616>
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	187a      	adds	r2, r7, r1
 80091c2:	215e      	movs	r1, #94	; 0x5e
 80091c4:	8812      	ldrh	r2, [r2, #0]
 80091c6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC)) {
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2220      	movs	r2, #32
 80091d2:	4013      	ands	r3, r2
 80091d4:	d16f      	bne.n	80092b6 <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091d6:	f3ef 8310 	mrs	r3, PRIMASK
 80091da:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80091dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
          /* Disable PE and ERR (Frame error, noise error, overrun error)
           * interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091de:	67bb      	str	r3, [r7, #120]	; 0x78
 80091e0:	2301      	movs	r3, #1
 80091e2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e6:	f383 8810 	msr	PRIMASK, r3
}
 80091ea:	46c0      	nop			; (mov r8, r8)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	49b1      	ldr	r1, [pc, #708]	; (80094bc <HAL_UART_IRQHandler+0x628>)
 80091f8:	400a      	ands	r2, r1
 80091fa:	601a      	str	r2, [r3, #0]
 80091fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80091fe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009202:	f383 8810 	msr	PRIMASK, r3
}
 8009206:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009208:	f3ef 8310 	mrs	r3, PRIMASK
 800920c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800920e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009210:	677b      	str	r3, [r7, #116]	; 0x74
 8009212:	2301      	movs	r3, #1
 8009214:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009218:	f383 8810 	msr	PRIMASK, r3
}
 800921c:	46c0      	nop			; (mov r8, r8)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	689a      	ldr	r2, [r3, #8]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2101      	movs	r1, #1
 800922a:	438a      	bics	r2, r1
 800922c:	609a      	str	r2, [r3, #8]
 800922e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009230:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009234:	f383 8810 	msr	PRIMASK, r3
}
 8009238:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800923a:	f3ef 8310 	mrs	r3, PRIMASK
 800923e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8009240:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the
             DMAR bit in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009242:	673b      	str	r3, [r7, #112]	; 0x70
 8009244:	2301      	movs	r3, #1
 8009246:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800924a:	f383 8810 	msr	PRIMASK, r3
}
 800924e:	46c0      	nop			; (mov r8, r8)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	689a      	ldr	r2, [r3, #8]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2140      	movs	r1, #64	; 0x40
 800925c:	438a      	bics	r2, r1
 800925e:	609a      	str	r2, [r3, #8]
 8009260:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009262:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009266:	f383 8810 	msr	PRIMASK, r3
}
 800926a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2288      	movs	r2, #136	; 0x88
 8009270:	2120      	movs	r1, #32
 8009272:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800927a:	f3ef 8310 	mrs	r3, PRIMASK
 800927e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8009280:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009282:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009284:	2301      	movs	r3, #1
 8009286:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009288:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800928a:	f383 8810 	msr	PRIMASK, r3
}
 800928e:	46c0      	nop			; (mov r8, r8)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2110      	movs	r1, #16
 800929c:	438a      	bics	r2, r1
 800929e:	601a      	str	r2, [r3, #0]
 80092a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092a6:	f383 8810 	msr	PRIMASK, r3
}
 80092aa:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092b0:	0018      	movs	r0, r3
 80092b2:	f7fc ffe5 	bl	8006280 <HAL_DMA_Abort>
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart,
                                   (huart->RxXferSize - huart->RxXferCount));
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	225c      	movs	r2, #92	; 0x5c
 80092ba:	5a9a      	ldrh	r2, [r3, r2]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	215e      	movs	r1, #94	; 0x5e
 80092c0:	5a5b      	ldrh	r3, [r3, r1]
 80092c2:	b29b      	uxth	r3, r3
        HAL_UARTEx_RxEventCallback(huart,
 80092c4:	1ad3      	subs	r3, r2, r3
 80092c6:	b29a      	uxth	r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	0011      	movs	r1, r2
 80092cc:	0018      	movs	r0, r3
 80092ce:	f000 f90b 	bl	80094e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80092d2:	e0ea      	b.n	80094aa <HAL_UART_IRQHandler+0x616>
    } else {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event
         is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	225c      	movs	r2, #92	; 0x5c
 80092d8:	5a99      	ldrh	r1, [r3, r2]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	225e      	movs	r2, #94	; 0x5e
 80092de:	5a9b      	ldrh	r3, [r3, r2]
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	208e      	movs	r0, #142	; 0x8e
 80092e4:	183b      	adds	r3, r7, r0
 80092e6:	1a8a      	subs	r2, r1, r2
 80092e8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U) && (nb_rx_data > 0U)) {
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	225e      	movs	r2, #94	; 0x5e
 80092ee:	5a9b      	ldrh	r3, [r3, r2]
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d100      	bne.n	80092f8 <HAL_UART_IRQHandler+0x464>
 80092f6:	e0da      	b.n	80094ae <HAL_UART_IRQHandler+0x61a>
 80092f8:	183b      	adds	r3, r7, r0
 80092fa:	881b      	ldrh	r3, [r3, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d100      	bne.n	8009302 <HAL_UART_IRQHandler+0x46e>
 8009300:	e0d5      	b.n	80094ae <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009302:	f3ef 8310 	mrs	r3, PRIMASK
 8009306:	60fb      	str	r3, [r7, #12]
  return(result);
 8009308:	68fb      	ldr	r3, [r7, #12]
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 800930a:	2488      	movs	r4, #136	; 0x88
 800930c:	193a      	adds	r2, r7, r4
 800930e:	6013      	str	r3, [r2, #0]
 8009310:	2301      	movs	r3, #1
 8009312:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	f383 8810 	msr	PRIMASK, r3
}
 800931a:	46c0      	nop			; (mov r8, r8)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4966      	ldr	r1, [pc, #408]	; (80094c0 <HAL_UART_IRQHandler+0x62c>)
 8009328:	400a      	ands	r2, r1
 800932a:	601a      	str	r2, [r3, #0]
 800932c:	193b      	adds	r3, r7, r4
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	f383 8810 	msr	PRIMASK, r3
}
 8009338:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800933a:	f3ef 8310 	mrs	r3, PRIMASK
 800933e:	61bb      	str	r3, [r7, #24]
  return(result);
 8009340:	69bb      	ldr	r3, [r7, #24]
                         (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun
         * error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3,
 8009342:	2484      	movs	r4, #132	; 0x84
 8009344:	193a      	adds	r2, r7, r4
 8009346:	6013      	str	r3, [r2, #0]
 8009348:	2301      	movs	r3, #1
 800934a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	f383 8810 	msr	PRIMASK, r3
}
 8009352:	46c0      	nop			; (mov r8, r8)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	689a      	ldr	r2, [r3, #8]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4959      	ldr	r1, [pc, #356]	; (80094c4 <HAL_UART_IRQHandler+0x630>)
 8009360:	400a      	ands	r2, r1
 8009362:	609a      	str	r2, [r3, #8]
 8009364:	193b      	adds	r3, r7, r4
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800936a:	6a3b      	ldr	r3, [r7, #32]
 800936c:	f383 8810 	msr	PRIMASK, r3
}
 8009370:	46c0      	nop			; (mov r8, r8)
                         (USART_CR3_EIE | USART_CR3_RXFTIE));

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2288      	movs	r2, #136	; 0x88
 8009376:	2120      	movs	r1, #32
 8009378:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009386:	f3ef 8310 	mrs	r3, PRIMASK
 800938a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800938c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800938e:	2480      	movs	r4, #128	; 0x80
 8009390:	193a      	adds	r2, r7, r4
 8009392:	6013      	str	r3, [r2, #0]
 8009394:	2301      	movs	r3, #1
 8009396:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939a:	f383 8810 	msr	PRIMASK, r3
}
 800939e:	46c0      	nop			; (mov r8, r8)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2110      	movs	r1, #16
 80093ac:	438a      	bics	r2, r1
 80093ae:	601a      	str	r2, [r3, #0]
 80093b0:	193b      	adds	r3, r7, r4
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b8:	f383 8810 	msr	PRIMASK, r3
}
 80093bc:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093be:	183b      	adds	r3, r7, r0
 80093c0:	881a      	ldrh	r2, [r3, #0]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	0011      	movs	r1, r2
 80093c6:	0018      	movs	r0, r3
 80093c8:	f000 f88e 	bl	80094e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80093cc:	e06f      	b.n	80094ae <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) &&
 80093ce:	23a4      	movs	r3, #164	; 0xa4
 80093d0:	18fb      	adds	r3, r7, r3
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	2380      	movs	r3, #128	; 0x80
 80093d6:	035b      	lsls	r3, r3, #13
 80093d8:	4013      	ands	r3, r2
 80093da:	d010      	beq.n	80093fe <HAL_UART_IRQHandler+0x56a>
      ((cr3its & USART_CR3_WUFIE) != 0U)) {
 80093dc:	239c      	movs	r3, #156	; 0x9c
 80093de:	18fb      	adds	r3, r7, r3
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	2380      	movs	r3, #128	; 0x80
 80093e4:	03db      	lsls	r3, r3, #15
 80093e6:	4013      	ands	r3, r2
  if (((isrflags & USART_ISR_WUF) != 0U) &&
 80093e8:	d009      	beq.n	80093fe <HAL_UART_IRQHandler+0x56a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2280      	movs	r2, #128	; 0x80
 80093f0:	0352      	lsls	r2, r2, #13
 80093f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	0018      	movs	r0, r3
 80093f8:	f001 fb2c 	bl	800aa54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80093fc:	e05a      	b.n	80094b4 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U) &&
 80093fe:	23a4      	movs	r3, #164	; 0xa4
 8009400:	18fb      	adds	r3, r7, r3
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2280      	movs	r2, #128	; 0x80
 8009406:	4013      	ands	r3, r2
 8009408:	d016      	beq.n	8009438 <HAL_UART_IRQHandler+0x5a4>
      (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U) ||
 800940a:	23a0      	movs	r3, #160	; 0xa0
 800940c:	18fb      	adds	r3, r7, r3
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2280      	movs	r2, #128	; 0x80
 8009412:	4013      	ands	r3, r2
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U) &&
 8009414:	d106      	bne.n	8009424 <HAL_UART_IRQHandler+0x590>
       ((cr3its & USART_CR3_TXFTIE) != 0U))) {
 8009416:	239c      	movs	r3, #156	; 0x9c
 8009418:	18fb      	adds	r3, r7, r3
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	2380      	movs	r3, #128	; 0x80
 800941e:	041b      	lsls	r3, r3, #16
 8009420:	4013      	ands	r3, r2
      (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U) ||
 8009422:	d009      	beq.n	8009438 <HAL_UART_IRQHandler+0x5a4>
    if (huart->TxISR != NULL) {
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009428:	2b00      	cmp	r3, #0
 800942a:	d042      	beq.n	80094b2 <HAL_UART_IRQHandler+0x61e>
      huart->TxISR(huart);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	0010      	movs	r0, r2
 8009434:	4798      	blx	r3
    }
    return;
 8009436:	e03c      	b.n	80094b2 <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U)) {
 8009438:	23a4      	movs	r3, #164	; 0xa4
 800943a:	18fb      	adds	r3, r7, r3
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2240      	movs	r2, #64	; 0x40
 8009440:	4013      	ands	r3, r2
 8009442:	d00a      	beq.n	800945a <HAL_UART_IRQHandler+0x5c6>
 8009444:	23a0      	movs	r3, #160	; 0xa0
 8009446:	18fb      	adds	r3, r7, r3
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2240      	movs	r2, #64	; 0x40
 800944c:	4013      	ands	r3, r2
 800944e:	d004      	beq.n	800945a <HAL_UART_IRQHandler+0x5c6>
    UART_EndTransmit_IT(huart);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	0018      	movs	r0, r3
 8009454:	f000 fe81 	bl	800a15a <UART_EndTransmit_IT>
    return;
 8009458:	e02c      	b.n	80094b4 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred
   * ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) &&
 800945a:	23a4      	movs	r3, #164	; 0xa4
 800945c:	18fb      	adds	r3, r7, r3
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	2380      	movs	r3, #128	; 0x80
 8009462:	041b      	lsls	r3, r3, #16
 8009464:	4013      	ands	r3, r2
 8009466:	d00b      	beq.n	8009480 <HAL_UART_IRQHandler+0x5ec>
      ((cr1its & USART_CR1_TXFEIE) != 0U)) {
 8009468:	23a0      	movs	r3, #160	; 0xa0
 800946a:	18fb      	adds	r3, r7, r3
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	2380      	movs	r3, #128	; 0x80
 8009470:	05db      	lsls	r3, r3, #23
 8009472:	4013      	ands	r3, r2
  if (((isrflags & USART_ISR_TXFE) != 0U) &&
 8009474:	d004      	beq.n	8009480 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	0018      	movs	r0, r3
 800947a:	f001 fafb 	bl	800aa74 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800947e:	e019      	b.n	80094b4 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) &&
 8009480:	23a4      	movs	r3, #164	; 0xa4
 8009482:	18fb      	adds	r3, r7, r3
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	2380      	movs	r3, #128	; 0x80
 8009488:	045b      	lsls	r3, r3, #17
 800948a:	4013      	ands	r3, r2
 800948c:	d012      	beq.n	80094b4 <HAL_UART_IRQHandler+0x620>
      ((cr1its & USART_CR1_RXFFIE) != 0U)) {
 800948e:	23a0      	movs	r3, #160	; 0xa0
 8009490:	18fb      	adds	r3, r7, r3
 8009492:	681b      	ldr	r3, [r3, #0]
  if (((isrflags & USART_ISR_RXFF) != 0U) &&
 8009494:	2b00      	cmp	r3, #0
 8009496:	da0d      	bge.n	80094b4 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	0018      	movs	r0, r3
 800949c:	f001 fae2 	bl	800aa64 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80094a0:	e008      	b.n	80094b4 <HAL_UART_IRQHandler+0x620>
      return;
 80094a2:	46c0      	nop			; (mov r8, r8)
 80094a4:	e006      	b.n	80094b4 <HAL_UART_IRQHandler+0x620>
    return;
 80094a6:	46c0      	nop			; (mov r8, r8)
 80094a8:	e004      	b.n	80094b4 <HAL_UART_IRQHandler+0x620>
      return;
 80094aa:	46c0      	nop			; (mov r8, r8)
 80094ac:	e002      	b.n	80094b4 <HAL_UART_IRQHandler+0x620>
      return;
 80094ae:	46c0      	nop			; (mov r8, r8)
 80094b0:	e000      	b.n	80094b4 <HAL_UART_IRQHandler+0x620>
    return;
 80094b2:	46c0      	nop			; (mov r8, r8)
  }
}
 80094b4:	46bd      	mov	sp, r7
 80094b6:	b02a      	add	sp, #168	; 0xa8
 80094b8:	bdb0      	pop	{r4, r5, r7, pc}
 80094ba:	46c0      	nop			; (mov r8, r8)
 80094bc:	fffffeff 	.word	0xfffffeff
 80094c0:	fffffedf 	.word	0xfffffedf
 80094c4:	effffffe 	.word	0xeffffffe

080094c8 <HAL_UART_TxCpltCallback>:
/**
 * @brief Tx Transfer completed callback.
 * @param huart UART handle.
 * @retval None
 */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80094d0:	46c0      	nop			; (mov r8, r8)
 80094d2:	46bd      	mov	sp, r7
 80094d4:	b002      	add	sp, #8
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <HAL_UART_ErrorCallback>:
/**
 * @brief  UART error callback.
 * @param  huart UART handle.
 * @retval None
 */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80094e0:	46c0      	nop			; (mov r8, r8)
 80094e2:	46bd      	mov	sp, r7
 80094e4:	b002      	add	sp, #8
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <HAL_UARTEx_RxEventCallback>:
 * @param  Size  Number of data available in application reception buffer
 * (indicates a position in reception buffer until which, data are available)
 * @retval None
 */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart,
                                       uint16_t Size) {
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	000a      	movs	r2, r1
 80094f2:	1cbb      	adds	r3, r7, #2
 80094f4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80094f6:	46c0      	nop			; (mov r8, r8)
 80094f8:	46bd      	mov	sp, r7
 80094fa:	b002      	add	sp, #8
 80094fc:	bd80      	pop	{r7, pc}
	...

08009500 <UART_SetConfig>:
/**
 * @brief Configure the UART peripheral.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart) {
 8009500:	b5b0      	push	{r4, r5, r7, lr}
 8009502:	b090      	sub	sp, #64	; 0x40
 8009504:	af00      	add	r7, sp, #0
 8009506:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret = HAL_OK;
 8009508:	231a      	movs	r3, #26
 800950a:	2220      	movs	r2, #32
 800950c:	4694      	mov	ip, r2
 800950e:	44bc      	add	ip, r7
 8009510:	4463      	add	r3, ip
 8009512:	2200      	movs	r2, #0
 8009514:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity |
 8009516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009518:	689a      	ldr	r2, [r3, #8]
 800951a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	431a      	orrs	r2, r3
           huart->Init.Mode | huart->Init.OverSampling;
 8009520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009522:	695b      	ldr	r3, [r3, #20]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity |
 8009524:	431a      	orrs	r2, r3
           huart->Init.Mode | huart->Init.OverSampling;
 8009526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009528:	69db      	ldr	r3, [r3, #28]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity |
 800952a:	4313      	orrs	r3, r2
 800952c:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800952e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4ab9      	ldr	r2, [pc, #740]	; (800981c <UART_SetConfig+0x31c>)
 8009536:	4013      	ands	r3, r2
 8009538:	0019      	movs	r1, r3
 800953a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009540:	430b      	orrs	r3, r1
 8009542:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	4ab5      	ldr	r2, [pc, #724]	; (8009820 <UART_SetConfig+0x320>)
 800954c:	4013      	ands	r3, r2
 800954e:	0018      	movs	r0, r3
 8009550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009552:	68d9      	ldr	r1, [r3, #12]
 8009554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	0003      	movs	r3, r0
 800955a:	430b      	orrs	r3, r1
 800955c:	6053      	str	r3, [r2, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800955e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009560:	699b      	ldr	r3, [r3, #24]
 8009562:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart))) {
 8009564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4aae      	ldr	r2, [pc, #696]	; (8009824 <UART_SetConfig+0x324>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d004      	beq.n	8009578 <UART_SetConfig+0x78>
    tmpreg |= huart->Init.OneBitSampling;
 800956e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009570:	6a1b      	ldr	r3, [r3, #32]
 8009572:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009574:	4313      	orrs	r3, r2
 8009576:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	4aaa      	ldr	r2, [pc, #680]	; (8009828 <UART_SetConfig+0x328>)
 8009580:	4013      	ands	r3, r2
 8009582:	0019      	movs	r1, r3
 8009584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800958a:	430b      	orrs	r3, r1
 800958c:	6093      	str	r3, [r2, #8]
  /*-------------------------- USART PRESC Configuration
   * -----------------------*/
  /* Configure
   * - UART Clock Prescaler : set PRESCALER according to
   * huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER,
 800958e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009594:	220f      	movs	r2, #15
 8009596:	4393      	bics	r3, r2
 8009598:	0018      	movs	r0, r3
 800959a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800959e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	0003      	movs	r3, r0
 80095a4:	430b      	orrs	r3, r1
 80095a6:	62d3      	str	r3, [r2, #44]	; 0x2c
             huart->Init.ClockPrescaler);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a9f      	ldr	r2, [pc, #636]	; (800982c <UART_SetConfig+0x32c>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d136      	bne.n	8009620 <UART_SetConfig+0x120>
 80095b2:	4b9f      	ldr	r3, [pc, #636]	; (8009830 <UART_SetConfig+0x330>)
 80095b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095b6:	2203      	movs	r2, #3
 80095b8:	4013      	ands	r3, r2
 80095ba:	2b03      	cmp	r3, #3
 80095bc:	d020      	beq.n	8009600 <UART_SetConfig+0x100>
 80095be:	d827      	bhi.n	8009610 <UART_SetConfig+0x110>
 80095c0:	2b02      	cmp	r3, #2
 80095c2:	d00d      	beq.n	80095e0 <UART_SetConfig+0xe0>
 80095c4:	d824      	bhi.n	8009610 <UART_SetConfig+0x110>
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d002      	beq.n	80095d0 <UART_SetConfig+0xd0>
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d010      	beq.n	80095f0 <UART_SetConfig+0xf0>
 80095ce:	e01f      	b.n	8009610 <UART_SetConfig+0x110>
 80095d0:	231b      	movs	r3, #27
 80095d2:	2220      	movs	r2, #32
 80095d4:	4694      	mov	ip, r2
 80095d6:	44bc      	add	ip, r7
 80095d8:	4463      	add	r3, ip
 80095da:	2200      	movs	r2, #0
 80095dc:	701a      	strb	r2, [r3, #0]
 80095de:	e0c5      	b.n	800976c <UART_SetConfig+0x26c>
 80095e0:	231b      	movs	r3, #27
 80095e2:	2220      	movs	r2, #32
 80095e4:	4694      	mov	ip, r2
 80095e6:	44bc      	add	ip, r7
 80095e8:	4463      	add	r3, ip
 80095ea:	2202      	movs	r2, #2
 80095ec:	701a      	strb	r2, [r3, #0]
 80095ee:	e0bd      	b.n	800976c <UART_SetConfig+0x26c>
 80095f0:	231b      	movs	r3, #27
 80095f2:	2220      	movs	r2, #32
 80095f4:	4694      	mov	ip, r2
 80095f6:	44bc      	add	ip, r7
 80095f8:	4463      	add	r3, ip
 80095fa:	2204      	movs	r2, #4
 80095fc:	701a      	strb	r2, [r3, #0]
 80095fe:	e0b5      	b.n	800976c <UART_SetConfig+0x26c>
 8009600:	231b      	movs	r3, #27
 8009602:	2220      	movs	r2, #32
 8009604:	4694      	mov	ip, r2
 8009606:	44bc      	add	ip, r7
 8009608:	4463      	add	r3, ip
 800960a:	2208      	movs	r2, #8
 800960c:	701a      	strb	r2, [r3, #0]
 800960e:	e0ad      	b.n	800976c <UART_SetConfig+0x26c>
 8009610:	231b      	movs	r3, #27
 8009612:	2220      	movs	r2, #32
 8009614:	4694      	mov	ip, r2
 8009616:	44bc      	add	ip, r7
 8009618:	4463      	add	r3, ip
 800961a:	2210      	movs	r2, #16
 800961c:	701a      	strb	r2, [r3, #0]
 800961e:	e0a5      	b.n	800976c <UART_SetConfig+0x26c>
 8009620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a83      	ldr	r2, [pc, #524]	; (8009834 <UART_SetConfig+0x334>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d136      	bne.n	8009698 <UART_SetConfig+0x198>
 800962a:	4b81      	ldr	r3, [pc, #516]	; (8009830 <UART_SetConfig+0x330>)
 800962c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800962e:	220c      	movs	r2, #12
 8009630:	4013      	ands	r3, r2
 8009632:	2b0c      	cmp	r3, #12
 8009634:	d020      	beq.n	8009678 <UART_SetConfig+0x178>
 8009636:	d827      	bhi.n	8009688 <UART_SetConfig+0x188>
 8009638:	2b08      	cmp	r3, #8
 800963a:	d00d      	beq.n	8009658 <UART_SetConfig+0x158>
 800963c:	d824      	bhi.n	8009688 <UART_SetConfig+0x188>
 800963e:	2b00      	cmp	r3, #0
 8009640:	d002      	beq.n	8009648 <UART_SetConfig+0x148>
 8009642:	2b04      	cmp	r3, #4
 8009644:	d010      	beq.n	8009668 <UART_SetConfig+0x168>
 8009646:	e01f      	b.n	8009688 <UART_SetConfig+0x188>
 8009648:	231b      	movs	r3, #27
 800964a:	2220      	movs	r2, #32
 800964c:	4694      	mov	ip, r2
 800964e:	44bc      	add	ip, r7
 8009650:	4463      	add	r3, ip
 8009652:	2200      	movs	r2, #0
 8009654:	701a      	strb	r2, [r3, #0]
 8009656:	e089      	b.n	800976c <UART_SetConfig+0x26c>
 8009658:	231b      	movs	r3, #27
 800965a:	2220      	movs	r2, #32
 800965c:	4694      	mov	ip, r2
 800965e:	44bc      	add	ip, r7
 8009660:	4463      	add	r3, ip
 8009662:	2202      	movs	r2, #2
 8009664:	701a      	strb	r2, [r3, #0]
 8009666:	e081      	b.n	800976c <UART_SetConfig+0x26c>
 8009668:	231b      	movs	r3, #27
 800966a:	2220      	movs	r2, #32
 800966c:	4694      	mov	ip, r2
 800966e:	44bc      	add	ip, r7
 8009670:	4463      	add	r3, ip
 8009672:	2204      	movs	r2, #4
 8009674:	701a      	strb	r2, [r3, #0]
 8009676:	e079      	b.n	800976c <UART_SetConfig+0x26c>
 8009678:	231b      	movs	r3, #27
 800967a:	2220      	movs	r2, #32
 800967c:	4694      	mov	ip, r2
 800967e:	44bc      	add	ip, r7
 8009680:	4463      	add	r3, ip
 8009682:	2208      	movs	r2, #8
 8009684:	701a      	strb	r2, [r3, #0]
 8009686:	e071      	b.n	800976c <UART_SetConfig+0x26c>
 8009688:	231b      	movs	r3, #27
 800968a:	2220      	movs	r2, #32
 800968c:	4694      	mov	ip, r2
 800968e:	44bc      	add	ip, r7
 8009690:	4463      	add	r3, ip
 8009692:	2210      	movs	r2, #16
 8009694:	701a      	strb	r2, [r3, #0]
 8009696:	e069      	b.n	800976c <UART_SetConfig+0x26c>
 8009698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a66      	ldr	r2, [pc, #408]	; (8009838 <UART_SetConfig+0x338>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d107      	bne.n	80096b2 <UART_SetConfig+0x1b2>
 80096a2:	231b      	movs	r3, #27
 80096a4:	2220      	movs	r2, #32
 80096a6:	4694      	mov	ip, r2
 80096a8:	44bc      	add	ip, r7
 80096aa:	4463      	add	r3, ip
 80096ac:	2200      	movs	r2, #0
 80096ae:	701a      	strb	r2, [r3, #0]
 80096b0:	e05c      	b.n	800976c <UART_SetConfig+0x26c>
 80096b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a61      	ldr	r2, [pc, #388]	; (800983c <UART_SetConfig+0x33c>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d107      	bne.n	80096cc <UART_SetConfig+0x1cc>
 80096bc:	231b      	movs	r3, #27
 80096be:	2220      	movs	r2, #32
 80096c0:	4694      	mov	ip, r2
 80096c2:	44bc      	add	ip, r7
 80096c4:	4463      	add	r3, ip
 80096c6:	2200      	movs	r2, #0
 80096c8:	701a      	strb	r2, [r3, #0]
 80096ca:	e04f      	b.n	800976c <UART_SetConfig+0x26c>
 80096cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a54      	ldr	r2, [pc, #336]	; (8009824 <UART_SetConfig+0x324>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d143      	bne.n	800975e <UART_SetConfig+0x25e>
 80096d6:	4b56      	ldr	r3, [pc, #344]	; (8009830 <UART_SetConfig+0x330>)
 80096d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096da:	23c0      	movs	r3, #192	; 0xc0
 80096dc:	011b      	lsls	r3, r3, #4
 80096de:	4013      	ands	r3, r2
 80096e0:	22c0      	movs	r2, #192	; 0xc0
 80096e2:	0112      	lsls	r2, r2, #4
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d02a      	beq.n	800973e <UART_SetConfig+0x23e>
 80096e8:	22c0      	movs	r2, #192	; 0xc0
 80096ea:	0112      	lsls	r2, r2, #4
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d82e      	bhi.n	800974e <UART_SetConfig+0x24e>
 80096f0:	2280      	movs	r2, #128	; 0x80
 80096f2:	0112      	lsls	r2, r2, #4
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d012      	beq.n	800971e <UART_SetConfig+0x21e>
 80096f8:	2280      	movs	r2, #128	; 0x80
 80096fa:	0112      	lsls	r2, r2, #4
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d826      	bhi.n	800974e <UART_SetConfig+0x24e>
 8009700:	2b00      	cmp	r3, #0
 8009702:	d004      	beq.n	800970e <UART_SetConfig+0x20e>
 8009704:	2280      	movs	r2, #128	; 0x80
 8009706:	00d2      	lsls	r2, r2, #3
 8009708:	4293      	cmp	r3, r2
 800970a:	d010      	beq.n	800972e <UART_SetConfig+0x22e>
 800970c:	e01f      	b.n	800974e <UART_SetConfig+0x24e>
 800970e:	231b      	movs	r3, #27
 8009710:	2220      	movs	r2, #32
 8009712:	4694      	mov	ip, r2
 8009714:	44bc      	add	ip, r7
 8009716:	4463      	add	r3, ip
 8009718:	2200      	movs	r2, #0
 800971a:	701a      	strb	r2, [r3, #0]
 800971c:	e026      	b.n	800976c <UART_SetConfig+0x26c>
 800971e:	231b      	movs	r3, #27
 8009720:	2220      	movs	r2, #32
 8009722:	4694      	mov	ip, r2
 8009724:	44bc      	add	ip, r7
 8009726:	4463      	add	r3, ip
 8009728:	2202      	movs	r2, #2
 800972a:	701a      	strb	r2, [r3, #0]
 800972c:	e01e      	b.n	800976c <UART_SetConfig+0x26c>
 800972e:	231b      	movs	r3, #27
 8009730:	2220      	movs	r2, #32
 8009732:	4694      	mov	ip, r2
 8009734:	44bc      	add	ip, r7
 8009736:	4463      	add	r3, ip
 8009738:	2204      	movs	r2, #4
 800973a:	701a      	strb	r2, [r3, #0]
 800973c:	e016      	b.n	800976c <UART_SetConfig+0x26c>
 800973e:	231b      	movs	r3, #27
 8009740:	2220      	movs	r2, #32
 8009742:	4694      	mov	ip, r2
 8009744:	44bc      	add	ip, r7
 8009746:	4463      	add	r3, ip
 8009748:	2208      	movs	r2, #8
 800974a:	701a      	strb	r2, [r3, #0]
 800974c:	e00e      	b.n	800976c <UART_SetConfig+0x26c>
 800974e:	231b      	movs	r3, #27
 8009750:	2220      	movs	r2, #32
 8009752:	4694      	mov	ip, r2
 8009754:	44bc      	add	ip, r7
 8009756:	4463      	add	r3, ip
 8009758:	2210      	movs	r2, #16
 800975a:	701a      	strb	r2, [r3, #0]
 800975c:	e006      	b.n	800976c <UART_SetConfig+0x26c>
 800975e:	231b      	movs	r3, #27
 8009760:	2220      	movs	r2, #32
 8009762:	4694      	mov	ip, r2
 8009764:	44bc      	add	ip, r7
 8009766:	4463      	add	r3, ip
 8009768:	2210      	movs	r2, #16
 800976a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart)) {
 800976c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a2c      	ldr	r2, [pc, #176]	; (8009824 <UART_SetConfig+0x324>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d000      	beq.n	8009778 <UART_SetConfig+0x278>
 8009776:	e0ad      	b.n	80098d4 <UART_SetConfig+0x3d4>
    /* Retrieve frequency clock */
    switch (clocksource) {
 8009778:	231b      	movs	r3, #27
 800977a:	2220      	movs	r2, #32
 800977c:	4694      	mov	ip, r2
 800977e:	44bc      	add	ip, r7
 8009780:	4463      	add	r3, ip
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	2b08      	cmp	r3, #8
 8009786:	d015      	beq.n	80097b4 <UART_SetConfig+0x2b4>
 8009788:	dc18      	bgt.n	80097bc <UART_SetConfig+0x2bc>
 800978a:	2b04      	cmp	r3, #4
 800978c:	d00d      	beq.n	80097aa <UART_SetConfig+0x2aa>
 800978e:	dc15      	bgt.n	80097bc <UART_SetConfig+0x2bc>
 8009790:	2b00      	cmp	r3, #0
 8009792:	d002      	beq.n	800979a <UART_SetConfig+0x29a>
 8009794:	2b02      	cmp	r3, #2
 8009796:	d005      	beq.n	80097a4 <UART_SetConfig+0x2a4>
 8009798:	e010      	b.n	80097bc <UART_SetConfig+0x2bc>
    case UART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800979a:	f7fd fd2b 	bl	80071f4 <HAL_RCC_GetPCLK1Freq>
 800979e:	0003      	movs	r3, r0
 80097a0:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80097a2:	e015      	b.n	80097d0 <UART_SetConfig+0x2d0>
    case UART_CLOCKSOURCE_HSI:
      pclk = (uint32_t)HSI_VALUE;
 80097a4:	4b26      	ldr	r3, [pc, #152]	; (8009840 <UART_SetConfig+0x340>)
 80097a6:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80097a8:	e012      	b.n	80097d0 <UART_SetConfig+0x2d0>
    case UART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 80097aa:	f7fd fc97 	bl	80070dc <HAL_RCC_GetSysClockFreq>
 80097ae:	0003      	movs	r3, r0
 80097b0:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80097b2:	e00d      	b.n	80097d0 <UART_SetConfig+0x2d0>
    case UART_CLOCKSOURCE_LSE:
      pclk = (uint32_t)LSE_VALUE;
 80097b4:	2380      	movs	r3, #128	; 0x80
 80097b6:	021b      	lsls	r3, r3, #8
 80097b8:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80097ba:	e009      	b.n	80097d0 <UART_SetConfig+0x2d0>
    default:
      pclk = 0U;
 80097bc:	2300      	movs	r3, #0
 80097be:	637b      	str	r3, [r7, #52]	; 0x34
      ret = HAL_ERROR;
 80097c0:	231a      	movs	r3, #26
 80097c2:	2220      	movs	r2, #32
 80097c4:	4694      	mov	ip, r2
 80097c6:	44bc      	add	ip, r7
 80097c8:	4463      	add	r3, ip
 80097ca:	2201      	movs	r2, #1
 80097cc:	701a      	strb	r2, [r3, #0]
      break;
 80097ce:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U) {
 80097d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d100      	bne.n	80097d8 <UART_SetConfig+0x2d8>
 80097d6:	e154      	b.n	8009a82 <UART_SetConfig+0x582>
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80097d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097dc:	4b19      	ldr	r3, [pc, #100]	; (8009844 <UART_SetConfig+0x344>)
 80097de:	0052      	lsls	r2, r2, #1
 80097e0:	5ad3      	ldrh	r3, [r2, r3]
 80097e2:	0019      	movs	r1, r3
 80097e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80097e6:	f7f6 fca1 	bl	800012c <__udivsi3>
 80097ea:	0003      	movs	r3, r0
 80097ec:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 *
       * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f0:	685a      	ldr	r2, [r3, #4]
 80097f2:	0013      	movs	r3, r2
 80097f4:	005b      	lsls	r3, r3, #1
 80097f6:	189b      	adds	r3, r3, r2
 80097f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d305      	bcc.n	800980a <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate))) {
 80097fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009806:	429a      	cmp	r2, r3
 8009808:	d91e      	bls.n	8009848 <UART_SetConfig+0x348>
        ret = HAL_ERROR;
 800980a:	231a      	movs	r3, #26
 800980c:	2220      	movs	r2, #32
 800980e:	4694      	mov	ip, r2
 8009810:	44bc      	add	ip, r7
 8009812:	4463      	add	r3, ip
 8009814:	2201      	movs	r2, #1
 8009816:	701a      	strb	r2, [r3, #0]
 8009818:	e133      	b.n	8009a82 <UART_SetConfig+0x582>
 800981a:	46c0      	nop			; (mov r8, r8)
 800981c:	cfff69f3 	.word	0xcfff69f3
 8009820:	ffffcfff 	.word	0xffffcfff
 8009824:	40008000 	.word	0x40008000
 8009828:	11fff4ff 	.word	0x11fff4ff
 800982c:	40013800 	.word	0x40013800
 8009830:	40021000 	.word	0x40021000
 8009834:	40004400 	.word	0x40004400
 8009838:	40004800 	.word	0x40004800
 800983c:	40004c00 	.word	0x40004c00
 8009840:	00f42400 	.word	0x00f42400
 8009844:	0800c050 	.word	0x0800c050
      } else {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR
           register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate,
 8009848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800984a:	61bb      	str	r3, [r7, #24]
 800984c:	2300      	movs	r3, #0
 800984e:	61fb      	str	r3, [r7, #28]
 8009850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009852:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009854:	4b97      	ldr	r3, [pc, #604]	; (8009ab4 <UART_SetConfig+0x5b4>)
 8009856:	0052      	lsls	r2, r2, #1
 8009858:	5ad3      	ldrh	r3, [r2, r3]
 800985a:	613b      	str	r3, [r7, #16]
 800985c:	2300      	movs	r3, #0
 800985e:	617b      	str	r3, [r7, #20]
 8009860:	693a      	ldr	r2, [r7, #16]
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	69b8      	ldr	r0, [r7, #24]
 8009866:	69f9      	ldr	r1, [r7, #28]
 8009868:	f7f6 fe14 	bl	8000494 <__aeabi_uldivmod>
 800986c:	0002      	movs	r2, r0
 800986e:	000b      	movs	r3, r1
 8009870:	0e11      	lsrs	r1, r2, #24
 8009872:	021d      	lsls	r5, r3, #8
 8009874:	430d      	orrs	r5, r1
 8009876:	0214      	lsls	r4, r2, #8
 8009878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	085b      	lsrs	r3, r3, #1
 800987e:	60bb      	str	r3, [r7, #8]
 8009880:	2300      	movs	r3, #0
 8009882:	60fb      	str	r3, [r7, #12]
 8009884:	68b8      	ldr	r0, [r7, #8]
 8009886:	68f9      	ldr	r1, [r7, #12]
 8009888:	1900      	adds	r0, r0, r4
 800988a:	4169      	adcs	r1, r5
 800988c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	603b      	str	r3, [r7, #0]
 8009892:	2300      	movs	r3, #0
 8009894:	607b      	str	r3, [r7, #4]
 8009896:	683a      	ldr	r2, [r7, #0]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f7f6 fdfb 	bl	8000494 <__aeabi_uldivmod>
 800989e:	0002      	movs	r2, r0
 80098a0:	000b      	movs	r3, r1
 80098a2:	0013      	movs	r3, r2
 80098a4:	633b      	str	r3, [r7, #48]	; 0x30
                                              huart->Init.ClockPrescaler));
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX)) {
 80098a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098a8:	23c0      	movs	r3, #192	; 0xc0
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d309      	bcc.n	80098c4 <UART_SetConfig+0x3c4>
 80098b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098b2:	2380      	movs	r3, #128	; 0x80
 80098b4:	035b      	lsls	r3, r3, #13
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d204      	bcs.n	80098c4 <UART_SetConfig+0x3c4>
          huart->Instance->BRR = usartdiv;
 80098ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098c0:	60da      	str	r2, [r3, #12]
 80098c2:	e0de      	b.n	8009a82 <UART_SetConfig+0x582>
        } else {
          ret = HAL_ERROR;
 80098c4:	231a      	movs	r3, #26
 80098c6:	2220      	movs	r2, #32
 80098c8:	4694      	mov	ip, r2
 80098ca:	44bc      	add	ip, r7
 80098cc:	4463      	add	r3, ip
 80098ce:	2201      	movs	r2, #1
 80098d0:	701a      	strb	r2, [r3, #0]
 80098d2:	e0d6      	b.n	8009a82 <UART_SetConfig+0x582>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    }   /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 80098d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d6:	69da      	ldr	r2, [r3, #28]
 80098d8:	2380      	movs	r3, #128	; 0x80
 80098da:	021b      	lsls	r3, r3, #8
 80098dc:	429a      	cmp	r2, r3
 80098de:	d000      	beq.n	80098e2 <UART_SetConfig+0x3e2>
 80098e0:	e074      	b.n	80099cc <UART_SetConfig+0x4cc>
    switch (clocksource) {
 80098e2:	231b      	movs	r3, #27
 80098e4:	2220      	movs	r2, #32
 80098e6:	4694      	mov	ip, r2
 80098e8:	44bc      	add	ip, r7
 80098ea:	4463      	add	r3, ip
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	2b08      	cmp	r3, #8
 80098f0:	d015      	beq.n	800991e <UART_SetConfig+0x41e>
 80098f2:	dc18      	bgt.n	8009926 <UART_SetConfig+0x426>
 80098f4:	2b04      	cmp	r3, #4
 80098f6:	d00d      	beq.n	8009914 <UART_SetConfig+0x414>
 80098f8:	dc15      	bgt.n	8009926 <UART_SetConfig+0x426>
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d002      	beq.n	8009904 <UART_SetConfig+0x404>
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d005      	beq.n	800990e <UART_SetConfig+0x40e>
 8009902:	e010      	b.n	8009926 <UART_SetConfig+0x426>
    case UART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8009904:	f7fd fc76 	bl	80071f4 <HAL_RCC_GetPCLK1Freq>
 8009908:	0003      	movs	r3, r0
 800990a:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800990c:	e015      	b.n	800993a <UART_SetConfig+0x43a>
    case UART_CLOCKSOURCE_HSI:
      pclk = (uint32_t)HSI_VALUE;
 800990e:	4b6a      	ldr	r3, [pc, #424]	; (8009ab8 <UART_SetConfig+0x5b8>)
 8009910:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8009912:	e012      	b.n	800993a <UART_SetConfig+0x43a>
    case UART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8009914:	f7fd fbe2 	bl	80070dc <HAL_RCC_GetSysClockFreq>
 8009918:	0003      	movs	r3, r0
 800991a:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800991c:	e00d      	b.n	800993a <UART_SetConfig+0x43a>
    case UART_CLOCKSOURCE_LSE:
      pclk = (uint32_t)LSE_VALUE;
 800991e:	2380      	movs	r3, #128	; 0x80
 8009920:	021b      	lsls	r3, r3, #8
 8009922:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8009924:	e009      	b.n	800993a <UART_SetConfig+0x43a>
    default:
      pclk = 0U;
 8009926:	2300      	movs	r3, #0
 8009928:	637b      	str	r3, [r7, #52]	; 0x34
      ret = HAL_ERROR;
 800992a:	231a      	movs	r3, #26
 800992c:	2220      	movs	r2, #32
 800992e:	4694      	mov	ip, r2
 8009930:	44bc      	add	ip, r7
 8009932:	4463      	add	r3, ip
 8009934:	2201      	movs	r2, #1
 8009936:	701a      	strb	r2, [r3, #0]
      break;
 8009938:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U) {
 800993a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800993c:	2b00      	cmp	r3, #0
 800993e:	d100      	bne.n	8009942 <UART_SetConfig+0x442>
 8009940:	e09f      	b.n	8009a82 <UART_SetConfig+0x582>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate,
 8009942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009946:	4b5b      	ldr	r3, [pc, #364]	; (8009ab4 <UART_SetConfig+0x5b4>)
 8009948:	0052      	lsls	r2, r2, #1
 800994a:	5ad3      	ldrh	r3, [r2, r3]
 800994c:	0019      	movs	r1, r3
 800994e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009950:	f7f6 fbec 	bl	800012c <__udivsi3>
 8009954:	0003      	movs	r3, r0
 8009956:	005a      	lsls	r2, r3, #1
 8009958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	085b      	lsrs	r3, r3, #1
 800995e:	18d2      	adds	r2, r2, r3
 8009960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	0019      	movs	r1, r3
 8009966:	0010      	movs	r0, r2
 8009968:	f7f6 fbe0 	bl	800012c <__udivsi3>
 800996c:	0003      	movs	r3, r0
 800996e:	b29b      	uxth	r3, r3
 8009970:	633b      	str	r3, [r7, #48]	; 0x30
                                               huart->Init.ClockPrescaler));
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 8009972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009974:	2b0f      	cmp	r3, #15
 8009976:	d921      	bls.n	80099bc <UART_SetConfig+0x4bc>
 8009978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800997a:	2380      	movs	r3, #128	; 0x80
 800997c:	025b      	lsls	r3, r3, #9
 800997e:	429a      	cmp	r2, r3
 8009980:	d21c      	bcs.n	80099bc <UART_SetConfig+0x4bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009984:	b29a      	uxth	r2, r3
 8009986:	200e      	movs	r0, #14
 8009988:	2420      	movs	r4, #32
 800998a:	193b      	adds	r3, r7, r4
 800998c:	181b      	adds	r3, r3, r0
 800998e:	210f      	movs	r1, #15
 8009990:	438a      	bics	r2, r1
 8009992:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009996:	085b      	lsrs	r3, r3, #1
 8009998:	b29b      	uxth	r3, r3
 800999a:	2207      	movs	r2, #7
 800999c:	4013      	ands	r3, r2
 800999e:	b299      	uxth	r1, r3
 80099a0:	193b      	adds	r3, r7, r4
 80099a2:	181b      	adds	r3, r3, r0
 80099a4:	193a      	adds	r2, r7, r4
 80099a6:	1812      	adds	r2, r2, r0
 80099a8:	8812      	ldrh	r2, [r2, #0]
 80099aa:	430a      	orrs	r2, r1
 80099ac:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80099ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	193a      	adds	r2, r7, r4
 80099b4:	1812      	adds	r2, r2, r0
 80099b6:	8812      	ldrh	r2, [r2, #0]
 80099b8:	60da      	str	r2, [r3, #12]
 80099ba:	e062      	b.n	8009a82 <UART_SetConfig+0x582>
      } else {
        ret = HAL_ERROR;
 80099bc:	231a      	movs	r3, #26
 80099be:	2220      	movs	r2, #32
 80099c0:	4694      	mov	ip, r2
 80099c2:	44bc      	add	ip, r7
 80099c4:	4463      	add	r3, ip
 80099c6:	2201      	movs	r2, #1
 80099c8:	701a      	strb	r2, [r3, #0]
 80099ca:	e05a      	b.n	8009a82 <UART_SetConfig+0x582>
      }
    }
  } else {
    switch (clocksource) {
 80099cc:	231b      	movs	r3, #27
 80099ce:	2220      	movs	r2, #32
 80099d0:	4694      	mov	ip, r2
 80099d2:	44bc      	add	ip, r7
 80099d4:	4463      	add	r3, ip
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	2b08      	cmp	r3, #8
 80099da:	d015      	beq.n	8009a08 <UART_SetConfig+0x508>
 80099dc:	dc18      	bgt.n	8009a10 <UART_SetConfig+0x510>
 80099de:	2b04      	cmp	r3, #4
 80099e0:	d00d      	beq.n	80099fe <UART_SetConfig+0x4fe>
 80099e2:	dc15      	bgt.n	8009a10 <UART_SetConfig+0x510>
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d002      	beq.n	80099ee <UART_SetConfig+0x4ee>
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	d005      	beq.n	80099f8 <UART_SetConfig+0x4f8>
 80099ec:	e010      	b.n	8009a10 <UART_SetConfig+0x510>
    case UART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 80099ee:	f7fd fc01 	bl	80071f4 <HAL_RCC_GetPCLK1Freq>
 80099f2:	0003      	movs	r3, r0
 80099f4:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80099f6:	e015      	b.n	8009a24 <UART_SetConfig+0x524>
    case UART_CLOCKSOURCE_HSI:
      pclk = (uint32_t)HSI_VALUE;
 80099f8:	4b2f      	ldr	r3, [pc, #188]	; (8009ab8 <UART_SetConfig+0x5b8>)
 80099fa:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80099fc:	e012      	b.n	8009a24 <UART_SetConfig+0x524>
    case UART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 80099fe:	f7fd fb6d 	bl	80070dc <HAL_RCC_GetSysClockFreq>
 8009a02:	0003      	movs	r3, r0
 8009a04:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8009a06:	e00d      	b.n	8009a24 <UART_SetConfig+0x524>
    case UART_CLOCKSOURCE_LSE:
      pclk = (uint32_t)LSE_VALUE;
 8009a08:	2380      	movs	r3, #128	; 0x80
 8009a0a:	021b      	lsls	r3, r3, #8
 8009a0c:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8009a0e:	e009      	b.n	8009a24 <UART_SetConfig+0x524>
    default:
      pclk = 0U;
 8009a10:	2300      	movs	r3, #0
 8009a12:	637b      	str	r3, [r7, #52]	; 0x34
      ret = HAL_ERROR;
 8009a14:	231a      	movs	r3, #26
 8009a16:	2220      	movs	r2, #32
 8009a18:	4694      	mov	ip, r2
 8009a1a:	44bc      	add	ip, r7
 8009a1c:	4463      	add	r3, ip
 8009a1e:	2201      	movs	r2, #1
 8009a20:	701a      	strb	r2, [r3, #0]
      break;
 8009a22:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U) {
 8009a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d02b      	beq.n	8009a82 <UART_SetConfig+0x582>
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate,
 8009a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a2e:	4b21      	ldr	r3, [pc, #132]	; (8009ab4 <UART_SetConfig+0x5b4>)
 8009a30:	0052      	lsls	r2, r2, #1
 8009a32:	5ad3      	ldrh	r3, [r2, r3]
 8009a34:	0019      	movs	r1, r3
 8009a36:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009a38:	f7f6 fb78 	bl	800012c <__udivsi3>
 8009a3c:	0003      	movs	r3, r0
 8009a3e:	001a      	movs	r2, r3
 8009a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	085b      	lsrs	r3, r3, #1
 8009a46:	18d2      	adds	r2, r2, r3
 8009a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	0019      	movs	r1, r3
 8009a4e:	0010      	movs	r0, r2
 8009a50:	f7f6 fb6c 	bl	800012c <__udivsi3>
 8009a54:	0003      	movs	r3, r0
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	633b      	str	r3, [r7, #48]	; 0x30
                                                huart->Init.ClockPrescaler));
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 8009a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a5c:	2b0f      	cmp	r3, #15
 8009a5e:	d909      	bls.n	8009a74 <UART_SetConfig+0x574>
 8009a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a62:	2380      	movs	r3, #128	; 0x80
 8009a64:	025b      	lsls	r3, r3, #9
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d204      	bcs.n	8009a74 <UART_SetConfig+0x574>
        huart->Instance->BRR = usartdiv;
 8009a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a70:	60da      	str	r2, [r3, #12]
 8009a72:	e006      	b.n	8009a82 <UART_SetConfig+0x582>
      } else {
        ret = HAL_ERROR;
 8009a74:	231a      	movs	r3, #26
 8009a76:	2220      	movs	r2, #32
 8009a78:	4694      	mov	ip, r2
 8009a7a:	44bc      	add	ip, r7
 8009a7c:	4463      	add	r3, ip
 8009a7e:	2201      	movs	r2, #1
 8009a80:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a84:	226a      	movs	r2, #106	; 0x6a
 8009a86:	2101      	movs	r1, #1
 8009a88:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8009a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8c:	2268      	movs	r2, #104	; 0x68
 8009a8e:	2101      	movs	r1, #1
 8009a90:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a94:	2200      	movs	r2, #0
 8009a96:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009a9e:	231a      	movs	r3, #26
 8009aa0:	2220      	movs	r2, #32
 8009aa2:	4694      	mov	ip, r2
 8009aa4:	44bc      	add	ip, r7
 8009aa6:	4463      	add	r3, ip
 8009aa8:	781b      	ldrb	r3, [r3, #0]
}
 8009aaa:	0018      	movs	r0, r3
 8009aac:	46bd      	mov	sp, r7
 8009aae:	b010      	add	sp, #64	; 0x40
 8009ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8009ab2:	46c0      	nop			; (mov r8, r8)
 8009ab4:	0800c050 	.word	0x0800c050
 8009ab8:	00f42400 	.word	0x00f42400

08009abc <UART_AdvFeatureConfig>:
/**
 * @brief Configure the UART peripheral advanced features.
 * @param huart UART handle.
 * @retval None
 */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart) {
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac8:	2201      	movs	r2, #1
 8009aca:	4013      	ands	r3, r2
 8009acc:	d00b      	beq.n	8009ae6 <UART_AdvFeatureConfig+0x2a>
                     UART_ADVFEATURE_TXINVERT_INIT)) {
    assert_param(
        IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV,
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	4a4a      	ldr	r2, [pc, #296]	; (8009c00 <UART_AdvFeatureConfig+0x144>)
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	0019      	movs	r1, r3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	430a      	orrs	r2, r1
 8009ae4:	605a      	str	r2, [r3, #4]
               huart->AdvancedInit.TxPinLevelInvert);
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aea:	2202      	movs	r2, #2
 8009aec:	4013      	ands	r3, r2
 8009aee:	d00b      	beq.n	8009b08 <UART_AdvFeatureConfig+0x4c>
                     UART_ADVFEATURE_RXINVERT_INIT)) {
    assert_param(
        IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV,
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	4a43      	ldr	r2, [pc, #268]	; (8009c04 <UART_AdvFeatureConfig+0x148>)
 8009af8:	4013      	ands	r3, r2
 8009afa:	0019      	movs	r1, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	430a      	orrs	r2, r1
 8009b06:	605a      	str	r2, [r3, #4]
               huart->AdvancedInit.RxPinLevelInvert);
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b0c:	2204      	movs	r2, #4
 8009b0e:	4013      	ands	r3, r2
 8009b10:	d00b      	beq.n	8009b2a <UART_AdvFeatureConfig+0x6e>
                     UART_ADVFEATURE_DATAINVERT_INIT)) {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV,
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	4a3b      	ldr	r2, [pc, #236]	; (8009c08 <UART_AdvFeatureConfig+0x14c>)
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	0019      	movs	r1, r3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	430a      	orrs	r2, r1
 8009b28:	605a      	str	r2, [r3, #4]
               huart->AdvancedInit.DataInvert);
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b2e:	2208      	movs	r2, #8
 8009b30:	4013      	ands	r3, r2
 8009b32:	d00b      	beq.n	8009b4c <UART_AdvFeatureConfig+0x90>
                     UART_ADVFEATURE_SWAP_INIT)) {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	4a34      	ldr	r2, [pc, #208]	; (8009c0c <UART_AdvFeatureConfig+0x150>)
 8009b3c:	4013      	ands	r3, r2
 8009b3e:	0019      	movs	r1, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	430a      	orrs	r2, r1
 8009b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b50:	2210      	movs	r2, #16
 8009b52:	4013      	ands	r3, r2
 8009b54:	d00b      	beq.n	8009b6e <UART_AdvFeatureConfig+0xb2>
                     UART_ADVFEATURE_RXOVERRUNDISABLE_INIT)) {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS,
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	4a2c      	ldr	r2, [pc, #176]	; (8009c10 <UART_AdvFeatureConfig+0x154>)
 8009b5e:	4013      	ands	r3, r2
 8009b60:	0019      	movs	r1, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	430a      	orrs	r2, r1
 8009b6c:	609a      	str	r2, [r3, #8]
               huart->AdvancedInit.OverrunDisable);
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b72:	2220      	movs	r2, #32
 8009b74:	4013      	ands	r3, r2
 8009b76:	d00b      	beq.n	8009b90 <UART_AdvFeatureConfig+0xd4>
                     UART_ADVFEATURE_DMADISABLEONERROR_INIT)) {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(
        huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE,
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	4a25      	ldr	r2, [pc, #148]	; (8009c14 <UART_AdvFeatureConfig+0x158>)
 8009b80:	4013      	ands	r3, r2
 8009b82:	0019      	movs	r1, r3
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	430a      	orrs	r2, r1
 8009b8e:	609a      	str	r2, [r3, #8]
               huart->AdvancedInit.DMADisableonRxError);
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b94:	2240      	movs	r2, #64	; 0x40
 8009b96:	4013      	ands	r3, r2
 8009b98:	d01d      	beq.n	8009bd6 <UART_AdvFeatureConfig+0x11a>
                     UART_ADVFEATURE_AUTOBAUDRATE_INIT)) {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(
        huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN,
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	4a1d      	ldr	r2, [pc, #116]	; (8009c18 <UART_AdvFeatureConfig+0x15c>)
 8009ba2:	4013      	ands	r3, r2
 8009ba4:	0019      	movs	r1, r3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	430a      	orrs	r2, r1
 8009bb0:	605a      	str	r2, [r3, #4]
               huart->AdvancedInit.AutoBaudRateEnable);
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable ==
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bb6:	2380      	movs	r3, #128	; 0x80
 8009bb8:	035b      	lsls	r3, r3, #13
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d10b      	bne.n	8009bd6 <UART_AdvFeatureConfig+0x11a>
        UART_ADVFEATURE_AUTOBAUDRATE_ENABLE) {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(
          huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE,
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	4a15      	ldr	r2, [pc, #84]	; (8009c1c <UART_AdvFeatureConfig+0x160>)
 8009bc6:	4013      	ands	r3, r2
 8009bc8:	0019      	movs	r1, r3
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	430a      	orrs	r2, r1
 8009bd4:	605a      	str	r2, [r3, #4]
                 huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bda:	2280      	movs	r2, #128	; 0x80
 8009bdc:	4013      	ands	r3, r2
 8009bde:	d00b      	beq.n	8009bf8 <UART_AdvFeatureConfig+0x13c>
                     UART_ADVFEATURE_MSBFIRST_INIT)) {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST,
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	4a0e      	ldr	r2, [pc, #56]	; (8009c20 <UART_AdvFeatureConfig+0x164>)
 8009be8:	4013      	ands	r3, r2
 8009bea:	0019      	movs	r1, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	430a      	orrs	r2, r1
 8009bf6:	605a      	str	r2, [r3, #4]
               huart->AdvancedInit.MSBFirst);
  }
}
 8009bf8:	46c0      	nop			; (mov r8, r8)
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	b002      	add	sp, #8
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	fffdffff 	.word	0xfffdffff
 8009c04:	fffeffff 	.word	0xfffeffff
 8009c08:	fffbffff 	.word	0xfffbffff
 8009c0c:	ffff7fff 	.word	0xffff7fff
 8009c10:	ffffefff 	.word	0xffffefff
 8009c14:	ffffdfff 	.word	0xffffdfff
 8009c18:	ffefffff 	.word	0xffefffff
 8009c1c:	ff9fffff 	.word	0xff9fffff
 8009c20:	fff7ffff 	.word	0xfff7ffff

08009c24 <UART_CheckIdleState>:
/**
 * @brief Check the UART Idle State.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart) {
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b086      	sub	sp, #24
 8009c28:	af02      	add	r7, sp, #8
 8009c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	228c      	movs	r2, #140	; 0x8c
 8009c30:	2100      	movs	r1, #0
 8009c32:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c34:	f7fb fd64 	bl	8005700 <HAL_GetTick>
 8009c38:	0003      	movs	r3, r0
 8009c3a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE) {
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2208      	movs	r2, #8
 8009c44:	4013      	ands	r3, r2
 8009c46:	2b08      	cmp	r3, #8
 8009c48:	d10c      	bne.n	8009c64 <UART_CheckIdleState+0x40>
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart,
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2280      	movs	r2, #128	; 0x80
 8009c4e:	0391      	lsls	r1, r2, #14
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	4a18      	ldr	r2, [pc, #96]	; (8009cb4 <UART_CheckIdleState+0x90>)
 8009c54:	9200      	str	r2, [sp, #0]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f000 f82e 	bl	8009cb8 <UART_WaitOnFlagUntilTimeout>
 8009c5c:	1e03      	subs	r3, r0, #0
 8009c5e:	d001      	beq.n	8009c64 <UART_CheckIdleState+0x40>
                                    HAL_UART_TIMEOUT_VALUE) != HAL_OK) {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c60:	2303      	movs	r3, #3
 8009c62:	e023      	b.n	8009cac <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE) {
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2204      	movs	r2, #4
 8009c6c:	4013      	ands	r3, r2
 8009c6e:	2b04      	cmp	r3, #4
 8009c70:	d10c      	bne.n	8009c8c <UART_CheckIdleState+0x68>
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart,
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2280      	movs	r2, #128	; 0x80
 8009c76:	03d1      	lsls	r1, r2, #15
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	4a0e      	ldr	r2, [pc, #56]	; (8009cb4 <UART_CheckIdleState+0x90>)
 8009c7c:	9200      	str	r2, [sp, #0]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f000 f81a 	bl	8009cb8 <UART_WaitOnFlagUntilTimeout>
 8009c84:	1e03      	subs	r3, r0, #0
 8009c86:	d001      	beq.n	8009c8c <UART_CheckIdleState+0x68>
                                    HAL_UART_TIMEOUT_VALUE) != HAL_OK) {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c88:	2303      	movs	r3, #3
 8009c8a:	e00f      	b.n	8009cac <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2284      	movs	r2, #132	; 0x84
 8009c90:	2120      	movs	r1, #32
 8009c92:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2288      	movs	r2, #136	; 0x88
 8009c98:	2120      	movs	r1, #32
 8009c9a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2280      	movs	r2, #128	; 0x80
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	0018      	movs	r0, r3
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	b004      	add	sp, #16
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	01ffffff 	.word	0x01ffffff

08009cb8 <UART_WaitOnFlagUntilTimeout>:
 * @retval HAL status
 */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart,
                                              uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart,
                                              uint32_t Timeout) {
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b094      	sub	sp, #80	; 0x50
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	603b      	str	r3, [r7, #0]
 8009cc4:	1dfb      	adds	r3, r7, #7
 8009cc6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8009cc8:	e0a7      	b.n	8009e1a <UART_WaitOnFlagUntilTimeout+0x162>
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY) {
 8009cca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ccc:	3301      	adds	r3, #1
 8009cce:	d100      	bne.n	8009cd2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8009cd0:	e0a3      	b.n	8009e1a <UART_WaitOnFlagUntilTimeout+0x162>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8009cd2:	f7fb fd15 	bl	8005700 <HAL_GetTick>
 8009cd6:	0002      	movs	r2, r0
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	1ad3      	subs	r3, r2, r3
 8009cdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d302      	bcc.n	8009ce8 <UART_WaitOnFlagUntilTimeout+0x30>
 8009ce2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d13f      	bne.n	8009d68 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ce8:	f3ef 8310 	mrs	r3, PRIMASK
 8009cec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8009cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun
           error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8009cf0:	647b      	str	r3, [r7, #68]	; 0x44
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf8:	f383 8810 	msr	PRIMASK, r3
}
 8009cfc:	46c0      	nop			; (mov r8, r8)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	494e      	ldr	r1, [pc, #312]	; (8009e44 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8009d0a:	400a      	ands	r2, r1
 8009d0c:	601a      	str	r2, [r3, #0]
 8009d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d10:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d14:	f383 8810 	msr	PRIMASK, r3
}
 8009d18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d1a:	f3ef 8310 	mrs	r3, PRIMASK
 8009d1e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8009d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                         (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                          USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d22:	643b      	str	r3, [r7, #64]	; 0x40
 8009d24:	2301      	movs	r3, #1
 8009d26:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d2a:	f383 8810 	msr	PRIMASK, r3
}
 8009d2e:	46c0      	nop			; (mov r8, r8)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	689a      	ldr	r2, [r3, #8]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2101      	movs	r1, #1
 8009d3c:	438a      	bics	r2, r1
 8009d3e:	609a      	str	r2, [r3, #8]
 8009d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d42:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d46:	f383 8810 	msr	PRIMASK, r3
}
 8009d4a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2284      	movs	r2, #132	; 0x84
 8009d50:	2120      	movs	r1, #32
 8009d52:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2288      	movs	r2, #136	; 0x88
 8009d58:	2120      	movs	r1, #32
 8009d5a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2280      	movs	r2, #128	; 0x80
 8009d60:	2100      	movs	r1, #0
 8009d62:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009d64:	2303      	movs	r3, #3
 8009d66:	e069      	b.n	8009e3c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) {
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2204      	movs	r2, #4
 8009d70:	4013      	ands	r3, r2
 8009d72:	d052      	beq.n	8009e1a <UART_WaitOnFlagUntilTimeout+0x162>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET) {
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	69da      	ldr	r2, [r3, #28]
 8009d7a:	2380      	movs	r3, #128	; 0x80
 8009d7c:	011b      	lsls	r3, r3, #4
 8009d7e:	401a      	ands	r2, r3
 8009d80:	2380      	movs	r3, #128	; 0x80
 8009d82:	011b      	lsls	r3, r3, #4
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d148      	bne.n	8009e1a <UART_WaitOnFlagUntilTimeout+0x162>
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2280      	movs	r2, #128	; 0x80
 8009d8e:	0112      	lsls	r2, r2, #4
 8009d90:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d92:	f3ef 8310 	mrs	r3, PRIMASK
 8009d96:	613b      	str	r3, [r7, #16]
  return(result);
 8009d98:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun
             error) interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8009d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	f383 8810 	msr	PRIMASK, r3
}
 8009da6:	46c0      	nop			; (mov r8, r8)
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4924      	ldr	r1, [pc, #144]	; (8009e44 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8009db4:	400a      	ands	r2, r1
 8009db6:	601a      	str	r2, [r3, #0]
 8009db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dbc:	69bb      	ldr	r3, [r7, #24]
 8009dbe:	f383 8810 	msr	PRIMASK, r3
}
 8009dc2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dc4:	f3ef 8310 	mrs	r3, PRIMASK
 8009dc8:	61fb      	str	r3, [r7, #28]
  return(result);
 8009dca:	69fb      	ldr	r3, [r7, #28]
                           (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                            USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8009dce:	2301      	movs	r3, #1
 8009dd0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dd2:	6a3b      	ldr	r3, [r7, #32]
 8009dd4:	f383 8810 	msr	PRIMASK, r3
}
 8009dd8:	46c0      	nop			; (mov r8, r8)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	689a      	ldr	r2, [r3, #8]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2101      	movs	r1, #1
 8009de6:	438a      	bics	r2, r1
 8009de8:	609a      	str	r2, [r3, #8]
 8009dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df0:	f383 8810 	msr	PRIMASK, r3
}
 8009df4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2284      	movs	r2, #132	; 0x84
 8009dfa:	2120      	movs	r1, #32
 8009dfc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2288      	movs	r2, #136	; 0x88
 8009e02:	2120      	movs	r1, #32
 8009e04:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	228c      	movs	r2, #140	; 0x8c
 8009e0a:	2120      	movs	r1, #32
 8009e0c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2280      	movs	r2, #128	; 0x80
 8009e12:	2100      	movs	r1, #0
 8009e14:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009e16:	2303      	movs	r3, #3
 8009e18:	e010      	b.n	8009e3c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	69db      	ldr	r3, [r3, #28]
 8009e20:	68ba      	ldr	r2, [r7, #8]
 8009e22:	4013      	ands	r3, r2
 8009e24:	68ba      	ldr	r2, [r7, #8]
 8009e26:	1ad3      	subs	r3, r2, r3
 8009e28:	425a      	negs	r2, r3
 8009e2a:	4153      	adcs	r3, r2
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	001a      	movs	r2, r3
 8009e30:	1dfb      	adds	r3, r7, #7
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d100      	bne.n	8009e3a <UART_WaitOnFlagUntilTimeout+0x182>
 8009e38:	e747      	b.n	8009cca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	0018      	movs	r0, r3
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	b014      	add	sp, #80	; 0x50
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	fffffe5f 	.word	0xfffffe5f

08009e48 <UART_Start_Receive_IT>:
 * @param  pData Pointer to data buffer (u8 or u16 data elements).
 * @param  Size  Amount of data elements (u8 or u16) to be received.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart,
                                        uint8_t *pData, uint16_t Size) {
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b094      	sub	sp, #80	; 0x50
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	1dbb      	adds	r3, r7, #6
 8009e54:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	1dba      	adds	r2, r7, #6
 8009e60:	215c      	movs	r1, #92	; 0x5c
 8009e62:	8812      	ldrh	r2, [r2, #0]
 8009e64:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	1dba      	adds	r2, r7, #6
 8009e6a:	215e      	movs	r1, #94	; 0x5e
 8009e6c:	8812      	ldrh	r2, [r2, #0]
 8009e6e:	525a      	strh	r2, [r3, r1]
  huart->RxISR = NULL;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2200      	movs	r2, #0
 8009e74:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	689a      	ldr	r2, [r3, #8]
 8009e7a:	2380      	movs	r3, #128	; 0x80
 8009e7c:	015b      	lsls	r3, r3, #5
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d10d      	bne.n	8009e9e <UART_Start_Receive_IT+0x56>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d104      	bne.n	8009e94 <UART_Start_Receive_IT+0x4c>
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2260      	movs	r2, #96	; 0x60
 8009e8e:	496f      	ldr	r1, [pc, #444]	; (800a04c <UART_Start_Receive_IT+0x204>)
 8009e90:	5299      	strh	r1, [r3, r2]
 8009e92:	e02e      	b.n	8009ef2 <UART_Start_Receive_IT+0xaa>
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2260      	movs	r2, #96	; 0x60
 8009e98:	21ff      	movs	r1, #255	; 0xff
 8009e9a:	5299      	strh	r1, [r3, r2]
 8009e9c:	e029      	b.n	8009ef2 <UART_Start_Receive_IT+0xaa>
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d10d      	bne.n	8009ec2 <UART_Start_Receive_IT+0x7a>
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	691b      	ldr	r3, [r3, #16]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d104      	bne.n	8009eb8 <UART_Start_Receive_IT+0x70>
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2260      	movs	r2, #96	; 0x60
 8009eb2:	21ff      	movs	r1, #255	; 0xff
 8009eb4:	5299      	strh	r1, [r3, r2]
 8009eb6:	e01c      	b.n	8009ef2 <UART_Start_Receive_IT+0xaa>
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2260      	movs	r2, #96	; 0x60
 8009ebc:	217f      	movs	r1, #127	; 0x7f
 8009ebe:	5299      	strh	r1, [r3, r2]
 8009ec0:	e017      	b.n	8009ef2 <UART_Start_Receive_IT+0xaa>
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	689a      	ldr	r2, [r3, #8]
 8009ec6:	2380      	movs	r3, #128	; 0x80
 8009ec8:	055b      	lsls	r3, r3, #21
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d10d      	bne.n	8009eea <UART_Start_Receive_IT+0xa2>
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d104      	bne.n	8009ee0 <UART_Start_Receive_IT+0x98>
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2260      	movs	r2, #96	; 0x60
 8009eda:	217f      	movs	r1, #127	; 0x7f
 8009edc:	5299      	strh	r1, [r3, r2]
 8009ede:	e008      	b.n	8009ef2 <UART_Start_Receive_IT+0xaa>
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2260      	movs	r2, #96	; 0x60
 8009ee4:	213f      	movs	r1, #63	; 0x3f
 8009ee6:	5299      	strh	r1, [r3, r2]
 8009ee8:	e003      	b.n	8009ef2 <UART_Start_Receive_IT+0xaa>
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2260      	movs	r2, #96	; 0x60
 8009eee:	2100      	movs	r1, #0
 8009ef0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	228c      	movs	r2, #140	; 0x8c
 8009ef6:	2100      	movs	r1, #0
 8009ef8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2288      	movs	r2, #136	; 0x88
 8009efe:	2122      	movs	r1, #34	; 0x22
 8009f00:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f02:	f3ef 8310 	mrs	r3, PRIMASK
 8009f06:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8009f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error)
   */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f12:	f383 8810 	msr	PRIMASK, r3
}
 8009f16:	46c0      	nop			; (mov r8, r8)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	689a      	ldr	r2, [r3, #8]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2101      	movs	r1, #1
 8009f24:	430a      	orrs	r2, r1
 8009f26:	609a      	str	r2, [r3, #8]
 8009f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f2e:	f383 8810 	msr	PRIMASK, r3
}
 8009f32:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) &&
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009f38:	2380      	movs	r3, #128	; 0x80
 8009f3a:	059b      	lsls	r3, r3, #22
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d150      	bne.n	8009fe2 <UART_Start_Receive_IT+0x19a>
      (Size >= huart->NbRxDataToProcess)) {
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2268      	movs	r2, #104	; 0x68
 8009f44:	5a9b      	ldrh	r3, [r3, r2]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) &&
 8009f46:	1dba      	adds	r2, r7, #6
 8009f48:	8812      	ldrh	r2, [r2, #0]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d349      	bcc.n	8009fe2 <UART_Start_Receive_IT+0x19a>
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) &&
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	689a      	ldr	r2, [r3, #8]
 8009f52:	2380      	movs	r3, #128	; 0x80
 8009f54:	015b      	lsls	r3, r3, #5
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d107      	bne.n	8009f6a <UART_Start_Receive_IT+0x122>
        (huart->Init.Parity == UART_PARITY_NONE)) {
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	691b      	ldr	r3, [r3, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) &&
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d103      	bne.n	8009f6a <UART_Start_Receive_IT+0x122>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	4a3a      	ldr	r2, [pc, #232]	; (800a050 <UART_Start_Receive_IT+0x208>)
 8009f66:	671a      	str	r2, [r3, #112]	; 0x70
 8009f68:	e002      	b.n	8009f70 <UART_Start_Receive_IT+0x128>
    } else {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	4a39      	ldr	r2, [pc, #228]	; (800a054 <UART_Start_Receive_IT+0x20c>)
 8009f6e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2280      	movs	r2, #128	; 0x80
 8009f74:	2100      	movs	r1, #0
 8009f76:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f78:	f3ef 8310 	mrs	r3, PRIMASK
 8009f7c:	61fb      	str	r3, [r7, #28]
  return(result);
 8009f7e:	69fb      	ldr	r3, [r7, #28]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f80:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f82:	2301      	movs	r3, #1
 8009f84:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f86:	6a3b      	ldr	r3, [r7, #32]
 8009f88:	f383 8810 	msr	PRIMASK, r3
}
 8009f8c:	46c0      	nop			; (mov r8, r8)
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2180      	movs	r1, #128	; 0x80
 8009f9a:	0049      	lsls	r1, r1, #1
 8009f9c:	430a      	orrs	r2, r1
 8009f9e:	601a      	str	r2, [r3, #0]
 8009fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fa2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa6:	f383 8810 	msr	PRIMASK, r3
}
 8009faa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fac:	f3ef 8310 	mrs	r3, PRIMASK
 8009fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8009fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009fb4:	647b      	str	r3, [r7, #68]	; 0x44
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fbc:	f383 8810 	msr	PRIMASK, r3
}
 8009fc0:	46c0      	nop			; (mov r8, r8)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	689a      	ldr	r2, [r3, #8]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2180      	movs	r1, #128	; 0x80
 8009fce:	0549      	lsls	r1, r1, #21
 8009fd0:	430a      	orrs	r2, r1
 8009fd2:	609a      	str	r2, [r3, #8]
 8009fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fd6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fda:	f383 8810 	msr	PRIMASK, r3
}
 8009fde:	46c0      	nop			; (mov r8, r8)
 8009fe0:	e02e      	b.n	800a040 <UART_Start_Receive_IT+0x1f8>
  } else {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) &&
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	689a      	ldr	r2, [r3, #8]
 8009fe6:	2380      	movs	r3, #128	; 0x80
 8009fe8:	015b      	lsls	r3, r3, #5
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d107      	bne.n	8009ffe <UART_Start_Receive_IT+0x1b6>
        (huart->Init.Parity == UART_PARITY_NONE)) {
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	691b      	ldr	r3, [r3, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) &&
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d103      	bne.n	8009ffe <UART_Start_Receive_IT+0x1b6>
      huart->RxISR = UART_RxISR_16BIT;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	4a17      	ldr	r2, [pc, #92]	; (800a058 <UART_Start_Receive_IT+0x210>)
 8009ffa:	671a      	str	r2, [r3, #112]	; 0x70
 8009ffc:	e002      	b.n	800a004 <UART_Start_Receive_IT+0x1bc>
    } else {
      huart->RxISR = UART_RxISR_8BIT;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	4a16      	ldr	r2, [pc, #88]	; (800a05c <UART_Start_Receive_IT+0x214>)
 800a002:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2280      	movs	r2, #128	; 0x80
 800a008:	2100      	movs	r1, #0
 800a00a:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a00c:	f3ef 8310 	mrs	r3, PRIMASK
 800a010:	613b      	str	r3, [r7, #16]
  return(result);
 800a012:	693b      	ldr	r3, [r7, #16]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty
     * interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1,
 800a014:	643b      	str	r3, [r7, #64]	; 0x40
 800a016:	2301      	movs	r3, #1
 800a018:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	f383 8810 	msr	PRIMASK, r3
}
 800a020:	46c0      	nop			; (mov r8, r8)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	2190      	movs	r1, #144	; 0x90
 800a02e:	0049      	lsls	r1, r1, #1
 800a030:	430a      	orrs	r2, r1
 800a032:	601a      	str	r2, [r3, #0]
 800a034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a036:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	f383 8810 	msr	PRIMASK, r3
}
 800a03e:	46c0      	nop			; (mov r8, r8)
                   USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	0018      	movs	r0, r3
 800a044:	46bd      	mov	sp, r7
 800a046:	b014      	add	sp, #80	; 0x50
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	46c0      	nop			; (mov r8, r8)
 800a04c:	000001ff 	.word	0x000001ff
 800a050:	0800a771 	.word	0x0800a771
 800a054:	0800a48d 	.word	0x0800a48d
 800a058:	0800a321 	.word	0x0800a321
 800a05c:	0800a1b5 	.word	0x0800a1b5

0800a060 <UART_EndRxTransfer>:
 * @brief  End ongoing Rx transfer on UART peripheral (following error detection
 * or Reception completion).
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart) {
 800a060:	b580      	push	{r7, lr}
 800a062:	b08e      	sub	sp, #56	; 0x38
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a068:	f3ef 8310 	mrs	r3, PRIMASK
 800a06c:	617b      	str	r3, [r7, #20]
  return(result);
 800a06e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
   * interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 800a070:	637b      	str	r3, [r7, #52]	; 0x34
 800a072:	2301      	movs	r3, #1
 800a074:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	f383 8810 	msr	PRIMASK, r3
}
 800a07c:	46c0      	nop			; (mov r8, r8)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4926      	ldr	r1, [pc, #152]	; (800a124 <UART_EndRxTransfer+0xc4>)
 800a08a:	400a      	ands	r2, r1
 800a08c:	601a      	str	r2, [r3, #0]
 800a08e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a090:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	f383 8810 	msr	PRIMASK, r3
}
 800a098:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a09a:	f3ef 8310 	mrs	r3, PRIMASK
 800a09e:	623b      	str	r3, [r7, #32]
  return(result);
 800a0a0:	6a3b      	ldr	r3, [r7, #32]
                   (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0a2:	633b      	str	r3, [r7, #48]	; 0x30
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0aa:	f383 8810 	msr	PRIMASK, r3
}
 800a0ae:	46c0      	nop			; (mov r8, r8)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	689a      	ldr	r2, [r3, #8]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	491b      	ldr	r1, [pc, #108]	; (800a128 <UART_EndRxTransfer+0xc8>)
 800a0bc:	400a      	ands	r2, r1
 800a0be:	609a      	str	r2, [r3, #8]
 800a0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c6:	f383 8810 	msr	PRIMASK, r3
}
 800a0ca:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE
   * interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d118      	bne.n	800a106 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0d4:	f3ef 8310 	mrs	r3, PRIMASK
 800a0d8:	60bb      	str	r3, [r7, #8]
  return(result);
 800a0da:	68bb      	ldr	r3, [r7, #8]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0de:	2301      	movs	r3, #1
 800a0e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f383 8810 	msr	PRIMASK, r3
}
 800a0e8:	46c0      	nop			; (mov r8, r8)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2110      	movs	r1, #16
 800a0f6:	438a      	bics	r2, r1
 800a0f8:	601a      	str	r2, [r3, #0]
 800a0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	f383 8810 	msr	PRIMASK, r3
}
 800a104:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2288      	movs	r2, #136	; 0x88
 800a10a:	2120      	movs	r1, #32
 800a10c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a11a:	46c0      	nop			; (mov r8, r8)
 800a11c:	46bd      	mov	sp, r7
 800a11e:	b00e      	add	sp, #56	; 0x38
 800a120:	bd80      	pop	{r7, pc}
 800a122:	46c0      	nop			; (mov r8, r8)
 800a124:	fffffedf 	.word	0xfffffedf
 800a128:	effffffe 	.word	0xeffffffe

0800a12c <UART_DMAAbortOnError>:
 * on Error (To be called at end of DMA Abort procedure following error
 * occurrence).
 * @param  hdma DMA handle.
 * @retval None
 */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma) {
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a138:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	225e      	movs	r2, #94	; 0x5e
 800a13e:	2100      	movs	r1, #0
 800a140:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2256      	movs	r2, #86	; 0x56
 800a146:	2100      	movs	r1, #0
 800a148:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	0018      	movs	r0, r3
 800a14e:	f7ff f9c3 	bl	80094d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a152:	46c0      	nop			; (mov r8, r8)
 800a154:	46bd      	mov	sp, r7
 800a156:	b004      	add	sp, #16
 800a158:	bd80      	pop	{r7, pc}

0800a15a <UART_EndTransmit_IT>:
 * @brief  Wrap up transmission in non-blocking mode.
 * @param  huart pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart) {
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b086      	sub	sp, #24
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a162:	f3ef 8310 	mrs	r3, PRIMASK
 800a166:	60bb      	str	r3, [r7, #8]
  return(result);
 800a168:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a16a:	617b      	str	r3, [r7, #20]
 800a16c:	2301      	movs	r3, #1
 800a16e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f383 8810 	msr	PRIMASK, r3
}
 800a176:	46c0      	nop			; (mov r8, r8)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2140      	movs	r1, #64	; 0x40
 800a184:	438a      	bics	r2, r1
 800a186:	601a      	str	r2, [r3, #0]
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	f383 8810 	msr	PRIMASK, r3
}
 800a192:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2284      	movs	r2, #132	; 0x84
 800a198:	2120      	movs	r1, #32
 800a19a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	0018      	movs	r0, r3
 800a1a6:	f7ff f98f 	bl	80094c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1aa:	46c0      	nop			; (mov r8, r8)
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	b006      	add	sp, #24
 800a1b0:	bd80      	pop	{r7, pc}
	...

0800a1b4 <UART_RxISR_8BIT>:
/**
 * @brief RX interrupt handler for 7 or 8 bits data word length .
 * @param huart UART handle.
 * @retval None
 */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart) {
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b090      	sub	sp, #64	; 0x40
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a1bc:	203e      	movs	r0, #62	; 0x3e
 800a1be:	183b      	adds	r3, r7, r0
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	2160      	movs	r1, #96	; 0x60
 800a1c4:	5a52      	ldrh	r2, [r2, r1]
 800a1c6:	801a      	strh	r2, [r3, #0]
  uint16_t uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2288      	movs	r2, #136	; 0x88
 800a1cc:	589b      	ldr	r3, [r3, r2]
 800a1ce:	2b22      	cmp	r3, #34	; 0x22
 800a1d0:	d000      	beq.n	800a1d4 <UART_RxISR_8BIT+0x20>
 800a1d2:	e097      	b.n	800a304 <UART_RxISR_8BIT+0x150>
    uhdata = (uint16_t)READ_REG(huart->Instance->RDR);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1da:	213c      	movs	r1, #60	; 0x3c
 800a1dc:	187b      	adds	r3, r7, r1
 800a1de:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a1e0:	187b      	adds	r3, r7, r1
 800a1e2:	881b      	ldrh	r3, [r3, #0]
 800a1e4:	b2da      	uxtb	r2, r3
 800a1e6:	183b      	adds	r3, r7, r0
 800a1e8:	881b      	ldrh	r3, [r3, #0]
 800a1ea:	b2d9      	uxtb	r1, r3
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1f0:	400a      	ands	r2, r1
 800a1f2:	b2d2      	uxtb	r2, r2
 800a1f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1fa:	1c5a      	adds	r2, r3, #1
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	225e      	movs	r2, #94	; 0x5e
 800a204:	5a9b      	ldrh	r3, [r3, r2]
 800a206:	b29b      	uxth	r3, r3
 800a208:	3b01      	subs	r3, #1
 800a20a:	b299      	uxth	r1, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	225e      	movs	r2, #94	; 0x5e
 800a210:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U) {
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	225e      	movs	r2, #94	; 0x5e
 800a216:	5a9b      	ldrh	r3, [r3, r2]
 800a218:	b29b      	uxth	r3, r3
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d000      	beq.n	800a220 <UART_RxISR_8BIT+0x6c>
 800a21e:	e079      	b.n	800a314 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a220:	f3ef 8310 	mrs	r3, PRIMASK
 800a224:	61bb      	str	r3, [r7, #24]
  return(result);
 800a226:	69bb      	ldr	r3, [r7, #24]
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 800a228:	63bb      	str	r3, [r7, #56]	; 0x38
 800a22a:	2301      	movs	r3, #1
 800a22c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a22e:	69fb      	ldr	r3, [r7, #28]
 800a230:	f383 8810 	msr	PRIMASK, r3
}
 800a234:	46c0      	nop			; (mov r8, r8)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4936      	ldr	r1, [pc, #216]	; (800a31c <UART_RxISR_8BIT+0x168>)
 800a242:	400a      	ands	r2, r1
 800a244:	601a      	str	r2, [r3, #0]
 800a246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a248:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a24a:	6a3b      	ldr	r3, [r7, #32]
 800a24c:	f383 8810 	msr	PRIMASK, r3
}
 800a250:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a252:	f3ef 8310 	mrs	r3, PRIMASK
 800a256:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                       (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun
       * error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a25a:	637b      	str	r3, [r7, #52]	; 0x34
 800a25c:	2301      	movs	r3, #1
 800a25e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a262:	f383 8810 	msr	PRIMASK, r3
}
 800a266:	46c0      	nop			; (mov r8, r8)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	689a      	ldr	r2, [r3, #8]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	2101      	movs	r1, #1
 800a274:	438a      	bics	r2, r1
 800a276:	609a      	str	r2, [r3, #8]
 800a278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a27a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a27e:	f383 8810 	msr	PRIMASK, r3
}
 800a282:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2288      	movs	r2, #136	; 0x88
 800a288:	2120      	movs	r1, #32
 800a28a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a296:	2b01      	cmp	r3, #1
 800a298:	d12f      	bne.n	800a2fa <UART_RxISR_8BIT+0x146>
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2a0:	f3ef 8310 	mrs	r3, PRIMASK
 800a2a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2a6:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2a8:	633b      	str	r3, [r7, #48]	; 0x30
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	f383 8810 	msr	PRIMASK, r3
}
 800a2b4:	46c0      	nop			; (mov r8, r8)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2110      	movs	r1, #16
 800a2c2:	438a      	bics	r2, r1
 800a2c4:	601a      	str	r2, [r3, #0]
 800a2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	f383 8810 	msr	PRIMASK, r3
}
 800a2d0:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET) {
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	69db      	ldr	r3, [r3, #28]
 800a2d8:	2210      	movs	r2, #16
 800a2da:	4013      	ands	r3, r2
 800a2dc:	2b10      	cmp	r3, #16
 800a2de:	d103      	bne.n	800a2e8 <UART_RxISR_8BIT+0x134>
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	2210      	movs	r2, #16
 800a2e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	225c      	movs	r2, #92	; 0x5c
 800a2ec:	5a9a      	ldrh	r2, [r3, r2]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	0011      	movs	r1, r2
 800a2f2:	0018      	movs	r0, r3
 800a2f4:	f7ff f8f8 	bl	80094e8 <HAL_UARTEx_RxEventCallback>
    }
  } else {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a2f8:	e00c      	b.n	800a314 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	0018      	movs	r0, r3
 800a2fe:	f7f8 fd2b 	bl	8002d58 <HAL_UART_RxCpltCallback>
}
 800a302:	e007      	b.n	800a314 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	699a      	ldr	r2, [r3, #24]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2108      	movs	r1, #8
 800a310:	430a      	orrs	r2, r1
 800a312:	619a      	str	r2, [r3, #24]
}
 800a314:	46c0      	nop			; (mov r8, r8)
 800a316:	46bd      	mov	sp, r7
 800a318:	b010      	add	sp, #64	; 0x40
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	fffffedf 	.word	0xfffffedf

0800a320 <UART_RxISR_16BIT>:
 * @note   Function is called under interruption only, once
 *         interruptions have been enabled by HAL_UART_Receive_IT()
 * @param huart UART handle.
 * @retval None
 */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart) {
 800a320:	b580      	push	{r7, lr}
 800a322:	b090      	sub	sp, #64	; 0x40
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a328:	203e      	movs	r0, #62	; 0x3e
 800a32a:	183b      	adds	r3, r7, r0
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	2160      	movs	r1, #96	; 0x60
 800a330:	5a52      	ldrh	r2, [r2, r1]
 800a332:	801a      	strh	r2, [r3, #0]
  uint16_t uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2288      	movs	r2, #136	; 0x88
 800a338:	589b      	ldr	r3, [r3, r2]
 800a33a:	2b22      	cmp	r3, #34	; 0x22
 800a33c:	d000      	beq.n	800a340 <UART_RxISR_16BIT+0x20>
 800a33e:	e097      	b.n	800a470 <UART_RxISR_16BIT+0x150>
    uhdata = (uint16_t)READ_REG(huart->Instance->RDR);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a346:	213c      	movs	r1, #60	; 0x3c
 800a348:	187b      	adds	r3, r7, r1
 800a34a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *)huart->pRxBuffPtr;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a350:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800a352:	187b      	adds	r3, r7, r1
 800a354:	183a      	adds	r2, r7, r0
 800a356:	881b      	ldrh	r3, [r3, #0]
 800a358:	8812      	ldrh	r2, [r2, #0]
 800a35a:	4013      	ands	r3, r2
 800a35c:	b29a      	uxth	r2, r3
 800a35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a360:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a366:	1c9a      	adds	r2, r3, #2
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	225e      	movs	r2, #94	; 0x5e
 800a370:	5a9b      	ldrh	r3, [r3, r2]
 800a372:	b29b      	uxth	r3, r3
 800a374:	3b01      	subs	r3, #1
 800a376:	b299      	uxth	r1, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	225e      	movs	r2, #94	; 0x5e
 800a37c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U) {
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	225e      	movs	r2, #94	; 0x5e
 800a382:	5a9b      	ldrh	r3, [r3, r2]
 800a384:	b29b      	uxth	r3, r3
 800a386:	2b00      	cmp	r3, #0
 800a388:	d000      	beq.n	800a38c <UART_RxISR_16BIT+0x6c>
 800a38a:	e079      	b.n	800a480 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a38c:	f3ef 8310 	mrs	r3, PRIMASK
 800a390:	617b      	str	r3, [r7, #20]
  return(result);
 800a392:	697b      	ldr	r3, [r7, #20]
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 800a394:	637b      	str	r3, [r7, #52]	; 0x34
 800a396:	2301      	movs	r3, #1
 800a398:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a39a:	69bb      	ldr	r3, [r7, #24]
 800a39c:	f383 8810 	msr	PRIMASK, r3
}
 800a3a0:	46c0      	nop			; (mov r8, r8)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4936      	ldr	r1, [pc, #216]	; (800a488 <UART_RxISR_16BIT+0x168>)
 800a3ae:	400a      	ands	r2, r1
 800a3b0:	601a      	str	r2, [r3, #0]
 800a3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3b6:	69fb      	ldr	r3, [r7, #28]
 800a3b8:	f383 8810 	msr	PRIMASK, r3
}
 800a3bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3be:	f3ef 8310 	mrs	r3, PRIMASK
 800a3c2:	623b      	str	r3, [r7, #32]
  return(result);
 800a3c4:	6a3b      	ldr	r3, [r7, #32]
                       (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun
       * error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3c6:	633b      	str	r3, [r7, #48]	; 0x30
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ce:	f383 8810 	msr	PRIMASK, r3
}
 800a3d2:	46c0      	nop			; (mov r8, r8)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	689a      	ldr	r2, [r3, #8]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2101      	movs	r1, #1
 800a3e0:	438a      	bics	r2, r1
 800a3e2:	609a      	str	r2, [r3, #8]
 800a3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ea:	f383 8810 	msr	PRIMASK, r3
}
 800a3ee:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2288      	movs	r2, #136	; 0x88
 800a3f4:	2120      	movs	r1, #32
 800a3f6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a402:	2b01      	cmp	r3, #1
 800a404:	d12f      	bne.n	800a466 <UART_RxISR_16BIT+0x146>
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a40c:	f3ef 8310 	mrs	r3, PRIMASK
 800a410:	60bb      	str	r3, [r7, #8]
  return(result);
 800a412:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a414:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a416:	2301      	movs	r3, #1
 800a418:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f383 8810 	msr	PRIMASK, r3
}
 800a420:	46c0      	nop			; (mov r8, r8)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	2110      	movs	r1, #16
 800a42e:	438a      	bics	r2, r1
 800a430:	601a      	str	r2, [r3, #0]
 800a432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a434:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	f383 8810 	msr	PRIMASK, r3
}
 800a43c:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET) {
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	69db      	ldr	r3, [r3, #28]
 800a444:	2210      	movs	r2, #16
 800a446:	4013      	ands	r3, r2
 800a448:	2b10      	cmp	r3, #16
 800a44a:	d103      	bne.n	800a454 <UART_RxISR_16BIT+0x134>
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	2210      	movs	r2, #16
 800a452:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	225c      	movs	r2, #92	; 0x5c
 800a458:	5a9a      	ldrh	r2, [r3, r2]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	0011      	movs	r1, r2
 800a45e:	0018      	movs	r0, r3
 800a460:	f7ff f842 	bl	80094e8 <HAL_UARTEx_RxEventCallback>
    }
  } else {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a464:	e00c      	b.n	800a480 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	0018      	movs	r0, r3
 800a46a:	f7f8 fc75 	bl	8002d58 <HAL_UART_RxCpltCallback>
}
 800a46e:	e007      	b.n	800a480 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	699a      	ldr	r2, [r3, #24]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2108      	movs	r1, #8
 800a47c:	430a      	orrs	r2, r1
 800a47e:	619a      	str	r2, [r3, #24]
}
 800a480:	46c0      	nop			; (mov r8, r8)
 800a482:	46bd      	mov	sp, r7
 800a484:	b010      	add	sp, #64	; 0x40
 800a486:	bd80      	pop	{r7, pc}
 800a488:	fffffedf 	.word	0xfffffedf

0800a48c <UART_RxISR_8BIT_FIFOEN>:
 * @note   Function is called under interruption only, once
 *         interruptions have been enabled by HAL_UART_Receive_IT()
 * @param huart UART handle.
 * @retval None
 */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart) {
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b09c      	sub	sp, #112	; 0x70
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a494:	236a      	movs	r3, #106	; 0x6a
 800a496:	18fb      	adds	r3, r7, r3
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	2160      	movs	r1, #96	; 0x60
 800a49c:	5a52      	ldrh	r2, [r2, r1]
 800a49e:	801a      	strh	r2, [r3, #0]
  uint16_t uhdata;
  uint16_t nb_rx_data;
  uint16_t rxdatacount;
  uint32_t isrflags = READ_REG(huart->Instance->ISR);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	69db      	ldr	r3, [r3, #28]
 800a4a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t cr1its = READ_REG(huart->Instance->CR1);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t cr3its = READ_REG(huart->Instance->CR3);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2288      	movs	r2, #136	; 0x88
 800a4bc:	589b      	ldr	r3, [r3, r2]
 800a4be:	2b22      	cmp	r3, #34	; 0x22
 800a4c0:	d000      	beq.n	800a4c4 <UART_RxISR_8BIT_FIFOEN+0x38>
 800a4c2:	e141      	b.n	800a748 <UART_RxISR_8BIT_FIFOEN+0x2bc>
    nb_rx_data = huart->NbRxDataToProcess;
 800a4c4:	235e      	movs	r3, #94	; 0x5e
 800a4c6:	18fb      	adds	r3, r7, r3
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	2168      	movs	r1, #104	; 0x68
 800a4cc:	5a52      	ldrh	r2, [r2, r1]
 800a4ce:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U)) {
 800a4d0:	e0e8      	b.n	800a6a4 <UART_RxISR_8BIT_FIFOEN+0x218>
      uhdata = (uint16_t)READ_REG(huart->Instance->RDR);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4d8:	215c      	movs	r1, #92	; 0x5c
 800a4da:	187b      	adds	r3, r7, r1
 800a4dc:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a4de:	187b      	adds	r3, r7, r1
 800a4e0:	881b      	ldrh	r3, [r3, #0]
 800a4e2:	b2da      	uxtb	r2, r3
 800a4e4:	236a      	movs	r3, #106	; 0x6a
 800a4e6:	18fb      	adds	r3, r7, r3
 800a4e8:	881b      	ldrh	r3, [r3, #0]
 800a4ea:	b2d9      	uxtb	r1, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4f0:	400a      	ands	r2, r1
 800a4f2:	b2d2      	uxtb	r2, r2
 800a4f4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4fa:	1c5a      	adds	r2, r3, #1
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	225e      	movs	r2, #94	; 0x5e
 800a504:	5a9b      	ldrh	r3, [r3, r2]
 800a506:	b29b      	uxth	r3, r3
 800a508:	3b01      	subs	r3, #1
 800a50a:	b299      	uxth	r1, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	225e      	movs	r2, #94	; 0x5e
 800a510:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	69db      	ldr	r3, [r3, #28]
 800a518:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U) {
 800a51a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a51c:	2207      	movs	r2, #7
 800a51e:	4013      	ands	r3, r2
 800a520:	d049      	beq.n	800a5b6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        /* UART parity error interrupt occurred
         * -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) &&
 800a522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a524:	2201      	movs	r2, #1
 800a526:	4013      	ands	r3, r2
 800a528:	d010      	beq.n	800a54c <UART_RxISR_8BIT_FIFOEN+0xc0>
            ((cr1its & USART_CR1_PEIE) != 0U)) {
 800a52a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a52c:	2380      	movs	r3, #128	; 0x80
 800a52e:	005b      	lsls	r3, r3, #1
 800a530:	4013      	ands	r3, r2
        if (((isrflags & USART_ISR_PE) != 0U) &&
 800a532:	d00b      	beq.n	800a54c <UART_RxISR_8BIT_FIFOEN+0xc0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2201      	movs	r2, #1
 800a53a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	228c      	movs	r2, #140	; 0x8c
 800a540:	589b      	ldr	r3, [r3, r2]
 800a542:	2201      	movs	r2, #1
 800a544:	431a      	orrs	r2, r3
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	218c      	movs	r1, #140	; 0x8c
 800a54a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred
         * --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) &&
 800a54c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a54e:	2202      	movs	r2, #2
 800a550:	4013      	ands	r3, r2
 800a552:	d00f      	beq.n	800a574 <UART_RxISR_8BIT_FIFOEN+0xe8>
            ((cr3its & USART_CR3_EIE) != 0U)) {
 800a554:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a556:	2201      	movs	r2, #1
 800a558:	4013      	ands	r3, r2
        if (((isrflags & USART_ISR_FE) != 0U) &&
 800a55a:	d00b      	beq.n	800a574 <UART_RxISR_8BIT_FIFOEN+0xe8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2202      	movs	r2, #2
 800a562:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	228c      	movs	r2, #140	; 0x8c
 800a568:	589b      	ldr	r3, [r3, r2]
 800a56a:	2204      	movs	r2, #4
 800a56c:	431a      	orrs	r2, r3
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	218c      	movs	r1, #140	; 0x8c
 800a572:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred
         * --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) &&
 800a574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a576:	2204      	movs	r2, #4
 800a578:	4013      	ands	r3, r2
 800a57a:	d00f      	beq.n	800a59c <UART_RxISR_8BIT_FIFOEN+0x110>
            ((cr3its & USART_CR3_EIE) != 0U)) {
 800a57c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a57e:	2201      	movs	r2, #1
 800a580:	4013      	ands	r3, r2
        if (((isrflags & USART_ISR_NE) != 0U) &&
 800a582:	d00b      	beq.n	800a59c <UART_RxISR_8BIT_FIFOEN+0x110>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2204      	movs	r2, #4
 800a58a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	228c      	movs	r2, #140	; 0x8c
 800a590:	589b      	ldr	r3, [r3, r2]
 800a592:	2202      	movs	r2, #2
 800a594:	431a      	orrs	r2, r3
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	218c      	movs	r1, #140	; 0x8c
 800a59a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be
         * ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE) {
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	228c      	movs	r2, #140	; 0x8c
 800a5a0:	589b      	ldr	r3, [r3, r2]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d007      	beq.n	800a5b6 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	0018      	movs	r0, r3
 800a5aa:	f7fe ff95 	bl	80094d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	228c      	movs	r2, #140	; 0x8c
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U) {
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	225e      	movs	r2, #94	; 0x5e
 800a5ba:	5a9b      	ldrh	r3, [r3, r2]
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d170      	bne.n	800a6a4 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5c2:	f3ef 8310 	mrs	r3, PRIMASK
 800a5c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800a5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5ca:	65bb      	str	r3, [r7, #88]	; 0x58
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d2:	f383 8810 	msr	PRIMASK, r3
}
 800a5d6:	46c0      	nop			; (mov r8, r8)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	495f      	ldr	r1, [pc, #380]	; (800a760 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 800a5e4:	400a      	ands	r2, r1
 800a5e6:	601a      	str	r2, [r3, #0]
 800a5e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5ea:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ee:	f383 8810 	msr	PRIMASK, r3
}
 800a5f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5f4:	f3ef 8310 	mrs	r3, PRIMASK
 800a5f8:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800a5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun
           error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3,
 800a5fc:	657b      	str	r3, [r7, #84]	; 0x54
 800a5fe:	2301      	movs	r3, #1
 800a600:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a604:	f383 8810 	msr	PRIMASK, r3
}
 800a608:	46c0      	nop			; (mov r8, r8)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	689a      	ldr	r2, [r3, #8]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4953      	ldr	r1, [pc, #332]	; (800a764 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 800a616:	400a      	ands	r2, r1
 800a618:	609a      	str	r2, [r3, #8]
 800a61a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a61c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a61e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a620:	f383 8810 	msr	PRIMASK, r3
}
 800a624:	46c0      	nop			; (mov r8, r8)
                         (USART_CR3_EIE | USART_CR3_RXFTIE));

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2288      	movs	r2, #136	; 0x88
 800a62a:	2120      	movs	r1, #32
 800a62c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d12f      	bne.n	800a69c <UART_RxISR_8BIT_FIFOEN+0x210>
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a642:	f3ef 8310 	mrs	r3, PRIMASK
 800a646:	623b      	str	r3, [r7, #32]
  return(result);
 800a648:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a64a:	653b      	str	r3, [r7, #80]	; 0x50
 800a64c:	2301      	movs	r3, #1
 800a64e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a652:	f383 8810 	msr	PRIMASK, r3
}
 800a656:	46c0      	nop			; (mov r8, r8)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2110      	movs	r1, #16
 800a664:	438a      	bics	r2, r1
 800a666:	601a      	str	r2, [r3, #0]
 800a668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a66a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66e:	f383 8810 	msr	PRIMASK, r3
}
 800a672:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET) {
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	69db      	ldr	r3, [r3, #28]
 800a67a:	2210      	movs	r2, #16
 800a67c:	4013      	ands	r3, r2
 800a67e:	2b10      	cmp	r3, #16
 800a680:	d103      	bne.n	800a68a <UART_RxISR_8BIT_FIFOEN+0x1fe>
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	2210      	movs	r2, #16
 800a688:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	225c      	movs	r2, #92	; 0x5c
 800a68e:	5a9a      	ldrh	r2, [r3, r2]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	0011      	movs	r1, r2
 800a694:	0018      	movs	r0, r3
 800a696:	f7fe ff27 	bl	80094e8 <HAL_UARTEx_RxEventCallback>
 800a69a:	e003      	b.n	800a6a4 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	0018      	movs	r0, r3
 800a6a0:	f7f8 fb5a 	bl	8002d58 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U)) {
 800a6a4:	235e      	movs	r3, #94	; 0x5e
 800a6a6:	18fb      	adds	r3, r7, r3
 800a6a8:	881b      	ldrh	r3, [r3, #0]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d004      	beq.n	800a6b8 <UART_RxISR_8BIT_FIFOEN+0x22c>
 800a6ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6b0:	2220      	movs	r2, #32
 800a6b2:	4013      	ands	r3, r2
 800a6b4:	d000      	beq.n	800a6b8 <UART_RxISR_8BIT_FIFOEN+0x22c>
 800a6b6:	e70c      	b.n	800a4d2 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a6b8:	204e      	movs	r0, #78	; 0x4e
 800a6ba:	183b      	adds	r3, r7, r0
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	215e      	movs	r1, #94	; 0x5e
 800a6c0:	5a52      	ldrh	r2, [r2, r1]
 800a6c2:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess)) {
 800a6c4:	0001      	movs	r1, r0
 800a6c6:	187b      	adds	r3, r7, r1
 800a6c8:	881b      	ldrh	r3, [r3, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d044      	beq.n	800a758 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2268      	movs	r2, #104	; 0x68
 800a6d2:	5a9b      	ldrh	r3, [r3, r2]
 800a6d4:	187a      	adds	r2, r7, r1
 800a6d6:	8812      	ldrh	r2, [r2, #0]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d23d      	bcs.n	800a758 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6dc:	f3ef 8310 	mrs	r3, PRIMASK
 800a6e0:	60bb      	str	r3, [r7, #8]
  return(result);
 800a6e2:	68bb      	ldr	r3, [r7, #8]
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a6e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f383 8810 	msr	PRIMASK, r3
}
 800a6f0:	46c0      	nop			; (mov r8, r8)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	689a      	ldr	r2, [r3, #8]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	491a      	ldr	r1, [pc, #104]	; (800a768 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 800a6fe:	400a      	ands	r2, r1
 800a700:	609a      	str	r2, [r3, #8]
 800a702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a704:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	f383 8810 	msr	PRIMASK, r3
}
 800a70c:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	4a16      	ldr	r2, [pc, #88]	; (800a76c <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800a712:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a714:	f3ef 8310 	mrs	r3, PRIMASK
 800a718:	617b      	str	r3, [r7, #20]
  return(result);
 800a71a:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a71c:	647b      	str	r3, [r7, #68]	; 0x44
 800a71e:	2301      	movs	r3, #1
 800a720:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a722:	69bb      	ldr	r3, [r7, #24]
 800a724:	f383 8810 	msr	PRIMASK, r3
}
 800a728:	46c0      	nop			; (mov r8, r8)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2120      	movs	r1, #32
 800a736:	430a      	orrs	r2, r1
 800a738:	601a      	str	r2, [r3, #0]
 800a73a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a73c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	f383 8810 	msr	PRIMASK, r3
}
 800a744:	46c0      	nop			; (mov r8, r8)
    }
  } else {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a746:	e007      	b.n	800a758 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	699a      	ldr	r2, [r3, #24]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2108      	movs	r1, #8
 800a754:	430a      	orrs	r2, r1
 800a756:	619a      	str	r2, [r3, #24]
}
 800a758:	46c0      	nop			; (mov r8, r8)
 800a75a:	46bd      	mov	sp, r7
 800a75c:	b01c      	add	sp, #112	; 0x70
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	fffffeff 	.word	0xfffffeff
 800a764:	effffffe 	.word	0xeffffffe
 800a768:	efffffff 	.word	0xefffffff
 800a76c:	0800a1b5 	.word	0x0800a1b5

0800a770 <UART_RxISR_16BIT_FIFOEN>:
 * @note   Function is called under interruption only, once
 *         interruptions have been enabled by HAL_UART_Receive_IT()
 * @param huart UART handle.
 * @retval None
 */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart) {
 800a770:	b580      	push	{r7, lr}
 800a772:	b09e      	sub	sp, #120	; 0x78
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a778:	2372      	movs	r3, #114	; 0x72
 800a77a:	18fb      	adds	r3, r7, r3
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	2160      	movs	r1, #96	; 0x60
 800a780:	5a52      	ldrh	r2, [r2, r1]
 800a782:	801a      	strh	r2, [r3, #0]
  uint16_t uhdata;
  uint16_t nb_rx_data;
  uint16_t rxdatacount;
  uint32_t isrflags = READ_REG(huart->Instance->ISR);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	69db      	ldr	r3, [r3, #28]
 800a78a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t cr1its = READ_REG(huart->Instance->CR1);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t cr3its = READ_REG(huart->Instance->CR3);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2288      	movs	r2, #136	; 0x88
 800a7a0:	589b      	ldr	r3, [r3, r2]
 800a7a2:	2b22      	cmp	r3, #34	; 0x22
 800a7a4:	d000      	beq.n	800a7a8 <UART_RxISR_16BIT_FIFOEN+0x38>
 800a7a6:	e141      	b.n	800aa2c <UART_RxISR_16BIT_FIFOEN+0x2bc>
    nb_rx_data = huart->NbRxDataToProcess;
 800a7a8:	2366      	movs	r3, #102	; 0x66
 800a7aa:	18fb      	adds	r3, r7, r3
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	2168      	movs	r1, #104	; 0x68
 800a7b0:	5a52      	ldrh	r2, [r2, r1]
 800a7b2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U)) {
 800a7b4:	e0e8      	b.n	800a988 <UART_RxISR_16BIT_FIFOEN+0x218>
      uhdata = (uint16_t)READ_REG(huart->Instance->RDR);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7bc:	2164      	movs	r1, #100	; 0x64
 800a7be:	187b      	adds	r3, r7, r1
 800a7c0:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *)huart->pRxBuffPtr;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7c6:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 800a7c8:	187b      	adds	r3, r7, r1
 800a7ca:	2272      	movs	r2, #114	; 0x72
 800a7cc:	18ba      	adds	r2, r7, r2
 800a7ce:	881b      	ldrh	r3, [r3, #0]
 800a7d0:	8812      	ldrh	r2, [r2, #0]
 800a7d2:	4013      	ands	r3, r2
 800a7d4:	b29a      	uxth	r2, r3
 800a7d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7de:	1c9a      	adds	r2, r3, #2
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	225e      	movs	r2, #94	; 0x5e
 800a7e8:	5a9b      	ldrh	r3, [r3, r2]
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	3b01      	subs	r3, #1
 800a7ee:	b299      	uxth	r1, r3
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	225e      	movs	r2, #94	; 0x5e
 800a7f4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	69db      	ldr	r3, [r3, #28]
 800a7fc:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U) {
 800a7fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a800:	2207      	movs	r2, #7
 800a802:	4013      	ands	r3, r2
 800a804:	d049      	beq.n	800a89a <UART_RxISR_16BIT_FIFOEN+0x12a>
        /* UART parity error interrupt occurred
         * -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) &&
 800a806:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a808:	2201      	movs	r2, #1
 800a80a:	4013      	ands	r3, r2
 800a80c:	d010      	beq.n	800a830 <UART_RxISR_16BIT_FIFOEN+0xc0>
            ((cr1its & USART_CR1_PEIE) != 0U)) {
 800a80e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a810:	2380      	movs	r3, #128	; 0x80
 800a812:	005b      	lsls	r3, r3, #1
 800a814:	4013      	ands	r3, r2
        if (((isrflags & USART_ISR_PE) != 0U) &&
 800a816:	d00b      	beq.n	800a830 <UART_RxISR_16BIT_FIFOEN+0xc0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	2201      	movs	r2, #1
 800a81e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	228c      	movs	r2, #140	; 0x8c
 800a824:	589b      	ldr	r3, [r3, r2]
 800a826:	2201      	movs	r2, #1
 800a828:	431a      	orrs	r2, r3
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	218c      	movs	r1, #140	; 0x8c
 800a82e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred
         * --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) &&
 800a830:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a832:	2202      	movs	r2, #2
 800a834:	4013      	ands	r3, r2
 800a836:	d00f      	beq.n	800a858 <UART_RxISR_16BIT_FIFOEN+0xe8>
            ((cr3its & USART_CR3_EIE) != 0U)) {
 800a838:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a83a:	2201      	movs	r2, #1
 800a83c:	4013      	ands	r3, r2
        if (((isrflags & USART_ISR_FE) != 0U) &&
 800a83e:	d00b      	beq.n	800a858 <UART_RxISR_16BIT_FIFOEN+0xe8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2202      	movs	r2, #2
 800a846:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	228c      	movs	r2, #140	; 0x8c
 800a84c:	589b      	ldr	r3, [r3, r2]
 800a84e:	2204      	movs	r2, #4
 800a850:	431a      	orrs	r2, r3
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	218c      	movs	r1, #140	; 0x8c
 800a856:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred
         * --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) &&
 800a858:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a85a:	2204      	movs	r2, #4
 800a85c:	4013      	ands	r3, r2
 800a85e:	d00f      	beq.n	800a880 <UART_RxISR_16BIT_FIFOEN+0x110>
            ((cr3its & USART_CR3_EIE) != 0U)) {
 800a860:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a862:	2201      	movs	r2, #1
 800a864:	4013      	ands	r3, r2
        if (((isrflags & USART_ISR_NE) != 0U) &&
 800a866:	d00b      	beq.n	800a880 <UART_RxISR_16BIT_FIFOEN+0x110>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	2204      	movs	r2, #4
 800a86e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	228c      	movs	r2, #140	; 0x8c
 800a874:	589b      	ldr	r3, [r3, r2]
 800a876:	2202      	movs	r2, #2
 800a878:	431a      	orrs	r2, r3
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	218c      	movs	r1, #140	; 0x8c
 800a87e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be
         * ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE) {
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	228c      	movs	r2, #140	; 0x8c
 800a884:	589b      	ldr	r3, [r3, r2]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d007      	beq.n	800a89a <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	0018      	movs	r0, r3
 800a88e:	f7fe fe23 	bl	80094d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	228c      	movs	r2, #140	; 0x8c
 800a896:	2100      	movs	r1, #0
 800a898:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U) {
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	225e      	movs	r2, #94	; 0x5e
 800a89e:	5a9b      	ldrh	r3, [r3, r2]
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d170      	bne.n	800a988 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8a6:	f3ef 8310 	mrs	r3, PRIMASK
 800a8aa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800a8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8b6:	f383 8810 	msr	PRIMASK, r3
}
 800a8ba:	46c0      	nop			; (mov r8, r8)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	495f      	ldr	r1, [pc, #380]	; (800aa44 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 800a8c8:	400a      	ands	r2, r1
 800a8ca:	601a      	str	r2, [r3, #0]
 800a8cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8ce:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d2:	f383 8810 	msr	PRIMASK, r3
}
 800a8d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8d8:	f3ef 8310 	mrs	r3, PRIMASK
 800a8dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800a8de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun
           error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3,
 800a8e0:	65bb      	str	r3, [r7, #88]	; 0x58
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8e8:	f383 8810 	msr	PRIMASK, r3
}
 800a8ec:	46c0      	nop			; (mov r8, r8)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	689a      	ldr	r2, [r3, #8]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4953      	ldr	r1, [pc, #332]	; (800aa48 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 800a8fa:	400a      	ands	r2, r1
 800a8fc:	609a      	str	r2, [r3, #8]
 800a8fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a900:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a904:	f383 8810 	msr	PRIMASK, r3
}
 800a908:	46c0      	nop			; (mov r8, r8)
                         (USART_CR3_EIE | USART_CR3_RXFTIE));

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2288      	movs	r2, #136	; 0x88
 800a90e:	2120      	movs	r1, #32
 800a910:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d12f      	bne.n	800a980 <UART_RxISR_16BIT_FIFOEN+0x210>
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a926:	f3ef 8310 	mrs	r3, PRIMASK
 800a92a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a92e:	657b      	str	r3, [r7, #84]	; 0x54
 800a930:	2301      	movs	r3, #1
 800a932:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a936:	f383 8810 	msr	PRIMASK, r3
}
 800a93a:	46c0      	nop			; (mov r8, r8)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	681a      	ldr	r2, [r3, #0]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	2110      	movs	r1, #16
 800a948:	438a      	bics	r2, r1
 800a94a:	601a      	str	r2, [r3, #0]
 800a94c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a94e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a952:	f383 8810 	msr	PRIMASK, r3
}
 800a956:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET) {
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	69db      	ldr	r3, [r3, #28]
 800a95e:	2210      	movs	r2, #16
 800a960:	4013      	ands	r3, r2
 800a962:	2b10      	cmp	r3, #16
 800a964:	d103      	bne.n	800a96e <UART_RxISR_16BIT_FIFOEN+0x1fe>
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2210      	movs	r2, #16
 800a96c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	225c      	movs	r2, #92	; 0x5c
 800a972:	5a9a      	ldrh	r2, [r3, r2]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	0011      	movs	r1, r2
 800a978:	0018      	movs	r0, r3
 800a97a:	f7fe fdb5 	bl	80094e8 <HAL_UARTEx_RxEventCallback>
 800a97e:	e003      	b.n	800a988 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	0018      	movs	r0, r3
 800a984:	f7f8 f9e8 	bl	8002d58 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U)) {
 800a988:	2366      	movs	r3, #102	; 0x66
 800a98a:	18fb      	adds	r3, r7, r3
 800a98c:	881b      	ldrh	r3, [r3, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d004      	beq.n	800a99c <UART_RxISR_16BIT_FIFOEN+0x22c>
 800a992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a994:	2220      	movs	r2, #32
 800a996:	4013      	ands	r3, r2
 800a998:	d000      	beq.n	800a99c <UART_RxISR_16BIT_FIFOEN+0x22c>
 800a99a:	e70c      	b.n	800a7b6 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a99c:	2052      	movs	r0, #82	; 0x52
 800a99e:	183b      	adds	r3, r7, r0
 800a9a0:	687a      	ldr	r2, [r7, #4]
 800a9a2:	215e      	movs	r1, #94	; 0x5e
 800a9a4:	5a52      	ldrh	r2, [r2, r1]
 800a9a6:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess)) {
 800a9a8:	0001      	movs	r1, r0
 800a9aa:	187b      	adds	r3, r7, r1
 800a9ac:	881b      	ldrh	r3, [r3, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d044      	beq.n	800aa3c <UART_RxISR_16BIT_FIFOEN+0x2cc>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2268      	movs	r2, #104	; 0x68
 800a9b6:	5a9b      	ldrh	r3, [r3, r2]
 800a9b8:	187a      	adds	r2, r7, r1
 800a9ba:	8812      	ldrh	r2, [r2, #0]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d23d      	bcs.n	800aa3c <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9c0:	f3ef 8310 	mrs	r3, PRIMASK
 800a9c4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a9c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	f383 8810 	msr	PRIMASK, r3
}
 800a9d4:	46c0      	nop			; (mov r8, r8)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	689a      	ldr	r2, [r3, #8]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	491a      	ldr	r1, [pc, #104]	; (800aa4c <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800a9e2:	400a      	ands	r2, r1
 800a9e4:	609a      	str	r2, [r3, #8]
 800a9e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	f383 8810 	msr	PRIMASK, r3
}
 800a9f0:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	4a16      	ldr	r2, [pc, #88]	; (800aa50 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800a9f6:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9f8:	f3ef 8310 	mrs	r3, PRIMASK
 800a9fc:	61bb      	str	r3, [r7, #24]
  return(result);
 800a9fe:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aa00:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa02:	2301      	movs	r3, #1
 800aa04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa06:	69fb      	ldr	r3, [r7, #28]
 800aa08:	f383 8810 	msr	PRIMASK, r3
}
 800aa0c:	46c0      	nop			; (mov r8, r8)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2120      	movs	r1, #32
 800aa1a:	430a      	orrs	r2, r1
 800aa1c:	601a      	str	r2, [r3, #0]
 800aa1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa20:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa22:	6a3b      	ldr	r3, [r7, #32]
 800aa24:	f383 8810 	msr	PRIMASK, r3
}
 800aa28:	46c0      	nop			; (mov r8, r8)
    }
  } else {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aa2a:	e007      	b.n	800aa3c <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	699a      	ldr	r2, [r3, #24]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	2108      	movs	r1, #8
 800aa38:	430a      	orrs	r2, r1
 800aa3a:	619a      	str	r2, [r3, #24]
}
 800aa3c:	46c0      	nop			; (mov r8, r8)
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	b01e      	add	sp, #120	; 0x78
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	fffffeff 	.word	0xfffffeff
 800aa48:	effffffe 	.word	0xeffffffe
 800aa4c:	efffffff 	.word	0xefffffff
 800aa50:	0800a321 	.word	0x0800a321

0800aa54 <HAL_UARTEx_WakeupCallback>:
/**
 * @brief UART wakeup from Stop mode callback.
 * @param huart UART handle.
 * @retval None
 */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart) {
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aa5c:	46c0      	nop			; (mov r8, r8)
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	b002      	add	sp, #8
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <HAL_UARTEx_RxFifoFullCallback>:
/**
 * @brief  UART RX Fifo full callback.
 * @param  huart UART handle.
 * @retval None
 */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart) {
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b082      	sub	sp, #8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user
     file.
   */
}
 800aa6c:	46c0      	nop			; (mov r8, r8)
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	b002      	add	sp, #8
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <HAL_UARTEx_TxFifoEmptyCallback>:
/**
 * @brief  UART TX Fifo empty callback.
 * @param  huart UART handle.
 * @retval None
 */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart) {
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user
     file.
   */
}
 800aa7c:	46c0      	nop			; (mov r8, r8)
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	b002      	add	sp, #8
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <HAL_UARTEx_DisableFifoMode>:
/**
 * @brief  Disable the FIFO mode.
 * @param huart      UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart) {
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b084      	sub	sp, #16
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2280      	movs	r2, #128	; 0x80
 800aa90:	5c9b      	ldrb	r3, [r3, r2]
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d101      	bne.n	800aa9a <HAL_UARTEx_DisableFifoMode+0x16>
 800aa96:	2302      	movs	r3, #2
 800aa98:	e027      	b.n	800aaea <HAL_UARTEx_DisableFifoMode+0x66>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2280      	movs	r2, #128	; 0x80
 800aa9e:	2101      	movs	r1, #1
 800aaa0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2284      	movs	r2, #132	; 0x84
 800aaa6:	2124      	movs	r1, #36	; 0x24
 800aaa8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2101      	movs	r1, #1
 800aabe:	438a      	bics	r2, r1
 800aac0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	4a0b      	ldr	r2, [pc, #44]	; (800aaf4 <HAL_UARTEx_DisableFifoMode+0x70>)
 800aac6:	4013      	ands	r3, r2
 800aac8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	68fa      	ldr	r2, [r7, #12]
 800aad6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2284      	movs	r2, #132	; 0x84
 800aadc:	2120      	movs	r1, #32
 800aade:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2280      	movs	r2, #128	; 0x80
 800aae4:	2100      	movs	r1, #0
 800aae6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	0018      	movs	r0, r3
 800aaec:	46bd      	mov	sp, r7
 800aaee:	b004      	add	sp, #16
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	46c0      	nop			; (mov r8, r8)
 800aaf4:	dfffffff 	.word	0xdfffffff

0800aaf8 <HAL_UARTEx_SetTxFifoThreshold>:
 *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
 *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart,
                                                uint32_t Threshold) {
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2280      	movs	r2, #128	; 0x80
 800ab06:	5c9b      	ldrb	r3, [r3, r2]
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d101      	bne.n	800ab10 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ab0c:	2302      	movs	r3, #2
 800ab0e:	e02e      	b.n	800ab6e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2280      	movs	r2, #128	; 0x80
 800ab14:	2101      	movs	r1, #1
 800ab16:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2284      	movs	r2, #132	; 0x84
 800ab1c:	2124      	movs	r1, #36	; 0x24
 800ab1e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2101      	movs	r1, #1
 800ab34:	438a      	bics	r2, r1
 800ab36:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	689b      	ldr	r3, [r3, #8]
 800ab3e:	00db      	lsls	r3, r3, #3
 800ab40:	08d9      	lsrs	r1, r3, #3
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	683a      	ldr	r2, [r7, #0]
 800ab48:	430a      	orrs	r2, r1
 800ab4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	0018      	movs	r0, r3
 800ab50:	f000 f854 	bl	800abfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2284      	movs	r2, #132	; 0x84
 800ab60:	2120      	movs	r1, #32
 800ab62:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2280      	movs	r2, #128	; 0x80
 800ab68:	2100      	movs	r1, #0
 800ab6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ab6c:	2300      	movs	r3, #0
}
 800ab6e:	0018      	movs	r0, r3
 800ab70:	46bd      	mov	sp, r7
 800ab72:	b004      	add	sp, #16
 800ab74:	bd80      	pop	{r7, pc}
	...

0800ab78 <HAL_UARTEx_SetRxFifoThreshold>:
 *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
 *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart,
                                                uint32_t Threshold) {
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2280      	movs	r2, #128	; 0x80
 800ab86:	5c9b      	ldrb	r3, [r3, r2]
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d101      	bne.n	800ab90 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ab8c:	2302      	movs	r3, #2
 800ab8e:	e02f      	b.n	800abf0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2280      	movs	r2, #128	; 0x80
 800ab94:	2101      	movs	r1, #1
 800ab96:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2284      	movs	r2, #132	; 0x84
 800ab9c:	2124      	movs	r1, #36	; 0x24
 800ab9e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	2101      	movs	r1, #1
 800abb4:	438a      	bics	r2, r1
 800abb6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	4a0e      	ldr	r2, [pc, #56]	; (800abf8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800abc0:	4013      	ands	r3, r2
 800abc2:	0019      	movs	r1, r3
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	683a      	ldr	r2, [r7, #0]
 800abca:	430a      	orrs	r2, r1
 800abcc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	0018      	movs	r0, r3
 800abd2:	f000 f813 	bl	800abfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	68fa      	ldr	r2, [r7, #12]
 800abdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2284      	movs	r2, #132	; 0x84
 800abe2:	2120      	movs	r1, #32
 800abe4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2280      	movs	r2, #128	; 0x80
 800abea:	2100      	movs	r1, #0
 800abec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800abee:	2300      	movs	r3, #0
}
 800abf0:	0018      	movs	r0, r3
 800abf2:	46bd      	mov	sp, r7
 800abf4:	b004      	add	sp, #16
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	f1ffffff 	.word	0xf1ffffff

0800abfc <UARTEx_SetNbDataToProcess>:
 * @note The RX FIFO depth and the TX FIFO depth is extracted from
 *       the UART configuration registers.
 * @param huart UART handle.
 * @retval None
 */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart) {
 800abfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abfe:	b085      	sub	sp, #20
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE) {
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d108      	bne.n	800ac1e <UARTEx_SetNbDataToProcess+0x22>
    huart->NbTxDataToProcess = 1U;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	226a      	movs	r2, #106	; 0x6a
 800ac10:	2101      	movs	r1, #1
 800ac12:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2268      	movs	r2, #104	; 0x68
 800ac18:	2101      	movs	r1, #1
 800ac1a:	5299      	strh	r1, [r3, r2]
        (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess =
        ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
        (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ac1c:	e043      	b.n	800aca6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ac1e:	260f      	movs	r6, #15
 800ac20:	19bb      	adds	r3, r7, r6
 800ac22:	2208      	movs	r2, #8
 800ac24:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ac26:	200e      	movs	r0, #14
 800ac28:	183b      	adds	r3, r7, r0
 800ac2a:	2208      	movs	r2, #8
 800ac2c:	701a      	strb	r2, [r3, #0]
        (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	0e5b      	lsrs	r3, r3, #25
 800ac36:	b2da      	uxtb	r2, r3
    rx_fifo_threshold =
 800ac38:	240d      	movs	r4, #13
 800ac3a:	193b      	adds	r3, r7, r4
 800ac3c:	2107      	movs	r1, #7
 800ac3e:	400a      	ands	r2, r1
 800ac40:	701a      	strb	r2, [r3, #0]
        (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	0f5b      	lsrs	r3, r3, #29
 800ac4a:	b2da      	uxtb	r2, r3
    tx_fifo_threshold =
 800ac4c:	250c      	movs	r5, #12
 800ac4e:	197b      	adds	r3, r7, r5
 800ac50:	2107      	movs	r1, #7
 800ac52:	400a      	ands	r2, r1
 800ac54:	701a      	strb	r2, [r3, #0]
        ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac56:	183b      	adds	r3, r7, r0
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	197a      	adds	r2, r7, r5
 800ac5c:	7812      	ldrb	r2, [r2, #0]
 800ac5e:	4914      	ldr	r1, [pc, #80]	; (800acb0 <UARTEx_SetNbDataToProcess+0xb4>)
 800ac60:	5c8a      	ldrb	r2, [r1, r2]
 800ac62:	435a      	muls	r2, r3
 800ac64:	0010      	movs	r0, r2
        (uint16_t)denominator[tx_fifo_threshold];
 800ac66:	197b      	adds	r3, r7, r5
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	4a12      	ldr	r2, [pc, #72]	; (800acb4 <UARTEx_SetNbDataToProcess+0xb8>)
 800ac6c:	5cd3      	ldrb	r3, [r2, r3]
        ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac6e:	0019      	movs	r1, r3
 800ac70:	f7f5 fae6 	bl	8000240 <__divsi3>
 800ac74:	0003      	movs	r3, r0
    huart->NbTxDataToProcess =
 800ac76:	b299      	uxth	r1, r3
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	226a      	movs	r2, #106	; 0x6a
 800ac7c:	5299      	strh	r1, [r3, r2]
        ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac7e:	19bb      	adds	r3, r7, r6
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	193a      	adds	r2, r7, r4
 800ac84:	7812      	ldrb	r2, [r2, #0]
 800ac86:	490a      	ldr	r1, [pc, #40]	; (800acb0 <UARTEx_SetNbDataToProcess+0xb4>)
 800ac88:	5c8a      	ldrb	r2, [r1, r2]
 800ac8a:	435a      	muls	r2, r3
 800ac8c:	0010      	movs	r0, r2
        (uint16_t)denominator[rx_fifo_threshold];
 800ac8e:	193b      	adds	r3, r7, r4
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	4a08      	ldr	r2, [pc, #32]	; (800acb4 <UARTEx_SetNbDataToProcess+0xb8>)
 800ac94:	5cd3      	ldrb	r3, [r2, r3]
        ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac96:	0019      	movs	r1, r3
 800ac98:	f7f5 fad2 	bl	8000240 <__divsi3>
 800ac9c:	0003      	movs	r3, r0
    huart->NbRxDataToProcess =
 800ac9e:	b299      	uxth	r1, r3
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2268      	movs	r2, #104	; 0x68
 800aca4:	5299      	strh	r1, [r3, r2]
}
 800aca6:	46c0      	nop			; (mov r8, r8)
 800aca8:	46bd      	mov	sp, r7
 800acaa:	b005      	add	sp, #20
 800acac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acae:	46c0      	nop			; (mov r8, r8)
 800acb0:	0800c068 	.word	0x0800c068
 800acb4:	0800c070 	.word	0x0800c070

0800acb8 <atol>:
 800acb8:	b510      	push	{r4, lr}
 800acba:	220a      	movs	r2, #10
 800acbc:	2100      	movs	r1, #0
 800acbe:	f000 f907 	bl	800aed0 <strtol>
 800acc2:	bd10      	pop	{r4, pc}

0800acc4 <__errno>:
 800acc4:	4b01      	ldr	r3, [pc, #4]	; (800accc <__errno+0x8>)
 800acc6:	6818      	ldr	r0, [r3, #0]
 800acc8:	4770      	bx	lr
 800acca:	46c0      	nop			; (mov r8, r8)
 800accc:	2000000c 	.word	0x2000000c

0800acd0 <__libc_init_array>:
 800acd0:	b570      	push	{r4, r5, r6, lr}
 800acd2:	2600      	movs	r6, #0
 800acd4:	4d0c      	ldr	r5, [pc, #48]	; (800ad08 <__libc_init_array+0x38>)
 800acd6:	4c0d      	ldr	r4, [pc, #52]	; (800ad0c <__libc_init_array+0x3c>)
 800acd8:	1b64      	subs	r4, r4, r5
 800acda:	10a4      	asrs	r4, r4, #2
 800acdc:	42a6      	cmp	r6, r4
 800acde:	d109      	bne.n	800acf4 <__libc_init_array+0x24>
 800ace0:	2600      	movs	r6, #0
 800ace2:	f000 fcfd 	bl	800b6e0 <_init>
 800ace6:	4d0a      	ldr	r5, [pc, #40]	; (800ad10 <__libc_init_array+0x40>)
 800ace8:	4c0a      	ldr	r4, [pc, #40]	; (800ad14 <__libc_init_array+0x44>)
 800acea:	1b64      	subs	r4, r4, r5
 800acec:	10a4      	asrs	r4, r4, #2
 800acee:	42a6      	cmp	r6, r4
 800acf0:	d105      	bne.n	800acfe <__libc_init_array+0x2e>
 800acf2:	bd70      	pop	{r4, r5, r6, pc}
 800acf4:	00b3      	lsls	r3, r6, #2
 800acf6:	58eb      	ldr	r3, [r5, r3]
 800acf8:	4798      	blx	r3
 800acfa:	3601      	adds	r6, #1
 800acfc:	e7ee      	b.n	800acdc <__libc_init_array+0xc>
 800acfe:	00b3      	lsls	r3, r6, #2
 800ad00:	58eb      	ldr	r3, [r5, r3]
 800ad02:	4798      	blx	r3
 800ad04:	3601      	adds	r6, #1
 800ad06:	e7f2      	b.n	800acee <__libc_init_array+0x1e>
 800ad08:	0800c1b4 	.word	0x0800c1b4
 800ad0c:	0800c1b4 	.word	0x0800c1b4
 800ad10:	0800c1b4 	.word	0x0800c1b4
 800ad14:	0800c1c8 	.word	0x0800c1c8

0800ad18 <memcpy>:
 800ad18:	2300      	movs	r3, #0
 800ad1a:	b510      	push	{r4, lr}
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d100      	bne.n	800ad22 <memcpy+0xa>
 800ad20:	bd10      	pop	{r4, pc}
 800ad22:	5ccc      	ldrb	r4, [r1, r3]
 800ad24:	54c4      	strb	r4, [r0, r3]
 800ad26:	3301      	adds	r3, #1
 800ad28:	e7f8      	b.n	800ad1c <memcpy+0x4>

0800ad2a <memset>:
 800ad2a:	0003      	movs	r3, r0
 800ad2c:	1882      	adds	r2, r0, r2
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d100      	bne.n	800ad34 <memset+0xa>
 800ad32:	4770      	bx	lr
 800ad34:	7019      	strb	r1, [r3, #0]
 800ad36:	3301      	adds	r3, #1
 800ad38:	e7f9      	b.n	800ad2e <memset+0x4>
	...

0800ad3c <siprintf>:
 800ad3c:	b40e      	push	{r1, r2, r3}
 800ad3e:	b500      	push	{lr}
 800ad40:	490b      	ldr	r1, [pc, #44]	; (800ad70 <siprintf+0x34>)
 800ad42:	b09c      	sub	sp, #112	; 0x70
 800ad44:	ab1d      	add	r3, sp, #116	; 0x74
 800ad46:	9002      	str	r0, [sp, #8]
 800ad48:	9006      	str	r0, [sp, #24]
 800ad4a:	9107      	str	r1, [sp, #28]
 800ad4c:	9104      	str	r1, [sp, #16]
 800ad4e:	4809      	ldr	r0, [pc, #36]	; (800ad74 <siprintf+0x38>)
 800ad50:	4909      	ldr	r1, [pc, #36]	; (800ad78 <siprintf+0x3c>)
 800ad52:	cb04      	ldmia	r3!, {r2}
 800ad54:	9105      	str	r1, [sp, #20]
 800ad56:	6800      	ldr	r0, [r0, #0]
 800ad58:	a902      	add	r1, sp, #8
 800ad5a:	9301      	str	r3, [sp, #4]
 800ad5c:	f000 f926 	bl	800afac <_svfiprintf_r>
 800ad60:	2300      	movs	r3, #0
 800ad62:	9a02      	ldr	r2, [sp, #8]
 800ad64:	7013      	strb	r3, [r2, #0]
 800ad66:	b01c      	add	sp, #112	; 0x70
 800ad68:	bc08      	pop	{r3}
 800ad6a:	b003      	add	sp, #12
 800ad6c:	4718      	bx	r3
 800ad6e:	46c0      	nop			; (mov r8, r8)
 800ad70:	7fffffff 	.word	0x7fffffff
 800ad74:	2000000c 	.word	0x2000000c
 800ad78:	ffff0208 	.word	0xffff0208

0800ad7c <strcpy>:
 800ad7c:	0003      	movs	r3, r0
 800ad7e:	780a      	ldrb	r2, [r1, #0]
 800ad80:	3101      	adds	r1, #1
 800ad82:	701a      	strb	r2, [r3, #0]
 800ad84:	3301      	adds	r3, #1
 800ad86:	2a00      	cmp	r2, #0
 800ad88:	d1f9      	bne.n	800ad7e <strcpy+0x2>
 800ad8a:	4770      	bx	lr

0800ad8c <strncpy>:
 800ad8c:	0003      	movs	r3, r0
 800ad8e:	b530      	push	{r4, r5, lr}
 800ad90:	001d      	movs	r5, r3
 800ad92:	2a00      	cmp	r2, #0
 800ad94:	d006      	beq.n	800ada4 <strncpy+0x18>
 800ad96:	780c      	ldrb	r4, [r1, #0]
 800ad98:	3a01      	subs	r2, #1
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	702c      	strb	r4, [r5, #0]
 800ad9e:	3101      	adds	r1, #1
 800ada0:	2c00      	cmp	r4, #0
 800ada2:	d1f5      	bne.n	800ad90 <strncpy+0x4>
 800ada4:	2100      	movs	r1, #0
 800ada6:	189a      	adds	r2, r3, r2
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d100      	bne.n	800adae <strncpy+0x22>
 800adac:	bd30      	pop	{r4, r5, pc}
 800adae:	7019      	strb	r1, [r3, #0]
 800adb0:	3301      	adds	r3, #1
 800adb2:	e7f9      	b.n	800ada8 <strncpy+0x1c>

0800adb4 <_strtol_l.isra.0>:
 800adb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adb6:	b087      	sub	sp, #28
 800adb8:	001e      	movs	r6, r3
 800adba:	9005      	str	r0, [sp, #20]
 800adbc:	9101      	str	r1, [sp, #4]
 800adbe:	9202      	str	r2, [sp, #8]
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d045      	beq.n	800ae50 <_strtol_l.isra.0+0x9c>
 800adc4:	0008      	movs	r0, r1
 800adc6:	2b24      	cmp	r3, #36	; 0x24
 800adc8:	d842      	bhi.n	800ae50 <_strtol_l.isra.0+0x9c>
 800adca:	4b3f      	ldr	r3, [pc, #252]	; (800aec8 <_strtol_l.isra.0+0x114>)
 800adcc:	2208      	movs	r2, #8
 800adce:	469c      	mov	ip, r3
 800add0:	0003      	movs	r3, r0
 800add2:	4661      	mov	r1, ip
 800add4:	781c      	ldrb	r4, [r3, #0]
 800add6:	1c45      	adds	r5, r0, #1
 800add8:	5d09      	ldrb	r1, [r1, r4]
 800adda:	0028      	movs	r0, r5
 800addc:	000f      	movs	r7, r1
 800adde:	4017      	ands	r7, r2
 800ade0:	4211      	tst	r1, r2
 800ade2:	d1f5      	bne.n	800add0 <_strtol_l.isra.0+0x1c>
 800ade4:	2c2d      	cmp	r4, #45	; 0x2d
 800ade6:	d13a      	bne.n	800ae5e <_strtol_l.isra.0+0xaa>
 800ade8:	2701      	movs	r7, #1
 800adea:	782c      	ldrb	r4, [r5, #0]
 800adec:	1c9d      	adds	r5, r3, #2
 800adee:	2e00      	cmp	r6, #0
 800adf0:	d065      	beq.n	800aebe <_strtol_l.isra.0+0x10a>
 800adf2:	2e10      	cmp	r6, #16
 800adf4:	d109      	bne.n	800ae0a <_strtol_l.isra.0+0x56>
 800adf6:	2c30      	cmp	r4, #48	; 0x30
 800adf8:	d107      	bne.n	800ae0a <_strtol_l.isra.0+0x56>
 800adfa:	2220      	movs	r2, #32
 800adfc:	782b      	ldrb	r3, [r5, #0]
 800adfe:	4393      	bics	r3, r2
 800ae00:	2b58      	cmp	r3, #88	; 0x58
 800ae02:	d157      	bne.n	800aeb4 <_strtol_l.isra.0+0x100>
 800ae04:	2610      	movs	r6, #16
 800ae06:	786c      	ldrb	r4, [r5, #1]
 800ae08:	3502      	adds	r5, #2
 800ae0a:	4b30      	ldr	r3, [pc, #192]	; (800aecc <_strtol_l.isra.0+0x118>)
 800ae0c:	0031      	movs	r1, r6
 800ae0e:	18fb      	adds	r3, r7, r3
 800ae10:	0018      	movs	r0, r3
 800ae12:	9303      	str	r3, [sp, #12]
 800ae14:	f7f5 fa10 	bl	8000238 <__aeabi_uidivmod>
 800ae18:	2300      	movs	r3, #0
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	4684      	mov	ip, r0
 800ae1e:	0018      	movs	r0, r3
 800ae20:	9104      	str	r1, [sp, #16]
 800ae22:	4252      	negs	r2, r2
 800ae24:	0021      	movs	r1, r4
 800ae26:	3930      	subs	r1, #48	; 0x30
 800ae28:	2909      	cmp	r1, #9
 800ae2a:	d81d      	bhi.n	800ae68 <_strtol_l.isra.0+0xb4>
 800ae2c:	000c      	movs	r4, r1
 800ae2e:	42a6      	cmp	r6, r4
 800ae30:	dd28      	ble.n	800ae84 <_strtol_l.isra.0+0xd0>
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	db24      	blt.n	800ae80 <_strtol_l.isra.0+0xcc>
 800ae36:	0013      	movs	r3, r2
 800ae38:	4584      	cmp	ip, r0
 800ae3a:	d306      	bcc.n	800ae4a <_strtol_l.isra.0+0x96>
 800ae3c:	d102      	bne.n	800ae44 <_strtol_l.isra.0+0x90>
 800ae3e:	9904      	ldr	r1, [sp, #16]
 800ae40:	42a1      	cmp	r1, r4
 800ae42:	db02      	blt.n	800ae4a <_strtol_l.isra.0+0x96>
 800ae44:	2301      	movs	r3, #1
 800ae46:	4370      	muls	r0, r6
 800ae48:	1820      	adds	r0, r4, r0
 800ae4a:	782c      	ldrb	r4, [r5, #0]
 800ae4c:	3501      	adds	r5, #1
 800ae4e:	e7e9      	b.n	800ae24 <_strtol_l.isra.0+0x70>
 800ae50:	f7ff ff38 	bl	800acc4 <__errno>
 800ae54:	2316      	movs	r3, #22
 800ae56:	6003      	str	r3, [r0, #0]
 800ae58:	2000      	movs	r0, #0
 800ae5a:	b007      	add	sp, #28
 800ae5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae5e:	2c2b      	cmp	r4, #43	; 0x2b
 800ae60:	d1c5      	bne.n	800adee <_strtol_l.isra.0+0x3a>
 800ae62:	782c      	ldrb	r4, [r5, #0]
 800ae64:	1c9d      	adds	r5, r3, #2
 800ae66:	e7c2      	b.n	800adee <_strtol_l.isra.0+0x3a>
 800ae68:	0021      	movs	r1, r4
 800ae6a:	3941      	subs	r1, #65	; 0x41
 800ae6c:	2919      	cmp	r1, #25
 800ae6e:	d801      	bhi.n	800ae74 <_strtol_l.isra.0+0xc0>
 800ae70:	3c37      	subs	r4, #55	; 0x37
 800ae72:	e7dc      	b.n	800ae2e <_strtol_l.isra.0+0x7a>
 800ae74:	0021      	movs	r1, r4
 800ae76:	3961      	subs	r1, #97	; 0x61
 800ae78:	2919      	cmp	r1, #25
 800ae7a:	d803      	bhi.n	800ae84 <_strtol_l.isra.0+0xd0>
 800ae7c:	3c57      	subs	r4, #87	; 0x57
 800ae7e:	e7d6      	b.n	800ae2e <_strtol_l.isra.0+0x7a>
 800ae80:	0013      	movs	r3, r2
 800ae82:	e7e2      	b.n	800ae4a <_strtol_l.isra.0+0x96>
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	da09      	bge.n	800ae9c <_strtol_l.isra.0+0xe8>
 800ae88:	2322      	movs	r3, #34	; 0x22
 800ae8a:	9a05      	ldr	r2, [sp, #20]
 800ae8c:	9803      	ldr	r0, [sp, #12]
 800ae8e:	6013      	str	r3, [r2, #0]
 800ae90:	9b02      	ldr	r3, [sp, #8]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d0e1      	beq.n	800ae5a <_strtol_l.isra.0+0xa6>
 800ae96:	1e6b      	subs	r3, r5, #1
 800ae98:	9301      	str	r3, [sp, #4]
 800ae9a:	e007      	b.n	800aeac <_strtol_l.isra.0+0xf8>
 800ae9c:	2f00      	cmp	r7, #0
 800ae9e:	d000      	beq.n	800aea2 <_strtol_l.isra.0+0xee>
 800aea0:	4240      	negs	r0, r0
 800aea2:	9a02      	ldr	r2, [sp, #8]
 800aea4:	2a00      	cmp	r2, #0
 800aea6:	d0d8      	beq.n	800ae5a <_strtol_l.isra.0+0xa6>
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1f4      	bne.n	800ae96 <_strtol_l.isra.0+0xe2>
 800aeac:	9b02      	ldr	r3, [sp, #8]
 800aeae:	9a01      	ldr	r2, [sp, #4]
 800aeb0:	601a      	str	r2, [r3, #0]
 800aeb2:	e7d2      	b.n	800ae5a <_strtol_l.isra.0+0xa6>
 800aeb4:	2430      	movs	r4, #48	; 0x30
 800aeb6:	2e00      	cmp	r6, #0
 800aeb8:	d1a7      	bne.n	800ae0a <_strtol_l.isra.0+0x56>
 800aeba:	3608      	adds	r6, #8
 800aebc:	e7a5      	b.n	800ae0a <_strtol_l.isra.0+0x56>
 800aebe:	2c30      	cmp	r4, #48	; 0x30
 800aec0:	d09b      	beq.n	800adfa <_strtol_l.isra.0+0x46>
 800aec2:	260a      	movs	r6, #10
 800aec4:	e7a1      	b.n	800ae0a <_strtol_l.isra.0+0x56>
 800aec6:	46c0      	nop			; (mov r8, r8)
 800aec8:	0800c079 	.word	0x0800c079
 800aecc:	7fffffff 	.word	0x7fffffff

0800aed0 <strtol>:
 800aed0:	b510      	push	{r4, lr}
 800aed2:	0013      	movs	r3, r2
 800aed4:	000a      	movs	r2, r1
 800aed6:	0001      	movs	r1, r0
 800aed8:	4802      	ldr	r0, [pc, #8]	; (800aee4 <strtol+0x14>)
 800aeda:	6800      	ldr	r0, [r0, #0]
 800aedc:	f7ff ff6a 	bl	800adb4 <_strtol_l.isra.0>
 800aee0:	bd10      	pop	{r4, pc}
 800aee2:	46c0      	nop			; (mov r8, r8)
 800aee4:	2000000c 	.word	0x2000000c

0800aee8 <__ssputs_r>:
 800aee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeea:	688e      	ldr	r6, [r1, #8]
 800aeec:	b085      	sub	sp, #20
 800aeee:	0007      	movs	r7, r0
 800aef0:	000c      	movs	r4, r1
 800aef2:	9203      	str	r2, [sp, #12]
 800aef4:	9301      	str	r3, [sp, #4]
 800aef6:	429e      	cmp	r6, r3
 800aef8:	d83c      	bhi.n	800af74 <__ssputs_r+0x8c>
 800aefa:	2390      	movs	r3, #144	; 0x90
 800aefc:	898a      	ldrh	r2, [r1, #12]
 800aefe:	00db      	lsls	r3, r3, #3
 800af00:	421a      	tst	r2, r3
 800af02:	d034      	beq.n	800af6e <__ssputs_r+0x86>
 800af04:	2503      	movs	r5, #3
 800af06:	6909      	ldr	r1, [r1, #16]
 800af08:	6823      	ldr	r3, [r4, #0]
 800af0a:	1a5b      	subs	r3, r3, r1
 800af0c:	9302      	str	r3, [sp, #8]
 800af0e:	6963      	ldr	r3, [r4, #20]
 800af10:	9802      	ldr	r0, [sp, #8]
 800af12:	435d      	muls	r5, r3
 800af14:	0feb      	lsrs	r3, r5, #31
 800af16:	195d      	adds	r5, r3, r5
 800af18:	9b01      	ldr	r3, [sp, #4]
 800af1a:	106d      	asrs	r5, r5, #1
 800af1c:	3301      	adds	r3, #1
 800af1e:	181b      	adds	r3, r3, r0
 800af20:	42ab      	cmp	r3, r5
 800af22:	d900      	bls.n	800af26 <__ssputs_r+0x3e>
 800af24:	001d      	movs	r5, r3
 800af26:	0553      	lsls	r3, r2, #21
 800af28:	d532      	bpl.n	800af90 <__ssputs_r+0xa8>
 800af2a:	0029      	movs	r1, r5
 800af2c:	0038      	movs	r0, r7
 800af2e:	f000 fb27 	bl	800b580 <_malloc_r>
 800af32:	1e06      	subs	r6, r0, #0
 800af34:	d109      	bne.n	800af4a <__ssputs_r+0x62>
 800af36:	230c      	movs	r3, #12
 800af38:	603b      	str	r3, [r7, #0]
 800af3a:	2340      	movs	r3, #64	; 0x40
 800af3c:	2001      	movs	r0, #1
 800af3e:	89a2      	ldrh	r2, [r4, #12]
 800af40:	4240      	negs	r0, r0
 800af42:	4313      	orrs	r3, r2
 800af44:	81a3      	strh	r3, [r4, #12]
 800af46:	b005      	add	sp, #20
 800af48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af4a:	9a02      	ldr	r2, [sp, #8]
 800af4c:	6921      	ldr	r1, [r4, #16]
 800af4e:	f7ff fee3 	bl	800ad18 <memcpy>
 800af52:	89a3      	ldrh	r3, [r4, #12]
 800af54:	4a14      	ldr	r2, [pc, #80]	; (800afa8 <__ssputs_r+0xc0>)
 800af56:	401a      	ands	r2, r3
 800af58:	2380      	movs	r3, #128	; 0x80
 800af5a:	4313      	orrs	r3, r2
 800af5c:	81a3      	strh	r3, [r4, #12]
 800af5e:	9b02      	ldr	r3, [sp, #8]
 800af60:	6126      	str	r6, [r4, #16]
 800af62:	18f6      	adds	r6, r6, r3
 800af64:	6026      	str	r6, [r4, #0]
 800af66:	6165      	str	r5, [r4, #20]
 800af68:	9e01      	ldr	r6, [sp, #4]
 800af6a:	1aed      	subs	r5, r5, r3
 800af6c:	60a5      	str	r5, [r4, #8]
 800af6e:	9b01      	ldr	r3, [sp, #4]
 800af70:	429e      	cmp	r6, r3
 800af72:	d900      	bls.n	800af76 <__ssputs_r+0x8e>
 800af74:	9e01      	ldr	r6, [sp, #4]
 800af76:	0032      	movs	r2, r6
 800af78:	9903      	ldr	r1, [sp, #12]
 800af7a:	6820      	ldr	r0, [r4, #0]
 800af7c:	f000 faa3 	bl	800b4c6 <memmove>
 800af80:	68a3      	ldr	r3, [r4, #8]
 800af82:	2000      	movs	r0, #0
 800af84:	1b9b      	subs	r3, r3, r6
 800af86:	60a3      	str	r3, [r4, #8]
 800af88:	6823      	ldr	r3, [r4, #0]
 800af8a:	199e      	adds	r6, r3, r6
 800af8c:	6026      	str	r6, [r4, #0]
 800af8e:	e7da      	b.n	800af46 <__ssputs_r+0x5e>
 800af90:	002a      	movs	r2, r5
 800af92:	0038      	movs	r0, r7
 800af94:	f000 fb52 	bl	800b63c <_realloc_r>
 800af98:	1e06      	subs	r6, r0, #0
 800af9a:	d1e0      	bne.n	800af5e <__ssputs_r+0x76>
 800af9c:	0038      	movs	r0, r7
 800af9e:	6921      	ldr	r1, [r4, #16]
 800afa0:	f000 faa4 	bl	800b4ec <_free_r>
 800afa4:	e7c7      	b.n	800af36 <__ssputs_r+0x4e>
 800afa6:	46c0      	nop			; (mov r8, r8)
 800afa8:	fffffb7f 	.word	0xfffffb7f

0800afac <_svfiprintf_r>:
 800afac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afae:	b0a1      	sub	sp, #132	; 0x84
 800afb0:	9003      	str	r0, [sp, #12]
 800afb2:	001d      	movs	r5, r3
 800afb4:	898b      	ldrh	r3, [r1, #12]
 800afb6:	000f      	movs	r7, r1
 800afb8:	0016      	movs	r6, r2
 800afba:	061b      	lsls	r3, r3, #24
 800afbc:	d511      	bpl.n	800afe2 <_svfiprintf_r+0x36>
 800afbe:	690b      	ldr	r3, [r1, #16]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d10e      	bne.n	800afe2 <_svfiprintf_r+0x36>
 800afc4:	2140      	movs	r1, #64	; 0x40
 800afc6:	f000 fadb 	bl	800b580 <_malloc_r>
 800afca:	6038      	str	r0, [r7, #0]
 800afcc:	6138      	str	r0, [r7, #16]
 800afce:	2800      	cmp	r0, #0
 800afd0:	d105      	bne.n	800afde <_svfiprintf_r+0x32>
 800afd2:	230c      	movs	r3, #12
 800afd4:	9a03      	ldr	r2, [sp, #12]
 800afd6:	3801      	subs	r0, #1
 800afd8:	6013      	str	r3, [r2, #0]
 800afda:	b021      	add	sp, #132	; 0x84
 800afdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afde:	2340      	movs	r3, #64	; 0x40
 800afe0:	617b      	str	r3, [r7, #20]
 800afe2:	2300      	movs	r3, #0
 800afe4:	ac08      	add	r4, sp, #32
 800afe6:	6163      	str	r3, [r4, #20]
 800afe8:	3320      	adds	r3, #32
 800afea:	7663      	strb	r3, [r4, #25]
 800afec:	3310      	adds	r3, #16
 800afee:	76a3      	strb	r3, [r4, #26]
 800aff0:	9507      	str	r5, [sp, #28]
 800aff2:	0035      	movs	r5, r6
 800aff4:	782b      	ldrb	r3, [r5, #0]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d001      	beq.n	800affe <_svfiprintf_r+0x52>
 800affa:	2b25      	cmp	r3, #37	; 0x25
 800affc:	d147      	bne.n	800b08e <_svfiprintf_r+0xe2>
 800affe:	1bab      	subs	r3, r5, r6
 800b000:	9305      	str	r3, [sp, #20]
 800b002:	42b5      	cmp	r5, r6
 800b004:	d00c      	beq.n	800b020 <_svfiprintf_r+0x74>
 800b006:	0032      	movs	r2, r6
 800b008:	0039      	movs	r1, r7
 800b00a:	9803      	ldr	r0, [sp, #12]
 800b00c:	f7ff ff6c 	bl	800aee8 <__ssputs_r>
 800b010:	1c43      	adds	r3, r0, #1
 800b012:	d100      	bne.n	800b016 <_svfiprintf_r+0x6a>
 800b014:	e0ae      	b.n	800b174 <_svfiprintf_r+0x1c8>
 800b016:	6962      	ldr	r2, [r4, #20]
 800b018:	9b05      	ldr	r3, [sp, #20]
 800b01a:	4694      	mov	ip, r2
 800b01c:	4463      	add	r3, ip
 800b01e:	6163      	str	r3, [r4, #20]
 800b020:	782b      	ldrb	r3, [r5, #0]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d100      	bne.n	800b028 <_svfiprintf_r+0x7c>
 800b026:	e0a5      	b.n	800b174 <_svfiprintf_r+0x1c8>
 800b028:	2201      	movs	r2, #1
 800b02a:	2300      	movs	r3, #0
 800b02c:	4252      	negs	r2, r2
 800b02e:	6062      	str	r2, [r4, #4]
 800b030:	a904      	add	r1, sp, #16
 800b032:	3254      	adds	r2, #84	; 0x54
 800b034:	1852      	adds	r2, r2, r1
 800b036:	1c6e      	adds	r6, r5, #1
 800b038:	6023      	str	r3, [r4, #0]
 800b03a:	60e3      	str	r3, [r4, #12]
 800b03c:	60a3      	str	r3, [r4, #8]
 800b03e:	7013      	strb	r3, [r2, #0]
 800b040:	65a3      	str	r3, [r4, #88]	; 0x58
 800b042:	2205      	movs	r2, #5
 800b044:	7831      	ldrb	r1, [r6, #0]
 800b046:	4854      	ldr	r0, [pc, #336]	; (800b198 <_svfiprintf_r+0x1ec>)
 800b048:	f000 fa32 	bl	800b4b0 <memchr>
 800b04c:	1c75      	adds	r5, r6, #1
 800b04e:	2800      	cmp	r0, #0
 800b050:	d11f      	bne.n	800b092 <_svfiprintf_r+0xe6>
 800b052:	6822      	ldr	r2, [r4, #0]
 800b054:	06d3      	lsls	r3, r2, #27
 800b056:	d504      	bpl.n	800b062 <_svfiprintf_r+0xb6>
 800b058:	2353      	movs	r3, #83	; 0x53
 800b05a:	a904      	add	r1, sp, #16
 800b05c:	185b      	adds	r3, r3, r1
 800b05e:	2120      	movs	r1, #32
 800b060:	7019      	strb	r1, [r3, #0]
 800b062:	0713      	lsls	r3, r2, #28
 800b064:	d504      	bpl.n	800b070 <_svfiprintf_r+0xc4>
 800b066:	2353      	movs	r3, #83	; 0x53
 800b068:	a904      	add	r1, sp, #16
 800b06a:	185b      	adds	r3, r3, r1
 800b06c:	212b      	movs	r1, #43	; 0x2b
 800b06e:	7019      	strb	r1, [r3, #0]
 800b070:	7833      	ldrb	r3, [r6, #0]
 800b072:	2b2a      	cmp	r3, #42	; 0x2a
 800b074:	d016      	beq.n	800b0a4 <_svfiprintf_r+0xf8>
 800b076:	0035      	movs	r5, r6
 800b078:	2100      	movs	r1, #0
 800b07a:	200a      	movs	r0, #10
 800b07c:	68e3      	ldr	r3, [r4, #12]
 800b07e:	782a      	ldrb	r2, [r5, #0]
 800b080:	1c6e      	adds	r6, r5, #1
 800b082:	3a30      	subs	r2, #48	; 0x30
 800b084:	2a09      	cmp	r2, #9
 800b086:	d94e      	bls.n	800b126 <_svfiprintf_r+0x17a>
 800b088:	2900      	cmp	r1, #0
 800b08a:	d111      	bne.n	800b0b0 <_svfiprintf_r+0x104>
 800b08c:	e017      	b.n	800b0be <_svfiprintf_r+0x112>
 800b08e:	3501      	adds	r5, #1
 800b090:	e7b0      	b.n	800aff4 <_svfiprintf_r+0x48>
 800b092:	4b41      	ldr	r3, [pc, #260]	; (800b198 <_svfiprintf_r+0x1ec>)
 800b094:	6822      	ldr	r2, [r4, #0]
 800b096:	1ac0      	subs	r0, r0, r3
 800b098:	2301      	movs	r3, #1
 800b09a:	4083      	lsls	r3, r0
 800b09c:	4313      	orrs	r3, r2
 800b09e:	002e      	movs	r6, r5
 800b0a0:	6023      	str	r3, [r4, #0]
 800b0a2:	e7ce      	b.n	800b042 <_svfiprintf_r+0x96>
 800b0a4:	9b07      	ldr	r3, [sp, #28]
 800b0a6:	1d19      	adds	r1, r3, #4
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	9107      	str	r1, [sp, #28]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	db01      	blt.n	800b0b4 <_svfiprintf_r+0x108>
 800b0b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0b2:	e004      	b.n	800b0be <_svfiprintf_r+0x112>
 800b0b4:	425b      	negs	r3, r3
 800b0b6:	60e3      	str	r3, [r4, #12]
 800b0b8:	2302      	movs	r3, #2
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	6023      	str	r3, [r4, #0]
 800b0be:	782b      	ldrb	r3, [r5, #0]
 800b0c0:	2b2e      	cmp	r3, #46	; 0x2e
 800b0c2:	d10a      	bne.n	800b0da <_svfiprintf_r+0x12e>
 800b0c4:	786b      	ldrb	r3, [r5, #1]
 800b0c6:	2b2a      	cmp	r3, #42	; 0x2a
 800b0c8:	d135      	bne.n	800b136 <_svfiprintf_r+0x18a>
 800b0ca:	9b07      	ldr	r3, [sp, #28]
 800b0cc:	3502      	adds	r5, #2
 800b0ce:	1d1a      	adds	r2, r3, #4
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	9207      	str	r2, [sp, #28]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	db2b      	blt.n	800b130 <_svfiprintf_r+0x184>
 800b0d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b0da:	4e30      	ldr	r6, [pc, #192]	; (800b19c <_svfiprintf_r+0x1f0>)
 800b0dc:	2203      	movs	r2, #3
 800b0de:	0030      	movs	r0, r6
 800b0e0:	7829      	ldrb	r1, [r5, #0]
 800b0e2:	f000 f9e5 	bl	800b4b0 <memchr>
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	d006      	beq.n	800b0f8 <_svfiprintf_r+0x14c>
 800b0ea:	2340      	movs	r3, #64	; 0x40
 800b0ec:	1b80      	subs	r0, r0, r6
 800b0ee:	4083      	lsls	r3, r0
 800b0f0:	6822      	ldr	r2, [r4, #0]
 800b0f2:	3501      	adds	r5, #1
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	6023      	str	r3, [r4, #0]
 800b0f8:	7829      	ldrb	r1, [r5, #0]
 800b0fa:	2206      	movs	r2, #6
 800b0fc:	4828      	ldr	r0, [pc, #160]	; (800b1a0 <_svfiprintf_r+0x1f4>)
 800b0fe:	1c6e      	adds	r6, r5, #1
 800b100:	7621      	strb	r1, [r4, #24]
 800b102:	f000 f9d5 	bl	800b4b0 <memchr>
 800b106:	2800      	cmp	r0, #0
 800b108:	d03c      	beq.n	800b184 <_svfiprintf_r+0x1d8>
 800b10a:	4b26      	ldr	r3, [pc, #152]	; (800b1a4 <_svfiprintf_r+0x1f8>)
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d125      	bne.n	800b15c <_svfiprintf_r+0x1b0>
 800b110:	2207      	movs	r2, #7
 800b112:	9b07      	ldr	r3, [sp, #28]
 800b114:	3307      	adds	r3, #7
 800b116:	4393      	bics	r3, r2
 800b118:	3308      	adds	r3, #8
 800b11a:	9307      	str	r3, [sp, #28]
 800b11c:	6963      	ldr	r3, [r4, #20]
 800b11e:	9a04      	ldr	r2, [sp, #16]
 800b120:	189b      	adds	r3, r3, r2
 800b122:	6163      	str	r3, [r4, #20]
 800b124:	e765      	b.n	800aff2 <_svfiprintf_r+0x46>
 800b126:	4343      	muls	r3, r0
 800b128:	0035      	movs	r5, r6
 800b12a:	2101      	movs	r1, #1
 800b12c:	189b      	adds	r3, r3, r2
 800b12e:	e7a6      	b.n	800b07e <_svfiprintf_r+0xd2>
 800b130:	2301      	movs	r3, #1
 800b132:	425b      	negs	r3, r3
 800b134:	e7d0      	b.n	800b0d8 <_svfiprintf_r+0x12c>
 800b136:	2300      	movs	r3, #0
 800b138:	200a      	movs	r0, #10
 800b13a:	001a      	movs	r2, r3
 800b13c:	3501      	adds	r5, #1
 800b13e:	6063      	str	r3, [r4, #4]
 800b140:	7829      	ldrb	r1, [r5, #0]
 800b142:	1c6e      	adds	r6, r5, #1
 800b144:	3930      	subs	r1, #48	; 0x30
 800b146:	2909      	cmp	r1, #9
 800b148:	d903      	bls.n	800b152 <_svfiprintf_r+0x1a6>
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d0c5      	beq.n	800b0da <_svfiprintf_r+0x12e>
 800b14e:	9209      	str	r2, [sp, #36]	; 0x24
 800b150:	e7c3      	b.n	800b0da <_svfiprintf_r+0x12e>
 800b152:	4342      	muls	r2, r0
 800b154:	0035      	movs	r5, r6
 800b156:	2301      	movs	r3, #1
 800b158:	1852      	adds	r2, r2, r1
 800b15a:	e7f1      	b.n	800b140 <_svfiprintf_r+0x194>
 800b15c:	ab07      	add	r3, sp, #28
 800b15e:	9300      	str	r3, [sp, #0]
 800b160:	003a      	movs	r2, r7
 800b162:	0021      	movs	r1, r4
 800b164:	4b10      	ldr	r3, [pc, #64]	; (800b1a8 <_svfiprintf_r+0x1fc>)
 800b166:	9803      	ldr	r0, [sp, #12]
 800b168:	e000      	b.n	800b16c <_svfiprintf_r+0x1c0>
 800b16a:	bf00      	nop
 800b16c:	9004      	str	r0, [sp, #16]
 800b16e:	9b04      	ldr	r3, [sp, #16]
 800b170:	3301      	adds	r3, #1
 800b172:	d1d3      	bne.n	800b11c <_svfiprintf_r+0x170>
 800b174:	89bb      	ldrh	r3, [r7, #12]
 800b176:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b178:	065b      	lsls	r3, r3, #25
 800b17a:	d400      	bmi.n	800b17e <_svfiprintf_r+0x1d2>
 800b17c:	e72d      	b.n	800afda <_svfiprintf_r+0x2e>
 800b17e:	2001      	movs	r0, #1
 800b180:	4240      	negs	r0, r0
 800b182:	e72a      	b.n	800afda <_svfiprintf_r+0x2e>
 800b184:	ab07      	add	r3, sp, #28
 800b186:	9300      	str	r3, [sp, #0]
 800b188:	003a      	movs	r2, r7
 800b18a:	0021      	movs	r1, r4
 800b18c:	4b06      	ldr	r3, [pc, #24]	; (800b1a8 <_svfiprintf_r+0x1fc>)
 800b18e:	9803      	ldr	r0, [sp, #12]
 800b190:	f000 f87c 	bl	800b28c <_printf_i>
 800b194:	e7ea      	b.n	800b16c <_svfiprintf_r+0x1c0>
 800b196:	46c0      	nop			; (mov r8, r8)
 800b198:	0800c179 	.word	0x0800c179
 800b19c:	0800c17f 	.word	0x0800c17f
 800b1a0:	0800c183 	.word	0x0800c183
 800b1a4:	00000000 	.word	0x00000000
 800b1a8:	0800aee9 	.word	0x0800aee9

0800b1ac <_printf_common>:
 800b1ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1ae:	0015      	movs	r5, r2
 800b1b0:	9301      	str	r3, [sp, #4]
 800b1b2:	688a      	ldr	r2, [r1, #8]
 800b1b4:	690b      	ldr	r3, [r1, #16]
 800b1b6:	000c      	movs	r4, r1
 800b1b8:	9000      	str	r0, [sp, #0]
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	da00      	bge.n	800b1c0 <_printf_common+0x14>
 800b1be:	0013      	movs	r3, r2
 800b1c0:	0022      	movs	r2, r4
 800b1c2:	602b      	str	r3, [r5, #0]
 800b1c4:	3243      	adds	r2, #67	; 0x43
 800b1c6:	7812      	ldrb	r2, [r2, #0]
 800b1c8:	2a00      	cmp	r2, #0
 800b1ca:	d001      	beq.n	800b1d0 <_printf_common+0x24>
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	602b      	str	r3, [r5, #0]
 800b1d0:	6823      	ldr	r3, [r4, #0]
 800b1d2:	069b      	lsls	r3, r3, #26
 800b1d4:	d502      	bpl.n	800b1dc <_printf_common+0x30>
 800b1d6:	682b      	ldr	r3, [r5, #0]
 800b1d8:	3302      	adds	r3, #2
 800b1da:	602b      	str	r3, [r5, #0]
 800b1dc:	6822      	ldr	r2, [r4, #0]
 800b1de:	2306      	movs	r3, #6
 800b1e0:	0017      	movs	r7, r2
 800b1e2:	401f      	ands	r7, r3
 800b1e4:	421a      	tst	r2, r3
 800b1e6:	d027      	beq.n	800b238 <_printf_common+0x8c>
 800b1e8:	0023      	movs	r3, r4
 800b1ea:	3343      	adds	r3, #67	; 0x43
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	1e5a      	subs	r2, r3, #1
 800b1f0:	4193      	sbcs	r3, r2
 800b1f2:	6822      	ldr	r2, [r4, #0]
 800b1f4:	0692      	lsls	r2, r2, #26
 800b1f6:	d430      	bmi.n	800b25a <_printf_common+0xae>
 800b1f8:	0022      	movs	r2, r4
 800b1fa:	9901      	ldr	r1, [sp, #4]
 800b1fc:	9800      	ldr	r0, [sp, #0]
 800b1fe:	9e08      	ldr	r6, [sp, #32]
 800b200:	3243      	adds	r2, #67	; 0x43
 800b202:	47b0      	blx	r6
 800b204:	1c43      	adds	r3, r0, #1
 800b206:	d025      	beq.n	800b254 <_printf_common+0xa8>
 800b208:	2306      	movs	r3, #6
 800b20a:	6820      	ldr	r0, [r4, #0]
 800b20c:	682a      	ldr	r2, [r5, #0]
 800b20e:	68e1      	ldr	r1, [r4, #12]
 800b210:	2500      	movs	r5, #0
 800b212:	4003      	ands	r3, r0
 800b214:	2b04      	cmp	r3, #4
 800b216:	d103      	bne.n	800b220 <_printf_common+0x74>
 800b218:	1a8d      	subs	r5, r1, r2
 800b21a:	43eb      	mvns	r3, r5
 800b21c:	17db      	asrs	r3, r3, #31
 800b21e:	401d      	ands	r5, r3
 800b220:	68a3      	ldr	r3, [r4, #8]
 800b222:	6922      	ldr	r2, [r4, #16]
 800b224:	4293      	cmp	r3, r2
 800b226:	dd01      	ble.n	800b22c <_printf_common+0x80>
 800b228:	1a9b      	subs	r3, r3, r2
 800b22a:	18ed      	adds	r5, r5, r3
 800b22c:	2700      	movs	r7, #0
 800b22e:	42bd      	cmp	r5, r7
 800b230:	d120      	bne.n	800b274 <_printf_common+0xc8>
 800b232:	2000      	movs	r0, #0
 800b234:	e010      	b.n	800b258 <_printf_common+0xac>
 800b236:	3701      	adds	r7, #1
 800b238:	68e3      	ldr	r3, [r4, #12]
 800b23a:	682a      	ldr	r2, [r5, #0]
 800b23c:	1a9b      	subs	r3, r3, r2
 800b23e:	42bb      	cmp	r3, r7
 800b240:	ddd2      	ble.n	800b1e8 <_printf_common+0x3c>
 800b242:	0022      	movs	r2, r4
 800b244:	2301      	movs	r3, #1
 800b246:	9901      	ldr	r1, [sp, #4]
 800b248:	9800      	ldr	r0, [sp, #0]
 800b24a:	9e08      	ldr	r6, [sp, #32]
 800b24c:	3219      	adds	r2, #25
 800b24e:	47b0      	blx	r6
 800b250:	1c43      	adds	r3, r0, #1
 800b252:	d1f0      	bne.n	800b236 <_printf_common+0x8a>
 800b254:	2001      	movs	r0, #1
 800b256:	4240      	negs	r0, r0
 800b258:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b25a:	2030      	movs	r0, #48	; 0x30
 800b25c:	18e1      	adds	r1, r4, r3
 800b25e:	3143      	adds	r1, #67	; 0x43
 800b260:	7008      	strb	r0, [r1, #0]
 800b262:	0021      	movs	r1, r4
 800b264:	1c5a      	adds	r2, r3, #1
 800b266:	3145      	adds	r1, #69	; 0x45
 800b268:	7809      	ldrb	r1, [r1, #0]
 800b26a:	18a2      	adds	r2, r4, r2
 800b26c:	3243      	adds	r2, #67	; 0x43
 800b26e:	3302      	adds	r3, #2
 800b270:	7011      	strb	r1, [r2, #0]
 800b272:	e7c1      	b.n	800b1f8 <_printf_common+0x4c>
 800b274:	0022      	movs	r2, r4
 800b276:	2301      	movs	r3, #1
 800b278:	9901      	ldr	r1, [sp, #4]
 800b27a:	9800      	ldr	r0, [sp, #0]
 800b27c:	9e08      	ldr	r6, [sp, #32]
 800b27e:	321a      	adds	r2, #26
 800b280:	47b0      	blx	r6
 800b282:	1c43      	adds	r3, r0, #1
 800b284:	d0e6      	beq.n	800b254 <_printf_common+0xa8>
 800b286:	3701      	adds	r7, #1
 800b288:	e7d1      	b.n	800b22e <_printf_common+0x82>
	...

0800b28c <_printf_i>:
 800b28c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b28e:	b08b      	sub	sp, #44	; 0x2c
 800b290:	9206      	str	r2, [sp, #24]
 800b292:	000a      	movs	r2, r1
 800b294:	3243      	adds	r2, #67	; 0x43
 800b296:	9307      	str	r3, [sp, #28]
 800b298:	9005      	str	r0, [sp, #20]
 800b29a:	9204      	str	r2, [sp, #16]
 800b29c:	7e0a      	ldrb	r2, [r1, #24]
 800b29e:	000c      	movs	r4, r1
 800b2a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b2a2:	2a78      	cmp	r2, #120	; 0x78
 800b2a4:	d806      	bhi.n	800b2b4 <_printf_i+0x28>
 800b2a6:	2a62      	cmp	r2, #98	; 0x62
 800b2a8:	d808      	bhi.n	800b2bc <_printf_i+0x30>
 800b2aa:	2a00      	cmp	r2, #0
 800b2ac:	d100      	bne.n	800b2b0 <_printf_i+0x24>
 800b2ae:	e0c0      	b.n	800b432 <_printf_i+0x1a6>
 800b2b0:	2a58      	cmp	r2, #88	; 0x58
 800b2b2:	d052      	beq.n	800b35a <_printf_i+0xce>
 800b2b4:	0026      	movs	r6, r4
 800b2b6:	3642      	adds	r6, #66	; 0x42
 800b2b8:	7032      	strb	r2, [r6, #0]
 800b2ba:	e022      	b.n	800b302 <_printf_i+0x76>
 800b2bc:	0010      	movs	r0, r2
 800b2be:	3863      	subs	r0, #99	; 0x63
 800b2c0:	2815      	cmp	r0, #21
 800b2c2:	d8f7      	bhi.n	800b2b4 <_printf_i+0x28>
 800b2c4:	f7f4 ff28 	bl	8000118 <__gnu_thumb1_case_shi>
 800b2c8:	001f0016 	.word	0x001f0016
 800b2cc:	fff6fff6 	.word	0xfff6fff6
 800b2d0:	fff6fff6 	.word	0xfff6fff6
 800b2d4:	fff6001f 	.word	0xfff6001f
 800b2d8:	fff6fff6 	.word	0xfff6fff6
 800b2dc:	00a8fff6 	.word	0x00a8fff6
 800b2e0:	009a0036 	.word	0x009a0036
 800b2e4:	fff6fff6 	.word	0xfff6fff6
 800b2e8:	fff600b9 	.word	0xfff600b9
 800b2ec:	fff60036 	.word	0xfff60036
 800b2f0:	009efff6 	.word	0x009efff6
 800b2f4:	0026      	movs	r6, r4
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	3642      	adds	r6, #66	; 0x42
 800b2fa:	1d11      	adds	r1, r2, #4
 800b2fc:	6019      	str	r1, [r3, #0]
 800b2fe:	6813      	ldr	r3, [r2, #0]
 800b300:	7033      	strb	r3, [r6, #0]
 800b302:	2301      	movs	r3, #1
 800b304:	e0a7      	b.n	800b456 <_printf_i+0x1ca>
 800b306:	6808      	ldr	r0, [r1, #0]
 800b308:	6819      	ldr	r1, [r3, #0]
 800b30a:	1d0a      	adds	r2, r1, #4
 800b30c:	0605      	lsls	r5, r0, #24
 800b30e:	d50b      	bpl.n	800b328 <_printf_i+0x9c>
 800b310:	680d      	ldr	r5, [r1, #0]
 800b312:	601a      	str	r2, [r3, #0]
 800b314:	2d00      	cmp	r5, #0
 800b316:	da03      	bge.n	800b320 <_printf_i+0x94>
 800b318:	232d      	movs	r3, #45	; 0x2d
 800b31a:	9a04      	ldr	r2, [sp, #16]
 800b31c:	426d      	negs	r5, r5
 800b31e:	7013      	strb	r3, [r2, #0]
 800b320:	4b61      	ldr	r3, [pc, #388]	; (800b4a8 <_printf_i+0x21c>)
 800b322:	270a      	movs	r7, #10
 800b324:	9303      	str	r3, [sp, #12]
 800b326:	e032      	b.n	800b38e <_printf_i+0x102>
 800b328:	680d      	ldr	r5, [r1, #0]
 800b32a:	601a      	str	r2, [r3, #0]
 800b32c:	0641      	lsls	r1, r0, #25
 800b32e:	d5f1      	bpl.n	800b314 <_printf_i+0x88>
 800b330:	b22d      	sxth	r5, r5
 800b332:	e7ef      	b.n	800b314 <_printf_i+0x88>
 800b334:	680d      	ldr	r5, [r1, #0]
 800b336:	6819      	ldr	r1, [r3, #0]
 800b338:	1d08      	adds	r0, r1, #4
 800b33a:	6018      	str	r0, [r3, #0]
 800b33c:	062e      	lsls	r6, r5, #24
 800b33e:	d501      	bpl.n	800b344 <_printf_i+0xb8>
 800b340:	680d      	ldr	r5, [r1, #0]
 800b342:	e003      	b.n	800b34c <_printf_i+0xc0>
 800b344:	066d      	lsls	r5, r5, #25
 800b346:	d5fb      	bpl.n	800b340 <_printf_i+0xb4>
 800b348:	680d      	ldr	r5, [r1, #0]
 800b34a:	b2ad      	uxth	r5, r5
 800b34c:	4b56      	ldr	r3, [pc, #344]	; (800b4a8 <_printf_i+0x21c>)
 800b34e:	270a      	movs	r7, #10
 800b350:	9303      	str	r3, [sp, #12]
 800b352:	2a6f      	cmp	r2, #111	; 0x6f
 800b354:	d117      	bne.n	800b386 <_printf_i+0xfa>
 800b356:	2708      	movs	r7, #8
 800b358:	e015      	b.n	800b386 <_printf_i+0xfa>
 800b35a:	3145      	adds	r1, #69	; 0x45
 800b35c:	700a      	strb	r2, [r1, #0]
 800b35e:	4a52      	ldr	r2, [pc, #328]	; (800b4a8 <_printf_i+0x21c>)
 800b360:	9203      	str	r2, [sp, #12]
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	6821      	ldr	r1, [r4, #0]
 800b366:	ca20      	ldmia	r2!, {r5}
 800b368:	601a      	str	r2, [r3, #0]
 800b36a:	0608      	lsls	r0, r1, #24
 800b36c:	d550      	bpl.n	800b410 <_printf_i+0x184>
 800b36e:	07cb      	lsls	r3, r1, #31
 800b370:	d502      	bpl.n	800b378 <_printf_i+0xec>
 800b372:	2320      	movs	r3, #32
 800b374:	4319      	orrs	r1, r3
 800b376:	6021      	str	r1, [r4, #0]
 800b378:	2710      	movs	r7, #16
 800b37a:	2d00      	cmp	r5, #0
 800b37c:	d103      	bne.n	800b386 <_printf_i+0xfa>
 800b37e:	2320      	movs	r3, #32
 800b380:	6822      	ldr	r2, [r4, #0]
 800b382:	439a      	bics	r2, r3
 800b384:	6022      	str	r2, [r4, #0]
 800b386:	0023      	movs	r3, r4
 800b388:	2200      	movs	r2, #0
 800b38a:	3343      	adds	r3, #67	; 0x43
 800b38c:	701a      	strb	r2, [r3, #0]
 800b38e:	6863      	ldr	r3, [r4, #4]
 800b390:	60a3      	str	r3, [r4, #8]
 800b392:	2b00      	cmp	r3, #0
 800b394:	db03      	blt.n	800b39e <_printf_i+0x112>
 800b396:	2204      	movs	r2, #4
 800b398:	6821      	ldr	r1, [r4, #0]
 800b39a:	4391      	bics	r1, r2
 800b39c:	6021      	str	r1, [r4, #0]
 800b39e:	2d00      	cmp	r5, #0
 800b3a0:	d102      	bne.n	800b3a8 <_printf_i+0x11c>
 800b3a2:	9e04      	ldr	r6, [sp, #16]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d00c      	beq.n	800b3c2 <_printf_i+0x136>
 800b3a8:	9e04      	ldr	r6, [sp, #16]
 800b3aa:	0028      	movs	r0, r5
 800b3ac:	0039      	movs	r1, r7
 800b3ae:	f7f4 ff43 	bl	8000238 <__aeabi_uidivmod>
 800b3b2:	9b03      	ldr	r3, [sp, #12]
 800b3b4:	3e01      	subs	r6, #1
 800b3b6:	5c5b      	ldrb	r3, [r3, r1]
 800b3b8:	7033      	strb	r3, [r6, #0]
 800b3ba:	002b      	movs	r3, r5
 800b3bc:	0005      	movs	r5, r0
 800b3be:	429f      	cmp	r7, r3
 800b3c0:	d9f3      	bls.n	800b3aa <_printf_i+0x11e>
 800b3c2:	2f08      	cmp	r7, #8
 800b3c4:	d109      	bne.n	800b3da <_printf_i+0x14e>
 800b3c6:	6823      	ldr	r3, [r4, #0]
 800b3c8:	07db      	lsls	r3, r3, #31
 800b3ca:	d506      	bpl.n	800b3da <_printf_i+0x14e>
 800b3cc:	6863      	ldr	r3, [r4, #4]
 800b3ce:	6922      	ldr	r2, [r4, #16]
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	dc02      	bgt.n	800b3da <_printf_i+0x14e>
 800b3d4:	2330      	movs	r3, #48	; 0x30
 800b3d6:	3e01      	subs	r6, #1
 800b3d8:	7033      	strb	r3, [r6, #0]
 800b3da:	9b04      	ldr	r3, [sp, #16]
 800b3dc:	1b9b      	subs	r3, r3, r6
 800b3de:	6123      	str	r3, [r4, #16]
 800b3e0:	9b07      	ldr	r3, [sp, #28]
 800b3e2:	0021      	movs	r1, r4
 800b3e4:	9300      	str	r3, [sp, #0]
 800b3e6:	9805      	ldr	r0, [sp, #20]
 800b3e8:	9b06      	ldr	r3, [sp, #24]
 800b3ea:	aa09      	add	r2, sp, #36	; 0x24
 800b3ec:	f7ff fede 	bl	800b1ac <_printf_common>
 800b3f0:	1c43      	adds	r3, r0, #1
 800b3f2:	d135      	bne.n	800b460 <_printf_i+0x1d4>
 800b3f4:	2001      	movs	r0, #1
 800b3f6:	4240      	negs	r0, r0
 800b3f8:	b00b      	add	sp, #44	; 0x2c
 800b3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3fc:	2220      	movs	r2, #32
 800b3fe:	6809      	ldr	r1, [r1, #0]
 800b400:	430a      	orrs	r2, r1
 800b402:	6022      	str	r2, [r4, #0]
 800b404:	0022      	movs	r2, r4
 800b406:	2178      	movs	r1, #120	; 0x78
 800b408:	3245      	adds	r2, #69	; 0x45
 800b40a:	7011      	strb	r1, [r2, #0]
 800b40c:	4a27      	ldr	r2, [pc, #156]	; (800b4ac <_printf_i+0x220>)
 800b40e:	e7a7      	b.n	800b360 <_printf_i+0xd4>
 800b410:	0648      	lsls	r0, r1, #25
 800b412:	d5ac      	bpl.n	800b36e <_printf_i+0xe2>
 800b414:	b2ad      	uxth	r5, r5
 800b416:	e7aa      	b.n	800b36e <_printf_i+0xe2>
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	680d      	ldr	r5, [r1, #0]
 800b41c:	1d10      	adds	r0, r2, #4
 800b41e:	6949      	ldr	r1, [r1, #20]
 800b420:	6018      	str	r0, [r3, #0]
 800b422:	6813      	ldr	r3, [r2, #0]
 800b424:	062e      	lsls	r6, r5, #24
 800b426:	d501      	bpl.n	800b42c <_printf_i+0x1a0>
 800b428:	6019      	str	r1, [r3, #0]
 800b42a:	e002      	b.n	800b432 <_printf_i+0x1a6>
 800b42c:	066d      	lsls	r5, r5, #25
 800b42e:	d5fb      	bpl.n	800b428 <_printf_i+0x19c>
 800b430:	8019      	strh	r1, [r3, #0]
 800b432:	2300      	movs	r3, #0
 800b434:	9e04      	ldr	r6, [sp, #16]
 800b436:	6123      	str	r3, [r4, #16]
 800b438:	e7d2      	b.n	800b3e0 <_printf_i+0x154>
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	1d11      	adds	r1, r2, #4
 800b43e:	6019      	str	r1, [r3, #0]
 800b440:	6816      	ldr	r6, [r2, #0]
 800b442:	2100      	movs	r1, #0
 800b444:	0030      	movs	r0, r6
 800b446:	6862      	ldr	r2, [r4, #4]
 800b448:	f000 f832 	bl	800b4b0 <memchr>
 800b44c:	2800      	cmp	r0, #0
 800b44e:	d001      	beq.n	800b454 <_printf_i+0x1c8>
 800b450:	1b80      	subs	r0, r0, r6
 800b452:	6060      	str	r0, [r4, #4]
 800b454:	6863      	ldr	r3, [r4, #4]
 800b456:	6123      	str	r3, [r4, #16]
 800b458:	2300      	movs	r3, #0
 800b45a:	9a04      	ldr	r2, [sp, #16]
 800b45c:	7013      	strb	r3, [r2, #0]
 800b45e:	e7bf      	b.n	800b3e0 <_printf_i+0x154>
 800b460:	6923      	ldr	r3, [r4, #16]
 800b462:	0032      	movs	r2, r6
 800b464:	9906      	ldr	r1, [sp, #24]
 800b466:	9805      	ldr	r0, [sp, #20]
 800b468:	9d07      	ldr	r5, [sp, #28]
 800b46a:	47a8      	blx	r5
 800b46c:	1c43      	adds	r3, r0, #1
 800b46e:	d0c1      	beq.n	800b3f4 <_printf_i+0x168>
 800b470:	6823      	ldr	r3, [r4, #0]
 800b472:	079b      	lsls	r3, r3, #30
 800b474:	d415      	bmi.n	800b4a2 <_printf_i+0x216>
 800b476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b478:	68e0      	ldr	r0, [r4, #12]
 800b47a:	4298      	cmp	r0, r3
 800b47c:	dabc      	bge.n	800b3f8 <_printf_i+0x16c>
 800b47e:	0018      	movs	r0, r3
 800b480:	e7ba      	b.n	800b3f8 <_printf_i+0x16c>
 800b482:	0022      	movs	r2, r4
 800b484:	2301      	movs	r3, #1
 800b486:	9906      	ldr	r1, [sp, #24]
 800b488:	9805      	ldr	r0, [sp, #20]
 800b48a:	9e07      	ldr	r6, [sp, #28]
 800b48c:	3219      	adds	r2, #25
 800b48e:	47b0      	blx	r6
 800b490:	1c43      	adds	r3, r0, #1
 800b492:	d0af      	beq.n	800b3f4 <_printf_i+0x168>
 800b494:	3501      	adds	r5, #1
 800b496:	68e3      	ldr	r3, [r4, #12]
 800b498:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b49a:	1a9b      	subs	r3, r3, r2
 800b49c:	42ab      	cmp	r3, r5
 800b49e:	dcf0      	bgt.n	800b482 <_printf_i+0x1f6>
 800b4a0:	e7e9      	b.n	800b476 <_printf_i+0x1ea>
 800b4a2:	2500      	movs	r5, #0
 800b4a4:	e7f7      	b.n	800b496 <_printf_i+0x20a>
 800b4a6:	46c0      	nop			; (mov r8, r8)
 800b4a8:	0800c18a 	.word	0x0800c18a
 800b4ac:	0800c19b 	.word	0x0800c19b

0800b4b0 <memchr>:
 800b4b0:	b2c9      	uxtb	r1, r1
 800b4b2:	1882      	adds	r2, r0, r2
 800b4b4:	4290      	cmp	r0, r2
 800b4b6:	d101      	bne.n	800b4bc <memchr+0xc>
 800b4b8:	2000      	movs	r0, #0
 800b4ba:	4770      	bx	lr
 800b4bc:	7803      	ldrb	r3, [r0, #0]
 800b4be:	428b      	cmp	r3, r1
 800b4c0:	d0fb      	beq.n	800b4ba <memchr+0xa>
 800b4c2:	3001      	adds	r0, #1
 800b4c4:	e7f6      	b.n	800b4b4 <memchr+0x4>

0800b4c6 <memmove>:
 800b4c6:	b510      	push	{r4, lr}
 800b4c8:	4288      	cmp	r0, r1
 800b4ca:	d902      	bls.n	800b4d2 <memmove+0xc>
 800b4cc:	188b      	adds	r3, r1, r2
 800b4ce:	4298      	cmp	r0, r3
 800b4d0:	d303      	bcc.n	800b4da <memmove+0x14>
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	e007      	b.n	800b4e6 <memmove+0x20>
 800b4d6:	5c8b      	ldrb	r3, [r1, r2]
 800b4d8:	5483      	strb	r3, [r0, r2]
 800b4da:	3a01      	subs	r2, #1
 800b4dc:	d2fb      	bcs.n	800b4d6 <memmove+0x10>
 800b4de:	bd10      	pop	{r4, pc}
 800b4e0:	5ccc      	ldrb	r4, [r1, r3]
 800b4e2:	54c4      	strb	r4, [r0, r3]
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d1fa      	bne.n	800b4e0 <memmove+0x1a>
 800b4ea:	e7f8      	b.n	800b4de <memmove+0x18>

0800b4ec <_free_r>:
 800b4ec:	b570      	push	{r4, r5, r6, lr}
 800b4ee:	0005      	movs	r5, r0
 800b4f0:	2900      	cmp	r1, #0
 800b4f2:	d010      	beq.n	800b516 <_free_r+0x2a>
 800b4f4:	1f0c      	subs	r4, r1, #4
 800b4f6:	6823      	ldr	r3, [r4, #0]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	da00      	bge.n	800b4fe <_free_r+0x12>
 800b4fc:	18e4      	adds	r4, r4, r3
 800b4fe:	0028      	movs	r0, r5
 800b500:	f000 f8d4 	bl	800b6ac <__malloc_lock>
 800b504:	4a1d      	ldr	r2, [pc, #116]	; (800b57c <_free_r+0x90>)
 800b506:	6813      	ldr	r3, [r2, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d105      	bne.n	800b518 <_free_r+0x2c>
 800b50c:	6063      	str	r3, [r4, #4]
 800b50e:	6014      	str	r4, [r2, #0]
 800b510:	0028      	movs	r0, r5
 800b512:	f000 f8d3 	bl	800b6bc <__malloc_unlock>
 800b516:	bd70      	pop	{r4, r5, r6, pc}
 800b518:	42a3      	cmp	r3, r4
 800b51a:	d908      	bls.n	800b52e <_free_r+0x42>
 800b51c:	6821      	ldr	r1, [r4, #0]
 800b51e:	1860      	adds	r0, r4, r1
 800b520:	4283      	cmp	r3, r0
 800b522:	d1f3      	bne.n	800b50c <_free_r+0x20>
 800b524:	6818      	ldr	r0, [r3, #0]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	1841      	adds	r1, r0, r1
 800b52a:	6021      	str	r1, [r4, #0]
 800b52c:	e7ee      	b.n	800b50c <_free_r+0x20>
 800b52e:	001a      	movs	r2, r3
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d001      	beq.n	800b53a <_free_r+0x4e>
 800b536:	42a3      	cmp	r3, r4
 800b538:	d9f9      	bls.n	800b52e <_free_r+0x42>
 800b53a:	6811      	ldr	r1, [r2, #0]
 800b53c:	1850      	adds	r0, r2, r1
 800b53e:	42a0      	cmp	r0, r4
 800b540:	d10b      	bne.n	800b55a <_free_r+0x6e>
 800b542:	6820      	ldr	r0, [r4, #0]
 800b544:	1809      	adds	r1, r1, r0
 800b546:	1850      	adds	r0, r2, r1
 800b548:	6011      	str	r1, [r2, #0]
 800b54a:	4283      	cmp	r3, r0
 800b54c:	d1e0      	bne.n	800b510 <_free_r+0x24>
 800b54e:	6818      	ldr	r0, [r3, #0]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	1841      	adds	r1, r0, r1
 800b554:	6011      	str	r1, [r2, #0]
 800b556:	6053      	str	r3, [r2, #4]
 800b558:	e7da      	b.n	800b510 <_free_r+0x24>
 800b55a:	42a0      	cmp	r0, r4
 800b55c:	d902      	bls.n	800b564 <_free_r+0x78>
 800b55e:	230c      	movs	r3, #12
 800b560:	602b      	str	r3, [r5, #0]
 800b562:	e7d5      	b.n	800b510 <_free_r+0x24>
 800b564:	6821      	ldr	r1, [r4, #0]
 800b566:	1860      	adds	r0, r4, r1
 800b568:	4283      	cmp	r3, r0
 800b56a:	d103      	bne.n	800b574 <_free_r+0x88>
 800b56c:	6818      	ldr	r0, [r3, #0]
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	1841      	adds	r1, r0, r1
 800b572:	6021      	str	r1, [r4, #0]
 800b574:	6063      	str	r3, [r4, #4]
 800b576:	6054      	str	r4, [r2, #4]
 800b578:	e7ca      	b.n	800b510 <_free_r+0x24>
 800b57a:	46c0      	nop			; (mov r8, r8)
 800b57c:	20000674 	.word	0x20000674

0800b580 <_malloc_r>:
 800b580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b582:	2303      	movs	r3, #3
 800b584:	1ccd      	adds	r5, r1, #3
 800b586:	439d      	bics	r5, r3
 800b588:	3508      	adds	r5, #8
 800b58a:	0006      	movs	r6, r0
 800b58c:	2d0c      	cmp	r5, #12
 800b58e:	d21f      	bcs.n	800b5d0 <_malloc_r+0x50>
 800b590:	250c      	movs	r5, #12
 800b592:	42a9      	cmp	r1, r5
 800b594:	d81e      	bhi.n	800b5d4 <_malloc_r+0x54>
 800b596:	0030      	movs	r0, r6
 800b598:	f000 f888 	bl	800b6ac <__malloc_lock>
 800b59c:	4925      	ldr	r1, [pc, #148]	; (800b634 <_malloc_r+0xb4>)
 800b59e:	680a      	ldr	r2, [r1, #0]
 800b5a0:	0014      	movs	r4, r2
 800b5a2:	2c00      	cmp	r4, #0
 800b5a4:	d11a      	bne.n	800b5dc <_malloc_r+0x5c>
 800b5a6:	4f24      	ldr	r7, [pc, #144]	; (800b638 <_malloc_r+0xb8>)
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d104      	bne.n	800b5b8 <_malloc_r+0x38>
 800b5ae:	0021      	movs	r1, r4
 800b5b0:	0030      	movs	r0, r6
 800b5b2:	f000 f869 	bl	800b688 <_sbrk_r>
 800b5b6:	6038      	str	r0, [r7, #0]
 800b5b8:	0029      	movs	r1, r5
 800b5ba:	0030      	movs	r0, r6
 800b5bc:	f000 f864 	bl	800b688 <_sbrk_r>
 800b5c0:	1c43      	adds	r3, r0, #1
 800b5c2:	d12b      	bne.n	800b61c <_malloc_r+0x9c>
 800b5c4:	230c      	movs	r3, #12
 800b5c6:	0030      	movs	r0, r6
 800b5c8:	6033      	str	r3, [r6, #0]
 800b5ca:	f000 f877 	bl	800b6bc <__malloc_unlock>
 800b5ce:	e003      	b.n	800b5d8 <_malloc_r+0x58>
 800b5d0:	2d00      	cmp	r5, #0
 800b5d2:	dade      	bge.n	800b592 <_malloc_r+0x12>
 800b5d4:	230c      	movs	r3, #12
 800b5d6:	6033      	str	r3, [r6, #0]
 800b5d8:	2000      	movs	r0, #0
 800b5da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5dc:	6823      	ldr	r3, [r4, #0]
 800b5de:	1b5b      	subs	r3, r3, r5
 800b5e0:	d419      	bmi.n	800b616 <_malloc_r+0x96>
 800b5e2:	2b0b      	cmp	r3, #11
 800b5e4:	d903      	bls.n	800b5ee <_malloc_r+0x6e>
 800b5e6:	6023      	str	r3, [r4, #0]
 800b5e8:	18e4      	adds	r4, r4, r3
 800b5ea:	6025      	str	r5, [r4, #0]
 800b5ec:	e003      	b.n	800b5f6 <_malloc_r+0x76>
 800b5ee:	6863      	ldr	r3, [r4, #4]
 800b5f0:	42a2      	cmp	r2, r4
 800b5f2:	d10e      	bne.n	800b612 <_malloc_r+0x92>
 800b5f4:	600b      	str	r3, [r1, #0]
 800b5f6:	0030      	movs	r0, r6
 800b5f8:	f000 f860 	bl	800b6bc <__malloc_unlock>
 800b5fc:	0020      	movs	r0, r4
 800b5fe:	2207      	movs	r2, #7
 800b600:	300b      	adds	r0, #11
 800b602:	1d23      	adds	r3, r4, #4
 800b604:	4390      	bics	r0, r2
 800b606:	1ac2      	subs	r2, r0, r3
 800b608:	4298      	cmp	r0, r3
 800b60a:	d0e6      	beq.n	800b5da <_malloc_r+0x5a>
 800b60c:	1a1b      	subs	r3, r3, r0
 800b60e:	50a3      	str	r3, [r4, r2]
 800b610:	e7e3      	b.n	800b5da <_malloc_r+0x5a>
 800b612:	6053      	str	r3, [r2, #4]
 800b614:	e7ef      	b.n	800b5f6 <_malloc_r+0x76>
 800b616:	0022      	movs	r2, r4
 800b618:	6864      	ldr	r4, [r4, #4]
 800b61a:	e7c2      	b.n	800b5a2 <_malloc_r+0x22>
 800b61c:	2303      	movs	r3, #3
 800b61e:	1cc4      	adds	r4, r0, #3
 800b620:	439c      	bics	r4, r3
 800b622:	42a0      	cmp	r0, r4
 800b624:	d0e1      	beq.n	800b5ea <_malloc_r+0x6a>
 800b626:	1a21      	subs	r1, r4, r0
 800b628:	0030      	movs	r0, r6
 800b62a:	f000 f82d 	bl	800b688 <_sbrk_r>
 800b62e:	1c43      	adds	r3, r0, #1
 800b630:	d1db      	bne.n	800b5ea <_malloc_r+0x6a>
 800b632:	e7c7      	b.n	800b5c4 <_malloc_r+0x44>
 800b634:	20000674 	.word	0x20000674
 800b638:	20000678 	.word	0x20000678

0800b63c <_realloc_r>:
 800b63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b63e:	0007      	movs	r7, r0
 800b640:	000d      	movs	r5, r1
 800b642:	0016      	movs	r6, r2
 800b644:	2900      	cmp	r1, #0
 800b646:	d105      	bne.n	800b654 <_realloc_r+0x18>
 800b648:	0011      	movs	r1, r2
 800b64a:	f7ff ff99 	bl	800b580 <_malloc_r>
 800b64e:	0004      	movs	r4, r0
 800b650:	0020      	movs	r0, r4
 800b652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b654:	2a00      	cmp	r2, #0
 800b656:	d103      	bne.n	800b660 <_realloc_r+0x24>
 800b658:	f7ff ff48 	bl	800b4ec <_free_r>
 800b65c:	0034      	movs	r4, r6
 800b65e:	e7f7      	b.n	800b650 <_realloc_r+0x14>
 800b660:	f000 f834 	bl	800b6cc <_malloc_usable_size_r>
 800b664:	002c      	movs	r4, r5
 800b666:	42b0      	cmp	r0, r6
 800b668:	d2f2      	bcs.n	800b650 <_realloc_r+0x14>
 800b66a:	0031      	movs	r1, r6
 800b66c:	0038      	movs	r0, r7
 800b66e:	f7ff ff87 	bl	800b580 <_malloc_r>
 800b672:	1e04      	subs	r4, r0, #0
 800b674:	d0ec      	beq.n	800b650 <_realloc_r+0x14>
 800b676:	0029      	movs	r1, r5
 800b678:	0032      	movs	r2, r6
 800b67a:	f7ff fb4d 	bl	800ad18 <memcpy>
 800b67e:	0029      	movs	r1, r5
 800b680:	0038      	movs	r0, r7
 800b682:	f7ff ff33 	bl	800b4ec <_free_r>
 800b686:	e7e3      	b.n	800b650 <_realloc_r+0x14>

0800b688 <_sbrk_r>:
 800b688:	2300      	movs	r3, #0
 800b68a:	b570      	push	{r4, r5, r6, lr}
 800b68c:	4d06      	ldr	r5, [pc, #24]	; (800b6a8 <_sbrk_r+0x20>)
 800b68e:	0004      	movs	r4, r0
 800b690:	0008      	movs	r0, r1
 800b692:	602b      	str	r3, [r5, #0]
 800b694:	f7f9 ff4c 	bl	8005530 <_sbrk>
 800b698:	1c43      	adds	r3, r0, #1
 800b69a:	d103      	bne.n	800b6a4 <_sbrk_r+0x1c>
 800b69c:	682b      	ldr	r3, [r5, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d000      	beq.n	800b6a4 <_sbrk_r+0x1c>
 800b6a2:	6023      	str	r3, [r4, #0]
 800b6a4:	bd70      	pop	{r4, r5, r6, pc}
 800b6a6:	46c0      	nop			; (mov r8, r8)
 800b6a8:	20000680 	.word	0x20000680

0800b6ac <__malloc_lock>:
 800b6ac:	b510      	push	{r4, lr}
 800b6ae:	4802      	ldr	r0, [pc, #8]	; (800b6b8 <__malloc_lock+0xc>)
 800b6b0:	f000 f814 	bl	800b6dc <__retarget_lock_acquire_recursive>
 800b6b4:	bd10      	pop	{r4, pc}
 800b6b6:	46c0      	nop			; (mov r8, r8)
 800b6b8:	20000688 	.word	0x20000688

0800b6bc <__malloc_unlock>:
 800b6bc:	b510      	push	{r4, lr}
 800b6be:	4802      	ldr	r0, [pc, #8]	; (800b6c8 <__malloc_unlock+0xc>)
 800b6c0:	f000 f80d 	bl	800b6de <__retarget_lock_release_recursive>
 800b6c4:	bd10      	pop	{r4, pc}
 800b6c6:	46c0      	nop			; (mov r8, r8)
 800b6c8:	20000688 	.word	0x20000688

0800b6cc <_malloc_usable_size_r>:
 800b6cc:	1f0b      	subs	r3, r1, #4
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	1f18      	subs	r0, r3, #4
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	da01      	bge.n	800b6da <_malloc_usable_size_r+0xe>
 800b6d6:	580b      	ldr	r3, [r1, r0]
 800b6d8:	18c0      	adds	r0, r0, r3
 800b6da:	4770      	bx	lr

0800b6dc <__retarget_lock_acquire_recursive>:
 800b6dc:	4770      	bx	lr

0800b6de <__retarget_lock_release_recursive>:
 800b6de:	4770      	bx	lr

0800b6e0 <_init>:
 800b6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6e2:	46c0      	nop			; (mov r8, r8)
 800b6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6e6:	bc08      	pop	{r3}
 800b6e8:	469e      	mov	lr, r3
 800b6ea:	4770      	bx	lr

0800b6ec <_fini>:
 800b6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ee:	46c0      	nop			; (mov r8, r8)
 800b6f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6f2:	bc08      	pop	{r3}
 800b6f4:	469e      	mov	lr, r3
 800b6f6:	4770      	bx	lr
