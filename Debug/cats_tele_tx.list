
cats_tele_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094e0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  0800959c  0800959c  0001959c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c7c  08009c7c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009c7c  08009c7c  00019c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c84  08009c84  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  08009c84  08009c84  00019c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c98  08009c98  00019c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009c9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000070  08009d0c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  08009d0c  0002057c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000306e9  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056e0  00000000  00000000  00050781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  00055e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001710  00000000  00000000  00057720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ed97  00000000  00000000  00058e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ea2d  00000000  00000000  00077bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b439e  00000000  00000000  000965f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014a992  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cf8  00000000  00000000  0014a9e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009584 	.word	0x08009584

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08009584 	.word	0x08009584

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	1c08      	adds	r0, r1, #0
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	; (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8d8 	bl	8000618 <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8d3 	bl	8000618 <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	469b      	mov	fp, r3
 800047a:	d433      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047c:	465a      	mov	r2, fp
 800047e:	4653      	mov	r3, sl
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83a      	bhi.n	8000506 <__udivmoddi4+0xc2>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e078      	b.n	8000588 <__udivmoddi4+0x144>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e075      	b.n	800058e <__udivmoddi4+0x14a>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e028      	b.n	800050e <__udivmoddi4+0xca>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	2320      	movs	r3, #32
 80004e8:	1a9b      	subs	r3, r3, r2
 80004ea:	4652      	mov	r2, sl
 80004ec:	40da      	lsrs	r2, r3
 80004ee:	4641      	mov	r1, r8
 80004f0:	0013      	movs	r3, r2
 80004f2:	464a      	mov	r2, r9
 80004f4:	408a      	lsls	r2, r1
 80004f6:	0017      	movs	r7, r2
 80004f8:	4642      	mov	r2, r8
 80004fa:	431f      	orrs	r7, r3
 80004fc:	4653      	mov	r3, sl
 80004fe:	4093      	lsls	r3, r2
 8000500:	001e      	movs	r6, r3
 8000502:	42af      	cmp	r7, r5
 8000504:	d9c4      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000506:	2200      	movs	r2, #0
 8000508:	2300      	movs	r3, #0
 800050a:	9200      	str	r2, [sp, #0]
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	4643      	mov	r3, r8
 8000510:	2b00      	cmp	r3, #0
 8000512:	d0d9      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000514:	07fb      	lsls	r3, r7, #31
 8000516:	0872      	lsrs	r2, r6, #1
 8000518:	431a      	orrs	r2, r3
 800051a:	4646      	mov	r6, r8
 800051c:	087b      	lsrs	r3, r7, #1
 800051e:	e00e      	b.n	800053e <__udivmoddi4+0xfa>
 8000520:	42ab      	cmp	r3, r5
 8000522:	d101      	bne.n	8000528 <__udivmoddi4+0xe4>
 8000524:	42a2      	cmp	r2, r4
 8000526:	d80c      	bhi.n	8000542 <__udivmoddi4+0xfe>
 8000528:	1aa4      	subs	r4, r4, r2
 800052a:	419d      	sbcs	r5, r3
 800052c:	2001      	movs	r0, #1
 800052e:	1924      	adds	r4, r4, r4
 8000530:	416d      	adcs	r5, r5
 8000532:	2100      	movs	r1, #0
 8000534:	3e01      	subs	r6, #1
 8000536:	1824      	adds	r4, r4, r0
 8000538:	414d      	adcs	r5, r1
 800053a:	2e00      	cmp	r6, #0
 800053c:	d006      	beq.n	800054c <__udivmoddi4+0x108>
 800053e:	42ab      	cmp	r3, r5
 8000540:	d9ee      	bls.n	8000520 <__udivmoddi4+0xdc>
 8000542:	3e01      	subs	r6, #1
 8000544:	1924      	adds	r4, r4, r4
 8000546:	416d      	adcs	r5, r5
 8000548:	2e00      	cmp	r6, #0
 800054a:	d1f8      	bne.n	800053e <__udivmoddi4+0xfa>
 800054c:	9800      	ldr	r0, [sp, #0]
 800054e:	9901      	ldr	r1, [sp, #4]
 8000550:	465b      	mov	r3, fp
 8000552:	1900      	adds	r0, r0, r4
 8000554:	4169      	adcs	r1, r5
 8000556:	2b00      	cmp	r3, #0
 8000558:	db24      	blt.n	80005a4 <__udivmoddi4+0x160>
 800055a:	002b      	movs	r3, r5
 800055c:	465a      	mov	r2, fp
 800055e:	4644      	mov	r4, r8
 8000560:	40d3      	lsrs	r3, r2
 8000562:	002a      	movs	r2, r5
 8000564:	40e2      	lsrs	r2, r4
 8000566:	001c      	movs	r4, r3
 8000568:	465b      	mov	r3, fp
 800056a:	0015      	movs	r5, r2
 800056c:	2b00      	cmp	r3, #0
 800056e:	db2a      	blt.n	80005c6 <__udivmoddi4+0x182>
 8000570:	0026      	movs	r6, r4
 8000572:	409e      	lsls	r6, r3
 8000574:	0033      	movs	r3, r6
 8000576:	0026      	movs	r6, r4
 8000578:	4647      	mov	r7, r8
 800057a:	40be      	lsls	r6, r7
 800057c:	0032      	movs	r2, r6
 800057e:	1a80      	subs	r0, r0, r2
 8000580:	4199      	sbcs	r1, r3
 8000582:	9000      	str	r0, [sp, #0]
 8000584:	9101      	str	r1, [sp, #4]
 8000586:	e79f      	b.n	80004c8 <__udivmoddi4+0x84>
 8000588:	42a3      	cmp	r3, r4
 800058a:	d8bc      	bhi.n	8000506 <__udivmoddi4+0xc2>
 800058c:	e783      	b.n	8000496 <__udivmoddi4+0x52>
 800058e:	4642      	mov	r2, r8
 8000590:	2320      	movs	r3, #32
 8000592:	2100      	movs	r1, #0
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	2200      	movs	r2, #0
 8000598:	9100      	str	r1, [sp, #0]
 800059a:	9201      	str	r2, [sp, #4]
 800059c:	2201      	movs	r2, #1
 800059e:	40da      	lsrs	r2, r3
 80005a0:	9201      	str	r2, [sp, #4]
 80005a2:	e786      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a4:	4642      	mov	r2, r8
 80005a6:	2320      	movs	r3, #32
 80005a8:	1a9b      	subs	r3, r3, r2
 80005aa:	002a      	movs	r2, r5
 80005ac:	4646      	mov	r6, r8
 80005ae:	409a      	lsls	r2, r3
 80005b0:	0023      	movs	r3, r4
 80005b2:	40f3      	lsrs	r3, r6
 80005b4:	4644      	mov	r4, r8
 80005b6:	4313      	orrs	r3, r2
 80005b8:	002a      	movs	r2, r5
 80005ba:	40e2      	lsrs	r2, r4
 80005bc:	001c      	movs	r4, r3
 80005be:	465b      	mov	r3, fp
 80005c0:	0015      	movs	r5, r2
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	dad4      	bge.n	8000570 <__udivmoddi4+0x12c>
 80005c6:	4642      	mov	r2, r8
 80005c8:	002f      	movs	r7, r5
 80005ca:	2320      	movs	r3, #32
 80005cc:	0026      	movs	r6, r4
 80005ce:	4097      	lsls	r7, r2
 80005d0:	1a9b      	subs	r3, r3, r2
 80005d2:	40de      	lsrs	r6, r3
 80005d4:	003b      	movs	r3, r7
 80005d6:	4333      	orrs	r3, r6
 80005d8:	e7cd      	b.n	8000576 <__udivmoddi4+0x132>
 80005da:	46c0      	nop			; (mov r8, r8)

080005dc <__clzsi2>:
 80005dc:	211c      	movs	r1, #28
 80005de:	2301      	movs	r3, #1
 80005e0:	041b      	lsls	r3, r3, #16
 80005e2:	4298      	cmp	r0, r3
 80005e4:	d301      	bcc.n	80005ea <__clzsi2+0xe>
 80005e6:	0c00      	lsrs	r0, r0, #16
 80005e8:	3910      	subs	r1, #16
 80005ea:	0a1b      	lsrs	r3, r3, #8
 80005ec:	4298      	cmp	r0, r3
 80005ee:	d301      	bcc.n	80005f4 <__clzsi2+0x18>
 80005f0:	0a00      	lsrs	r0, r0, #8
 80005f2:	3908      	subs	r1, #8
 80005f4:	091b      	lsrs	r3, r3, #4
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0x22>
 80005fa:	0900      	lsrs	r0, r0, #4
 80005fc:	3904      	subs	r1, #4
 80005fe:	a202      	add	r2, pc, #8	; (adr r2, 8000608 <__clzsi2+0x2c>)
 8000600:	5c10      	ldrb	r0, [r2, r0]
 8000602:	1840      	adds	r0, r0, r1
 8000604:	4770      	bx	lr
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	02020304 	.word	0x02020304
 800060c:	01010101 	.word	0x01010101
	...

08000618 <__clzdi2>:
 8000618:	b510      	push	{r4, lr}
 800061a:	2900      	cmp	r1, #0
 800061c:	d103      	bne.n	8000626 <__clzdi2+0xe>
 800061e:	f7ff ffdd 	bl	80005dc <__clzsi2>
 8000622:	3020      	adds	r0, #32
 8000624:	e002      	b.n	800062c <__clzdi2+0x14>
 8000626:	1c08      	adds	r0, r1, #0
 8000628:	f7ff ffd8 	bl	80005dc <__clzsi2>
 800062c:	bd10      	pop	{r4, pc}
 800062e:	46c0      	nop			; (mov r8, r8)

08000630 <_Z8containsih>:

*/

uint16_t crc16(uint8_t const *data, int32_t size);

uint8_t contains(int current_pos, uint8_t value){
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	000a      	movs	r2, r1
 800063a:	1cfb      	adds	r3, r7, #3
 800063c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < current_pos; i++){
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	68fa      	ldr	r2, [r7, #12]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	429a      	cmp	r2, r3
 8000648:	da0d      	bge.n	8000666 <_Z8containsih+0x36>
		if(FHSSsequence[i] == value) return 1;
 800064a:	4a09      	ldr	r2, [pc, #36]	; (8000670 <_Z8containsih+0x40>)
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	18d3      	adds	r3, r2, r3
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	1cfa      	adds	r2, r7, #3
 8000654:	7812      	ldrb	r2, [r2, #0]
 8000656:	429a      	cmp	r2, r3
 8000658:	d101      	bne.n	800065e <_Z8containsih+0x2e>
 800065a:	2301      	movs	r3, #1
 800065c:	e004      	b.n	8000668 <_Z8containsih+0x38>
	for(int i = 0; i < current_pos; i++){
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	3301      	adds	r3, #1
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	e7ed      	b.n	8000642 <_Z8containsih+0x12>
	}
	return 0;
 8000666:	2300      	movs	r3, #0
}
 8000668:	0018      	movs	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	b004      	add	sp, #16
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000008c 	.word	0x2000008c

08000674 <_Z25FHSSrandomiseFHSSsequencem>:

void FHSSrandomiseFHSSsequence(uint32_t crc)
{
 8000674:	b5b0      	push	{r4, r5, r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	rngSeed(crc);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	0018      	movs	r0, r3
 8000680:	f000 f882 	bl	8000788 <_Z7rngSeedm>
	int i = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
	while(i < FHSS_SEQUENCE_CNT){
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	2b13      	cmp	r3, #19
 800068c:	dc1e      	bgt.n	80006cc <_Z25FHSSrandomiseFHSSsequencem+0x58>
		uint8_t next_freq = (uint8_t)rngN(FHSS_FREQ_CNT);
 800068e:	250b      	movs	r5, #11
 8000690:	197c      	adds	r4, r7, r5
 8000692:	2050      	movs	r0, #80	; 0x50
 8000694:	f000 f886 	bl	80007a4 <_Z4rngNh>
 8000698:	0003      	movs	r3, r0
 800069a:	7023      	strb	r3, [r4, #0]
		if(contains(i, next_freq) == 0) {
 800069c:	002c      	movs	r4, r5
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	781a      	ldrb	r2, [r3, #0]
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	0011      	movs	r1, r2
 80006a6:	0018      	movs	r0, r3
 80006a8:	f7ff ffc2 	bl	8000630 <_Z8containsih>
 80006ac:	0003      	movs	r3, r0
 80006ae:	425a      	negs	r2, r3
 80006b0:	4153      	adcs	r3, r2
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d0e7      	beq.n	8000688 <_Z25FHSSrandomiseFHSSsequencem+0x14>
			FHSSsequence[i] = next_freq;
 80006b8:	4a09      	ldr	r2, [pc, #36]	; (80006e0 <_Z25FHSSrandomiseFHSSsequencem+0x6c>)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	18d3      	adds	r3, r2, r3
 80006be:	193a      	adds	r2, r7, r4
 80006c0:	7812      	ldrb	r2, [r2, #0]
 80006c2:	701a      	strb	r2, [r3, #0]
			i++;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	3301      	adds	r3, #1
 80006c8:	60fb      	str	r3, [r7, #12]
	while(i < FHSS_SEQUENCE_CNT){
 80006ca:	e7dd      	b.n	8000688 <_Z25FHSSrandomiseFHSSsequencem+0x14>
		}
	}
	sync_channel = FHSSsequence[0];
 80006cc:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <_Z25FHSSrandomiseFHSSsequencem+0x6c>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	001a      	movs	r2, r3
 80006d2:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <_Z25FHSSrandomiseFHSSsequencem+0x70>)
 80006d4:	601a      	str	r2, [r3, #0]
}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b004      	add	sp, #16
 80006dc:	bdb0      	pop	{r4, r5, r7, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	2000008c 	.word	0x2000008c
 80006e4:	200000a4 	.word	0x200000a4

080006e8 <_Z5crc32PKhj>:
	0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693,
	0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,
	0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d
};

 uint32_t crc32(const uint8_t *buf, size_t size) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
	const uint8_t *p = buf;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	60fb      	str	r3, [r7, #12]
	uint32_t crc;

	crc = ~0U;
 80006f6:	2301      	movs	r3, #1
 80006f8:	425b      	negs	r3, r3
 80006fa:	60bb      	str	r3, [r7, #8]
	while (size--)
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	1e5a      	subs	r2, r3, #1
 8000700:	603a      	str	r2, [r7, #0]
 8000702:	1e5a      	subs	r2, r3, #1
 8000704:	4193      	sbcs	r3, r2
 8000706:	b2db      	uxtb	r3, r3
 8000708:	2b00      	cmp	r3, #0
 800070a:	d010      	beq.n	800072e <_Z5crc32PKhj+0x46>
		crc = crc32_tab[(crc ^ *p++) & 0xFF] ^ (crc >> 8);
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	1c5a      	adds	r2, r3, #1
 8000710:	60fa      	str	r2, [r7, #12]
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	001a      	movs	r2, r3
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	4053      	eors	r3, r2
 800071a:	22ff      	movs	r2, #255	; 0xff
 800071c:	401a      	ands	r2, r3
 800071e:	4b07      	ldr	r3, [pc, #28]	; (800073c <_Z5crc32PKhj+0x54>)
 8000720:	0092      	lsls	r2, r2, #2
 8000722:	58d2      	ldr	r2, [r2, r3]
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	0a1b      	lsrs	r3, r3, #8
 8000728:	4053      	eors	r3, r2
 800072a:	60bb      	str	r3, [r7, #8]
	while (size--)
 800072c:	e7e6      	b.n	80006fc <_Z5crc32PKhj+0x14>
	return crc ^ ~0U;
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	43db      	mvns	r3, r3
}
 8000732:	0018      	movs	r0, r3
 8000734:	46bd      	mov	sp, r7
 8000736:	b004      	add	sp, #16
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	080097a0 	.word	0x080097a0

08000740 <_Z3rngv>:

// returns values between 0 and 0x7FFF
// NB rngN depends on this output range, so if we change the
// behaviour rngN will need updating
uint16_t rng(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
    const uint32_t m = 2147483648;
 8000746:	2380      	movs	r3, #128	; 0x80
 8000748:	061b      	lsls	r3, r3, #24
 800074a:	60fb      	str	r3, [r7, #12]
    const uint32_t a = 214013;
 800074c:	4b0b      	ldr	r3, [pc, #44]	; (800077c <_Z3rngv+0x3c>)
 800074e:	60bb      	str	r3, [r7, #8]
    const uint32_t c = 2531011;
 8000750:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <_Z3rngv+0x40>)
 8000752:	607b      	str	r3, [r7, #4]
    seed = (a * seed + c) % m;
 8000754:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <_Z3rngv+0x44>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a08      	ldr	r2, [pc, #32]	; (800077c <_Z3rngv+0x3c>)
 800075a:	4353      	muls	r3, r2
 800075c:	4a08      	ldr	r2, [pc, #32]	; (8000780 <_Z3rngv+0x40>)
 800075e:	4694      	mov	ip, r2
 8000760:	4463      	add	r3, ip
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	085a      	lsrs	r2, r3, #1
 8000766:	4b07      	ldr	r3, [pc, #28]	; (8000784 <_Z3rngv+0x44>)
 8000768:	601a      	str	r2, [r3, #0]
    return seed >> 16;
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <_Z3rngv+0x44>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	0c1b      	lsrs	r3, r3, #16
 8000770:	b29b      	uxth	r3, r3
}
 8000772:	0018      	movs	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	b004      	add	sp, #16
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	000343fd 	.word	0x000343fd
 8000780:	00269ec3 	.word	0x00269ec3
 8000784:	200000a8 	.word	0x200000a8

08000788 <_Z7rngSeedm>:

void rngSeed(const uint32_t newSeed)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
    seed = newSeed;
 8000790:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <_Z7rngSeedm+0x18>)
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	601a      	str	r2, [r3, #0]
}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	b002      	add	sp, #8
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	200000a8 	.word	0x200000a8

080007a4 <_Z4rngNh>:

// returns 0 <= x < max where max < 256
uint8_t rngN(const uint8_t max)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	0002      	movs	r2, r0
 80007ac:	1dfb      	adds	r3, r7, #7
 80007ae:	701a      	strb	r2, [r3, #0]
    return rng() % max;
 80007b0:	f7ff ffc6 	bl	8000740 <_Z3rngv>
 80007b4:	0003      	movs	r3, r0
 80007b6:	001a      	movs	r2, r3
 80007b8:	1dfb      	adds	r3, r7, #7
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	0019      	movs	r1, r3
 80007be:	0010      	movs	r0, r2
 80007c0:	f7ff fe1a 	bl	80003f8 <__aeabi_idivmod>
 80007c4:	000b      	movs	r3, r1
 80007c6:	b2db      	uxtb	r3, r3
}
 80007c8:	0018      	movs	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b002      	add	sp, #8
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <_ZNK9SX1280Hal9BusyDelayEm>:
    void RXenable();
    void TXRXdisable();

    static void (*RadioIsrCallback)(); //function pointer for callback

    void BusyDelay(uint32_t duration) const { (void)duration; };
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	b002      	add	sp, #8
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <_ZN12SX1280DriverC1Ev>:
#define RX_TIMEOUT_PERIOD_BASE SX1280_RADIO_TICK_SIZE_0015_US
#define RX_TIMEOUT_PERIOD_BASE_NANOS 15625

void nullCallback(void) {}

SX1280Driver::SX1280Driver()
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2201      	movs	r2, #1
 80007f0:	4252      	negs	r2, r2
 80007f2:	861a      	strh	r2, [r3, #48]	; 0x30
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	223c      	movs	r2, #60	; 0x3c
 80007f8:	2100      	movs	r1, #0
 80007fa:	5499      	strb	r1, [r3, r2]
{
    instance = this;
 80007fc:	4b03      	ldr	r3, [pc, #12]	; (800080c <_ZN12SX1280DriverC1Ev+0x28>)
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	601a      	str	r2, [r3, #0]
}
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	0018      	movs	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	b002      	add	sp, #8
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000b0 	.word	0x200000b0

08000810 <_ZN12SX1280Driver5BeginEv>:
    currFreq = 2400000000;
    PayloadLength = 8; // Dummy default value which is overwritten during setup.
}

bool SX1280Driver::Begin()
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b087      	sub	sp, #28
 8000814:	af02      	add	r7, sp, #8
 8000816:	6078      	str	r0, [r7, #4]
    hal.init();
 8000818:	4b41      	ldr	r3, [pc, #260]	; (8000920 <_ZN12SX1280Driver5BeginEv+0x110>)
 800081a:	0018      	movs	r0, r3
 800081c:	f000 fd7e 	bl	800131c <_ZN9SX1280Hal4initEv>
    //hal.RadioIsrCallback = &SX1280Driver::IsrCallback;

    hal.reset();
 8000820:	4b3f      	ldr	r3, [pc, #252]	; (8000920 <_ZN12SX1280Driver5BeginEv+0x110>)
 8000822:	0018      	movs	r0, r3
 8000824:	f000 fd82 	bl	800132c <_ZN9SX1280Hal5resetEv>
    //DBGLN("SX1280 Begin");
    HAL_Delay(100);
 8000828:	2064      	movs	r0, #100	; 0x64
 800082a:	f002 ff81 	bl	8003730 <HAL_Delay>
    uint16_t firmwareRev = (((hal.ReadRegister(REG_LR_FIRMWARE_VERSION_MSB)) << 8) | (hal.ReadRegister(REG_LR_FIRMWARE_VERSION_MSB + 1)));
 800082e:	2354      	movs	r3, #84	; 0x54
 8000830:	33ff      	adds	r3, #255	; 0xff
 8000832:	001a      	movs	r2, r3
 8000834:	4b3a      	ldr	r3, [pc, #232]	; (8000920 <_ZN12SX1280Driver5BeginEv+0x110>)
 8000836:	0011      	movs	r1, r2
 8000838:	0018      	movs	r0, r3
 800083a:	f000 ff23 	bl	8001684 <_ZN9SX1280Hal12ReadRegisterEt>
 800083e:	0003      	movs	r3, r0
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	b21c      	sxth	r4, r3
 8000844:	23aa      	movs	r3, #170	; 0xaa
 8000846:	005a      	lsls	r2, r3, #1
 8000848:	4b35      	ldr	r3, [pc, #212]	; (8000920 <_ZN12SX1280Driver5BeginEv+0x110>)
 800084a:	0011      	movs	r1, r2
 800084c:	0018      	movs	r0, r3
 800084e:	f000 ff19 	bl	8001684 <_ZN9SX1280Hal12ReadRegisterEt>
 8000852:	0003      	movs	r3, r0
 8000854:	b21b      	sxth	r3, r3
 8000856:	4323      	orrs	r3, r4
 8000858:	b21a      	sxth	r2, r3
 800085a:	210e      	movs	r1, #14
 800085c:	187b      	adds	r3, r7, r1
 800085e:	801a      	strh	r2, [r3, #0]
    //DBGLN("Read Vers: %d", firmwareRev);
    if ((firmwareRev == 0) || (firmwareRev == 65535))
 8000860:	000a      	movs	r2, r1
 8000862:	18bb      	adds	r3, r7, r2
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d004      	beq.n	8000874 <_ZN12SX1280Driver5BeginEv+0x64>
 800086a:	18bb      	adds	r3, r7, r2
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	4a2d      	ldr	r2, [pc, #180]	; (8000924 <_ZN12SX1280Driver5BeginEv+0x114>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d101      	bne.n	8000878 <_ZN12SX1280Driver5BeginEv+0x68>
    {
        // SPI communication failed, just return without configuration
        return false;
 8000874:	2300      	movs	r3, #0
 8000876:	e04e      	b.n	8000916 <_ZN12SX1280Driver5BeginEv+0x106>
    }

    SetMode(SX1280_MODE_STDBY_RC);                                                                                                //Put in STDBY_RC mode
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2102      	movs	r1, #2
 800087c:	0018      	movs	r0, r3
 800087e:	f000 f945 	bl	8000b0c <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>
    hal.WriteCommand(SX1280_RADIO_SET_PACKETTYPE, SX1280_PACKET_TYPE_LORA);                                                       //Set packet type to LoRa
 8000882:	4b27      	ldr	r3, [pc, #156]	; (8000920 <_ZN12SX1280Driver5BeginEv+0x110>)
 8000884:	2201      	movs	r2, #1
 8000886:	218a      	movs	r1, #138	; 0x8a
 8000888:	0018      	movs	r0, r3
 800088a:	f000 fd57 	bl	800133c <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
    ConfigModParamsLoRa(SX1280_LORA_BW_0800, SX1280_LORA_SF6, SX1280_LORA_CR_4_7);                                                //Configure Modulation Params
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	2303      	movs	r3, #3
 8000892:	2260      	movs	r2, #96	; 0x60
 8000894:	2118      	movs	r1, #24
 8000896:	f000 f9b9 	bl	8000c0c <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh>
    hal.WriteCommand(SX1280_RADIO_SET_AUTOFS, 0x01);                                                                              //Enable auto FS
 800089a:	4b21      	ldr	r3, [pc, #132]	; (8000920 <_ZN12SX1280Driver5BeginEv+0x110>)
 800089c:	2201      	movs	r2, #1
 800089e:	219e      	movs	r1, #158	; 0x9e
 80008a0:	0018      	movs	r0, r3
 80008a2:	f000 fd4b 	bl	800133c <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
    hal.WriteRegister(0x0891, (hal.ReadRegister(0x0891) | 0xC0));                                                                 //default is low power mode, switch to high sensitivity instead
 80008a6:	4a20      	ldr	r2, [pc, #128]	; (8000928 <_ZN12SX1280Driver5BeginEv+0x118>)
 80008a8:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <_ZN12SX1280Driver5BeginEv+0x110>)
 80008aa:	0011      	movs	r1, r2
 80008ac:	0018      	movs	r0, r3
 80008ae:	f000 fee9 	bl	8001684 <_ZN9SX1280Hal12ReadRegisterEt>
 80008b2:	0003      	movs	r3, r0
 80008b4:	001a      	movs	r2, r3
 80008b6:	2340      	movs	r3, #64	; 0x40
 80008b8:	425b      	negs	r3, r3
 80008ba:	4313      	orrs	r3, r2
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	491a      	ldr	r1, [pc, #104]	; (8000928 <_ZN12SX1280Driver5BeginEv+0x118>)
 80008c0:	4b17      	ldr	r3, [pc, #92]	; (8000920 <_ZN12SX1280Driver5BeginEv+0x110>)
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 fe76 	bl	80015b4 <_ZN9SX1280Hal13WriteRegisterEth>
    SetPacketParamsLoRa(12, SX1280_LORA_PACKET_IMPLICIT, 8, SX1280_LORA_CRC_OFF, SX1280_LORA_IQ_NORMAL);                          //default params
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	2340      	movs	r3, #64	; 0x40
 80008cc:	9301      	str	r3, [sp, #4]
 80008ce:	2300      	movs	r3, #0
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	2308      	movs	r3, #8
 80008d4:	2280      	movs	r2, #128	; 0x80
 80008d6:	210c      	movs	r1, #12
 80008d8:	f000 f9e4 	bl	8000ca4 <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th>
    SetFrequencyReg(currFreq);                                                                                                    //Set Freq
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	0011      	movs	r1, r2
 80008e4:	0018      	movs	r0, r3
 80008e6:	f000 fadb 	bl	8000ea0 <_ZN12SX1280Driver15SetFrequencyRegEm>
    SetFIFOaddr(0x00, 0x00);                                                                                                      //Config FIFO addr
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2200      	movs	r2, #0
 80008ee:	2100      	movs	r1, #0
 80008f0:	0018      	movs	r0, r3
 80008f2:	f000 fb05 	bl	8000f00 <_ZN12SX1280Driver11SetFIFOaddrEhh>
    SetDioIrqParams(SX1280_IRQ_RADIO_ALL, SX1280_IRQ_TX_DONE | SX1280_IRQ_RX_DONE);                                               //set IRQ to both RXdone/TXdone on DIO1
 80008f6:	490b      	ldr	r1, [pc, #44]	; (8000924 <_ZN12SX1280Driver5BeginEv+0x114>)
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	2300      	movs	r3, #0
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2300      	movs	r3, #0
 8000900:	2203      	movs	r2, #3
 8000902:	f000 fb1f 	bl	8000f44 <_ZN12SX1280Driver15SetDioIrqParamsEtttt>
    instance->ClearIrqStatus(SX1280_IRQ_RADIO_ALL);
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <_ZN12SX1280Driver5BeginEv+0x11c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a06      	ldr	r2, [pc, #24]	; (8000924 <_ZN12SX1280Driver5BeginEv+0x114>)
 800090c:	0011      	movs	r1, r2
 800090e:	0018      	movs	r0, r3
 8000910:	f000 fb86 	bl	8001020 <_ZN12SX1280Driver14ClearIrqStatusEt>
    return true;
 8000914:	2301      	movs	r3, #1
}
 8000916:	0018      	movs	r0, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	b005      	add	sp, #20
 800091c:	bd90      	pop	{r4, r7, pc}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	200000ac 	.word	0x200000ac
 8000924:	0000ffff 	.word	0x0000ffff
 8000928:	00000891 	.word	0x00000891
 800092c:	200000b0 	.word	0x200000b0

08000930 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth>:

void SX1280Driver::Config(uint8_t bw, uint8_t sf, uint8_t cr, uint32_t freq,
                          uint8_t PreambleLength, bool InvertIQ, uint8_t _PayloadLength, uint32_t interval,
                          uint32_t flrcSyncWord, uint16_t flrcCrcSeed, uint8_t flrc)
{
 8000930:	b5b0      	push	{r4, r5, r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af04      	add	r7, sp, #16
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	000c      	movs	r4, r1
 800093a:	0010      	movs	r0, r2
 800093c:	0019      	movs	r1, r3
 800093e:	1cfb      	adds	r3, r7, #3
 8000940:	1c22      	adds	r2, r4, #0
 8000942:	701a      	strb	r2, [r3, #0]
 8000944:	1cbb      	adds	r3, r7, #2
 8000946:	1c02      	adds	r2, r0, #0
 8000948:	701a      	strb	r2, [r3, #0]
 800094a:	1c7b      	adds	r3, r7, #1
 800094c:	1c0a      	adds	r2, r1, #0
 800094e:	701a      	strb	r2, [r3, #0]
    uint8_t irqs = SX1280_IRQ_TX_DONE | SX1280_IRQ_RX_DONE;
 8000950:	230f      	movs	r3, #15
 8000952:	18fb      	adds	r3, r7, r3
 8000954:	2203      	movs	r2, #3
 8000956:	701a      	strb	r2, [r3, #0]
    uint8_t const mode = (flrc) ? SX1280_PACKET_TYPE_FLRC : SX1280_PACKET_TYPE_LORA;
 8000958:	233c      	movs	r3, #60	; 0x3c
 800095a:	18fb      	adds	r3, r7, r3
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0x36>
 8000962:	2203      	movs	r2, #3
 8000964:	e000      	b.n	8000968 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0x38>
 8000966:	2201      	movs	r2, #1
 8000968:	240e      	movs	r4, #14
 800096a:	193b      	adds	r3, r7, r4
 800096c:	701a      	strb	r2, [r3, #0]

    PayloadLength = _PayloadLength;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	252c      	movs	r5, #44	; 0x2c
 8000972:	197a      	adds	r2, r7, r5
 8000974:	2138      	movs	r1, #56	; 0x38
 8000976:	7812      	ldrb	r2, [r2, #0]
 8000978:	545a      	strb	r2, [r3, r1]
    IQinverted = InvertIQ;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2228      	movs	r2, #40	; 0x28
 800097e:	18ba      	adds	r2, r7, r2
 8000980:	2139      	movs	r1, #57	; 0x39
 8000982:	7812      	ldrb	r2, [r2, #0]
 8000984:	545a      	strb	r2, [r3, r1]
    SetMode(SX1280_MODE_STDBY_XOSC);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2103      	movs	r1, #3
 800098a:	0018      	movs	r0, r3
 800098c:	f000 f8be 	bl	8000b0c <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>

    hal.WriteCommand(SX1280_RADIO_SET_PACKETTYPE, mode);
 8000990:	193b      	adds	r3, r7, r4
 8000992:	781a      	ldrb	r2, [r3, #0]
 8000994:	4b31      	ldr	r3, [pc, #196]	; (8000a5c <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0x12c>)
 8000996:	218a      	movs	r1, #138	; 0x8a
 8000998:	0018      	movs	r0, r3
 800099a:	f000 fccf 	bl	800133c <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
    if (mode == SX1280_PACKET_TYPE_FLRC)
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b03      	cmp	r3, #3
 80009a4:	d123      	bne.n	80009ee <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0xbe>
    {
        //DBGLN("Config FLRC");
        ConfigModParamsFLRC(bw, cr, sf);
 80009a6:	1cbb      	adds	r3, r7, #2
 80009a8:	781c      	ldrb	r4, [r3, #0]
 80009aa:	1c7b      	adds	r3, r7, #1
 80009ac:	781a      	ldrb	r2, [r3, #0]
 80009ae:	1cfb      	adds	r3, r7, #3
 80009b0:	7819      	ldrb	r1, [r3, #0]
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	0023      	movs	r3, r4
 80009b6:	f000 f9b5 	bl	8000d24 <_ZN12SX1280Driver19ConfigModParamsFLRCEhhh>
        SetPacketParamsFLRC(SX1280_FLRC_PACKET_FIXED_LENGTH, /*crc=*/1,
 80009ba:	2324      	movs	r3, #36	; 0x24
 80009bc:	18fb      	adds	r3, r7, r3
 80009be:	781a      	ldrb	r2, [r3, #0]
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	2338      	movs	r3, #56	; 0x38
 80009c4:	18fb      	adds	r3, r7, r3
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	9302      	str	r3, [sp, #8]
 80009ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009cc:	9301      	str	r3, [sp, #4]
 80009ce:	197b      	adds	r3, r7, r5
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	0013      	movs	r3, r2
 80009d6:	2201      	movs	r2, #1
 80009d8:	2100      	movs	r1, #0
 80009da:	f000 f9cd 	bl	8000d78 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt>
                            PreambleLength, _PayloadLength, flrcSyncWord, flrcCrcSeed);
        irqs |= SX1280_IRQ_CRC_ERROR;
 80009de:	220f      	movs	r2, #15
 80009e0:	18bb      	adds	r3, r7, r2
 80009e2:	18ba      	adds	r2, r7, r2
 80009e4:	7812      	ldrb	r2, [r2, #0]
 80009e6:	2140      	movs	r1, #64	; 0x40
 80009e8:	430a      	orrs	r2, r1
 80009ea:	701a      	strb	r2, [r3, #0]
 80009ec:	e01a      	b.n	8000a24 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0xf4>
    }
    else
    {
        //DBGLN("Config LoRa");
        ConfigModParamsLoRa(bw, sf, cr);
 80009ee:	1c7b      	adds	r3, r7, #1
 80009f0:	781c      	ldrb	r4, [r3, #0]
 80009f2:	1cbb      	adds	r3, r7, #2
 80009f4:	781a      	ldrb	r2, [r3, #0]
 80009f6:	1cfb      	adds	r3, r7, #3
 80009f8:	7819      	ldrb	r1, [r3, #0]
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	0023      	movs	r3, r4
 80009fe:	f000 f905 	bl	8000c0c <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh>
        SetPacketParamsLoRa(PreambleLength, SX1280_LORA_PACKET_IMPLICIT,
 8000a02:	2328      	movs	r3, #40	; 0x28
 8000a04:	18fb      	adds	r3, r7, r3
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	222c      	movs	r2, #44	; 0x2c
 8000a0a:	18ba      	adds	r2, r7, r2
 8000a0c:	7814      	ldrb	r4, [r2, #0]
 8000a0e:	2224      	movs	r2, #36	; 0x24
 8000a10:	18ba      	adds	r2, r7, r2
 8000a12:	7811      	ldrb	r1, [r2, #0]
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	9301      	str	r3, [sp, #4]
 8000a18:	2300      	movs	r3, #0
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	0023      	movs	r3, r4
 8000a1e:	2280      	movs	r2, #128	; 0x80
 8000a20:	f000 f940 	bl	8000ca4 <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th>
                            _PayloadLength, SX1280_LORA_CRC_OFF, InvertIQ);
    }
    SetFrequencyReg(freq);
 8000a24:	6a3a      	ldr	r2, [r7, #32]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	0011      	movs	r1, r2
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f000 fa38 	bl	8000ea0 <_ZN12SX1280Driver15SetFrequencyRegEm>
    SetDioIrqParams(SX1280_IRQ_RADIO_ALL, irqs);
 8000a30:	230f      	movs	r3, #15
 8000a32:	18fb      	adds	r3, r7, r3
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	4909      	ldr	r1, [pc, #36]	; (8000a60 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth+0x130>)
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	9300      	str	r3, [sp, #0]
 8000a40:	2300      	movs	r3, #0
 8000a42:	f000 fa7f 	bl	8000f44 <_ZN12SX1280Driver15SetDioIrqParamsEtttt>
    SetRxTimeoutUs(interval);
 8000a46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	0011      	movs	r1, r2
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f000 f809 	bl	8000a64 <_ZN12SX1280Driver14SetRxTimeoutUsEm>
}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	46bd      	mov	sp, r7
 8000a56:	b004      	add	sp, #16
 8000a58:	bdb0      	pop	{r4, r5, r7, pc}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	200000ac 	.word	0x200000ac
 8000a60:	0000ffff 	.word	0x0000ffff

08000a64 <_ZN12SX1280Driver14SetRxTimeoutUsEm>:

void SX1280Driver::SetRxTimeoutUs(uint32_t interval)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
    if (interval)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d00f      	beq.n	8000a94 <_ZN12SX1280Driver14SetRxTimeoutUsEm+0x30>
    {
        timeout = interval * 1000 / RX_TIMEOUT_PERIOD_BASE_NANOS; // number of periods for the SX1280 to timeout
 8000a74:	683a      	ldr	r2, [r7, #0]
 8000a76:	0013      	movs	r3, r2
 8000a78:	015b      	lsls	r3, r3, #5
 8000a7a:	1a9b      	subs	r3, r3, r2
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	189b      	adds	r3, r3, r2
 8000a80:	00db      	lsls	r3, r3, #3
 8000a82:	4908      	ldr	r1, [pc, #32]	; (8000aa4 <_ZN12SX1280Driver14SetRxTimeoutUsEm+0x40>)
 8000a84:	0018      	movs	r0, r3
 8000a86:	f7ff fb47 	bl	8000118 <__udivsi3>
 8000a8a:	0003      	movs	r3, r0
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	861a      	strh	r2, [r3, #48]	; 0x30
    }
    else
    {
        timeout = 0xFFFF;   // no timeout, continuous mode
    }
}
 8000a92:	e003      	b.n	8000a9c <_ZN12SX1280Driver14SetRxTimeoutUsEm+0x38>
        timeout = 0xFFFF;   // no timeout, continuous mode
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2201      	movs	r2, #1
 8000a98:	4252      	negs	r2, r2
 8000a9a:	861a      	strh	r2, [r3, #48]	; 0x30
}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b002      	add	sp, #8
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	00003d09 	.word	0x00003d09

08000aa8 <_ZN12SX1280Driver14SetOutputPowerEa>:

void SX1280Driver::SetOutputPower(int8_t power)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	000a      	movs	r2, r1
 8000ab2:	1cfb      	adds	r3, r7, #3
 8000ab4:	701a      	strb	r2, [r3, #0]
    if (power < -18) power = -18;
 8000ab6:	1cfb      	adds	r3, r7, #3
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	b25b      	sxtb	r3, r3
 8000abc:	3312      	adds	r3, #18
 8000abe:	da03      	bge.n	8000ac8 <_ZN12SX1280Driver14SetOutputPowerEa+0x20>
 8000ac0:	1cfb      	adds	r3, r7, #3
 8000ac2:	22ee      	movs	r2, #238	; 0xee
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	e007      	b.n	8000ad8 <_ZN12SX1280Driver14SetOutputPowerEa+0x30>
    else if (13 < power) power = 13;
 8000ac8:	1cfb      	adds	r3, r7, #3
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b25b      	sxtb	r3, r3
 8000ace:	2b0d      	cmp	r3, #13
 8000ad0:	dd02      	ble.n	8000ad8 <_ZN12SX1280Driver14SetOutputPowerEa+0x30>
 8000ad2:	1cfb      	adds	r3, r7, #3
 8000ad4:	220d      	movs	r2, #13
 8000ad6:	701a      	strb	r2, [r3, #0]
    uint8_t buf[2] = {(uint8_t)(power + 18), (uint8_t)SX1280_RADIO_RAMP_04_US};
 8000ad8:	210c      	movs	r1, #12
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	2200      	movs	r2, #0
 8000ade:	801a      	strh	r2, [r3, #0]
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	2220      	movs	r2, #32
 8000ae4:	705a      	strb	r2, [r3, #1]
 8000ae6:	1cfb      	adds	r3, r7, #3
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	3312      	adds	r3, #18
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	701a      	strb	r2, [r3, #0]
    hal.WriteCommand(SX1280_RADIO_SET_TXPARAMS, buf, sizeof(buf));
 8000af2:	187a      	adds	r2, r7, r1
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <_ZN12SX1280Driver14SetOutputPowerEa+0x60>)
 8000af6:	2302      	movs	r3, #2
 8000af8:	218e      	movs	r1, #142	; 0x8e
 8000afa:	f000 fc59 	bl	80013b0 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
    //DBGLN("SetPower: %d", buf[0]);
    return;
 8000afe:	46c0      	nop			; (mov r8, r8)
}
 8000b00:	46bd      	mov	sp, r7
 8000b02:	b004      	add	sp, #16
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	200000ac 	.word	0x200000ac

08000b0c <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>:

void SX1280Driver::SetMode(SX1280_RadioOperatingModes_t OPmode)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	000a      	movs	r2, r1
 8000b16:	1cfb      	adds	r3, r7, #3
 8000b18:	701a      	strb	r2, [r3, #0]
    if (OPmode == currOpmode)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	223c      	movs	r2, #60	; 0x3c
 8000b1e:	5c9b      	ldrb	r3, [r3, r2]
 8000b20:	1cfa      	adds	r2, r7, #3
 8000b22:	7812      	ldrb	r2, [r2, #0]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d066      	beq.n	8000bf6 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xea>
    {
       return;
    }

    uint8_t buf[3];
    uint32_t switchDelay = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]

    switch (OPmode)
 8000b2c:	1cfb      	adds	r3, r7, #3
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b07      	cmp	r3, #7
 8000b32:	d851      	bhi.n	8000bd8 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xcc>
 8000b34:	009a      	lsls	r2, r3, #2
 8000b36:	4b32      	ldr	r3, [pc, #200]	; (8000c00 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf4>)
 8000b38:	18d3      	adds	r3, r2, r3
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	469f      	mov	pc, r3
    {

    case SX1280_MODE_SLEEP:
        hal.WriteCommand(SX1280_RADIO_SET_SLEEP, 0x01);
 8000b3e:	4b31      	ldr	r3, [pc, #196]	; (8000c04 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	2184      	movs	r1, #132	; 0x84
 8000b44:	0018      	movs	r0, r3
 8000b46:	f000 fbf9 	bl	800133c <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
        break;
 8000b4a:	e048      	b.n	8000bde <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd2>

    case SX1280_MODE_CALIBRATION:
        break;

    case SX1280_MODE_STDBY_RC:
        hal.WriteCommand(SX1280_RADIO_SET_STANDBY, SX1280_STDBY_RC);
 8000b4c:	4b2d      	ldr	r3, [pc, #180]	; (8000c04 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2180      	movs	r1, #128	; 0x80
 8000b52:	0018      	movs	r0, r3
 8000b54:	f000 fbf2 	bl	800133c <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
        switchDelay = 1500;
 8000b58:	4b2b      	ldr	r3, [pc, #172]	; (8000c08 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xfc>)
 8000b5a:	60fb      	str	r3, [r7, #12]
        break;
 8000b5c:	e03f      	b.n	8000bde <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd2>

    case SX1280_MODE_STDBY_XOSC:
        hal.WriteCommand(SX1280_RADIO_SET_STANDBY, SX1280_STDBY_XOSC);
 8000b5e:	4b29      	ldr	r3, [pc, #164]	; (8000c04 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	2180      	movs	r1, #128	; 0x80
 8000b64:	0018      	movs	r0, r3
 8000b66:	f000 fbe9 	bl	800133c <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
        switchDelay = 50;
 8000b6a:	2332      	movs	r3, #50	; 0x32
 8000b6c:	60fb      	str	r3, [r7, #12]
        break;
 8000b6e:	e036      	b.n	8000bde <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd2>

    case SX1280_MODE_FS:
        hal.WriteCommand(SX1280_RADIO_SET_FS, 0x00);
 8000b70:	4b24      	ldr	r3, [pc, #144]	; (8000c04 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	21c1      	movs	r1, #193	; 0xc1
 8000b76:	0018      	movs	r0, r3
 8000b78:	f000 fbe0 	bl	800133c <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>
        switchDelay = 70;
 8000b7c:	2346      	movs	r3, #70	; 0x46
 8000b7e:	60fb      	str	r3, [r7, #12]
        break;
 8000b80:	e02d      	b.n	8000bde <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd2>

    case SX1280_MODE_RX:
        buf[0] = RX_TIMEOUT_PERIOD_BASE;
 8000b82:	2108      	movs	r1, #8
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
        buf[1] = timeout >> 8;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000b8e:	121b      	asrs	r3, r3, #8
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	705a      	strb	r2, [r3, #1]
        buf[2] = timeout & 0xFF;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	709a      	strb	r2, [r3, #2]
        hal.WriteCommand(SX1280_RADIO_SET_RX, buf, sizeof(buf));
 8000ba0:	187a      	adds	r2, r7, r1
 8000ba2:	4818      	ldr	r0, [pc, #96]	; (8000c04 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	2182      	movs	r1, #130	; 0x82
 8000ba8:	f000 fc02 	bl	80013b0 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
        switchDelay = 100;
 8000bac:	2364      	movs	r3, #100	; 0x64
 8000bae:	60fb      	str	r3, [r7, #12]
        break;
 8000bb0:	e015      	b.n	8000bde <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd2>

    case SX1280_MODE_TX:
        //uses timeout Time-out duration = periodBase * periodBaseCount
        buf[0] = RX_TIMEOUT_PERIOD_BASE;
 8000bb2:	2108      	movs	r1, #8
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
        buf[1] = 0xFF; // no timeout set for now
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	22ff      	movs	r2, #255	; 0xff
 8000bbe:	705a      	strb	r2, [r3, #1]
        buf[2] = 0xFF; // TODO dynamic timeout based on expected onairtime
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	22ff      	movs	r2, #255	; 0xff
 8000bc4:	709a      	strb	r2, [r3, #2]
        hal.WriteCommand(SX1280_RADIO_SET_TX, buf, sizeof(buf));
 8000bc6:	187a      	adds	r2, r7, r1
 8000bc8:	480e      	ldr	r0, [pc, #56]	; (8000c04 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8000bca:	2303      	movs	r3, #3
 8000bcc:	2183      	movs	r1, #131	; 0x83
 8000bce:	f000 fbef 	bl	80013b0 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
        switchDelay = 100;
 8000bd2:	2364      	movs	r3, #100	; 0x64
 8000bd4:	60fb      	str	r3, [r7, #12]
        break;
 8000bd6:	e002      	b.n	8000bde <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd2>

    case SX1280_MODE_CAD:
        break;

    default:
        break;
 8000bd8:	46c0      	nop			; (mov r8, r8)
 8000bda:	e000      	b.n	8000bde <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xd2>
        break;
 8000bdc:	46c0      	nop			; (mov r8, r8)
    }
    hal.BusyDelay(switchDelay);
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xf8>)
 8000be2:	0011      	movs	r1, r2
 8000be4:	0018      	movs	r0, r3
 8000be6:	f7ff fdf3 	bl	80007d0 <_ZNK9SX1280Hal9BusyDelayEm>

    currOpmode = OPmode;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	1cfa      	adds	r2, r7, #3
 8000bee:	213c      	movs	r1, #60	; 0x3c
 8000bf0:	7812      	ldrb	r2, [r2, #0]
 8000bf2:	545a      	strb	r2, [r3, r1]
 8000bf4:	e000      	b.n	8000bf8 <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t+0xec>
       return;
 8000bf6:	46c0      	nop			; (mov r8, r8)
}
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b004      	add	sp, #16
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	08009ba0 	.word	0x08009ba0
 8000c04:	200000ac 	.word	0x200000ac
 8000c08:	000005dc 	.word	0x000005dc

08000c0c <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh>:

void SX1280Driver::ConfigModParamsLoRa(uint8_t bw, uint8_t sf, uint8_t cr)
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	000c      	movs	r4, r1
 8000c16:	0010      	movs	r0, r2
 8000c18:	0019      	movs	r1, r3
 8000c1a:	1cfb      	adds	r3, r7, #3
 8000c1c:	1c22      	adds	r2, r4, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
 8000c20:	1cbb      	adds	r3, r7, #2
 8000c22:	1c02      	adds	r2, r0, #0
 8000c24:	701a      	strb	r2, [r3, #0]
 8000c26:	1c7b      	adds	r3, r7, #1
 8000c28:	1c0a      	adds	r2, r1, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
    // Care must therefore be taken to ensure that modulation parameters are set using the command
    // SetModulationParam() only after defining the packet type SetPacketType() to be used

    uint8_t rfparams[3] = {sf, bw, cr};
 8000c2c:	210c      	movs	r1, #12
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	1cba      	adds	r2, r7, #2
 8000c32:	7812      	ldrb	r2, [r2, #0]
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	1cfa      	adds	r2, r7, #3
 8000c3a:	7812      	ldrb	r2, [r2, #0]
 8000c3c:	705a      	strb	r2, [r3, #1]
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	1c7a      	adds	r2, r7, #1
 8000c42:	7812      	ldrb	r2, [r2, #0]
 8000c44:	709a      	strb	r2, [r3, #2]

    hal.WriteCommand(SX1280_RADIO_SET_MODULATIONPARAMS, rfparams, sizeof(rfparams));
 8000c46:	187a      	adds	r2, r7, r1
 8000c48:	4814      	ldr	r0, [pc, #80]	; (8000c9c <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x90>)
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	218b      	movs	r1, #139	; 0x8b
 8000c4e:	f000 fbaf 	bl	80013b0 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>

    switch (sf)
 8000c52:	1cbb      	adds	r3, r7, #2
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b80      	cmp	r3, #128	; 0x80
 8000c58:	d00e      	beq.n	8000c78 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x6c>
 8000c5a:	dc14      	bgt.n	8000c86 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x7a>
 8000c5c:	2b70      	cmp	r3, #112	; 0x70
 8000c5e:	d00b      	beq.n	8000c78 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x6c>
 8000c60:	dc11      	bgt.n	8000c86 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x7a>
 8000c62:	2b50      	cmp	r3, #80	; 0x50
 8000c64:	d001      	beq.n	8000c6a <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x5e>
 8000c66:	2b60      	cmp	r3, #96	; 0x60
 8000c68:	d10d      	bne.n	8000c86 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x7a>
    {
    case SX1280_LORA_SF5:
    case SX1280_LORA_SF6:
        hal.WriteRegister(0x925, 0x1E); // for SF5 or SF6
 8000c6a:	490d      	ldr	r1, [pc, #52]	; (8000ca0 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x94>)
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x90>)
 8000c6e:	221e      	movs	r2, #30
 8000c70:	0018      	movs	r0, r3
 8000c72:	f000 fc9f 	bl	80015b4 <_ZN9SX1280Hal13WriteRegisterEth>
        break;
 8000c76:	e00d      	b.n	8000c94 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x88>
    case SX1280_LORA_SF7:
    case SX1280_LORA_SF8:
        hal.WriteRegister(0x925, 0x37); // for SF7 or SF8
 8000c78:	4909      	ldr	r1, [pc, #36]	; (8000ca0 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x94>)
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x90>)
 8000c7c:	2237      	movs	r2, #55	; 0x37
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 fc98 	bl	80015b4 <_ZN9SX1280Hal13WriteRegisterEth>
        break;
 8000c84:	e006      	b.n	8000c94 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x88>
    default:
        hal.WriteRegister(0x925, 0x32); // for SF9, SF10, SF11, SF12
 8000c86:	4906      	ldr	r1, [pc, #24]	; (8000ca0 <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x94>)
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <_ZN12SX1280Driver19ConfigModParamsLoRaEhhh+0x90>)
 8000c8a:	2232      	movs	r2, #50	; 0x32
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f000 fc91 	bl	80015b4 <_ZN9SX1280Hal13WriteRegisterEth>
    }
}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46c0      	nop			; (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b005      	add	sp, #20
 8000c9a:	bd90      	pop	{r4, r7, pc}
 8000c9c:	200000ac 	.word	0x200000ac
 8000ca0:	00000925 	.word	0x00000925

08000ca4 <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th>:

void SX1280Driver::SetPacketParamsLoRa(uint8_t PreambleLength, SX1280_RadioLoRaPacketLengthsModes_t HeaderType,
                                       uint8_t PayloadLength, SX1280_RadioLoRaCrcModes_t crc,
                                       uint8_t InvertIQ)
{
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	000c      	movs	r4, r1
 8000cae:	0010      	movs	r0, r2
 8000cb0:	0019      	movs	r1, r3
 8000cb2:	1cfb      	adds	r3, r7, #3
 8000cb4:	1c22      	adds	r2, r4, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
 8000cb8:	1cbb      	adds	r3, r7, #2
 8000cba:	1c02      	adds	r2, r0, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
 8000cbe:	1c7b      	adds	r3, r7, #1
 8000cc0:	1c0a      	adds	r2, r1, #0
 8000cc2:	701a      	strb	r2, [r3, #0]
    uint8_t buf[7];

    buf[0] = PreambleLength;
 8000cc4:	2108      	movs	r1, #8
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	1cfa      	adds	r2, r7, #3
 8000cca:	7812      	ldrb	r2, [r2, #0]
 8000ccc:	701a      	strb	r2, [r3, #0]
    buf[1] = HeaderType;
 8000cce:	187b      	adds	r3, r7, r1
 8000cd0:	1cba      	adds	r2, r7, #2
 8000cd2:	7812      	ldrb	r2, [r2, #0]
 8000cd4:	705a      	strb	r2, [r3, #1]
    buf[2] = PayloadLength;
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	1c7a      	adds	r2, r7, #1
 8000cda:	7812      	ldrb	r2, [r2, #0]
 8000cdc:	709a      	strb	r2, [r3, #2]
    buf[3] = crc;
 8000cde:	187a      	adds	r2, r7, r1
 8000ce0:	2320      	movs	r3, #32
 8000ce2:	18fb      	adds	r3, r7, r3
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	70d3      	strb	r3, [r2, #3]
    buf[4] = InvertIQ ? SX1280_LORA_IQ_INVERTED : SX1280_LORA_IQ_NORMAL;
 8000ce8:	2324      	movs	r3, #36	; 0x24
 8000cea:	18fb      	adds	r3, r7, r3
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th+0x52>
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	e000      	b.n	8000cf8 <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th+0x54>
 8000cf6:	2240      	movs	r2, #64	; 0x40
 8000cf8:	2108      	movs	r1, #8
 8000cfa:	187b      	adds	r3, r7, r1
 8000cfc:	711a      	strb	r2, [r3, #4]
    buf[5] = 0x00;
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2200      	movs	r2, #0
 8000d02:	715a      	strb	r2, [r3, #5]
    buf[6] = 0x00;
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2200      	movs	r2, #0
 8000d08:	719a      	strb	r2, [r3, #6]

    hal.WriteCommand(SX1280_RADIO_SET_PACKETPARAMS, buf, sizeof(buf));
 8000d0a:	187a      	adds	r2, r7, r1
 8000d0c:	4804      	ldr	r0, [pc, #16]	; (8000d20 <_ZN12SX1280Driver19SetPacketParamsLoRaEh36SX1280_RadioLoRaPacketLengthsModes_th26SX1280_RadioLoRaCrcModes_th+0x7c>)
 8000d0e:	2307      	movs	r3, #7
 8000d10:	218c      	movs	r1, #140	; 0x8c
 8000d12:	f000 fb4d 	bl	80013b0 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b005      	add	sp, #20
 8000d1c:	bd90      	pop	{r4, r7, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	200000ac 	.word	0x200000ac

08000d24 <_ZN12SX1280Driver19ConfigModParamsFLRCEhhh>:

void SX1280Driver::ConfigModParamsFLRC(uint8_t bw, uint8_t cr, uint8_t bt)
{
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	000c      	movs	r4, r1
 8000d2e:	0010      	movs	r0, r2
 8000d30:	0019      	movs	r1, r3
 8000d32:	1cfb      	adds	r3, r7, #3
 8000d34:	1c22      	adds	r2, r4, #0
 8000d36:	701a      	strb	r2, [r3, #0]
 8000d38:	1cbb      	adds	r3, r7, #2
 8000d3a:	1c02      	adds	r2, r0, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
 8000d3e:	1c7b      	adds	r3, r7, #1
 8000d40:	1c0a      	adds	r2, r1, #0
 8000d42:	701a      	strb	r2, [r3, #0]
    uint8_t rfparams[3] = {bw, cr, bt};
 8000d44:	210c      	movs	r1, #12
 8000d46:	187b      	adds	r3, r7, r1
 8000d48:	1cfa      	adds	r2, r7, #3
 8000d4a:	7812      	ldrb	r2, [r2, #0]
 8000d4c:	701a      	strb	r2, [r3, #0]
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	1cba      	adds	r2, r7, #2
 8000d52:	7812      	ldrb	r2, [r2, #0]
 8000d54:	705a      	strb	r2, [r3, #1]
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	1c7a      	adds	r2, r7, #1
 8000d5a:	7812      	ldrb	r2, [r2, #0]
 8000d5c:	709a      	strb	r2, [r3, #2]
    hal.WriteCommand(SX1280_RADIO_SET_MODULATIONPARAMS, rfparams, sizeof(rfparams));
 8000d5e:	187a      	adds	r2, r7, r1
 8000d60:	4804      	ldr	r0, [pc, #16]	; (8000d74 <_ZN12SX1280Driver19ConfigModParamsFLRCEhhh+0x50>)
 8000d62:	2303      	movs	r3, #3
 8000d64:	218b      	movs	r1, #139	; 0x8b
 8000d66:	f000 fb23 	bl	80013b0 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b005      	add	sp, #20
 8000d70:	bd90      	pop	{r4, r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	200000ac 	.word	0x200000ac

08000d78 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt>:
                                       uint8_t crc,
                                       uint8_t PreambleLength,
                                       uint8_t PayloadLength,
                                       uint32_t syncWord,
                                       uint16_t crcSeed)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	000c      	movs	r4, r1
 8000d82:	0010      	movs	r0, r2
 8000d84:	0019      	movs	r1, r3
 8000d86:	1cfb      	adds	r3, r7, #3
 8000d88:	1c22      	adds	r2, r4, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
 8000d8c:	1cbb      	adds	r3, r7, #2
 8000d8e:	1c02      	adds	r2, r0, #0
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	1c7b      	adds	r3, r7, #1
 8000d94:	1c0a      	adds	r2, r1, #0
 8000d96:	701a      	strb	r2, [r3, #0]
    if (PreambleLength < 8) PreambleLength = 8;
 8000d98:	1c7b      	adds	r3, r7, #1
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b07      	cmp	r3, #7
 8000d9e:	d802      	bhi.n	8000da6 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x2e>
 8000da0:	1c7b      	adds	r3, r7, #1
 8000da2:	2208      	movs	r2, #8
 8000da4:	701a      	strb	r2, [r3, #0]
        PreambleLength = ((PreambleLength / 4) - 1) << 4;
 8000da6:	1c7b      	adds	r3, r7, #1
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	089b      	lsrs	r3, r3, #2
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	3b01      	subs	r3, #1
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	1c7b      	adds	r3, r7, #1
 8000db4:	0112      	lsls	r2, r2, #4
 8000db6:	701a      	strb	r2, [r3, #0]
    crc = (crc) ? SX1280_FLRC_CRC_2_BYTE : SX1280_FLRC_CRC_OFF;
 8000db8:	1cbb      	adds	r3, r7, #2
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x4c>
 8000dc0:	2220      	movs	r2, #32
 8000dc2:	e000      	b.n	8000dc6 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x4e>
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	1cbb      	adds	r3, r7, #2
 8000dc8:	701a      	strb	r2, [r3, #0]

    uint8_t buf[7];
    buf[0] = PreambleLength;                    // AGCPreambleLength
 8000dca:	2108      	movs	r1, #8
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	1c7a      	adds	r2, r7, #1
 8000dd0:	7812      	ldrb	r2, [r2, #0]
 8000dd2:	701a      	strb	r2, [r3, #0]
    buf[1] = SX1280_FLRC_SYNC_WORD_LEN_P32S;    // SyncWordLength
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2204      	movs	r2, #4
 8000dd8:	705a      	strb	r2, [r3, #1]
    buf[2] = SX1280_FLRC_RX_MATCH_SYNC_WORD_1;  // SyncWordMatch
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	2210      	movs	r2, #16
 8000dde:	709a      	strb	r2, [r3, #2]
    buf[3] = HeaderType;                        // PacketType
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	1cfa      	adds	r2, r7, #3
 8000de4:	7812      	ldrb	r2, [r2, #0]
 8000de6:	70da      	strb	r2, [r3, #3]
    buf[4] = PayloadLength;                     // PayloadLength
 8000de8:	187a      	adds	r2, r7, r1
 8000dea:	2320      	movs	r3, #32
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	7113      	strb	r3, [r2, #4]
    buf[5] = (crc << 4);                        // CrcLength
 8000df2:	1cbb      	adds	r3, r7, #2
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	011b      	lsls	r3, r3, #4
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	000c      	movs	r4, r1
 8000dfc:	193b      	adds	r3, r7, r4
 8000dfe:	715a      	strb	r2, [r3, #5]
    buf[6] = 0x08;                              // Must be whitening disabled
 8000e00:	193b      	adds	r3, r7, r4
 8000e02:	2208      	movs	r2, #8
 8000e04:	719a      	strb	r2, [r3, #6]
    hal.WriteCommand(SX1280_RADIO_SET_PACKETPARAMS, buf, sizeof(buf));
 8000e06:	193a      	adds	r2, r7, r4
 8000e08:	4821      	ldr	r0, [pc, #132]	; (8000e90 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x118>)
 8000e0a:	2307      	movs	r3, #7
 8000e0c:	218c      	movs	r1, #140	; 0x8c
 8000e0e:	f000 facf 	bl	80013b0 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>

    // CRC seed (use dedicated cipher)
    buf[0] = (uint8_t)(crcSeed >> 8);
 8000e12:	2028      	movs	r0, #40	; 0x28
 8000e14:	183b      	adds	r3, r7, r0
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	121b      	asrs	r3, r3, #8
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	0021      	movs	r1, r4
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	701a      	strb	r2, [r3, #0]
    buf[1] = (uint8_t)crcSeed;
 8000e22:	183b      	adds	r3, r7, r0
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	705a      	strb	r2, [r3, #1]
    hal.WriteRegister(SX1280_REG_FLRC_CRC_SEED, buf, 2);
 8000e2c:	000c      	movs	r4, r1
 8000e2e:	193a      	adds	r2, r7, r4
 8000e30:	4918      	ldr	r1, [pc, #96]	; (8000e94 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x11c>)
 8000e32:	4817      	ldr	r0, [pc, #92]	; (8000e90 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x118>)
 8000e34:	2302      	movs	r3, #2
 8000e36:	f000 fb6b 	bl	8001510 <_ZN9SX1280Hal13WriteRegisterEtPhh>

    // CRC POLY 0x3D65
    buf[0] = 0x3D;
 8000e3a:	193b      	adds	r3, r7, r4
 8000e3c:	223d      	movs	r2, #61	; 0x3d
 8000e3e:	701a      	strb	r2, [r3, #0]
    buf[1] = 0x65;
 8000e40:	193b      	adds	r3, r7, r4
 8000e42:	2265      	movs	r2, #101	; 0x65
 8000e44:	705a      	strb	r2, [r3, #1]
    hal.WriteRegister(SX1280_REG_FLRC_CRC_POLY, buf, 2);
 8000e46:	193a      	adds	r2, r7, r4
 8000e48:	4913      	ldr	r1, [pc, #76]	; (8000e98 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x120>)
 8000e4a:	4811      	ldr	r0, [pc, #68]	; (8000e90 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x118>)
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	f000 fb5f 	bl	8001510 <_ZN9SX1280Hal13WriteRegisterEtPhh>

    // Set SyncWord1
    buf[0] = (uint8_t)(syncWord >> 24);
 8000e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e54:	0e1b      	lsrs	r3, r3, #24
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	0021      	movs	r1, r4
 8000e5a:	187b      	adds	r3, r7, r1
 8000e5c:	701a      	strb	r2, [r3, #0]
    buf[1] = (uint8_t)(syncWord >> 16);
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e60:	0c1b      	lsrs	r3, r3, #16
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	187b      	adds	r3, r7, r1
 8000e66:	705a      	strb	r2, [r3, #1]
    buf[2] = (uint8_t)(syncWord >> 8);
 8000e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6a:	0a1b      	lsrs	r3, r3, #8
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	709a      	strb	r2, [r3, #2]
    buf[3] = (uint8_t)syncWord;
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	187b      	adds	r3, r7, r1
 8000e78:	70da      	strb	r2, [r3, #3]
    hal.WriteRegister(SX1280_REG_FLRC_SYNC_WORD, buf, 4);
 8000e7a:	187a      	adds	r2, r7, r1
 8000e7c:	4907      	ldr	r1, [pc, #28]	; (8000e9c <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x124>)
 8000e7e:	4804      	ldr	r0, [pc, #16]	; (8000e90 <_ZN12SX1280Driver19SetPacketParamsFLRCEhhhhmt+0x118>)
 8000e80:	2304      	movs	r3, #4
 8000e82:	f000 fb45 	bl	8001510 <_ZN9SX1280Hal13WriteRegisterEtPhh>
}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b005      	add	sp, #20
 8000e8c:	bd90      	pop	{r4, r7, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	200000ac 	.word	0x200000ac
 8000e94:	000009c8 	.word	0x000009c8
 8000e98:	000009c6 	.word	0x000009c6
 8000e9c:	000009cf 	.word	0x000009cf

08000ea0 <_ZN12SX1280Driver15SetFrequencyRegEm>:
    hal.WriteCommand(SX1280_RADIO_SET_RFFREQUENCY, buf, sizeof(buf));
    currFreq = Reqfreq;
}

void SX1280Driver::SetFrequencyReg(uint32_t freq)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
    uint8_t buf[3] = {0};
 8000eaa:	240c      	movs	r4, #12
 8000eac:	193b      	adds	r3, r7, r4
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <_ZN12SX1280Driver15SetFrequencyRegEm+0x58>)
 8000eb0:	7812      	ldrb	r2, [r2, #0]
 8000eb2:	701a      	strb	r2, [r3, #0]
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	189b      	adds	r3, r3, r2
 8000eb8:	2202      	movs	r2, #2
 8000eba:	2100      	movs	r1, #0
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f007 ff3c 	bl	8008d3a <memset>

    buf[0] = (uint8_t)((freq >> 16) & 0xFF);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	0c1b      	lsrs	r3, r3, #16
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	193b      	adds	r3, r7, r4
 8000eca:	701a      	strb	r2, [r3, #0]
    buf[1] = (uint8_t)((freq >> 8) & 0xFF);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	0a1b      	lsrs	r3, r3, #8
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	193b      	adds	r3, r7, r4
 8000ed4:	705a      	strb	r2, [r3, #1]
    buf[2] = (uint8_t)(freq & 0xFF);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	193b      	adds	r3, r7, r4
 8000edc:	709a      	strb	r2, [r3, #2]

    hal.WriteCommand(SX1280_RADIO_SET_RFFREQUENCY, buf, sizeof(buf));
 8000ede:	193a      	adds	r2, r7, r4
 8000ee0:	4806      	ldr	r0, [pc, #24]	; (8000efc <_ZN12SX1280Driver15SetFrequencyRegEm+0x5c>)
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	2186      	movs	r1, #134	; 0x86
 8000ee6:	f000 fa63 	bl	80013b0 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
    currFreq = freq;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ef0:	46c0      	nop			; (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b005      	add	sp, #20
 8000ef6:	bd90      	pop	{r4, r7, pc}
 8000ef8:	0800959c 	.word	0x0800959c
 8000efc:	200000ac 	.word	0x200000ac

08000f00 <_ZN12SX1280Driver11SetFIFOaddrEhh>:
    efeHz = 1.55 * efe / (1600.0f / 800000.0f);
    return efeHz;
}

void SX1280Driver::SetFIFOaddr(uint8_t txBaseAddr, uint8_t rxBaseAddr)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	0008      	movs	r0, r1
 8000f0a:	0011      	movs	r1, r2
 8000f0c:	1cfb      	adds	r3, r7, #3
 8000f0e:	1c02      	adds	r2, r0, #0
 8000f10:	701a      	strb	r2, [r3, #0]
 8000f12:	1cbb      	adds	r3, r7, #2
 8000f14:	1c0a      	adds	r2, r1, #0
 8000f16:	701a      	strb	r2, [r3, #0]
    uint8_t buf[2];

    buf[0] = txBaseAddr;
 8000f18:	210c      	movs	r1, #12
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	1cfa      	adds	r2, r7, #3
 8000f1e:	7812      	ldrb	r2, [r2, #0]
 8000f20:	701a      	strb	r2, [r3, #0]
    buf[1] = rxBaseAddr;
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	1cba      	adds	r2, r7, #2
 8000f26:	7812      	ldrb	r2, [r2, #0]
 8000f28:	705a      	strb	r2, [r3, #1]
    hal.WriteCommand(SX1280_RADIO_SET_BUFFERBASEADDRESS, buf, sizeof(buf));
 8000f2a:	187a      	adds	r2, r7, r1
 8000f2c:	4804      	ldr	r0, [pc, #16]	; (8000f40 <_ZN12SX1280Driver11SetFIFOaddrEhh+0x40>)
 8000f2e:	2302      	movs	r3, #2
 8000f30:	218f      	movs	r1, #143	; 0x8f
 8000f32:	f000 fa3d 	bl	80013b0 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b004      	add	sp, #16
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	200000ac 	.word	0x200000ac

08000f44 <_ZN12SX1280Driver15SetDioIrqParamsEtttt>:

void SX1280Driver::SetDioIrqParams(uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask)
{
 8000f44:	b5b0      	push	{r4, r5, r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	000c      	movs	r4, r1
 8000f4e:	0010      	movs	r0, r2
 8000f50:	0019      	movs	r1, r3
 8000f52:	250a      	movs	r5, #10
 8000f54:	197b      	adds	r3, r7, r5
 8000f56:	1c22      	adds	r2, r4, #0
 8000f58:	801a      	strh	r2, [r3, #0]
 8000f5a:	2408      	movs	r4, #8
 8000f5c:	193b      	adds	r3, r7, r4
 8000f5e:	1c02      	adds	r2, r0, #0
 8000f60:	801a      	strh	r2, [r3, #0]
 8000f62:	1dbb      	adds	r3, r7, #6
 8000f64:	1c0a      	adds	r2, r1, #0
 8000f66:	801a      	strh	r2, [r3, #0]
    uint8_t buf[8];

    buf[0] = (uint8_t)((irqMask >> 8) & 0x00FF);
 8000f68:	0028      	movs	r0, r5
 8000f6a:	183b      	adds	r3, r7, r0
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	0a1b      	lsrs	r3, r3, #8
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	2110      	movs	r1, #16
 8000f76:	187b      	adds	r3, r7, r1
 8000f78:	701a      	strb	r2, [r3, #0]
    buf[1] = (uint8_t)(irqMask & 0x00FF);
 8000f7a:	183b      	adds	r3, r7, r0
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	705a      	strb	r2, [r3, #1]
    buf[2] = (uint8_t)((dio1Mask >> 8) & 0x00FF);
 8000f84:	193b      	adds	r3, r7, r4
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	709a      	strb	r2, [r3, #2]
    buf[3] = (uint8_t)(dio1Mask & 0x00FF);
 8000f92:	193b      	adds	r3, r7, r4
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	70da      	strb	r2, [r3, #3]
    buf[4] = (uint8_t)((dio2Mask >> 8) & 0x00FF);
 8000f9c:	1dbb      	adds	r3, r7, #6
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	711a      	strb	r2, [r3, #4]
    buf[5] = (uint8_t)(dio2Mask & 0x00FF);
 8000faa:	1dbb      	adds	r3, r7, #6
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	715a      	strb	r2, [r3, #5]
    buf[6] = (uint8_t)((dio3Mask >> 8) & 0x00FF);
 8000fb4:	2028      	movs	r0, #40	; 0x28
 8000fb6:	183b      	adds	r3, r7, r0
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	0a1b      	lsrs	r3, r3, #8
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	719a      	strb	r2, [r3, #6]
    buf[7] = (uint8_t)(dio3Mask & 0x00FF);
 8000fc4:	183b      	adds	r3, r7, r0
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	187b      	adds	r3, r7, r1
 8000fcc:	71da      	strb	r2, [r3, #7]

    hal.WriteCommand(SX1280_RADIO_SET_DIOIRQPARAMS, buf, sizeof(buf));
 8000fce:	187a      	adds	r2, r7, r1
 8000fd0:	4804      	ldr	r0, [pc, #16]	; (8000fe4 <_ZN12SX1280Driver15SetDioIrqParamsEtttt+0xa0>)
 8000fd2:	2308      	movs	r3, #8
 8000fd4:	218d      	movs	r1, #141	; 0x8d
 8000fd6:	f000 f9eb 	bl	80013b0 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b006      	add	sp, #24
 8000fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	200000ac 	.word	0x200000ac

08000fe8 <_ZN12SX1280Driver12GetIrqStatusEv>:

uint16_t SX1280Driver::GetIrqStatus()
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
    uint8_t status[2];

    hal.ReadCommand(SX1280_RADIO_GET_IRQSTATUS, status, 2);
 8000ff0:	240c      	movs	r4, #12
 8000ff2:	193a      	adds	r2, r7, r4
 8000ff4:	4809      	ldr	r0, [pc, #36]	; (800101c <_ZN12SX1280Driver12GetIrqStatusEv+0x34>)
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	2115      	movs	r1, #21
 8000ffa:	f000 fa1f 	bl	800143c <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh>
    return status[0] << 8 | status[1];
 8000ffe:	0021      	movs	r1, r4
 8001000:	187b      	adds	r3, r7, r1
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	021b      	lsls	r3, r3, #8
 8001006:	b21a      	sxth	r2, r3
 8001008:	187b      	adds	r3, r7, r1
 800100a:	785b      	ldrb	r3, [r3, #1]
 800100c:	b21b      	sxth	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	b21b      	sxth	r3, r3
 8001012:	b29b      	uxth	r3, r3
}
 8001014:	0018      	movs	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	b005      	add	sp, #20
 800101a:	bd90      	pop	{r4, r7, pc}
 800101c:	200000ac 	.word	0x200000ac

08001020 <_ZN12SX1280Driver14ClearIrqStatusEt>:

void SX1280Driver::ClearIrqStatus(uint16_t irqMask)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	000a      	movs	r2, r1
 800102a:	1cbb      	adds	r3, r7, #2
 800102c:	801a      	strh	r2, [r3, #0]
    uint8_t buf[2];

    buf[0] = (uint8_t)(((uint16_t)irqMask >> 8) & 0x00FF);
 800102e:	1cbb      	adds	r3, r7, #2
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	0a1b      	lsrs	r3, r3, #8
 8001034:	b29b      	uxth	r3, r3
 8001036:	b2da      	uxtb	r2, r3
 8001038:	210c      	movs	r1, #12
 800103a:	187b      	adds	r3, r7, r1
 800103c:	701a      	strb	r2, [r3, #0]
    buf[1] = (uint8_t)((uint16_t)irqMask & 0x00FF);
 800103e:	1cbb      	adds	r3, r7, #2
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	187b      	adds	r3, r7, r1
 8001046:	705a      	strb	r2, [r3, #1]

    hal.WriteCommand(SX1280_RADIO_CLR_IRQSTATUS, buf, sizeof(buf));
 8001048:	187a      	adds	r2, r7, r1
 800104a:	4804      	ldr	r0, [pc, #16]	; (800105c <_ZN12SX1280Driver14ClearIrqStatusEt+0x3c>)
 800104c:	2302      	movs	r3, #2
 800104e:	2197      	movs	r1, #151	; 0x97
 8001050:	f000 f9ae 	bl	80013b0 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>
}
 8001054:	46c0      	nop			; (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	b004      	add	sp, #16
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200000ac 	.word	0x200000ac

08001060 <_ZN12SX1280Driver7TXnbISREv>:

void SX1280Driver::TXnbISR()
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
    currOpmode = SX1280_MODE_FS; // radio goes to FS after TX
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	223c      	movs	r2, #60	; 0x3c
 800106c:	2104      	movs	r1, #4
 800106e:	5499      	strb	r1, [r3, r2]
#ifdef DEBUG_SX1280_OTA_TIMING
    endTX = micros();
    DBGLN("TOA: %d", endTX - beginTX);
#endif
    if(TXdoneCallback) TXdoneCallback();
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d002      	beq.n	800107e <_ZN12SX1280Driver7TXnbISREv+0x1e>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	4798      	blx	r3
}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	46bd      	mov	sp, r7
 8001082:	b002      	add	sp, #8
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <_ZN12SX1280Driver4TXnbEv>:

uint8_t FIFOaddr = 0;

void SX1280Driver::TXnb()
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
    if (currOpmode == SX1280_MODE_TX) //catch TX timeout
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	223c      	movs	r2, #60	; 0x3c
 8001094:	5c9b      	ldrb	r3, [r3, r2]
 8001096:	2b06      	cmp	r3, #6
 8001098:	d109      	bne.n	80010ae <_ZN12SX1280Driver4TXnbEv+0x26>
    {
        //DBGLN("Timeout!");
        SetMode(SX1280_MODE_FS);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2104      	movs	r1, #4
 800109e:	0018      	movs	r0, r3
 80010a0:	f7ff fd34 	bl	8000b0c <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>
        TXnbISR();
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	0018      	movs	r0, r3
 80010a8:	f7ff ffda 	bl	8001060 <_ZN12SX1280Driver7TXnbISREv>
        return;
 80010ac:	e02b      	b.n	8001106 <_ZN12SX1280Driver4TXnbEv+0x7e>
    }
    hal.TXenable();                      // do first to allow PA stablise
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <_ZN12SX1280Driver4TXnbEv+0x84>)
 80010b0:	0018      	movs	r0, r3
 80010b2:	f000 fbcd 	bl	8001850 <_ZN9SX1280Hal8TXenableEv>
    hal.TXenable();
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <_ZN12SX1280Driver4TXnbEv+0x84>)
 80010b8:	0018      	movs	r0, r3
 80010ba:	f000 fbc9 	bl	8001850 <_ZN9SX1280Hal8TXenableEv>
    hal.TXenable();
 80010be:	4b13      	ldr	r3, [pc, #76]	; (800110c <_ZN12SX1280Driver4TXnbEv+0x84>)
 80010c0:	0018      	movs	r0, r3
 80010c2:	f000 fbc5 	bl	8001850 <_ZN9SX1280Hal8TXenableEv>
    hal.TXenable();
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <_ZN12SX1280Driver4TXnbEv+0x84>)
 80010c8:	0018      	movs	r0, r3
 80010ca:	f000 fbc1 	bl	8001850 <_ZN9SX1280Hal8TXenableEv>
    hal.TXenable();
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <_ZN12SX1280Driver4TXnbEv+0x84>)
 80010d0:	0018      	movs	r0, r3
 80010d2:	f000 fbbd 	bl	8001850 <_ZN9SX1280Hal8TXenableEv>
    hal.TXenable();
 80010d6:	4b0d      	ldr	r3, [pc, #52]	; (800110c <_ZN12SX1280Driver4TXnbEv+0x84>)
 80010d8:	0018      	movs	r0, r3
 80010da:	f000 fbb9 	bl	8001850 <_ZN9SX1280Hal8TXenableEv>
    hal.TXenable();
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <_ZN12SX1280Driver4TXnbEv+0x84>)
 80010e0:	0018      	movs	r0, r3
 80010e2:	f000 fbb5 	bl	8001850 <_ZN9SX1280Hal8TXenableEv>
    hal.WriteBuffer(0x00, TXdataBuffer, PayloadLength); //todo fix offset to equal fifo addr
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3308      	adds	r3, #8
 80010ea:	001a      	movs	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2138      	movs	r1, #56	; 0x38
 80010f0:	5c5b      	ldrb	r3, [r3, r1]
 80010f2:	4806      	ldr	r0, [pc, #24]	; (800110c <_ZN12SX1280Driver4TXnbEv+0x84>)
 80010f4:	2100      	movs	r1, #0
 80010f6:	f000 fadb 	bl	80016b0 <_ZN9SX1280Hal11WriteBufferEhPVhh>
    instance->SetMode(SX1280_MODE_TX);
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <_ZN12SX1280Driver4TXnbEv+0x88>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2106      	movs	r1, #6
 8001100:	0018      	movs	r0, r3
 8001102:	f7ff fd03 	bl	8000b0c <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>
#ifdef DEBUG_SX1280_OTA_TIMING
    beginTX = micros();
#endif
}
 8001106:	46bd      	mov	sp, r7
 8001108:	b002      	add	sp, #8
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200000ac 	.word	0x200000ac
 8001110:	200000b0 	.word	0x200000b0

08001114 <_ZN12SX1280Driver7RXnbISREv>:

void SX1280Driver::RXnbISR()
{
 8001114:	b5b0      	push	{r4, r5, r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
    // In continuous receive mode, the device stays in Rx mode
    if (timeout != 0xFFFF)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001120:	4a14      	ldr	r2, [pc, #80]	; (8001174 <_ZN12SX1280Driver7RXnbISREv+0x60>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d003      	beq.n	800112e <_ZN12SX1280Driver7RXnbISREv+0x1a>
    {
        // From table 11-28, pg 81 datasheet rev 3.2
        // upon successsful receipt, when the timer is active or in single mode, it returns to STDBY_RC
        // but because we have AUTO_FS enabled we automatically transition to state SX1280_MODE_FS
        currOpmode = SX1280_MODE_FS;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	223c      	movs	r2, #60	; 0x3c
 800112a:	2104      	movs	r1, #4
 800112c:	5499      	strb	r1, [r3, r2]
    }
    uint8_t FIFOaddr = GetRxBufferAddr();
 800112e:	250f      	movs	r5, #15
 8001130:	197c      	adds	r4, r7, r5
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	0018      	movs	r0, r3
 8001136:	f000 f835 	bl	80011a4 <_ZN12SX1280Driver15GetRxBufferAddrEv>
 800113a:	0003      	movs	r3, r0
 800113c:	7023      	strb	r3, [r4, #0]
    hal.ReadBuffer(FIFOaddr, RXdataBuffer, PayloadLength);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	331c      	adds	r3, #28
 8001142:	001a      	movs	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2138      	movs	r1, #56	; 0x38
 8001148:	5c5c      	ldrb	r4, [r3, r1]
 800114a:	197b      	adds	r3, r7, r5
 800114c:	7819      	ldrb	r1, [r3, #0]
 800114e:	480a      	ldr	r0, [pc, #40]	; (8001178 <_ZN12SX1280Driver7RXnbISREv+0x64>)
 8001150:	0023      	movs	r3, r4
 8001152:	f000 faff 	bl	8001754 <_ZN9SX1280Hal10ReadBufferEhPVhh>
    GetLastPacketStats();
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	0018      	movs	r0, r3
 800115a:	f000 f83b 	bl	80011d4 <_ZN12SX1280Driver18GetLastPacketStatsEv>
    if(RXdoneCallback) RXdoneCallback();
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <_ZN12SX1280Driver7RXnbISREv+0x58>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4798      	blx	r3
}
 800116c:	46c0      	nop			; (mov r8, r8)
 800116e:	46bd      	mov	sp, r7
 8001170:	b004      	add	sp, #16
 8001172:	bdb0      	pop	{r4, r5, r7, pc}
 8001174:	0000ffff 	.word	0x0000ffff
 8001178:	200000ac 	.word	0x200000ac

0800117c <_ZN12SX1280Driver4RXnbEv>:

void SX1280Driver::RXnb()
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
    hal.RXenable();
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <_ZN12SX1280Driver4RXnbEv+0x24>)
 8001186:	0018      	movs	r0, r3
 8001188:	f000 fb82 	bl	8001890 <_ZN9SX1280Hal8RXenableEv>
    SetMode(SX1280_MODE_RX);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2105      	movs	r1, #5
 8001190:	0018      	movs	r0, r3
 8001192:	f7ff fcbb 	bl	8000b0c <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>
}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	46bd      	mov	sp, r7
 800119a:	b002      	add	sp, #8
 800119c:	bd80      	pop	{r7, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	200000ac 	.word	0x200000ac

080011a4 <_ZN12SX1280Driver15GetRxBufferAddrEv>:

uint8_t SX1280Driver::GetRxBufferAddr()
{
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
    uint8_t status[2] = {0};
 80011ac:	210c      	movs	r1, #12
 80011ae:	187b      	adds	r3, r7, r1
 80011b0:	2200      	movs	r2, #0
 80011b2:	801a      	strh	r2, [r3, #0]
    hal.ReadCommand(SX1280_RADIO_GET_RXBUFFERSTATUS, status, 2);
 80011b4:	000c      	movs	r4, r1
 80011b6:	187a      	adds	r2, r7, r1
 80011b8:	4805      	ldr	r0, [pc, #20]	; (80011d0 <_ZN12SX1280Driver15GetRxBufferAddrEv+0x2c>)
 80011ba:	2302      	movs	r3, #2
 80011bc:	2117      	movs	r1, #23
 80011be:	f000 f93d 	bl	800143c <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh>
    return status[1];
 80011c2:	193b      	adds	r3, r7, r4
 80011c4:	785b      	ldrb	r3, [r3, #1]
}
 80011c6:	0018      	movs	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	b005      	add	sp, #20
 80011cc:	bd90      	pop	{r4, r7, pc}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	200000ac 	.word	0x200000ac

080011d4 <_ZN12SX1280Driver18GetLastPacketStatsEv>:
    hal.ReadCommand(SX1280_RADIO_GET_RSSIINST, (uint8_t *)&status, 1);
    return -(int8_t)(status / 2);
}

void SX1280Driver::GetLastPacketStats()
{
 80011d4:	b590      	push	{r4, r7, lr}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
    uint8_t status[2];

    hal.ReadCommand(SX1280_RADIO_GET_PACKETSTATUS, status, 2);
 80011dc:	240c      	movs	r4, #12
 80011de:	193a      	adds	r2, r7, r4
 80011e0:	481a      	ldr	r0, [pc, #104]	; (800124c <_ZN12SX1280Driver18GetLastPacketStatsEv+0x78>)
 80011e2:	2302      	movs	r3, #2
 80011e4:	211d      	movs	r1, #29
 80011e6:	f000 f929 	bl	800143c <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh>
    LastPacketRSSI = -(int8_t)(status[0] / 2);
 80011ea:	0020      	movs	r0, r4
 80011ec:	183b      	adds	r3, r7, r0
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	085b      	lsrs	r3, r3, #1
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	425b      	negs	r3, r3
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	b259      	sxtb	r1, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	223a      	movs	r2, #58	; 0x3a
 80011fe:	5499      	strb	r1, [r3, r2]
    LastPacketSNR = (int8_t)status[1] / 4;
 8001200:	183b      	adds	r3, r7, r0
 8001202:	785b      	ldrb	r3, [r3, #1]
 8001204:	b25b      	sxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	da00      	bge.n	800120c <_ZN12SX1280Driver18GetLastPacketStatsEv+0x38>
 800120a:	3303      	adds	r3, #3
 800120c:	109b      	asrs	r3, r3, #2
 800120e:	b259      	sxtb	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	223b      	movs	r2, #59	; 0x3b
 8001214:	5499      	strb	r1, [r3, r2]
    // https://www.mouser.com/datasheet/2/761/DS_SX1280-1_V2.2-1511144.pdf
    // need to subtract SNR from RSSI when SNR <= 0;
    int8_t negOffset = (LastPacketSNR < 0) ? LastPacketSNR : 0;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	223b      	movs	r2, #59	; 0x3b
 800121a:	569b      	ldrsb	r3, [r3, r2]
 800121c:	220f      	movs	r2, #15
 800121e:	18ba      	adds	r2, r7, r2
 8001220:	b259      	sxtb	r1, r3
 8001222:	2900      	cmp	r1, #0
 8001224:	dd00      	ble.n	8001228 <_ZN12SX1280Driver18GetLastPacketStatsEv+0x54>
 8001226:	2300      	movs	r3, #0
 8001228:	7013      	strb	r3, [r2, #0]
    LastPacketRSSI += negOffset;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	223a      	movs	r2, #58	; 0x3a
 800122e:	569b      	ldrsb	r3, [r3, r2]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	230f      	movs	r3, #15
 8001234:	18fb      	adds	r3, r7, r3
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	18d3      	adds	r3, r2, r3
 800123a:	b2db      	uxtb	r3, r3
 800123c:	b259      	sxtb	r1, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	223a      	movs	r2, #58	; 0x3a
 8001242:	5499      	strb	r1, [r3, r2]
}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	b005      	add	sp, #20
 800124a:	bd90      	pop	{r4, r7, pc}
 800124c:	200000ac 	.word	0x200000ac

08001250 <_ZN12SX1280Driver11IsrCallbackEv>:

void SX1280Driver::IsrCallback()
{
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
    uint16_t irqStatus = instance->GetIrqStatus();
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <_ZN12SX1280Driver11IsrCallbackEv+0x5c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	1dbc      	adds	r4, r7, #6
 800125c:	0018      	movs	r0, r3
 800125e:	f7ff fec3 	bl	8000fe8 <_ZN12SX1280Driver12GetIrqStatusEv>
 8001262:	0003      	movs	r3, r0
 8001264:	8023      	strh	r3, [r4, #0]
    instance->ClearIrqStatus(SX1280_IRQ_RADIO_ALL);
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <_ZN12SX1280Driver11IsrCallbackEv+0x5c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a11      	ldr	r2, [pc, #68]	; (80012b0 <_ZN12SX1280Driver11IsrCallbackEv+0x60>)
 800126c:	0011      	movs	r1, r2
 800126e:	0018      	movs	r0, r3
 8001270:	f7ff fed6 	bl	8001020 <_ZN12SX1280Driver14ClearIrqStatusEt>
    if (irqStatus & SX1280_IRQ_TX_DONE)
 8001274:	1dbb      	adds	r3, r7, #6
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	2201      	movs	r2, #1
 800127a:	4013      	ands	r3, r2
 800127c:	d008      	beq.n	8001290 <_ZN12SX1280Driver11IsrCallbackEv+0x40>
    {
        hal.TXRXdisable();
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <_ZN12SX1280Driver11IsrCallbackEv+0x64>)
 8001280:	0018      	movs	r0, r3
 8001282:	f000 fb25 	bl	80018d0 <_ZN9SX1280Hal11TXRXdisableEv>
        instance->TXnbISR();
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <_ZN12SX1280Driver11IsrCallbackEv+0x5c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	0018      	movs	r0, r3
 800128c:	f7ff fee8 	bl	8001060 <_ZN12SX1280Driver7TXnbISREv>
    }
    if (irqStatus & SX1280_IRQ_RX_DONE)
 8001290:	1dbb      	adds	r3, r7, #6
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	2202      	movs	r2, #2
 8001296:	4013      	ands	r3, r2
 8001298:	d004      	beq.n	80012a4 <_ZN12SX1280Driver11IsrCallbackEv+0x54>
        instance->RXnbISR();
 800129a:	4b04      	ldr	r3, [pc, #16]	; (80012ac <_ZN12SX1280Driver11IsrCallbackEv+0x5c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	0018      	movs	r0, r3
 80012a0:	f7ff ff38 	bl	8001114 <_ZN12SX1280Driver7RXnbISREv>
}
 80012a4:	46c0      	nop			; (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b003      	add	sp, #12
 80012aa:	bd90      	pop	{r4, r7, pc}
 80012ac:	200000b0 	.word	0x200000b0
 80012b0:	0000ffff 	.word	0x0000ffff
 80012b4:	200000ac 	.word	0x200000ac

080012b8 <_Z41__static_initialization_and_destruction_0ii>:
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d107      	bne.n	80012d8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d103      	bne.n	80012d8 <_Z41__static_initialization_and_destruction_0ii+0x20>
SX1280Hal hal;
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80012d2:	0018      	movs	r0, r3
 80012d4:	f000 f814 	bl	8001300 <_ZN9SX1280HalC1Ev>
}
 80012d8:	46c0      	nop			; (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	b002      	add	sp, #8
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	0000ffff 	.word	0x0000ffff
 80012e4:	200000ac 	.word	0x200000ac

080012e8 <_GLOBAL__sub_I_hal>:
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <_GLOBAL__sub_I_hal+0x14>)
 80012ee:	0019      	movs	r1, r3
 80012f0:	2001      	movs	r0, #1
 80012f2:	f7ff ffe1 	bl	80012b8 <_Z41__static_initialization_and_destruction_0ii>
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	0000ffff 	.word	0x0000ffff

08001300 <_ZN9SX1280HalC1Ev>:

SX1280Hal *SX1280Hal::instance = NULL;

uint8_t OutBuffer[64];

SX1280Hal::SX1280Hal()
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
{
    instance = this;
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <_ZN9SX1280HalC1Ev+0x18>)
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	601a      	str	r2, [r3, #0]
}
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	0018      	movs	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	b002      	add	sp, #8
 8001316:	bd80      	pop	{r7, pc}
 8001318:	200000b4 	.word	0x200000b4

0800131c <_ZN9SX1280Hal4initEv>:
{
    TXRXdisable(); // make sure the RX/TX amp pins are disabled
}

void SX1280Hal::init()
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

}
 8001324:	46c0      	nop			; (mov r8, r8)
 8001326:	46bd      	mov	sp, r7
 8001328:	b002      	add	sp, #8
 800132a:	bd80      	pop	{r7, pc}

0800132c <_ZN9SX1280Hal5resetEv>:

void SX1280Hal::reset(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	// We do not have this pin
}
 8001334:	46c0      	nop			; (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	b002      	add	sp, #8
 800133a:	bd80      	pop	{r7, pc}

0800133c <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh>:

void SX1280Hal::WriteCommand(SX1280_RadioCommands_t command, uint8_t val)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	0008      	movs	r0, r1
 8001346:	0011      	movs	r1, r2
 8001348:	1cfb      	adds	r3, r7, #3
 800134a:	1c02      	adds	r2, r0, #0
 800134c:	701a      	strb	r2, [r3, #0]
 800134e:	1cbb      	adds	r3, r7, #2
 8001350:	1c0a      	adds	r2, r1, #0
 8001352:	701a      	strb	r2, [r3, #0]
    WaitOnBusy();
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	0018      	movs	r0, r3
 8001358:	f000 fa50 	bl	80017fc <_ZN9SX1280Hal10WaitOnBusyEv>
    OutBuffer[0] = command;
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x68>)
 800135e:	1cfa      	adds	r2, r7, #3
 8001360:	7812      	ldrb	r2, [r2, #0]
 8001362:	701a      	strb	r2, [r3, #0]
    OutBuffer[1] = val;
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x68>)
 8001366:	1cba      	adds	r2, r7, #2
 8001368:	7812      	ldrb	r2, [r2, #0]
 800136a:	705a      	strb	r2, [r3, #1]
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x6c>)
 800136e:	2200      	movs	r2, #0
 8001370:	2101      	movs	r1, #1
 8001372:	0018      	movs	r0, r3
 8001374:	f003 f9df 	bl	8004736 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(RADIO_SPI, OutBuffer, 2, 5);
 8001378:	490a      	ldr	r1, [pc, #40]	; (80013a4 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x68>)
 800137a:	480c      	ldr	r0, [pc, #48]	; (80013ac <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x70>)
 800137c:	2305      	movs	r3, #5
 800137e:	2202      	movs	r2, #2
 8001380:	f004 f9cc 	bl	800571c <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uh+0x6c>)
 8001386:	2201      	movs	r2, #1
 8001388:	2101      	movs	r1, #1
 800138a:	0018      	movs	r0, r3
 800138c:	f003 f9d3 	bl	8004736 <HAL_GPIO_WritePin>

    BusyDelay(12);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	210c      	movs	r1, #12
 8001394:	0018      	movs	r0, r3
 8001396:	f7ff fa1b 	bl	80007d0 <_ZNK9SX1280Hal9BusyDelayEm>
}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	46bd      	mov	sp, r7
 800139e:	b002      	add	sp, #8
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	200000b8 	.word	0x200000b8
 80013a8:	50000400 	.word	0x50000400
 80013ac:	200002f8 	.word	0x200002f8

080013b0 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh>:

void SX1280Hal::WriteCommand(SX1280_RadioCommands_t command, uint8_t *buffer, uint8_t size)
{
 80013b0:	b5b0      	push	{r4, r5, r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	0008      	movs	r0, r1
 80013ba:	607a      	str	r2, [r7, #4]
 80013bc:	0019      	movs	r1, r3
 80013be:	250b      	movs	r5, #11
 80013c0:	197b      	adds	r3, r7, r5
 80013c2:	1c02      	adds	r2, r0, #0
 80013c4:	701a      	strb	r2, [r3, #0]
 80013c6:	240a      	movs	r4, #10
 80013c8:	193b      	adds	r3, r7, r4
 80013ca:	1c0a      	adds	r2, r1, #0
 80013cc:	701a      	strb	r2, [r3, #0]
    OutBuffer[0] = (uint8_t)command;
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x7c>)
 80013d0:	197a      	adds	r2, r7, r5
 80013d2:	7812      	ldrb	r2, [r2, #0]
 80013d4:	701a      	strb	r2, [r3, #0]
    memcpy(OutBuffer + 1, buffer, size);
 80013d6:	4816      	ldr	r0, [pc, #88]	; (8001430 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x80>)
 80013d8:	193b      	adds	r3, r7, r4
 80013da:	781a      	ldrb	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	0019      	movs	r1, r3
 80013e0:	f007 fca2 	bl	8008d28 <memcpy>

    WaitOnBusy();
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	0018      	movs	r0, r3
 80013e8:	f000 fa08 	bl	80017fc <_ZN9SX1280Hal10WaitOnBusyEv>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x84>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	2101      	movs	r1, #1
 80013f2:	0018      	movs	r0, r3
 80013f4:	f003 f99f 	bl	8004736 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(RADIO_SPI, OutBuffer, size+1, 5);
 80013f8:	193b      	adds	r3, r7, r4
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	3301      	adds	r3, #1
 8001400:	b29a      	uxth	r2, r3
 8001402:	490a      	ldr	r1, [pc, #40]	; (800142c <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x7c>)
 8001404:	480c      	ldr	r0, [pc, #48]	; (8001438 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x88>)
 8001406:	2305      	movs	r3, #5
 8001408:	f004 f988 	bl	800571c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPhh+0x84>)
 800140e:	2201      	movs	r2, #1
 8001410:	2101      	movs	r1, #1
 8001412:	0018      	movs	r0, r3
 8001414:	f003 f98f 	bl	8004736 <HAL_GPIO_WritePin>

    BusyDelay(12);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	210c      	movs	r1, #12
 800141c:	0018      	movs	r0, r3
 800141e:	f7ff f9d7 	bl	80007d0 <_ZNK9SX1280Hal9BusyDelayEm>
}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	46bd      	mov	sp, r7
 8001426:	b004      	add	sp, #16
 8001428:	bdb0      	pop	{r4, r5, r7, pc}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	200000b8 	.word	0x200000b8
 8001430:	200000b9 	.word	0x200000b9
 8001434:	50000400 	.word	0x50000400
 8001438:	200002f8 	.word	0x200002f8

0800143c <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh>:

void SX1280Hal::ReadCommand(SX1280_RadioCommands_t command, uint8_t *buffer, uint8_t size)
{
 800143c:	b5b0      	push	{r4, r5, r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af02      	add	r7, sp, #8
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	0008      	movs	r0, r1
 8001446:	607a      	str	r2, [r7, #4]
 8001448:	0019      	movs	r1, r3
 800144a:	240b      	movs	r4, #11
 800144c:	193b      	adds	r3, r7, r4
 800144e:	1c02      	adds	r2, r0, #0
 8001450:	701a      	strb	r2, [r3, #0]
 8001452:	230a      	movs	r3, #10
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	1c0a      	adds	r2, r1, #0
 8001458:	701a      	strb	r2, [r3, #0]
    #define RADIO_GET_STATUS_BUF_SIZEOF 3 // special case for command == SX1280_RADIO_GET_STATUS, fixed 3 bytes packet size

    WaitOnBusy();
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	0018      	movs	r0, r3
 800145e:	f000 f9cd 	bl	80017fc <_ZN9SX1280Hal10WaitOnBusyEv>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001462:	4b27      	ldr	r3, [pc, #156]	; (8001500 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc4>)
 8001464:	2200      	movs	r2, #0
 8001466:	2101      	movs	r1, #1
 8001468:	0018      	movs	r0, r3
 800146a:	f003 f964 	bl	8004736 <HAL_GPIO_WritePin>

    if (command == SX1280_RADIO_GET_STATUS)
 800146e:	193b      	adds	r3, r7, r4
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2bc0      	cmp	r3, #192	; 0xc0
 8001474:	d116      	bne.n	80014a4 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0x68>
    {
        OutBuffer[0] = (uint8_t)command;
 8001476:	4b23      	ldr	r3, [pc, #140]	; (8001504 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 8001478:	193a      	adds	r2, r7, r4
 800147a:	7812      	ldrb	r2, [r2, #0]
 800147c:	701a      	strb	r2, [r3, #0]
        OutBuffer[1] = 0x00;
 800147e:	4b21      	ldr	r3, [pc, #132]	; (8001504 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 8001480:	2200      	movs	r2, #0
 8001482:	705a      	strb	r2, [r3, #1]
        OutBuffer[2] = 0x00;
 8001484:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 8001486:	2200      	movs	r2, #0
 8001488:	709a      	strb	r2, [r3, #2]
        HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer, RADIO_GET_STATUS_BUF_SIZEOF, 5);
 800148a:	4a1e      	ldr	r2, [pc, #120]	; (8001504 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 800148c:	491d      	ldr	r1, [pc, #116]	; (8001504 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 800148e:	481e      	ldr	r0, [pc, #120]	; (8001508 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xcc>)
 8001490:	2305      	movs	r3, #5
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2303      	movs	r3, #3
 8001496:	f004 fa99 	bl	80059cc <HAL_SPI_TransmitReceive>
        buffer[0] = OutBuffer[0];
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 800149c:	781a      	ldrb	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	701a      	strb	r2, [r3, #0]
 80014a2:	e022      	b.n	80014ea <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xae>
    }
    else
    {
        OutBuffer[0] = (uint8_t)command;
 80014a4:	4b17      	ldr	r3, [pc, #92]	; (8001504 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 80014a6:	220b      	movs	r2, #11
 80014a8:	18ba      	adds	r2, r7, r2
 80014aa:	7812      	ldrb	r2, [r2, #0]
 80014ac:	701a      	strb	r2, [r3, #0]
        OutBuffer[1] = 0x00;
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	705a      	strb	r2, [r3, #1]
        memcpy(OutBuffer + 2, buffer, size);
 80014b4:	4815      	ldr	r0, [pc, #84]	; (800150c <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xd0>)
 80014b6:	250a      	movs	r5, #10
 80014b8:	197b      	adds	r3, r7, r5
 80014ba:	781a      	ldrb	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	0019      	movs	r1, r3
 80014c0:	f007 fc32 	bl	8008d28 <memcpy>
        HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer, size+2, 5);
 80014c4:	197b      	adds	r3, r7, r5
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	3302      	adds	r3, #2
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	4a0d      	ldr	r2, [pc, #52]	; (8001504 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 80014d0:	490c      	ldr	r1, [pc, #48]	; (8001504 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc8>)
 80014d2:	480d      	ldr	r0, [pc, #52]	; (8001508 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xcc>)
 80014d4:	2405      	movs	r4, #5
 80014d6:	9400      	str	r4, [sp, #0]
 80014d8:	f004 fa78 	bl	80059cc <HAL_SPI_TransmitReceive>
        memcpy(buffer, OutBuffer + 2, size);
 80014dc:	490b      	ldr	r1, [pc, #44]	; (800150c <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xd0>)
 80014de:	197b      	adds	r3, r7, r5
 80014e0:	781a      	ldrb	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	0018      	movs	r0, r3
 80014e6:	f007 fc1f 	bl	8008d28 <memcpy>
    }
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPhh+0xc4>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	2101      	movs	r1, #1
 80014f0:	0018      	movs	r0, r3
 80014f2:	f003 f920 	bl	8004736 <HAL_GPIO_WritePin>
}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b004      	add	sp, #16
 80014fc:	bdb0      	pop	{r4, r5, r7, pc}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	50000400 	.word	0x50000400
 8001504:	200000b8 	.word	0x200000b8
 8001508:	200002f8 	.word	0x200002f8
 800150c:	200000ba 	.word	0x200000ba

08001510 <_ZN9SX1280Hal13WriteRegisterEtPhh>:

void SX1280Hal::WriteRegister(uint16_t address, uint8_t *buffer, uint8_t size)
{
 8001510:	b5b0      	push	{r4, r5, r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af02      	add	r7, sp, #8
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	0008      	movs	r0, r1
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	0019      	movs	r1, r3
 800151e:	240a      	movs	r4, #10
 8001520:	193b      	adds	r3, r7, r4
 8001522:	1c02      	adds	r2, r0, #0
 8001524:	801a      	strh	r2, [r3, #0]
 8001526:	2509      	movs	r5, #9
 8001528:	197b      	adds	r3, r7, r5
 800152a:	1c0a      	adds	r2, r1, #0
 800152c:	701a      	strb	r2, [r3, #0]
    OutBuffer[0] = (SX1280_RADIO_WRITE_REGISTER);
 800152e:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x94>)
 8001530:	2218      	movs	r2, #24
 8001532:	701a      	strb	r2, [r3, #0]
    OutBuffer[1] = ((address & 0xFF00) >> 8);
 8001534:	193b      	adds	r3, r7, r4
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	0a1b      	lsrs	r3, r3, #8
 800153a:	b29b      	uxth	r3, r3
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x94>)
 8001540:	705a      	strb	r2, [r3, #1]
    OutBuffer[2] = (address & 0x00FF);
 8001542:	193b      	adds	r3, r7, r4
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	b2da      	uxtb	r2, r3
 8001548:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x94>)
 800154a:	709a      	strb	r2, [r3, #2]

    memcpy(OutBuffer + 3, buffer, size);
 800154c:	4816      	ldr	r0, [pc, #88]	; (80015a8 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x98>)
 800154e:	197b      	adds	r3, r7, r5
 8001550:	781a      	ldrb	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	0019      	movs	r1, r3
 8001556:	f007 fbe7 	bl	8008d28 <memcpy>

    WaitOnBusy();
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	0018      	movs	r0, r3
 800155e:	f000 f94d 	bl	80017fc <_ZN9SX1280Hal10WaitOnBusyEv>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <_ZN9SX1280Hal13WriteRegisterEtPhh+0x9c>)
 8001564:	2200      	movs	r2, #0
 8001566:	2101      	movs	r1, #1
 8001568:	0018      	movs	r0, r3
 800156a:	f003 f8e4 	bl	8004736 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer, size+3, 5);
 800156e:	197b      	adds	r3, r7, r5
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	b29b      	uxth	r3, r3
 8001574:	3303      	adds	r3, #3
 8001576:	b29b      	uxth	r3, r3
 8001578:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x94>)
 800157a:	490a      	ldr	r1, [pc, #40]	; (80015a4 <_ZN9SX1280Hal13WriteRegisterEtPhh+0x94>)
 800157c:	480c      	ldr	r0, [pc, #48]	; (80015b0 <_ZN9SX1280Hal13WriteRegisterEtPhh+0xa0>)
 800157e:	2405      	movs	r4, #5
 8001580:	9400      	str	r4, [sp, #0]
 8001582:	f004 fa23 	bl	80059cc <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <_ZN9SX1280Hal13WriteRegisterEtPhh+0x9c>)
 8001588:	2201      	movs	r2, #1
 800158a:	2101      	movs	r1, #1
 800158c:	0018      	movs	r0, r3
 800158e:	f003 f8d2 	bl	8004736 <HAL_GPIO_WritePin>

    BusyDelay(12);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	210c      	movs	r1, #12
 8001596:	0018      	movs	r0, r3
 8001598:	f7ff f91a 	bl	80007d0 <_ZNK9SX1280Hal9BusyDelayEm>
}
 800159c:	46c0      	nop			; (mov r8, r8)
 800159e:	46bd      	mov	sp, r7
 80015a0:	b004      	add	sp, #16
 80015a2:	bdb0      	pop	{r4, r5, r7, pc}
 80015a4:	200000b8 	.word	0x200000b8
 80015a8:	200000bb 	.word	0x200000bb
 80015ac:	50000400 	.word	0x50000400
 80015b0:	200002f8 	.word	0x200002f8

080015b4 <_ZN9SX1280Hal13WriteRegisterEth>:

void SX1280Hal::WriteRegister(uint16_t address, uint8_t value)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	0008      	movs	r0, r1
 80015be:	0011      	movs	r1, r2
 80015c0:	1cbb      	adds	r3, r7, #2
 80015c2:	1c02      	adds	r2, r0, #0
 80015c4:	801a      	strh	r2, [r3, #0]
 80015c6:	1c7b      	adds	r3, r7, #1
 80015c8:	1c0a      	adds	r2, r1, #0
 80015ca:	701a      	strb	r2, [r3, #0]
    WriteRegister(address, &value, 1);
 80015cc:	1c7a      	adds	r2, r7, #1
 80015ce:	1cbb      	adds	r3, r7, #2
 80015d0:	8819      	ldrh	r1, [r3, #0]
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	2301      	movs	r3, #1
 80015d6:	f7ff ff9b 	bl	8001510 <_ZN9SX1280Hal13WriteRegisterEtPhh>
}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	46bd      	mov	sp, r7
 80015de:	b002      	add	sp, #8
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <_ZN9SX1280Hal12ReadRegisterEtPhh>:

void SX1280Hal::ReadRegister(uint16_t address, uint8_t *buffer, uint8_t size)
{
 80015e4:	b5b0      	push	{r4, r5, r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af02      	add	r7, sp, #8
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	0008      	movs	r0, r1
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	0019      	movs	r1, r3
 80015f2:	240a      	movs	r4, #10
 80015f4:	193b      	adds	r3, r7, r4
 80015f6:	1c02      	adds	r2, r0, #0
 80015f8:	801a      	strh	r2, [r3, #0]
 80015fa:	2509      	movs	r5, #9
 80015fc:	197b      	adds	r3, r7, r5
 80015fe:	1c0a      	adds	r2, r1, #0
 8001600:	701a      	strb	r2, [r3, #0]
    OutBuffer[0] = (SX1280_RADIO_READ_REGISTER);
 8001602:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 8001604:	2219      	movs	r2, #25
 8001606:	701a      	strb	r2, [r3, #0]
    OutBuffer[1] = ((address & 0xFF00) >> 8);
 8001608:	193b      	adds	r3, r7, r4
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	b29b      	uxth	r3, r3
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4b18      	ldr	r3, [pc, #96]	; (8001674 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 8001614:	705a      	strb	r2, [r3, #1]
    OutBuffer[2] = (address & 0x00FF);
 8001616:	193b      	adds	r3, r7, r4
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	b2da      	uxtb	r2, r3
 800161c:	4b15      	ldr	r3, [pc, #84]	; (8001674 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 800161e:	709a      	strb	r2, [r3, #2]
    OutBuffer[3] = 0x00;
 8001620:	4b14      	ldr	r3, [pc, #80]	; (8001674 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 8001622:	2200      	movs	r2, #0
 8001624:	70da      	strb	r2, [r3, #3]

    WaitOnBusy();
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	0018      	movs	r0, r3
 800162a:	f000 f8e7 	bl	80017fc <_ZN9SX1280Hal10WaitOnBusyEv>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x94>)
 8001630:	2200      	movs	r2, #0
 8001632:	2101      	movs	r1, #1
 8001634:	0018      	movs	r0, r3
 8001636:	f003 f87e 	bl	8004736 <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer, size+4, 5);
 800163a:	197b      	adds	r3, r7, r5
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	b29b      	uxth	r3, r3
 8001640:	3304      	adds	r3, #4
 8001642:	b29b      	uxth	r3, r3
 8001644:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 8001646:	490b      	ldr	r1, [pc, #44]	; (8001674 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x90>)
 8001648:	480c      	ldr	r0, [pc, #48]	; (800167c <_ZN9SX1280Hal12ReadRegisterEtPhh+0x98>)
 800164a:	2405      	movs	r4, #5
 800164c:	9400      	str	r4, [sp, #0]
 800164e:	f004 f9bd 	bl	80059cc <HAL_SPI_TransmitReceive>
    memcpy(buffer, OutBuffer + 4, size);
 8001652:	490b      	ldr	r1, [pc, #44]	; (8001680 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x9c>)
 8001654:	197b      	adds	r3, r7, r5
 8001656:	781a      	ldrb	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	0018      	movs	r0, r3
 800165c:	f007 fb64 	bl	8008d28 <memcpy>

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <_ZN9SX1280Hal12ReadRegisterEtPhh+0x94>)
 8001662:	2201      	movs	r2, #1
 8001664:	2101      	movs	r1, #1
 8001666:	0018      	movs	r0, r3
 8001668:	f003 f865 	bl	8004736 <HAL_GPIO_WritePin>
}
 800166c:	46c0      	nop			; (mov r8, r8)
 800166e:	46bd      	mov	sp, r7
 8001670:	b004      	add	sp, #16
 8001672:	bdb0      	pop	{r4, r5, r7, pc}
 8001674:	200000b8 	.word	0x200000b8
 8001678:	50000400 	.word	0x50000400
 800167c:	200002f8 	.word	0x200002f8
 8001680:	200000bc 	.word	0x200000bc

08001684 <_ZN9SX1280Hal12ReadRegisterEt>:

uint8_t SX1280Hal::ReadRegister(uint16_t address)
{
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	000a      	movs	r2, r1
 800168e:	1cbb      	adds	r3, r7, #2
 8001690:	801a      	strh	r2, [r3, #0]
    uint8_t data;
    ReadRegister(address, &data, 1);
 8001692:	240f      	movs	r4, #15
 8001694:	193a      	adds	r2, r7, r4
 8001696:	1cbb      	adds	r3, r7, #2
 8001698:	8819      	ldrh	r1, [r3, #0]
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	2301      	movs	r3, #1
 800169e:	f7ff ffa1 	bl	80015e4 <_ZN9SX1280Hal12ReadRegisterEtPhh>
    return data;
 80016a2:	193b      	adds	r3, r7, r4
 80016a4:	781b      	ldrb	r3, [r3, #0]
}
 80016a6:	0018      	movs	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	b005      	add	sp, #20
 80016ac:	bd90      	pop	{r4, r7, pc}
	...

080016b0 <_ZN9SX1280Hal11WriteBufferEhPVhh>:

void SX1280Hal::WriteBuffer(uint8_t offset, volatile uint8_t *buffer, uint8_t size)
{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af02      	add	r7, sp, #8
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	0008      	movs	r0, r1
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	0019      	movs	r1, r3
 80016be:	240b      	movs	r4, #11
 80016c0:	193b      	adds	r3, r7, r4
 80016c2:	1c02      	adds	r2, r0, #0
 80016c4:	701a      	strb	r2, [r3, #0]
 80016c6:	230a      	movs	r3, #10
 80016c8:	18fb      	adds	r3, r7, r3
 80016ca:	1c0a      	adds	r2, r1, #0
 80016cc:	701a      	strb	r2, [r3, #0]
    OutBuffer[0] = SX1280_RADIO_WRITE_BUFFER;
 80016ce:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <_ZN9SX1280Hal11WriteBufferEhPVhh+0x98>)
 80016d0:	221a      	movs	r2, #26
 80016d2:	701a      	strb	r2, [r3, #0]
    OutBuffer[1] = offset;
 80016d4:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <_ZN9SX1280Hal11WriteBufferEhPVhh+0x98>)
 80016d6:	193a      	adds	r2, r7, r4
 80016d8:	7812      	ldrb	r2, [r2, #0]
 80016da:	705a      	strb	r2, [r3, #1]

    for(int i = 0; i < size; i++){
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	230a      	movs	r3, #10
 80016e2:	18fb      	adds	r3, r7, r3
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	da0c      	bge.n	8001706 <_ZN9SX1280Hal11WriteBufferEhPVhh+0x56>
    	OutBuffer[i+2] = buffer[i];
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	18d2      	adds	r2, r2, r3
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	3302      	adds	r3, #2
 80016f6:	7812      	ldrb	r2, [r2, #0]
 80016f8:	b2d1      	uxtb	r1, r2
 80016fa:	4a13      	ldr	r2, [pc, #76]	; (8001748 <_ZN9SX1280Hal11WriteBufferEhPVhh+0x98>)
 80016fc:	54d1      	strb	r1, [r2, r3]
    for(int i = 0; i < size; i++){
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	3301      	adds	r3, #1
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	e7ec      	b.n	80016e0 <_ZN9SX1280Hal11WriteBufferEhPVhh+0x30>
    }

    WaitOnBusy();
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	0018      	movs	r0, r3
 800170a:	f000 f877 	bl	80017fc <_ZN9SX1280Hal10WaitOnBusyEv>

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800170e:	4b0f      	ldr	r3, [pc, #60]	; (800174c <_ZN9SX1280Hal11WriteBufferEhPVhh+0x9c>)
 8001710:	2200      	movs	r2, #0
 8001712:	2101      	movs	r1, #1
 8001714:	0018      	movs	r0, r3
 8001716:	f003 f80e 	bl	8004736 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer, size+2, 5);
 800171a:	230a      	movs	r3, #10
 800171c:	18fb      	adds	r3, r7, r3
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b29b      	uxth	r3, r3
 8001722:	3302      	adds	r3, #2
 8001724:	b29b      	uxth	r3, r3
 8001726:	4a08      	ldr	r2, [pc, #32]	; (8001748 <_ZN9SX1280Hal11WriteBufferEhPVhh+0x98>)
 8001728:	4907      	ldr	r1, [pc, #28]	; (8001748 <_ZN9SX1280Hal11WriteBufferEhPVhh+0x98>)
 800172a:	4809      	ldr	r0, [pc, #36]	; (8001750 <_ZN9SX1280Hal11WriteBufferEhPVhh+0xa0>)
 800172c:	2405      	movs	r4, #5
 800172e:	9400      	str	r4, [sp, #0]
 8001730:	f004 f94c 	bl	80059cc <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <_ZN9SX1280Hal11WriteBufferEhPVhh+0x9c>)
 8001736:	2201      	movs	r2, #1
 8001738:	2101      	movs	r1, #1
 800173a:	0018      	movs	r0, r3
 800173c:	f002 fffb 	bl	8004736 <HAL_GPIO_WritePin>

}
 8001740:	46c0      	nop			; (mov r8, r8)
 8001742:	46bd      	mov	sp, r7
 8001744:	b007      	add	sp, #28
 8001746:	bd90      	pop	{r4, r7, pc}
 8001748:	200000b8 	.word	0x200000b8
 800174c:	50000400 	.word	0x50000400
 8001750:	200002f8 	.word	0x200002f8

08001754 <_ZN9SX1280Hal10ReadBufferEhPVhh>:

void SX1280Hal::ReadBuffer(uint8_t offset, volatile uint8_t *buffer, uint8_t size)
{
 8001754:	b5b0      	push	{r4, r5, r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af02      	add	r7, sp, #8
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	0008      	movs	r0, r1
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	0019      	movs	r1, r3
 8001762:	240b      	movs	r4, #11
 8001764:	193b      	adds	r3, r7, r4
 8001766:	1c02      	adds	r2, r0, #0
 8001768:	701a      	strb	r2, [r3, #0]
 800176a:	250a      	movs	r5, #10
 800176c:	197b      	adds	r3, r7, r5
 800176e:	1c0a      	adds	r2, r1, #0
 8001770:	701a      	strb	r2, [r3, #0]
    OutBuffer[0] = SX1280_RADIO_READ_BUFFER;
 8001772:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 8001774:	221b      	movs	r2, #27
 8001776:	701a      	strb	r2, [r3, #0]
    OutBuffer[1] = offset;
 8001778:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 800177a:	193a      	adds	r2, r7, r4
 800177c:	7812      	ldrb	r2, [r2, #0]
 800177e:	705a      	strb	r2, [r3, #1]
    OutBuffer[2] = 0x00;
 8001780:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 8001782:	2200      	movs	r2, #0
 8001784:	709a      	strb	r2, [r3, #2]

    WaitOnBusy();
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	0018      	movs	r0, r3
 800178a:	f000 f837 	bl	80017fc <_ZN9SX1280Hal10WaitOnBusyEv>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800178e:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <_ZN9SX1280Hal10ReadBufferEhPVhh+0xa0>)
 8001790:	2200      	movs	r2, #0
 8001792:	2101      	movs	r1, #1
 8001794:	0018      	movs	r0, r3
 8001796:	f002 ffce 	bl	8004736 <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(RADIO_SPI, OutBuffer, OutBuffer, size+3, 5);
 800179a:	197b      	adds	r3, r7, r5
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	3303      	adds	r3, #3
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 80017a6:	4912      	ldr	r1, [pc, #72]	; (80017f0 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 80017a8:	4813      	ldr	r0, [pc, #76]	; (80017f8 <_ZN9SX1280Hal10ReadBufferEhPVhh+0xa4>)
 80017aa:	2405      	movs	r4, #5
 80017ac:	9400      	str	r4, [sp, #0]
 80017ae:	f004 f90d 	bl	80059cc <HAL_SPI_TransmitReceive>

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <_ZN9SX1280Hal10ReadBufferEhPVhh+0xa0>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	2101      	movs	r1, #1
 80017b8:	0018      	movs	r0, r3
 80017ba:	f002 ffbc 	bl	8004736 <HAL_GPIO_WritePin>

    for(int i = 0; i < size; i++){
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	230a      	movs	r3, #10
 80017c4:	18fb      	adds	r3, r7, r3
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	da0b      	bge.n	80017e6 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x92>
    	buffer[i] = OutBuffer[i+3];
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	1cda      	adds	r2, r3, #3
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	18cb      	adds	r3, r1, r3
 80017d8:	4905      	ldr	r1, [pc, #20]	; (80017f0 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x9c>)
 80017da:	5c8a      	ldrb	r2, [r1, r2]
 80017dc:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < size; i++){
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	3301      	adds	r3, #1
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	e7ed      	b.n	80017c2 <_ZN9SX1280Hal10ReadBufferEhPVhh+0x6e>
    }
}
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	46bd      	mov	sp, r7
 80017ea:	b006      	add	sp, #24
 80017ec:	bdb0      	pop	{r4, r5, r7, pc}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	200000b8 	.word	0x200000b8
 80017f4:	50000400 	.word	0x50000400
 80017f8:	200002f8 	.word	0x200002f8

080017fc <_ZN9SX1280Hal10WaitOnBusyEv>:

bool SX1280Hal::WaitOnBusy()
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
    uint32_t startTime = HAL_GetTick();
 8001804:	f001 ff8a 	bl	800371c <HAL_GetTick>
 8001808:	0003      	movs	r3, r0
 800180a:	60fb      	str	r3, [r7, #12]

    while (HAL_GPIO_ReadPin(BUSY_GPIO_Port, BUSY_Pin)) // wait until not busy or until timeout
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <_ZN9SX1280Hal10WaitOnBusyEv+0x50>)
 800180e:	2102      	movs	r1, #2
 8001810:	0018      	movs	r0, r3
 8001812:	f002 ff73 	bl	80046fc <HAL_GPIO_ReadPin>
 8001816:	0003      	movs	r3, r0
 8001818:	1e5a      	subs	r2, r3, #1
 800181a:	4193      	sbcs	r3, r2
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00f      	beq.n	8001842 <_ZN9SX1280Hal10WaitOnBusyEv+0x46>
    {
        if ((HAL_GetTick() - startTime) >= 2) // 2ms timeout
 8001822:	f001 ff7b 	bl	800371c <HAL_GetTick>
 8001826:	0002      	movs	r2, r0
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2201      	movs	r2, #1
 800182e:	429a      	cmp	r2, r3
 8001830:	419b      	sbcs	r3, r3
 8001832:	425b      	negs	r3, r3
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <_ZN9SX1280Hal10WaitOnBusyEv+0x42>
        {
            return false;
 800183a:	2300      	movs	r3, #0
 800183c:	e002      	b.n	8001844 <_ZN9SX1280Hal10WaitOnBusyEv+0x48>
        }
        else
        {
        	asm("NOP");
 800183e:	46c0      	nop			; (mov r8, r8)
    while (HAL_GPIO_ReadPin(BUSY_GPIO_Port, BUSY_Pin)) // wait until not busy or until timeout
 8001840:	e7e4      	b.n	800180c <_ZN9SX1280Hal10WaitOnBusyEv+0x10>
        }
    }
    return true;
 8001842:	2301      	movs	r3, #1
}
 8001844:	0018      	movs	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	b004      	add	sp, #16
 800184a:	bd80      	pop	{r7, pc}
 800184c:	50000400 	.word	0x50000400

08001850 <_ZN9SX1280Hal8TXenableEv>:

void SX1280Hal::TXenable()
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	// Enable Front End
	HAL_GPIO_WritePin(FE_EN_GPIO_Port, FE_EN_Pin, GPIO_PIN_SET);
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	0059      	lsls	r1, r3, #1
 800185c:	23a0      	movs	r3, #160	; 0xa0
 800185e:	05db      	lsls	r3, r3, #23
 8001860:	2201      	movs	r2, #1
 8001862:	0018      	movs	r0, r3
 8001864:	f002 ff67 	bl	8004736 <HAL_GPIO_WritePin>

	// Enable TX
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_SET);
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <_ZN9SX1280Hal8TXenableEv+0x3c>)
 800186a:	2201      	movs	r2, #1
 800186c:	2140      	movs	r1, #64	; 0x40
 800186e:	0018      	movs	r0, r3
 8001870:	f002 ff61 	bl	8004736 <HAL_GPIO_WritePin>

	// Disable RX
	HAL_GPIO_WritePin(RX_EN_GPIO_Port, RX_EN_Pin, GPIO_PIN_RESET);
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	0119      	lsls	r1, r3, #4
 8001878:	23a0      	movs	r3, #160	; 0xa0
 800187a:	05db      	lsls	r3, r3, #23
 800187c:	2200      	movs	r2, #0
 800187e:	0018      	movs	r0, r3
 8001880:	f002 ff59 	bl	8004736 <HAL_GPIO_WritePin>
}
 8001884:	46c0      	nop			; (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	b002      	add	sp, #8
 800188a:	bd80      	pop	{r7, pc}
 800188c:	50000800 	.word	0x50000800

08001890 <_ZN9SX1280Hal8RXenableEv>:

void SX1280Hal::RXenable()
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	// Enable Front End
	HAL_GPIO_WritePin(FE_EN_GPIO_Port, FE_EN_Pin, GPIO_PIN_SET);
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	0059      	lsls	r1, r3, #1
 800189c:	23a0      	movs	r3, #160	; 0xa0
 800189e:	05db      	lsls	r3, r3, #23
 80018a0:	2201      	movs	r2, #1
 80018a2:	0018      	movs	r0, r3
 80018a4:	f002 ff47 	bl	8004736 <HAL_GPIO_WritePin>

	// Disable TX
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <_ZN9SX1280Hal8RXenableEv+0x3c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	2140      	movs	r1, #64	; 0x40
 80018ae:	0018      	movs	r0, r3
 80018b0:	f002 ff41 	bl	8004736 <HAL_GPIO_WritePin>

	// Enable RX
	HAL_GPIO_WritePin(RX_EN_GPIO_Port, RX_EN_Pin, GPIO_PIN_SET);
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	0119      	lsls	r1, r3, #4
 80018b8:	23a0      	movs	r3, #160	; 0xa0
 80018ba:	05db      	lsls	r3, r3, #23
 80018bc:	2201      	movs	r2, #1
 80018be:	0018      	movs	r0, r3
 80018c0:	f002 ff39 	bl	8004736 <HAL_GPIO_WritePin>
}
 80018c4:	46c0      	nop			; (mov r8, r8)
 80018c6:	46bd      	mov	sp, r7
 80018c8:	b002      	add	sp, #8
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	50000800 	.word	0x50000800

080018d0 <_ZN9SX1280Hal11TXRXdisableEv>:

void SX1280Hal::TXRXdisable()
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	// Disable Front End
	HAL_GPIO_WritePin(FE_EN_GPIO_Port, FE_EN_Pin, GPIO_PIN_RESET);
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	0059      	lsls	r1, r3, #1
 80018dc:	23a0      	movs	r3, #160	; 0xa0
 80018de:	05db      	lsls	r3, r3, #23
 80018e0:	2200      	movs	r2, #0
 80018e2:	0018      	movs	r0, r3
 80018e4:	f002 ff27 	bl	8004736 <HAL_GPIO_WritePin>

	// Disable TX
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <_ZN9SX1280Hal11TXRXdisableEv+0x3c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	2140      	movs	r1, #64	; 0x40
 80018ee:	0018      	movs	r0, r3
 80018f0:	f002 ff21 	bl	8004736 <HAL_GPIO_WritePin>

	// Disable RX
	HAL_GPIO_WritePin(RX_EN_GPIO_Port, RX_EN_Pin, GPIO_PIN_RESET);
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	0119      	lsls	r1, r3, #4
 80018f8:	23a0      	movs	r3, #160	; 0xa0
 80018fa:	05db      	lsls	r3, r3, #23
 80018fc:	2200      	movs	r2, #0
 80018fe:	0018      	movs	r0, r3
 8001900:	f002 ff19 	bl	8004736 <HAL_GPIO_WritePin>
}
 8001904:	46c0      	nop			; (mov r8, r8)
 8001906:	46bd      	mov	sp, r7
 8001908:	b002      	add	sp, #8
 800190a:	bd80      	pop	{r7, pc}
 800190c:	50000800 	.word	0x50000800

08001910 <HAL_GPIO_EXTI_Rising_Callback>:

// EXTI External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	0002      	movs	r2, r0
 8001918:	1dbb      	adds	r3, r7, #6
 800191a:	801a      	strh	r2, [r3, #0]
    if(GPIO_Pin == DIO1_Pin) //
 800191c:	1dbb      	adds	r3, r7, #6
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	2b20      	cmp	r3, #32
 8001922:	d101      	bne.n	8001928 <HAL_GPIO_EXTI_Rising_Callback+0x18>
    {
    	SX1280Driver::IsrCallback();
 8001924:	f7ff fc94 	bl	8001250 <_ZN12SX1280Driver11IsrCallbackEv>
    	//if (SX1280Hal::RadioIsrCallback) SX1280Hal::RadioIsrCallback();
    }
}
 8001928:	46c0      	nop			; (mov r8, r8)
 800192a:	46bd      	mov	sp, r7
 800192c:	b002      	add	sp, #8
 800192e:	bd80      	pop	{r7, pc}

08001930 <_ZN6Parser5resetEv>:
	static void cmdGNSSInfo(uint8_t* args, uint32_t length);

private:


	void reset() {
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
		bufferIndex = 0;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	615a      	str	r2, [r3, #20]
		validSize = false;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	761a      	strb	r2, [r3, #24]
		opCodeIndex = -1;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	4252      	negs	r2, r2
 800194a:	61da      	str	r2, [r3, #28]
	}
 800194c:	46c0      	nop			; (mov r8, r8)
 800194e:	46bd      	mov	sp, r7
 8001950:	b002      	add	sp, #8
 8001952:	bd80      	pop	{r7, pc}

08001954 <_ZN6Parser14getOpCodeIndexEh>:

	/* Reset the parser buffer */
	reset();
}

int32_t Parser::getOpCodeIndex(uint8_t opCode){
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	000a      	movs	r2, r1
 800195e:	1cfb      	adds	r3, r7, #3
 8001960:	701a      	strb	r2, [r3, #0]
	for(int32_t i = 0; i < CMD_NUMBER; i++) {
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2b0d      	cmp	r3, #13
 800196a:	dc10      	bgt.n	800198e <_ZN6Parser14getOpCodeIndexEh+0x3a>
		if(opCode == cmd_table[i].identifier)
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	3304      	adds	r3, #4
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	18d3      	adds	r3, r2, r3
 8001976:	3304      	adds	r3, #4
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	1cfa      	adds	r2, r7, #3
 800197c:	7812      	ldrb	r2, [r2, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d101      	bne.n	8001986 <_ZN6Parser14getOpCodeIndexEh+0x32>
			return i;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	e005      	b.n	8001992 <_ZN6Parser14getOpCodeIndexEh+0x3e>
	for(int32_t i = 0; i < CMD_NUMBER; i++) {
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	3301      	adds	r3, #1
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	e7eb      	b.n	8001966 <_ZN6Parser14getOpCodeIndexEh+0x12>
	}
	return -1;
 800198e:	2301      	movs	r3, #1
 8001990:	425b      	negs	r3, r3
}
 8001992:	0018      	movs	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	b004      	add	sp, #16
 8001998:	bd80      	pop	{r7, pc}

0800199a <_ZN6Parser7processEh>:

void Parser::process(uint8_t ch){
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	000a      	movs	r2, r1
 80019a4:	1cfb      	adds	r3, r7, #3
 80019a6:	701a      	strb	r2, [r3, #0]
	if(opCodeIndex < 0){
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	da18      	bge.n	80019e2 <_ZN6Parser7processEh+0x48>
		opCode = ch;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	1cfa      	adds	r2, r7, #3
 80019b4:	2120      	movs	r1, #32
 80019b6:	7812      	ldrb	r2, [r2, #0]
 80019b8:	545a      	strb	r2, [r3, r1]
		opCodeIndex = getOpCodeIndex(opCode);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2220      	movs	r2, #32
 80019be:	5c9a      	ldrb	r2, [r3, r2]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	0011      	movs	r1, r2
 80019c4:	0018      	movs	r0, r3
 80019c6:	f7ff ffc5 	bl	8001954 <_ZN6Parser14getOpCodeIndexEh>
 80019ca:	0002      	movs	r2, r0
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	61da      	str	r2, [r3, #28]
		if(opCodeIndex < 0){
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69db      	ldr	r3, [r3, #28]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	da2e      	bge.n	8001a36 <_ZN6Parser7processEh+0x9c>
			reset();
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	0018      	movs	r0, r3
 80019dc:	f7ff ffa8 	bl	8001930 <_ZN6Parser5resetEv>
		}
	} else if((length - bufferIndex) > 0) {
		buffer[bufferIndex] = ch;
		bufferIndex++;
	}
}
 80019e0:	e029      	b.n	8001a36 <_ZN6Parser7processEh+0x9c>
	} else if (validSize == false){
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7e1b      	ldrb	r3, [r3, #24]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d112      	bne.n	8001a10 <_ZN6Parser7processEh+0x76>
		length = ch;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	1cfa      	adds	r2, r7, #3
 80019ee:	2121      	movs	r1, #33	; 0x21
 80019f0:	7812      	ldrb	r2, [r2, #0]
 80019f2:	545a      	strb	r2, [r3, r1]
		if(length <= 16) validSize = true;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2221      	movs	r2, #33	; 0x21
 80019f8:	5c9b      	ldrb	r3, [r3, r2]
 80019fa:	2b10      	cmp	r3, #16
 80019fc:	d803      	bhi.n	8001a06 <_ZN6Parser7processEh+0x6c>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	761a      	strb	r2, [r3, #24]
}
 8001a04:	e017      	b.n	8001a36 <_ZN6Parser7processEh+0x9c>
			reset();
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f7ff ff91 	bl	8001930 <_ZN6Parser5resetEv>
}
 8001a0e:	e012      	b.n	8001a36 <_ZN6Parser7processEh+0x9c>
	} else if((length - bufferIndex) > 0) {
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2221      	movs	r2, #33	; 0x21
 8001a14:	5c9b      	ldrb	r3, [r3, r2]
 8001a16:	001a      	movs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d00a      	beq.n	8001a36 <_ZN6Parser7processEh+0x9c>
		buffer[bufferIndex] = ch;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	1cf9      	adds	r1, r7, #3
 8001a28:	7809      	ldrb	r1, [r1, #0]
 8001a2a:	54d1      	strb	r1, [r2, r3]
		bufferIndex++;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	1c5a      	adds	r2, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	615a      	str	r2, [r3, #20]
}
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	b002      	add	sp, #8
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <_ZN6Parser12cmdDirectionEPhm>:


void Parser::cmdDirection(uint8_t* args, uint32_t length){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d10f      	bne.n	8001a70 <_ZN6Parser12cmdDirectionEPhm+0x30>

	if(args[0] == TX || args[0] == RX){
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <_ZN6Parser12cmdDirectionEPhm+0x20>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d108      	bne.n	8001a72 <_ZN6Parser12cmdDirectionEPhm+0x32>
		Link.setDirection((transmission_direction_e)args[0]);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	781a      	ldrb	r2, [r3, #0]
 8001a64:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <_ZN6Parser12cmdDirectionEPhm+0x38>)
 8001a66:	0011      	movs	r1, r2
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f000 fb12 	bl	8002092 <_ZN12Transmission12setDirectionE24transmission_direction_e>
 8001a6e:	e000      	b.n	8001a72 <_ZN6Parser12cmdDirectionEPhm+0x32>
	if(length != 1) return;
 8001a70:	46c0      	nop			; (mov r8, r8)
	}
}
 8001a72:	46bd      	mov	sp, r7
 8001a74:	b002      	add	sp, #8
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000100 	.word	0x20000100

08001a7c <_ZN6Parser9cmdPAGainEPhm>:

void Parser::cmdPAGain(uint8_t* args, uint32_t length){
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d10c      	bne.n	8001aa6 <_ZN6Parser9cmdPAGainEPhm+0x2a>

	if(args[0] < 50){
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b31      	cmp	r3, #49	; 0x31
 8001a92:	d809      	bhi.n	8001aa8 <_ZN6Parser9cmdPAGainEPhm+0x2c>
		Link.setPAGain(args[0]);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	b25a      	sxtb	r2, r3
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <_ZN6Parser9cmdPAGainEPhm+0x34>)
 8001a9c:	0011      	movs	r1, r2
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	f000 fb27 	bl	80020f2 <_ZN12Transmission9setPAGainEa>
 8001aa4:	e000      	b.n	8001aa8 <_ZN6Parser9cmdPAGainEPhm+0x2c>
	if(length != 1) return;
 8001aa6:	46c0      	nop			; (mov r8, r8)
	}
}
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	b002      	add	sp, #8
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	20000100 	.word	0x20000100

08001ab4 <_ZN6Parser13cmdPowerLevelEPhm>:

void Parser::cmdPowerLevel(uint8_t* args, uint32_t length){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d108      	bne.n	8001ad6 <_ZN6Parser13cmdPowerLevelEPhm+0x22>

	Link.setPowerLevel(args[0]);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	b25a      	sxtb	r2, r3
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <_ZN6Parser13cmdPowerLevelEPhm+0x2c>)
 8001acc:	0011      	movs	r1, r2
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f000 fb33 	bl	800213a <_ZN12Transmission13setPowerLevelEa>
 8001ad4:	e000      	b.n	8001ad8 <_ZN6Parser13cmdPowerLevelEPhm+0x24>
	if(length != 1) return;
 8001ad6:	46c0      	nop			; (mov r8, r8)

}
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b002      	add	sp, #8
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	20000100 	.word	0x20000100

08001ae4 <_ZN6Parser7cmdModeEPhm>:

void Parser::cmdMode(uint8_t* args, uint32_t length){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
	if(length != 1) return;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d107      	bne.n	8001b04 <_ZN6Parser7cmdModeEPhm+0x20>

	Link.setMode((transmission_mode_e)args[0]);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	781a      	ldrb	r2, [r3, #0]
 8001af8:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <_ZN6Parser7cmdModeEPhm+0x28>)
 8001afa:	0011      	movs	r1, r2
 8001afc:	0018      	movs	r0, r3
 8001afe:	f000 fae8 	bl	80020d2 <_ZN12Transmission7setModeE19transmission_mode_e>
 8001b02:	e000      	b.n	8001b06 <_ZN6Parser7cmdModeEPhm+0x22>
	if(length != 1) return;
 8001b04:	46c0      	nop			; (mov r8, r8)
}
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b002      	add	sp, #8
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000100 	.word	0x20000100

08001b10 <_ZN6Parser12cmdModeIndexEPhm>:

void Parser::cmdModeIndex(uint8_t* args, uint32_t length){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
	// UNUSED
}
 8001b1a:	46c0      	nop			; (mov r8, r8)
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	b002      	add	sp, #8
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <_ZN6Parser13cmdLinkPhraseEPhm>:

void Parser::cmdLinkPhrase(uint8_t* args, uint32_t length){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
	if(length > 8) return;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d80a      	bhi.n	8001b4a <_ZN6Parser13cmdLinkPhraseEPhm+0x26>

	if(args[0] != 0){
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d007      	beq.n	8001b4c <_ZN6Parser13cmdLinkPhraseEPhm+0x28>
		Link.setLinkPhrase(args, length);
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <_ZN6Parser13cmdLinkPhraseEPhm+0x30>)
 8001b42:	0018      	movs	r0, r3
 8001b44:	f000 fa84 	bl	8002050 <_ZN12Transmission13setLinkPhraseEPKhm>
 8001b48:	e000      	b.n	8001b4c <_ZN6Parser13cmdLinkPhraseEPhm+0x28>
	if(length > 8) return;
 8001b4a:	46c0      	nop			; (mov r8, r8)
	}
}
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	b002      	add	sp, #8
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	20000100 	.word	0x20000100

08001b58 <_ZN6Parser9cmdEnableEPhm>:

void Parser::cmdEnable(uint8_t* args, uint32_t length){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
	if (length != 0) return;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d104      	bne.n	8001b72 <_ZN6Parser9cmdEnableEPhm+0x1a>
	Link.enableTransmission();
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <_ZN6Parser9cmdEnableEPhm+0x24>)
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f000 fb16 	bl	800219c <_ZN12Transmission18enableTransmissionEv>
 8001b70:	e000      	b.n	8001b74 <_ZN6Parser9cmdEnableEPhm+0x1c>
	if (length != 0) return;
 8001b72:	46c0      	nop			; (mov r8, r8)
}
 8001b74:	46bd      	mov	sp, r7
 8001b76:	b002      	add	sp, #8
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	20000100 	.word	0x20000100

08001b80 <_ZN6Parser10cmdDisableEPhm>:

void Parser::cmdDisable(uint8_t* args, uint32_t length){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
	if (length != 0) return;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d104      	bne.n	8001b9a <_ZN6Parser10cmdDisableEPhm+0x1a>
	Link.disableTransmission();
 8001b90:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <_ZN6Parser10cmdDisableEPhm+0x24>)
 8001b92:	0018      	movs	r0, r3
 8001b94:	f000 fbd2 	bl	800233c <_ZN12Transmission19disableTransmissionEv>
 8001b98:	e000      	b.n	8001b9c <_ZN6Parser10cmdDisableEPhm+0x1c>
	if (length != 0) return;
 8001b9a:	46c0      	nop			; (mov r8, r8)
}
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	b002      	add	sp, #8
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	20000100 	.word	0x20000100

08001ba8 <_ZN6Parser5cmdTXEPhm>:

void Parser::cmdTX(uint8_t* args, uint32_t length){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
	Link.writeBytes(args, length);
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <_ZN6Parser5cmdTXEPhm+0x20>)
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f000 face 	bl	800215a <_ZN12Transmission10writeBytesEPKhm>
}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	b002      	add	sp, #8
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	20000100 	.word	0x20000100

08001bcc <_ZN6Parser5cmdRXEPhm>:

void Parser::cmdRX(uint8_t* args, uint32_t length){
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
	// UNUSED
}
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	b002      	add	sp, #8
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <_ZN6Parser7cmdInfoEPhm>:

void Parser::cmdInfo(uint8_t* args, uint32_t length){
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	6039      	str	r1, [r7, #0]
	// UNUSED
}
 8001be8:	46c0      	nop			; (mov r8, r8)
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b002      	add	sp, #8
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <_ZN6Parser10cmdGNSSLocEPhm>:

void Parser::cmdGNSSLoc(uint8_t* args, uint32_t length){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
	// UNUSED
}
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	b002      	add	sp, #8
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <_ZN6Parser11cmdGNSSTimeEPhm>:

void Parser::cmdGNSSTime(uint8_t* args, uint32_t length){
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
	// UNUSED
}
 8001c0c:	46c0      	nop			; (mov r8, r8)
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	b002      	add	sp, #8
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <_ZN6Parser11cmdGNSSInfoEPhm>:

void Parser::cmdGNSSInfo(uint8_t* args, uint32_t length){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
	// UNUSED
}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b002      	add	sp, #8
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <_Z12start_serialv>:
extern TinyGPSPlus gps;


static uint8_t c2;

void start_serial(){
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, (uint8_t*)& c2, 1);
 8001c2c:	4904      	ldr	r1, [pc, #16]	; (8001c40 <_Z12start_serialv+0x18>)
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <_Z12start_serialv+0x1c>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	0018      	movs	r0, r3
 8001c34:	f005 f8d2 	bl	8006ddc <HAL_UART_Receive_IT>
}
 8001c38:	46c0      	nop			; (mov r8, r8)
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	200000f8 	.word	0x200000f8
 8001c44:	20000438 	.word	0x20000438

08001c48 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1){
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <HAL_UART_RxCpltCallback+0x3c>)
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d010      	beq.n	8001c7a <HAL_UART_RxCpltCallback+0x32>
		//HAL_UART_Receive_IT(&huart1, (uint8_t*)& c1, 1);
		//last_package = HAL_GetTick();
		//gps.encode(c1);
	} else if (huart == &huart2) {
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_UART_RxCpltCallback+0x40>)
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d10c      	bne.n	8001c7a <HAL_UART_RxCpltCallback+0x32>
		HAL_UART_Receive_IT(&huart2, (uint8_t*)& c2, 1);
 8001c60:	490a      	ldr	r1, [pc, #40]	; (8001c8c <HAL_UART_RxCpltCallback+0x44>)
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_UART_RxCpltCallback+0x40>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	0018      	movs	r0, r3
 8001c68:	f005 f8b8 	bl	8006ddc <HAL_UART_Receive_IT>
		p.process(c2);
 8001c6c:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <HAL_UART_RxCpltCallback+0x44>)
 8001c6e:	781a      	ldrb	r2, [r3, #0]
 8001c70:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <HAL_UART_RxCpltCallback+0x48>)
 8001c72:	0011      	movs	r1, r2
 8001c74:	0018      	movs	r0, r3
 8001c76:	f7ff fe90 	bl	800199a <_ZN6Parser7processEh>
	}
}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b002      	add	sp, #8
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	200003a8 	.word	0x200003a8
 8001c88:	20000438 	.word	0x20000438
 8001c8c:	200000f8 	.word	0x200000f8
 8001c90:	200004c8 	.word	0x200004c8

08001c94 <_ZN10RawDegreesC1Ev>:
{
   uint16_t deg;
   uint32_t billionths;
   bool negative;
public:
   RawDegrees() : deg(0), billionths(0), negative(false)
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	801a      	strh	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	721a      	strb	r2, [r3, #8]
   {}
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b002      	add	sp, #8
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <_ZN15TinyGPSLocationC1Ev>:
   const RawDegrees &rawLat()     { updated = false; return rawLatData; }
   const RawDegrees &rawLng()     { updated = false; return rawLngData; }
   double lat();
   double lng();

   TinyGPSLocation() : valid(false), updated(false)
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	705a      	strb	r2, [r3, #1]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3304      	adds	r3, #4
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f7ff ffdf 	bl	8001c94 <_ZN10RawDegreesC1Ev>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3310      	adds	r3, #16
 8001cda:	0018      	movs	r0, r3
 8001cdc:	f7ff ffda 	bl	8001c94 <_ZN10RawDegreesC1Ev>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	331c      	adds	r3, #28
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f7ff ffd5 	bl	8001c94 <_ZN10RawDegreesC1Ev>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3328      	adds	r3, #40	; 0x28
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f7ff ffd0 	bl	8001c94 <_ZN10RawDegreesC1Ev>
   {}
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	b002      	add	sp, #8
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <_ZN11TinyGPSDateC1Ev>:
   uint32_t value()           { updated = false; return date; }
   uint16_t year();
   uint8_t month();
   uint8_t day();

   TinyGPSDate() : valid(false), updated(false), date(0)
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	705a      	strb	r2, [r3, #1]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	605a      	str	r2, [r3, #4]
   {}
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b002      	add	sp, #8
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <_ZN11TinyGPSTimeC1Ev>:
   uint8_t hour();
   uint8_t minute();
   uint8_t second();
   uint8_t centisecond();

   TinyGPSTime() : valid(false), updated(false), time(0)
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	705a      	strb	r2, [r3, #1]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	605a      	str	r2, [r3, #4]
   {}
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	0018      	movs	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	b002      	add	sp, #8
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <_ZN14TinyGPSDecimalC1Ev>:
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? HAL_GetTick() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }

   TinyGPSDecimal() : valid(false), updated(false), val(0)
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	705a      	strb	r2, [r3, #1]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
   {}
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	0018      	movs	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b002      	add	sp, #8
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <_ZN14TinyGPSIntegerC1Ev>:
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? HAL_GetTick() - lastCommitTime : (uint32_t)ULONG_MAX; }
   uint32_t value()        { updated = false; return val; }

   TinyGPSInteger() : valid(false), updated(false), val(0)
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	705a      	strb	r2, [r3, #1]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
   {}
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	0018      	movs	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b002      	add	sp, #8
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <_ZN12TinyGPSSpeedC1Ev>:
   uint32_t val, newval;
   void commit();
   void set(const char *term);
};

struct TinyGPSSpeed : TinyGPSDecimal
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f7ff ffd4 	bl	8001d46 <_ZN14TinyGPSDecimalC1Ev>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	0018      	movs	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b002      	add	sp, #8
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <_ZN13TinyGPSCourseC1Ev>:
   double mph()      { return _GPS_MPH_PER_KNOT * value() / 100.0; }
   double mps()      { return _GPS_MPS_PER_KNOT * value() / 100.0; }
   double kmph()     { return _GPS_KMPH_PER_KNOT * value() / 100.0; }
};

struct TinyGPSCourse : public TinyGPSDecimal
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	0018      	movs	r0, r3
 8001db4:	f7ff ffc7 	bl	8001d46 <_ZN14TinyGPSDecimalC1Ev>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	0018      	movs	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	b002      	add	sp, #8
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <_ZN15TinyGPSAltitudeC1Ev>:
{
   double deg()      { return value() / 100.0; }
};

struct TinyGPSAltitude : TinyGPSDecimal
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f7ff ffba 	bl	8001d46 <_ZN14TinyGPSDecimalC1Ev>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	b002      	add	sp, #8
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <_ZN11TinyGPSHDOPC1Ev>:
   double miles()        { return _GPS_MILES_PER_METER * value() / 100.0; }
   double kilometers()   { return _GPS_KM_PER_METER * value() / 100.0; }
   double feet()         { return _GPS_FEET_PER_METER * value() / 100.0; }
};

struct TinyGPSHDOP : TinyGPSDecimal
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	0018      	movs	r0, r3
 8001de8:	f7ff ffad 	bl	8001d46 <_ZN14TinyGPSDecimalC1Ev>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	0018      	movs	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	b002      	add	sp, #8
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <_ZN11TinyGPSPlusC1Ev>:
#define _GPRMCterm   "GPRMC"
#define _GPGGAterm   "GPGGA"
#define _GNRMCterm   "GNRMC"
#define _GNGGAterm   "GNGGA"

TinyGPSPlus::TinyGPSPlus()
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	0018      	movs	r0, r3
 8001e02:	f7ff ff59 	bl	8001cb8 <_ZN15TinyGPSLocationC1Ev>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3338      	adds	r3, #56	; 0x38
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f7ff ff77 	bl	8001cfe <_ZN11TinyGPSDateC1Ev>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3348      	adds	r3, #72	; 0x48
 8001e14:	0018      	movs	r0, r3
 8001e16:	f7ff ff84 	bl	8001d22 <_ZN11TinyGPSTimeC1Ev>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3358      	adds	r3, #88	; 0x58
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f7ff ffb5 	bl	8001d8e <_ZN12TinyGPSSpeedC1Ev>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3368      	adds	r3, #104	; 0x68
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f7ff ffbd 	bl	8001da8 <_ZN13TinyGPSCourseC1Ev>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3378      	adds	r3, #120	; 0x78
 8001e32:	0018      	movs	r0, r3
 8001e34:	f7ff ffc5 	bl	8001dc2 <_ZN15TinyGPSAltitudeC1Ev>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3388      	adds	r3, #136	; 0x88
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f7ff ff94 	bl	8001d6a <_ZN14TinyGPSIntegerC1Ev>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3398      	adds	r3, #152	; 0x98
 8001e46:	0018      	movs	r0, r3
 8001e48:	f7ff ffc8 	bl	8001ddc <_ZN11TinyGPSHDOPC1Ev>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	22a8      	movs	r2, #168	; 0xa8
 8001e50:	2100      	movs	r1, #0
 8001e52:	5499      	strb	r1, [r3, r2]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	22a9      	movs	r2, #169	; 0xa9
 8001e58:	2100      	movs	r1, #0
 8001e5a:	5499      	strb	r1, [r3, r2]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	22b9      	movs	r2, #185	; 0xb9
 8001e60:	2102      	movs	r1, #2
 8001e62:	5499      	strb	r1, [r3, r2]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	22ba      	movs	r2, #186	; 0xba
 8001e68:	2100      	movs	r1, #0
 8001e6a:	5499      	strb	r1, [r3, r2]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	22bb      	movs	r2, #187	; 0xbb
 8001e70:	2100      	movs	r1, #0
 8001e72:	5499      	strb	r1, [r3, r2]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	22bc      	movs	r2, #188	; 0xbc
 8001e78:	2100      	movs	r1, #0
 8001e7a:	5499      	strb	r1, [r3, r2]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	22c0      	movs	r2, #192	; 0xc0
 8001e80:	2100      	movs	r1, #0
 8001e82:	5099      	str	r1, [r3, r2]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	22c4      	movs	r2, #196	; 0xc4
 8001e88:	2100      	movs	r1, #0
 8001e8a:	5099      	str	r1, [r3, r2]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	22c8      	movs	r2, #200	; 0xc8
 8001e90:	2100      	movs	r1, #0
 8001e92:	5099      	str	r1, [r3, r2]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	22cc      	movs	r2, #204	; 0xcc
 8001e98:	2100      	movs	r1, #0
 8001e9a:	5099      	str	r1, [r3, r2]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	22d0      	movs	r2, #208	; 0xd0
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	5099      	str	r1, [r3, r2]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	22d4      	movs	r2, #212	; 0xd4
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	5099      	str	r1, [r3, r2]
{
  term[0] = '\0';
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	22aa      	movs	r2, #170	; 0xaa
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	5499      	strb	r1, [r3, r2]
}
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b002      	add	sp, #8
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <_ZN12SX1280Driver11SetIdleModeEv>:

    ////////////////Configuration Functions/////////////
    SX1280Driver();
    bool Begin();
    void End();
    void SetIdleMode() { SetMode(SX1280_MODE_FS); }; // set Idle mode used when switching from RX to TX
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2104      	movs	r1, #4
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f7fe fe1e 	bl	8000b0c <_ZN12SX1280Driver7SetModeE28SX1280_RadioOperatingModes_t>
 8001ed0:	46c0      	nop			; (mov r8, r8)
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b002      	add	sp, #8
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <_ZN12Transmission17resetTransmissionEv>:

	void processRFPacket();



	void resetTransmission(){
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
		disableTransmission();
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f000 fa2a 	bl	800233c <_ZN12Transmission19disableTransmissionEv>
		HAL_Delay(10);
 8001ee8:	200a      	movs	r0, #10
 8001eea:	f001 fc21 	bl	8003730 <HAL_Delay>
		enableTransmission();
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f000 f953 	bl	800219c <_ZN12Transmission18enableTransmissionEv>
	}
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	b002      	add	sp, #8
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <_ZL14GetInitialFreqv>:
// The number of frequencies for this regulatory domain
uint32_t FHSSgetChannelCount(void);

// get the initial frequency, which is also the sync channel
static inline uint32_t GetInitialFreq()
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
    return FHSSfreqs[sync_channel];
 8001f04:	4b03      	ldr	r3, [pc, #12]	; (8001f14 <_ZL14GetInitialFreqv+0x14>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <_ZL14GetInitialFreqv+0x18>)
 8001f0a:	0092      	lsls	r2, r2, #2
 8001f0c:	58d3      	ldr	r3, [r2, r3]
}
 8001f0e:	0018      	movs	r0, r3
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	200000a4 	.word	0x200000a4
 8001f18:	0800965c 	.word	0x0800965c

08001f1c <_ZL16FHSSsetCurrIndexh>:
    return FHSSptr;
}

// Set the sequence pointer, used by RX on SYNC
static inline void FHSSsetCurrIndex(const uint8_t value)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	0002      	movs	r2, r0
 8001f24:	1dfb      	adds	r3, r7, #7
 8001f26:	701a      	strb	r2, [r3, #0]
    FHSSptr = value % FHSS_SEQUENCE_CNT;
 8001f28:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <_ZL16FHSSsetCurrIndexh+0x2c>)
 8001f2a:	781a      	ldrb	r2, [r3, #0]
 8001f2c:	1dfb      	adds	r3, r7, #7
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	0011      	movs	r1, r2
 8001f32:	0018      	movs	r0, r3
 8001f34:	f7fe f976 	bl	8000224 <__aeabi_uidivmod>
 8001f38:	000b      	movs	r3, r1
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <_ZL16FHSSsetCurrIndexh+0x30>)
 8001f3e:	701a      	strb	r2, [r3, #0]
}
 8001f40:	46c0      	nop			; (mov r8, r8)
 8001f42:	46bd      	mov	sp, r7
 8001f44:	b002      	add	sp, #8
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	0800979c 	.word	0x0800979c
 8001f4c:	200000a0 	.word	0x200000a0

08001f50 <_ZL15FHSSgetNextFreqv>:

// Advance the pointer to the next hop and return the frequency of that channel
static inline uint32_t FHSSgetNextFreq()
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
    FHSSptr = (FHSSptr + 1) % FHSS_SEQUENCE_CNT;
 8001f56:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <_ZL15FHSSgetNextFreqv+0x44>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <_ZL15FHSSgetNextFreqv+0x48>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	0019      	movs	r1, r3
 8001f64:	0010      	movs	r0, r2
 8001f66:	f7fe fa47 	bl	80003f8 <__aeabi_idivmod>
 8001f6a:	000b      	movs	r3, r1
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <_ZL15FHSSgetNextFreqv+0x44>)
 8001f70:	701a      	strb	r2, [r3, #0]
    uint32_t freq = FHSSfreqs[FHSSsequence[FHSSptr]];
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <_ZL15FHSSgetNextFreqv+0x44>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	001a      	movs	r2, r3
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <_ZL15FHSSgetNextFreqv+0x4c>)
 8001f7c:	5c9b      	ldrb	r3, [r3, r2]
 8001f7e:	001a      	movs	r2, r3
 8001f80:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <_ZL15FHSSgetNextFreqv+0x50>)
 8001f82:	0092      	lsls	r2, r2, #2
 8001f84:	58d3      	ldr	r3, [r2, r3]
 8001f86:	607b      	str	r3, [r7, #4]
    return freq;
 8001f88:	687b      	ldr	r3, [r7, #4]
}
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	b002      	add	sp, #8
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	200000a0 	.word	0x200000a0
 8001f98:	0800979c 	.word	0x0800979c
 8001f9c:	2000008c 	.word	0x2000008c
 8001fa0:	0800965c 	.word	0x0800965c

08001fa4 <_ZL10rxCallbackv>:
#include <cstring>
#include "main.h"

static Transmission* pTransmission;

static inline void rxCallback(){
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
	pTransmission->rxDoneISR();
 8001fa8:	4b03      	ldr	r3, [pc, #12]	; (8001fb8 <_ZL10rxCallbackv+0x14>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	0018      	movs	r0, r3
 8001fae:	f000 fa4c 	bl	800244a <_ZN12Transmission9rxDoneISREv>
}
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	200000fc 	.word	0x200000fc

08001fbc <_ZL10txCallbackv>:

static inline void txCallback(){
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
	pTransmission->txDoneISR();
 8001fc0:	4b03      	ldr	r3, [pc, #12]	; (8001fd0 <_ZL10txCallbackv+0x14>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f000 fa77 	bl	80024b8 <_ZN12Transmission9txDoneISREv>
}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	200000fc 	.word	0x200000fc

08001fd4 <_ZN12Transmission5beginEP17TIM_HandleTypeDef>:

bool Transmission::begin(TIM_HandleTypeDef* t){
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]

	/* Catch if already initalized */
	if(radioInitialized == true)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2280      	movs	r2, #128	; 0x80
 8001fe2:	5c9b      	ldrb	r3, [r3, r2]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d103      	bne.n	8001ff0 <_ZN12Transmission5beginEP17TIM_HandleTypeDef+0x1c>
		return radioInitialized;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2280      	movs	r2, #128	; 0x80
 8001fec:	5c9b      	ldrb	r3, [r3, r2]
 8001fee:	e025      	b.n	800203c <_ZN12Transmission5beginEP17TIM_HandleTypeDef+0x68>

	timer = t;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	679a      	str	r2, [r3, #120]	; 0x78
	pTransmission = this;
 8001ff6:	4b13      	ldr	r3, [pc, #76]	; (8002044 <_ZN12Transmission5beginEP17TIM_HandleTypeDef+0x70>)
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	601a      	str	r2, [r3, #0]
	Radio.RXdoneCallback = &rxCallback;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a12      	ldr	r2, [pc, #72]	; (8002048 <_ZN12Transmission5beginEP17TIM_HandleTypeDef+0x74>)
 8002000:	601a      	str	r2, [r3, #0]
	Radio.TXdoneCallback = &txCallback;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a11      	ldr	r2, [pc, #68]	; (800204c <_ZN12Transmission5beginEP17TIM_HandleTypeDef+0x78>)
 8002006:	605a      	str	r2, [r3, #4]

	if(Radio.Begin() == true){
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	0018      	movs	r0, r3
 800200c:	f7fe fc00 	bl	8000810 <_ZN12SX1280Driver5BeginEv>
 8002010:	0003      	movs	r3, r0
 8002012:	3b01      	subs	r3, #1
 8002014:	425a      	negs	r2, r3
 8002016:	4153      	adcs	r3, r2
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00b      	beq.n	8002036 <_ZN12Transmission5beginEP17TIM_HandleTypeDef+0x62>
		radioInitialized = true;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2280      	movs	r2, #128	; 0x80
 8002022:	2101      	movs	r1, #1
 8002024:	5499      	strb	r1, [r3, r2]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	0219      	lsls	r1, r3, #8
 800202a:	23a0      	movs	r3, #160	; 0xa0
 800202c:	05db      	lsls	r3, r3, #23
 800202e:	2201      	movs	r2, #1
 8002030:	0018      	movs	r0, r3
 8002032:	f002 fb80 	bl	8004736 <HAL_GPIO_WritePin>
	}



	return radioInitialized;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2280      	movs	r2, #128	; 0x80
 800203a:	5c9b      	ldrb	r3, [r3, r2]
}
 800203c:	0018      	movs	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	b002      	add	sp, #8
 8002042:	bd80      	pop	{r7, pc}
 8002044:	200000fc 	.word	0x200000fc
 8002048:	08001fa5 	.word	0x08001fa5
 800204c:	08001fbd 	.word	0x08001fbd

08002050 <_ZN12Transmission13setLinkPhraseEPKhm>:

void Transmission::setLinkPhrase(const uint8_t* linkPhrase, uint32_t length){
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
	// Reset the linkPhrase
	memset(Settings.linkPhrase, 0, 8);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	3350      	adds	r3, #80	; 0x50
 8002060:	2208      	movs	r2, #8
 8002062:	2100      	movs	r1, #0
 8002064:	0018      	movs	r0, r3
 8002066:	f006 fe68 	bl	8008d3a <memset>
	// Copy new linkPhrase
	memcpy(Settings.linkPhrase, linkPhrase, length);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	3350      	adds	r3, #80	; 0x50
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	68b9      	ldr	r1, [r7, #8]
 8002072:	0018      	movs	r0, r3
 8002074:	f006 fe58 	bl	8008d28 <memcpy>

	/* If the transmission was already enabled, restart it */
	if(Settings.transmissionEnabled){
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2258      	movs	r2, #88	; 0x58
 800207c:	5c9b      	ldrb	r3, [r3, r2]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <_ZN12Transmission13setLinkPhraseEPKhm+0x3a>
		resetTransmission();
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	0018      	movs	r0, r3
 8002086:	f7ff ff27 	bl	8001ed8 <_ZN12Transmission17resetTransmissionEv>
	}
}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	46bd      	mov	sp, r7
 800208e:	b004      	add	sp, #16
 8002090:	bd80      	pop	{r7, pc}

08002092 <_ZN12Transmission12setDirectionE24transmission_direction_e>:

void Transmission::setDirection(transmission_direction_e transmissionDirection){
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	000a      	movs	r2, r1
 800209c:	1cfb      	adds	r3, r7, #3
 800209e:	701a      	strb	r2, [r3, #0]
	if(Settings.transmissionDirection != transmissionDirection){
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	224c      	movs	r2, #76	; 0x4c
 80020a4:	5c9b      	ldrb	r3, [r3, r2]
 80020a6:	1cfa      	adds	r2, r7, #3
 80020a8:	7812      	ldrb	r2, [r2, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d00d      	beq.n	80020ca <_ZN12Transmission12setDirectionE24transmission_direction_e+0x38>
		Settings.transmissionDirection = transmissionDirection;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	1cfa      	adds	r2, r7, #3
 80020b2:	214c      	movs	r1, #76	; 0x4c
 80020b4:	7812      	ldrb	r2, [r2, #0]
 80020b6:	545a      	strb	r2, [r3, r1]
		if(Settings.transmissionEnabled){
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2258      	movs	r2, #88	; 0x58
 80020bc:	5c9b      	ldrb	r3, [r3, r2]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <_ZN12Transmission12setDirectionE24transmission_direction_e+0x38>
			resetTransmission();
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	0018      	movs	r0, r3
 80020c6:	f7ff ff07 	bl	8001ed8 <_ZN12Transmission17resetTransmissionEv>
		}
	}
}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	46bd      	mov	sp, r7
 80020ce:	b002      	add	sp, #8
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <_ZN12Transmission7setModeE19transmission_mode_e>:

void Transmission::setMode(transmission_mode_e transmissionMode){
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	000a      	movs	r2, r1
 80020dc:	1cfb      	adds	r3, r7, #3
 80020de:	701a      	strb	r2, [r3, #0]
	Settings.transmissionMode = transmissionMode;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	1cfa      	adds	r2, r7, #3
 80020e4:	214d      	movs	r1, #77	; 0x4d
 80020e6:	7812      	ldrb	r2, [r2, #0]
 80020e8:	545a      	strb	r2, [r3, r1]
}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b002      	add	sp, #8
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <_ZN12Transmission9setPAGainEa>:

void Transmission::setPAGain(int8_t gain){
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	000a      	movs	r2, r1
 80020fc:	1cfb      	adds	r3, r7, #3
 80020fe:	701a      	strb	r2, [r3, #0]
	Settings.paGain = gain;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	1cfa      	adds	r2, r7, #3
 8002104:	214e      	movs	r1, #78	; 0x4e
 8002106:	7812      	ldrb	r2, [r2, #0]
 8002108:	545a      	strb	r2, [r3, r1]

	if(Settings.transmissionEnabled){
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2258      	movs	r2, #88	; 0x58
 800210e:	5c9b      	ldrb	r3, [r3, r2]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00e      	beq.n	8002132 <_ZN12Transmission9setPAGainEa+0x40>
		Radio.SetOutputPower(Settings.powerLevel - Settings.paGain);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	224f      	movs	r2, #79	; 0x4f
 800211a:	569b      	ldrsb	r3, [r3, r2]
 800211c:	b2da      	uxtb	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	214e      	movs	r1, #78	; 0x4e
 8002122:	565b      	ldrsb	r3, [r3, r1]
 8002124:	b2db      	uxtb	r3, r3
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	b2db      	uxtb	r3, r3
 800212a:	b25b      	sxtb	r3, r3
 800212c:	0019      	movs	r1, r3
 800212e:	f7fe fcbb 	bl	8000aa8 <_ZN12SX1280Driver14SetOutputPowerEa>
	}
}
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	46bd      	mov	sp, r7
 8002136:	b002      	add	sp, #8
 8002138:	bd80      	pop	{r7, pc}

0800213a <_ZN12Transmission13setPowerLevelEa>:

void Transmission::setPowerLevel(int8_t gain){
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	000a      	movs	r2, r1
 8002144:	1cfb      	adds	r3, r7, #3
 8002146:	701a      	strb	r2, [r3, #0]
	Settings.powerLevel = gain;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	1cfa      	adds	r2, r7, #3
 800214c:	214f      	movs	r1, #79	; 0x4f
 800214e:	7812      	ldrb	r2, [r2, #0]
 8002150:	545a      	strb	r2, [r3, r1]
}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	46bd      	mov	sp, r7
 8002156:	b002      	add	sp, #8
 8002158:	bd80      	pop	{r7, pc}

0800215a <_ZN12Transmission10writeBytesEPKhm>:

void Transmission::writeBytes(const uint8_t* data, uint32_t length){
 800215a:	b580      	push	{r7, lr}
 800215c:	b084      	sub	sp, #16
 800215e:	af00      	add	r7, sp, #0
 8002160:	60f8      	str	r0, [r7, #12]
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
	if(length > payloadLength) return;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	228c      	movs	r2, #140	; 0x8c
 800216a:	589b      	ldr	r3, [r3, r2]
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	429a      	cmp	r2, r3
 8002170:	d80f      	bhi.n	8002192 <_ZN12Transmission10writeBytesEPKhm+0x38>
	memcpy(txData, data, length);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	3390      	adds	r3, #144	; 0x90
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	0018      	movs	r0, r3
 800217c:	f006 fdd4 	bl	8008d28 <memcpy>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	021a      	lsls	r2, r3, #8
 8002184:	23a0      	movs	r3, #160	; 0xa0
 8002186:	05db      	lsls	r3, r3, #23
 8002188:	0011      	movs	r1, r2
 800218a:	0018      	movs	r0, r3
 800218c:	f002 faf0 	bl	8004770 <HAL_GPIO_TogglePin>
 8002190:	e000      	b.n	8002194 <_ZN12Transmission10writeBytesEPKhm+0x3a>
	if(length > payloadLength) return;
 8002192:	46c0      	nop			; (mov r8, r8)
}
 8002194:	46bd      	mov	sp, r7
 8002196:	b004      	add	sp, #16
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <_ZN12Transmission18enableTransmissionEv>:
	return false;
}



void Transmission::enableTransmission(){
 800219c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800219e:	46ce      	mov	lr, r9
 80021a0:	4647      	mov	r7, r8
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b08d      	sub	sp, #52	; 0x34
 80021a6:	af08      	add	r7, sp, #32
 80021a8:	6078      	str	r0, [r7, #4]

	if(radioInitialized == false)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2280      	movs	r2, #128	; 0x80
 80021ae:	5c9b      	ldrb	r3, [r3, r2]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d100      	bne.n	80021b6 <_ZN12Transmission18enableTransmissionEv+0x1a>
 80021b4:	e0b6      	b.n	8002324 <_ZN12Transmission18enableTransmissionEv+0x188>
		return;

	if(Settings.transmissionEnabled)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2258      	movs	r2, #88	; 0x58
 80021ba:	5c9b      	ldrb	r3, [r3, r2]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d000      	beq.n	80021c2 <_ZN12Transmission18enableTransmissionEv+0x26>
 80021c0:	e0b2      	b.n	8002328 <_ZN12Transmission18enableTransmissionEv+0x18c>
		return;

	Settings.transmissionEnabled = true;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2258      	movs	r2, #88	; 0x58
 80021c6:	2101      	movs	r1, #1
 80021c8:	5499      	strb	r1, [r3, r2]

	linkCRC = crc32(Settings.linkPhrase, 8);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3350      	adds	r3, #80	; 0x50
 80021ce:	2108      	movs	r1, #8
 80021d0:	0018      	movs	r0, r3
 80021d2:	f7fe fa89 	bl	80006e8 <_Z5crc32PKhj>
 80021d6:	0002      	movs	r2, r0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2184      	movs	r1, #132	; 0x84
 80021dc:	505a      	str	r2, [r3, r1]
	linkXOR = linkCRC & 0xFF;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2284      	movs	r2, #132	; 0x84
 80021e2:	589b      	ldr	r3, [r3, r2]
 80021e4:	b2d9      	uxtb	r1, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2283      	movs	r2, #131	; 0x83
 80021ea:	5499      	strb	r1, [r3, r2]

	FHSSrandomiseFHSSsequence(linkCRC);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2284      	movs	r2, #132	; 0x84
 80021f0:	589b      	ldr	r3, [r3, r2]
 80021f2:	0018      	movs	r0, r3
 80021f4:	f7fe fa3e 	bl	8000674 <_Z25FHSSrandomiseFHSSsequencem>

	Radio.SetOutputPower(Settings.powerLevel - Settings.paGain);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	224f      	movs	r2, #79	; 0x4f
 80021fe:	569b      	ldrsb	r3, [r3, r2]
 8002200:	b2da      	uxtb	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	214e      	movs	r1, #78	; 0x4e
 8002206:	565b      	ldrsb	r3, [r3, r1]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	b25b      	sxtb	r3, r3
 8002210:	0019      	movs	r1, r3
 8002212:	f7fe fc49 	bl	8000aa8 <_ZN12SX1280Driver14SetOutputPowerEa>

	HAL_Delay(10);
 8002216:	200a      	movs	r0, #10
 8002218:	f001 fa8a 	bl	8003730 <HAL_Delay>

	/* Get the modulation settings */
	modulation_settings_s *const modParams = &Settings.modulationConfig[Settings.modeIndex];
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002220:	0013      	movs	r3, r2
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	189b      	adds	r3, r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	3358      	adds	r3, #88	; 0x58
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	18d3      	adds	r3, r2, r3
 800222e:	3308      	adds	r3, #8
 8002230:	60fb      	str	r3, [r7, #12]

	if(Settings.transmissionDirection == TX){
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	224c      	movs	r2, #76	; 0x4c
 8002236:	5c9b      	ldrb	r3, [r3, r2]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d12a      	bne.n	8002292 <_ZN12Transmission18enableTransmissionEv+0xf6>
		Radio.Config(modParams->bw, modParams->sf, modParams->cr, GetInitialFreq(),
 800223c:	687c      	ldr	r4, [r7, #4]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	781d      	ldrb	r5, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	785e      	ldrb	r6, [r3, #1]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	789b      	ldrb	r3, [r3, #2]
 800224a:	4698      	mov	r8, r3
 800224c:	f7ff fe58 	bl	8001f00 <_ZL14GetInitialFreqv>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	7a1a      	ldrb	r2, [r3, #8]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	7a59      	ldrb	r1, [r3, #9]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	4699      	mov	r9, r3
 800225e:	2300      	movs	r3, #0
 8002260:	469c      	mov	ip, r3
 8002262:	4663      	mov	r3, ip
 8002264:	9307      	str	r3, [sp, #28]
 8002266:	2300      	movs	r3, #0
 8002268:	469c      	mov	ip, r3
 800226a:	4663      	mov	r3, ip
 800226c:	9306      	str	r3, [sp, #24]
 800226e:	2300      	movs	r3, #0
 8002270:	469c      	mov	ip, r3
 8002272:	4663      	mov	r3, ip
 8002274:	9305      	str	r3, [sp, #20]
 8002276:	464b      	mov	r3, r9
 8002278:	9304      	str	r3, [sp, #16]
 800227a:	9103      	str	r1, [sp, #12]
 800227c:	2300      	movs	r3, #0
 800227e:	9302      	str	r3, [sp, #8]
 8002280:	9201      	str	r2, [sp, #4]
 8002282:	9000      	str	r0, [sp, #0]
 8002284:	4643      	mov	r3, r8
 8002286:	0032      	movs	r2, r6
 8002288:	0029      	movs	r1, r5
 800228a:	0020      	movs	r0, r4
 800228c:	f7fe fb50 	bl	8000930 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth>
 8002290:	e021      	b.n	80022d6 <_ZN12Transmission18enableTransmissionEv+0x13a>
						modParams->PreambleLen, 0, modParams->PayloadLength, modParams->interval);
	} else {
		Radio.Config(modParams->bw, modParams->sf, modParams->cr, GetInitialFreq(),
 8002292:	687c      	ldr	r4, [r7, #4]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	781d      	ldrb	r5, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	785e      	ldrb	r6, [r3, #1]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	789b      	ldrb	r3, [r3, #2]
 80022a0:	4698      	mov	r8, r3
 80022a2:	f7ff fe2d 	bl	8001f00 <_ZL14GetInitialFreqv>
 80022a6:	0001      	movs	r1, r0
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	7a1b      	ldrb	r3, [r3, #8]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	7a52      	ldrb	r2, [r2, #9]
 80022b0:	2000      	movs	r0, #0
 80022b2:	9007      	str	r0, [sp, #28]
 80022b4:	2000      	movs	r0, #0
 80022b6:	9006      	str	r0, [sp, #24]
 80022b8:	2000      	movs	r0, #0
 80022ba:	9005      	str	r0, [sp, #20]
 80022bc:	2000      	movs	r0, #0
 80022be:	9004      	str	r0, [sp, #16]
 80022c0:	9203      	str	r2, [sp, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	9202      	str	r2, [sp, #8]
 80022c6:	9301      	str	r3, [sp, #4]
 80022c8:	9100      	str	r1, [sp, #0]
 80022ca:	4643      	mov	r3, r8
 80022cc:	0032      	movs	r2, r6
 80022ce:	0029      	movs	r1, r5
 80022d0:	0020      	movs	r0, r4
 80022d2:	f7fe fb2d 	bl	8000930 <_ZN12SX1280Driver6ConfigEhhhmhbhmmth>
						modParams->PreambleLen, 0, modParams->PayloadLength, 0);
	}

	payloadLength = modParams->PayloadLength;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	7a5b      	ldrb	r3, [r3, #9]
 80022da:	0019      	movs	r1, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	228c      	movs	r2, #140	; 0x8c
 80022e0:	5099      	str	r1, [r3, r2]

	HAL_Delay(10);
 80022e2:	200a      	movs	r0, #10
 80022e4:	f001 fa24 	bl	8003730 <HAL_Delay>

	if(Settings.transmissionDirection == TX){
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	224c      	movs	r2, #76	; 0x4c
 80022ec:	5c9b      	ldrb	r3, [r3, r2]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10a      	bne.n	8002308 <_ZN12Transmission18enableTransmissionEv+0x16c>
		TIM2->ARR = 1000;
 80022f2:	2380      	movs	r3, #128	; 0x80
 80022f4:	05db      	lsls	r3, r3, #23
 80022f6:	22fa      	movs	r2, #250	; 0xfa
 80022f8:	0092      	lsls	r2, r2, #2
 80022fa:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_Base_Start_IT(timer);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002300:	0018      	movs	r0, r3
 8002302:	f004 f81f 	bl	8006344 <HAL_TIM_Base_Start_IT>
 8002306:	e010      	b.n	800232a <_ZN12Transmission18enableTransmissionEv+0x18e>
	} else {
		TIM2->ARR = 1005;
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	05db      	lsls	r3, r3, #23
 800230c:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <_ZN12Transmission18enableTransmissionEv+0x19c>)
 800230e:	62da      	str	r2, [r3, #44]	; 0x2c
		Radio.RXnb();
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	0018      	movs	r0, r3
 8002314:	f7fe ff32 	bl	800117c <_ZN12SX1280Driver4RXnbEv>
		HAL_TIM_Base_Start_IT(timer);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800231c:	0018      	movs	r0, r3
 800231e:	f004 f811 	bl	8006344 <HAL_TIM_Base_Start_IT>
 8002322:	e002      	b.n	800232a <_ZN12Transmission18enableTransmissionEv+0x18e>
		return;
 8002324:	46c0      	nop			; (mov r8, r8)
 8002326:	e000      	b.n	800232a <_ZN12Transmission18enableTransmissionEv+0x18e>
		return;
 8002328:	46c0      	nop			; (mov r8, r8)
	}
}
 800232a:	46bd      	mov	sp, r7
 800232c:	b005      	add	sp, #20
 800232e:	bcc0      	pop	{r6, r7}
 8002330:	46b9      	mov	r9, r7
 8002332:	46b0      	mov	r8, r6
 8002334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	000003ed 	.word	0x000003ed

0800233c <_ZN12Transmission19disableTransmissionEv>:

void Transmission::disableTransmission(){
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
	/* Wait until done transmitting / receiving*/
	while(busyTransmitting);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2282      	movs	r2, #130	; 0x82
 8002348:	5c9b      	ldrb	r3, [r3, r2]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d000      	beq.n	8002352 <_ZN12Transmission19disableTransmissionEv+0x16>
 8002350:	e7f8      	b.n	8002344 <_ZN12Transmission19disableTransmissionEv+0x8>

	if (!Settings.transmissionEnabled)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2258      	movs	r2, #88	; 0x58
 8002356:	5c9b      	ldrb	r3, [r3, r2]
 8002358:	2201      	movs	r2, #1
 800235a:	4053      	eors	r3, r2
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d122      	bne.n	80023a8 <_ZN12Transmission19disableTransmissionEv+0x6c>
		return;

	Settings.transmissionEnabled = false;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2258      	movs	r2, #88	; 0x58
 8002366:	2100      	movs	r1, #0
 8002368:	5499      	strb	r1, [r3, r2]

	/* Disable Timer */
	HAL_TIM_Base_Stop_IT(timer);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800236e:	0018      	movs	r0, r3
 8002370:	f004 f844 	bl	80063fc <HAL_TIM_Base_Stop_IT>
	TIM2->CNT = 0;
 8002374:	2380      	movs	r3, #128	; 0x80
 8002376:	05db      	lsls	r3, r3, #23
 8002378:	2200      	movs	r2, #0
 800237a:	625a      	str	r2, [r3, #36]	; 0x24

	/* Put Radio in Idle Mode */
	Radio.SetIdleMode();
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	0018      	movs	r0, r3
 8002380:	f7ff fd9d 	bl	8001ebe <_ZN12SX1280Driver11SetIdleModeEv>

	LQCalc.reset();
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3340      	adds	r3, #64	; 0x40
 8002388:	0018      	movs	r0, r3
 800238a:	f000 f96f 	bl	800266c <_ZN6LQCALCILh30EE5resetEv>
	connectionState = disconnected;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2281      	movs	r2, #129	; 0x81
 8002392:	2102      	movs	r1, #2
 8002394:	5499      	strb	r1, [r3, r2]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002396:	2380      	movs	r3, #128	; 0x80
 8002398:	0219      	lsls	r1, r3, #8
 800239a:	23a0      	movs	r3, #160	; 0xa0
 800239c:	05db      	lsls	r3, r3, #23
 800239e:	2201      	movs	r2, #1
 80023a0:	0018      	movs	r0, r3
 80023a2:	f002 f9c8 	bl	8004736 <HAL_GPIO_WritePin>
 80023a6:	e000      	b.n	80023aa <_ZN12Transmission19disableTransmissionEv+0x6e>
		return;
 80023a8:	46c0      	nop			; (mov r8, r8)
}
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b002      	add	sp, #8
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <_ZN12Transmission15processRFPacketEv>:

void Transmission::processRFPacket(){
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
	LQCalc.inc();
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3340      	adds	r3, #64	; 0x40
 80023bc:	0018      	movs	r0, r3
 80023be:	f000 f97c 	bl	80026ba <_ZN6LQCALCILh30EE3incEv>

	uint8_t crc = (uint8_t)crc32((const uint8_t*)Radio.RXdataBuffer, payloadLength-1);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	331c      	adds	r3, #28
 80023c6:	001a      	movs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	218c      	movs	r1, #140	; 0x8c
 80023cc:	585b      	ldr	r3, [r3, r1]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	0019      	movs	r1, r3
 80023d2:	0010      	movs	r0, r2
 80023d4:	f7fe f988 	bl	80006e8 <_Z5crc32PKhj>
 80023d8:	0002      	movs	r2, r0
 80023da:	210f      	movs	r1, #15
 80023dc:	187b      	adds	r3, r7, r1
 80023de:	701a      	strb	r2, [r3, #0]

	if ((linkXOR ^ crc) == Radio.RXdataBuffer[payloadLength-1]){
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2283      	movs	r2, #131	; 0x83
 80023e4:	5c9a      	ldrb	r2, [r3, r2]
 80023e6:	187b      	adds	r3, r7, r1
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	4053      	eors	r3, r2
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	218c      	movs	r1, #140	; 0x8c
 80023f2:	585b      	ldr	r3, [r3, r1]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	18cb      	adds	r3, r1, r3
 80023fa:	7f1b      	ldrb	r3, [r3, #28]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	425a      	negs	r2, r3
 8002402:	4153      	adcs	r3, r2
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d01b      	beq.n	8002442 <_ZN12Transmission15processRFPacketEv+0x92>
		connectionState = connected;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2281      	movs	r2, #129	; 0x81
 800240e:	2100      	movs	r1, #0
 8002410:	5499      	strb	r1, [r3, r2]
		dataAvailable = true;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2288      	movs	r2, #136	; 0x88
 8002416:	2101      	movs	r1, #1
 8002418:	5499      	strb	r1, [r3, r2]
		timeout = 0;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	67da      	str	r2, [r3, #124]	; 0x7c

		memcpy(rxData, (const uint8_t*)Radio.RXdataBuffer, payloadLength);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	33a4      	adds	r3, #164	; 0xa4
 8002424:	0018      	movs	r0, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	331c      	adds	r3, #28
 800242a:	0019      	movs	r1, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	228c      	movs	r2, #140	; 0x8c
 8002430:	589b      	ldr	r3, [r3, r2]
 8002432:	001a      	movs	r2, r3
 8002434:	f006 fc78 	bl	8008d28 <memcpy>

		LQCalc.add();
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3340      	adds	r3, #64	; 0x40
 800243c:	0018      	movs	r0, r3
 800243e:	f000 f994 	bl	800276a <_ZN6LQCALCILh30EE3addEv>
	}

}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	46bd      	mov	sp, r7
 8002446:	b004      	add	sp, #16
 8002448:	bd80      	pop	{r7, pc}

0800244a <_ZN12Transmission9rxDoneISREv>:

void Transmission::rxDoneISR(){
 800244a:	b590      	push	{r4, r7, lr}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
	busyTransmitting = false;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2282      	movs	r2, #130	; 0x82
 8002456:	2100      	movs	r1, #0
 8002458:	5499      	strb	r1, [r3, r2]

	/* Reset the timer */
	HAL_TIM_Base_Stop_IT(timer);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800245e:	0018      	movs	r0, r3
 8002460:	f003 ffcc 	bl	80063fc <HAL_TIM_Base_Stop_IT>
	TIM2->CNT = 0;
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	05db      	lsls	r3, r3, #23
 8002468:	2200      	movs	r2, #0
 800246a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(timer);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002470:	0018      	movs	r0, r3
 8002472:	f003 ff67 	bl	8006344 <HAL_TIM_Base_Start_IT>

	processRFPacket();
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	0018      	movs	r0, r3
 800247a:	f7ff ff99 	bl	80023b0 <_ZN12Transmission15processRFPacketEv>

	if(connectionState == connected){
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2281      	movs	r2, #129	; 0x81
 8002482:	5c9b      	ldrb	r3, [r3, r2]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d107      	bne.n	8002498 <_ZN12Transmission9rxDoneISREv+0x4e>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002488:	2380      	movs	r3, #128	; 0x80
 800248a:	021a      	lsls	r2, r3, #8
 800248c:	23a0      	movs	r3, #160	; 0xa0
 800248e:	05db      	lsls	r3, r3, #23
 8002490:	0011      	movs	r1, r2
 8002492:	0018      	movs	r0, r3
 8002494:	f002 f96c 	bl	8004770 <HAL_GPIO_TogglePin>
	}

	Radio.SetFrequencyReg(FHSSgetNextFreq());
 8002498:	687c      	ldr	r4, [r7, #4]
 800249a:	f7ff fd59 	bl	8001f50 <_ZL15FHSSgetNextFreqv>
 800249e:	0003      	movs	r3, r0
 80024a0:	0019      	movs	r1, r3
 80024a2:	0020      	movs	r0, r4
 80024a4:	f7fe fcfc 	bl	8000ea0 <_ZN12SX1280Driver15SetFrequencyRegEm>

	Radio.RXnb();
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	0018      	movs	r0, r3
 80024ac:	f7fe fe66 	bl	800117c <_ZN12SX1280Driver4RXnbEv>
}
 80024b0:	46c0      	nop			; (mov r8, r8)
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b003      	add	sp, #12
 80024b6:	bd90      	pop	{r4, r7, pc}

080024b8 <_ZN12Transmission9txDoneISREv>:

void Transmission::txDoneISR(){
 80024b8:	b590      	push	{r4, r7, lr}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
	busyTransmitting = false;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2282      	movs	r2, #130	; 0x82
 80024c4:	2100      	movs	r1, #0
 80024c6:	5499      	strb	r1, [r3, r2]

	Radio.SetFrequencyReg(FHSSgetNextFreq());
 80024c8:	687c      	ldr	r4, [r7, #4]
 80024ca:	f7ff fd41 	bl	8001f50 <_ZL15FHSSgetNextFreqv>
 80024ce:	0003      	movs	r3, r0
 80024d0:	0019      	movs	r1, r3
 80024d2:	0020      	movs	r0, r4
 80024d4:	f7fe fce4 	bl	8000ea0 <_ZN12SX1280Driver15SetFrequencyRegEm>
}
 80024d8:	46c0      	nop			; (mov r8, r8)
 80024da:	46bd      	mov	sp, r7
 80024dc:	b003      	add	sp, #12
 80024de:	bd90      	pop	{r4, r7, pc}

080024e0 <_ZN12Transmission9rxTimeoutEv>:

void Transmission::rxTimeout(){
 80024e0:	b590      	push	{r4, r7, lr}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

	if(timeout == 50){
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024ec:	2b32      	cmp	r3, #50	; 0x32
 80024ee:	d11b      	bne.n	8002528 <_ZN12Transmission9rxTimeoutEv+0x48>
		LQCalc.reset();
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3340      	adds	r3, #64	; 0x40
 80024f4:	0018      	movs	r0, r3
 80024f6:	f000 f8b9 	bl	800266c <_ZN6LQCALCILh30EE5resetEv>
		connectionState = disconnected;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2281      	movs	r2, #129	; 0x81
 80024fe:	2102      	movs	r1, #2
 8002500:	5499      	strb	r1, [r3, r2]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002502:	2380      	movs	r3, #128	; 0x80
 8002504:	0219      	lsls	r1, r3, #8
 8002506:	23a0      	movs	r3, #160	; 0xa0
 8002508:	05db      	lsls	r3, r3, #23
 800250a:	2201      	movs	r2, #1
 800250c:	0018      	movs	r0, r3
 800250e:	f002 f912 	bl	8004736 <HAL_GPIO_WritePin>
		FHSSsetCurrIndex(0);
 8002512:	2000      	movs	r0, #0
 8002514:	f7ff fd02 	bl	8001f1c <_ZL16FHSSsetCurrIndexh>
		Radio.SetFrequencyReg(GetInitialFreq());
 8002518:	687c      	ldr	r4, [r7, #4]
 800251a:	f7ff fcf1 	bl	8001f00 <_ZL14GetInitialFreqv>
 800251e:	0003      	movs	r3, r0
 8002520:	0019      	movs	r1, r3
 8002522:	0020      	movs	r0, r4
 8002524:	f7fe fcbc 	bl	8000ea0 <_ZN12SX1280Driver15SetFrequencyRegEm>
	}

	if(connectionState == connected){
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2281      	movs	r2, #129	; 0x81
 800252c:	5c9b      	ldrb	r3, [r3, r2]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10d      	bne.n	800254e <_ZN12Transmission9rxTimeoutEv+0x6e>
	  LQCalc.inc();
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3340      	adds	r3, #64	; 0x40
 8002536:	0018      	movs	r0, r3
 8002538:	f000 f8bf 	bl	80026ba <_ZN6LQCALCILh30EE3incEv>
	  Radio.SetFrequencyReg(FHSSgetNextFreq());
 800253c:	687c      	ldr	r4, [r7, #4]
 800253e:	f7ff fd07 	bl	8001f50 <_ZL15FHSSgetNextFreqv>
 8002542:	0003      	movs	r3, r0
 8002544:	0019      	movs	r1, r3
 8002546:	0020      	movs	r0, r4
 8002548:	f7fe fcaa 	bl	8000ea0 <_ZN12SX1280Driver15SetFrequencyRegEm>
 800254c:	e00e      	b.n	800256c <_ZN12Transmission9rxTimeoutEv+0x8c>
	} else {
	  if(timeout > 5){
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002552:	2b05      	cmp	r3, #5
 8002554:	d90a      	bls.n	800256c <_ZN12Transmission9rxTimeoutEv+0x8c>
		  timeout = 0;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	67da      	str	r2, [r3, #124]	; 0x7c
		  Radio.SetFrequencyReg(FHSSgetNextFreq());
 800255c:	687c      	ldr	r4, [r7, #4]
 800255e:	f7ff fcf7 	bl	8001f50 <_ZL15FHSSgetNextFreqv>
 8002562:	0003      	movs	r3, r0
 8002564:	0019      	movs	r1, r3
 8002566:	0020      	movs	r0, r4
 8002568:	f7fe fc9a 	bl	8000ea0 <_ZN12SX1280Driver15SetFrequencyRegEm>
	  }
	}

	timeout++;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	46bd      	mov	sp, r7
 800257a:	b003      	add	sp, #12
 800257c:	bd90      	pop	{r4, r7, pc}

0800257e <_ZN12Transmission10txTransmitEv>:


void Transmission::txTransmit(){
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
	/* Add payload to tx buffer */
	for(uint32_t i = 0; i < payloadLength-1; i++){
 8002586:	2300      	movs	r3, #0
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	228c      	movs	r2, #140	; 0x8c
 800258e:	589b      	ldr	r3, [r3, r2]
 8002590:	3b01      	subs	r3, #1
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	429a      	cmp	r2, r3
 8002596:	d20f      	bcs.n	80025b8 <_ZN12Transmission10txTransmitEv+0x3a>
		Radio.TXdataBuffer[i] = txData[i];
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	2190      	movs	r1, #144	; 0x90
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	18d3      	adds	r3, r2, r3
 80025a0:	185b      	adds	r3, r3, r1
 80025a2:	7819      	ldrb	r1, [r3, #0]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	18d3      	adds	r3, r2, r3
 80025aa:	3308      	adds	r3, #8
 80025ac:	1c0a      	adds	r2, r1, #0
 80025ae:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < payloadLength-1; i++){
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	3301      	adds	r3, #1
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	e7e8      	b.n	800258a <_ZN12Transmission10txTransmitEv+0xc>
	}

	/* Calculate CRC and store in last position */
	uint8_t crc = (uint8_t)crc32((const uint8_t*)txData, payloadLength-1);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3390      	adds	r3, #144	; 0x90
 80025bc:	001a      	movs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	218c      	movs	r1, #140	; 0x8c
 80025c2:	585b      	ldr	r3, [r3, r1]
 80025c4:	3b01      	subs	r3, #1
 80025c6:	0019      	movs	r1, r3
 80025c8:	0010      	movs	r0, r2
 80025ca:	f7fe f88d 	bl	80006e8 <_Z5crc32PKhj>
 80025ce:	0002      	movs	r2, r0
 80025d0:	200b      	movs	r0, #11
 80025d2:	183b      	adds	r3, r7, r0
 80025d4:	701a      	strb	r2, [r3, #0]
	Radio.TXdataBuffer[payloadLength-1] = linkXOR  ^ crc;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2283      	movs	r2, #131	; 0x83
 80025da:	5c99      	ldrb	r1, [r3, r2]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	228c      	movs	r2, #140	; 0x8c
 80025e0:	589b      	ldr	r3, [r3, r2]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	183a      	adds	r2, r7, r0
 80025e6:	7812      	ldrb	r2, [r2, #0]
 80025e8:	404a      	eors	r2, r1
 80025ea:	b2d1      	uxtb	r1, r2
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	18d3      	adds	r3, r2, r3
 80025f0:	1c0a      	adds	r2, r1, #0
 80025f2:	721a      	strb	r2, [r3, #8]

	/* Transmit message */
	if(!busyTransmitting) Radio.TXnb();
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2282      	movs	r2, #130	; 0x82
 80025f8:	5c9b      	ldrb	r3, [r3, r2]
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2201      	movs	r2, #1
 80025fe:	4053      	eors	r3, r2
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <_ZN12Transmission10txTransmitEv+0x90>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	0018      	movs	r0, r3
 800260a:	f7fe fd3d 	bl	8001088 <_ZN12SX1280Driver4TXnbEv>
}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	46bd      	mov	sp, r7
 8002612:	b004      	add	sp, #16
 8002614:	bd80      	pop	{r7, pc}

08002616 <_ZN12Transmission12getDirectionEv>:

transmission_direction_e Transmission::getDirection(){
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
	return Settings.transmissionDirection;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	224c      	movs	r2, #76	; 0x4c
 8002622:	5c9b      	ldrb	r3, [r3, r2]
}
 8002624:	0018      	movs	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	b002      	add	sp, #8
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
	if(pTransmission->getDirection() == TX){
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	0018      	movs	r0, r3
 800263a:	f7ff ffec 	bl	8002616 <_ZN12Transmission12getDirectionEv>
 800263e:	0003      	movs	r3, r0
 8002640:	425a      	negs	r2, r3
 8002642:	4153      	adcs	r3, r2
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <HAL_TIM_PeriodElapsedCallback+0x2a>
		pTransmission->txTransmit();
 800264a:	4b07      	ldr	r3, [pc, #28]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	0018      	movs	r0, r3
 8002650:	f7ff ff95 	bl	800257e <_ZN12Transmission10txTransmitEv>
	} else {
		pTransmission->rxTimeout();
	}

}
 8002654:	e004      	b.n	8002660 <HAL_TIM_PeriodElapsedCallback+0x34>
		pTransmission->rxTimeout();
 8002656:	4b04      	ldr	r3, [pc, #16]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	0018      	movs	r0, r3
 800265c:	f7ff ff40 	bl	80024e0 <_ZN12Transmission9rxTimeoutEv>
}
 8002660:	46c0      	nop			; (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	b002      	add	sp, #8
 8002666:	bd80      	pop	{r7, pc}
 8002668:	200000fc 	.word	0x200000fc

0800266c <_ZN6LQCALCILh30EE5resetEv>:
    {
        return N;
    }

    /* Initialize and zero the history */
    void reset()
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
    {
        // count is intentonally not zeroed here to start LQ counting up from 0
        // after a failsafe, instead of down from 100
        LQ = 0;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
        index = 0;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	705a      	strb	r2, [r3, #1]
        LQmask = (1 << 0);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	605a      	str	r2, [r3, #4]
        for (uint8_t i = 0; i < (sizeof(LQArray)/sizeof(LQArray[0])); i++)
 8002686:	230f      	movs	r3, #15
 8002688:	18fb      	adds	r3, r7, r3
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]
 800268e:	200f      	movs	r0, #15
 8002690:	183b      	adds	r3, r7, r0
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10c      	bne.n	80026b2 <_ZN6LQCALCILh30EE5resetEv+0x46>
            LQArray[i] = 0;
 8002698:	183b      	adds	r3, r7, r0
 800269a:	781a      	ldrb	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3202      	adds	r2, #2
 80026a0:	0092      	lsls	r2, r2, #2
 80026a2:	2100      	movs	r1, #0
 80026a4:	50d1      	str	r1, [r2, r3]
        for (uint8_t i = 0; i < (sizeof(LQArray)/sizeof(LQArray[0])); i++)
 80026a6:	183b      	adds	r3, r7, r0
 80026a8:	781a      	ldrb	r2, [r3, #0]
 80026aa:	183b      	adds	r3, r7, r0
 80026ac:	3201      	adds	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
 80026b0:	e7ed      	b.n	800268e <_ZN6LQCALCILh30EE5resetEv+0x22>
    }
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b004      	add	sp, #16
 80026b8:	bd80      	pop	{r7, pc}

080026ba <_ZN6LQCALCILh30EE3incEv>:
    void inc()
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
        LQmask = LQmask << 1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	005a      	lsls	r2, r3, #1
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	605a      	str	r2, [r3, #4]
        if (LQmask == 0)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d108      	bne.n	80026e6 <_ZN6LQCALCILh30EE3incEv+0x2c>
            LQmask = (1 << 0);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	605a      	str	r2, [r3, #4]
            index += 1;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	785b      	ldrb	r3, [r3, #1]
 80026de:	3301      	adds	r3, #1
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	705a      	strb	r2, [r3, #1]
        if ((index == (N / 32)) && (LQmask & (1 << (N % 32))))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	785b      	ldrb	r3, [r3, #1]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10b      	bne.n	8002706 <_ZN6LQCALCILh30EE3incEv+0x4c>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	2380      	movs	r3, #128	; 0x80
 80026f4:	05db      	lsls	r3, r3, #23
 80026f6:	4013      	ands	r3, r2
 80026f8:	d005      	beq.n	8002706 <_ZN6LQCALCILh30EE3incEv+0x4c>
            index = 0;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	705a      	strb	r2, [r3, #1]
            LQmask = (1 << 0);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	605a      	str	r2, [r3, #4]
        if ((LQArray[index] & LQmask) != 0)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	785b      	ldrb	r3, [r3, #1]
 800270a:	001a      	movs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3202      	adds	r2, #2
 8002710:	0092      	lsls	r2, r2, #2
 8002712:	58d2      	ldr	r2, [r2, r3]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	4013      	ands	r3, r2
 800271a:	d018      	beq.n	800274e <_ZN6LQCALCILh30EE3incEv+0x94>
            LQArray[index] &= ~LQmask;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	785b      	ldrb	r3, [r3, #1]
 8002720:	001a      	movs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3202      	adds	r2, #2
 8002726:	0092      	lsls	r2, r2, #2
 8002728:	58d2      	ldr	r2, [r2, r3]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	43db      	mvns	r3, r3
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	7849      	ldrb	r1, [r1, #1]
 8002734:	0008      	movs	r0, r1
 8002736:	4013      	ands	r3, r2
 8002738:	0019      	movs	r1, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	1c82      	adds	r2, r0, #2
 800273e:	0092      	lsls	r2, r2, #2
 8002740:	50d1      	str	r1, [r2, r3]
            LQ -= 1;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	3b01      	subs	r3, #1
 8002748:	b2da      	uxtb	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	701a      	strb	r2, [r3, #0]
        if (count < N)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	789b      	ldrb	r3, [r3, #2]
 8002752:	2b1d      	cmp	r3, #29
 8002754:	d805      	bhi.n	8002762 <_ZN6LQCALCILh30EE3incEv+0xa8>
          ++count;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	789b      	ldrb	r3, [r3, #2]
 800275a:	3301      	adds	r3, #1
 800275c:	b2da      	uxtb	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	709a      	strb	r2, [r3, #2]
    }
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	46bd      	mov	sp, r7
 8002766:	b002      	add	sp, #8
 8002768:	bd80      	pop	{r7, pc}

0800276a <_ZN6LQCALCILh30EE3addEv>:
    void add()
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
        if (currentIsSet())
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	0018      	movs	r0, r3
 8002776:	f000 f81f 	bl	80027b8 <_ZNK6LQCALCILh30EE12currentIsSetEv>
 800277a:	1e03      	subs	r3, r0, #0
 800277c:	d118      	bne.n	80027b0 <_ZN6LQCALCILh30EE3addEv+0x46>
        LQArray[index] |= LQmask;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	785b      	ldrb	r3, [r3, #1]
 8002782:	001a      	movs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3202      	adds	r2, #2
 8002788:	0092      	lsls	r2, r2, #2
 800278a:	58d2      	ldr	r2, [r2, r3]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	7849      	ldrb	r1, [r1, #1]
 8002794:	0008      	movs	r0, r1
 8002796:	431a      	orrs	r2, r3
 8002798:	0011      	movs	r1, r2
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	1c82      	adds	r2, r0, #2
 800279e:	0092      	lsls	r2, r2, #2
 80027a0:	50d1      	str	r1, [r2, r3]
        LQ += 1;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	3301      	adds	r3, #1
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	701a      	strb	r2, [r3, #0]
 80027ae:	e000      	b.n	80027b2 <_ZN6LQCALCILh30EE3addEv+0x48>
            return;
 80027b0:	46c0      	nop			; (mov r8, r8)
    }
 80027b2:	46bd      	mov	sp, r7
 80027b4:	b002      	add	sp, #8
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <_ZNK6LQCALCILh30EE12currentIsSetEv>:

    /*  Return true if the current period was add()ed */
    bool currentIsSet() const
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
    {
        return LQArray[index] & LQmask;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	785b      	ldrb	r3, [r3, #1]
 80027c4:	001a      	movs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3202      	adds	r2, #2
 80027ca:	0092      	lsls	r2, r2, #2
 80027cc:	58d2      	ldr	r2, [r2, r3]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	4013      	ands	r3, r2
 80027d4:	1e5a      	subs	r2, r3, #1
 80027d6:	4193      	sbcs	r3, r2
 80027d8:	b2db      	uxtb	r3, r3
    }
 80027da:	0018      	movs	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	b002      	add	sp, #8
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <_ZN20TransmissionSettingsC1Ev>:

#include <cstdint>
#include "telemetry_reg.h"
#include "SX1280Driver/SX1280_Regs.h"

class TransmissionSettings {
 80027e4:	b590      	push	{r4, r7, lr}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	701a      	strb	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	705a      	strb	r2, [r3, #1]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2222      	movs	r2, #34	; 0x22
 80027fc:	709a      	strb	r2, [r3, #2]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2214      	movs	r2, #20
 8002802:	70da      	strb	r2, [r3, #3]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	731a      	strb	r2, [r3, #12]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	611a      	str	r2, [r3, #16]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a05      	ldr	r2, [pc, #20]	; (8002828 <_ZN20TransmissionSettingsC1Ev+0x44>)
 8002814:	3314      	adds	r3, #20
 8002816:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002818:	c313      	stmia	r3!, {r0, r1, r4}
 800281a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800281c:	c313      	stmia	r3!, {r0, r1, r4}
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	0018      	movs	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	b003      	add	sp, #12
 8002826:	bd90      	pop	{r4, r7, pc}
 8002828:	080095a0 	.word	0x080095a0

0800282c <_ZN12TransmissionC1Ev>:
class Transmission {
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	0018      	movs	r0, r3
 8002838:	f7fd ffd4 	bl	80007e4 <_ZN12SX1280DriverC1Ev>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3340      	adds	r3, #64	; 0x40
 8002840:	0018      	movs	r0, r3
 8002842:	f000 f819 	bl	8002878 <_ZN6LQCALCILh30EEC1Ev>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	334c      	adds	r3, #76	; 0x4c
 800284a:	0018      	movs	r0, r3
 800284c:	f7ff ffca 	bl	80027e4 <_ZN20TransmissionSettingsC1Ev>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	67da      	str	r2, [r3, #124]	; 0x7c
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2280      	movs	r2, #128	; 0x80
 800285a:	2100      	movs	r1, #0
 800285c:	5499      	strb	r1, [r3, r2]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2288      	movs	r2, #136	; 0x88
 8002862:	2100      	movs	r1, #0
 8002864:	5499      	strb	r1, [r3, r2]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	228c      	movs	r2, #140	; 0x8c
 800286a:	2100      	movs	r1, #0
 800286c:	5099      	str	r1, [r3, r2]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	0018      	movs	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	b002      	add	sp, #8
 8002876:	bd80      	pop	{r7, pc}

08002878 <_ZN6LQCALCILh30EEC1Ev>:
    LQCALC(void)
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
        reset();
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	0018      	movs	r0, r3
 8002884:	f7ff fef2 	bl	800266c <_ZN6LQCALCILh30EE5resetEv>
        count = 1;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	709a      	strb	r2, [r3, #2]
    }
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	0018      	movs	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	b002      	add	sp, #8
 8002896:	bd80      	pop	{r7, pc}

08002898 <_Z41__static_initialization_and_destruction_0ii>:

#include "common.h"


Transmission Link;
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d107      	bne.n	80028b8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	4a05      	ldr	r2, [pc, #20]	; (80028c0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d103      	bne.n	80028b8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80028b0:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80028b2:	0018      	movs	r0, r3
 80028b4:	f7ff ffba 	bl	800282c <_ZN12TransmissionC1Ev>
 80028b8:	46c0      	nop			; (mov r8, r8)
 80028ba:	46bd      	mov	sp, r7
 80028bc:	b002      	add	sp, #8
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	0000ffff 	.word	0x0000ffff
 80028c4:	20000100 	.word	0x20000100

080028c8 <_GLOBAL__sub_I_Link>:
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <_GLOBAL__sub_I_Link+0x14>)
 80028ce:	0019      	movs	r1, r3
 80028d0:	2001      	movs	r0, #1
 80028d2:	f7ff ffe1 	bl	8002898 <_Z41__static_initialization_and_destruction_0ii>
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	0000ffff 	.word	0x0000ffff

080028e0 <_Z8gpsSetupv>:

TinyGPSPlus gps;

extern UART_HandleTypeDef huart1;

void gpsSetup(){
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0

	uint8_t command[20];

	/* Request UART speed of 115200 */
	sprintf((char*)command, "$PCAS01,5*19\r\n");
 80028e6:	4a23      	ldr	r2, [pc, #140]	; (8002974 <_Z8gpsSetupv+0x94>)
 80028e8:	1d3b      	adds	r3, r7, #4
 80028ea:	0011      	movs	r1, r2
 80028ec:	0018      	movs	r0, r3
 80028ee:	f006 fa2d 	bl	8008d4c <siprintf>
	HAL_UART_Transmit(&huart1, command, 14, 100);
 80028f2:	1d39      	adds	r1, r7, #4
 80028f4:	4820      	ldr	r0, [pc, #128]	; (8002978 <_Z8gpsSetupv+0x98>)
 80028f6:	2364      	movs	r3, #100	; 0x64
 80028f8:	220e      	movs	r2, #14
 80028fa:	f004 f9c3 	bl	8006c84 <HAL_UART_Transmit>

	HAL_Delay(200);
 80028fe:	20c8      	movs	r0, #200	; 0xc8
 8002900:	f000 ff16 	bl	8003730 <HAL_Delay>

	/* Change bus speed to 115200 */
	USART1->CR1 &= ~(USART_CR1_UE);
 8002904:	4b1d      	ldr	r3, [pc, #116]	; (800297c <_Z8gpsSetupv+0x9c>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4b1c      	ldr	r3, [pc, #112]	; (800297c <_Z8gpsSetupv+0x9c>)
 800290a:	2101      	movs	r1, #1
 800290c:	438a      	bics	r2, r1
 800290e:	601a      	str	r2, [r3, #0]
	USART1->BRR = 417;	// Set baud to 115200
 8002910:	4b1a      	ldr	r3, [pc, #104]	; (800297c <_Z8gpsSetupv+0x9c>)
 8002912:	22a2      	movs	r2, #162	; 0xa2
 8002914:	32ff      	adds	r2, #255	; 0xff
 8002916:	60da      	str	r2, [r3, #12]
	USART1->CR1 |= USART_CR1_UE;
 8002918:	4b18      	ldr	r3, [pc, #96]	; (800297c <_Z8gpsSetupv+0x9c>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b17      	ldr	r3, [pc, #92]	; (800297c <_Z8gpsSetupv+0x9c>)
 800291e:	2101      	movs	r1, #1
 8002920:	430a      	orrs	r2, r1
 8002922:	601a      	str	r2, [r3, #0]

	HAL_Delay(200);
 8002924:	20c8      	movs	r0, #200	; 0xc8
 8002926:	f000 ff03 	bl	8003730 <HAL_Delay>

	/* Request 10Hz update rate */
	sprintf((char*)command,"$PCAS02,100*1E\r\n");
 800292a:	4a15      	ldr	r2, [pc, #84]	; (8002980 <_Z8gpsSetupv+0xa0>)
 800292c:	1d3b      	adds	r3, r7, #4
 800292e:	0011      	movs	r1, r2
 8002930:	0018      	movs	r0, r3
 8002932:	f006 fa0b 	bl	8008d4c <siprintf>
	HAL_UART_Transmit(&huart1, command, 16, 100);
 8002936:	1d39      	adds	r1, r7, #4
 8002938:	480f      	ldr	r0, [pc, #60]	; (8002978 <_Z8gpsSetupv+0x98>)
 800293a:	2364      	movs	r3, #100	; 0x64
 800293c:	2210      	movs	r2, #16
 800293e:	f004 f9a1 	bl	8006c84 <HAL_UART_Transmit>

	HAL_Delay(10);
 8002942:	200a      	movs	r0, #10
 8002944:	f000 fef4 	bl	8003730 <HAL_Delay>

	/* Request airbourne <4g mode*/
	sprintf((char*)command, "$PCAS11,7*1A\r\n");
 8002948:	4a0e      	ldr	r2, [pc, #56]	; (8002984 <_Z8gpsSetupv+0xa4>)
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	0011      	movs	r1, r2
 800294e:	0018      	movs	r0, r3
 8002950:	f006 f9fc 	bl	8008d4c <siprintf>
	HAL_UART_Transmit(&huart1, command, 14, 100);
 8002954:	1d39      	adds	r1, r7, #4
 8002956:	4808      	ldr	r0, [pc, #32]	; (8002978 <_Z8gpsSetupv+0x98>)
 8002958:	2364      	movs	r3, #100	; 0x64
 800295a:	220e      	movs	r2, #14
 800295c:	f004 f992 	bl	8006c84 <HAL_UART_Transmit>

	/* Start receiving data from the module */
	HAL_UART_Receive_IT(&huart1, (uint8_t*)& c1, 1);
 8002960:	4909      	ldr	r1, [pc, #36]	; (8002988 <_Z8gpsSetupv+0xa8>)
 8002962:	4b05      	ldr	r3, [pc, #20]	; (8002978 <_Z8gpsSetupv+0x98>)
 8002964:	2201      	movs	r2, #1
 8002966:	0018      	movs	r0, r3
 8002968:	f004 fa38 	bl	8006ddc <HAL_UART_Receive_IT>
}
 800296c:	46c0      	nop			; (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	b006      	add	sp, #24
 8002972:	bd80      	pop	{r7, pc}
 8002974:	080095b8 	.word	0x080095b8
 8002978:	200003a8 	.word	0x200003a8
 800297c:	40013800 	.word	0x40013800
 8002980:	080095c8 	.word	0x080095c8
 8002984:	080095dc 	.word	0x080095dc
 8002988:	200001b8 	.word	0x200001b8

0800298c <_Z41__static_initialization_and_destruction_0ii>:
	if(HAL_GetTick() > (last_package+100)){
		HAL_UART_Receive_IT(&huart1, (uint8_t*)& c1, 1);
	}

	return gps.location.isValid();
}
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d107      	bne.n	80029ac <_Z41__static_initialization_and_destruction_0ii+0x20>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d103      	bne.n	80029ac <_Z41__static_initialization_and_destruction_0ii+0x20>
TinyGPSPlus gps;
 80029a4:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80029a6:	0018      	movs	r0, r3
 80029a8:	f7ff fa25 	bl	8001df6 <_ZN11TinyGPSPlusC1Ev>
}
 80029ac:	46c0      	nop			; (mov r8, r8)
 80029ae:	46bd      	mov	sp, r7
 80029b0:	b002      	add	sp, #8
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	0000ffff 	.word	0x0000ffff
 80029b8:	200001bc 	.word	0x200001bc

080029bc <_GLOBAL__sub_I_c1>:
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
 80029c0:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <_GLOBAL__sub_I_c1+0x14>)
 80029c2:	0019      	movs	r1, r3
 80029c4:	2001      	movs	r0, #1
 80029c6:	f7ff ffe1 	bl	800298c <_Z41__static_initialization_and_destruction_0ii>
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	0000ffff 	.word	0x0000ffff

080029d4 <_ZN14TinyGPSInteger5valueEv>:
   uint32_t value()        { updated = false; return val; }
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	705a      	strb	r2, [r3, #1]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	0018      	movs	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	b002      	add	sp, #8
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <_ZN6ParserC1Ev>:
class Parser {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	615a      	str	r2, [r3, #20]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	761a      	strb	r2, [r3, #24]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	4252      	negs	r2, r2
 8002a0a:	61da      	str	r2, [r3, #28]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a06      	ldr	r2, [pc, #24]	; (8002a28 <_ZN6ParserC1Ev+0x38>)
 8002a10:	3324      	adds	r3, #36	; 0x24
 8002a12:	0011      	movs	r1, r2
 8002a14:	2270      	movs	r2, #112	; 0x70
 8002a16:	0018      	movs	r0, r3
 8002a18:	f006 f986 	bl	8008d28 <memcpy>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	0018      	movs	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	b002      	add	sp, #8
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	080095ec 	.word	0x080095ec

08002a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a32:	f000 fdf7 	bl	8003624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a36:	f000 f86f 	bl	8002b18 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a3a:	f000 faa3 	bl	8002f84 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8002a3e:	f000 f8d1 	bl	8002be4 <_ZL12MX_ADC1_Initv>
  MX_SPI1_Init();
 8002a42:	f000 f941 	bl	8002cc8 <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 8002a46:	f000 f9e1 	bl	8002e0c <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 8002a4a:	f000 fa3d 	bl	8002ec8 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 8002a4e:	f000 f97d 	bl	8002d4c <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
  start_serial();
 8002a52:	f7ff f8e9 	bl	8001c28 <_Z12start_serialv>
  HAL_Delay(4000);
 8002a56:	23fa      	movs	r3, #250	; 0xfa
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f000 fe68 	bl	8003730 <HAL_Delay>

  gpsSetup();
 8002a60:	f7ff ff3e 	bl	80028e0 <_Z8gpsSetupv>


  while(Link.begin(&htim2) == false){
 8002a64:	4a28      	ldr	r2, [pc, #160]	; (8002b08 <main+0xdc>)
 8002a66:	4b29      	ldr	r3, [pc, #164]	; (8002b0c <main+0xe0>)
 8002a68:	0011      	movs	r1, r2
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f7ff fab2 	bl	8001fd4 <_ZN12Transmission5beginEP17TIM_HandleTypeDef>
 8002a70:	0003      	movs	r3, r0
 8002a72:	425a      	negs	r2, r3
 8002a74:	4153      	adcs	r3, r2
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <main+0x58>
	  HAL_Delay(10);
 8002a7c:	200a      	movs	r0, #10
 8002a7e:	f000 fe57 	bl	8003730 <HAL_Delay>
  while(Link.begin(&htim2) == false){
 8002a82:	e7ef      	b.n	8002a64 <main+0x38>

    /* USER CODE BEGIN 3 */
	  //if(gpsRun()){
		  /* Transmit GPS info */

		  uint8_t command = CMD_GNSS_INFO;
 8002a84:	1dfb      	adds	r3, r7, #7
 8002a86:	2242      	movs	r2, #66	; 0x42
 8002a88:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, &command, 1, 2);
 8002a8a:	1df9      	adds	r1, r7, #7
 8002a8c:	4820      	ldr	r0, [pc, #128]	; (8002b10 <main+0xe4>)
 8002a8e:	2302      	movs	r3, #2
 8002a90:	2201      	movs	r2, #1
 8002a92:	f004 f8f7 	bl	8006c84 <HAL_UART_Transmit>
		  uint8_t length = 1;
 8002a96:	1dbb      	adds	r3, r7, #6
 8002a98:	2201      	movs	r2, #1
 8002a9a:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, &length, 1, 2);
 8002a9c:	1db9      	adds	r1, r7, #6
 8002a9e:	481c      	ldr	r0, [pc, #112]	; (8002b10 <main+0xe4>)
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f004 f8ee 	bl	8006c84 <HAL_UART_Transmit>
		  uint8_t sats = gps.satellites.value();
 8002aa8:	4b1a      	ldr	r3, [pc, #104]	; (8002b14 <main+0xe8>)
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f7ff ff92 	bl	80029d4 <_ZN14TinyGPSInteger5valueEv>
 8002ab0:	0003      	movs	r3, r0
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	1d7b      	adds	r3, r7, #5
 8002ab6:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, &sats, 1, 2);
 8002ab8:	1d79      	adds	r1, r7, #5
 8002aba:	4815      	ldr	r0, [pc, #84]	; (8002b10 <main+0xe4>)
 8002abc:	2302      	movs	r3, #2
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f004 f8e0 	bl	8006c84 <HAL_UART_Transmit>

		  command = CMD_GNSS_LOC;
 8002ac4:	1dfb      	adds	r3, r7, #7
 8002ac6:	2240      	movs	r2, #64	; 0x40
 8002ac8:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, &command, 1, 2);
 8002aca:	1df9      	adds	r1, r7, #7
 8002acc:	4810      	ldr	r0, [pc, #64]	; (8002b10 <main+0xe4>)
 8002ace:	2302      	movs	r3, #2
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f004 f8d7 	bl	8006c84 <HAL_UART_Transmit>
		  length = 4;
 8002ad6:	1dbb      	adds	r3, r7, #6
 8002ad8:	2204      	movs	r2, #4
 8002ada:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, &length, 1, 2);
 8002adc:	1db9      	adds	r1, r7, #6
 8002ade:	480c      	ldr	r0, [pc, #48]	; (8002b10 <main+0xe4>)
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f004 f8ce 	bl	8006c84 <HAL_UART_Transmit>
		  uint32_t loc = gps.satellites.value();
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <main+0xe8>)
 8002aea:	0018      	movs	r0, r3
 8002aec:	f7ff ff72 	bl	80029d4 <_ZN14TinyGPSInteger5valueEv>
 8002af0:	0003      	movs	r3, r0
 8002af2:	603b      	str	r3, [r7, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)&loc, 4, 2);
 8002af4:	0039      	movs	r1, r7
 8002af6:	4806      	ldr	r0, [pc, #24]	; (8002b10 <main+0xe4>)
 8002af8:	2302      	movs	r3, #2
 8002afa:	2204      	movs	r2, #4
 8002afc:	f004 f8c2 	bl	8006c84 <HAL_UART_Transmit>

	  //}


	  HAL_Delay(100);
 8002b00:	2064      	movs	r0, #100	; 0x64
 8002b02:	f000 fe15 	bl	8003730 <HAL_Delay>

	  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
  }
 8002b06:	e7bd      	b.n	8002a84 <main+0x58>
 8002b08:	2000035c 	.word	0x2000035c
 8002b0c:	20000100 	.word	0x20000100
 8002b10:	20000438 	.word	0x20000438
 8002b14:	20000244 	.word	0x20000244

08002b18 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b18:	b590      	push	{r4, r7, lr}
 8002b1a:	b093      	sub	sp, #76	; 0x4c
 8002b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b1e:	2410      	movs	r4, #16
 8002b20:	193b      	adds	r3, r7, r4
 8002b22:	0018      	movs	r0, r3
 8002b24:	2338      	movs	r3, #56	; 0x38
 8002b26:	001a      	movs	r2, r3
 8002b28:	2100      	movs	r1, #0
 8002b2a:	f006 f906 	bl	8008d3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b2e:	003b      	movs	r3, r7
 8002b30:	0018      	movs	r0, r3
 8002b32:	2310      	movs	r3, #16
 8002b34:	001a      	movs	r2, r3
 8002b36:	2100      	movs	r1, #0
 8002b38:	f006 f8ff 	bl	8008d3a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b3c:	2380      	movs	r3, #128	; 0x80
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	0018      	movs	r0, r3
 8002b42:	f001 fe65 	bl	8004810 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b46:	193b      	adds	r3, r7, r4
 8002b48:	2202      	movs	r2, #2
 8002b4a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b4c:	193b      	adds	r3, r7, r4
 8002b4e:	2280      	movs	r2, #128	; 0x80
 8002b50:	0052      	lsls	r2, r2, #1
 8002b52:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002b54:	0021      	movs	r1, r4
 8002b56:	187b      	adds	r3, r7, r1
 8002b58:	2200      	movs	r2, #0
 8002b5a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b5c:	187b      	adds	r3, r7, r1
 8002b5e:	2240      	movs	r2, #64	; 0x40
 8002b60:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b62:	187b      	adds	r3, r7, r1
 8002b64:	2202      	movs	r2, #2
 8002b66:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b68:	187b      	adds	r3, r7, r1
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002b6e:	187b      	adds	r3, r7, r1
 8002b70:	2200      	movs	r2, #0
 8002b72:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 9;
 8002b74:	187b      	adds	r3, r7, r1
 8002b76:	2209      	movs	r2, #9
 8002b78:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b7a:	187b      	adds	r3, r7, r1
 8002b7c:	2280      	movs	r2, #128	; 0x80
 8002b7e:	0292      	lsls	r2, r2, #10
 8002b80:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002b82:	187b      	adds	r3, r7, r1
 8002b84:	2280      	movs	r2, #128	; 0x80
 8002b86:	0492      	lsls	r2, r2, #18
 8002b88:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8002b8a:	187b      	adds	r3, r7, r1
 8002b8c:	2280      	movs	r2, #128	; 0x80
 8002b8e:	05d2      	lsls	r2, r2, #23
 8002b90:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b92:	187b      	adds	r3, r7, r1
 8002b94:	0018      	movs	r0, r3
 8002b96:	f001 fe87 	bl	80048a8 <HAL_RCC_OscConfig>
 8002b9a:	0003      	movs	r3, r0
 8002b9c:	1e5a      	subs	r2, r3, #1
 8002b9e:	4193      	sbcs	r3, r2
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 8002ba6:	f000 faa1 	bl	80030ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002baa:	003b      	movs	r3, r7
 8002bac:	2207      	movs	r2, #7
 8002bae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bb0:	003b      	movs	r3, r7
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bb6:	003b      	movs	r3, r7
 8002bb8:	2200      	movs	r2, #0
 8002bba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002bbc:	003b      	movs	r3, r7
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002bc2:	003b      	movs	r3, r7
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f002 f98e 	bl	8004ee8 <HAL_RCC_ClockConfig>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	1e5a      	subs	r2, r3, #1
 8002bd0:	4193      	sbcs	r3, r2
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8002bd8:	f000 fa88 	bl	80030ec <Error_Handler>
  }
}
 8002bdc:	46c0      	nop			; (mov r8, r8)
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b013      	add	sp, #76	; 0x4c
 8002be2:	bd90      	pop	{r4, r7, pc}

08002be4 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	0018      	movs	r0, r3
 8002bee:	230c      	movs	r3, #12
 8002bf0:	001a      	movs	r2, r3
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	f006 f8a1 	bl	8008d3a <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002bf8:	4b31      	ldr	r3, [pc, #196]	; (8002cc0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002bfa:	4a32      	ldr	r2, [pc, #200]	; (8002cc4 <_ZL12MX_ADC1_Initv+0xe0>)
 8002bfc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002bfe:	4b30      	ldr	r3, [pc, #192]	; (8002cc0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002c00:	2280      	movs	r2, #128	; 0x80
 8002c02:	05d2      	lsls	r2, r2, #23
 8002c04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c06:	4b2e      	ldr	r3, [pc, #184]	; (8002cc0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c0c:	4b2c      	ldr	r3, [pc, #176]	; (8002cc0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002c12:	4b2b      	ldr	r3, [pc, #172]	; (8002cc0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c18:	4b29      	ldr	r3, [pc, #164]	; (8002cc0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002c1a:	2204      	movs	r2, #4
 8002c1c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002c1e:	4b28      	ldr	r3, [pc, #160]	; (8002cc0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002c24:	4b26      	ldr	r3, [pc, #152]	; (8002cc0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002c2a:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002c30:	4b23      	ldr	r3, [pc, #140]	; (8002cc0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c36:	4b22      	ldr	r3, [pc, #136]	; (8002cc0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002c38:	2220      	movs	r2, #32
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c3e:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c44:	4b1e      	ldr	r3, [pc, #120]	; (8002cc0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002c4a:	4b1d      	ldr	r3, [pc, #116]	; (8002cc0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002c4c:	222c      	movs	r2, #44	; 0x2c
 8002c4e:	2100      	movs	r1, #0
 8002c50:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002c52:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002c58:	4b19      	ldr	r3, [pc, #100]	; (8002cc0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002c5e:	4b18      	ldr	r3, [pc, #96]	; (8002cc0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002c64:	4b16      	ldr	r3, [pc, #88]	; (8002cc0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002c66:	223c      	movs	r2, #60	; 0x3c
 8002c68:	2100      	movs	r1, #0
 8002c6a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002c6c:	4b14      	ldr	r3, [pc, #80]	; (8002cc0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c72:	4b13      	ldr	r3, [pc, #76]	; (8002cc0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002c74:	0018      	movs	r0, r3
 8002c76:	f000 fe7d 	bl	8003974 <HAL_ADC_Init>
 8002c7a:	0003      	movs	r3, r0
 8002c7c:	1e5a      	subs	r2, r3, #1
 8002c7e:	4193      	sbcs	r3, r2
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <_ZL12MX_ADC1_Initv+0xa6>
  {
    Error_Handler();
 8002c86:	f000 fa31 	bl	80030ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002c8a:	1d3b      	adds	r3, r7, #4
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002c90:	1d3b      	adds	r3, r7, #4
 8002c92:	2200      	movs	r2, #0
 8002c94:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002c96:	1d3b      	adds	r3, r7, #4
 8002c98:	2200      	movs	r2, #0
 8002c9a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c9c:	1d3a      	adds	r2, r7, #4
 8002c9e:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <_ZL12MX_ADC1_Initv+0xdc>)
 8002ca0:	0011      	movs	r1, r2
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f001 f844 	bl	8003d30 <HAL_ADC_ConfigChannel>
 8002ca8:	0003      	movs	r3, r0
 8002caa:	1e5a      	subs	r2, r3, #1
 8002cac:	4193      	sbcs	r3, r2
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <_ZL12MX_ADC1_Initv+0xd4>
  {
    Error_Handler();
 8002cb4:	f000 fa1a 	bl	80030ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002cb8:	46c0      	nop			; (mov r8, r8)
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	b004      	add	sp, #16
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	20000294 	.word	0x20000294
 8002cc4:	40012400 	.word	0x40012400

08002cc8 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ccc:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <_ZL12MX_SPI1_Initv+0x7c>)
 8002cce:	4a1e      	ldr	r2, [pc, #120]	; (8002d48 <_ZL12MX_SPI1_Initv+0x80>)
 8002cd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cd2:	4b1c      	ldr	r3, [pc, #112]	; (8002d44 <_ZL12MX_SPI1_Initv+0x7c>)
 8002cd4:	2282      	movs	r2, #130	; 0x82
 8002cd6:	0052      	lsls	r2, r2, #1
 8002cd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002cda:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <_ZL12MX_SPI1_Initv+0x7c>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ce0:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <_ZL12MX_SPI1_Initv+0x7c>)
 8002ce2:	22e0      	movs	r2, #224	; 0xe0
 8002ce4:	00d2      	lsls	r2, r2, #3
 8002ce6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ce8:	4b16      	ldr	r3, [pc, #88]	; (8002d44 <_ZL12MX_SPI1_Initv+0x7c>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cee:	4b15      	ldr	r3, [pc, #84]	; (8002d44 <_ZL12MX_SPI1_Initv+0x7c>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cf4:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <_ZL12MX_SPI1_Initv+0x7c>)
 8002cf6:	2280      	movs	r2, #128	; 0x80
 8002cf8:	0092      	lsls	r2, r2, #2
 8002cfa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002cfc:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <_ZL12MX_SPI1_Initv+0x7c>)
 8002cfe:	2210      	movs	r2, #16
 8002d00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d02:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <_ZL12MX_SPI1_Initv+0x7c>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d08:	4b0e      	ldr	r3, [pc, #56]	; (8002d44 <_ZL12MX_SPI1_Initv+0x7c>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d0e:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <_ZL12MX_SPI1_Initv+0x7c>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002d14:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <_ZL12MX_SPI1_Initv+0x7c>)
 8002d16:	2207      	movs	r2, #7
 8002d18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d1a:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <_ZL12MX_SPI1_Initv+0x7c>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <_ZL12MX_SPI1_Initv+0x7c>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d26:	4b07      	ldr	r3, [pc, #28]	; (8002d44 <_ZL12MX_SPI1_Initv+0x7c>)
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f002 fc3f 	bl	80055ac <HAL_SPI_Init>
 8002d2e:	0003      	movs	r3, r0
 8002d30:	1e5a      	subs	r2, r3, #1
 8002d32:	4193      	sbcs	r3, r2
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <_ZL12MX_SPI1_Initv+0x76>
  {
    Error_Handler();
 8002d3a:	f000 f9d7 	bl	80030ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	200002f8 	.word	0x200002f8
 8002d48:	40013000 	.word	0x40013000

08002d4c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d52:	2310      	movs	r3, #16
 8002d54:	18fb      	adds	r3, r7, r3
 8002d56:	0018      	movs	r0, r3
 8002d58:	2310      	movs	r3, #16
 8002d5a:	001a      	movs	r2, r3
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	f005 ffec 	bl	8008d3a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d62:	1d3b      	adds	r3, r7, #4
 8002d64:	0018      	movs	r0, r3
 8002d66:	230c      	movs	r3, #12
 8002d68:	001a      	movs	r2, r3
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	f005 ffe5 	bl	8008d3a <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d70:	4b25      	ldr	r3, [pc, #148]	; (8002e08 <_ZL12MX_TIM2_Initv+0xbc>)
 8002d72:	2280      	movs	r2, #128	; 0x80
 8002d74:	05d2      	lsls	r2, r2, #23
 8002d76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4800;
 8002d78:	4b23      	ldr	r3, [pc, #140]	; (8002e08 <_ZL12MX_TIM2_Initv+0xbc>)
 8002d7a:	2296      	movs	r2, #150	; 0x96
 8002d7c:	0152      	lsls	r2, r2, #5
 8002d7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d80:	4b21      	ldr	r3, [pc, #132]	; (8002e08 <_ZL12MX_TIM2_Initv+0xbc>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002d86:	4b20      	ldr	r3, [pc, #128]	; (8002e08 <_ZL12MX_TIM2_Initv+0xbc>)
 8002d88:	22fa      	movs	r2, #250	; 0xfa
 8002d8a:	0092      	lsls	r2, r2, #2
 8002d8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d8e:	4b1e      	ldr	r3, [pc, #120]	; (8002e08 <_ZL12MX_TIM2_Initv+0xbc>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d94:	4b1c      	ldr	r3, [pc, #112]	; (8002e08 <_ZL12MX_TIM2_Initv+0xbc>)
 8002d96:	2280      	movs	r2, #128	; 0x80
 8002d98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d9a:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <_ZL12MX_TIM2_Initv+0xbc>)
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f003 fa79 	bl	8006294 <HAL_TIM_Base_Init>
 8002da2:	0003      	movs	r3, r0
 8002da4:	1e5a      	subs	r2, r3, #1
 8002da6:	4193      	sbcs	r3, r2
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <_ZL12MX_TIM2_Initv+0x66>
  {
    Error_Handler();
 8002dae:	f000 f99d 	bl	80030ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002db2:	2110      	movs	r1, #16
 8002db4:	187b      	adds	r3, r7, r1
 8002db6:	2280      	movs	r2, #128	; 0x80
 8002db8:	0152      	lsls	r2, r2, #5
 8002dba:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002dbc:	187a      	adds	r2, r7, r1
 8002dbe:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <_ZL12MX_TIM2_Initv+0xbc>)
 8002dc0:	0011      	movs	r1, r2
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f003 fc7a 	bl	80066bc <HAL_TIM_ConfigClockSource>
 8002dc8:	0003      	movs	r3, r0
 8002dca:	1e5a      	subs	r2, r3, #1
 8002dcc:	4193      	sbcs	r3, r2
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 8002dd4:	f000 f98a 	bl	80030ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002dd8:	1d3b      	adds	r3, r7, #4
 8002dda:	2220      	movs	r2, #32
 8002ddc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dde:	1d3b      	adds	r3, r7, #4
 8002de0:	2200      	movs	r2, #0
 8002de2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002de4:	1d3a      	adds	r2, r7, #4
 8002de6:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <_ZL12MX_TIM2_Initv+0xbc>)
 8002de8:	0011      	movs	r1, r2
 8002dea:	0018      	movs	r0, r3
 8002dec:	f003 fe6e 	bl	8006acc <HAL_TIMEx_MasterConfigSynchronization>
 8002df0:	0003      	movs	r3, r0
 8002df2:	1e5a      	subs	r2, r3, #1
 8002df4:	4193      	sbcs	r3, r2
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 8002dfc:	f000 f976 	bl	80030ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e00:	46c0      	nop			; (mov r8, r8)
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b008      	add	sp, #32
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	2000035c 	.word	0x2000035c

08002e0c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e10:	4b2b      	ldr	r3, [pc, #172]	; (8002ec0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002e12:	4a2c      	ldr	r2, [pc, #176]	; (8002ec4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002e14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002e16:	4b2a      	ldr	r3, [pc, #168]	; (8002ec0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002e18:	2296      	movs	r2, #150	; 0x96
 8002e1a:	0192      	lsls	r2, r2, #6
 8002e1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e1e:	4b28      	ldr	r3, [pc, #160]	; (8002ec0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e24:	4b26      	ldr	r3, [pc, #152]	; (8002ec0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e2a:	4b25      	ldr	r3, [pc, #148]	; (8002ec0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e30:	4b23      	ldr	r3, [pc, #140]	; (8002ec0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002e32:	220c      	movs	r2, #12
 8002e34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e36:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e3c:	4b20      	ldr	r3, [pc, #128]	; (8002ec0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e42:	4b1f      	ldr	r3, [pc, #124]	; (8002ec0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e48:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e4e:	4b1c      	ldr	r3, [pc, #112]	; (8002ec0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e54:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002e56:	0018      	movs	r0, r3
 8002e58:	f003 febe 	bl	8006bd8 <HAL_UART_Init>
 8002e5c:	0003      	movs	r3, r0
 8002e5e:	1e5a      	subs	r2, r3, #1
 8002e60:	4193      	sbcs	r3, r2
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <_ZL19MX_USART1_UART_Initv+0x60>
  {
    Error_Handler();
 8002e68:	f000 f940 	bl	80030ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e6c:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002e6e:	2100      	movs	r1, #0
 8002e70:	0018      	movs	r0, r3
 8002e72:	f005 fe4f 	bl	8008b14 <HAL_UARTEx_SetTxFifoThreshold>
 8002e76:	0003      	movs	r3, r0
 8002e78:	1e5a      	subs	r2, r3, #1
 8002e7a:	4193      	sbcs	r3, r2
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <_ZL19MX_USART1_UART_Initv+0x7a>
  {
    Error_Handler();
 8002e82:	f000 f933 	bl	80030ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e86:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002e88:	2100      	movs	r1, #0
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f005 fe82 	bl	8008b94 <HAL_UARTEx_SetRxFifoThreshold>
 8002e90:	0003      	movs	r3, r0
 8002e92:	1e5a      	subs	r2, r3, #1
 8002e94:	4193      	sbcs	r3, r2
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <_ZL19MX_USART1_UART_Initv+0x94>
  {
    Error_Handler();
 8002e9c:	f000 f926 	bl	80030ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002ea0:	4b07      	ldr	r3, [pc, #28]	; (8002ec0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f005 fdfc 	bl	8008aa0 <HAL_UARTEx_DisableFifoMode>
 8002ea8:	0003      	movs	r3, r0
 8002eaa:	1e5a      	subs	r2, r3, #1
 8002eac:	4193      	sbcs	r3, r2
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <_ZL19MX_USART1_UART_Initv+0xac>
  {
    Error_Handler();
 8002eb4:	f000 f91a 	bl	80030ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002eb8:	46c0      	nop			; (mov r8, r8)
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	200003a8 	.word	0x200003a8
 8002ec4:	40013800 	.word	0x40013800

08002ec8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ecc:	4b2b      	ldr	r3, [pc, #172]	; (8002f7c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002ece:	4a2c      	ldr	r2, [pc, #176]	; (8002f80 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8002ed0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ed2:	4b2a      	ldr	r3, [pc, #168]	; (8002f7c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002ed4:	22e1      	movs	r2, #225	; 0xe1
 8002ed6:	0252      	lsls	r2, r2, #9
 8002ed8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002eda:	4b28      	ldr	r3, [pc, #160]	; (8002f7c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ee0:	4b26      	ldr	r3, [pc, #152]	; (8002f7c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ee6:	4b25      	ldr	r3, [pc, #148]	; (8002f7c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002eec:	4b23      	ldr	r3, [pc, #140]	; (8002f7c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002eee:	220c      	movs	r2, #12
 8002ef0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ef2:	4b22      	ldr	r3, [pc, #136]	; (8002f7c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ef8:	4b20      	ldr	r3, [pc, #128]	; (8002f7c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002efe:	4b1f      	ldr	r3, [pc, #124]	; (8002f7c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f04:	4b1d      	ldr	r3, [pc, #116]	; (8002f7c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f0a:	4b1c      	ldr	r3, [pc, #112]	; (8002f7c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f10:	4b1a      	ldr	r3, [pc, #104]	; (8002f7c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002f12:	0018      	movs	r0, r3
 8002f14:	f003 fe60 	bl	8006bd8 <HAL_UART_Init>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	1e5a      	subs	r2, r3, #1
 8002f1c:	4193      	sbcs	r3, r2
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <_ZL19MX_USART2_UART_Initv+0x60>
  {
    Error_Handler();
 8002f24:	f000 f8e2 	bl	80030ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f28:	4b14      	ldr	r3, [pc, #80]	; (8002f7c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f005 fdf1 	bl	8008b14 <HAL_UARTEx_SetTxFifoThreshold>
 8002f32:	0003      	movs	r3, r0
 8002f34:	1e5a      	subs	r2, r3, #1
 8002f36:	4193      	sbcs	r3, r2
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <_ZL19MX_USART2_UART_Initv+0x7a>
  {
    Error_Handler();
 8002f3e:	f000 f8d5 	bl	80030ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f42:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002f44:	2100      	movs	r1, #0
 8002f46:	0018      	movs	r0, r3
 8002f48:	f005 fe24 	bl	8008b94 <HAL_UARTEx_SetRxFifoThreshold>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	1e5a      	subs	r2, r3, #1
 8002f50:	4193      	sbcs	r3, r2
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <_ZL19MX_USART2_UART_Initv+0x94>
  {
    Error_Handler();
 8002f58:	f000 f8c8 	bl	80030ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002f5c:	4b07      	ldr	r3, [pc, #28]	; (8002f7c <_ZL19MX_USART2_UART_Initv+0xb4>)
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f005 fd9e 	bl	8008aa0 <HAL_UARTEx_DisableFifoMode>
 8002f64:	0003      	movs	r3, r0
 8002f66:	1e5a      	subs	r2, r3, #1
 8002f68:	4193      	sbcs	r3, r2
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <_ZL19MX_USART2_UART_Initv+0xac>
  {
    Error_Handler();
 8002f70:	f000 f8bc 	bl	80030ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f74:	46c0      	nop			; (mov r8, r8)
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	20000438 	.word	0x20000438
 8002f80:	40004400 	.word	0x40004400

08002f84 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f84:	b590      	push	{r4, r7, lr}
 8002f86:	b089      	sub	sp, #36	; 0x24
 8002f88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8a:	240c      	movs	r4, #12
 8002f8c:	193b      	adds	r3, r7, r4
 8002f8e:	0018      	movs	r0, r3
 8002f90:	2314      	movs	r3, #20
 8002f92:	001a      	movs	r2, r3
 8002f94:	2100      	movs	r1, #0
 8002f96:	f005 fed0 	bl	8008d3a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9a:	4b51      	ldr	r3, [pc, #324]	; (80030e0 <_ZL12MX_GPIO_Initv+0x15c>)
 8002f9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f9e:	4b50      	ldr	r3, [pc, #320]	; (80030e0 <_ZL12MX_GPIO_Initv+0x15c>)
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	635a      	str	r2, [r3, #52]	; 0x34
 8002fa6:	4b4e      	ldr	r3, [pc, #312]	; (80030e0 <_ZL12MX_GPIO_Initv+0x15c>)
 8002fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002faa:	2201      	movs	r2, #1
 8002fac:	4013      	ands	r3, r2
 8002fae:	60bb      	str	r3, [r7, #8]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fb2:	4b4b      	ldr	r3, [pc, #300]	; (80030e0 <_ZL12MX_GPIO_Initv+0x15c>)
 8002fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fb6:	4b4a      	ldr	r3, [pc, #296]	; (80030e0 <_ZL12MX_GPIO_Initv+0x15c>)
 8002fb8:	2102      	movs	r1, #2
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	635a      	str	r2, [r3, #52]	; 0x34
 8002fbe:	4b48      	ldr	r3, [pc, #288]	; (80030e0 <_ZL12MX_GPIO_Initv+0x15c>)
 8002fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	607b      	str	r3, [r7, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fca:	4b45      	ldr	r3, [pc, #276]	; (80030e0 <_ZL12MX_GPIO_Initv+0x15c>)
 8002fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fce:	4b44      	ldr	r3, [pc, #272]	; (80030e0 <_ZL12MX_GPIO_Initv+0x15c>)
 8002fd0:	2104      	movs	r1, #4
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	635a      	str	r2, [r3, #52]	; 0x34
 8002fd6:	4b42      	ldr	r3, [pc, #264]	; (80030e0 <_ZL12MX_GPIO_Initv+0x15c>)
 8002fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fda:	2204      	movs	r2, #4
 8002fdc:	4013      	ands	r3, r2
 8002fde:	603b      	str	r3, [r7, #0]
 8002fe0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|INT2_Pin|INT1_Pin, GPIO_PIN_RESET);
 8002fe2:	2322      	movs	r3, #34	; 0x22
 8002fe4:	33ff      	adds	r3, #255	; 0xff
 8002fe6:	483f      	ldr	r0, [pc, #252]	; (80030e4 <_ZL12MX_GPIO_Initv+0x160>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	0019      	movs	r1, r3
 8002fec:	f001 fba3 	bl	8004736 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FE_EN_Pin|RX_EN_Pin|LED_Pin, GPIO_PIN_RESET);
 8002ff0:	2389      	movs	r3, #137	; 0x89
 8002ff2:	0219      	lsls	r1, r3, #8
 8002ff4:	23a0      	movs	r3, #160	; 0xa0
 8002ff6:	05db      	lsls	r3, r3, #23
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f001 fb9b 	bl	8004736 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 8003000:	4b39      	ldr	r3, [pc, #228]	; (80030e8 <_ZL12MX_GPIO_Initv+0x164>)
 8003002:	2200      	movs	r2, #0
 8003004:	2140      	movs	r1, #64	; 0x40
 8003006:	0018      	movs	r0, r3
 8003008:	f001 fb95 	bl	8004736 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIO2_Pin DIO1_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin|DIO1_Pin;
 800300c:	193b      	adds	r3, r7, r4
 800300e:	2230      	movs	r2, #48	; 0x30
 8003010:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003012:	193b      	adds	r3, r7, r4
 8003014:	2288      	movs	r2, #136	; 0x88
 8003016:	0352      	lsls	r2, r2, #13
 8003018:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301a:	193b      	adds	r3, r7, r4
 800301c:	2200      	movs	r2, #0
 800301e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003020:	193a      	adds	r2, r7, r4
 8003022:	23a0      	movs	r3, #160	; 0xa0
 8003024:	05db      	lsls	r3, r3, #23
 8003026:	0011      	movs	r1, r2
 8003028:	0018      	movs	r0, r3
 800302a:	f001 fa03 	bl	8004434 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin INT2_Pin INT1_Pin */
  GPIO_InitStruct.Pin = CS_Pin|INT2_Pin|INT1_Pin;
 800302e:	0021      	movs	r1, r4
 8003030:	187b      	adds	r3, r7, r1
 8003032:	2222      	movs	r2, #34	; 0x22
 8003034:	32ff      	adds	r2, #255	; 0xff
 8003036:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003038:	000c      	movs	r4, r1
 800303a:	193b      	adds	r3, r7, r4
 800303c:	2201      	movs	r2, #1
 800303e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003040:	193b      	adds	r3, r7, r4
 8003042:	2200      	movs	r2, #0
 8003044:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003046:	193b      	adds	r3, r7, r4
 8003048:	2200      	movs	r2, #0
 800304a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800304c:	193b      	adds	r3, r7, r4
 800304e:	4a25      	ldr	r2, [pc, #148]	; (80030e4 <_ZL12MX_GPIO_Initv+0x160>)
 8003050:	0019      	movs	r1, r3
 8003052:	0010      	movs	r0, r2
 8003054:	f001 f9ee 	bl	8004434 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8003058:	193b      	adds	r3, r7, r4
 800305a:	2202      	movs	r2, #2
 800305c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800305e:	193b      	adds	r3, r7, r4
 8003060:	2200      	movs	r2, #0
 8003062:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003064:	193b      	adds	r3, r7, r4
 8003066:	2201      	movs	r2, #1
 8003068:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 800306a:	193b      	adds	r3, r7, r4
 800306c:	4a1d      	ldr	r2, [pc, #116]	; (80030e4 <_ZL12MX_GPIO_Initv+0x160>)
 800306e:	0019      	movs	r1, r3
 8003070:	0010      	movs	r0, r2
 8003072:	f001 f9df 	bl	8004434 <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_EN_Pin RX_EN_Pin LED_Pin */
  GPIO_InitStruct.Pin = FE_EN_Pin|RX_EN_Pin|LED_Pin;
 8003076:	0021      	movs	r1, r4
 8003078:	187b      	adds	r3, r7, r1
 800307a:	2289      	movs	r2, #137	; 0x89
 800307c:	0212      	lsls	r2, r2, #8
 800307e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003080:	000c      	movs	r4, r1
 8003082:	193b      	adds	r3, r7, r4
 8003084:	2201      	movs	r2, #1
 8003086:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	193b      	adds	r3, r7, r4
 800308a:	2200      	movs	r2, #0
 800308c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308e:	193b      	adds	r3, r7, r4
 8003090:	2200      	movs	r2, #0
 8003092:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003094:	193a      	adds	r2, r7, r4
 8003096:	23a0      	movs	r3, #160	; 0xa0
 8003098:	05db      	lsls	r3, r3, #23
 800309a:	0011      	movs	r1, r2
 800309c:	0018      	movs	r0, r3
 800309e:	f001 f9c9 	bl	8004434 <HAL_GPIO_Init>

  /*Configure GPIO pin : TX_EN_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
 80030a2:	0021      	movs	r1, r4
 80030a4:	187b      	adds	r3, r7, r1
 80030a6:	2240      	movs	r2, #64	; 0x40
 80030a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030aa:	187b      	adds	r3, r7, r1
 80030ac:	2201      	movs	r2, #1
 80030ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b0:	187b      	adds	r3, r7, r1
 80030b2:	2200      	movs	r2, #0
 80030b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b6:	187b      	adds	r3, r7, r1
 80030b8:	2200      	movs	r2, #0
 80030ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 80030bc:	187b      	adds	r3, r7, r1
 80030be:	4a0a      	ldr	r2, [pc, #40]	; (80030e8 <_ZL12MX_GPIO_Initv+0x164>)
 80030c0:	0019      	movs	r1, r3
 80030c2:	0010      	movs	r0, r2
 80030c4:	f001 f9b6 	bl	8004434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80030c8:	2200      	movs	r2, #0
 80030ca:	2100      	movs	r1, #0
 80030cc:	2007      	movs	r0, #7
 80030ce:	f001 f8b3 	bl	8004238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80030d2:	2007      	movs	r0, #7
 80030d4:	f001 f8c5 	bl	8004262 <HAL_NVIC_EnableIRQ>

}
 80030d8:	46c0      	nop			; (mov r8, r8)
 80030da:	46bd      	mov	sp, r7
 80030dc:	b009      	add	sp, #36	; 0x24
 80030de:	bd90      	pop	{r4, r7, pc}
 80030e0:	40021000 	.word	0x40021000
 80030e4:	50000400 	.word	0x50000400
 80030e8:	50000800 	.word	0x50000800

080030ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030f0:	b672      	cpsid	i
}
 80030f2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030f4:	e7fe      	b.n	80030f4 <Error_Handler+0x8>
	...

080030f8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d107      	bne.n	8003118 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	4a05      	ldr	r2, [pc, #20]	; (8003120 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d103      	bne.n	8003118 <_Z41__static_initialization_and_destruction_0ii+0x20>
Parser p;
 8003110:	4b04      	ldr	r3, [pc, #16]	; (8003124 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8003112:	0018      	movs	r0, r3
 8003114:	f7ff fc6c 	bl	80029f0 <_ZN6ParserC1Ev>
}
 8003118:	46c0      	nop			; (mov r8, r8)
 800311a:	46bd      	mov	sp, r7
 800311c:	b002      	add	sp, #8
 800311e:	bd80      	pop	{r7, pc}
 8003120:	0000ffff 	.word	0x0000ffff
 8003124:	200004c8 	.word	0x200004c8

08003128 <_GLOBAL__sub_I_hadc1>:
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
 800312c:	4b03      	ldr	r3, [pc, #12]	; (800313c <_GLOBAL__sub_I_hadc1+0x14>)
 800312e:	0019      	movs	r1, r3
 8003130:	2001      	movs	r0, #1
 8003132:	f7ff ffe1 	bl	80030f8 <_Z41__static_initialization_and_destruction_0ii>
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	0000ffff 	.word	0x0000ffff

08003140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003146:	4b11      	ldr	r3, [pc, #68]	; (800318c <HAL_MspInit+0x4c>)
 8003148:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800314a:	4b10      	ldr	r3, [pc, #64]	; (800318c <HAL_MspInit+0x4c>)
 800314c:	2101      	movs	r1, #1
 800314e:	430a      	orrs	r2, r1
 8003150:	641a      	str	r2, [r3, #64]	; 0x40
 8003152:	4b0e      	ldr	r3, [pc, #56]	; (800318c <HAL_MspInit+0x4c>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	2201      	movs	r2, #1
 8003158:	4013      	ands	r3, r2
 800315a:	607b      	str	r3, [r7, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800315e:	4b0b      	ldr	r3, [pc, #44]	; (800318c <HAL_MspInit+0x4c>)
 8003160:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003162:	4b0a      	ldr	r3, [pc, #40]	; (800318c <HAL_MspInit+0x4c>)
 8003164:	2180      	movs	r1, #128	; 0x80
 8003166:	0549      	lsls	r1, r1, #21
 8003168:	430a      	orrs	r2, r1
 800316a:	63da      	str	r2, [r3, #60]	; 0x3c
 800316c:	4b07      	ldr	r3, [pc, #28]	; (800318c <HAL_MspInit+0x4c>)
 800316e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	055b      	lsls	r3, r3, #21
 8003174:	4013      	ands	r3, r2
 8003176:	603b      	str	r3, [r7, #0]
 8003178:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 800317a:	2380      	movs	r3, #128	; 0x80
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	0018      	movs	r0, r3
 8003180:	f000 fafa 	bl	8003778 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003184:	46c0      	nop			; (mov r8, r8)
 8003186:	46bd      	mov	sp, r7
 8003188:	b002      	add	sp, #8
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40021000 	.word	0x40021000

08003190 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b097      	sub	sp, #92	; 0x5c
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003198:	2344      	movs	r3, #68	; 0x44
 800319a:	18fb      	adds	r3, r7, r3
 800319c:	0018      	movs	r0, r3
 800319e:	2314      	movs	r3, #20
 80031a0:	001a      	movs	r2, r3
 80031a2:	2100      	movs	r1, #0
 80031a4:	f005 fdc9 	bl	8008d3a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031a8:	2410      	movs	r4, #16
 80031aa:	193b      	adds	r3, r7, r4
 80031ac:	0018      	movs	r0, r3
 80031ae:	2334      	movs	r3, #52	; 0x34
 80031b0:	001a      	movs	r2, r3
 80031b2:	2100      	movs	r1, #0
 80031b4:	f005 fdc1 	bl	8008d3a <memset>
  if(hadc->Instance==ADC1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a20      	ldr	r2, [pc, #128]	; (8003240 <HAL_ADC_MspInit+0xb0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d139      	bne.n	8003236 <HAL_ADC_MspInit+0xa6>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80031c2:	193b      	adds	r3, r7, r4
 80031c4:	2280      	movs	r2, #128	; 0x80
 80031c6:	01d2      	lsls	r2, r2, #7
 80031c8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80031ca:	193b      	adds	r3, r7, r4
 80031cc:	2200      	movs	r2, #0
 80031ce:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031d0:	193b      	adds	r3, r7, r4
 80031d2:	0018      	movs	r0, r3
 80031d4:	f002 f832 	bl	800523c <HAL_RCCEx_PeriphCLKConfig>
 80031d8:	1e03      	subs	r3, r0, #0
 80031da:	d001      	beq.n	80031e0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80031dc:	f7ff ff86 	bl	80030ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80031e0:	4b18      	ldr	r3, [pc, #96]	; (8003244 <HAL_ADC_MspInit+0xb4>)
 80031e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031e4:	4b17      	ldr	r3, [pc, #92]	; (8003244 <HAL_ADC_MspInit+0xb4>)
 80031e6:	2180      	movs	r1, #128	; 0x80
 80031e8:	0349      	lsls	r1, r1, #13
 80031ea:	430a      	orrs	r2, r1
 80031ec:	641a      	str	r2, [r3, #64]	; 0x40
 80031ee:	4b15      	ldr	r3, [pc, #84]	; (8003244 <HAL_ADC_MspInit+0xb4>)
 80031f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f2:	2380      	movs	r3, #128	; 0x80
 80031f4:	035b      	lsls	r3, r3, #13
 80031f6:	4013      	ands	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031fc:	4b11      	ldr	r3, [pc, #68]	; (8003244 <HAL_ADC_MspInit+0xb4>)
 80031fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003200:	4b10      	ldr	r3, [pc, #64]	; (8003244 <HAL_ADC_MspInit+0xb4>)
 8003202:	2101      	movs	r1, #1
 8003204:	430a      	orrs	r2, r1
 8003206:	635a      	str	r2, [r3, #52]	; 0x34
 8003208:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <HAL_ADC_MspInit+0xb4>)
 800320a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320c:	2201      	movs	r2, #1
 800320e:	4013      	ands	r3, r2
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003214:	2144      	movs	r1, #68	; 0x44
 8003216:	187b      	adds	r3, r7, r1
 8003218:	2201      	movs	r2, #1
 800321a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800321c:	187b      	adds	r3, r7, r1
 800321e:	2203      	movs	r2, #3
 8003220:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003222:	187b      	adds	r3, r7, r1
 8003224:	2200      	movs	r2, #0
 8003226:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003228:	187a      	adds	r2, r7, r1
 800322a:	23a0      	movs	r3, #160	; 0xa0
 800322c:	05db      	lsls	r3, r3, #23
 800322e:	0011      	movs	r1, r2
 8003230:	0018      	movs	r0, r3
 8003232:	f001 f8ff 	bl	8004434 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	46bd      	mov	sp, r7
 800323a:	b017      	add	sp, #92	; 0x5c
 800323c:	bd90      	pop	{r4, r7, pc}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	40012400 	.word	0x40012400
 8003244:	40021000 	.word	0x40021000

08003248 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003248:	b590      	push	{r4, r7, lr}
 800324a:	b08b      	sub	sp, #44	; 0x2c
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003250:	2414      	movs	r4, #20
 8003252:	193b      	adds	r3, r7, r4
 8003254:	0018      	movs	r0, r3
 8003256:	2314      	movs	r3, #20
 8003258:	001a      	movs	r2, r3
 800325a:	2100      	movs	r1, #0
 800325c:	f005 fd6d 	bl	8008d3a <memset>
  if(hspi->Instance==SPI1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a1f      	ldr	r2, [pc, #124]	; (80032e4 <HAL_SPI_MspInit+0x9c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d138      	bne.n	80032dc <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800326a:	4b1f      	ldr	r3, [pc, #124]	; (80032e8 <HAL_SPI_MspInit+0xa0>)
 800326c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800326e:	4b1e      	ldr	r3, [pc, #120]	; (80032e8 <HAL_SPI_MspInit+0xa0>)
 8003270:	2180      	movs	r1, #128	; 0x80
 8003272:	0149      	lsls	r1, r1, #5
 8003274:	430a      	orrs	r2, r1
 8003276:	641a      	str	r2, [r3, #64]	; 0x40
 8003278:	4b1b      	ldr	r3, [pc, #108]	; (80032e8 <HAL_SPI_MspInit+0xa0>)
 800327a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800327c:	2380      	movs	r3, #128	; 0x80
 800327e:	015b      	lsls	r3, r3, #5
 8003280:	4013      	ands	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003286:	4b18      	ldr	r3, [pc, #96]	; (80032e8 <HAL_SPI_MspInit+0xa0>)
 8003288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800328a:	4b17      	ldr	r3, [pc, #92]	; (80032e8 <HAL_SPI_MspInit+0xa0>)
 800328c:	2101      	movs	r1, #1
 800328e:	430a      	orrs	r2, r1
 8003290:	635a      	str	r2, [r3, #52]	; 0x34
 8003292:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <HAL_SPI_MspInit+0xa0>)
 8003294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003296:	2201      	movs	r2, #1
 8003298:	4013      	ands	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800329e:	0021      	movs	r1, r4
 80032a0:	187b      	adds	r3, r7, r1
 80032a2:	22c2      	movs	r2, #194	; 0xc2
 80032a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a6:	187b      	adds	r3, r7, r1
 80032a8:	2202      	movs	r2, #2
 80032aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ac:	187b      	adds	r3, r7, r1
 80032ae:	2200      	movs	r2, #0
 80032b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b2:	187b      	adds	r3, r7, r1
 80032b4:	2200      	movs	r2, #0
 80032b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80032b8:	187b      	adds	r3, r7, r1
 80032ba:	2200      	movs	r2, #0
 80032bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032be:	187a      	adds	r2, r7, r1
 80032c0:	23a0      	movs	r3, #160	; 0xa0
 80032c2:	05db      	lsls	r3, r3, #23
 80032c4:	0011      	movs	r1, r2
 80032c6:	0018      	movs	r0, r3
 80032c8:	f001 f8b4 	bl	8004434 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80032cc:	2200      	movs	r2, #0
 80032ce:	2100      	movs	r1, #0
 80032d0:	2019      	movs	r0, #25
 80032d2:	f000 ffb1 	bl	8004238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80032d6:	2019      	movs	r0, #25
 80032d8:	f000 ffc3 	bl	8004262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80032dc:	46c0      	nop			; (mov r8, r8)
 80032de:	46bd      	mov	sp, r7
 80032e0:	b00b      	add	sp, #44	; 0x2c
 80032e2:	bd90      	pop	{r4, r7, pc}
 80032e4:	40013000 	.word	0x40013000
 80032e8:	40021000 	.word	0x40021000

080032ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	2380      	movs	r3, #128	; 0x80
 80032fa:	05db      	lsls	r3, r3, #23
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d113      	bne.n	8003328 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003300:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <HAL_TIM_Base_MspInit+0x44>)
 8003302:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003304:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <HAL_TIM_Base_MspInit+0x44>)
 8003306:	2101      	movs	r1, #1
 8003308:	430a      	orrs	r2, r1
 800330a:	63da      	str	r2, [r3, #60]	; 0x3c
 800330c:	4b08      	ldr	r3, [pc, #32]	; (8003330 <HAL_TIM_Base_MspInit+0x44>)
 800330e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003310:	2201      	movs	r2, #1
 8003312:	4013      	ands	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8003318:	2200      	movs	r2, #0
 800331a:	2101      	movs	r1, #1
 800331c:	200f      	movs	r0, #15
 800331e:	f000 ff8b 	bl	8004238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003322:	200f      	movs	r0, #15
 8003324:	f000 ff9d 	bl	8004262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003328:	46c0      	nop			; (mov r8, r8)
 800332a:	46bd      	mov	sp, r7
 800332c:	b004      	add	sp, #16
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40021000 	.word	0x40021000

08003334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003334:	b590      	push	{r4, r7, lr}
 8003336:	b099      	sub	sp, #100	; 0x64
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800333c:	234c      	movs	r3, #76	; 0x4c
 800333e:	18fb      	adds	r3, r7, r3
 8003340:	0018      	movs	r0, r3
 8003342:	2314      	movs	r3, #20
 8003344:	001a      	movs	r2, r3
 8003346:	2100      	movs	r1, #0
 8003348:	f005 fcf7 	bl	8008d3a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800334c:	2418      	movs	r4, #24
 800334e:	193b      	adds	r3, r7, r4
 8003350:	0018      	movs	r0, r3
 8003352:	2334      	movs	r3, #52	; 0x34
 8003354:	001a      	movs	r2, r3
 8003356:	2100      	movs	r1, #0
 8003358:	f005 fcef 	bl	8008d3a <memset>
  if(huart->Instance==USART1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a4d      	ldr	r2, [pc, #308]	; (8003498 <HAL_UART_MspInit+0x164>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d146      	bne.n	80033f4 <HAL_UART_MspInit+0xc0>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003366:	193b      	adds	r3, r7, r4
 8003368:	2201      	movs	r2, #1
 800336a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800336c:	193b      	adds	r3, r7, r4
 800336e:	2200      	movs	r2, #0
 8003370:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003372:	193b      	adds	r3, r7, r4
 8003374:	0018      	movs	r0, r3
 8003376:	f001 ff61 	bl	800523c <HAL_RCCEx_PeriphCLKConfig>
 800337a:	1e03      	subs	r3, r0, #0
 800337c:	d001      	beq.n	8003382 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800337e:	f7ff feb5 	bl	80030ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003382:	4b46      	ldr	r3, [pc, #280]	; (800349c <HAL_UART_MspInit+0x168>)
 8003384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003386:	4b45      	ldr	r3, [pc, #276]	; (800349c <HAL_UART_MspInit+0x168>)
 8003388:	2180      	movs	r1, #128	; 0x80
 800338a:	01c9      	lsls	r1, r1, #7
 800338c:	430a      	orrs	r2, r1
 800338e:	641a      	str	r2, [r3, #64]	; 0x40
 8003390:	4b42      	ldr	r3, [pc, #264]	; (800349c <HAL_UART_MspInit+0x168>)
 8003392:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003394:	2380      	movs	r3, #128	; 0x80
 8003396:	01db      	lsls	r3, r3, #7
 8003398:	4013      	ands	r3, r2
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800339e:	4b3f      	ldr	r3, [pc, #252]	; (800349c <HAL_UART_MspInit+0x168>)
 80033a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a2:	4b3e      	ldr	r3, [pc, #248]	; (800349c <HAL_UART_MspInit+0x168>)
 80033a4:	2102      	movs	r1, #2
 80033a6:	430a      	orrs	r2, r1
 80033a8:	635a      	str	r2, [r3, #52]	; 0x34
 80033aa:	4b3c      	ldr	r3, [pc, #240]	; (800349c <HAL_UART_MspInit+0x168>)
 80033ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ae:	2202      	movs	r2, #2
 80033b0:	4013      	ands	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
 80033b4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80033b6:	214c      	movs	r1, #76	; 0x4c
 80033b8:	187b      	adds	r3, r7, r1
 80033ba:	22c0      	movs	r2, #192	; 0xc0
 80033bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033be:	187b      	adds	r3, r7, r1
 80033c0:	2202      	movs	r2, #2
 80033c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c4:	187b      	adds	r3, r7, r1
 80033c6:	2200      	movs	r2, #0
 80033c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ca:	187b      	adds	r3, r7, r1
 80033cc:	2200      	movs	r2, #0
 80033ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80033d0:	187b      	adds	r3, r7, r1
 80033d2:	2200      	movs	r2, #0
 80033d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033d6:	187b      	adds	r3, r7, r1
 80033d8:	4a31      	ldr	r2, [pc, #196]	; (80034a0 <HAL_UART_MspInit+0x16c>)
 80033da:	0019      	movs	r1, r3
 80033dc:	0010      	movs	r0, r2
 80033de:	f001 f829 	bl	8004434 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80033e2:	2200      	movs	r2, #0
 80033e4:	2103      	movs	r1, #3
 80033e6:	201b      	movs	r0, #27
 80033e8:	f000 ff26 	bl	8004238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80033ec:	201b      	movs	r0, #27
 80033ee:	f000 ff38 	bl	8004262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80033f2:	e04c      	b.n	800348e <HAL_UART_MspInit+0x15a>
  else if(huart->Instance==USART2)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a2a      	ldr	r2, [pc, #168]	; (80034a4 <HAL_UART_MspInit+0x170>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d147      	bne.n	800348e <HAL_UART_MspInit+0x15a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80033fe:	2118      	movs	r1, #24
 8003400:	187b      	adds	r3, r7, r1
 8003402:	2202      	movs	r2, #2
 8003404:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003406:	187b      	adds	r3, r7, r1
 8003408:	2200      	movs	r2, #0
 800340a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800340c:	187b      	adds	r3, r7, r1
 800340e:	0018      	movs	r0, r3
 8003410:	f001 ff14 	bl	800523c <HAL_RCCEx_PeriphCLKConfig>
 8003414:	1e03      	subs	r3, r0, #0
 8003416:	d001      	beq.n	800341c <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8003418:	f7ff fe68 	bl	80030ec <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800341c:	4b1f      	ldr	r3, [pc, #124]	; (800349c <HAL_UART_MspInit+0x168>)
 800341e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003420:	4b1e      	ldr	r3, [pc, #120]	; (800349c <HAL_UART_MspInit+0x168>)
 8003422:	2180      	movs	r1, #128	; 0x80
 8003424:	0289      	lsls	r1, r1, #10
 8003426:	430a      	orrs	r2, r1
 8003428:	63da      	str	r2, [r3, #60]	; 0x3c
 800342a:	4b1c      	ldr	r3, [pc, #112]	; (800349c <HAL_UART_MspInit+0x168>)
 800342c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800342e:	2380      	movs	r3, #128	; 0x80
 8003430:	029b      	lsls	r3, r3, #10
 8003432:	4013      	ands	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003438:	4b18      	ldr	r3, [pc, #96]	; (800349c <HAL_UART_MspInit+0x168>)
 800343a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800343c:	4b17      	ldr	r3, [pc, #92]	; (800349c <HAL_UART_MspInit+0x168>)
 800343e:	2101      	movs	r1, #1
 8003440:	430a      	orrs	r2, r1
 8003442:	635a      	str	r2, [r3, #52]	; 0x34
 8003444:	4b15      	ldr	r3, [pc, #84]	; (800349c <HAL_UART_MspInit+0x168>)
 8003446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003448:	2201      	movs	r2, #1
 800344a:	4013      	ands	r3, r2
 800344c:	60bb      	str	r3, [r7, #8]
 800344e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003450:	214c      	movs	r1, #76	; 0x4c
 8003452:	187b      	adds	r3, r7, r1
 8003454:	220c      	movs	r2, #12
 8003456:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003458:	187b      	adds	r3, r7, r1
 800345a:	2202      	movs	r2, #2
 800345c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345e:	187b      	adds	r3, r7, r1
 8003460:	2200      	movs	r2, #0
 8003462:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003464:	187b      	adds	r3, r7, r1
 8003466:	2200      	movs	r2, #0
 8003468:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800346a:	187b      	adds	r3, r7, r1
 800346c:	2201      	movs	r2, #1
 800346e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003470:	187a      	adds	r2, r7, r1
 8003472:	23a0      	movs	r3, #160	; 0xa0
 8003474:	05db      	lsls	r3, r3, #23
 8003476:	0011      	movs	r1, r2
 8003478:	0018      	movs	r0, r3
 800347a:	f000 ffdb 	bl	8004434 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 800347e:	2200      	movs	r2, #0
 8003480:	2103      	movs	r1, #3
 8003482:	201c      	movs	r0, #28
 8003484:	f000 fed8 	bl	8004238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003488:	201c      	movs	r0, #28
 800348a:	f000 feea 	bl	8004262 <HAL_NVIC_EnableIRQ>
}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	46bd      	mov	sp, r7
 8003492:	b019      	add	sp, #100	; 0x64
 8003494:	bd90      	pop	{r4, r7, pc}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	40013800 	.word	0x40013800
 800349c:	40021000 	.word	0x40021000
 80034a0:	50000400 	.word	0x50000400
 80034a4:	40004400 	.word	0x40004400

080034a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034ac:	e7fe      	b.n	80034ac <NMI_Handler+0x4>

080034ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034b2:	e7fe      	b.n	80034b2 <HardFault_Handler+0x4>

080034b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80034b8:	46c0      	nop			; (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034cc:	f000 f914 	bl	80036f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034d0:	46c0      	nop			; (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO2_Pin);
 80034da:	2010      	movs	r0, #16
 80034dc:	f001 f964 	bl	80047a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 80034e0:	2020      	movs	r0, #32
 80034e2:	f001 f961 	bl	80047a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80034f0:	4b03      	ldr	r3, [pc, #12]	; (8003500 <TIM2_IRQHandler+0x14>)
 80034f2:	0018      	movs	r0, r3
 80034f4:	f002 ffb0 	bl	8006458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80034f8:	46c0      	nop			; (mov r8, r8)
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	2000035c 	.word	0x2000035c

08003504 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003508:	4b03      	ldr	r3, [pc, #12]	; (8003518 <SPI1_IRQHandler+0x14>)
 800350a:	0018      	movs	r0, r3
 800350c:	f002 fc30 	bl	8005d70 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003510:	46c0      	nop			; (mov r8, r8)
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	200002f8 	.word	0x200002f8

0800351c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003520:	4b03      	ldr	r3, [pc, #12]	; (8003530 <USART1_IRQHandler+0x14>)
 8003522:	0018      	movs	r0, r3
 8003524:	f003 fcc4 	bl	8006eb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003528:	46c0      	nop			; (mov r8, r8)
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	200003a8 	.word	0x200003a8

08003534 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003538:	4b03      	ldr	r3, [pc, #12]	; (8003548 <USART2_IRQHandler+0x14>)
 800353a:	0018      	movs	r0, r3
 800353c:	f003 fcb8 	bl	8006eb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003540:	46c0      	nop			; (mov r8, r8)
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	20000438 	.word	0x20000438

0800354c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003554:	4a14      	ldr	r2, [pc, #80]	; (80035a8 <_sbrk+0x5c>)
 8003556:	4b15      	ldr	r3, [pc, #84]	; (80035ac <_sbrk+0x60>)
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003560:	4b13      	ldr	r3, [pc, #76]	; (80035b0 <_sbrk+0x64>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d102      	bne.n	800356e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003568:	4b11      	ldr	r3, [pc, #68]	; (80035b0 <_sbrk+0x64>)
 800356a:	4a12      	ldr	r2, [pc, #72]	; (80035b4 <_sbrk+0x68>)
 800356c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800356e:	4b10      	ldr	r3, [pc, #64]	; (80035b0 <_sbrk+0x64>)
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	18d3      	adds	r3, r2, r3
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	429a      	cmp	r2, r3
 800357a:	d207      	bcs.n	800358c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800357c:	f005 fbaa 	bl	8008cd4 <__errno>
 8003580:	0003      	movs	r3, r0
 8003582:	220c      	movs	r2, #12
 8003584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003586:	2301      	movs	r3, #1
 8003588:	425b      	negs	r3, r3
 800358a:	e009      	b.n	80035a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800358c:	4b08      	ldr	r3, [pc, #32]	; (80035b0 <_sbrk+0x64>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003592:	4b07      	ldr	r3, [pc, #28]	; (80035b0 <_sbrk+0x64>)
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	18d2      	adds	r2, r2, r3
 800359a:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <_sbrk+0x64>)
 800359c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800359e:	68fb      	ldr	r3, [r7, #12]
}
 80035a0:	0018      	movs	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	b006      	add	sp, #24
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	20009000 	.word	0x20009000
 80035ac:	00000400 	.word	0x00000400
 80035b0:	2000055c 	.word	0x2000055c
 80035b4:	20000580 	.word	0x20000580

080035b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
 80035bc:	4b03      	ldr	r3, [pc, #12]	; (80035cc <SystemInit+0x14>)
 80035be:	2280      	movs	r2, #128	; 0x80
 80035c0:	0512      	lsls	r2, r2, #20
 80035c2:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	e000ed00 	.word	0xe000ed00

080035d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035d0:	480d      	ldr	r0, [pc, #52]	; (8003608 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80035d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80035d4:	f7ff fff0 	bl	80035b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035d8:	480c      	ldr	r0, [pc, #48]	; (800360c <LoopForever+0x6>)
  ldr r1, =_edata
 80035da:	490d      	ldr	r1, [pc, #52]	; (8003610 <LoopForever+0xa>)
  ldr r2, =_sidata
 80035dc:	4a0d      	ldr	r2, [pc, #52]	; (8003614 <LoopForever+0xe>)
  movs r3, #0
 80035de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035e0:	e002      	b.n	80035e8 <LoopCopyDataInit>

080035e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035e6:	3304      	adds	r3, #4

080035e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035ec:	d3f9      	bcc.n	80035e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035ee:	4a0a      	ldr	r2, [pc, #40]	; (8003618 <LoopForever+0x12>)
  ldr r4, =_ebss
 80035f0:	4c0a      	ldr	r4, [pc, #40]	; (800361c <LoopForever+0x16>)
  movs r3, #0
 80035f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035f4:	e001      	b.n	80035fa <LoopFillZerobss>

080035f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035f8:	3204      	adds	r2, #4

080035fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035fc:	d3fb      	bcc.n	80035f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80035fe:	f005 fb6f 	bl	8008ce0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003602:	f7ff fa13 	bl	8002a2c <main>

08003606 <LoopForever>:

LoopForever:
  b LoopForever
 8003606:	e7fe      	b.n	8003606 <LoopForever>
  ldr   r0, =_estack
 8003608:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800360c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003610:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003614:	08009c9c 	.word	0x08009c9c
  ldr r2, =_sbss
 8003618:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800361c:	2000057c 	.word	0x2000057c

08003620 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003620:	e7fe      	b.n	8003620 <ADC1_COMP_IRQHandler>
	...

08003624 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800362a:	1dfb      	adds	r3, r7, #7
 800362c:	2200      	movs	r2, #0
 800362e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003630:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <HAL_Init+0x3c>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	4b0a      	ldr	r3, [pc, #40]	; (8003660 <HAL_Init+0x3c>)
 8003636:	2180      	movs	r1, #128	; 0x80
 8003638:	0049      	lsls	r1, r1, #1
 800363a:	430a      	orrs	r2, r1
 800363c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800363e:	2001      	movs	r0, #1
 8003640:	f000 f810 	bl	8003664 <HAL_InitTick>
 8003644:	1e03      	subs	r3, r0, #0
 8003646:	d003      	beq.n	8003650 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003648:	1dfb      	adds	r3, r7, #7
 800364a:	2201      	movs	r2, #1
 800364c:	701a      	strb	r2, [r3, #0]
 800364e:	e001      	b.n	8003654 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003650:	f7ff fd76 	bl	8003140 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003654:	1dfb      	adds	r3, r7, #7
 8003656:	781b      	ldrb	r3, [r3, #0]
}
 8003658:	0018      	movs	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	b002      	add	sp, #8
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40022000 	.word	0x40022000

08003664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003664:	b590      	push	{r4, r7, lr}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800366c:	230f      	movs	r3, #15
 800366e:	18fb      	adds	r3, r7, r3
 8003670:	2200      	movs	r2, #0
 8003672:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003674:	4b1d      	ldr	r3, [pc, #116]	; (80036ec <HAL_InitTick+0x88>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d02b      	beq.n	80036d4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800367c:	4b1c      	ldr	r3, [pc, #112]	; (80036f0 <HAL_InitTick+0x8c>)
 800367e:	681c      	ldr	r4, [r3, #0]
 8003680:	4b1a      	ldr	r3, [pc, #104]	; (80036ec <HAL_InitTick+0x88>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	0019      	movs	r1, r3
 8003686:	23fa      	movs	r3, #250	; 0xfa
 8003688:	0098      	lsls	r0, r3, #2
 800368a:	f7fc fd45 	bl	8000118 <__udivsi3>
 800368e:	0003      	movs	r3, r0
 8003690:	0019      	movs	r1, r3
 8003692:	0020      	movs	r0, r4
 8003694:	f7fc fd40 	bl	8000118 <__udivsi3>
 8003698:	0003      	movs	r3, r0
 800369a:	0018      	movs	r0, r3
 800369c:	f000 fdf1 	bl	8004282 <HAL_SYSTICK_Config>
 80036a0:	1e03      	subs	r3, r0, #0
 80036a2:	d112      	bne.n	80036ca <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d80a      	bhi.n	80036c0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	2301      	movs	r3, #1
 80036ae:	425b      	negs	r3, r3
 80036b0:	2200      	movs	r2, #0
 80036b2:	0018      	movs	r0, r3
 80036b4:	f000 fdc0 	bl	8004238 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036b8:	4b0e      	ldr	r3, [pc, #56]	; (80036f4 <HAL_InitTick+0x90>)
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	e00d      	b.n	80036dc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80036c0:	230f      	movs	r3, #15
 80036c2:	18fb      	adds	r3, r7, r3
 80036c4:	2201      	movs	r2, #1
 80036c6:	701a      	strb	r2, [r3, #0]
 80036c8:	e008      	b.n	80036dc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80036ca:	230f      	movs	r3, #15
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	2201      	movs	r2, #1
 80036d0:	701a      	strb	r2, [r3, #0]
 80036d2:	e003      	b.n	80036dc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80036d4:	230f      	movs	r3, #15
 80036d6:	18fb      	adds	r3, r7, r3
 80036d8:	2201      	movs	r2, #1
 80036da:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80036dc:	230f      	movs	r3, #15
 80036de:	18fb      	adds	r3, r7, r3
 80036e0:	781b      	ldrb	r3, [r3, #0]
}
 80036e2:	0018      	movs	r0, r3
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b005      	add	sp, #20
 80036e8:	bd90      	pop	{r4, r7, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	20000008 	.word	0x20000008
 80036f0:	20000000 	.word	0x20000000
 80036f4:	20000004 	.word	0x20000004

080036f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036fc:	4b05      	ldr	r3, [pc, #20]	; (8003714 <HAL_IncTick+0x1c>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	001a      	movs	r2, r3
 8003702:	4b05      	ldr	r3, [pc, #20]	; (8003718 <HAL_IncTick+0x20>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	18d2      	adds	r2, r2, r3
 8003708:	4b03      	ldr	r3, [pc, #12]	; (8003718 <HAL_IncTick+0x20>)
 800370a:	601a      	str	r2, [r3, #0]
}
 800370c:	46c0      	nop			; (mov r8, r8)
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	20000008 	.word	0x20000008
 8003718:	20000568 	.word	0x20000568

0800371c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  return uwTick;
 8003720:	4b02      	ldr	r3, [pc, #8]	; (800372c <HAL_GetTick+0x10>)
 8003722:	681b      	ldr	r3, [r3, #0]
}
 8003724:	0018      	movs	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	20000568 	.word	0x20000568

08003730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003738:	f7ff fff0 	bl	800371c <HAL_GetTick>
 800373c:	0003      	movs	r3, r0
 800373e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	3301      	adds	r3, #1
 8003748:	d005      	beq.n	8003756 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800374a:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <HAL_Delay+0x44>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	001a      	movs	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	189b      	adds	r3, r3, r2
 8003754:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	f7ff ffe0 	bl	800371c <HAL_GetTick>
 800375c:	0002      	movs	r2, r0
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	429a      	cmp	r2, r3
 8003766:	d8f7      	bhi.n	8003758 <HAL_Delay+0x28>
  {
  }
}
 8003768:	46c0      	nop			; (mov r8, r8)
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	46bd      	mov	sp, r7
 800376e:	b004      	add	sp, #16
 8003770:	bd80      	pop	{r7, pc}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	20000008 	.word	0x20000008

08003778 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003780:	4b06      	ldr	r3, [pc, #24]	; (800379c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a06      	ldr	r2, [pc, #24]	; (80037a0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003786:	4013      	ands	r3, r2
 8003788:	0019      	movs	r1, r3
 800378a:	4b04      	ldr	r3, [pc, #16]	; (800379c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	430a      	orrs	r2, r1
 8003790:	601a      	str	r2, [r3, #0]
}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b002      	add	sp, #8
 8003798:	bd80      	pop	{r7, pc}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	40010000 	.word	0x40010000
 80037a0:	fffff9ff 	.word	0xfffff9ff

080037a4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a05      	ldr	r2, [pc, #20]	; (80037c8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80037b4:	401a      	ands	r2, r3
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	601a      	str	r2, [r3, #0]
}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b002      	add	sp, #8
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	fe3fffff 	.word	0xfe3fffff

080037cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	23e0      	movs	r3, #224	; 0xe0
 80037da:	045b      	lsls	r3, r3, #17
 80037dc:	4013      	ands	r3, r2
}
 80037de:	0018      	movs	r0, r3
 80037e0:	46bd      	mov	sp, r7
 80037e2:	b002      	add	sp, #8
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b084      	sub	sp, #16
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	2104      	movs	r1, #4
 80037fa:	400a      	ands	r2, r1
 80037fc:	2107      	movs	r1, #7
 80037fe:	4091      	lsls	r1, r2
 8003800:	000a      	movs	r2, r1
 8003802:	43d2      	mvns	r2, r2
 8003804:	401a      	ands	r2, r3
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2104      	movs	r1, #4
 800380a:	400b      	ands	r3, r1
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	4099      	lsls	r1, r3
 8003810:	000b      	movs	r3, r1
 8003812:	431a      	orrs	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003818:	46c0      	nop			; (mov r8, r8)
 800381a:	46bd      	mov	sp, r7
 800381c:	b004      	add	sp, #16
 800381e:	bd80      	pop	{r7, pc}

08003820 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	211f      	movs	r1, #31
 8003834:	400a      	ands	r2, r1
 8003836:	210f      	movs	r1, #15
 8003838:	4091      	lsls	r1, r2
 800383a:	000a      	movs	r2, r1
 800383c:	43d2      	mvns	r2, r2
 800383e:	401a      	ands	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	0e9b      	lsrs	r3, r3, #26
 8003844:	210f      	movs	r1, #15
 8003846:	4019      	ands	r1, r3
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	201f      	movs	r0, #31
 800384c:	4003      	ands	r3, r0
 800384e:	4099      	lsls	r1, r3
 8003850:	000b      	movs	r3, r1
 8003852:	431a      	orrs	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003858:	46c0      	nop			; (mov r8, r8)
 800385a:	46bd      	mov	sp, r7
 800385c:	b004      	add	sp, #16
 800385e:	bd80      	pop	{r7, pc}

08003860 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	035b      	lsls	r3, r3, #13
 8003872:	0b5b      	lsrs	r3, r3, #13
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	629a      	str	r2, [r3, #40]	; 0x28
}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	46bd      	mov	sp, r7
 800387e:	b002      	add	sp, #8
 8003880:	bd80      	pop	{r7, pc}

08003882 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b082      	sub	sp, #8
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	0352      	lsls	r2, r2, #13
 8003894:	0b52      	lsrs	r2, r2, #13
 8003896:	43d2      	mvns	r2, r2
 8003898:	401a      	ands	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	46bd      	mov	sp, r7
 80038a2:	b002      	add	sp, #8
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	0212      	lsls	r2, r2, #8
 80038bc:	43d2      	mvns	r2, r2
 80038be:	401a      	ands	r2, r3
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	021b      	lsls	r3, r3, #8
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	400b      	ands	r3, r1
 80038c8:	4904      	ldr	r1, [pc, #16]	; (80038dc <LL_ADC_SetChannelSamplingTime+0x34>)
 80038ca:	400b      	ands	r3, r1
 80038cc:	431a      	orrs	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b004      	add	sp, #16
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	07ffff00 	.word	0x07ffff00

080038e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4a05      	ldr	r2, [pc, #20]	; (8003904 <LL_ADC_EnableInternalRegulator+0x24>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	2280      	movs	r2, #128	; 0x80
 80038f2:	0552      	lsls	r2, r2, #21
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b002      	add	sp, #8
 8003900:	bd80      	pop	{r7, pc}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	6fffffe8 	.word	0x6fffffe8

08003908 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	2380      	movs	r3, #128	; 0x80
 8003916:	055b      	lsls	r3, r3, #21
 8003918:	401a      	ands	r2, r3
 800391a:	2380      	movs	r3, #128	; 0x80
 800391c:	055b      	lsls	r3, r3, #21
 800391e:	429a      	cmp	r2, r3
 8003920:	d101      	bne.n	8003926 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003926:	2300      	movs	r3, #0
}
 8003928:	0018      	movs	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	b002      	add	sp, #8
 800392e:	bd80      	pop	{r7, pc}

08003930 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	2201      	movs	r2, #1
 800393e:	4013      	ands	r3, r2
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <LL_ADC_IsEnabled+0x18>
 8003944:	2301      	movs	r3, #1
 8003946:	e000      	b.n	800394a <LL_ADC_IsEnabled+0x1a>
 8003948:	2300      	movs	r3, #0
}
 800394a:	0018      	movs	r0, r3
 800394c:	46bd      	mov	sp, r7
 800394e:	b002      	add	sp, #8
 8003950:	bd80      	pop	{r7, pc}

08003952 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	2204      	movs	r2, #4
 8003960:	4013      	ands	r3, r2
 8003962:	2b04      	cmp	r3, #4
 8003964:	d101      	bne.n	800396a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003966:	2301      	movs	r3, #1
 8003968:	e000      	b.n	800396c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800396a:	2300      	movs	r3, #0
}
 800396c:	0018      	movs	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	b002      	add	sp, #8
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b088      	sub	sp, #32
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800397c:	231f      	movs	r3, #31
 800397e:	18fb      	adds	r3, r7, r3
 8003980:	2200      	movs	r2, #0
 8003982:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003984:	2300      	movs	r3, #0
 8003986:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800398c:	2300      	movs	r3, #0
 800398e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e1b1      	b.n	8003cfe <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10a      	bne.n	80039b8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	0018      	movs	r0, r3
 80039a6:	f7ff fbf3 	bl	8003190 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2254      	movs	r2, #84	; 0x54
 80039b4:	2100      	movs	r1, #0
 80039b6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	0018      	movs	r0, r3
 80039be:	f7ff ffa3 	bl	8003908 <LL_ADC_IsInternalRegulatorEnabled>
 80039c2:	1e03      	subs	r3, r0, #0
 80039c4:	d115      	bne.n	80039f2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	0018      	movs	r0, r3
 80039cc:	f7ff ff88 	bl	80038e0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039d0:	4bcd      	ldr	r3, [pc, #820]	; (8003d08 <HAL_ADC_Init+0x394>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	49cd      	ldr	r1, [pc, #820]	; (8003d0c <HAL_ADC_Init+0x398>)
 80039d6:	0018      	movs	r0, r3
 80039d8:	f7fc fb9e 	bl	8000118 <__udivsi3>
 80039dc:	0003      	movs	r3, r0
 80039de:	3301      	adds	r3, #1
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80039e4:	e002      	b.n	80039ec <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	3b01      	subs	r3, #1
 80039ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f9      	bne.n	80039e6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	0018      	movs	r0, r3
 80039f8:	f7ff ff86 	bl	8003908 <LL_ADC_IsInternalRegulatorEnabled>
 80039fc:	1e03      	subs	r3, r0, #0
 80039fe:	d10f      	bne.n	8003a20 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a04:	2210      	movs	r2, #16
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a10:	2201      	movs	r2, #1
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a18:	231f      	movs	r3, #31
 8003a1a:	18fb      	adds	r3, r7, r3
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	0018      	movs	r0, r3
 8003a26:	f7ff ff94 	bl	8003952 <LL_ADC_REG_IsConversionOngoing>
 8003a2a:	0003      	movs	r3, r0
 8003a2c:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a32:	2210      	movs	r2, #16
 8003a34:	4013      	ands	r3, r2
 8003a36:	d000      	beq.n	8003a3a <HAL_ADC_Init+0xc6>
 8003a38:	e154      	b.n	8003ce4 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d000      	beq.n	8003a42 <HAL_ADC_Init+0xce>
 8003a40:	e150      	b.n	8003ce4 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a46:	4ab2      	ldr	r2, [pc, #712]	; (8003d10 <HAL_ADC_Init+0x39c>)
 8003a48:	4013      	ands	r3, r2
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	0018      	movs	r0, r3
 8003a58:	f7ff ff6a 	bl	8003930 <LL_ADC_IsEnabled>
 8003a5c:	1e03      	subs	r3, r0, #0
 8003a5e:	d156      	bne.n	8003b0e <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	2218      	movs	r2, #24
 8003a68:	4393      	bics	r3, r2
 8003a6a:	0019      	movs	r1, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	0f9b      	lsrs	r3, r3, #30
 8003a7e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003a84:	4313      	orrs	r3, r2
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	223c      	movs	r2, #60	; 0x3c
 8003a90:	5c9b      	ldrb	r3, [r3, r2]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d111      	bne.n	8003aba <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	0f9b      	lsrs	r3, r3, #30
 8003a9c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003aa2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003aa8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003aae:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	4a94      	ldr	r2, [pc, #592]	; (8003d14 <HAL_ADC_Init+0x3a0>)
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	0019      	movs	r1, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	23c0      	movs	r3, #192	; 0xc0
 8003ad6:	061b      	lsls	r3, r3, #24
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d018      	beq.n	8003b0e <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003ae0:	2380      	movs	r3, #128	; 0x80
 8003ae2:	05db      	lsls	r3, r3, #23
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d012      	beq.n	8003b0e <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003aec:	2380      	movs	r3, #128	; 0x80
 8003aee:	061b      	lsls	r3, r3, #24
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d00c      	beq.n	8003b0e <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003af4:	4b88      	ldr	r3, [pc, #544]	; (8003d18 <HAL_ADC_Init+0x3a4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a88      	ldr	r2, [pc, #544]	; (8003d1c <HAL_ADC_Init+0x3a8>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	0019      	movs	r1, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	23f0      	movs	r3, #240	; 0xf0
 8003b04:	039b      	lsls	r3, r3, #14
 8003b06:	401a      	ands	r2, r3
 8003b08:	4b83      	ldr	r3, [pc, #524]	; (8003d18 <HAL_ADC_Init+0x3a4>)
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	7e1b      	ldrb	r3, [r3, #24]
 8003b12:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	7e5b      	ldrb	r3, [r3, #25]
 8003b18:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003b1a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	7e9b      	ldrb	r3, [r3, #26]
 8003b20:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003b22:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <HAL_ADC_Init+0x1be>
 8003b2c:	2380      	movs	r3, #128	; 0x80
 8003b2e:	015b      	lsls	r3, r3, #5
 8003b30:	e000      	b.n	8003b34 <HAL_ADC_Init+0x1c0>
 8003b32:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003b34:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003b3a:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	da04      	bge.n	8003b4e <HAL_ADC_Init+0x1da>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	085b      	lsrs	r3, r3, #1
 8003b4c:	e001      	b.n	8003b52 <HAL_ADC_Init+0x1de>
 8003b4e:	2380      	movs	r3, #128	; 0x80
 8003b50:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8003b52:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	212c      	movs	r1, #44	; 0x2c
 8003b58:	5c5b      	ldrb	r3, [r3, r1]
 8003b5a:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003b5c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2220      	movs	r2, #32
 8003b68:	5c9b      	ldrb	r3, [r3, r2]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d115      	bne.n	8003b9a <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	7e9b      	ldrb	r3, [r3, #26]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d105      	bne.n	8003b82 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	2280      	movs	r2, #128	; 0x80
 8003b7a:	0252      	lsls	r2, r2, #9
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
 8003b80:	e00b      	b.n	8003b9a <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b86:	2220      	movs	r2, #32
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b92:	2201      	movs	r2, #1
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00a      	beq.n	8003bb8 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ba6:	23e0      	movs	r3, #224	; 0xe0
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	4a58      	ldr	r2, [pc, #352]	; (8003d20 <HAL_ADC_Init+0x3ac>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	0019      	movs	r1, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	4a53      	ldr	r2, [pc, #332]	; (8003d24 <HAL_ADC_Init+0x3b0>)
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	0019      	movs	r1, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bec:	001a      	movs	r2, r3
 8003bee:	2100      	movs	r1, #0
 8003bf0:	f7ff fdf9 	bl	80037e6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6818      	ldr	r0, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfc:	494a      	ldr	r1, [pc, #296]	; (8003d28 <HAL_ADC_Init+0x3b4>)
 8003bfe:	001a      	movs	r2, r3
 8003c00:	f7ff fdf1 	bl	80037e6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d109      	bne.n	8003c20 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2110      	movs	r1, #16
 8003c18:	4249      	negs	r1, r1
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	629a      	str	r2, [r3, #40]	; 0x28
 8003c1e:	e03a      	b.n	8003c96 <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	2380      	movs	r3, #128	; 0x80
 8003c26:	039b      	lsls	r3, r3, #14
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d134      	bne.n	8003c96 <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	613b      	str	r3, [r7, #16]
 8003c30:	e00c      	b.n	8003c4c <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	40da      	lsrs	r2, r3
 8003c3c:	0013      	movs	r3, r2
 8003c3e:	220f      	movs	r2, #15
 8003c40:	4013      	ands	r3, r2
 8003c42:	2b0f      	cmp	r3, #15
 8003c44:	d006      	beq.n	8003c54 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	2b07      	cmp	r3, #7
 8003c50:	d9ef      	bls.n	8003c32 <HAL_ADC_Init+0x2be>
 8003c52:	e000      	b.n	8003c56 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8003c54:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d109      	bne.n	8003c70 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2110      	movs	r1, #16
 8003c68:	4249      	negs	r1, r1
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	629a      	str	r2, [r3, #40]	; 0x28
 8003c6e:	e012      	b.n	8003c96 <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	221c      	movs	r2, #28
 8003c80:	4013      	ands	r3, r2
 8003c82:	2210      	movs	r2, #16
 8003c84:	4252      	negs	r2, r2
 8003c86:	409a      	lsls	r2, r3
 8003c88:	0011      	movs	r1, r2
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	4a23      	ldr	r2, [pc, #140]	; (8003d2c <HAL_ADC_Init+0x3b8>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d10b      	bne.n	8003cbe <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb0:	2203      	movs	r2, #3
 8003cb2:	4393      	bics	r3, r2
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003cbc:	e01c      	b.n	8003cf8 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc2:	2212      	movs	r2, #18
 8003cc4:	4393      	bics	r3, r2
 8003cc6:	2210      	movs	r2, #16
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003cda:	231f      	movs	r3, #31
 8003cdc:	18fb      	adds	r3, r7, r3
 8003cde:	2201      	movs	r2, #1
 8003ce0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003ce2:	e009      	b.n	8003cf8 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce8:	2210      	movs	r2, #16
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003cf0:	231f      	movs	r3, #31
 8003cf2:	18fb      	adds	r3, r7, r3
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003cf8:	231f      	movs	r3, #31
 8003cfa:	18fb      	adds	r3, r7, r3
 8003cfc:	781b      	ldrb	r3, [r3, #0]
}
 8003cfe:	0018      	movs	r0, r3
 8003d00:	46bd      	mov	sp, r7
 8003d02:	b008      	add	sp, #32
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	46c0      	nop			; (mov r8, r8)
 8003d08:	20000000 	.word	0x20000000
 8003d0c:	00030d40 	.word	0x00030d40
 8003d10:	fffffefd 	.word	0xfffffefd
 8003d14:	1ffffc02 	.word	0x1ffffc02
 8003d18:	40012708 	.word	0x40012708
 8003d1c:	ffc3ffff 	.word	0xffc3ffff
 8003d20:	fffe0219 	.word	0xfffe0219
 8003d24:	dffffc02 	.word	0xdffffc02
 8003d28:	07ffff04 	.word	0x07ffff04
 8003d2c:	833fffe7 	.word	0x833fffe7

08003d30 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d3a:	2317      	movs	r3, #23
 8003d3c:	18fb      	adds	r3, r7, r3
 8003d3e:	2200      	movs	r2, #0
 8003d40:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003d42:	2300      	movs	r3, #0
 8003d44:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2254      	movs	r2, #84	; 0x54
 8003d4a:	5c9b      	ldrb	r3, [r3, r2]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x24>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e1c0      	b.n	80040d6 <HAL_ADC_ConfigChannel+0x3a6>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2254      	movs	r2, #84	; 0x54
 8003d58:	2101      	movs	r1, #1
 8003d5a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	0018      	movs	r0, r3
 8003d62:	f7ff fdf6 	bl	8003952 <LL_ADC_REG_IsConversionOngoing>
 8003d66:	1e03      	subs	r3, r0, #0
 8003d68:	d000      	beq.n	8003d6c <HAL_ADC_ConfigChannel+0x3c>
 8003d6a:	e1a3      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d100      	bne.n	8003d76 <HAL_ADC_ConfigChannel+0x46>
 8003d74:	e143      	b.n	8003ffe <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691a      	ldr	r2, [r3, #16]
 8003d7a:	2380      	movs	r3, #128	; 0x80
 8003d7c:	061b      	lsls	r3, r3, #24
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d004      	beq.n	8003d8c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d86:	4ac1      	ldr	r2, [pc, #772]	; (800408c <HAL_ADC_ConfigChannel+0x35c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d108      	bne.n	8003d9e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	0019      	movs	r1, r3
 8003d96:	0010      	movs	r0, r2
 8003d98:	f7ff fd62 	bl	8003860 <LL_ADC_REG_SetSequencerChAdd>
 8003d9c:	e0c9      	b.n	8003f32 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	211f      	movs	r1, #31
 8003da8:	400b      	ands	r3, r1
 8003daa:	210f      	movs	r1, #15
 8003dac:	4099      	lsls	r1, r3
 8003dae:	000b      	movs	r3, r1
 8003db0:	43db      	mvns	r3, r3
 8003db2:	4013      	ands	r3, r2
 8003db4:	0019      	movs	r1, r3
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	035b      	lsls	r3, r3, #13
 8003dbc:	0b5b      	lsrs	r3, r3, #13
 8003dbe:	d105      	bne.n	8003dcc <HAL_ADC_ConfigChannel+0x9c>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	0e9b      	lsrs	r3, r3, #26
 8003dc6:	221f      	movs	r2, #31
 8003dc8:	4013      	ands	r3, r2
 8003dca:	e098      	b.n	8003efe <HAL_ADC_ConfigChannel+0x1ce>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	d000      	beq.n	8003dd8 <HAL_ADC_ConfigChannel+0xa8>
 8003dd6:	e091      	b.n	8003efc <HAL_ADC_ConfigChannel+0x1cc>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2202      	movs	r2, #2
 8003dde:	4013      	ands	r3, r2
 8003de0:	d000      	beq.n	8003de4 <HAL_ADC_ConfigChannel+0xb4>
 8003de2:	e089      	b.n	8003ef8 <HAL_ADC_ConfigChannel+0x1c8>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2204      	movs	r2, #4
 8003dea:	4013      	ands	r3, r2
 8003dec:	d000      	beq.n	8003df0 <HAL_ADC_ConfigChannel+0xc0>
 8003dee:	e081      	b.n	8003ef4 <HAL_ADC_ConfigChannel+0x1c4>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2208      	movs	r2, #8
 8003df6:	4013      	ands	r3, r2
 8003df8:	d000      	beq.n	8003dfc <HAL_ADC_ConfigChannel+0xcc>
 8003dfa:	e079      	b.n	8003ef0 <HAL_ADC_ConfigChannel+0x1c0>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2210      	movs	r2, #16
 8003e02:	4013      	ands	r3, r2
 8003e04:	d000      	beq.n	8003e08 <HAL_ADC_ConfigChannel+0xd8>
 8003e06:	e071      	b.n	8003eec <HAL_ADC_ConfigChannel+0x1bc>
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	4013      	ands	r3, r2
 8003e10:	d000      	beq.n	8003e14 <HAL_ADC_ConfigChannel+0xe4>
 8003e12:	e069      	b.n	8003ee8 <HAL_ADC_ConfigChannel+0x1b8>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2240      	movs	r2, #64	; 0x40
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d000      	beq.n	8003e20 <HAL_ADC_ConfigChannel+0xf0>
 8003e1e:	e061      	b.n	8003ee4 <HAL_ADC_ConfigChannel+0x1b4>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2280      	movs	r2, #128	; 0x80
 8003e26:	4013      	ands	r3, r2
 8003e28:	d000      	beq.n	8003e2c <HAL_ADC_ConfigChannel+0xfc>
 8003e2a:	e059      	b.n	8003ee0 <HAL_ADC_ConfigChannel+0x1b0>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	2380      	movs	r3, #128	; 0x80
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	4013      	ands	r3, r2
 8003e36:	d151      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x1ac>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	2380      	movs	r3, #128	; 0x80
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4013      	ands	r3, r2
 8003e42:	d149      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x1a8>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	2380      	movs	r3, #128	; 0x80
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d141      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x1a4>
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	2380      	movs	r3, #128	; 0x80
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	4013      	ands	r3, r2
 8003e5a:	d139      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0x1a0>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	2380      	movs	r3, #128	; 0x80
 8003e62:	015b      	lsls	r3, r3, #5
 8003e64:	4013      	ands	r3, r2
 8003e66:	d131      	bne.n	8003ecc <HAL_ADC_ConfigChannel+0x19c>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	2380      	movs	r3, #128	; 0x80
 8003e6e:	019b      	lsls	r3, r3, #6
 8003e70:	4013      	ands	r3, r2
 8003e72:	d129      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x198>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	2380      	movs	r3, #128	; 0x80
 8003e7a:	01db      	lsls	r3, r3, #7
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	d121      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x194>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	2380      	movs	r3, #128	; 0x80
 8003e86:	021b      	lsls	r3, r3, #8
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d119      	bne.n	8003ec0 <HAL_ADC_ConfigChannel+0x190>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	2380      	movs	r3, #128	; 0x80
 8003e92:	025b      	lsls	r3, r3, #9
 8003e94:	4013      	ands	r3, r2
 8003e96:	d111      	bne.n	8003ebc <HAL_ADC_ConfigChannel+0x18c>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	2380      	movs	r3, #128	; 0x80
 8003e9e:	029b      	lsls	r3, r3, #10
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	d109      	bne.n	8003eb8 <HAL_ADC_ConfigChannel+0x188>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	2380      	movs	r3, #128	; 0x80
 8003eaa:	02db      	lsls	r3, r3, #11
 8003eac:	4013      	ands	r3, r2
 8003eae:	d001      	beq.n	8003eb4 <HAL_ADC_ConfigChannel+0x184>
 8003eb0:	2312      	movs	r3, #18
 8003eb2:	e024      	b.n	8003efe <HAL_ADC_ConfigChannel+0x1ce>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	e022      	b.n	8003efe <HAL_ADC_ConfigChannel+0x1ce>
 8003eb8:	2311      	movs	r3, #17
 8003eba:	e020      	b.n	8003efe <HAL_ADC_ConfigChannel+0x1ce>
 8003ebc:	2310      	movs	r3, #16
 8003ebe:	e01e      	b.n	8003efe <HAL_ADC_ConfigChannel+0x1ce>
 8003ec0:	230f      	movs	r3, #15
 8003ec2:	e01c      	b.n	8003efe <HAL_ADC_ConfigChannel+0x1ce>
 8003ec4:	230e      	movs	r3, #14
 8003ec6:	e01a      	b.n	8003efe <HAL_ADC_ConfigChannel+0x1ce>
 8003ec8:	230d      	movs	r3, #13
 8003eca:	e018      	b.n	8003efe <HAL_ADC_ConfigChannel+0x1ce>
 8003ecc:	230c      	movs	r3, #12
 8003ece:	e016      	b.n	8003efe <HAL_ADC_ConfigChannel+0x1ce>
 8003ed0:	230b      	movs	r3, #11
 8003ed2:	e014      	b.n	8003efe <HAL_ADC_ConfigChannel+0x1ce>
 8003ed4:	230a      	movs	r3, #10
 8003ed6:	e012      	b.n	8003efe <HAL_ADC_ConfigChannel+0x1ce>
 8003ed8:	2309      	movs	r3, #9
 8003eda:	e010      	b.n	8003efe <HAL_ADC_ConfigChannel+0x1ce>
 8003edc:	2308      	movs	r3, #8
 8003ede:	e00e      	b.n	8003efe <HAL_ADC_ConfigChannel+0x1ce>
 8003ee0:	2307      	movs	r3, #7
 8003ee2:	e00c      	b.n	8003efe <HAL_ADC_ConfigChannel+0x1ce>
 8003ee4:	2306      	movs	r3, #6
 8003ee6:	e00a      	b.n	8003efe <HAL_ADC_ConfigChannel+0x1ce>
 8003ee8:	2305      	movs	r3, #5
 8003eea:	e008      	b.n	8003efe <HAL_ADC_ConfigChannel+0x1ce>
 8003eec:	2304      	movs	r3, #4
 8003eee:	e006      	b.n	8003efe <HAL_ADC_ConfigChannel+0x1ce>
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e004      	b.n	8003efe <HAL_ADC_ConfigChannel+0x1ce>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e002      	b.n	8003efe <HAL_ADC_ConfigChannel+0x1ce>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e000      	b.n	8003efe <HAL_ADC_ConfigChannel+0x1ce>
 8003efc:	2300      	movs	r3, #0
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	6852      	ldr	r2, [r2, #4]
 8003f02:	201f      	movs	r0, #31
 8003f04:	4002      	ands	r2, r0
 8003f06:	4093      	lsls	r3, r2
 8003f08:	000a      	movs	r2, r1
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	089b      	lsrs	r3, r3, #2
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d808      	bhi.n	8003f32 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6818      	ldr	r0, [r3, #0]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	6859      	ldr	r1, [r3, #4]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	001a      	movs	r2, r3
 8003f2e:	f7ff fc77 	bl	8003820 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6818      	ldr	r0, [r3, #0]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	6819      	ldr	r1, [r3, #0]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	001a      	movs	r2, r3
 8003f40:	f7ff fcb2 	bl	80038a8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	db00      	blt.n	8003f4e <HAL_ADC_ConfigChannel+0x21e>
 8003f4c:	e0bc      	b.n	80040c8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f4e:	4b50      	ldr	r3, [pc, #320]	; (8004090 <HAL_ADC_ConfigChannel+0x360>)
 8003f50:	0018      	movs	r0, r3
 8003f52:	f7ff fc3b 	bl	80037cc <LL_ADC_GetCommonPathInternalCh>
 8003f56:	0003      	movs	r3, r0
 8003f58:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a4d      	ldr	r2, [pc, #308]	; (8004094 <HAL_ADC_ConfigChannel+0x364>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d122      	bne.n	8003faa <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	2380      	movs	r3, #128	; 0x80
 8003f68:	041b      	lsls	r3, r3, #16
 8003f6a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003f6c:	d11d      	bne.n	8003faa <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	2280      	movs	r2, #128	; 0x80
 8003f72:	0412      	lsls	r2, r2, #16
 8003f74:	4313      	orrs	r3, r2
 8003f76:	4a46      	ldr	r2, [pc, #280]	; (8004090 <HAL_ADC_ConfigChannel+0x360>)
 8003f78:	0019      	movs	r1, r3
 8003f7a:	0010      	movs	r0, r2
 8003f7c:	f7ff fc12 	bl	80037a4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f80:	4b45      	ldr	r3, [pc, #276]	; (8004098 <HAL_ADC_ConfigChannel+0x368>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4945      	ldr	r1, [pc, #276]	; (800409c <HAL_ADC_ConfigChannel+0x36c>)
 8003f86:	0018      	movs	r0, r3
 8003f88:	f7fc f8c6 	bl	8000118 <__udivsi3>
 8003f8c:	0003      	movs	r3, r0
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	0013      	movs	r3, r2
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	189b      	adds	r3, r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f9a:	e002      	b.n	8003fa2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1f9      	bne.n	8003f9c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003fa8:	e08e      	b.n	80040c8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a3c      	ldr	r2, [pc, #240]	; (80040a0 <HAL_ADC_ConfigChannel+0x370>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d10e      	bne.n	8003fd2 <HAL_ADC_ConfigChannel+0x2a2>
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	2380      	movs	r3, #128	; 0x80
 8003fb8:	045b      	lsls	r3, r3, #17
 8003fba:	4013      	ands	r3, r2
 8003fbc:	d109      	bne.n	8003fd2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	2280      	movs	r2, #128	; 0x80
 8003fc2:	0452      	lsls	r2, r2, #17
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	4a32      	ldr	r2, [pc, #200]	; (8004090 <HAL_ADC_ConfigChannel+0x360>)
 8003fc8:	0019      	movs	r1, r3
 8003fca:	0010      	movs	r0, r2
 8003fcc:	f7ff fbea 	bl	80037a4 <LL_ADC_SetCommonPathInternalCh>
 8003fd0:	e07a      	b.n	80040c8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a33      	ldr	r2, [pc, #204]	; (80040a4 <HAL_ADC_ConfigChannel+0x374>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d000      	beq.n	8003fde <HAL_ADC_ConfigChannel+0x2ae>
 8003fdc:	e074      	b.n	80040c8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	2380      	movs	r3, #128	; 0x80
 8003fe2:	03db      	lsls	r3, r3, #15
 8003fe4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003fe6:	d000      	beq.n	8003fea <HAL_ADC_ConfigChannel+0x2ba>
 8003fe8:	e06e      	b.n	80040c8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	2280      	movs	r2, #128	; 0x80
 8003fee:	03d2      	lsls	r2, r2, #15
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	4a27      	ldr	r2, [pc, #156]	; (8004090 <HAL_ADC_ConfigChannel+0x360>)
 8003ff4:	0019      	movs	r1, r3
 8003ff6:	0010      	movs	r0, r2
 8003ff8:	f7ff fbd4 	bl	80037a4 <LL_ADC_SetCommonPathInternalCh>
 8003ffc:	e064      	b.n	80040c8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691a      	ldr	r2, [r3, #16]
 8004002:	2380      	movs	r3, #128	; 0x80
 8004004:	061b      	lsls	r3, r3, #24
 8004006:	429a      	cmp	r2, r3
 8004008:	d004      	beq.n	8004014 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800400e:	4a1f      	ldr	r2, [pc, #124]	; (800408c <HAL_ADC_ConfigChannel+0x35c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d107      	bne.n	8004024 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	0019      	movs	r1, r3
 800401e:	0010      	movs	r0, r2
 8004020:	f7ff fc2f 	bl	8003882 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	da4d      	bge.n	80040c8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800402c:	4b18      	ldr	r3, [pc, #96]	; (8004090 <HAL_ADC_ConfigChannel+0x360>)
 800402e:	0018      	movs	r0, r3
 8004030:	f7ff fbcc 	bl	80037cc <LL_ADC_GetCommonPathInternalCh>
 8004034:	0003      	movs	r3, r0
 8004036:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a15      	ldr	r2, [pc, #84]	; (8004094 <HAL_ADC_ConfigChannel+0x364>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d108      	bne.n	8004054 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	4a18      	ldr	r2, [pc, #96]	; (80040a8 <HAL_ADC_ConfigChannel+0x378>)
 8004046:	4013      	ands	r3, r2
 8004048:	4a11      	ldr	r2, [pc, #68]	; (8004090 <HAL_ADC_ConfigChannel+0x360>)
 800404a:	0019      	movs	r1, r3
 800404c:	0010      	movs	r0, r2
 800404e:	f7ff fba9 	bl	80037a4 <LL_ADC_SetCommonPathInternalCh>
 8004052:	e039      	b.n	80040c8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a11      	ldr	r2, [pc, #68]	; (80040a0 <HAL_ADC_ConfigChannel+0x370>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d108      	bne.n	8004070 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	4a12      	ldr	r2, [pc, #72]	; (80040ac <HAL_ADC_ConfigChannel+0x37c>)
 8004062:	4013      	ands	r3, r2
 8004064:	4a0a      	ldr	r2, [pc, #40]	; (8004090 <HAL_ADC_ConfigChannel+0x360>)
 8004066:	0019      	movs	r1, r3
 8004068:	0010      	movs	r0, r2
 800406a:	f7ff fb9b 	bl	80037a4 <LL_ADC_SetCommonPathInternalCh>
 800406e:	e02b      	b.n	80040c8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a0b      	ldr	r2, [pc, #44]	; (80040a4 <HAL_ADC_ConfigChannel+0x374>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d126      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	4a0c      	ldr	r2, [pc, #48]	; (80040b0 <HAL_ADC_ConfigChannel+0x380>)
 800407e:	4013      	ands	r3, r2
 8004080:	4a03      	ldr	r2, [pc, #12]	; (8004090 <HAL_ADC_ConfigChannel+0x360>)
 8004082:	0019      	movs	r1, r3
 8004084:	0010      	movs	r0, r2
 8004086:	f7ff fb8d 	bl	80037a4 <LL_ADC_SetCommonPathInternalCh>
 800408a:	e01d      	b.n	80040c8 <HAL_ADC_ConfigChannel+0x398>
 800408c:	80000004 	.word	0x80000004
 8004090:	40012708 	.word	0x40012708
 8004094:	b0001000 	.word	0xb0001000
 8004098:	20000000 	.word	0x20000000
 800409c:	00030d40 	.word	0x00030d40
 80040a0:	b8004000 	.word	0xb8004000
 80040a4:	b4002000 	.word	0xb4002000
 80040a8:	ff7fffff 	.word	0xff7fffff
 80040ac:	feffffff 	.word	0xfeffffff
 80040b0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b8:	2220      	movs	r2, #32
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80040c0:	2317      	movs	r3, #23
 80040c2:	18fb      	adds	r3, r7, r3
 80040c4:	2201      	movs	r2, #1
 80040c6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2254      	movs	r2, #84	; 0x54
 80040cc:	2100      	movs	r1, #0
 80040ce:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80040d0:	2317      	movs	r3, #23
 80040d2:	18fb      	adds	r3, r7, r3
 80040d4:	781b      	ldrb	r3, [r3, #0]
}
 80040d6:	0018      	movs	r0, r3
 80040d8:	46bd      	mov	sp, r7
 80040da:	b006      	add	sp, #24
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	46c0      	nop			; (mov r8, r8)

080040e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	0002      	movs	r2, r0
 80040e8:	1dfb      	adds	r3, r7, #7
 80040ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80040ec:	1dfb      	adds	r3, r7, #7
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b7f      	cmp	r3, #127	; 0x7f
 80040f2:	d809      	bhi.n	8004108 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040f4:	1dfb      	adds	r3, r7, #7
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	001a      	movs	r2, r3
 80040fa:	231f      	movs	r3, #31
 80040fc:	401a      	ands	r2, r3
 80040fe:	4b04      	ldr	r3, [pc, #16]	; (8004110 <__NVIC_EnableIRQ+0x30>)
 8004100:	2101      	movs	r1, #1
 8004102:	4091      	lsls	r1, r2
 8004104:	000a      	movs	r2, r1
 8004106:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004108:	46c0      	nop			; (mov r8, r8)
 800410a:	46bd      	mov	sp, r7
 800410c:	b002      	add	sp, #8
 800410e:	bd80      	pop	{r7, pc}
 8004110:	e000e100 	.word	0xe000e100

08004114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004114:	b590      	push	{r4, r7, lr}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	0002      	movs	r2, r0
 800411c:	6039      	str	r1, [r7, #0]
 800411e:	1dfb      	adds	r3, r7, #7
 8004120:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004122:	1dfb      	adds	r3, r7, #7
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	2b7f      	cmp	r3, #127	; 0x7f
 8004128:	d828      	bhi.n	800417c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800412a:	4a2f      	ldr	r2, [pc, #188]	; (80041e8 <__NVIC_SetPriority+0xd4>)
 800412c:	1dfb      	adds	r3, r7, #7
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	b25b      	sxtb	r3, r3
 8004132:	089b      	lsrs	r3, r3, #2
 8004134:	33c0      	adds	r3, #192	; 0xc0
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	589b      	ldr	r3, [r3, r2]
 800413a:	1dfa      	adds	r2, r7, #7
 800413c:	7812      	ldrb	r2, [r2, #0]
 800413e:	0011      	movs	r1, r2
 8004140:	2203      	movs	r2, #3
 8004142:	400a      	ands	r2, r1
 8004144:	00d2      	lsls	r2, r2, #3
 8004146:	21ff      	movs	r1, #255	; 0xff
 8004148:	4091      	lsls	r1, r2
 800414a:	000a      	movs	r2, r1
 800414c:	43d2      	mvns	r2, r2
 800414e:	401a      	ands	r2, r3
 8004150:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	019b      	lsls	r3, r3, #6
 8004156:	22ff      	movs	r2, #255	; 0xff
 8004158:	401a      	ands	r2, r3
 800415a:	1dfb      	adds	r3, r7, #7
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	0018      	movs	r0, r3
 8004160:	2303      	movs	r3, #3
 8004162:	4003      	ands	r3, r0
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004168:	481f      	ldr	r0, [pc, #124]	; (80041e8 <__NVIC_SetPriority+0xd4>)
 800416a:	1dfb      	adds	r3, r7, #7
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	b25b      	sxtb	r3, r3
 8004170:	089b      	lsrs	r3, r3, #2
 8004172:	430a      	orrs	r2, r1
 8004174:	33c0      	adds	r3, #192	; 0xc0
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800417a:	e031      	b.n	80041e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800417c:	4a1b      	ldr	r2, [pc, #108]	; (80041ec <__NVIC_SetPriority+0xd8>)
 800417e:	1dfb      	adds	r3, r7, #7
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	0019      	movs	r1, r3
 8004184:	230f      	movs	r3, #15
 8004186:	400b      	ands	r3, r1
 8004188:	3b08      	subs	r3, #8
 800418a:	089b      	lsrs	r3, r3, #2
 800418c:	3306      	adds	r3, #6
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	18d3      	adds	r3, r2, r3
 8004192:	3304      	adds	r3, #4
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	1dfa      	adds	r2, r7, #7
 8004198:	7812      	ldrb	r2, [r2, #0]
 800419a:	0011      	movs	r1, r2
 800419c:	2203      	movs	r2, #3
 800419e:	400a      	ands	r2, r1
 80041a0:	00d2      	lsls	r2, r2, #3
 80041a2:	21ff      	movs	r1, #255	; 0xff
 80041a4:	4091      	lsls	r1, r2
 80041a6:	000a      	movs	r2, r1
 80041a8:	43d2      	mvns	r2, r2
 80041aa:	401a      	ands	r2, r3
 80041ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	019b      	lsls	r3, r3, #6
 80041b2:	22ff      	movs	r2, #255	; 0xff
 80041b4:	401a      	ands	r2, r3
 80041b6:	1dfb      	adds	r3, r7, #7
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	0018      	movs	r0, r3
 80041bc:	2303      	movs	r3, #3
 80041be:	4003      	ands	r3, r0
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041c4:	4809      	ldr	r0, [pc, #36]	; (80041ec <__NVIC_SetPriority+0xd8>)
 80041c6:	1dfb      	adds	r3, r7, #7
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	001c      	movs	r4, r3
 80041cc:	230f      	movs	r3, #15
 80041ce:	4023      	ands	r3, r4
 80041d0:	3b08      	subs	r3, #8
 80041d2:	089b      	lsrs	r3, r3, #2
 80041d4:	430a      	orrs	r2, r1
 80041d6:	3306      	adds	r3, #6
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	18c3      	adds	r3, r0, r3
 80041dc:	3304      	adds	r3, #4
 80041de:	601a      	str	r2, [r3, #0]
}
 80041e0:	46c0      	nop			; (mov r8, r8)
 80041e2:	46bd      	mov	sp, r7
 80041e4:	b003      	add	sp, #12
 80041e6:	bd90      	pop	{r4, r7, pc}
 80041e8:	e000e100 	.word	0xe000e100
 80041ec:	e000ed00 	.word	0xe000ed00

080041f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	1e5a      	subs	r2, r3, #1
 80041fc:	2380      	movs	r3, #128	; 0x80
 80041fe:	045b      	lsls	r3, r3, #17
 8004200:	429a      	cmp	r2, r3
 8004202:	d301      	bcc.n	8004208 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004204:	2301      	movs	r3, #1
 8004206:	e010      	b.n	800422a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004208:	4b0a      	ldr	r3, [pc, #40]	; (8004234 <SysTick_Config+0x44>)
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	3a01      	subs	r2, #1
 800420e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004210:	2301      	movs	r3, #1
 8004212:	425b      	negs	r3, r3
 8004214:	2103      	movs	r1, #3
 8004216:	0018      	movs	r0, r3
 8004218:	f7ff ff7c 	bl	8004114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800421c:	4b05      	ldr	r3, [pc, #20]	; (8004234 <SysTick_Config+0x44>)
 800421e:	2200      	movs	r2, #0
 8004220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004222:	4b04      	ldr	r3, [pc, #16]	; (8004234 <SysTick_Config+0x44>)
 8004224:	2207      	movs	r2, #7
 8004226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004228:	2300      	movs	r3, #0
}
 800422a:	0018      	movs	r0, r3
 800422c:	46bd      	mov	sp, r7
 800422e:	b002      	add	sp, #8
 8004230:	bd80      	pop	{r7, pc}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	e000e010 	.word	0xe000e010

08004238 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	607a      	str	r2, [r7, #4]
 8004242:	210f      	movs	r1, #15
 8004244:	187b      	adds	r3, r7, r1
 8004246:	1c02      	adds	r2, r0, #0
 8004248:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	187b      	adds	r3, r7, r1
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	b25b      	sxtb	r3, r3
 8004252:	0011      	movs	r1, r2
 8004254:	0018      	movs	r0, r3
 8004256:	f7ff ff5d 	bl	8004114 <__NVIC_SetPriority>
}
 800425a:	46c0      	nop			; (mov r8, r8)
 800425c:	46bd      	mov	sp, r7
 800425e:	b004      	add	sp, #16
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b082      	sub	sp, #8
 8004266:	af00      	add	r7, sp, #0
 8004268:	0002      	movs	r2, r0
 800426a:	1dfb      	adds	r3, r7, #7
 800426c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800426e:	1dfb      	adds	r3, r7, #7
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	b25b      	sxtb	r3, r3
 8004274:	0018      	movs	r0, r3
 8004276:	f7ff ff33 	bl	80040e0 <__NVIC_EnableIRQ>
}
 800427a:	46c0      	nop			; (mov r8, r8)
 800427c:	46bd      	mov	sp, r7
 800427e:	b002      	add	sp, #8
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b082      	sub	sp, #8
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	0018      	movs	r0, r3
 800428e:	f7ff ffaf 	bl	80041f0 <SysTick_Config>
 8004292:	0003      	movs	r3, r0
}
 8004294:	0018      	movs	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	b002      	add	sp, #8
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e050      	b.n	8004350 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2225      	movs	r2, #37	; 0x25
 80042b2:	5c9b      	ldrb	r3, [r3, r2]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d008      	beq.n	80042cc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2204      	movs	r2, #4
 80042be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2224      	movs	r2, #36	; 0x24
 80042c4:	2100      	movs	r1, #0
 80042c6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e041      	b.n	8004350 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	210e      	movs	r1, #14
 80042d8:	438a      	bics	r2, r1
 80042da:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e6:	491c      	ldr	r1, [pc, #112]	; (8004358 <HAL_DMA_Abort+0xbc>)
 80042e8:	400a      	ands	r2, r1
 80042ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2101      	movs	r1, #1
 80042f8:	438a      	bics	r2, r1
 80042fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80042fc:	4b17      	ldr	r3, [pc, #92]	; (800435c <HAL_DMA_Abort+0xc0>)
 80042fe:	6859      	ldr	r1, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	221c      	movs	r2, #28
 8004306:	4013      	ands	r3, r2
 8004308:	2201      	movs	r2, #1
 800430a:	409a      	lsls	r2, r3
 800430c:	4b13      	ldr	r3, [pc, #76]	; (800435c <HAL_DMA_Abort+0xc0>)
 800430e:	430a      	orrs	r2, r1
 8004310:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800431a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00c      	beq.n	800433e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800432e:	490a      	ldr	r1, [pc, #40]	; (8004358 <HAL_DMA_Abort+0xbc>)
 8004330:	400a      	ands	r2, r1
 8004332:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800433c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2225      	movs	r2, #37	; 0x25
 8004342:	2101      	movs	r1, #1
 8004344:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2224      	movs	r2, #36	; 0x24
 800434a:	2100      	movs	r1, #0
 800434c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	0018      	movs	r0, r3
 8004352:	46bd      	mov	sp, r7
 8004354:	b002      	add	sp, #8
 8004356:	bd80      	pop	{r7, pc}
 8004358:	fffffeff 	.word	0xfffffeff
 800435c:	40020000 	.word	0x40020000

08004360 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004368:	210f      	movs	r1, #15
 800436a:	187b      	adds	r3, r7, r1
 800436c:	2200      	movs	r2, #0
 800436e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2225      	movs	r2, #37	; 0x25
 8004374:	5c9b      	ldrb	r3, [r3, r2]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d006      	beq.n	800438a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2204      	movs	r2, #4
 8004380:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004382:	187b      	adds	r3, r7, r1
 8004384:	2201      	movs	r2, #1
 8004386:	701a      	strb	r2, [r3, #0]
 8004388:	e049      	b.n	800441e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	210e      	movs	r1, #14
 8004396:	438a      	bics	r2, r1
 8004398:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2101      	movs	r1, #1
 80043a6:	438a      	bics	r2, r1
 80043a8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b4:	491d      	ldr	r1, [pc, #116]	; (800442c <HAL_DMA_Abort_IT+0xcc>)
 80043b6:	400a      	ands	r2, r1
 80043b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80043ba:	4b1d      	ldr	r3, [pc, #116]	; (8004430 <HAL_DMA_Abort_IT+0xd0>)
 80043bc:	6859      	ldr	r1, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	221c      	movs	r2, #28
 80043c4:	4013      	ands	r3, r2
 80043c6:	2201      	movs	r2, #1
 80043c8:	409a      	lsls	r2, r3
 80043ca:	4b19      	ldr	r3, [pc, #100]	; (8004430 <HAL_DMA_Abort_IT+0xd0>)
 80043cc:	430a      	orrs	r2, r1
 80043ce:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80043d8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00c      	beq.n	80043fc <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ec:	490f      	ldr	r1, [pc, #60]	; (800442c <HAL_DMA_Abort_IT+0xcc>)
 80043ee:	400a      	ands	r2, r1
 80043f0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80043fa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2225      	movs	r2, #37	; 0x25
 8004400:	2101      	movs	r1, #1
 8004402:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2224      	movs	r2, #36	; 0x24
 8004408:	2100      	movs	r1, #0
 800440a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	2b00      	cmp	r3, #0
 8004412:	d004      	beq.n	800441e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	0010      	movs	r0, r2
 800441c:	4798      	blx	r3
    }
  }
  return status;
 800441e:	230f      	movs	r3, #15
 8004420:	18fb      	adds	r3, r7, r3
 8004422:	781b      	ldrb	r3, [r3, #0]
}
 8004424:	0018      	movs	r0, r3
 8004426:	46bd      	mov	sp, r7
 8004428:	b004      	add	sp, #16
 800442a:	bd80      	pop	{r7, pc}
 800442c:	fffffeff 	.word	0xfffffeff
 8004430:	40020000 	.word	0x40020000

08004434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800443e:	2300      	movs	r3, #0
 8004440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004442:	e147      	b.n	80046d4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2101      	movs	r1, #1
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4091      	lsls	r1, r2
 800444e:	000a      	movs	r2, r1
 8004450:	4013      	ands	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d100      	bne.n	800445c <HAL_GPIO_Init+0x28>
 800445a:	e138      	b.n	80046ce <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2203      	movs	r2, #3
 8004462:	4013      	ands	r3, r2
 8004464:	2b01      	cmp	r3, #1
 8004466:	d005      	beq.n	8004474 <HAL_GPIO_Init+0x40>
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2203      	movs	r2, #3
 800446e:	4013      	ands	r3, r2
 8004470:	2b02      	cmp	r3, #2
 8004472:	d130      	bne.n	80044d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	2203      	movs	r2, #3
 8004480:	409a      	lsls	r2, r3
 8004482:	0013      	movs	r3, r2
 8004484:	43da      	mvns	r2, r3
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4013      	ands	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	409a      	lsls	r2, r3
 8004496:	0013      	movs	r3, r2
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044aa:	2201      	movs	r2, #1
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	409a      	lsls	r2, r3
 80044b0:	0013      	movs	r3, r2
 80044b2:	43da      	mvns	r2, r3
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	4013      	ands	r3, r2
 80044b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	091b      	lsrs	r3, r3, #4
 80044c0:	2201      	movs	r2, #1
 80044c2:	401a      	ands	r2, r3
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	409a      	lsls	r2, r3
 80044c8:	0013      	movs	r3, r2
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2203      	movs	r2, #3
 80044dc:	4013      	ands	r3, r2
 80044de:	2b03      	cmp	r3, #3
 80044e0:	d017      	beq.n	8004512 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	2203      	movs	r2, #3
 80044ee:	409a      	lsls	r2, r3
 80044f0:	0013      	movs	r3, r2
 80044f2:	43da      	mvns	r2, r3
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	4013      	ands	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	689a      	ldr	r2, [r3, #8]
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	409a      	lsls	r2, r3
 8004504:	0013      	movs	r3, r2
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2203      	movs	r2, #3
 8004518:	4013      	ands	r3, r2
 800451a:	2b02      	cmp	r3, #2
 800451c:	d123      	bne.n	8004566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	08da      	lsrs	r2, r3, #3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	3208      	adds	r2, #8
 8004526:	0092      	lsls	r2, r2, #2
 8004528:	58d3      	ldr	r3, [r2, r3]
 800452a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2207      	movs	r2, #7
 8004530:	4013      	ands	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	220f      	movs	r2, #15
 8004536:	409a      	lsls	r2, r3
 8004538:	0013      	movs	r3, r2
 800453a:	43da      	mvns	r2, r3
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	4013      	ands	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	691a      	ldr	r2, [r3, #16]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2107      	movs	r1, #7
 800454a:	400b      	ands	r3, r1
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	409a      	lsls	r2, r3
 8004550:	0013      	movs	r3, r2
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	4313      	orrs	r3, r2
 8004556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	08da      	lsrs	r2, r3, #3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3208      	adds	r2, #8
 8004560:	0092      	lsls	r2, r2, #2
 8004562:	6939      	ldr	r1, [r7, #16]
 8004564:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	2203      	movs	r2, #3
 8004572:	409a      	lsls	r2, r3
 8004574:	0013      	movs	r3, r2
 8004576:	43da      	mvns	r2, r3
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	4013      	ands	r3, r2
 800457c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2203      	movs	r2, #3
 8004584:	401a      	ands	r2, r3
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	409a      	lsls	r2, r3
 800458c:	0013      	movs	r3, r2
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4313      	orrs	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	23c0      	movs	r3, #192	; 0xc0
 80045a0:	029b      	lsls	r3, r3, #10
 80045a2:	4013      	ands	r3, r2
 80045a4:	d100      	bne.n	80045a8 <HAL_GPIO_Init+0x174>
 80045a6:	e092      	b.n	80046ce <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80045a8:	4a50      	ldr	r2, [pc, #320]	; (80046ec <HAL_GPIO_Init+0x2b8>)
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	089b      	lsrs	r3, r3, #2
 80045ae:	3318      	adds	r3, #24
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	589b      	ldr	r3, [r3, r2]
 80045b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2203      	movs	r2, #3
 80045ba:	4013      	ands	r3, r2
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	220f      	movs	r2, #15
 80045c0:	409a      	lsls	r2, r3
 80045c2:	0013      	movs	r3, r2
 80045c4:	43da      	mvns	r2, r3
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	4013      	ands	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	23a0      	movs	r3, #160	; 0xa0
 80045d0:	05db      	lsls	r3, r3, #23
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d013      	beq.n	80045fe <HAL_GPIO_Init+0x1ca>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a45      	ldr	r2, [pc, #276]	; (80046f0 <HAL_GPIO_Init+0x2bc>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d00d      	beq.n	80045fa <HAL_GPIO_Init+0x1c6>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a44      	ldr	r2, [pc, #272]	; (80046f4 <HAL_GPIO_Init+0x2c0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d007      	beq.n	80045f6 <HAL_GPIO_Init+0x1c2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a43      	ldr	r2, [pc, #268]	; (80046f8 <HAL_GPIO_Init+0x2c4>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d101      	bne.n	80045f2 <HAL_GPIO_Init+0x1be>
 80045ee:	2303      	movs	r3, #3
 80045f0:	e006      	b.n	8004600 <HAL_GPIO_Init+0x1cc>
 80045f2:	2305      	movs	r3, #5
 80045f4:	e004      	b.n	8004600 <HAL_GPIO_Init+0x1cc>
 80045f6:	2302      	movs	r3, #2
 80045f8:	e002      	b.n	8004600 <HAL_GPIO_Init+0x1cc>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <HAL_GPIO_Init+0x1cc>
 80045fe:	2300      	movs	r3, #0
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	2103      	movs	r1, #3
 8004604:	400a      	ands	r2, r1
 8004606:	00d2      	lsls	r2, r2, #3
 8004608:	4093      	lsls	r3, r2
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004610:	4936      	ldr	r1, [pc, #216]	; (80046ec <HAL_GPIO_Init+0x2b8>)
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	089b      	lsrs	r3, r3, #2
 8004616:	3318      	adds	r3, #24
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800461e:	4a33      	ldr	r2, [pc, #204]	; (80046ec <HAL_GPIO_Init+0x2b8>)
 8004620:	2380      	movs	r3, #128	; 0x80
 8004622:	58d3      	ldr	r3, [r2, r3]
 8004624:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	43da      	mvns	r2, r3
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	4013      	ands	r3, r2
 800462e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	2380      	movs	r3, #128	; 0x80
 8004636:	025b      	lsls	r3, r3, #9
 8004638:	4013      	ands	r3, r2
 800463a:	d003      	beq.n	8004644 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004644:	4929      	ldr	r1, [pc, #164]	; (80046ec <HAL_GPIO_Init+0x2b8>)
 8004646:	2280      	movs	r2, #128	; 0x80
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 800464c:	4a27      	ldr	r2, [pc, #156]	; (80046ec <HAL_GPIO_Init+0x2b8>)
 800464e:	2384      	movs	r3, #132	; 0x84
 8004650:	58d3      	ldr	r3, [r2, r3]
 8004652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	43da      	mvns	r2, r3
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	4013      	ands	r3, r2
 800465c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	2380      	movs	r3, #128	; 0x80
 8004664:	029b      	lsls	r3, r3, #10
 8004666:	4013      	ands	r3, r2
 8004668:	d003      	beq.n	8004672 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4313      	orrs	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004672:	491e      	ldr	r1, [pc, #120]	; (80046ec <HAL_GPIO_Init+0x2b8>)
 8004674:	2284      	movs	r2, #132	; 0x84
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800467a:	4b1c      	ldr	r3, [pc, #112]	; (80046ec <HAL_GPIO_Init+0x2b8>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	43da      	mvns	r2, r3
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	4013      	ands	r3, r2
 8004688:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	2380      	movs	r3, #128	; 0x80
 8004690:	035b      	lsls	r3, r3, #13
 8004692:	4013      	ands	r3, r2
 8004694:	d003      	beq.n	800469e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4313      	orrs	r3, r2
 800469c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800469e:	4b13      	ldr	r3, [pc, #76]	; (80046ec <HAL_GPIO_Init+0x2b8>)
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80046a4:	4b11      	ldr	r3, [pc, #68]	; (80046ec <HAL_GPIO_Init+0x2b8>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	43da      	mvns	r2, r3
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	4013      	ands	r3, r2
 80046b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	2380      	movs	r3, #128	; 0x80
 80046ba:	039b      	lsls	r3, r3, #14
 80046bc:	4013      	ands	r3, r2
 80046be:	d003      	beq.n	80046c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046c8:	4b08      	ldr	r3, [pc, #32]	; (80046ec <HAL_GPIO_Init+0x2b8>)
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	3301      	adds	r3, #1
 80046d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	40da      	lsrs	r2, r3
 80046dc:	1e13      	subs	r3, r2, #0
 80046de:	d000      	beq.n	80046e2 <HAL_GPIO_Init+0x2ae>
 80046e0:	e6b0      	b.n	8004444 <HAL_GPIO_Init+0x10>
  }
}
 80046e2:	46c0      	nop			; (mov r8, r8)
 80046e4:	46c0      	nop			; (mov r8, r8)
 80046e6:	46bd      	mov	sp, r7
 80046e8:	b006      	add	sp, #24
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40021800 	.word	0x40021800
 80046f0:	50000400 	.word	0x50000400
 80046f4:	50000800 	.word	0x50000800
 80046f8:	50000c00 	.word	0x50000c00

080046fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	000a      	movs	r2, r1
 8004706:	1cbb      	adds	r3, r7, #2
 8004708:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	1cba      	adds	r2, r7, #2
 8004710:	8812      	ldrh	r2, [r2, #0]
 8004712:	4013      	ands	r3, r2
 8004714:	d004      	beq.n	8004720 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004716:	230f      	movs	r3, #15
 8004718:	18fb      	adds	r3, r7, r3
 800471a:	2201      	movs	r2, #1
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	e003      	b.n	8004728 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004720:	230f      	movs	r3, #15
 8004722:	18fb      	adds	r3, r7, r3
 8004724:	2200      	movs	r2, #0
 8004726:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004728:	230f      	movs	r3, #15
 800472a:	18fb      	adds	r3, r7, r3
 800472c:	781b      	ldrb	r3, [r3, #0]
}
 800472e:	0018      	movs	r0, r3
 8004730:	46bd      	mov	sp, r7
 8004732:	b004      	add	sp, #16
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b082      	sub	sp, #8
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
 800473e:	0008      	movs	r0, r1
 8004740:	0011      	movs	r1, r2
 8004742:	1cbb      	adds	r3, r7, #2
 8004744:	1c02      	adds	r2, r0, #0
 8004746:	801a      	strh	r2, [r3, #0]
 8004748:	1c7b      	adds	r3, r7, #1
 800474a:	1c0a      	adds	r2, r1, #0
 800474c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800474e:	1c7b      	adds	r3, r7, #1
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d004      	beq.n	8004760 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004756:	1cbb      	adds	r3, r7, #2
 8004758:	881a      	ldrh	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800475e:	e003      	b.n	8004768 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004760:	1cbb      	adds	r3, r7, #2
 8004762:	881a      	ldrh	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004768:	46c0      	nop			; (mov r8, r8)
 800476a:	46bd      	mov	sp, r7
 800476c:	b002      	add	sp, #8
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	000a      	movs	r2, r1
 800477a:	1cbb      	adds	r3, r7, #2
 800477c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004784:	1cbb      	adds	r3, r7, #2
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4013      	ands	r3, r2
 800478c:	041a      	lsls	r2, r3, #16
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	43db      	mvns	r3, r3
 8004792:	1cb9      	adds	r1, r7, #2
 8004794:	8809      	ldrh	r1, [r1, #0]
 8004796:	400b      	ands	r3, r1
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	619a      	str	r2, [r3, #24]
}
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	46bd      	mov	sp, r7
 80047a2:	b004      	add	sp, #16
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	0002      	movs	r2, r0
 80047b0:	1dbb      	adds	r3, r7, #6
 80047b2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80047b4:	4b10      	ldr	r3, [pc, #64]	; (80047f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	1dba      	adds	r2, r7, #6
 80047ba:	8812      	ldrh	r2, [r2, #0]
 80047bc:	4013      	ands	r3, r2
 80047be:	d008      	beq.n	80047d2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80047c0:	4b0d      	ldr	r3, [pc, #52]	; (80047f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80047c2:	1dba      	adds	r2, r7, #6
 80047c4:	8812      	ldrh	r2, [r2, #0]
 80047c6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80047c8:	1dbb      	adds	r3, r7, #6
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	0018      	movs	r0, r3
 80047ce:	f7fd f89f 	bl	8001910 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80047d2:	4b09      	ldr	r3, [pc, #36]	; (80047f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	1dba      	adds	r2, r7, #6
 80047d8:	8812      	ldrh	r2, [r2, #0]
 80047da:	4013      	ands	r3, r2
 80047dc:	d008      	beq.n	80047f0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80047de:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80047e0:	1dba      	adds	r2, r7, #6
 80047e2:	8812      	ldrh	r2, [r2, #0]
 80047e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80047e6:	1dbb      	adds	r3, r7, #6
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	0018      	movs	r0, r3
 80047ec:	f000 f806 	bl	80047fc <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80047f0:	46c0      	nop			; (mov r8, r8)
 80047f2:	46bd      	mov	sp, r7
 80047f4:	b002      	add	sp, #8
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40021800 	.word	0x40021800

080047fc <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	0002      	movs	r2, r0
 8004804:	1dbb      	adds	r3, r7, #6
 8004806:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004808:	46c0      	nop			; (mov r8, r8)
 800480a:	46bd      	mov	sp, r7
 800480c:	b002      	add	sp, #8
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004818:	4b19      	ldr	r3, [pc, #100]	; (8004880 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a19      	ldr	r2, [pc, #100]	; (8004884 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800481e:	4013      	ands	r3, r2
 8004820:	0019      	movs	r1, r3
 8004822:	4b17      	ldr	r3, [pc, #92]	; (8004880 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	430a      	orrs	r2, r1
 8004828:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	2380      	movs	r3, #128	; 0x80
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	429a      	cmp	r2, r3
 8004832:	d11f      	bne.n	8004874 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004834:	4b14      	ldr	r3, [pc, #80]	; (8004888 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	0013      	movs	r3, r2
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	189b      	adds	r3, r3, r2
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	4912      	ldr	r1, [pc, #72]	; (800488c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004842:	0018      	movs	r0, r3
 8004844:	f7fb fc68 	bl	8000118 <__udivsi3>
 8004848:	0003      	movs	r3, r0
 800484a:	3301      	adds	r3, #1
 800484c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800484e:	e008      	b.n	8004862 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3b01      	subs	r3, #1
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	e001      	b.n	8004862 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e009      	b.n	8004876 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004862:	4b07      	ldr	r3, [pc, #28]	; (8004880 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004864:	695a      	ldr	r2, [r3, #20]
 8004866:	2380      	movs	r3, #128	; 0x80
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	401a      	ands	r2, r3
 800486c:	2380      	movs	r3, #128	; 0x80
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	429a      	cmp	r2, r3
 8004872:	d0ed      	beq.n	8004850 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	0018      	movs	r0, r3
 8004878:	46bd      	mov	sp, r7
 800487a:	b004      	add	sp, #16
 800487c:	bd80      	pop	{r7, pc}
 800487e:	46c0      	nop			; (mov r8, r8)
 8004880:	40007000 	.word	0x40007000
 8004884:	fffff9ff 	.word	0xfffff9ff
 8004888:	20000000 	.word	0x20000000
 800488c:	000f4240 	.word	0x000f4240

08004890 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004894:	4b03      	ldr	r3, [pc, #12]	; (80048a4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	23e0      	movs	r3, #224	; 0xe0
 800489a:	01db      	lsls	r3, r3, #7
 800489c:	4013      	ands	r3, r2
}
 800489e:	0018      	movs	r0, r3
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40021000 	.word	0x40021000

080048a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e304      	b.n	8004ec4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2201      	movs	r2, #1
 80048c0:	4013      	ands	r3, r2
 80048c2:	d100      	bne.n	80048c6 <HAL_RCC_OscConfig+0x1e>
 80048c4:	e07c      	b.n	80049c0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048c6:	4bc3      	ldr	r3, [pc, #780]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	2238      	movs	r2, #56	; 0x38
 80048cc:	4013      	ands	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048d0:	4bc0      	ldr	r3, [pc, #768]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	2203      	movs	r2, #3
 80048d6:	4013      	ands	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	2b10      	cmp	r3, #16
 80048de:	d102      	bne.n	80048e6 <HAL_RCC_OscConfig+0x3e>
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	d002      	beq.n	80048ec <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d10b      	bne.n	8004904 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ec:	4bb9      	ldr	r3, [pc, #740]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	2380      	movs	r3, #128	; 0x80
 80048f2:	029b      	lsls	r3, r3, #10
 80048f4:	4013      	ands	r3, r2
 80048f6:	d062      	beq.n	80049be <HAL_RCC_OscConfig+0x116>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d15e      	bne.n	80049be <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e2df      	b.n	8004ec4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	2380      	movs	r3, #128	; 0x80
 800490a:	025b      	lsls	r3, r3, #9
 800490c:	429a      	cmp	r2, r3
 800490e:	d107      	bne.n	8004920 <HAL_RCC_OscConfig+0x78>
 8004910:	4bb0      	ldr	r3, [pc, #704]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	4baf      	ldr	r3, [pc, #700]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004916:	2180      	movs	r1, #128	; 0x80
 8004918:	0249      	lsls	r1, r1, #9
 800491a:	430a      	orrs	r2, r1
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	e020      	b.n	8004962 <HAL_RCC_OscConfig+0xba>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	23a0      	movs	r3, #160	; 0xa0
 8004926:	02db      	lsls	r3, r3, #11
 8004928:	429a      	cmp	r2, r3
 800492a:	d10e      	bne.n	800494a <HAL_RCC_OscConfig+0xa2>
 800492c:	4ba9      	ldr	r3, [pc, #676]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	4ba8      	ldr	r3, [pc, #672]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004932:	2180      	movs	r1, #128	; 0x80
 8004934:	02c9      	lsls	r1, r1, #11
 8004936:	430a      	orrs	r2, r1
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	4ba6      	ldr	r3, [pc, #664]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	4ba5      	ldr	r3, [pc, #660]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004940:	2180      	movs	r1, #128	; 0x80
 8004942:	0249      	lsls	r1, r1, #9
 8004944:	430a      	orrs	r2, r1
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	e00b      	b.n	8004962 <HAL_RCC_OscConfig+0xba>
 800494a:	4ba2      	ldr	r3, [pc, #648]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	4ba1      	ldr	r3, [pc, #644]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004950:	49a1      	ldr	r1, [pc, #644]	; (8004bd8 <HAL_RCC_OscConfig+0x330>)
 8004952:	400a      	ands	r2, r1
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	4b9f      	ldr	r3, [pc, #636]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	4b9e      	ldr	r3, [pc, #632]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 800495c:	499f      	ldr	r1, [pc, #636]	; (8004bdc <HAL_RCC_OscConfig+0x334>)
 800495e:	400a      	ands	r2, r1
 8004960:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d014      	beq.n	8004994 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496a:	f7fe fed7 	bl	800371c <HAL_GetTick>
 800496e:	0003      	movs	r3, r0
 8004970:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004974:	f7fe fed2 	bl	800371c <HAL_GetTick>
 8004978:	0002      	movs	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b64      	cmp	r3, #100	; 0x64
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e29e      	b.n	8004ec4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004986:	4b93      	ldr	r3, [pc, #588]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	2380      	movs	r3, #128	; 0x80
 800498c:	029b      	lsls	r3, r3, #10
 800498e:	4013      	ands	r3, r2
 8004990:	d0f0      	beq.n	8004974 <HAL_RCC_OscConfig+0xcc>
 8004992:	e015      	b.n	80049c0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004994:	f7fe fec2 	bl	800371c <HAL_GetTick>
 8004998:	0003      	movs	r3, r0
 800499a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800499c:	e008      	b.n	80049b0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800499e:	f7fe febd 	bl	800371c <HAL_GetTick>
 80049a2:	0002      	movs	r2, r0
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b64      	cmp	r3, #100	; 0x64
 80049aa:	d901      	bls.n	80049b0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e289      	b.n	8004ec4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049b0:	4b88      	ldr	r3, [pc, #544]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	2380      	movs	r3, #128	; 0x80
 80049b6:	029b      	lsls	r3, r3, #10
 80049b8:	4013      	ands	r3, r2
 80049ba:	d1f0      	bne.n	800499e <HAL_RCC_OscConfig+0xf6>
 80049bc:	e000      	b.n	80049c0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049be:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2202      	movs	r2, #2
 80049c6:	4013      	ands	r3, r2
 80049c8:	d100      	bne.n	80049cc <HAL_RCC_OscConfig+0x124>
 80049ca:	e099      	b.n	8004b00 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049cc:	4b81      	ldr	r3, [pc, #516]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	2238      	movs	r2, #56	; 0x38
 80049d2:	4013      	ands	r3, r2
 80049d4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049d6:	4b7f      	ldr	r3, [pc, #508]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	2203      	movs	r2, #3
 80049dc:	4013      	ands	r3, r2
 80049de:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	2b10      	cmp	r3, #16
 80049e4:	d102      	bne.n	80049ec <HAL_RCC_OscConfig+0x144>
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d002      	beq.n	80049f2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d135      	bne.n	8004a5e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049f2:	4b78      	ldr	r3, [pc, #480]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	2380      	movs	r3, #128	; 0x80
 80049f8:	00db      	lsls	r3, r3, #3
 80049fa:	4013      	ands	r3, r2
 80049fc:	d005      	beq.n	8004a0a <HAL_RCC_OscConfig+0x162>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e25c      	b.n	8004ec4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a0a:	4b72      	ldr	r3, [pc, #456]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	4a74      	ldr	r2, [pc, #464]	; (8004be0 <HAL_RCC_OscConfig+0x338>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	0019      	movs	r1, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	021a      	lsls	r2, r3, #8
 8004a1a:	4b6e      	ldr	r3, [pc, #440]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d112      	bne.n	8004a4c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004a26:	4b6b      	ldr	r3, [pc, #428]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a6e      	ldr	r2, [pc, #440]	; (8004be4 <HAL_RCC_OscConfig+0x33c>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	0019      	movs	r1, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691a      	ldr	r2, [r3, #16]
 8004a34:	4b67      	ldr	r3, [pc, #412]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004a36:	430a      	orrs	r2, r1
 8004a38:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004a3a:	4b66      	ldr	r3, [pc, #408]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	0adb      	lsrs	r3, r3, #11
 8004a40:	2207      	movs	r2, #7
 8004a42:	4013      	ands	r3, r2
 8004a44:	4a68      	ldr	r2, [pc, #416]	; (8004be8 <HAL_RCC_OscConfig+0x340>)
 8004a46:	40da      	lsrs	r2, r3
 8004a48:	4b68      	ldr	r3, [pc, #416]	; (8004bec <HAL_RCC_OscConfig+0x344>)
 8004a4a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a4c:	4b68      	ldr	r3, [pc, #416]	; (8004bf0 <HAL_RCC_OscConfig+0x348>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	0018      	movs	r0, r3
 8004a52:	f7fe fe07 	bl	8003664 <HAL_InitTick>
 8004a56:	1e03      	subs	r3, r0, #0
 8004a58:	d051      	beq.n	8004afe <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e232      	b.n	8004ec4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d030      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004a66:	4b5b      	ldr	r3, [pc, #364]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a5e      	ldr	r2, [pc, #376]	; (8004be4 <HAL_RCC_OscConfig+0x33c>)
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	0019      	movs	r1, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	4b57      	ldr	r3, [pc, #348]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004a76:	430a      	orrs	r2, r1
 8004a78:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004a7a:	4b56      	ldr	r3, [pc, #344]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	4b55      	ldr	r3, [pc, #340]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004a80:	2180      	movs	r1, #128	; 0x80
 8004a82:	0049      	lsls	r1, r1, #1
 8004a84:	430a      	orrs	r2, r1
 8004a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a88:	f7fe fe48 	bl	800371c <HAL_GetTick>
 8004a8c:	0003      	movs	r3, r0
 8004a8e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a92:	f7fe fe43 	bl	800371c <HAL_GetTick>
 8004a96:	0002      	movs	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e20f      	b.n	8004ec4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aa4:	4b4b      	ldr	r3, [pc, #300]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	2380      	movs	r3, #128	; 0x80
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	4013      	ands	r3, r2
 8004aae:	d0f0      	beq.n	8004a92 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab0:	4b48      	ldr	r3, [pc, #288]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	4a4a      	ldr	r2, [pc, #296]	; (8004be0 <HAL_RCC_OscConfig+0x338>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	0019      	movs	r1, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	021a      	lsls	r2, r3, #8
 8004ac0:	4b44      	ldr	r3, [pc, #272]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
 8004ac6:	e01b      	b.n	8004b00 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004ac8:	4b42      	ldr	r3, [pc, #264]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4b41      	ldr	r3, [pc, #260]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004ace:	4949      	ldr	r1, [pc, #292]	; (8004bf4 <HAL_RCC_OscConfig+0x34c>)
 8004ad0:	400a      	ands	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad4:	f7fe fe22 	bl	800371c <HAL_GetTick>
 8004ad8:	0003      	movs	r3, r0
 8004ada:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ade:	f7fe fe1d 	bl	800371c <HAL_GetTick>
 8004ae2:	0002      	movs	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e1e9      	b.n	8004ec4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004af0:	4b38      	ldr	r3, [pc, #224]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	2380      	movs	r3, #128	; 0x80
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	4013      	ands	r3, r2
 8004afa:	d1f0      	bne.n	8004ade <HAL_RCC_OscConfig+0x236>
 8004afc:	e000      	b.n	8004b00 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004afe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2208      	movs	r2, #8
 8004b06:	4013      	ands	r3, r2
 8004b08:	d047      	beq.n	8004b9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004b0a:	4b32      	ldr	r3, [pc, #200]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	2238      	movs	r2, #56	; 0x38
 8004b10:	4013      	ands	r3, r2
 8004b12:	2b18      	cmp	r3, #24
 8004b14:	d10a      	bne.n	8004b2c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004b16:	4b2f      	ldr	r3, [pc, #188]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	d03c      	beq.n	8004b9a <HAL_RCC_OscConfig+0x2f2>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d138      	bne.n	8004b9a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e1cb      	b.n	8004ec4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d019      	beq.n	8004b68 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004b34:	4b27      	ldr	r3, [pc, #156]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004b36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b38:	4b26      	ldr	r3, [pc, #152]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b40:	f7fe fdec 	bl	800371c <HAL_GetTick>
 8004b44:	0003      	movs	r3, r0
 8004b46:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b48:	e008      	b.n	8004b5c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b4a:	f7fe fde7 	bl	800371c <HAL_GetTick>
 8004b4e:	0002      	movs	r2, r0
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e1b3      	b.n	8004ec4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b5c:	4b1d      	ldr	r3, [pc, #116]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b60:	2202      	movs	r2, #2
 8004b62:	4013      	ands	r3, r2
 8004b64:	d0f1      	beq.n	8004b4a <HAL_RCC_OscConfig+0x2a2>
 8004b66:	e018      	b.n	8004b9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004b68:	4b1a      	ldr	r3, [pc, #104]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004b6a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b6c:	4b19      	ldr	r3, [pc, #100]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004b6e:	2101      	movs	r1, #1
 8004b70:	438a      	bics	r2, r1
 8004b72:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b74:	f7fe fdd2 	bl	800371c <HAL_GetTick>
 8004b78:	0003      	movs	r3, r0
 8004b7a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b7e:	f7fe fdcd 	bl	800371c <HAL_GetTick>
 8004b82:	0002      	movs	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e199      	b.n	8004ec4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b90:	4b10      	ldr	r3, [pc, #64]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b94:	2202      	movs	r2, #2
 8004b96:	4013      	ands	r3, r2
 8004b98:	d1f1      	bne.n	8004b7e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2204      	movs	r2, #4
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d100      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x2fe>
 8004ba4:	e0c6      	b.n	8004d34 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ba6:	231f      	movs	r3, #31
 8004ba8:	18fb      	adds	r3, r7, r3
 8004baa:	2200      	movs	r2, #0
 8004bac:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004bae:	4b09      	ldr	r3, [pc, #36]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	2238      	movs	r2, #56	; 0x38
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d11e      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004bba:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	d100      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x31e>
 8004bc4:	e0b6      	b.n	8004d34 <HAL_RCC_OscConfig+0x48c>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d000      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x328>
 8004bce:	e0b1      	b.n	8004d34 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e177      	b.n	8004ec4 <HAL_RCC_OscConfig+0x61c>
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	fffeffff 	.word	0xfffeffff
 8004bdc:	fffbffff 	.word	0xfffbffff
 8004be0:	ffff80ff 	.word	0xffff80ff
 8004be4:	ffffc7ff 	.word	0xffffc7ff
 8004be8:	00f42400 	.word	0x00f42400
 8004bec:	20000000 	.word	0x20000000
 8004bf0:	20000004 	.word	0x20000004
 8004bf4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004bf8:	4bb4      	ldr	r3, [pc, #720]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004bfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bfc:	2380      	movs	r3, #128	; 0x80
 8004bfe:	055b      	lsls	r3, r3, #21
 8004c00:	4013      	ands	r3, r2
 8004c02:	d101      	bne.n	8004c08 <HAL_RCC_OscConfig+0x360>
 8004c04:	2301      	movs	r3, #1
 8004c06:	e000      	b.n	8004c0a <HAL_RCC_OscConfig+0x362>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d011      	beq.n	8004c32 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004c0e:	4baf      	ldr	r3, [pc, #700]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004c10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c12:	4bae      	ldr	r3, [pc, #696]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004c14:	2180      	movs	r1, #128	; 0x80
 8004c16:	0549      	lsls	r1, r1, #21
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c1c:	4bab      	ldr	r3, [pc, #684]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c20:	2380      	movs	r3, #128	; 0x80
 8004c22:	055b      	lsls	r3, r3, #21
 8004c24:	4013      	ands	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004c2a:	231f      	movs	r3, #31
 8004c2c:	18fb      	adds	r3, r7, r3
 8004c2e:	2201      	movs	r2, #1
 8004c30:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c32:	4ba7      	ldr	r3, [pc, #668]	; (8004ed0 <HAL_RCC_OscConfig+0x628>)
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	2380      	movs	r3, #128	; 0x80
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	d11a      	bne.n	8004c74 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c3e:	4ba4      	ldr	r3, [pc, #656]	; (8004ed0 <HAL_RCC_OscConfig+0x628>)
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	4ba3      	ldr	r3, [pc, #652]	; (8004ed0 <HAL_RCC_OscConfig+0x628>)
 8004c44:	2180      	movs	r1, #128	; 0x80
 8004c46:	0049      	lsls	r1, r1, #1
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004c4c:	f7fe fd66 	bl	800371c <HAL_GetTick>
 8004c50:	0003      	movs	r3, r0
 8004c52:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c54:	e008      	b.n	8004c68 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c56:	f7fe fd61 	bl	800371c <HAL_GetTick>
 8004c5a:	0002      	movs	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e12d      	b.n	8004ec4 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c68:	4b99      	ldr	r3, [pc, #612]	; (8004ed0 <HAL_RCC_OscConfig+0x628>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	2380      	movs	r3, #128	; 0x80
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	4013      	ands	r3, r2
 8004c72:	d0f0      	beq.n	8004c56 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d106      	bne.n	8004c8a <HAL_RCC_OscConfig+0x3e2>
 8004c7c:	4b93      	ldr	r3, [pc, #588]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004c7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c80:	4b92      	ldr	r3, [pc, #584]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004c82:	2101      	movs	r1, #1
 8004c84:	430a      	orrs	r2, r1
 8004c86:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c88:	e01c      	b.n	8004cc4 <HAL_RCC_OscConfig+0x41c>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	2b05      	cmp	r3, #5
 8004c90:	d10c      	bne.n	8004cac <HAL_RCC_OscConfig+0x404>
 8004c92:	4b8e      	ldr	r3, [pc, #568]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004c94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c96:	4b8d      	ldr	r3, [pc, #564]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004c98:	2104      	movs	r1, #4
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c9e:	4b8b      	ldr	r3, [pc, #556]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004ca0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ca2:	4b8a      	ldr	r3, [pc, #552]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	65da      	str	r2, [r3, #92]	; 0x5c
 8004caa:	e00b      	b.n	8004cc4 <HAL_RCC_OscConfig+0x41c>
 8004cac:	4b87      	ldr	r3, [pc, #540]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004cae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cb0:	4b86      	ldr	r3, [pc, #536]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	438a      	bics	r2, r1
 8004cb6:	65da      	str	r2, [r3, #92]	; 0x5c
 8004cb8:	4b84      	ldr	r3, [pc, #528]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004cba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cbc:	4b83      	ldr	r3, [pc, #524]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004cbe:	2104      	movs	r1, #4
 8004cc0:	438a      	bics	r2, r1
 8004cc2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d014      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ccc:	f7fe fd26 	bl	800371c <HAL_GetTick>
 8004cd0:	0003      	movs	r3, r0
 8004cd2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cd4:	e009      	b.n	8004cea <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd6:	f7fe fd21 	bl	800371c <HAL_GetTick>
 8004cda:	0002      	movs	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	4a7c      	ldr	r2, [pc, #496]	; (8004ed4 <HAL_RCC_OscConfig+0x62c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e0ec      	b.n	8004ec4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cea:	4b78      	ldr	r3, [pc, #480]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cee:	2202      	movs	r2, #2
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x42e>
 8004cf4:	e013      	b.n	8004d1e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf6:	f7fe fd11 	bl	800371c <HAL_GetTick>
 8004cfa:	0003      	movs	r3, r0
 8004cfc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cfe:	e009      	b.n	8004d14 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d00:	f7fe fd0c 	bl	800371c <HAL_GetTick>
 8004d04:	0002      	movs	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	4a72      	ldr	r2, [pc, #456]	; (8004ed4 <HAL_RCC_OscConfig+0x62c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e0d7      	b.n	8004ec4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d14:	4b6d      	ldr	r3, [pc, #436]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d18:	2202      	movs	r2, #2
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	d1f0      	bne.n	8004d00 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004d1e:	231f      	movs	r3, #31
 8004d20:	18fb      	adds	r3, r7, r3
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d105      	bne.n	8004d34 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004d28:	4b68      	ldr	r3, [pc, #416]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004d2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d2c:	4b67      	ldr	r3, [pc, #412]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004d2e:	496a      	ldr	r1, [pc, #424]	; (8004ed8 <HAL_RCC_OscConfig+0x630>)
 8004d30:	400a      	ands	r2, r1
 8004d32:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d100      	bne.n	8004d3e <HAL_RCC_OscConfig+0x496>
 8004d3c:	e0c1      	b.n	8004ec2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d3e:	4b63      	ldr	r3, [pc, #396]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	2238      	movs	r2, #56	; 0x38
 8004d44:	4013      	ands	r3, r2
 8004d46:	2b10      	cmp	r3, #16
 8004d48:	d100      	bne.n	8004d4c <HAL_RCC_OscConfig+0x4a4>
 8004d4a:	e081      	b.n	8004e50 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d156      	bne.n	8004e02 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d54:	4b5d      	ldr	r3, [pc, #372]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	4b5c      	ldr	r3, [pc, #368]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004d5a:	4960      	ldr	r1, [pc, #384]	; (8004edc <HAL_RCC_OscConfig+0x634>)
 8004d5c:	400a      	ands	r2, r1
 8004d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d60:	f7fe fcdc 	bl	800371c <HAL_GetTick>
 8004d64:	0003      	movs	r3, r0
 8004d66:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d68:	e008      	b.n	8004d7c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d6a:	f7fe fcd7 	bl	800371c <HAL_GetTick>
 8004d6e:	0002      	movs	r2, r0
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e0a3      	b.n	8004ec4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d7c:	4b53      	ldr	r3, [pc, #332]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	2380      	movs	r3, #128	; 0x80
 8004d82:	049b      	lsls	r3, r3, #18
 8004d84:	4013      	ands	r3, r2
 8004d86:	d1f0      	bne.n	8004d6a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d88:	4b50      	ldr	r3, [pc, #320]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	4a54      	ldr	r2, [pc, #336]	; (8004ee0 <HAL_RCC_OscConfig+0x638>)
 8004d8e:	4013      	ands	r3, r2
 8004d90:	0019      	movs	r1, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1a      	ldr	r2, [r3, #32]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da0:	021b      	lsls	r3, r3, #8
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da8:	431a      	orrs	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db4:	431a      	orrs	r2, r3
 8004db6:	4b45      	ldr	r3, [pc, #276]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004db8:	430a      	orrs	r2, r1
 8004dba:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dbc:	4b43      	ldr	r3, [pc, #268]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	4b42      	ldr	r3, [pc, #264]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004dc2:	2180      	movs	r1, #128	; 0x80
 8004dc4:	0449      	lsls	r1, r1, #17
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004dca:	4b40      	ldr	r3, [pc, #256]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	4b3f      	ldr	r3, [pc, #252]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004dd0:	2180      	movs	r1, #128	; 0x80
 8004dd2:	0549      	lsls	r1, r1, #21
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd8:	f7fe fca0 	bl	800371c <HAL_GetTick>
 8004ddc:	0003      	movs	r3, r0
 8004dde:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004de0:	e008      	b.n	8004df4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de2:	f7fe fc9b 	bl	800371c <HAL_GetTick>
 8004de6:	0002      	movs	r2, r0
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e067      	b.n	8004ec4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004df4:	4b35      	ldr	r3, [pc, #212]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	2380      	movs	r3, #128	; 0x80
 8004dfa:	049b      	lsls	r3, r3, #18
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	d0f0      	beq.n	8004de2 <HAL_RCC_OscConfig+0x53a>
 8004e00:	e05f      	b.n	8004ec2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e02:	4b32      	ldr	r3, [pc, #200]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	4b31      	ldr	r3, [pc, #196]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004e08:	4934      	ldr	r1, [pc, #208]	; (8004edc <HAL_RCC_OscConfig+0x634>)
 8004e0a:	400a      	ands	r2, r1
 8004e0c:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004e0e:	4b2f      	ldr	r3, [pc, #188]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	4b2e      	ldr	r3, [pc, #184]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004e14:	2103      	movs	r1, #3
 8004e16:	438a      	bics	r2, r1
 8004e18:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004e1a:	4b2c      	ldr	r3, [pc, #176]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	4b2b      	ldr	r3, [pc, #172]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004e20:	4930      	ldr	r1, [pc, #192]	; (8004ee4 <HAL_RCC_OscConfig+0x63c>)
 8004e22:	400a      	ands	r2, r1
 8004e24:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e26:	f7fe fc79 	bl	800371c <HAL_GetTick>
 8004e2a:	0003      	movs	r3, r0
 8004e2c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e30:	f7fe fc74 	bl	800371c <HAL_GetTick>
 8004e34:	0002      	movs	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e040      	b.n	8004ec4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e42:	4b22      	ldr	r3, [pc, #136]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	2380      	movs	r3, #128	; 0x80
 8004e48:	049b      	lsls	r3, r3, #18
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d1f0      	bne.n	8004e30 <HAL_RCC_OscConfig+0x588>
 8004e4e:	e038      	b.n	8004ec2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d101      	bne.n	8004e5c <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e033      	b.n	8004ec4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004e5c:	4b1b      	ldr	r3, [pc, #108]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2203      	movs	r2, #3
 8004e66:	401a      	ands	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d126      	bne.n	8004ebe <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	2270      	movs	r2, #112	; 0x70
 8004e74:	401a      	ands	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d11f      	bne.n	8004ebe <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	23fe      	movs	r3, #254	; 0xfe
 8004e82:	01db      	lsls	r3, r3, #7
 8004e84:	401a      	ands	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d116      	bne.n	8004ebe <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	23f8      	movs	r3, #248	; 0xf8
 8004e94:	039b      	lsls	r3, r3, #14
 8004e96:	401a      	ands	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d10e      	bne.n	8004ebe <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	23e0      	movs	r3, #224	; 0xe0
 8004ea4:	051b      	lsls	r3, r3, #20
 8004ea6:	401a      	ands	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d106      	bne.n	8004ebe <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	0f5b      	lsrs	r3, r3, #29
 8004eb4:	075a      	lsls	r2, r3, #29
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d001      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	b008      	add	sp, #32
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	40007000 	.word	0x40007000
 8004ed4:	00001388 	.word	0x00001388
 8004ed8:	efffffff 	.word	0xefffffff
 8004edc:	feffffff 	.word	0xfeffffff
 8004ee0:	11c1808c 	.word	0x11c1808c
 8004ee4:	eefeffff 	.word	0xeefeffff

08004ee8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e0e9      	b.n	80050d0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004efc:	4b76      	ldr	r3, [pc, #472]	; (80050d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2207      	movs	r2, #7
 8004f02:	4013      	ands	r3, r2
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d91e      	bls.n	8004f48 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f0a:	4b73      	ldr	r3, [pc, #460]	; (80050d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2207      	movs	r2, #7
 8004f10:	4393      	bics	r3, r2
 8004f12:	0019      	movs	r1, r3
 8004f14:	4b70      	ldr	r3, [pc, #448]	; (80050d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f1c:	f7fe fbfe 	bl	800371c <HAL_GetTick>
 8004f20:	0003      	movs	r3, r0
 8004f22:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f24:	e009      	b.n	8004f3a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f26:	f7fe fbf9 	bl	800371c <HAL_GetTick>
 8004f2a:	0002      	movs	r2, r0
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	4a6a      	ldr	r2, [pc, #424]	; (80050dc <HAL_RCC_ClockConfig+0x1f4>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e0ca      	b.n	80050d0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f3a:	4b67      	ldr	r3, [pc, #412]	; (80050d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2207      	movs	r2, #7
 8004f40:	4013      	ands	r3, r2
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d1ee      	bne.n	8004f26 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	4013      	ands	r3, r2
 8004f50:	d015      	beq.n	8004f7e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2204      	movs	r2, #4
 8004f58:	4013      	ands	r3, r2
 8004f5a:	d006      	beq.n	8004f6a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004f5c:	4b60      	ldr	r3, [pc, #384]	; (80050e0 <HAL_RCC_ClockConfig+0x1f8>)
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	4b5f      	ldr	r3, [pc, #380]	; (80050e0 <HAL_RCC_ClockConfig+0x1f8>)
 8004f62:	21e0      	movs	r1, #224	; 0xe0
 8004f64:	01c9      	lsls	r1, r1, #7
 8004f66:	430a      	orrs	r2, r1
 8004f68:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f6a:	4b5d      	ldr	r3, [pc, #372]	; (80050e0 <HAL_RCC_ClockConfig+0x1f8>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	4a5d      	ldr	r2, [pc, #372]	; (80050e4 <HAL_RCC_ClockConfig+0x1fc>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	0019      	movs	r1, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	4b59      	ldr	r3, [pc, #356]	; (80050e0 <HAL_RCC_ClockConfig+0x1f8>)
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2201      	movs	r2, #1
 8004f84:	4013      	ands	r3, r2
 8004f86:	d057      	beq.n	8005038 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d107      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f90:	4b53      	ldr	r3, [pc, #332]	; (80050e0 <HAL_RCC_ClockConfig+0x1f8>)
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	2380      	movs	r3, #128	; 0x80
 8004f96:	029b      	lsls	r3, r3, #10
 8004f98:	4013      	ands	r3, r2
 8004f9a:	d12b      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e097      	b.n	80050d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d107      	bne.n	8004fb8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fa8:	4b4d      	ldr	r3, [pc, #308]	; (80050e0 <HAL_RCC_ClockConfig+0x1f8>)
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	2380      	movs	r3, #128	; 0x80
 8004fae:	049b      	lsls	r3, r3, #18
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	d11f      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e08b      	b.n	80050d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d107      	bne.n	8004fd0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fc0:	4b47      	ldr	r3, [pc, #284]	; (80050e0 <HAL_RCC_ClockConfig+0x1f8>)
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	2380      	movs	r3, #128	; 0x80
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	4013      	ands	r3, r2
 8004fca:	d113      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e07f      	b.n	80050d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2b03      	cmp	r3, #3
 8004fd6:	d106      	bne.n	8004fe6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fd8:	4b41      	ldr	r3, [pc, #260]	; (80050e0 <HAL_RCC_ClockConfig+0x1f8>)
 8004fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fdc:	2202      	movs	r2, #2
 8004fde:	4013      	ands	r3, r2
 8004fe0:	d108      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e074      	b.n	80050d0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fe6:	4b3e      	ldr	r3, [pc, #248]	; (80050e0 <HAL_RCC_ClockConfig+0x1f8>)
 8004fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fea:	2202      	movs	r2, #2
 8004fec:	4013      	ands	r3, r2
 8004fee:	d101      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e06d      	b.n	80050d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ff4:	4b3a      	ldr	r3, [pc, #232]	; (80050e0 <HAL_RCC_ClockConfig+0x1f8>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	2207      	movs	r2, #7
 8004ffa:	4393      	bics	r3, r2
 8004ffc:	0019      	movs	r1, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	4b37      	ldr	r3, [pc, #220]	; (80050e0 <HAL_RCC_ClockConfig+0x1f8>)
 8005004:	430a      	orrs	r2, r1
 8005006:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005008:	f7fe fb88 	bl	800371c <HAL_GetTick>
 800500c:	0003      	movs	r3, r0
 800500e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005010:	e009      	b.n	8005026 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005012:	f7fe fb83 	bl	800371c <HAL_GetTick>
 8005016:	0002      	movs	r2, r0
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	4a2f      	ldr	r2, [pc, #188]	; (80050dc <HAL_RCC_ClockConfig+0x1f4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e054      	b.n	80050d0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005026:	4b2e      	ldr	r3, [pc, #184]	; (80050e0 <HAL_RCC_ClockConfig+0x1f8>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	2238      	movs	r2, #56	; 0x38
 800502c:	401a      	ands	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	429a      	cmp	r2, r3
 8005036:	d1ec      	bne.n	8005012 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005038:	4b27      	ldr	r3, [pc, #156]	; (80050d8 <HAL_RCC_ClockConfig+0x1f0>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2207      	movs	r2, #7
 800503e:	4013      	ands	r3, r2
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d21e      	bcs.n	8005084 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005046:	4b24      	ldr	r3, [pc, #144]	; (80050d8 <HAL_RCC_ClockConfig+0x1f0>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2207      	movs	r2, #7
 800504c:	4393      	bics	r3, r2
 800504e:	0019      	movs	r1, r3
 8005050:	4b21      	ldr	r3, [pc, #132]	; (80050d8 <HAL_RCC_ClockConfig+0x1f0>)
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005058:	f7fe fb60 	bl	800371c <HAL_GetTick>
 800505c:	0003      	movs	r3, r0
 800505e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005060:	e009      	b.n	8005076 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005062:	f7fe fb5b 	bl	800371c <HAL_GetTick>
 8005066:	0002      	movs	r2, r0
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	4a1b      	ldr	r2, [pc, #108]	; (80050dc <HAL_RCC_ClockConfig+0x1f4>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e02c      	b.n	80050d0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005076:	4b18      	ldr	r3, [pc, #96]	; (80050d8 <HAL_RCC_ClockConfig+0x1f0>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2207      	movs	r2, #7
 800507c:	4013      	ands	r3, r2
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d1ee      	bne.n	8005062 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2204      	movs	r2, #4
 800508a:	4013      	ands	r3, r2
 800508c:	d009      	beq.n	80050a2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800508e:	4b14      	ldr	r3, [pc, #80]	; (80050e0 <HAL_RCC_ClockConfig+0x1f8>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	4a15      	ldr	r2, [pc, #84]	; (80050e8 <HAL_RCC_ClockConfig+0x200>)
 8005094:	4013      	ands	r3, r2
 8005096:	0019      	movs	r1, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	4b10      	ldr	r3, [pc, #64]	; (80050e0 <HAL_RCC_ClockConfig+0x1f8>)
 800509e:	430a      	orrs	r2, r1
 80050a0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80050a2:	f000 f829 	bl	80050f8 <HAL_RCC_GetSysClockFreq>
 80050a6:	0001      	movs	r1, r0
 80050a8:	4b0d      	ldr	r3, [pc, #52]	; (80050e0 <HAL_RCC_ClockConfig+0x1f8>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	0a1b      	lsrs	r3, r3, #8
 80050ae:	220f      	movs	r2, #15
 80050b0:	401a      	ands	r2, r3
 80050b2:	4b0e      	ldr	r3, [pc, #56]	; (80050ec <HAL_RCC_ClockConfig+0x204>)
 80050b4:	0092      	lsls	r2, r2, #2
 80050b6:	58d3      	ldr	r3, [r2, r3]
 80050b8:	221f      	movs	r2, #31
 80050ba:	4013      	ands	r3, r2
 80050bc:	000a      	movs	r2, r1
 80050be:	40da      	lsrs	r2, r3
 80050c0:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <HAL_RCC_ClockConfig+0x208>)
 80050c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80050c4:	4b0b      	ldr	r3, [pc, #44]	; (80050f4 <HAL_RCC_ClockConfig+0x20c>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	0018      	movs	r0, r3
 80050ca:	f7fe facb 	bl	8003664 <HAL_InitTick>
 80050ce:	0003      	movs	r3, r0
}
 80050d0:	0018      	movs	r0, r3
 80050d2:	46bd      	mov	sp, r7
 80050d4:	b004      	add	sp, #16
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	40022000 	.word	0x40022000
 80050dc:	00001388 	.word	0x00001388
 80050e0:	40021000 	.word	0x40021000
 80050e4:	fffff0ff 	.word	0xfffff0ff
 80050e8:	ffff8fff 	.word	0xffff8fff
 80050ec:	08009bc0 	.word	0x08009bc0
 80050f0:	20000000 	.word	0x20000000
 80050f4:	20000004 	.word	0x20000004

080050f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050fe:	4b3c      	ldr	r3, [pc, #240]	; (80051f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	2238      	movs	r2, #56	; 0x38
 8005104:	4013      	ands	r3, r2
 8005106:	d10f      	bne.n	8005128 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005108:	4b39      	ldr	r3, [pc, #228]	; (80051f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	0adb      	lsrs	r3, r3, #11
 800510e:	2207      	movs	r2, #7
 8005110:	4013      	ands	r3, r2
 8005112:	2201      	movs	r2, #1
 8005114:	409a      	lsls	r2, r3
 8005116:	0013      	movs	r3, r2
 8005118:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800511a:	6839      	ldr	r1, [r7, #0]
 800511c:	4835      	ldr	r0, [pc, #212]	; (80051f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800511e:	f7fa fffb 	bl	8000118 <__udivsi3>
 8005122:	0003      	movs	r3, r0
 8005124:	613b      	str	r3, [r7, #16]
 8005126:	e05d      	b.n	80051e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005128:	4b31      	ldr	r3, [pc, #196]	; (80051f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	2238      	movs	r2, #56	; 0x38
 800512e:	4013      	ands	r3, r2
 8005130:	2b08      	cmp	r3, #8
 8005132:	d102      	bne.n	800513a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005134:	4b30      	ldr	r3, [pc, #192]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x100>)
 8005136:	613b      	str	r3, [r7, #16]
 8005138:	e054      	b.n	80051e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800513a:	4b2d      	ldr	r3, [pc, #180]	; (80051f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	2238      	movs	r2, #56	; 0x38
 8005140:	4013      	ands	r3, r2
 8005142:	2b10      	cmp	r3, #16
 8005144:	d138      	bne.n	80051b8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005146:	4b2a      	ldr	r3, [pc, #168]	; (80051f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	2203      	movs	r2, #3
 800514c:	4013      	ands	r3, r2
 800514e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005150:	4b27      	ldr	r3, [pc, #156]	; (80051f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	091b      	lsrs	r3, r3, #4
 8005156:	2207      	movs	r2, #7
 8005158:	4013      	ands	r3, r2
 800515a:	3301      	adds	r3, #1
 800515c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2b03      	cmp	r3, #3
 8005162:	d10d      	bne.n	8005180 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005164:	68b9      	ldr	r1, [r7, #8]
 8005166:	4824      	ldr	r0, [pc, #144]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x100>)
 8005168:	f7fa ffd6 	bl	8000118 <__udivsi3>
 800516c:	0003      	movs	r3, r0
 800516e:	0019      	movs	r1, r3
 8005170:	4b1f      	ldr	r3, [pc, #124]	; (80051f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	0a1b      	lsrs	r3, r3, #8
 8005176:	227f      	movs	r2, #127	; 0x7f
 8005178:	4013      	ands	r3, r2
 800517a:	434b      	muls	r3, r1
 800517c:	617b      	str	r3, [r7, #20]
        break;
 800517e:	e00d      	b.n	800519c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005180:	68b9      	ldr	r1, [r7, #8]
 8005182:	481c      	ldr	r0, [pc, #112]	; (80051f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005184:	f7fa ffc8 	bl	8000118 <__udivsi3>
 8005188:	0003      	movs	r3, r0
 800518a:	0019      	movs	r1, r3
 800518c:	4b18      	ldr	r3, [pc, #96]	; (80051f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	0a1b      	lsrs	r3, r3, #8
 8005192:	227f      	movs	r2, #127	; 0x7f
 8005194:	4013      	ands	r3, r2
 8005196:	434b      	muls	r3, r1
 8005198:	617b      	str	r3, [r7, #20]
        break;
 800519a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800519c:	4b14      	ldr	r3, [pc, #80]	; (80051f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	0f5b      	lsrs	r3, r3, #29
 80051a2:	2207      	movs	r2, #7
 80051a4:	4013      	ands	r3, r2
 80051a6:	3301      	adds	r3, #1
 80051a8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	6978      	ldr	r0, [r7, #20]
 80051ae:	f7fa ffb3 	bl	8000118 <__udivsi3>
 80051b2:	0003      	movs	r3, r0
 80051b4:	613b      	str	r3, [r7, #16]
 80051b6:	e015      	b.n	80051e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80051b8:	4b0d      	ldr	r3, [pc, #52]	; (80051f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	2238      	movs	r2, #56	; 0x38
 80051be:	4013      	ands	r3, r2
 80051c0:	2b20      	cmp	r3, #32
 80051c2:	d103      	bne.n	80051cc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80051c4:	2380      	movs	r3, #128	; 0x80
 80051c6:	021b      	lsls	r3, r3, #8
 80051c8:	613b      	str	r3, [r7, #16]
 80051ca:	e00b      	b.n	80051e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80051cc:	4b08      	ldr	r3, [pc, #32]	; (80051f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	2238      	movs	r2, #56	; 0x38
 80051d2:	4013      	ands	r3, r2
 80051d4:	2b18      	cmp	r3, #24
 80051d6:	d103      	bne.n	80051e0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80051d8:	23fa      	movs	r3, #250	; 0xfa
 80051da:	01db      	lsls	r3, r3, #7
 80051dc:	613b      	str	r3, [r7, #16]
 80051de:	e001      	b.n	80051e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80051e4:	693b      	ldr	r3, [r7, #16]
}
 80051e6:	0018      	movs	r0, r3
 80051e8:	46bd      	mov	sp, r7
 80051ea:	b006      	add	sp, #24
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	46c0      	nop			; (mov r8, r8)
 80051f0:	40021000 	.word	0x40021000
 80051f4:	00f42400 	.word	0x00f42400
 80051f8:	007a1200 	.word	0x007a1200

080051fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005200:	4b02      	ldr	r3, [pc, #8]	; (800520c <HAL_RCC_GetHCLKFreq+0x10>)
 8005202:	681b      	ldr	r3, [r3, #0]
}
 8005204:	0018      	movs	r0, r3
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	46c0      	nop			; (mov r8, r8)
 800520c:	20000000 	.word	0x20000000

08005210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005210:	b5b0      	push	{r4, r5, r7, lr}
 8005212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005214:	f7ff fff2 	bl	80051fc <HAL_RCC_GetHCLKFreq>
 8005218:	0004      	movs	r4, r0
 800521a:	f7ff fb39 	bl	8004890 <LL_RCC_GetAPB1Prescaler>
 800521e:	0003      	movs	r3, r0
 8005220:	0b1a      	lsrs	r2, r3, #12
 8005222:	4b05      	ldr	r3, [pc, #20]	; (8005238 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005224:	0092      	lsls	r2, r2, #2
 8005226:	58d3      	ldr	r3, [r2, r3]
 8005228:	221f      	movs	r2, #31
 800522a:	4013      	ands	r3, r2
 800522c:	40dc      	lsrs	r4, r3
 800522e:	0023      	movs	r3, r4
}
 8005230:	0018      	movs	r0, r3
 8005232:	46bd      	mov	sp, r7
 8005234:	bdb0      	pop	{r4, r5, r7, pc}
 8005236:	46c0      	nop			; (mov r8, r8)
 8005238:	08009c00 	.word	0x08009c00

0800523c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005244:	2313      	movs	r3, #19
 8005246:	18fb      	adds	r3, r7, r3
 8005248:	2200      	movs	r2, #0
 800524a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800524c:	2312      	movs	r3, #18
 800524e:	18fb      	adds	r3, r7, r3
 8005250:	2200      	movs	r2, #0
 8005252:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	2380      	movs	r3, #128	; 0x80
 800525a:	029b      	lsls	r3, r3, #10
 800525c:	4013      	ands	r3, r2
 800525e:	d100      	bne.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005260:	e0a3      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005262:	2011      	movs	r0, #17
 8005264:	183b      	adds	r3, r7, r0
 8005266:	2200      	movs	r2, #0
 8005268:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800526a:	4bc3      	ldr	r3, [pc, #780]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800526c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800526e:	2380      	movs	r3, #128	; 0x80
 8005270:	055b      	lsls	r3, r3, #21
 8005272:	4013      	ands	r3, r2
 8005274:	d110      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005276:	4bc0      	ldr	r3, [pc, #768]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005278:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800527a:	4bbf      	ldr	r3, [pc, #764]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800527c:	2180      	movs	r1, #128	; 0x80
 800527e:	0549      	lsls	r1, r1, #21
 8005280:	430a      	orrs	r2, r1
 8005282:	63da      	str	r2, [r3, #60]	; 0x3c
 8005284:	4bbc      	ldr	r3, [pc, #752]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005288:	2380      	movs	r3, #128	; 0x80
 800528a:	055b      	lsls	r3, r3, #21
 800528c:	4013      	ands	r3, r2
 800528e:	60bb      	str	r3, [r7, #8]
 8005290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005292:	183b      	adds	r3, r7, r0
 8005294:	2201      	movs	r2, #1
 8005296:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005298:	4bb8      	ldr	r3, [pc, #736]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	4bb7      	ldr	r3, [pc, #732]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800529e:	2180      	movs	r1, #128	; 0x80
 80052a0:	0049      	lsls	r1, r1, #1
 80052a2:	430a      	orrs	r2, r1
 80052a4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052a6:	f7fe fa39 	bl	800371c <HAL_GetTick>
 80052aa:	0003      	movs	r3, r0
 80052ac:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052ae:	e00b      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052b0:	f7fe fa34 	bl	800371c <HAL_GetTick>
 80052b4:	0002      	movs	r2, r0
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d904      	bls.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80052be:	2313      	movs	r3, #19
 80052c0:	18fb      	adds	r3, r7, r3
 80052c2:	2203      	movs	r2, #3
 80052c4:	701a      	strb	r2, [r3, #0]
        break;
 80052c6:	e005      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052c8:	4bac      	ldr	r3, [pc, #688]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	2380      	movs	r3, #128	; 0x80
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	4013      	ands	r3, r2
 80052d2:	d0ed      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80052d4:	2313      	movs	r3, #19
 80052d6:	18fb      	adds	r3, r7, r3
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d154      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052de:	4ba6      	ldr	r3, [pc, #664]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052e2:	23c0      	movs	r3, #192	; 0xc0
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4013      	ands	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d019      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d014      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052fa:	4b9f      	ldr	r3, [pc, #636]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052fe:	4aa0      	ldr	r2, [pc, #640]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005300:	4013      	ands	r3, r2
 8005302:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005304:	4b9c      	ldr	r3, [pc, #624]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005306:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005308:	4b9b      	ldr	r3, [pc, #620]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800530a:	2180      	movs	r1, #128	; 0x80
 800530c:	0249      	lsls	r1, r1, #9
 800530e:	430a      	orrs	r2, r1
 8005310:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005312:	4b99      	ldr	r3, [pc, #612]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005314:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005316:	4b98      	ldr	r3, [pc, #608]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005318:	499a      	ldr	r1, [pc, #616]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800531a:	400a      	ands	r2, r1
 800531c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800531e:	4b96      	ldr	r3, [pc, #600]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	2201      	movs	r2, #1
 8005328:	4013      	ands	r3, r2
 800532a:	d016      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800532c:	f7fe f9f6 	bl	800371c <HAL_GetTick>
 8005330:	0003      	movs	r3, r0
 8005332:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005334:	e00c      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005336:	f7fe f9f1 	bl	800371c <HAL_GetTick>
 800533a:	0002      	movs	r2, r0
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	4a91      	ldr	r2, [pc, #580]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d904      	bls.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005346:	2313      	movs	r3, #19
 8005348:	18fb      	adds	r3, r7, r3
 800534a:	2203      	movs	r2, #3
 800534c:	701a      	strb	r2, [r3, #0]
            break;
 800534e:	e004      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005350:	4b89      	ldr	r3, [pc, #548]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005354:	2202      	movs	r2, #2
 8005356:	4013      	ands	r3, r2
 8005358:	d0ed      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800535a:	2313      	movs	r3, #19
 800535c:	18fb      	adds	r3, r7, r3
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10a      	bne.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005364:	4b84      	ldr	r3, [pc, #528]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005368:	4a85      	ldr	r2, [pc, #532]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800536a:	4013      	ands	r3, r2
 800536c:	0019      	movs	r1, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005372:	4b81      	ldr	r3, [pc, #516]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005374:	430a      	orrs	r2, r1
 8005376:	65da      	str	r2, [r3, #92]	; 0x5c
 8005378:	e00c      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800537a:	2312      	movs	r3, #18
 800537c:	18fb      	adds	r3, r7, r3
 800537e:	2213      	movs	r2, #19
 8005380:	18ba      	adds	r2, r7, r2
 8005382:	7812      	ldrb	r2, [r2, #0]
 8005384:	701a      	strb	r2, [r3, #0]
 8005386:	e005      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005388:	2312      	movs	r3, #18
 800538a:	18fb      	adds	r3, r7, r3
 800538c:	2213      	movs	r2, #19
 800538e:	18ba      	adds	r2, r7, r2
 8005390:	7812      	ldrb	r2, [r2, #0]
 8005392:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005394:	2311      	movs	r3, #17
 8005396:	18fb      	adds	r3, r7, r3
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d105      	bne.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800539e:	4b76      	ldr	r3, [pc, #472]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053a2:	4b75      	ldr	r3, [pc, #468]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053a4:	4979      	ldr	r1, [pc, #484]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80053a6:	400a      	ands	r2, r1
 80053a8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2201      	movs	r2, #1
 80053b0:	4013      	ands	r3, r2
 80053b2:	d009      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053b4:	4b70      	ldr	r3, [pc, #448]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b8:	2203      	movs	r2, #3
 80053ba:	4393      	bics	r3, r2
 80053bc:	0019      	movs	r1, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	4b6d      	ldr	r3, [pc, #436]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053c4:	430a      	orrs	r2, r1
 80053c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2202      	movs	r2, #2
 80053ce:	4013      	ands	r3, r2
 80053d0:	d009      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053d2:	4b69      	ldr	r3, [pc, #420]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d6:	220c      	movs	r2, #12
 80053d8:	4393      	bics	r3, r2
 80053da:	0019      	movs	r1, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	4b65      	ldr	r3, [pc, #404]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053e2:	430a      	orrs	r2, r1
 80053e4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2210      	movs	r2, #16
 80053ec:	4013      	ands	r3, r2
 80053ee:	d009      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053f0:	4b61      	ldr	r3, [pc, #388]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f4:	4a66      	ldr	r2, [pc, #408]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80053f6:	4013      	ands	r3, r2
 80053f8:	0019      	movs	r1, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	4b5e      	ldr	r3, [pc, #376]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005400:	430a      	orrs	r2, r1
 8005402:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	2380      	movs	r3, #128	; 0x80
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4013      	ands	r3, r2
 800540e:	d009      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005410:	4b59      	ldr	r3, [pc, #356]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005414:	4a5f      	ldr	r2, [pc, #380]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005416:	4013      	ands	r3, r2
 8005418:	0019      	movs	r1, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699a      	ldr	r2, [r3, #24]
 800541e:	4b56      	ldr	r3, [pc, #344]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005420:	430a      	orrs	r2, r1
 8005422:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	2380      	movs	r3, #128	; 0x80
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	4013      	ands	r3, r2
 800542e:	d009      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005430:	4b51      	ldr	r3, [pc, #324]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005434:	4a58      	ldr	r2, [pc, #352]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005436:	4013      	ands	r3, r2
 8005438:	0019      	movs	r1, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	69da      	ldr	r2, [r3, #28]
 800543e:	4b4e      	ldr	r3, [pc, #312]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005440:	430a      	orrs	r2, r1
 8005442:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2220      	movs	r2, #32
 800544a:	4013      	ands	r3, r2
 800544c:	d009      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800544e:	4b4a      	ldr	r3, [pc, #296]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005452:	4a52      	ldr	r2, [pc, #328]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005454:	4013      	ands	r3, r2
 8005456:	0019      	movs	r1, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691a      	ldr	r2, [r3, #16]
 800545c:	4b46      	ldr	r3, [pc, #280]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800545e:	430a      	orrs	r2, r1
 8005460:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	2380      	movs	r3, #128	; 0x80
 8005468:	01db      	lsls	r3, r3, #7
 800546a:	4013      	ands	r3, r2
 800546c:	d015      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800546e:	4b42      	ldr	r3, [pc, #264]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	0899      	lsrs	r1, r3, #2
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1a      	ldr	r2, [r3, #32]
 800547a:	4b3f      	ldr	r3, [pc, #252]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800547c:	430a      	orrs	r2, r1
 800547e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a1a      	ldr	r2, [r3, #32]
 8005484:	2380      	movs	r3, #128	; 0x80
 8005486:	05db      	lsls	r3, r3, #23
 8005488:	429a      	cmp	r2, r3
 800548a:	d106      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800548c:	4b3a      	ldr	r3, [pc, #232]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800548e:	68da      	ldr	r2, [r3, #12]
 8005490:	4b39      	ldr	r3, [pc, #228]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005492:	2180      	movs	r1, #128	; 0x80
 8005494:	0249      	lsls	r1, r1, #9
 8005496:	430a      	orrs	r2, r1
 8005498:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	2380      	movs	r3, #128	; 0x80
 80054a0:	031b      	lsls	r3, r3, #12
 80054a2:	4013      	ands	r3, r2
 80054a4:	d009      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80054a6:	4b34      	ldr	r3, [pc, #208]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054aa:	2240      	movs	r2, #64	; 0x40
 80054ac:	4393      	bics	r3, r2
 80054ae:	0019      	movs	r1, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054b4:	4b30      	ldr	r3, [pc, #192]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054b6:	430a      	orrs	r2, r1
 80054b8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	2380      	movs	r3, #128	; 0x80
 80054c0:	039b      	lsls	r3, r3, #14
 80054c2:	4013      	ands	r3, r2
 80054c4:	d016      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80054c6:	4b2c      	ldr	r3, [pc, #176]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ca:	4a35      	ldr	r2, [pc, #212]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80054cc:	4013      	ands	r3, r2
 80054ce:	0019      	movs	r1, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054d4:	4b28      	ldr	r3, [pc, #160]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054d6:	430a      	orrs	r2, r1
 80054d8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054de:	2380      	movs	r3, #128	; 0x80
 80054e0:	03db      	lsls	r3, r3, #15
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d106      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80054e6:	4b24      	ldr	r3, [pc, #144]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054e8:	68da      	ldr	r2, [r3, #12]
 80054ea:	4b23      	ldr	r3, [pc, #140]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054ec:	2180      	movs	r1, #128	; 0x80
 80054ee:	0449      	lsls	r1, r1, #17
 80054f0:	430a      	orrs	r2, r1
 80054f2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	2380      	movs	r3, #128	; 0x80
 80054fa:	03db      	lsls	r3, r3, #15
 80054fc:	4013      	ands	r3, r2
 80054fe:	d016      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005500:	4b1d      	ldr	r3, [pc, #116]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005504:	4a27      	ldr	r2, [pc, #156]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005506:	4013      	ands	r3, r2
 8005508:	0019      	movs	r1, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800550e:	4b1a      	ldr	r3, [pc, #104]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005510:	430a      	orrs	r2, r1
 8005512:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005518:	2380      	movs	r3, #128	; 0x80
 800551a:	045b      	lsls	r3, r3, #17
 800551c:	429a      	cmp	r2, r3
 800551e:	d106      	bne.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005520:	4b15      	ldr	r3, [pc, #84]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	4b14      	ldr	r3, [pc, #80]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005526:	2180      	movs	r1, #128	; 0x80
 8005528:	0449      	lsls	r1, r1, #17
 800552a:	430a      	orrs	r2, r1
 800552c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	2380      	movs	r3, #128	; 0x80
 8005534:	011b      	lsls	r3, r3, #4
 8005536:	4013      	ands	r3, r2
 8005538:	d016      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800553a:	4b0f      	ldr	r3, [pc, #60]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800553c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553e:	4a1a      	ldr	r2, [pc, #104]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005540:	4013      	ands	r3, r2
 8005542:	0019      	movs	r1, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	695a      	ldr	r2, [r3, #20]
 8005548:	4b0b      	ldr	r3, [pc, #44]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800554a:	430a      	orrs	r2, r1
 800554c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	695a      	ldr	r2, [r3, #20]
 8005552:	2380      	movs	r3, #128	; 0x80
 8005554:	01db      	lsls	r3, r3, #7
 8005556:	429a      	cmp	r2, r3
 8005558:	d106      	bne.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800555a:	4b07      	ldr	r3, [pc, #28]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	4b06      	ldr	r3, [pc, #24]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005560:	2180      	movs	r1, #128	; 0x80
 8005562:	0249      	lsls	r1, r1, #9
 8005564:	430a      	orrs	r2, r1
 8005566:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005568:	2312      	movs	r3, #18
 800556a:	18fb      	adds	r3, r7, r3
 800556c:	781b      	ldrb	r3, [r3, #0]
}
 800556e:	0018      	movs	r0, r3
 8005570:	46bd      	mov	sp, r7
 8005572:	b006      	add	sp, #24
 8005574:	bd80      	pop	{r7, pc}
 8005576:	46c0      	nop			; (mov r8, r8)
 8005578:	40021000 	.word	0x40021000
 800557c:	40007000 	.word	0x40007000
 8005580:	fffffcff 	.word	0xfffffcff
 8005584:	fffeffff 	.word	0xfffeffff
 8005588:	00001388 	.word	0x00001388
 800558c:	efffffff 	.word	0xefffffff
 8005590:	fffff3ff 	.word	0xfffff3ff
 8005594:	fff3ffff 	.word	0xfff3ffff
 8005598:	ffcfffff 	.word	0xffcfffff
 800559c:	ffffcfff 	.word	0xffffcfff
 80055a0:	ffbfffff 	.word	0xffbfffff
 80055a4:	feffffff 	.word	0xfeffffff
 80055a8:	ffff3fff 	.word	0xffff3fff

080055ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e0a8      	b.n	8005710 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d109      	bne.n	80055da <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	2382      	movs	r3, #130	; 0x82
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d009      	beq.n	80055e6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	61da      	str	r2, [r3, #28]
 80055d8:	e005      	b.n	80055e6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	225d      	movs	r2, #93	; 0x5d
 80055f0:	5c9b      	ldrb	r3, [r3, r2]
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d107      	bne.n	8005608 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	225c      	movs	r2, #92	; 0x5c
 80055fc:	2100      	movs	r1, #0
 80055fe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	0018      	movs	r0, r3
 8005604:	f7fd fe20 	bl	8003248 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	225d      	movs	r2, #93	; 0x5d
 800560c:	2102      	movs	r1, #2
 800560e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2140      	movs	r1, #64	; 0x40
 800561c:	438a      	bics	r2, r1
 800561e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68da      	ldr	r2, [r3, #12]
 8005624:	23e0      	movs	r3, #224	; 0xe0
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	429a      	cmp	r2, r3
 800562a:	d902      	bls.n	8005632 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	e002      	b.n	8005638 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005632:	2380      	movs	r3, #128	; 0x80
 8005634:	015b      	lsls	r3, r3, #5
 8005636:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68da      	ldr	r2, [r3, #12]
 800563c:	23f0      	movs	r3, #240	; 0xf0
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	429a      	cmp	r2, r3
 8005642:	d008      	beq.n	8005656 <HAL_SPI_Init+0xaa>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68da      	ldr	r2, [r3, #12]
 8005648:	23e0      	movs	r3, #224	; 0xe0
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	429a      	cmp	r2, r3
 800564e:	d002      	beq.n	8005656 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	2382      	movs	r3, #130	; 0x82
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	401a      	ands	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6899      	ldr	r1, [r3, #8]
 8005664:	2384      	movs	r3, #132	; 0x84
 8005666:	021b      	lsls	r3, r3, #8
 8005668:	400b      	ands	r3, r1
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	2102      	movs	r1, #2
 8005672:	400b      	ands	r3, r1
 8005674:	431a      	orrs	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	2101      	movs	r1, #1
 800567c:	400b      	ands	r3, r1
 800567e:	431a      	orrs	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6999      	ldr	r1, [r3, #24]
 8005684:	2380      	movs	r3, #128	; 0x80
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	400b      	ands	r3, r1
 800568a:	431a      	orrs	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	2138      	movs	r1, #56	; 0x38
 8005692:	400b      	ands	r3, r1
 8005694:	431a      	orrs	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	2180      	movs	r1, #128	; 0x80
 800569c:	400b      	ands	r3, r1
 800569e:	431a      	orrs	r2, r3
 80056a0:	0011      	movs	r1, r2
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056a6:	2380      	movs	r3, #128	; 0x80
 80056a8:	019b      	lsls	r3, r3, #6
 80056aa:	401a      	ands	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	0c1b      	lsrs	r3, r3, #16
 80056ba:	2204      	movs	r2, #4
 80056bc:	401a      	ands	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	2110      	movs	r1, #16
 80056c4:	400b      	ands	r3, r1
 80056c6:	431a      	orrs	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056cc:	2108      	movs	r1, #8
 80056ce:	400b      	ands	r3, r1
 80056d0:	431a      	orrs	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68d9      	ldr	r1, [r3, #12]
 80056d6:	23f0      	movs	r3, #240	; 0xf0
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	400b      	ands	r3, r1
 80056dc:	431a      	orrs	r2, r3
 80056de:	0011      	movs	r1, r2
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	2380      	movs	r3, #128	; 0x80
 80056e4:	015b      	lsls	r3, r3, #5
 80056e6:	401a      	ands	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	69da      	ldr	r2, [r3, #28]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4907      	ldr	r1, [pc, #28]	; (8005718 <HAL_SPI_Init+0x16c>)
 80056fc:	400a      	ands	r2, r1
 80056fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	225d      	movs	r2, #93	; 0x5d
 800570a:	2101      	movs	r1, #1
 800570c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	0018      	movs	r0, r3
 8005712:	46bd      	mov	sp, r7
 8005714:	b004      	add	sp, #16
 8005716:	bd80      	pop	{r7, pc}
 8005718:	fffff7ff 	.word	0xfffff7ff

0800571c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b088      	sub	sp, #32
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	603b      	str	r3, [r7, #0]
 8005728:	1dbb      	adds	r3, r7, #6
 800572a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800572c:	231f      	movs	r3, #31
 800572e:	18fb      	adds	r3, r7, r3
 8005730:	2200      	movs	r2, #0
 8005732:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	225c      	movs	r2, #92	; 0x5c
 8005738:	5c9b      	ldrb	r3, [r3, r2]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d101      	bne.n	8005742 <HAL_SPI_Transmit+0x26>
 800573e:	2302      	movs	r3, #2
 8005740:	e140      	b.n	80059c4 <HAL_SPI_Transmit+0x2a8>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	225c      	movs	r2, #92	; 0x5c
 8005746:	2101      	movs	r1, #1
 8005748:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800574a:	f7fd ffe7 	bl	800371c <HAL_GetTick>
 800574e:	0003      	movs	r3, r0
 8005750:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005752:	2316      	movs	r3, #22
 8005754:	18fb      	adds	r3, r7, r3
 8005756:	1dba      	adds	r2, r7, #6
 8005758:	8812      	ldrh	r2, [r2, #0]
 800575a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	225d      	movs	r2, #93	; 0x5d
 8005760:	5c9b      	ldrb	r3, [r3, r2]
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b01      	cmp	r3, #1
 8005766:	d004      	beq.n	8005772 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005768:	231f      	movs	r3, #31
 800576a:	18fb      	adds	r3, r7, r3
 800576c:	2202      	movs	r2, #2
 800576e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005770:	e11d      	b.n	80059ae <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d003      	beq.n	8005780 <HAL_SPI_Transmit+0x64>
 8005778:	1dbb      	adds	r3, r7, #6
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d104      	bne.n	800578a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005780:	231f      	movs	r3, #31
 8005782:	18fb      	adds	r3, r7, r3
 8005784:	2201      	movs	r2, #1
 8005786:	701a      	strb	r2, [r3, #0]
    goto error;
 8005788:	e111      	b.n	80059ae <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	225d      	movs	r2, #93	; 0x5d
 800578e:	2103      	movs	r1, #3
 8005790:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	1dba      	adds	r2, r7, #6
 80057a2:	8812      	ldrh	r2, [r2, #0]
 80057a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	1dba      	adds	r2, r7, #6
 80057aa:	8812      	ldrh	r2, [r2, #0]
 80057ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2244      	movs	r2, #68	; 0x44
 80057b8:	2100      	movs	r1, #0
 80057ba:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2246      	movs	r2, #70	; 0x46
 80057c0:	2100      	movs	r1, #0
 80057c2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	689a      	ldr	r2, [r3, #8]
 80057d4:	2380      	movs	r3, #128	; 0x80
 80057d6:	021b      	lsls	r3, r3, #8
 80057d8:	429a      	cmp	r2, r3
 80057da:	d110      	bne.n	80057fe <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2140      	movs	r1, #64	; 0x40
 80057e8:	438a      	bics	r2, r1
 80057ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2180      	movs	r1, #128	; 0x80
 80057f8:	01c9      	lsls	r1, r1, #7
 80057fa:	430a      	orrs	r2, r1
 80057fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2240      	movs	r2, #64	; 0x40
 8005806:	4013      	ands	r3, r2
 8005808:	2b40      	cmp	r3, #64	; 0x40
 800580a:	d007      	beq.n	800581c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2140      	movs	r1, #64	; 0x40
 8005818:	430a      	orrs	r2, r1
 800581a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	68da      	ldr	r2, [r3, #12]
 8005820:	23e0      	movs	r3, #224	; 0xe0
 8005822:	00db      	lsls	r3, r3, #3
 8005824:	429a      	cmp	r2, r3
 8005826:	d94e      	bls.n	80058c6 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d004      	beq.n	800583a <HAL_SPI_Transmit+0x11e>
 8005830:	2316      	movs	r3, #22
 8005832:	18fb      	adds	r3, r7, r3
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d13f      	bne.n	80058ba <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583e:	881a      	ldrh	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584a:	1c9a      	adds	r2, r3, #2
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005854:	b29b      	uxth	r3, r3
 8005856:	3b01      	subs	r3, #1
 8005858:	b29a      	uxth	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800585e:	e02c      	b.n	80058ba <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	2202      	movs	r2, #2
 8005868:	4013      	ands	r3, r2
 800586a:	2b02      	cmp	r3, #2
 800586c:	d112      	bne.n	8005894 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005872:	881a      	ldrh	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587e:	1c9a      	adds	r2, r3, #2
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005888:	b29b      	uxth	r3, r3
 800588a:	3b01      	subs	r3, #1
 800588c:	b29a      	uxth	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005892:	e012      	b.n	80058ba <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005894:	f7fd ff42 	bl	800371c <HAL_GetTick>
 8005898:	0002      	movs	r2, r0
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d802      	bhi.n	80058aa <HAL_SPI_Transmit+0x18e>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	3301      	adds	r3, #1
 80058a8:	d102      	bne.n	80058b0 <HAL_SPI_Transmit+0x194>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d104      	bne.n	80058ba <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80058b0:	231f      	movs	r3, #31
 80058b2:	18fb      	adds	r3, r7, r3
 80058b4:	2203      	movs	r2, #3
 80058b6:	701a      	strb	r2, [r3, #0]
          goto error;
 80058b8:	e079      	b.n	80059ae <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058be:	b29b      	uxth	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1cd      	bne.n	8005860 <HAL_SPI_Transmit+0x144>
 80058c4:	e04f      	b.n	8005966 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d004      	beq.n	80058d8 <HAL_SPI_Transmit+0x1bc>
 80058ce:	2316      	movs	r3, #22
 80058d0:	18fb      	adds	r3, r7, r3
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d141      	bne.n	800595c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	330c      	adds	r3, #12
 80058e2:	7812      	ldrb	r2, [r2, #0]
 80058e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ea:	1c5a      	adds	r2, r3, #1
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	3b01      	subs	r3, #1
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80058fe:	e02d      	b.n	800595c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	2202      	movs	r2, #2
 8005908:	4013      	ands	r3, r2
 800590a:	2b02      	cmp	r3, #2
 800590c:	d113      	bne.n	8005936 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	330c      	adds	r3, #12
 8005918:	7812      	ldrb	r2, [r2, #0]
 800591a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005920:	1c5a      	adds	r2, r3, #1
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800592a:	b29b      	uxth	r3, r3
 800592c:	3b01      	subs	r3, #1
 800592e:	b29a      	uxth	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005934:	e012      	b.n	800595c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005936:	f7fd fef1 	bl	800371c <HAL_GetTick>
 800593a:	0002      	movs	r2, r0
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	683a      	ldr	r2, [r7, #0]
 8005942:	429a      	cmp	r2, r3
 8005944:	d802      	bhi.n	800594c <HAL_SPI_Transmit+0x230>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	3301      	adds	r3, #1
 800594a:	d102      	bne.n	8005952 <HAL_SPI_Transmit+0x236>
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d104      	bne.n	800595c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8005952:	231f      	movs	r3, #31
 8005954:	18fb      	adds	r3, r7, r3
 8005956:	2203      	movs	r2, #3
 8005958:	701a      	strb	r2, [r3, #0]
          goto error;
 800595a:	e028      	b.n	80059ae <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005960:	b29b      	uxth	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1cc      	bne.n	8005900 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	6839      	ldr	r1, [r7, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	0018      	movs	r0, r3
 800596e:	f000 fc4b 	bl	8006208 <SPI_EndRxTxTransaction>
 8005972:	1e03      	subs	r3, r0, #0
 8005974:	d002      	beq.n	800597c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2220      	movs	r2, #32
 800597a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10a      	bne.n	800599a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005984:	2300      	movs	r3, #0
 8005986:	613b      	str	r3, [r7, #16]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	613b      	str	r3, [r7, #16]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	613b      	str	r3, [r7, #16]
 8005998:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d004      	beq.n	80059ac <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80059a2:	231f      	movs	r3, #31
 80059a4:	18fb      	adds	r3, r7, r3
 80059a6:	2201      	movs	r2, #1
 80059a8:	701a      	strb	r2, [r3, #0]
 80059aa:	e000      	b.n	80059ae <HAL_SPI_Transmit+0x292>
  }

error:
 80059ac:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	225d      	movs	r2, #93	; 0x5d
 80059b2:	2101      	movs	r1, #1
 80059b4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	225c      	movs	r2, #92	; 0x5c
 80059ba:	2100      	movs	r1, #0
 80059bc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80059be:	231f      	movs	r3, #31
 80059c0:	18fb      	adds	r3, r7, r3
 80059c2:	781b      	ldrb	r3, [r3, #0]
}
 80059c4:	0018      	movs	r0, r3
 80059c6:	46bd      	mov	sp, r7
 80059c8:	b008      	add	sp, #32
 80059ca:	bd80      	pop	{r7, pc}

080059cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08a      	sub	sp, #40	; 0x28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
 80059d8:	001a      	movs	r2, r3
 80059da:	1cbb      	adds	r3, r7, #2
 80059dc:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80059de:	2301      	movs	r3, #1
 80059e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80059e2:	2323      	movs	r3, #35	; 0x23
 80059e4:	18fb      	adds	r3, r7, r3
 80059e6:	2200      	movs	r2, #0
 80059e8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	225c      	movs	r2, #92	; 0x5c
 80059ee:	5c9b      	ldrb	r3, [r3, r2]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d101      	bne.n	80059f8 <HAL_SPI_TransmitReceive+0x2c>
 80059f4:	2302      	movs	r3, #2
 80059f6:	e1b5      	b.n	8005d64 <HAL_SPI_TransmitReceive+0x398>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	225c      	movs	r2, #92	; 0x5c
 80059fc:	2101      	movs	r1, #1
 80059fe:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a00:	f7fd fe8c 	bl	800371c <HAL_GetTick>
 8005a04:	0003      	movs	r3, r0
 8005a06:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a08:	201b      	movs	r0, #27
 8005a0a:	183b      	adds	r3, r7, r0
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	215d      	movs	r1, #93	; 0x5d
 8005a10:	5c52      	ldrb	r2, [r2, r1]
 8005a12:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005a1a:	2312      	movs	r3, #18
 8005a1c:	18fb      	adds	r3, r7, r3
 8005a1e:	1cba      	adds	r2, r7, #2
 8005a20:	8812      	ldrh	r2, [r2, #0]
 8005a22:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a24:	183b      	adds	r3, r7, r0
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d011      	beq.n	8005a50 <HAL_SPI_TransmitReceive+0x84>
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	2382      	movs	r3, #130	; 0x82
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d107      	bne.n	8005a46 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d103      	bne.n	8005a46 <HAL_SPI_TransmitReceive+0x7a>
 8005a3e:	183b      	adds	r3, r7, r0
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	2b04      	cmp	r3, #4
 8005a44:	d004      	beq.n	8005a50 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005a46:	2323      	movs	r3, #35	; 0x23
 8005a48:	18fb      	adds	r3, r7, r3
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	701a      	strb	r2, [r3, #0]
    goto error;
 8005a4e:	e17e      	b.n	8005d4e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d006      	beq.n	8005a64 <HAL_SPI_TransmitReceive+0x98>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <HAL_SPI_TransmitReceive+0x98>
 8005a5c:	1cbb      	adds	r3, r7, #2
 8005a5e:	881b      	ldrh	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d104      	bne.n	8005a6e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005a64:	2323      	movs	r3, #35	; 0x23
 8005a66:	18fb      	adds	r3, r7, r3
 8005a68:	2201      	movs	r2, #1
 8005a6a:	701a      	strb	r2, [r3, #0]
    goto error;
 8005a6c:	e16f      	b.n	8005d4e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	225d      	movs	r2, #93	; 0x5d
 8005a72:	5c9b      	ldrb	r3, [r3, r2]
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b04      	cmp	r3, #4
 8005a78:	d003      	beq.n	8005a82 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	225d      	movs	r2, #93	; 0x5d
 8005a7e:	2105      	movs	r1, #5
 8005a80:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	1cba      	adds	r2, r7, #2
 8005a92:	2146      	movs	r1, #70	; 0x46
 8005a94:	8812      	ldrh	r2, [r2, #0]
 8005a96:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	1cba      	adds	r2, r7, #2
 8005a9c:	2144      	movs	r1, #68	; 0x44
 8005a9e:	8812      	ldrh	r2, [r2, #0]
 8005aa0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	1cba      	adds	r2, r7, #2
 8005aac:	8812      	ldrh	r2, [r2, #0]
 8005aae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	1cba      	adds	r2, r7, #2
 8005ab4:	8812      	ldrh	r2, [r2, #0]
 8005ab6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	68da      	ldr	r2, [r3, #12]
 8005ac8:	23e0      	movs	r3, #224	; 0xe0
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d908      	bls.n	8005ae2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	49a4      	ldr	r1, [pc, #656]	; (8005d6c <HAL_SPI_TransmitReceive+0x3a0>)
 8005adc:	400a      	ands	r2, r1
 8005ade:	605a      	str	r2, [r3, #4]
 8005ae0:	e008      	b.n	8005af4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2180      	movs	r1, #128	; 0x80
 8005aee:	0149      	lsls	r1, r1, #5
 8005af0:	430a      	orrs	r2, r1
 8005af2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2240      	movs	r2, #64	; 0x40
 8005afc:	4013      	ands	r3, r2
 8005afe:	2b40      	cmp	r3, #64	; 0x40
 8005b00:	d007      	beq.n	8005b12 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2140      	movs	r1, #64	; 0x40
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	68da      	ldr	r2, [r3, #12]
 8005b16:	23e0      	movs	r3, #224	; 0xe0
 8005b18:	00db      	lsls	r3, r3, #3
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d800      	bhi.n	8005b20 <HAL_SPI_TransmitReceive+0x154>
 8005b1e:	e07f      	b.n	8005c20 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d005      	beq.n	8005b34 <HAL_SPI_TransmitReceive+0x168>
 8005b28:	2312      	movs	r3, #18
 8005b2a:	18fb      	adds	r3, r7, r3
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d000      	beq.n	8005b34 <HAL_SPI_TransmitReceive+0x168>
 8005b32:	e069      	b.n	8005c08 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b38:	881a      	ldrh	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b44:	1c9a      	adds	r2, r3, #2
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	3b01      	subs	r3, #1
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b58:	e056      	b.n	8005c08 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	2202      	movs	r2, #2
 8005b62:	4013      	ands	r3, r2
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d11b      	bne.n	8005ba0 <HAL_SPI_TransmitReceive+0x1d4>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d016      	beq.n	8005ba0 <HAL_SPI_TransmitReceive+0x1d4>
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d113      	bne.n	8005ba0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7c:	881a      	ldrh	r2, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b88:	1c9a      	adds	r2, r3, #2
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	4013      	ands	r3, r2
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d11c      	bne.n	8005be8 <HAL_SPI_TransmitReceive+0x21c>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2246      	movs	r2, #70	; 0x46
 8005bb2:	5a9b      	ldrh	r3, [r3, r2]
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d016      	beq.n	8005be8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc4:	b292      	uxth	r2, r2
 8005bc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bcc:	1c9a      	adds	r2, r3, #2
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2246      	movs	r2, #70	; 0x46
 8005bd6:	5a9b      	ldrh	r3, [r3, r2]
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	b299      	uxth	r1, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2246      	movs	r2, #70	; 0x46
 8005be2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005be4:	2301      	movs	r3, #1
 8005be6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005be8:	f7fd fd98 	bl	800371c <HAL_GetTick>
 8005bec:	0002      	movs	r2, r0
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d807      	bhi.n	8005c08 <HAL_SPI_TransmitReceive+0x23c>
 8005bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	d004      	beq.n	8005c08 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8005bfe:	2323      	movs	r3, #35	; 0x23
 8005c00:	18fb      	adds	r3, r7, r3
 8005c02:	2203      	movs	r2, #3
 8005c04:	701a      	strb	r2, [r3, #0]
        goto error;
 8005c06:	e0a2      	b.n	8005d4e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1a3      	bne.n	8005b5a <HAL_SPI_TransmitReceive+0x18e>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2246      	movs	r2, #70	; 0x46
 8005c16:	5a9b      	ldrh	r3, [r3, r2]
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d19d      	bne.n	8005b5a <HAL_SPI_TransmitReceive+0x18e>
 8005c1e:	e085      	b.n	8005d2c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d005      	beq.n	8005c34 <HAL_SPI_TransmitReceive+0x268>
 8005c28:	2312      	movs	r3, #18
 8005c2a:	18fb      	adds	r3, r7, r3
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d000      	beq.n	8005c34 <HAL_SPI_TransmitReceive+0x268>
 8005c32:	e070      	b.n	8005d16 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	330c      	adds	r3, #12
 8005c3e:	7812      	ldrb	r2, [r2, #0]
 8005c40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	3b01      	subs	r3, #1
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c5a:	e05c      	b.n	8005d16 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	2202      	movs	r2, #2
 8005c64:	4013      	ands	r3, r2
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d11c      	bne.n	8005ca4 <HAL_SPI_TransmitReceive+0x2d8>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d017      	beq.n	8005ca4 <HAL_SPI_TransmitReceive+0x2d8>
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d114      	bne.n	8005ca4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	330c      	adds	r3, #12
 8005c84:	7812      	ldrb	r2, [r2, #0]
 8005c86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	2201      	movs	r2, #1
 8005cac:	4013      	ands	r3, r2
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d11e      	bne.n	8005cf0 <HAL_SPI_TransmitReceive+0x324>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2246      	movs	r2, #70	; 0x46
 8005cb6:	5a9b      	ldrh	r3, [r3, r2]
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d018      	beq.n	8005cf0 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	330c      	adds	r3, #12
 8005cc4:	001a      	movs	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	7812      	ldrb	r2, [r2, #0]
 8005ccc:	b2d2      	uxtb	r2, r2
 8005cce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2246      	movs	r2, #70	; 0x46
 8005cde:	5a9b      	ldrh	r3, [r3, r2]
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	b299      	uxth	r1, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2246      	movs	r2, #70	; 0x46
 8005cea:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cec:	2301      	movs	r3, #1
 8005cee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005cf0:	f7fd fd14 	bl	800371c <HAL_GetTick>
 8005cf4:	0002      	movs	r2, r0
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d802      	bhi.n	8005d06 <HAL_SPI_TransmitReceive+0x33a>
 8005d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d02:	3301      	adds	r3, #1
 8005d04:	d102      	bne.n	8005d0c <HAL_SPI_TransmitReceive+0x340>
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d104      	bne.n	8005d16 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8005d0c:	2323      	movs	r3, #35	; 0x23
 8005d0e:	18fb      	adds	r3, r7, r3
 8005d10:	2203      	movs	r2, #3
 8005d12:	701a      	strb	r2, [r3, #0]
        goto error;
 8005d14:	e01b      	b.n	8005d4e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d19d      	bne.n	8005c5c <HAL_SPI_TransmitReceive+0x290>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2246      	movs	r2, #70	; 0x46
 8005d24:	5a9b      	ldrh	r3, [r3, r2]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d197      	bne.n	8005c5c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d2c:	69fa      	ldr	r2, [r7, #28]
 8005d2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	0018      	movs	r0, r3
 8005d34:	f000 fa68 	bl	8006208 <SPI_EndRxTxTransaction>
 8005d38:	1e03      	subs	r3, r0, #0
 8005d3a:	d007      	beq.n	8005d4c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8005d3c:	2323      	movs	r3, #35	; 0x23
 8005d3e:	18fb      	adds	r3, r7, r3
 8005d40:	2201      	movs	r2, #1
 8005d42:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2220      	movs	r2, #32
 8005d48:	661a      	str	r2, [r3, #96]	; 0x60
 8005d4a:	e000      	b.n	8005d4e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8005d4c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	225d      	movs	r2, #93	; 0x5d
 8005d52:	2101      	movs	r1, #1
 8005d54:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	225c      	movs	r2, #92	; 0x5c
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005d5e:	2323      	movs	r3, #35	; 0x23
 8005d60:	18fb      	adds	r3, r7, r3
 8005d62:	781b      	ldrb	r3, [r3, #0]
}
 8005d64:	0018      	movs	r0, r3
 8005d66:	46bd      	mov	sp, r7
 8005d68:	b00a      	add	sp, #40	; 0x28
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	ffffefff 	.word	0xffffefff

08005d70 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b088      	sub	sp, #32
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	099b      	lsrs	r3, r3, #6
 8005d8c:	001a      	movs	r2, r3
 8005d8e:	2301      	movs	r3, #1
 8005d90:	4013      	ands	r3, r2
 8005d92:	d10f      	bne.n	8005db4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	2201      	movs	r2, #1
 8005d98:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d9a:	d00b      	beq.n	8005db4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	099b      	lsrs	r3, r3, #6
 8005da0:	001a      	movs	r2, r3
 8005da2:	2301      	movs	r3, #1
 8005da4:	4013      	ands	r3, r2
 8005da6:	d005      	beq.n	8005db4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	0010      	movs	r0, r2
 8005db0:	4798      	blx	r3
    return;
 8005db2:	e0d5      	b.n	8005f60 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	085b      	lsrs	r3, r3, #1
 8005db8:	001a      	movs	r2, r3
 8005dba:	2301      	movs	r3, #1
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	d00b      	beq.n	8005dd8 <HAL_SPI_IRQHandler+0x68>
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	09db      	lsrs	r3, r3, #7
 8005dc4:	001a      	movs	r2, r3
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	4013      	ands	r3, r2
 8005dca:	d005      	beq.n	8005dd8 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	0010      	movs	r0, r2
 8005dd4:	4798      	blx	r3
    return;
 8005dd6:	e0c3      	b.n	8005f60 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	095b      	lsrs	r3, r3, #5
 8005ddc:	001a      	movs	r2, r3
 8005dde:	2301      	movs	r3, #1
 8005de0:	4013      	ands	r3, r2
 8005de2:	d10c      	bne.n	8005dfe <HAL_SPI_IRQHandler+0x8e>
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	099b      	lsrs	r3, r3, #6
 8005de8:	001a      	movs	r2, r3
 8005dea:	2301      	movs	r3, #1
 8005dec:	4013      	ands	r3, r2
 8005dee:	d106      	bne.n	8005dfe <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	0a1b      	lsrs	r3, r3, #8
 8005df4:	001a      	movs	r2, r3
 8005df6:	2301      	movs	r3, #1
 8005df8:	4013      	ands	r3, r2
 8005dfa:	d100      	bne.n	8005dfe <HAL_SPI_IRQHandler+0x8e>
 8005dfc:	e0b0      	b.n	8005f60 <HAL_SPI_IRQHandler+0x1f0>
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	095b      	lsrs	r3, r3, #5
 8005e02:	001a      	movs	r2, r3
 8005e04:	2301      	movs	r3, #1
 8005e06:	4013      	ands	r3, r2
 8005e08:	d100      	bne.n	8005e0c <HAL_SPI_IRQHandler+0x9c>
 8005e0a:	e0a9      	b.n	8005f60 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	099b      	lsrs	r3, r3, #6
 8005e10:	001a      	movs	r2, r3
 8005e12:	2301      	movs	r3, #1
 8005e14:	4013      	ands	r3, r2
 8005e16:	d023      	beq.n	8005e60 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	225d      	movs	r2, #93	; 0x5d
 8005e1c:	5c9b      	ldrb	r3, [r3, r2]
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	2b03      	cmp	r3, #3
 8005e22:	d011      	beq.n	8005e48 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e28:	2204      	movs	r2, #4
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e30:	2300      	movs	r3, #0
 8005e32:	617b      	str	r3, [r7, #20]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	617b      	str	r3, [r7, #20]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	617b      	str	r3, [r7, #20]
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	e00b      	b.n	8005e60 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e48:	2300      	movs	r3, #0
 8005e4a:	613b      	str	r3, [r7, #16]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	613b      	str	r3, [r7, #16]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	613b      	str	r3, [r7, #16]
 8005e5c:	693b      	ldr	r3, [r7, #16]
        return;
 8005e5e:	e07f      	b.n	8005f60 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	095b      	lsrs	r3, r3, #5
 8005e64:	001a      	movs	r2, r3
 8005e66:	2301      	movs	r3, #1
 8005e68:	4013      	ands	r3, r2
 8005e6a:	d014      	beq.n	8005e96 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e70:	2201      	movs	r2, #1
 8005e72:	431a      	orrs	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60fb      	str	r3, [r7, #12]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2140      	movs	r1, #64	; 0x40
 8005e90:	438a      	bics	r2, r1
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	0a1b      	lsrs	r3, r3, #8
 8005e9a:	001a      	movs	r2, r3
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	d00c      	beq.n	8005ebc <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ea6:	2208      	movs	r2, #8
 8005ea8:	431a      	orrs	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60bb      	str	r3, [r7, #8]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	60bb      	str	r3, [r7, #8]
 8005eba:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d04c      	beq.n	8005f5e <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	21e0      	movs	r1, #224	; 0xe0
 8005ed0:	438a      	bics	r2, r1
 8005ed2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	225d      	movs	r2, #93	; 0x5d
 8005ed8:	2101      	movs	r1, #1
 8005eda:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	2202      	movs	r2, #2
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	d103      	bne.n	8005eec <HAL_SPI_IRQHandler+0x17c>
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	4013      	ands	r3, r2
 8005eea:	d032      	beq.n	8005f52 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2103      	movs	r1, #3
 8005ef8:	438a      	bics	r2, r1
 8005efa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d010      	beq.n	8005f26 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f08:	4a17      	ldr	r2, [pc, #92]	; (8005f68 <HAL_SPI_IRQHandler+0x1f8>)
 8005f0a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f10:	0018      	movs	r0, r3
 8005f12:	f7fe fa25 	bl	8004360 <HAL_DMA_Abort_IT>
 8005f16:	1e03      	subs	r3, r0, #0
 8005f18:	d005      	beq.n	8005f26 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f1e:	2240      	movs	r2, #64	; 0x40
 8005f20:	431a      	orrs	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d016      	beq.n	8005f5c <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f32:	4a0d      	ldr	r2, [pc, #52]	; (8005f68 <HAL_SPI_IRQHandler+0x1f8>)
 8005f34:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	f7fe fa10 	bl	8004360 <HAL_DMA_Abort_IT>
 8005f40:	1e03      	subs	r3, r0, #0
 8005f42:	d00b      	beq.n	8005f5c <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f48:	2240      	movs	r2, #64	; 0x40
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005f50:	e004      	b.n	8005f5c <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	0018      	movs	r0, r3
 8005f56:	f000 f809 	bl	8005f6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005f5a:	e000      	b.n	8005f5e <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8005f5c:	46c0      	nop			; (mov r8, r8)
    return;
 8005f5e:	46c0      	nop			; (mov r8, r8)
  }
}
 8005f60:	46bd      	mov	sp, r7
 8005f62:	b008      	add	sp, #32
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	46c0      	nop			; (mov r8, r8)
 8005f68:	08005f7d 	.word	0x08005f7d

08005f6c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005f74:	46c0      	nop			; (mov r8, r8)
 8005f76:	46bd      	mov	sp, r7
 8005f78:	b002      	add	sp, #8
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f88:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2246      	movs	r2, #70	; 0x46
 8005f8e:	2100      	movs	r1, #0
 8005f90:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	0018      	movs	r0, r3
 8005f9c:	f7ff ffe6 	bl	8005f6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005fa0:	46c0      	nop			; (mov r8, r8)
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	b004      	add	sp, #16
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b088      	sub	sp, #32
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	603b      	str	r3, [r7, #0]
 8005fb4:	1dfb      	adds	r3, r7, #7
 8005fb6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005fb8:	f7fd fbb0 	bl	800371c <HAL_GetTick>
 8005fbc:	0002      	movs	r2, r0
 8005fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc0:	1a9b      	subs	r3, r3, r2
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	18d3      	adds	r3, r2, r3
 8005fc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005fc8:	f7fd fba8 	bl	800371c <HAL_GetTick>
 8005fcc:	0003      	movs	r3, r0
 8005fce:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005fd0:	4b3a      	ldr	r3, [pc, #232]	; (80060bc <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	015b      	lsls	r3, r3, #5
 8005fd6:	0d1b      	lsrs	r3, r3, #20
 8005fd8:	69fa      	ldr	r2, [r7, #28]
 8005fda:	4353      	muls	r3, r2
 8005fdc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fde:	e058      	b.n	8006092 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	d055      	beq.n	8006092 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fe6:	f7fd fb99 	bl	800371c <HAL_GetTick>
 8005fea:	0002      	movs	r2, r0
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	69fa      	ldr	r2, [r7, #28]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d902      	bls.n	8005ffc <SPI_WaitFlagStateUntilTimeout+0x54>
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d142      	bne.n	8006082 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	21e0      	movs	r1, #224	; 0xe0
 8006008:	438a      	bics	r2, r1
 800600a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	2382      	movs	r3, #130	; 0x82
 8006012:	005b      	lsls	r3, r3, #1
 8006014:	429a      	cmp	r2, r3
 8006016:	d113      	bne.n	8006040 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	2380      	movs	r3, #128	; 0x80
 800601e:	021b      	lsls	r3, r3, #8
 8006020:	429a      	cmp	r2, r3
 8006022:	d005      	beq.n	8006030 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	2380      	movs	r3, #128	; 0x80
 800602a:	00db      	lsls	r3, r3, #3
 800602c:	429a      	cmp	r2, r3
 800602e:	d107      	bne.n	8006040 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2140      	movs	r1, #64	; 0x40
 800603c:	438a      	bics	r2, r1
 800603e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006044:	2380      	movs	r3, #128	; 0x80
 8006046:	019b      	lsls	r3, r3, #6
 8006048:	429a      	cmp	r2, r3
 800604a:	d110      	bne.n	800606e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	491a      	ldr	r1, [pc, #104]	; (80060c0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006058:	400a      	ands	r2, r1
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2180      	movs	r1, #128	; 0x80
 8006068:	0189      	lsls	r1, r1, #6
 800606a:	430a      	orrs	r2, r1
 800606c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	225d      	movs	r2, #93	; 0x5d
 8006072:	2101      	movs	r1, #1
 8006074:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	225c      	movs	r2, #92	; 0x5c
 800607a:	2100      	movs	r1, #0
 800607c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e017      	b.n	80060b2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	3b01      	subs	r3, #1
 8006090:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	4013      	ands	r3, r2
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	425a      	negs	r2, r3
 80060a2:	4153      	adcs	r3, r2
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	001a      	movs	r2, r3
 80060a8:	1dfb      	adds	r3, r7, #7
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d197      	bne.n	8005fe0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	0018      	movs	r0, r3
 80060b4:	46bd      	mov	sp, r7
 80060b6:	b008      	add	sp, #32
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	46c0      	nop			; (mov r8, r8)
 80060bc:	20000000 	.word	0x20000000
 80060c0:	ffffdfff 	.word	0xffffdfff

080060c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b08a      	sub	sp, #40	; 0x28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80060d2:	2317      	movs	r3, #23
 80060d4:	18fb      	adds	r3, r7, r3
 80060d6:	2200      	movs	r2, #0
 80060d8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80060da:	f7fd fb1f 	bl	800371c <HAL_GetTick>
 80060de:	0002      	movs	r2, r0
 80060e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e2:	1a9b      	subs	r3, r3, r2
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	18d3      	adds	r3, r2, r3
 80060e8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80060ea:	f7fd fb17 	bl	800371c <HAL_GetTick>
 80060ee:	0003      	movs	r3, r0
 80060f0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	330c      	adds	r3, #12
 80060f8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80060fa:	4b41      	ldr	r3, [pc, #260]	; (8006200 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	0013      	movs	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	189b      	adds	r3, r3, r2
 8006104:	00da      	lsls	r2, r3, #3
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	0d1b      	lsrs	r3, r3, #20
 800610a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800610c:	4353      	muls	r3, r2
 800610e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006110:	e068      	b.n	80061e4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	23c0      	movs	r3, #192	; 0xc0
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	429a      	cmp	r2, r3
 800611a:	d10a      	bne.n	8006132 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d107      	bne.n	8006132 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	b2da      	uxtb	r2, r3
 8006128:	2117      	movs	r1, #23
 800612a:	187b      	adds	r3, r7, r1
 800612c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800612e:	187b      	adds	r3, r7, r1
 8006130:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	3301      	adds	r3, #1
 8006136:	d055      	beq.n	80061e4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006138:	f7fd faf0 	bl	800371c <HAL_GetTick>
 800613c:	0002      	movs	r2, r0
 800613e:	6a3b      	ldr	r3, [r7, #32]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006144:	429a      	cmp	r2, r3
 8006146:	d902      	bls.n	800614e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	2b00      	cmp	r3, #0
 800614c:	d142      	bne.n	80061d4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	21e0      	movs	r1, #224	; 0xe0
 800615a:	438a      	bics	r2, r1
 800615c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	2382      	movs	r3, #130	; 0x82
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	429a      	cmp	r2, r3
 8006168:	d113      	bne.n	8006192 <SPI_WaitFifoStateUntilTimeout+0xce>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	689a      	ldr	r2, [r3, #8]
 800616e:	2380      	movs	r3, #128	; 0x80
 8006170:	021b      	lsls	r3, r3, #8
 8006172:	429a      	cmp	r2, r3
 8006174:	d005      	beq.n	8006182 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	689a      	ldr	r2, [r3, #8]
 800617a:	2380      	movs	r3, #128	; 0x80
 800617c:	00db      	lsls	r3, r3, #3
 800617e:	429a      	cmp	r2, r3
 8006180:	d107      	bne.n	8006192 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2140      	movs	r1, #64	; 0x40
 800618e:	438a      	bics	r2, r1
 8006190:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006196:	2380      	movs	r3, #128	; 0x80
 8006198:	019b      	lsls	r3, r3, #6
 800619a:	429a      	cmp	r2, r3
 800619c:	d110      	bne.n	80061c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4916      	ldr	r1, [pc, #88]	; (8006204 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80061aa:	400a      	ands	r2, r1
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2180      	movs	r1, #128	; 0x80
 80061ba:	0189      	lsls	r1, r1, #6
 80061bc:	430a      	orrs	r2, r1
 80061be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	225d      	movs	r2, #93	; 0x5d
 80061c4:	2101      	movs	r1, #1
 80061c6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	225c      	movs	r2, #92	; 0x5c
 80061cc:	2100      	movs	r1, #0
 80061ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e010      	b.n	80061f6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	4013      	ands	r3, r2
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d18e      	bne.n	8006112 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	0018      	movs	r0, r3
 80061f8:	46bd      	mov	sp, r7
 80061fa:	b00a      	add	sp, #40	; 0x28
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	46c0      	nop			; (mov r8, r8)
 8006200:	20000000 	.word	0x20000000
 8006204:	ffffdfff 	.word	0xffffdfff

08006208 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af02      	add	r7, sp, #8
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	23c0      	movs	r3, #192	; 0xc0
 8006218:	0159      	lsls	r1, r3, #5
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	0013      	movs	r3, r2
 8006222:	2200      	movs	r2, #0
 8006224:	f7ff ff4e 	bl	80060c4 <SPI_WaitFifoStateUntilTimeout>
 8006228:	1e03      	subs	r3, r0, #0
 800622a:	d007      	beq.n	800623c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006230:	2220      	movs	r2, #32
 8006232:	431a      	orrs	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e027      	b.n	800628c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	0013      	movs	r3, r2
 8006246:	2200      	movs	r2, #0
 8006248:	2180      	movs	r1, #128	; 0x80
 800624a:	f7ff fead 	bl	8005fa8 <SPI_WaitFlagStateUntilTimeout>
 800624e:	1e03      	subs	r3, r0, #0
 8006250:	d007      	beq.n	8006262 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006256:	2220      	movs	r2, #32
 8006258:	431a      	orrs	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e014      	b.n	800628c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	23c0      	movs	r3, #192	; 0xc0
 8006266:	00d9      	lsls	r1, r3, #3
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	0013      	movs	r3, r2
 8006270:	2200      	movs	r2, #0
 8006272:	f7ff ff27 	bl	80060c4 <SPI_WaitFifoStateUntilTimeout>
 8006276:	1e03      	subs	r3, r0, #0
 8006278:	d007      	beq.n	800628a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800627e:	2220      	movs	r2, #32
 8006280:	431a      	orrs	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e000      	b.n	800628c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	0018      	movs	r0, r3
 800628e:	46bd      	mov	sp, r7
 8006290:	b004      	add	sp, #16
 8006292:	bd80      	pop	{r7, pc}

08006294 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e04a      	b.n	800633c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	223d      	movs	r2, #61	; 0x3d
 80062aa:	5c9b      	ldrb	r3, [r3, r2]
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d107      	bne.n	80062c2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	223c      	movs	r2, #60	; 0x3c
 80062b6:	2100      	movs	r1, #0
 80062b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	0018      	movs	r0, r3
 80062be:	f7fd f815 	bl	80032ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	223d      	movs	r2, #61	; 0x3d
 80062c6:	2102      	movs	r1, #2
 80062c8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	3304      	adds	r3, #4
 80062d2:	0019      	movs	r1, r3
 80062d4:	0010      	movs	r0, r2
 80062d6:	f000 fadd 	bl	8006894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2248      	movs	r2, #72	; 0x48
 80062de:	2101      	movs	r1, #1
 80062e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	223e      	movs	r2, #62	; 0x3e
 80062e6:	2101      	movs	r1, #1
 80062e8:	5499      	strb	r1, [r3, r2]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	223f      	movs	r2, #63	; 0x3f
 80062ee:	2101      	movs	r1, #1
 80062f0:	5499      	strb	r1, [r3, r2]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2240      	movs	r2, #64	; 0x40
 80062f6:	2101      	movs	r1, #1
 80062f8:	5499      	strb	r1, [r3, r2]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2241      	movs	r2, #65	; 0x41
 80062fe:	2101      	movs	r1, #1
 8006300:	5499      	strb	r1, [r3, r2]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2242      	movs	r2, #66	; 0x42
 8006306:	2101      	movs	r1, #1
 8006308:	5499      	strb	r1, [r3, r2]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2243      	movs	r2, #67	; 0x43
 800630e:	2101      	movs	r1, #1
 8006310:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2244      	movs	r2, #68	; 0x44
 8006316:	2101      	movs	r1, #1
 8006318:	5499      	strb	r1, [r3, r2]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2245      	movs	r2, #69	; 0x45
 800631e:	2101      	movs	r1, #1
 8006320:	5499      	strb	r1, [r3, r2]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2246      	movs	r2, #70	; 0x46
 8006326:	2101      	movs	r1, #1
 8006328:	5499      	strb	r1, [r3, r2]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2247      	movs	r2, #71	; 0x47
 800632e:	2101      	movs	r1, #1
 8006330:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	223d      	movs	r2, #61	; 0x3d
 8006336:	2101      	movs	r1, #1
 8006338:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	0018      	movs	r0, r3
 800633e:	46bd      	mov	sp, r7
 8006340:	b002      	add	sp, #8
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	223d      	movs	r2, #61	; 0x3d
 8006350:	5c9b      	ldrb	r3, [r3, r2]
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b01      	cmp	r3, #1
 8006356:	d001      	beq.n	800635c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e042      	b.n	80063e2 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	223d      	movs	r2, #61	; 0x3d
 8006360:	2102      	movs	r1, #2
 8006362:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68da      	ldr	r2, [r3, #12]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2101      	movs	r1, #1
 8006370:	430a      	orrs	r2, r1
 8006372:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a1c      	ldr	r2, [pc, #112]	; (80063ec <HAL_TIM_Base_Start_IT+0xa8>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d00f      	beq.n	800639e <HAL_TIM_Base_Start_IT+0x5a>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	2380      	movs	r3, #128	; 0x80
 8006384:	05db      	lsls	r3, r3, #23
 8006386:	429a      	cmp	r2, r3
 8006388:	d009      	beq.n	800639e <HAL_TIM_Base_Start_IT+0x5a>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a18      	ldr	r2, [pc, #96]	; (80063f0 <HAL_TIM_Base_Start_IT+0xac>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d004      	beq.n	800639e <HAL_TIM_Base_Start_IT+0x5a>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a16      	ldr	r2, [pc, #88]	; (80063f4 <HAL_TIM_Base_Start_IT+0xb0>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d116      	bne.n	80063cc <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	4a14      	ldr	r2, [pc, #80]	; (80063f8 <HAL_TIM_Base_Start_IT+0xb4>)
 80063a6:	4013      	ands	r3, r2
 80063a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2b06      	cmp	r3, #6
 80063ae:	d016      	beq.n	80063de <HAL_TIM_Base_Start_IT+0x9a>
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	2380      	movs	r3, #128	; 0x80
 80063b4:	025b      	lsls	r3, r3, #9
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d011      	beq.n	80063de <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2101      	movs	r1, #1
 80063c6:	430a      	orrs	r2, r1
 80063c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ca:	e008      	b.n	80063de <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2101      	movs	r1, #1
 80063d8:	430a      	orrs	r2, r1
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	e000      	b.n	80063e0 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063de:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	0018      	movs	r0, r3
 80063e4:	46bd      	mov	sp, r7
 80063e6:	b004      	add	sp, #16
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	46c0      	nop			; (mov r8, r8)
 80063ec:	40012c00 	.word	0x40012c00
 80063f0:	40000400 	.word	0x40000400
 80063f4:	40014000 	.word	0x40014000
 80063f8:	00010007 	.word	0x00010007

080063fc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68da      	ldr	r2, [r3, #12]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2101      	movs	r1, #1
 8006410:	438a      	bics	r2, r1
 8006412:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	4a0d      	ldr	r2, [pc, #52]	; (8006450 <HAL_TIM_Base_Stop_IT+0x54>)
 800641c:	4013      	ands	r3, r2
 800641e:	d10d      	bne.n	800643c <HAL_TIM_Base_Stop_IT+0x40>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	4a0b      	ldr	r2, [pc, #44]	; (8006454 <HAL_TIM_Base_Stop_IT+0x58>)
 8006428:	4013      	ands	r3, r2
 800642a:	d107      	bne.n	800643c <HAL_TIM_Base_Stop_IT+0x40>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2101      	movs	r1, #1
 8006438:	438a      	bics	r2, r1
 800643a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	223d      	movs	r2, #61	; 0x3d
 8006440:	2101      	movs	r1, #1
 8006442:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	0018      	movs	r0, r3
 8006448:	46bd      	mov	sp, r7
 800644a:	b002      	add	sp, #8
 800644c:	bd80      	pop	{r7, pc}
 800644e:	46c0      	nop			; (mov r8, r8)
 8006450:	00001111 	.word	0x00001111
 8006454:	00000444 	.word	0x00000444

08006458 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	2202      	movs	r2, #2
 8006468:	4013      	ands	r3, r2
 800646a:	2b02      	cmp	r3, #2
 800646c:	d124      	bne.n	80064b8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	2202      	movs	r2, #2
 8006476:	4013      	ands	r3, r2
 8006478:	2b02      	cmp	r3, #2
 800647a:	d11d      	bne.n	80064b8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2203      	movs	r2, #3
 8006482:	4252      	negs	r2, r2
 8006484:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	2203      	movs	r2, #3
 8006494:	4013      	ands	r3, r2
 8006496:	d004      	beq.n	80064a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	0018      	movs	r0, r3
 800649c:	f000 f9e2 	bl	8006864 <HAL_TIM_IC_CaptureCallback>
 80064a0:	e007      	b.n	80064b2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	0018      	movs	r0, r3
 80064a6:	f000 f9d5 	bl	8006854 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	0018      	movs	r0, r3
 80064ae:	f000 f9e1 	bl	8006874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	2204      	movs	r2, #4
 80064c0:	4013      	ands	r3, r2
 80064c2:	2b04      	cmp	r3, #4
 80064c4:	d125      	bne.n	8006512 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	2204      	movs	r2, #4
 80064ce:	4013      	ands	r3, r2
 80064d0:	2b04      	cmp	r3, #4
 80064d2:	d11e      	bne.n	8006512 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2205      	movs	r2, #5
 80064da:	4252      	negs	r2, r2
 80064dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2202      	movs	r2, #2
 80064e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699a      	ldr	r2, [r3, #24]
 80064ea:	23c0      	movs	r3, #192	; 0xc0
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4013      	ands	r3, r2
 80064f0:	d004      	beq.n	80064fc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	0018      	movs	r0, r3
 80064f6:	f000 f9b5 	bl	8006864 <HAL_TIM_IC_CaptureCallback>
 80064fa:	e007      	b.n	800650c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	0018      	movs	r0, r3
 8006500:	f000 f9a8 	bl	8006854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	0018      	movs	r0, r3
 8006508:	f000 f9b4 	bl	8006874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	2208      	movs	r2, #8
 800651a:	4013      	ands	r3, r2
 800651c:	2b08      	cmp	r3, #8
 800651e:	d124      	bne.n	800656a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	2208      	movs	r2, #8
 8006528:	4013      	ands	r3, r2
 800652a:	2b08      	cmp	r3, #8
 800652c:	d11d      	bne.n	800656a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2209      	movs	r2, #9
 8006534:	4252      	negs	r2, r2
 8006536:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2204      	movs	r2, #4
 800653c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	69db      	ldr	r3, [r3, #28]
 8006544:	2203      	movs	r2, #3
 8006546:	4013      	ands	r3, r2
 8006548:	d004      	beq.n	8006554 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	0018      	movs	r0, r3
 800654e:	f000 f989 	bl	8006864 <HAL_TIM_IC_CaptureCallback>
 8006552:	e007      	b.n	8006564 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	0018      	movs	r0, r3
 8006558:	f000 f97c 	bl	8006854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	0018      	movs	r0, r3
 8006560:	f000 f988 	bl	8006874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	2210      	movs	r2, #16
 8006572:	4013      	ands	r3, r2
 8006574:	2b10      	cmp	r3, #16
 8006576:	d125      	bne.n	80065c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	2210      	movs	r2, #16
 8006580:	4013      	ands	r3, r2
 8006582:	2b10      	cmp	r3, #16
 8006584:	d11e      	bne.n	80065c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2211      	movs	r2, #17
 800658c:	4252      	negs	r2, r2
 800658e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2208      	movs	r2, #8
 8006594:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69da      	ldr	r2, [r3, #28]
 800659c:	23c0      	movs	r3, #192	; 0xc0
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4013      	ands	r3, r2
 80065a2:	d004      	beq.n	80065ae <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	0018      	movs	r0, r3
 80065a8:	f000 f95c 	bl	8006864 <HAL_TIM_IC_CaptureCallback>
 80065ac:	e007      	b.n	80065be <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	0018      	movs	r0, r3
 80065b2:	f000 f94f 	bl	8006854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	0018      	movs	r0, r3
 80065ba:	f000 f95b 	bl	8006874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	2201      	movs	r2, #1
 80065cc:	4013      	ands	r3, r2
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d10f      	bne.n	80065f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	2201      	movs	r2, #1
 80065da:	4013      	ands	r3, r2
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d108      	bne.n	80065f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2202      	movs	r2, #2
 80065e6:	4252      	negs	r2, r2
 80065e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	0018      	movs	r0, r3
 80065ee:	f7fc f81d 	bl	800262c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	2280      	movs	r2, #128	; 0x80
 80065fa:	4013      	ands	r3, r2
 80065fc:	2b80      	cmp	r3, #128	; 0x80
 80065fe:	d10f      	bne.n	8006620 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	2280      	movs	r2, #128	; 0x80
 8006608:	4013      	ands	r3, r2
 800660a:	2b80      	cmp	r3, #128	; 0x80
 800660c:	d108      	bne.n	8006620 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2281      	movs	r2, #129	; 0x81
 8006614:	4252      	negs	r2, r2
 8006616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	0018      	movs	r0, r3
 800661c:	f000 facc 	bl	8006bb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691a      	ldr	r2, [r3, #16]
 8006626:	2380      	movs	r3, #128	; 0x80
 8006628:	005b      	lsls	r3, r3, #1
 800662a:	401a      	ands	r2, r3
 800662c:	2380      	movs	r3, #128	; 0x80
 800662e:	005b      	lsls	r3, r3, #1
 8006630:	429a      	cmp	r2, r3
 8006632:	d10e      	bne.n	8006652 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	2280      	movs	r2, #128	; 0x80
 800663c:	4013      	ands	r3, r2
 800663e:	2b80      	cmp	r3, #128	; 0x80
 8006640:	d107      	bne.n	8006652 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a1c      	ldr	r2, [pc, #112]	; (80066b8 <HAL_TIM_IRQHandler+0x260>)
 8006648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	0018      	movs	r0, r3
 800664e:	f000 fabb 	bl	8006bc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	2240      	movs	r2, #64	; 0x40
 800665a:	4013      	ands	r3, r2
 800665c:	2b40      	cmp	r3, #64	; 0x40
 800665e:	d10f      	bne.n	8006680 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	2240      	movs	r2, #64	; 0x40
 8006668:	4013      	ands	r3, r2
 800666a:	2b40      	cmp	r3, #64	; 0x40
 800666c:	d108      	bne.n	8006680 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2241      	movs	r2, #65	; 0x41
 8006674:	4252      	negs	r2, r2
 8006676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	0018      	movs	r0, r3
 800667c:	f000 f902 	bl	8006884 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	2220      	movs	r2, #32
 8006688:	4013      	ands	r3, r2
 800668a:	2b20      	cmp	r3, #32
 800668c:	d10f      	bne.n	80066ae <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	2220      	movs	r2, #32
 8006696:	4013      	ands	r3, r2
 8006698:	2b20      	cmp	r3, #32
 800669a:	d108      	bne.n	80066ae <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2221      	movs	r2, #33	; 0x21
 80066a2:	4252      	negs	r2, r2
 80066a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	0018      	movs	r0, r3
 80066aa:	f000 fa7d 	bl	8006ba8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066ae:	46c0      	nop			; (mov r8, r8)
 80066b0:	46bd      	mov	sp, r7
 80066b2:	b002      	add	sp, #8
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	46c0      	nop			; (mov r8, r8)
 80066b8:	fffffeff 	.word	0xfffffeff

080066bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	223c      	movs	r2, #60	; 0x3c
 80066ca:	5c9b      	ldrb	r3, [r3, r2]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d101      	bne.n	80066d4 <HAL_TIM_ConfigClockSource+0x18>
 80066d0:	2302      	movs	r3, #2
 80066d2:	e0b7      	b.n	8006844 <HAL_TIM_ConfigClockSource+0x188>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	223c      	movs	r2, #60	; 0x3c
 80066d8:	2101      	movs	r1, #1
 80066da:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	223d      	movs	r2, #61	; 0x3d
 80066e0:	2102      	movs	r1, #2
 80066e2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4a57      	ldr	r2, [pc, #348]	; (800684c <HAL_TIM_ConfigClockSource+0x190>)
 80066f0:	4013      	ands	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4a56      	ldr	r2, [pc, #344]	; (8006850 <HAL_TIM_ConfigClockSource+0x194>)
 80066f8:	4013      	ands	r3, r2
 80066fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2280      	movs	r2, #128	; 0x80
 800670a:	0192      	lsls	r2, r2, #6
 800670c:	4293      	cmp	r3, r2
 800670e:	d040      	beq.n	8006792 <HAL_TIM_ConfigClockSource+0xd6>
 8006710:	2280      	movs	r2, #128	; 0x80
 8006712:	0192      	lsls	r2, r2, #6
 8006714:	4293      	cmp	r3, r2
 8006716:	d900      	bls.n	800671a <HAL_TIM_ConfigClockSource+0x5e>
 8006718:	e088      	b.n	800682c <HAL_TIM_ConfigClockSource+0x170>
 800671a:	2280      	movs	r2, #128	; 0x80
 800671c:	0152      	lsls	r2, r2, #5
 800671e:	4293      	cmp	r3, r2
 8006720:	d100      	bne.n	8006724 <HAL_TIM_ConfigClockSource+0x68>
 8006722:	e085      	b.n	8006830 <HAL_TIM_ConfigClockSource+0x174>
 8006724:	2280      	movs	r2, #128	; 0x80
 8006726:	0152      	lsls	r2, r2, #5
 8006728:	4293      	cmp	r3, r2
 800672a:	d900      	bls.n	800672e <HAL_TIM_ConfigClockSource+0x72>
 800672c:	e07e      	b.n	800682c <HAL_TIM_ConfigClockSource+0x170>
 800672e:	2b70      	cmp	r3, #112	; 0x70
 8006730:	d018      	beq.n	8006764 <HAL_TIM_ConfigClockSource+0xa8>
 8006732:	d900      	bls.n	8006736 <HAL_TIM_ConfigClockSource+0x7a>
 8006734:	e07a      	b.n	800682c <HAL_TIM_ConfigClockSource+0x170>
 8006736:	2b60      	cmp	r3, #96	; 0x60
 8006738:	d04f      	beq.n	80067da <HAL_TIM_ConfigClockSource+0x11e>
 800673a:	d900      	bls.n	800673e <HAL_TIM_ConfigClockSource+0x82>
 800673c:	e076      	b.n	800682c <HAL_TIM_ConfigClockSource+0x170>
 800673e:	2b50      	cmp	r3, #80	; 0x50
 8006740:	d03b      	beq.n	80067ba <HAL_TIM_ConfigClockSource+0xfe>
 8006742:	d900      	bls.n	8006746 <HAL_TIM_ConfigClockSource+0x8a>
 8006744:	e072      	b.n	800682c <HAL_TIM_ConfigClockSource+0x170>
 8006746:	2b40      	cmp	r3, #64	; 0x40
 8006748:	d057      	beq.n	80067fa <HAL_TIM_ConfigClockSource+0x13e>
 800674a:	d900      	bls.n	800674e <HAL_TIM_ConfigClockSource+0x92>
 800674c:	e06e      	b.n	800682c <HAL_TIM_ConfigClockSource+0x170>
 800674e:	2b30      	cmp	r3, #48	; 0x30
 8006750:	d063      	beq.n	800681a <HAL_TIM_ConfigClockSource+0x15e>
 8006752:	d86b      	bhi.n	800682c <HAL_TIM_ConfigClockSource+0x170>
 8006754:	2b20      	cmp	r3, #32
 8006756:	d060      	beq.n	800681a <HAL_TIM_ConfigClockSource+0x15e>
 8006758:	d868      	bhi.n	800682c <HAL_TIM_ConfigClockSource+0x170>
 800675a:	2b00      	cmp	r3, #0
 800675c:	d05d      	beq.n	800681a <HAL_TIM_ConfigClockSource+0x15e>
 800675e:	2b10      	cmp	r3, #16
 8006760:	d05b      	beq.n	800681a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006762:	e063      	b.n	800682c <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6818      	ldr	r0, [r3, #0]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	6899      	ldr	r1, [r3, #8]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f000 f98a 	bl	8006a8c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2277      	movs	r2, #119	; 0x77
 8006784:	4313      	orrs	r3, r2
 8006786:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	609a      	str	r2, [r3, #8]
      break;
 8006790:	e04f      	b.n	8006832 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6818      	ldr	r0, [r3, #0]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	6899      	ldr	r1, [r3, #8]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	f000 f973 	bl	8006a8c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2180      	movs	r1, #128	; 0x80
 80067b2:	01c9      	lsls	r1, r1, #7
 80067b4:	430a      	orrs	r2, r1
 80067b6:	609a      	str	r2, [r3, #8]
      break;
 80067b8:	e03b      	b.n	8006832 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6818      	ldr	r0, [r3, #0]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	6859      	ldr	r1, [r3, #4]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	001a      	movs	r2, r3
 80067c8:	f000 f8e4 	bl	8006994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2150      	movs	r1, #80	; 0x50
 80067d2:	0018      	movs	r0, r3
 80067d4:	f000 f93e 	bl	8006a54 <TIM_ITRx_SetConfig>
      break;
 80067d8:	e02b      	b.n	8006832 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6818      	ldr	r0, [r3, #0]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	6859      	ldr	r1, [r3, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	001a      	movs	r2, r3
 80067e8:	f000 f902 	bl	80069f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2160      	movs	r1, #96	; 0x60
 80067f2:	0018      	movs	r0, r3
 80067f4:	f000 f92e 	bl	8006a54 <TIM_ITRx_SetConfig>
      break;
 80067f8:	e01b      	b.n	8006832 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6818      	ldr	r0, [r3, #0]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	6859      	ldr	r1, [r3, #4]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	001a      	movs	r2, r3
 8006808:	f000 f8c4 	bl	8006994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2140      	movs	r1, #64	; 0x40
 8006812:	0018      	movs	r0, r3
 8006814:	f000 f91e 	bl	8006a54 <TIM_ITRx_SetConfig>
      break;
 8006818:	e00b      	b.n	8006832 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	0019      	movs	r1, r3
 8006824:	0010      	movs	r0, r2
 8006826:	f000 f915 	bl	8006a54 <TIM_ITRx_SetConfig>
        break;
 800682a:	e002      	b.n	8006832 <HAL_TIM_ConfigClockSource+0x176>
      break;
 800682c:	46c0      	nop			; (mov r8, r8)
 800682e:	e000      	b.n	8006832 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8006830:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	223d      	movs	r2, #61	; 0x3d
 8006836:	2101      	movs	r1, #1
 8006838:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	223c      	movs	r2, #60	; 0x3c
 800683e:	2100      	movs	r1, #0
 8006840:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	0018      	movs	r0, r3
 8006846:	46bd      	mov	sp, r7
 8006848:	b004      	add	sp, #16
 800684a:	bd80      	pop	{r7, pc}
 800684c:	ffceff88 	.word	0xffceff88
 8006850:	ffff00ff 	.word	0xffff00ff

08006854 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800685c:	46c0      	nop			; (mov r8, r8)
 800685e:	46bd      	mov	sp, r7
 8006860:	b002      	add	sp, #8
 8006862:	bd80      	pop	{r7, pc}

08006864 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800686c:	46c0      	nop			; (mov r8, r8)
 800686e:	46bd      	mov	sp, r7
 8006870:	b002      	add	sp, #8
 8006872:	bd80      	pop	{r7, pc}

08006874 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800687c:	46c0      	nop			; (mov r8, r8)
 800687e:	46bd      	mov	sp, r7
 8006880:	b002      	add	sp, #8
 8006882:	bd80      	pop	{r7, pc}

08006884 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800688c:	46c0      	nop			; (mov r8, r8)
 800688e:	46bd      	mov	sp, r7
 8006890:	b002      	add	sp, #8
 8006892:	bd80      	pop	{r7, pc}

08006894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a34      	ldr	r2, [pc, #208]	; (8006978 <TIM_Base_SetConfig+0xe4>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d008      	beq.n	80068be <TIM_Base_SetConfig+0x2a>
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	2380      	movs	r3, #128	; 0x80
 80068b0:	05db      	lsls	r3, r3, #23
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d003      	beq.n	80068be <TIM_Base_SetConfig+0x2a>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a30      	ldr	r2, [pc, #192]	; (800697c <TIM_Base_SetConfig+0xe8>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d108      	bne.n	80068d0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2270      	movs	r2, #112	; 0x70
 80068c2:	4393      	bics	r3, r2
 80068c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a29      	ldr	r2, [pc, #164]	; (8006978 <TIM_Base_SetConfig+0xe4>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d018      	beq.n	800690a <TIM_Base_SetConfig+0x76>
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	2380      	movs	r3, #128	; 0x80
 80068dc:	05db      	lsls	r3, r3, #23
 80068de:	429a      	cmp	r2, r3
 80068e0:	d013      	beq.n	800690a <TIM_Base_SetConfig+0x76>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a25      	ldr	r2, [pc, #148]	; (800697c <TIM_Base_SetConfig+0xe8>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d00f      	beq.n	800690a <TIM_Base_SetConfig+0x76>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a24      	ldr	r2, [pc, #144]	; (8006980 <TIM_Base_SetConfig+0xec>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d00b      	beq.n	800690a <TIM_Base_SetConfig+0x76>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a23      	ldr	r2, [pc, #140]	; (8006984 <TIM_Base_SetConfig+0xf0>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d007      	beq.n	800690a <TIM_Base_SetConfig+0x76>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a22      	ldr	r2, [pc, #136]	; (8006988 <TIM_Base_SetConfig+0xf4>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d003      	beq.n	800690a <TIM_Base_SetConfig+0x76>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a21      	ldr	r2, [pc, #132]	; (800698c <TIM_Base_SetConfig+0xf8>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d108      	bne.n	800691c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	4a20      	ldr	r2, [pc, #128]	; (8006990 <TIM_Base_SetConfig+0xfc>)
 800690e:	4013      	ands	r3, r2
 8006910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	4313      	orrs	r3, r2
 800691a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2280      	movs	r2, #128	; 0x80
 8006920:	4393      	bics	r3, r2
 8006922:	001a      	movs	r2, r3
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	4313      	orrs	r3, r2
 800692a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	689a      	ldr	r2, [r3, #8]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a0c      	ldr	r2, [pc, #48]	; (8006978 <TIM_Base_SetConfig+0xe4>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d00b      	beq.n	8006962 <TIM_Base_SetConfig+0xce>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a0d      	ldr	r2, [pc, #52]	; (8006984 <TIM_Base_SetConfig+0xf0>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d007      	beq.n	8006962 <TIM_Base_SetConfig+0xce>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a0c      	ldr	r2, [pc, #48]	; (8006988 <TIM_Base_SetConfig+0xf4>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d003      	beq.n	8006962 <TIM_Base_SetConfig+0xce>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a0b      	ldr	r2, [pc, #44]	; (800698c <TIM_Base_SetConfig+0xf8>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d103      	bne.n	800696a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	691a      	ldr	r2, [r3, #16]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	615a      	str	r2, [r3, #20]
}
 8006970:	46c0      	nop			; (mov r8, r8)
 8006972:	46bd      	mov	sp, r7
 8006974:	b004      	add	sp, #16
 8006976:	bd80      	pop	{r7, pc}
 8006978:	40012c00 	.word	0x40012c00
 800697c:	40000400 	.word	0x40000400
 8006980:	40002000 	.word	0x40002000
 8006984:	40014000 	.word	0x40014000
 8006988:	40014400 	.word	0x40014400
 800698c:	40014800 	.word	0x40014800
 8006990:	fffffcff 	.word	0xfffffcff

08006994 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	2201      	movs	r2, #1
 80069ac:	4393      	bics	r3, r2
 80069ae:	001a      	movs	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	22f0      	movs	r2, #240	; 0xf0
 80069be:	4393      	bics	r3, r2
 80069c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	011b      	lsls	r3, r3, #4
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	220a      	movs	r2, #10
 80069d0:	4393      	bics	r3, r2
 80069d2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	4313      	orrs	r3, r2
 80069da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	621a      	str	r2, [r3, #32]
}
 80069e8:	46c0      	nop			; (mov r8, r8)
 80069ea:	46bd      	mov	sp, r7
 80069ec:	b006      	add	sp, #24
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6a1b      	ldr	r3, [r3, #32]
 8006a00:	2210      	movs	r2, #16
 8006a02:	4393      	bics	r3, r2
 8006a04:	001a      	movs	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6a1b      	ldr	r3, [r3, #32]
 8006a14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	4a0d      	ldr	r2, [pc, #52]	; (8006a50 <TIM_TI2_ConfigInputStage+0x60>)
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	031b      	lsls	r3, r3, #12
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	22a0      	movs	r2, #160	; 0xa0
 8006a2c:	4393      	bics	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	011b      	lsls	r3, r3, #4
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	693a      	ldr	r2, [r7, #16]
 8006a44:	621a      	str	r2, [r3, #32]
}
 8006a46:	46c0      	nop			; (mov r8, r8)
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	b006      	add	sp, #24
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	46c0      	nop			; (mov r8, r8)
 8006a50:	ffff0fff 	.word	0xffff0fff

08006a54 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4a08      	ldr	r2, [pc, #32]	; (8006a88 <TIM_ITRx_SetConfig+0x34>)
 8006a68:	4013      	ands	r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a6c:	683a      	ldr	r2, [r7, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	2207      	movs	r2, #7
 8006a74:	4313      	orrs	r3, r2
 8006a76:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	609a      	str	r2, [r3, #8]
}
 8006a7e:	46c0      	nop			; (mov r8, r8)
 8006a80:	46bd      	mov	sp, r7
 8006a82:	b004      	add	sp, #16
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	46c0      	nop			; (mov r8, r8)
 8006a88:	ffcfff8f 	.word	0xffcfff8f

08006a8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b086      	sub	sp, #24
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
 8006a98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	4a09      	ldr	r2, [pc, #36]	; (8006ac8 <TIM_ETR_SetConfig+0x3c>)
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	021a      	lsls	r2, r3, #8
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	609a      	str	r2, [r3, #8]
}
 8006ac0:	46c0      	nop			; (mov r8, r8)
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	b006      	add	sp, #24
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	ffff00ff 	.word	0xffff00ff

08006acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	223c      	movs	r2, #60	; 0x3c
 8006ada:	5c9b      	ldrb	r3, [r3, r2]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d101      	bne.n	8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	e055      	b.n	8006b90 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	223c      	movs	r2, #60	; 0x3c
 8006ae8:	2101      	movs	r1, #1
 8006aea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	223d      	movs	r2, #61	; 0x3d
 8006af0:	2102      	movs	r1, #2
 8006af2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a23      	ldr	r2, [pc, #140]	; (8006b98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d108      	bne.n	8006b20 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	4a22      	ldr	r2, [pc, #136]	; (8006b9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006b12:	4013      	ands	r3, r2
 8006b14:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2270      	movs	r2, #112	; 0x70
 8006b24:	4393      	bics	r3, r2
 8006b26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a16      	ldr	r2, [pc, #88]	; (8006b98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d00f      	beq.n	8006b64 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	2380      	movs	r3, #128	; 0x80
 8006b4a:	05db      	lsls	r3, r3, #23
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d009      	beq.n	8006b64 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a12      	ldr	r2, [pc, #72]	; (8006ba0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d004      	beq.n	8006b64 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a11      	ldr	r2, [pc, #68]	; (8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d10c      	bne.n	8006b7e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2280      	movs	r2, #128	; 0x80
 8006b68:	4393      	bics	r3, r2
 8006b6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	223d      	movs	r2, #61	; 0x3d
 8006b82:	2101      	movs	r1, #1
 8006b84:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	223c      	movs	r2, #60	; 0x3c
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	0018      	movs	r0, r3
 8006b92:	46bd      	mov	sp, r7
 8006b94:	b004      	add	sp, #16
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	40012c00 	.word	0x40012c00
 8006b9c:	ff0fffff 	.word	0xff0fffff
 8006ba0:	40000400 	.word	0x40000400
 8006ba4:	40014000 	.word	0x40014000

08006ba8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bb0:	46c0      	nop			; (mov r8, r8)
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	b002      	add	sp, #8
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bc0:	46c0      	nop			; (mov r8, r8)
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	b002      	add	sp, #8
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006bd0:	46c0      	nop			; (mov r8, r8)
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	b002      	add	sp, #8
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d101      	bne.n	8006bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e046      	b.n	8006c78 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2284      	movs	r2, #132	; 0x84
 8006bee:	589b      	ldr	r3, [r3, r2]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d107      	bne.n	8006c04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2280      	movs	r2, #128	; 0x80
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	0018      	movs	r0, r3
 8006c00:	f7fc fb98 	bl	8003334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2284      	movs	r2, #132	; 0x84
 8006c08:	2124      	movs	r1, #36	; 0x24
 8006c0a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2101      	movs	r1, #1
 8006c18:	438a      	bics	r2, r1
 8006c1a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	0018      	movs	r0, r3
 8006c20:	f000 fc7c 	bl	800751c <UART_SetConfig>
 8006c24:	0003      	movs	r3, r0
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d101      	bne.n	8006c2e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e024      	b.n	8006c78 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d003      	beq.n	8006c3e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	0018      	movs	r0, r3
 8006c3a:	f000 ff4d 	bl	8007ad8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	490d      	ldr	r1, [pc, #52]	; (8006c80 <HAL_UART_Init+0xa8>)
 8006c4a:	400a      	ands	r2, r1
 8006c4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	212a      	movs	r1, #42	; 0x2a
 8006c5a:	438a      	bics	r2, r1
 8006c5c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2101      	movs	r1, #1
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	0018      	movs	r0, r3
 8006c72:	f000 ffe5 	bl	8007c40 <UART_CheckIdleState>
 8006c76:	0003      	movs	r3, r0
}
 8006c78:	0018      	movs	r0, r3
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	b002      	add	sp, #8
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	ffffb7ff 	.word	0xffffb7ff

08006c84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b08a      	sub	sp, #40	; 0x28
 8006c88:	af02      	add	r7, sp, #8
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	603b      	str	r3, [r7, #0]
 8006c90:	1dbb      	adds	r3, r7, #6
 8006c92:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2284      	movs	r2, #132	; 0x84
 8006c98:	589b      	ldr	r3, [r3, r2]
 8006c9a:	2b20      	cmp	r3, #32
 8006c9c:	d000      	beq.n	8006ca0 <HAL_UART_Transmit+0x1c>
 8006c9e:	e097      	b.n	8006dd0 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <HAL_UART_Transmit+0x2a>
 8006ca6:	1dbb      	adds	r3, r7, #6
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e08f      	b.n	8006dd2 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	689a      	ldr	r2, [r3, #8]
 8006cb6:	2380      	movs	r3, #128	; 0x80
 8006cb8:	015b      	lsls	r3, r3, #5
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d109      	bne.n	8006cd2 <HAL_UART_Transmit+0x4e>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d105      	bne.n	8006cd2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	4013      	ands	r3, r2
 8006ccc:	d001      	beq.n	8006cd2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e07f      	b.n	8006dd2 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2280      	movs	r2, #128	; 0x80
 8006cd6:	5c9b      	ldrb	r3, [r3, r2]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d101      	bne.n	8006ce0 <HAL_UART_Transmit+0x5c>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	e078      	b.n	8006dd2 <HAL_UART_Transmit+0x14e>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2280      	movs	r2, #128	; 0x80
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	228c      	movs	r2, #140	; 0x8c
 8006cec:	2100      	movs	r1, #0
 8006cee:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2284      	movs	r2, #132	; 0x84
 8006cf4:	2121      	movs	r1, #33	; 0x21
 8006cf6:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cf8:	f7fc fd10 	bl	800371c <HAL_GetTick>
 8006cfc:	0003      	movs	r3, r0
 8006cfe:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	1dba      	adds	r2, r7, #6
 8006d04:	2154      	movs	r1, #84	; 0x54
 8006d06:	8812      	ldrh	r2, [r2, #0]
 8006d08:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	1dba      	adds	r2, r7, #6
 8006d0e:	2156      	movs	r1, #86	; 0x56
 8006d10:	8812      	ldrh	r2, [r2, #0]
 8006d12:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	2380      	movs	r3, #128	; 0x80
 8006d1a:	015b      	lsls	r3, r3, #5
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d108      	bne.n	8006d32 <HAL_UART_Transmit+0xae>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d104      	bne.n	8006d32 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	61bb      	str	r3, [r7, #24]
 8006d30:	e003      	b.n	8006d3a <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d36:	2300      	movs	r3, #0
 8006d38:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2280      	movs	r2, #128	; 0x80
 8006d3e:	2100      	movs	r1, #0
 8006d40:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006d42:	e02c      	b.n	8006d9e <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	0013      	movs	r3, r2
 8006d4e:	2200      	movs	r2, #0
 8006d50:	2180      	movs	r1, #128	; 0x80
 8006d52:	f000 ffbf 	bl	8007cd4 <UART_WaitOnFlagUntilTimeout>
 8006d56:	1e03      	subs	r3, r0, #0
 8006d58:	d001      	beq.n	8006d5e <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e039      	b.n	8006dd2 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10b      	bne.n	8006d7c <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	881b      	ldrh	r3, [r3, #0]
 8006d68:	001a      	movs	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	05d2      	lsls	r2, r2, #23
 8006d70:	0dd2      	lsrs	r2, r2, #23
 8006d72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	3302      	adds	r3, #2
 8006d78:	61bb      	str	r3, [r7, #24]
 8006d7a:	e007      	b.n	8006d8c <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	781a      	ldrb	r2, [r3, #0]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2256      	movs	r2, #86	; 0x56
 8006d90:	5a9b      	ldrh	r3, [r3, r2]
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	3b01      	subs	r3, #1
 8006d96:	b299      	uxth	r1, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2256      	movs	r2, #86	; 0x56
 8006d9c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2256      	movs	r2, #86	; 0x56
 8006da2:	5a9b      	ldrh	r3, [r3, r2]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1cc      	bne.n	8006d44 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	0013      	movs	r3, r2
 8006db4:	2200      	movs	r2, #0
 8006db6:	2140      	movs	r1, #64	; 0x40
 8006db8:	f000 ff8c 	bl	8007cd4 <UART_WaitOnFlagUntilTimeout>
 8006dbc:	1e03      	subs	r3, r0, #0
 8006dbe:	d001      	beq.n	8006dc4 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e006      	b.n	8006dd2 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2284      	movs	r2, #132	; 0x84
 8006dc8:	2120      	movs	r1, #32
 8006dca:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	e000      	b.n	8006dd2 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8006dd0:	2302      	movs	r3, #2
  }
}
 8006dd2:	0018      	movs	r0, r3
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	b008      	add	sp, #32
 8006dd8:	bd80      	pop	{r7, pc}
	...

08006ddc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b088      	sub	sp, #32
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	1dbb      	adds	r3, r7, #6
 8006de8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2288      	movs	r2, #136	; 0x88
 8006dee:	589b      	ldr	r3, [r3, r2]
 8006df0:	2b20      	cmp	r3, #32
 8006df2:	d155      	bne.n	8006ea0 <HAL_UART_Receive_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d003      	beq.n	8006e02 <HAL_UART_Receive_IT+0x26>
 8006dfa:	1dbb      	adds	r3, r7, #6
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e04d      	b.n	8006ea2 <HAL_UART_Receive_IT+0xc6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	689a      	ldr	r2, [r3, #8]
 8006e0a:	2380      	movs	r3, #128	; 0x80
 8006e0c:	015b      	lsls	r3, r3, #5
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d109      	bne.n	8006e26 <HAL_UART_Receive_IT+0x4a>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d105      	bne.n	8006e26 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	4013      	ands	r3, r2
 8006e20:	d001      	beq.n	8006e26 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e03d      	b.n	8006ea2 <HAL_UART_Receive_IT+0xc6>
      }
    }

    __HAL_LOCK(huart);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2280      	movs	r2, #128	; 0x80
 8006e2a:	5c9b      	ldrb	r3, [r3, r2]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d101      	bne.n	8006e34 <HAL_UART_Receive_IT+0x58>
 8006e30:	2302      	movs	r3, #2
 8006e32:	e036      	b.n	8006ea2 <HAL_UART_Receive_IT+0xc6>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2280      	movs	r2, #128	; 0x80
 8006e38:	2101      	movs	r1, #1
 8006e3a:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a19      	ldr	r2, [pc, #100]	; (8006eac <HAL_UART_Receive_IT+0xd0>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d020      	beq.n	8006e8e <HAL_UART_Receive_IT+0xb2>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	2380      	movs	r3, #128	; 0x80
 8006e54:	041b      	lsls	r3, r3, #16
 8006e56:	4013      	ands	r3, r2
 8006e58:	d019      	beq.n	8006e8e <HAL_UART_Receive_IT+0xb2>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8006e5e:	613b      	str	r3, [r7, #16]
  return(result);
 8006e60:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e62:	61fb      	str	r3, [r7, #28]
 8006e64:	2301      	movs	r3, #1
 8006e66:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f383 8810 	msr	PRIMASK, r3
}
 8006e6e:	46c0      	nop			; (mov r8, r8)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2180      	movs	r1, #128	; 0x80
 8006e7c:	04c9      	lsls	r1, r1, #19
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	f383 8810 	msr	PRIMASK, r3
}
 8006e8c:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e8e:	1dbb      	adds	r3, r7, #6
 8006e90:	881a      	ldrh	r2, [r3, #0]
 8006e92:	68b9      	ldr	r1, [r7, #8]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	0018      	movs	r0, r3
 8006e98:	f000 ffe4 	bl	8007e64 <UART_Start_Receive_IT>
 8006e9c:	0003      	movs	r3, r0
 8006e9e:	e000      	b.n	8006ea2 <HAL_UART_Receive_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8006ea0:	2302      	movs	r3, #2
  }
}
 8006ea2:	0018      	movs	r0, r3
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	b008      	add	sp, #32
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	46c0      	nop			; (mov r8, r8)
 8006eac:	40008000 	.word	0x40008000

08006eb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006eb0:	b5b0      	push	{r4, r5, r7, lr}
 8006eb2:	b0aa      	sub	sp, #168	; 0xa8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	22a4      	movs	r2, #164	; 0xa4
 8006ec0:	18b9      	adds	r1, r7, r2
 8006ec2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	20a0      	movs	r0, #160	; 0xa0
 8006ecc:	1839      	adds	r1, r7, r0
 8006ece:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	249c      	movs	r4, #156	; 0x9c
 8006ed8:	1939      	adds	r1, r7, r4
 8006eda:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006edc:	0011      	movs	r1, r2
 8006ede:	18bb      	adds	r3, r7, r2
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4aa0      	ldr	r2, [pc, #640]	; (8007164 <HAL_UART_IRQHandler+0x2b4>)
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	2298      	movs	r2, #152	; 0x98
 8006ee8:	18bd      	adds	r5, r7, r2
 8006eea:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8006eec:	18bb      	adds	r3, r7, r2
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d11a      	bne.n	8006f2a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ef4:	187b      	adds	r3, r7, r1
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2220      	movs	r2, #32
 8006efa:	4013      	ands	r3, r2
 8006efc:	d015      	beq.n	8006f2a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006efe:	183b      	adds	r3, r7, r0
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2220      	movs	r2, #32
 8006f04:	4013      	ands	r3, r2
 8006f06:	d105      	bne.n	8006f14 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006f08:	193b      	adds	r3, r7, r4
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	2380      	movs	r3, #128	; 0x80
 8006f0e:	055b      	lsls	r3, r3, #21
 8006f10:	4013      	ands	r3, r2
 8006f12:	d00a      	beq.n	8006f2a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d100      	bne.n	8006f1e <HAL_UART_IRQHandler+0x6e>
 8006f1c:	e2cf      	b.n	80074be <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	0010      	movs	r0, r2
 8006f26:	4798      	blx	r3
      }
      return;
 8006f28:	e2c9      	b.n	80074be <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006f2a:	2398      	movs	r3, #152	; 0x98
 8006f2c:	18fb      	adds	r3, r7, r3
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d100      	bne.n	8006f36 <HAL_UART_IRQHandler+0x86>
 8006f34:	e11e      	b.n	8007174 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006f36:	239c      	movs	r3, #156	; 0x9c
 8006f38:	18fb      	adds	r3, r7, r3
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a8a      	ldr	r2, [pc, #552]	; (8007168 <HAL_UART_IRQHandler+0x2b8>)
 8006f3e:	4013      	ands	r3, r2
 8006f40:	d106      	bne.n	8006f50 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006f42:	23a0      	movs	r3, #160	; 0xa0
 8006f44:	18fb      	adds	r3, r7, r3
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a88      	ldr	r2, [pc, #544]	; (800716c <HAL_UART_IRQHandler+0x2bc>)
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	d100      	bne.n	8006f50 <HAL_UART_IRQHandler+0xa0>
 8006f4e:	e111      	b.n	8007174 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f50:	23a4      	movs	r3, #164	; 0xa4
 8006f52:	18fb      	adds	r3, r7, r3
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2201      	movs	r2, #1
 8006f58:	4013      	ands	r3, r2
 8006f5a:	d012      	beq.n	8006f82 <HAL_UART_IRQHandler+0xd2>
 8006f5c:	23a0      	movs	r3, #160	; 0xa0
 8006f5e:	18fb      	adds	r3, r7, r3
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	2380      	movs	r3, #128	; 0x80
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	4013      	ands	r3, r2
 8006f68:	d00b      	beq.n	8006f82 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	228c      	movs	r2, #140	; 0x8c
 8006f76:	589b      	ldr	r3, [r3, r2]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	431a      	orrs	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	218c      	movs	r1, #140	; 0x8c
 8006f80:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f82:	23a4      	movs	r3, #164	; 0xa4
 8006f84:	18fb      	adds	r3, r7, r3
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2202      	movs	r2, #2
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	d011      	beq.n	8006fb2 <HAL_UART_IRQHandler+0x102>
 8006f8e:	239c      	movs	r3, #156	; 0x9c
 8006f90:	18fb      	adds	r3, r7, r3
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2201      	movs	r2, #1
 8006f96:	4013      	ands	r3, r2
 8006f98:	d00b      	beq.n	8006fb2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	228c      	movs	r2, #140	; 0x8c
 8006fa6:	589b      	ldr	r3, [r3, r2]
 8006fa8:	2204      	movs	r2, #4
 8006faa:	431a      	orrs	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	218c      	movs	r1, #140	; 0x8c
 8006fb0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fb2:	23a4      	movs	r3, #164	; 0xa4
 8006fb4:	18fb      	adds	r3, r7, r3
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2204      	movs	r2, #4
 8006fba:	4013      	ands	r3, r2
 8006fbc:	d011      	beq.n	8006fe2 <HAL_UART_IRQHandler+0x132>
 8006fbe:	239c      	movs	r3, #156	; 0x9c
 8006fc0:	18fb      	adds	r3, r7, r3
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	d00b      	beq.n	8006fe2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2204      	movs	r2, #4
 8006fd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	228c      	movs	r2, #140	; 0x8c
 8006fd6:	589b      	ldr	r3, [r3, r2]
 8006fd8:	2202      	movs	r2, #2
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	218c      	movs	r1, #140	; 0x8c
 8006fe0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006fe2:	23a4      	movs	r3, #164	; 0xa4
 8006fe4:	18fb      	adds	r3, r7, r3
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2208      	movs	r2, #8
 8006fea:	4013      	ands	r3, r2
 8006fec:	d017      	beq.n	800701e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006fee:	23a0      	movs	r3, #160	; 0xa0
 8006ff0:	18fb      	adds	r3, r7, r3
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2220      	movs	r2, #32
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	d105      	bne.n	8007006 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006ffa:	239c      	movs	r3, #156	; 0x9c
 8006ffc:	18fb      	adds	r3, r7, r3
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a59      	ldr	r2, [pc, #356]	; (8007168 <HAL_UART_IRQHandler+0x2b8>)
 8007002:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007004:	d00b      	beq.n	800701e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2208      	movs	r2, #8
 800700c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	228c      	movs	r2, #140	; 0x8c
 8007012:	589b      	ldr	r3, [r3, r2]
 8007014:	2208      	movs	r2, #8
 8007016:	431a      	orrs	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	218c      	movs	r1, #140	; 0x8c
 800701c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800701e:	23a4      	movs	r3, #164	; 0xa4
 8007020:	18fb      	adds	r3, r7, r3
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	2380      	movs	r3, #128	; 0x80
 8007026:	011b      	lsls	r3, r3, #4
 8007028:	4013      	ands	r3, r2
 800702a:	d013      	beq.n	8007054 <HAL_UART_IRQHandler+0x1a4>
 800702c:	23a0      	movs	r3, #160	; 0xa0
 800702e:	18fb      	adds	r3, r7, r3
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	2380      	movs	r3, #128	; 0x80
 8007034:	04db      	lsls	r3, r3, #19
 8007036:	4013      	ands	r3, r2
 8007038:	d00c      	beq.n	8007054 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2280      	movs	r2, #128	; 0x80
 8007040:	0112      	lsls	r2, r2, #4
 8007042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	228c      	movs	r2, #140	; 0x8c
 8007048:	589b      	ldr	r3, [r3, r2]
 800704a:	2220      	movs	r2, #32
 800704c:	431a      	orrs	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	218c      	movs	r1, #140	; 0x8c
 8007052:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	228c      	movs	r2, #140	; 0x8c
 8007058:	589b      	ldr	r3, [r3, r2]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d100      	bne.n	8007060 <HAL_UART_IRQHandler+0x1b0>
 800705e:	e230      	b.n	80074c2 <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007060:	23a4      	movs	r3, #164	; 0xa4
 8007062:	18fb      	adds	r3, r7, r3
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2220      	movs	r2, #32
 8007068:	4013      	ands	r3, r2
 800706a:	d015      	beq.n	8007098 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800706c:	23a0      	movs	r3, #160	; 0xa0
 800706e:	18fb      	adds	r3, r7, r3
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2220      	movs	r2, #32
 8007074:	4013      	ands	r3, r2
 8007076:	d106      	bne.n	8007086 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007078:	239c      	movs	r3, #156	; 0x9c
 800707a:	18fb      	adds	r3, r7, r3
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	2380      	movs	r3, #128	; 0x80
 8007080:	055b      	lsls	r3, r3, #21
 8007082:	4013      	ands	r3, r2
 8007084:	d008      	beq.n	8007098 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800708a:	2b00      	cmp	r3, #0
 800708c:	d004      	beq.n	8007098 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	0010      	movs	r0, r2
 8007096:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	228c      	movs	r2, #140	; 0x8c
 800709c:	589b      	ldr	r3, [r3, r2]
 800709e:	2194      	movs	r1, #148	; 0x94
 80070a0:	187a      	adds	r2, r7, r1
 80070a2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	2240      	movs	r2, #64	; 0x40
 80070ac:	4013      	ands	r3, r2
 80070ae:	2b40      	cmp	r3, #64	; 0x40
 80070b0:	d004      	beq.n	80070bc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80070b2:	187b      	adds	r3, r7, r1
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2228      	movs	r2, #40	; 0x28
 80070b8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070ba:	d047      	beq.n	800714c <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	0018      	movs	r0, r3
 80070c0:	f000 ffdc 	bl	800807c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	2240      	movs	r2, #64	; 0x40
 80070cc:	4013      	ands	r3, r2
 80070ce:	2b40      	cmp	r3, #64	; 0x40
 80070d0:	d137      	bne.n	8007142 <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070d2:	f3ef 8310 	mrs	r3, PRIMASK
 80070d6:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80070d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070da:	2090      	movs	r0, #144	; 0x90
 80070dc:	183a      	adds	r2, r7, r0
 80070de:	6013      	str	r3, [r2, #0]
 80070e0:	2301      	movs	r3, #1
 80070e2:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070e6:	f383 8810 	msr	PRIMASK, r3
}
 80070ea:	46c0      	nop			; (mov r8, r8)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	689a      	ldr	r2, [r3, #8]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2140      	movs	r1, #64	; 0x40
 80070f8:	438a      	bics	r2, r1
 80070fa:	609a      	str	r2, [r3, #8]
 80070fc:	183b      	adds	r3, r7, r0
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007102:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007104:	f383 8810 	msr	PRIMASK, r3
}
 8007108:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800710e:	2b00      	cmp	r3, #0
 8007110:	d012      	beq.n	8007138 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007116:	4a16      	ldr	r2, [pc, #88]	; (8007170 <HAL_UART_IRQHandler+0x2c0>)
 8007118:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800711e:	0018      	movs	r0, r3
 8007120:	f7fd f91e 	bl	8004360 <HAL_DMA_Abort_IT>
 8007124:	1e03      	subs	r3, r0, #0
 8007126:	d01a      	beq.n	800715e <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800712c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007132:	0018      	movs	r0, r3
 8007134:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007136:	e012      	b.n	800715e <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	0018      	movs	r0, r3
 800713c:	f000 f9da 	bl	80074f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007140:	e00d      	b.n	800715e <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	0018      	movs	r0, r3
 8007146:	f000 f9d5 	bl	80074f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800714a:	e008      	b.n	800715e <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	0018      	movs	r0, r3
 8007150:	f000 f9d0 	bl	80074f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	228c      	movs	r2, #140	; 0x8c
 8007158:	2100      	movs	r1, #0
 800715a:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800715c:	e1b1      	b.n	80074c2 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800715e:	46c0      	nop			; (mov r8, r8)
    return;
 8007160:	e1af      	b.n	80074c2 <HAL_UART_IRQHandler+0x612>
 8007162:	46c0      	nop			; (mov r8, r8)
 8007164:	0000080f 	.word	0x0000080f
 8007168:	10000001 	.word	0x10000001
 800716c:	04000120 	.word	0x04000120
 8007170:	08008149 	.word	0x08008149

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007178:	2b01      	cmp	r3, #1
 800717a:	d000      	beq.n	800717e <HAL_UART_IRQHandler+0x2ce>
 800717c:	e135      	b.n	80073ea <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800717e:	23a4      	movs	r3, #164	; 0xa4
 8007180:	18fb      	adds	r3, r7, r3
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2210      	movs	r2, #16
 8007186:	4013      	ands	r3, r2
 8007188:	d100      	bne.n	800718c <HAL_UART_IRQHandler+0x2dc>
 800718a:	e12e      	b.n	80073ea <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800718c:	23a0      	movs	r3, #160	; 0xa0
 800718e:	18fb      	adds	r3, r7, r3
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2210      	movs	r2, #16
 8007194:	4013      	ands	r3, r2
 8007196:	d100      	bne.n	800719a <HAL_UART_IRQHandler+0x2ea>
 8007198:	e127      	b.n	80073ea <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2210      	movs	r2, #16
 80071a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	2240      	movs	r2, #64	; 0x40
 80071aa:	4013      	ands	r3, r2
 80071ac:	2b40      	cmp	r3, #64	; 0x40
 80071ae:	d000      	beq.n	80071b2 <HAL_UART_IRQHandler+0x302>
 80071b0:	e09e      	b.n	80072f0 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	217e      	movs	r1, #126	; 0x7e
 80071bc:	187b      	adds	r3, r7, r1
 80071be:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80071c0:	187b      	adds	r3, r7, r1
 80071c2:	881b      	ldrh	r3, [r3, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d100      	bne.n	80071ca <HAL_UART_IRQHandler+0x31a>
 80071c8:	e17d      	b.n	80074c6 <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	225c      	movs	r2, #92	; 0x5c
 80071ce:	5a9b      	ldrh	r3, [r3, r2]
 80071d0:	187a      	adds	r2, r7, r1
 80071d2:	8812      	ldrh	r2, [r2, #0]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d300      	bcc.n	80071da <HAL_UART_IRQHandler+0x32a>
 80071d8:	e175      	b.n	80074c6 <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	187a      	adds	r2, r7, r1
 80071de:	215e      	movs	r1, #94	; 0x5e
 80071e0:	8812      	ldrh	r2, [r2, #0]
 80071e2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2220      	movs	r2, #32
 80071ee:	4013      	ands	r3, r2
 80071f0:	d16f      	bne.n	80072d2 <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071f2:	f3ef 8310 	mrs	r3, PRIMASK
 80071f6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80071f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80071fc:	2301      	movs	r3, #1
 80071fe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007202:	f383 8810 	msr	PRIMASK, r3
}
 8007206:	46c0      	nop			; (mov r8, r8)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	49b1      	ldr	r1, [pc, #708]	; (80074d8 <HAL_UART_IRQHandler+0x628>)
 8007214:	400a      	ands	r2, r1
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800721a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800721c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721e:	f383 8810 	msr	PRIMASK, r3
}
 8007222:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007224:	f3ef 8310 	mrs	r3, PRIMASK
 8007228:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800722a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800722c:	677b      	str	r3, [r7, #116]	; 0x74
 800722e:	2301      	movs	r3, #1
 8007230:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007234:	f383 8810 	msr	PRIMASK, r3
}
 8007238:	46c0      	nop			; (mov r8, r8)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	689a      	ldr	r2, [r3, #8]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2101      	movs	r1, #1
 8007246:	438a      	bics	r2, r1
 8007248:	609a      	str	r2, [r3, #8]
 800724a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800724c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800724e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007250:	f383 8810 	msr	PRIMASK, r3
}
 8007254:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007256:	f3ef 8310 	mrs	r3, PRIMASK
 800725a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800725c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800725e:	673b      	str	r3, [r7, #112]	; 0x70
 8007260:	2301      	movs	r3, #1
 8007262:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007266:	f383 8810 	msr	PRIMASK, r3
}
 800726a:	46c0      	nop			; (mov r8, r8)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	689a      	ldr	r2, [r3, #8]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2140      	movs	r1, #64	; 0x40
 8007278:	438a      	bics	r2, r1
 800727a:	609a      	str	r2, [r3, #8]
 800727c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800727e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007282:	f383 8810 	msr	PRIMASK, r3
}
 8007286:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2288      	movs	r2, #136	; 0x88
 800728c:	2120      	movs	r1, #32
 800728e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007296:	f3ef 8310 	mrs	r3, PRIMASK
 800729a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800729c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800729e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072a0:	2301      	movs	r3, #1
 80072a2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072a6:	f383 8810 	msr	PRIMASK, r3
}
 80072aa:	46c0      	nop			; (mov r8, r8)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2110      	movs	r1, #16
 80072b8:	438a      	bics	r2, r1
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072be:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072c2:	f383 8810 	msr	PRIMASK, r3
}
 80072c6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072cc:	0018      	movs	r0, r3
 80072ce:	f7fc ffe5 	bl	800429c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	225c      	movs	r2, #92	; 0x5c
 80072d6:	5a9a      	ldrh	r2, [r3, r2]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	215e      	movs	r1, #94	; 0x5e
 80072dc:	5a5b      	ldrh	r3, [r3, r1]
 80072de:	b29b      	uxth	r3, r3
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	0011      	movs	r1, r2
 80072e8:	0018      	movs	r0, r3
 80072ea:	f000 f90b 	bl	8007504 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80072ee:	e0ea      	b.n	80074c6 <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	225c      	movs	r2, #92	; 0x5c
 80072f4:	5a99      	ldrh	r1, [r3, r2]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	225e      	movs	r2, #94	; 0x5e
 80072fa:	5a9b      	ldrh	r3, [r3, r2]
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	208e      	movs	r0, #142	; 0x8e
 8007300:	183b      	adds	r3, r7, r0
 8007302:	1a8a      	subs	r2, r1, r2
 8007304:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	225e      	movs	r2, #94	; 0x5e
 800730a:	5a9b      	ldrh	r3, [r3, r2]
 800730c:	b29b      	uxth	r3, r3
 800730e:	2b00      	cmp	r3, #0
 8007310:	d100      	bne.n	8007314 <HAL_UART_IRQHandler+0x464>
 8007312:	e0da      	b.n	80074ca <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8007314:	183b      	adds	r3, r7, r0
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d100      	bne.n	800731e <HAL_UART_IRQHandler+0x46e>
 800731c:	e0d5      	b.n	80074ca <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800731e:	f3ef 8310 	mrs	r3, PRIMASK
 8007322:	60fb      	str	r3, [r7, #12]
  return(result);
 8007324:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007326:	2488      	movs	r4, #136	; 0x88
 8007328:	193a      	adds	r2, r7, r4
 800732a:	6013      	str	r3, [r2, #0]
 800732c:	2301      	movs	r3, #1
 800732e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	f383 8810 	msr	PRIMASK, r3
}
 8007336:	46c0      	nop			; (mov r8, r8)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4966      	ldr	r1, [pc, #408]	; (80074dc <HAL_UART_IRQHandler+0x62c>)
 8007344:	400a      	ands	r2, r1
 8007346:	601a      	str	r2, [r3, #0]
 8007348:	193b      	adds	r3, r7, r4
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	f383 8810 	msr	PRIMASK, r3
}
 8007354:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007356:	f3ef 8310 	mrs	r3, PRIMASK
 800735a:	61bb      	str	r3, [r7, #24]
  return(result);
 800735c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800735e:	2484      	movs	r4, #132	; 0x84
 8007360:	193a      	adds	r2, r7, r4
 8007362:	6013      	str	r3, [r2, #0]
 8007364:	2301      	movs	r3, #1
 8007366:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	f383 8810 	msr	PRIMASK, r3
}
 800736e:	46c0      	nop			; (mov r8, r8)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689a      	ldr	r2, [r3, #8]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4959      	ldr	r1, [pc, #356]	; (80074e0 <HAL_UART_IRQHandler+0x630>)
 800737c:	400a      	ands	r2, r1
 800737e:	609a      	str	r2, [r3, #8]
 8007380:	193b      	adds	r3, r7, r4
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007386:	6a3b      	ldr	r3, [r7, #32]
 8007388:	f383 8810 	msr	PRIMASK, r3
}
 800738c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2288      	movs	r2, #136	; 0x88
 8007392:	2120      	movs	r1, #32
 8007394:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073a2:	f3ef 8310 	mrs	r3, PRIMASK
 80073a6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073aa:	2480      	movs	r4, #128	; 0x80
 80073ac:	193a      	adds	r2, r7, r4
 80073ae:	6013      	str	r3, [r2, #0]
 80073b0:	2301      	movs	r3, #1
 80073b2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b6:	f383 8810 	msr	PRIMASK, r3
}
 80073ba:	46c0      	nop			; (mov r8, r8)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2110      	movs	r1, #16
 80073c8:	438a      	bics	r2, r1
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	193b      	adds	r3, r7, r4
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d4:	f383 8810 	msr	PRIMASK, r3
}
 80073d8:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073da:	183b      	adds	r3, r7, r0
 80073dc:	881a      	ldrh	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	0011      	movs	r1, r2
 80073e2:	0018      	movs	r0, r3
 80073e4:	f000 f88e 	bl	8007504 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80073e8:	e06f      	b.n	80074ca <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80073ea:	23a4      	movs	r3, #164	; 0xa4
 80073ec:	18fb      	adds	r3, r7, r3
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	2380      	movs	r3, #128	; 0x80
 80073f2:	035b      	lsls	r3, r3, #13
 80073f4:	4013      	ands	r3, r2
 80073f6:	d010      	beq.n	800741a <HAL_UART_IRQHandler+0x56a>
 80073f8:	239c      	movs	r3, #156	; 0x9c
 80073fa:	18fb      	adds	r3, r7, r3
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	2380      	movs	r3, #128	; 0x80
 8007400:	03db      	lsls	r3, r3, #15
 8007402:	4013      	ands	r3, r2
 8007404:	d009      	beq.n	800741a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2280      	movs	r2, #128	; 0x80
 800740c:	0352      	lsls	r2, r2, #13
 800740e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	0018      	movs	r0, r3
 8007414:	f001 fb2c 	bl	8008a70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007418:	e05a      	b.n	80074d0 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800741a:	23a4      	movs	r3, #164	; 0xa4
 800741c:	18fb      	adds	r3, r7, r3
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2280      	movs	r2, #128	; 0x80
 8007422:	4013      	ands	r3, r2
 8007424:	d016      	beq.n	8007454 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007426:	23a0      	movs	r3, #160	; 0xa0
 8007428:	18fb      	adds	r3, r7, r3
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2280      	movs	r2, #128	; 0x80
 800742e:	4013      	ands	r3, r2
 8007430:	d106      	bne.n	8007440 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007432:	239c      	movs	r3, #156	; 0x9c
 8007434:	18fb      	adds	r3, r7, r3
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	2380      	movs	r3, #128	; 0x80
 800743a:	041b      	lsls	r3, r3, #16
 800743c:	4013      	ands	r3, r2
 800743e:	d009      	beq.n	8007454 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007444:	2b00      	cmp	r3, #0
 8007446:	d042      	beq.n	80074ce <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	0010      	movs	r0, r2
 8007450:	4798      	blx	r3
    }
    return;
 8007452:	e03c      	b.n	80074ce <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007454:	23a4      	movs	r3, #164	; 0xa4
 8007456:	18fb      	adds	r3, r7, r3
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2240      	movs	r2, #64	; 0x40
 800745c:	4013      	ands	r3, r2
 800745e:	d00a      	beq.n	8007476 <HAL_UART_IRQHandler+0x5c6>
 8007460:	23a0      	movs	r3, #160	; 0xa0
 8007462:	18fb      	adds	r3, r7, r3
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2240      	movs	r2, #64	; 0x40
 8007468:	4013      	ands	r3, r2
 800746a:	d004      	beq.n	8007476 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	0018      	movs	r0, r3
 8007470:	f000 fe81 	bl	8008176 <UART_EndTransmit_IT>
    return;
 8007474:	e02c      	b.n	80074d0 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007476:	23a4      	movs	r3, #164	; 0xa4
 8007478:	18fb      	adds	r3, r7, r3
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	2380      	movs	r3, #128	; 0x80
 800747e:	041b      	lsls	r3, r3, #16
 8007480:	4013      	ands	r3, r2
 8007482:	d00b      	beq.n	800749c <HAL_UART_IRQHandler+0x5ec>
 8007484:	23a0      	movs	r3, #160	; 0xa0
 8007486:	18fb      	adds	r3, r7, r3
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	2380      	movs	r3, #128	; 0x80
 800748c:	05db      	lsls	r3, r3, #23
 800748e:	4013      	ands	r3, r2
 8007490:	d004      	beq.n	800749c <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	0018      	movs	r0, r3
 8007496:	f001 fafb 	bl	8008a90 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800749a:	e019      	b.n	80074d0 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800749c:	23a4      	movs	r3, #164	; 0xa4
 800749e:	18fb      	adds	r3, r7, r3
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	2380      	movs	r3, #128	; 0x80
 80074a4:	045b      	lsls	r3, r3, #17
 80074a6:	4013      	ands	r3, r2
 80074a8:	d012      	beq.n	80074d0 <HAL_UART_IRQHandler+0x620>
 80074aa:	23a0      	movs	r3, #160	; 0xa0
 80074ac:	18fb      	adds	r3, r7, r3
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	da0d      	bge.n	80074d0 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	0018      	movs	r0, r3
 80074b8:	f001 fae2 	bl	8008a80 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80074bc:	e008      	b.n	80074d0 <HAL_UART_IRQHandler+0x620>
      return;
 80074be:	46c0      	nop			; (mov r8, r8)
 80074c0:	e006      	b.n	80074d0 <HAL_UART_IRQHandler+0x620>
    return;
 80074c2:	46c0      	nop			; (mov r8, r8)
 80074c4:	e004      	b.n	80074d0 <HAL_UART_IRQHandler+0x620>
      return;
 80074c6:	46c0      	nop			; (mov r8, r8)
 80074c8:	e002      	b.n	80074d0 <HAL_UART_IRQHandler+0x620>
      return;
 80074ca:	46c0      	nop			; (mov r8, r8)
 80074cc:	e000      	b.n	80074d0 <HAL_UART_IRQHandler+0x620>
    return;
 80074ce:	46c0      	nop			; (mov r8, r8)
  }
}
 80074d0:	46bd      	mov	sp, r7
 80074d2:	b02a      	add	sp, #168	; 0xa8
 80074d4:	bdb0      	pop	{r4, r5, r7, pc}
 80074d6:	46c0      	nop			; (mov r8, r8)
 80074d8:	fffffeff 	.word	0xfffffeff
 80074dc:	fffffedf 	.word	0xfffffedf
 80074e0:	effffffe 	.word	0xeffffffe

080074e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80074ec:	46c0      	nop			; (mov r8, r8)
 80074ee:	46bd      	mov	sp, r7
 80074f0:	b002      	add	sp, #8
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80074fc:	46c0      	nop			; (mov r8, r8)
 80074fe:	46bd      	mov	sp, r7
 8007500:	b002      	add	sp, #8
 8007502:	bd80      	pop	{r7, pc}

08007504 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	000a      	movs	r2, r1
 800750e:	1cbb      	adds	r3, r7, #2
 8007510:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007512:	46c0      	nop			; (mov r8, r8)
 8007514:	46bd      	mov	sp, r7
 8007516:	b002      	add	sp, #8
 8007518:	bd80      	pop	{r7, pc}
	...

0800751c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800751c:	b5b0      	push	{r4, r5, r7, lr}
 800751e:	b090      	sub	sp, #64	; 0x40
 8007520:	af00      	add	r7, sp, #0
 8007522:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007524:	231a      	movs	r3, #26
 8007526:	2220      	movs	r2, #32
 8007528:	4694      	mov	ip, r2
 800752a:	44bc      	add	ip, r7
 800752c:	4463      	add	r3, ip
 800752e:	2200      	movs	r2, #0
 8007530:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	689a      	ldr	r2, [r3, #8]
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	431a      	orrs	r2, r3
 800753c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753e:	695b      	ldr	r3, [r3, #20]
 8007540:	431a      	orrs	r2, r3
 8007542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	4313      	orrs	r3, r2
 8007548:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800754a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4ab9      	ldr	r2, [pc, #740]	; (8007838 <UART_SetConfig+0x31c>)
 8007552:	4013      	ands	r3, r2
 8007554:	0019      	movs	r1, r3
 8007556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800755c:	430b      	orrs	r3, r1
 800755e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	4ab5      	ldr	r2, [pc, #724]	; (800783c <UART_SetConfig+0x320>)
 8007568:	4013      	ands	r3, r2
 800756a:	0018      	movs	r0, r3
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	68d9      	ldr	r1, [r3, #12]
 8007570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	0003      	movs	r3, r0
 8007576:	430b      	orrs	r3, r1
 8007578:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800757a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4aae      	ldr	r2, [pc, #696]	; (8007840 <UART_SetConfig+0x324>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d004      	beq.n	8007594 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007590:	4313      	orrs	r3, r2
 8007592:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	4aaa      	ldr	r2, [pc, #680]	; (8007844 <UART_SetConfig+0x328>)
 800759c:	4013      	ands	r3, r2
 800759e:	0019      	movs	r1, r3
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a6:	430b      	orrs	r3, r1
 80075a8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80075aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b0:	220f      	movs	r2, #15
 80075b2:	4393      	bics	r3, r2
 80075b4:	0018      	movs	r0, r3
 80075b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	0003      	movs	r3, r0
 80075c0:	430b      	orrs	r3, r1
 80075c2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a9f      	ldr	r2, [pc, #636]	; (8007848 <UART_SetConfig+0x32c>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d136      	bne.n	800763c <UART_SetConfig+0x120>
 80075ce:	4b9f      	ldr	r3, [pc, #636]	; (800784c <UART_SetConfig+0x330>)
 80075d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d2:	2203      	movs	r2, #3
 80075d4:	4013      	ands	r3, r2
 80075d6:	2b03      	cmp	r3, #3
 80075d8:	d020      	beq.n	800761c <UART_SetConfig+0x100>
 80075da:	d827      	bhi.n	800762c <UART_SetConfig+0x110>
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d00d      	beq.n	80075fc <UART_SetConfig+0xe0>
 80075e0:	d824      	bhi.n	800762c <UART_SetConfig+0x110>
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d002      	beq.n	80075ec <UART_SetConfig+0xd0>
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d010      	beq.n	800760c <UART_SetConfig+0xf0>
 80075ea:	e01f      	b.n	800762c <UART_SetConfig+0x110>
 80075ec:	231b      	movs	r3, #27
 80075ee:	2220      	movs	r2, #32
 80075f0:	4694      	mov	ip, r2
 80075f2:	44bc      	add	ip, r7
 80075f4:	4463      	add	r3, ip
 80075f6:	2200      	movs	r2, #0
 80075f8:	701a      	strb	r2, [r3, #0]
 80075fa:	e0c5      	b.n	8007788 <UART_SetConfig+0x26c>
 80075fc:	231b      	movs	r3, #27
 80075fe:	2220      	movs	r2, #32
 8007600:	4694      	mov	ip, r2
 8007602:	44bc      	add	ip, r7
 8007604:	4463      	add	r3, ip
 8007606:	2202      	movs	r2, #2
 8007608:	701a      	strb	r2, [r3, #0]
 800760a:	e0bd      	b.n	8007788 <UART_SetConfig+0x26c>
 800760c:	231b      	movs	r3, #27
 800760e:	2220      	movs	r2, #32
 8007610:	4694      	mov	ip, r2
 8007612:	44bc      	add	ip, r7
 8007614:	4463      	add	r3, ip
 8007616:	2204      	movs	r2, #4
 8007618:	701a      	strb	r2, [r3, #0]
 800761a:	e0b5      	b.n	8007788 <UART_SetConfig+0x26c>
 800761c:	231b      	movs	r3, #27
 800761e:	2220      	movs	r2, #32
 8007620:	4694      	mov	ip, r2
 8007622:	44bc      	add	ip, r7
 8007624:	4463      	add	r3, ip
 8007626:	2208      	movs	r2, #8
 8007628:	701a      	strb	r2, [r3, #0]
 800762a:	e0ad      	b.n	8007788 <UART_SetConfig+0x26c>
 800762c:	231b      	movs	r3, #27
 800762e:	2220      	movs	r2, #32
 8007630:	4694      	mov	ip, r2
 8007632:	44bc      	add	ip, r7
 8007634:	4463      	add	r3, ip
 8007636:	2210      	movs	r2, #16
 8007638:	701a      	strb	r2, [r3, #0]
 800763a:	e0a5      	b.n	8007788 <UART_SetConfig+0x26c>
 800763c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a83      	ldr	r2, [pc, #524]	; (8007850 <UART_SetConfig+0x334>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d136      	bne.n	80076b4 <UART_SetConfig+0x198>
 8007646:	4b81      	ldr	r3, [pc, #516]	; (800784c <UART_SetConfig+0x330>)
 8007648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800764a:	220c      	movs	r2, #12
 800764c:	4013      	ands	r3, r2
 800764e:	2b0c      	cmp	r3, #12
 8007650:	d020      	beq.n	8007694 <UART_SetConfig+0x178>
 8007652:	d827      	bhi.n	80076a4 <UART_SetConfig+0x188>
 8007654:	2b08      	cmp	r3, #8
 8007656:	d00d      	beq.n	8007674 <UART_SetConfig+0x158>
 8007658:	d824      	bhi.n	80076a4 <UART_SetConfig+0x188>
 800765a:	2b00      	cmp	r3, #0
 800765c:	d002      	beq.n	8007664 <UART_SetConfig+0x148>
 800765e:	2b04      	cmp	r3, #4
 8007660:	d010      	beq.n	8007684 <UART_SetConfig+0x168>
 8007662:	e01f      	b.n	80076a4 <UART_SetConfig+0x188>
 8007664:	231b      	movs	r3, #27
 8007666:	2220      	movs	r2, #32
 8007668:	4694      	mov	ip, r2
 800766a:	44bc      	add	ip, r7
 800766c:	4463      	add	r3, ip
 800766e:	2200      	movs	r2, #0
 8007670:	701a      	strb	r2, [r3, #0]
 8007672:	e089      	b.n	8007788 <UART_SetConfig+0x26c>
 8007674:	231b      	movs	r3, #27
 8007676:	2220      	movs	r2, #32
 8007678:	4694      	mov	ip, r2
 800767a:	44bc      	add	ip, r7
 800767c:	4463      	add	r3, ip
 800767e:	2202      	movs	r2, #2
 8007680:	701a      	strb	r2, [r3, #0]
 8007682:	e081      	b.n	8007788 <UART_SetConfig+0x26c>
 8007684:	231b      	movs	r3, #27
 8007686:	2220      	movs	r2, #32
 8007688:	4694      	mov	ip, r2
 800768a:	44bc      	add	ip, r7
 800768c:	4463      	add	r3, ip
 800768e:	2204      	movs	r2, #4
 8007690:	701a      	strb	r2, [r3, #0]
 8007692:	e079      	b.n	8007788 <UART_SetConfig+0x26c>
 8007694:	231b      	movs	r3, #27
 8007696:	2220      	movs	r2, #32
 8007698:	4694      	mov	ip, r2
 800769a:	44bc      	add	ip, r7
 800769c:	4463      	add	r3, ip
 800769e:	2208      	movs	r2, #8
 80076a0:	701a      	strb	r2, [r3, #0]
 80076a2:	e071      	b.n	8007788 <UART_SetConfig+0x26c>
 80076a4:	231b      	movs	r3, #27
 80076a6:	2220      	movs	r2, #32
 80076a8:	4694      	mov	ip, r2
 80076aa:	44bc      	add	ip, r7
 80076ac:	4463      	add	r3, ip
 80076ae:	2210      	movs	r2, #16
 80076b0:	701a      	strb	r2, [r3, #0]
 80076b2:	e069      	b.n	8007788 <UART_SetConfig+0x26c>
 80076b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a66      	ldr	r2, [pc, #408]	; (8007854 <UART_SetConfig+0x338>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d107      	bne.n	80076ce <UART_SetConfig+0x1b2>
 80076be:	231b      	movs	r3, #27
 80076c0:	2220      	movs	r2, #32
 80076c2:	4694      	mov	ip, r2
 80076c4:	44bc      	add	ip, r7
 80076c6:	4463      	add	r3, ip
 80076c8:	2200      	movs	r2, #0
 80076ca:	701a      	strb	r2, [r3, #0]
 80076cc:	e05c      	b.n	8007788 <UART_SetConfig+0x26c>
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a61      	ldr	r2, [pc, #388]	; (8007858 <UART_SetConfig+0x33c>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d107      	bne.n	80076e8 <UART_SetConfig+0x1cc>
 80076d8:	231b      	movs	r3, #27
 80076da:	2220      	movs	r2, #32
 80076dc:	4694      	mov	ip, r2
 80076de:	44bc      	add	ip, r7
 80076e0:	4463      	add	r3, ip
 80076e2:	2200      	movs	r2, #0
 80076e4:	701a      	strb	r2, [r3, #0]
 80076e6:	e04f      	b.n	8007788 <UART_SetConfig+0x26c>
 80076e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a54      	ldr	r2, [pc, #336]	; (8007840 <UART_SetConfig+0x324>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d143      	bne.n	800777a <UART_SetConfig+0x25e>
 80076f2:	4b56      	ldr	r3, [pc, #344]	; (800784c <UART_SetConfig+0x330>)
 80076f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076f6:	23c0      	movs	r3, #192	; 0xc0
 80076f8:	011b      	lsls	r3, r3, #4
 80076fa:	4013      	ands	r3, r2
 80076fc:	22c0      	movs	r2, #192	; 0xc0
 80076fe:	0112      	lsls	r2, r2, #4
 8007700:	4293      	cmp	r3, r2
 8007702:	d02a      	beq.n	800775a <UART_SetConfig+0x23e>
 8007704:	22c0      	movs	r2, #192	; 0xc0
 8007706:	0112      	lsls	r2, r2, #4
 8007708:	4293      	cmp	r3, r2
 800770a:	d82e      	bhi.n	800776a <UART_SetConfig+0x24e>
 800770c:	2280      	movs	r2, #128	; 0x80
 800770e:	0112      	lsls	r2, r2, #4
 8007710:	4293      	cmp	r3, r2
 8007712:	d012      	beq.n	800773a <UART_SetConfig+0x21e>
 8007714:	2280      	movs	r2, #128	; 0x80
 8007716:	0112      	lsls	r2, r2, #4
 8007718:	4293      	cmp	r3, r2
 800771a:	d826      	bhi.n	800776a <UART_SetConfig+0x24e>
 800771c:	2b00      	cmp	r3, #0
 800771e:	d004      	beq.n	800772a <UART_SetConfig+0x20e>
 8007720:	2280      	movs	r2, #128	; 0x80
 8007722:	00d2      	lsls	r2, r2, #3
 8007724:	4293      	cmp	r3, r2
 8007726:	d010      	beq.n	800774a <UART_SetConfig+0x22e>
 8007728:	e01f      	b.n	800776a <UART_SetConfig+0x24e>
 800772a:	231b      	movs	r3, #27
 800772c:	2220      	movs	r2, #32
 800772e:	4694      	mov	ip, r2
 8007730:	44bc      	add	ip, r7
 8007732:	4463      	add	r3, ip
 8007734:	2200      	movs	r2, #0
 8007736:	701a      	strb	r2, [r3, #0]
 8007738:	e026      	b.n	8007788 <UART_SetConfig+0x26c>
 800773a:	231b      	movs	r3, #27
 800773c:	2220      	movs	r2, #32
 800773e:	4694      	mov	ip, r2
 8007740:	44bc      	add	ip, r7
 8007742:	4463      	add	r3, ip
 8007744:	2202      	movs	r2, #2
 8007746:	701a      	strb	r2, [r3, #0]
 8007748:	e01e      	b.n	8007788 <UART_SetConfig+0x26c>
 800774a:	231b      	movs	r3, #27
 800774c:	2220      	movs	r2, #32
 800774e:	4694      	mov	ip, r2
 8007750:	44bc      	add	ip, r7
 8007752:	4463      	add	r3, ip
 8007754:	2204      	movs	r2, #4
 8007756:	701a      	strb	r2, [r3, #0]
 8007758:	e016      	b.n	8007788 <UART_SetConfig+0x26c>
 800775a:	231b      	movs	r3, #27
 800775c:	2220      	movs	r2, #32
 800775e:	4694      	mov	ip, r2
 8007760:	44bc      	add	ip, r7
 8007762:	4463      	add	r3, ip
 8007764:	2208      	movs	r2, #8
 8007766:	701a      	strb	r2, [r3, #0]
 8007768:	e00e      	b.n	8007788 <UART_SetConfig+0x26c>
 800776a:	231b      	movs	r3, #27
 800776c:	2220      	movs	r2, #32
 800776e:	4694      	mov	ip, r2
 8007770:	44bc      	add	ip, r7
 8007772:	4463      	add	r3, ip
 8007774:	2210      	movs	r2, #16
 8007776:	701a      	strb	r2, [r3, #0]
 8007778:	e006      	b.n	8007788 <UART_SetConfig+0x26c>
 800777a:	231b      	movs	r3, #27
 800777c:	2220      	movs	r2, #32
 800777e:	4694      	mov	ip, r2
 8007780:	44bc      	add	ip, r7
 8007782:	4463      	add	r3, ip
 8007784:	2210      	movs	r2, #16
 8007786:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a2c      	ldr	r2, [pc, #176]	; (8007840 <UART_SetConfig+0x324>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d000      	beq.n	8007794 <UART_SetConfig+0x278>
 8007792:	e0ad      	b.n	80078f0 <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007794:	231b      	movs	r3, #27
 8007796:	2220      	movs	r2, #32
 8007798:	4694      	mov	ip, r2
 800779a:	44bc      	add	ip, r7
 800779c:	4463      	add	r3, ip
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	2b08      	cmp	r3, #8
 80077a2:	d015      	beq.n	80077d0 <UART_SetConfig+0x2b4>
 80077a4:	dc18      	bgt.n	80077d8 <UART_SetConfig+0x2bc>
 80077a6:	2b04      	cmp	r3, #4
 80077a8:	d00d      	beq.n	80077c6 <UART_SetConfig+0x2aa>
 80077aa:	dc15      	bgt.n	80077d8 <UART_SetConfig+0x2bc>
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d002      	beq.n	80077b6 <UART_SetConfig+0x29a>
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d005      	beq.n	80077c0 <UART_SetConfig+0x2a4>
 80077b4:	e010      	b.n	80077d8 <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077b6:	f7fd fd2b 	bl	8005210 <HAL_RCC_GetPCLK1Freq>
 80077ba:	0003      	movs	r3, r0
 80077bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077be:	e015      	b.n	80077ec <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077c0:	4b26      	ldr	r3, [pc, #152]	; (800785c <UART_SetConfig+0x340>)
 80077c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077c4:	e012      	b.n	80077ec <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077c6:	f7fd fc97 	bl	80050f8 <HAL_RCC_GetSysClockFreq>
 80077ca:	0003      	movs	r3, r0
 80077cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077ce:	e00d      	b.n	80077ec <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077d0:	2380      	movs	r3, #128	; 0x80
 80077d2:	021b      	lsls	r3, r3, #8
 80077d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077d6:	e009      	b.n	80077ec <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 80077d8:	2300      	movs	r3, #0
 80077da:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80077dc:	231a      	movs	r3, #26
 80077de:	2220      	movs	r2, #32
 80077e0:	4694      	mov	ip, r2
 80077e2:	44bc      	add	ip, r7
 80077e4:	4463      	add	r3, ip
 80077e6:	2201      	movs	r2, #1
 80077e8:	701a      	strb	r2, [r3, #0]
        break;
 80077ea:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80077ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d100      	bne.n	80077f4 <UART_SetConfig+0x2d8>
 80077f2:	e154      	b.n	8007a9e <UART_SetConfig+0x582>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077f8:	4b19      	ldr	r3, [pc, #100]	; (8007860 <UART_SetConfig+0x344>)
 80077fa:	0052      	lsls	r2, r2, #1
 80077fc:	5ad3      	ldrh	r3, [r2, r3]
 80077fe:	0019      	movs	r1, r3
 8007800:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007802:	f7f8 fc89 	bl	8000118 <__udivsi3>
 8007806:	0003      	movs	r3, r0
 8007808:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780c:	685a      	ldr	r2, [r3, #4]
 800780e:	0013      	movs	r3, r2
 8007810:	005b      	lsls	r3, r3, #1
 8007812:	189b      	adds	r3, r3, r2
 8007814:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007816:	429a      	cmp	r2, r3
 8007818:	d305      	bcc.n	8007826 <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007822:	429a      	cmp	r2, r3
 8007824:	d91e      	bls.n	8007864 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007826:	231a      	movs	r3, #26
 8007828:	2220      	movs	r2, #32
 800782a:	4694      	mov	ip, r2
 800782c:	44bc      	add	ip, r7
 800782e:	4463      	add	r3, ip
 8007830:	2201      	movs	r2, #1
 8007832:	701a      	strb	r2, [r3, #0]
 8007834:	e133      	b.n	8007a9e <UART_SetConfig+0x582>
 8007836:	46c0      	nop			; (mov r8, r8)
 8007838:	cfff69f3 	.word	0xcfff69f3
 800783c:	ffffcfff 	.word	0xffffcfff
 8007840:	40008000 	.word	0x40008000
 8007844:	11fff4ff 	.word	0x11fff4ff
 8007848:	40013800 	.word	0x40013800
 800784c:	40021000 	.word	0x40021000
 8007850:	40004400 	.word	0x40004400
 8007854:	40004800 	.word	0x40004800
 8007858:	40004c00 	.word	0x40004c00
 800785c:	00f42400 	.word	0x00f42400
 8007860:	08009c20 	.word	0x08009c20
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007866:	61bb      	str	r3, [r7, #24]
 8007868:	2300      	movs	r3, #0
 800786a:	61fb      	str	r3, [r7, #28]
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007870:	4b97      	ldr	r3, [pc, #604]	; (8007ad0 <UART_SetConfig+0x5b4>)
 8007872:	0052      	lsls	r2, r2, #1
 8007874:	5ad3      	ldrh	r3, [r2, r3]
 8007876:	613b      	str	r3, [r7, #16]
 8007878:	2300      	movs	r3, #0
 800787a:	617b      	str	r3, [r7, #20]
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	69b8      	ldr	r0, [r7, #24]
 8007882:	69f9      	ldr	r1, [r7, #28]
 8007884:	f7f8 fdbe 	bl	8000404 <__aeabi_uldivmod>
 8007888:	0002      	movs	r2, r0
 800788a:	000b      	movs	r3, r1
 800788c:	0e11      	lsrs	r1, r2, #24
 800788e:	021d      	lsls	r5, r3, #8
 8007890:	430d      	orrs	r5, r1
 8007892:	0214      	lsls	r4, r2, #8
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	085b      	lsrs	r3, r3, #1
 800789a:	60bb      	str	r3, [r7, #8]
 800789c:	2300      	movs	r3, #0
 800789e:	60fb      	str	r3, [r7, #12]
 80078a0:	68b8      	ldr	r0, [r7, #8]
 80078a2:	68f9      	ldr	r1, [r7, #12]
 80078a4:	1900      	adds	r0, r0, r4
 80078a6:	4169      	adcs	r1, r5
 80078a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	603b      	str	r3, [r7, #0]
 80078ae:	2300      	movs	r3, #0
 80078b0:	607b      	str	r3, [r7, #4]
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f7f8 fda5 	bl	8000404 <__aeabi_uldivmod>
 80078ba:	0002      	movs	r2, r0
 80078bc:	000b      	movs	r3, r1
 80078be:	0013      	movs	r3, r2
 80078c0:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078c4:	23c0      	movs	r3, #192	; 0xc0
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d309      	bcc.n	80078e0 <UART_SetConfig+0x3c4>
 80078cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ce:	2380      	movs	r3, #128	; 0x80
 80078d0:	035b      	lsls	r3, r3, #13
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d204      	bcs.n	80078e0 <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 80078d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078dc:	60da      	str	r2, [r3, #12]
 80078de:	e0de      	b.n	8007a9e <UART_SetConfig+0x582>
        }
        else
        {
          ret = HAL_ERROR;
 80078e0:	231a      	movs	r3, #26
 80078e2:	2220      	movs	r2, #32
 80078e4:	4694      	mov	ip, r2
 80078e6:	44bc      	add	ip, r7
 80078e8:	4463      	add	r3, ip
 80078ea:	2201      	movs	r2, #1
 80078ec:	701a      	strb	r2, [r3, #0]
 80078ee:	e0d6      	b.n	8007a9e <UART_SetConfig+0x582>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f2:	69da      	ldr	r2, [r3, #28]
 80078f4:	2380      	movs	r3, #128	; 0x80
 80078f6:	021b      	lsls	r3, r3, #8
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d000      	beq.n	80078fe <UART_SetConfig+0x3e2>
 80078fc:	e074      	b.n	80079e8 <UART_SetConfig+0x4cc>
  {
    switch (clocksource)
 80078fe:	231b      	movs	r3, #27
 8007900:	2220      	movs	r2, #32
 8007902:	4694      	mov	ip, r2
 8007904:	44bc      	add	ip, r7
 8007906:	4463      	add	r3, ip
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	2b08      	cmp	r3, #8
 800790c:	d015      	beq.n	800793a <UART_SetConfig+0x41e>
 800790e:	dc18      	bgt.n	8007942 <UART_SetConfig+0x426>
 8007910:	2b04      	cmp	r3, #4
 8007912:	d00d      	beq.n	8007930 <UART_SetConfig+0x414>
 8007914:	dc15      	bgt.n	8007942 <UART_SetConfig+0x426>
 8007916:	2b00      	cmp	r3, #0
 8007918:	d002      	beq.n	8007920 <UART_SetConfig+0x404>
 800791a:	2b02      	cmp	r3, #2
 800791c:	d005      	beq.n	800792a <UART_SetConfig+0x40e>
 800791e:	e010      	b.n	8007942 <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007920:	f7fd fc76 	bl	8005210 <HAL_RCC_GetPCLK1Freq>
 8007924:	0003      	movs	r3, r0
 8007926:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007928:	e015      	b.n	8007956 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800792a:	4b6a      	ldr	r3, [pc, #424]	; (8007ad4 <UART_SetConfig+0x5b8>)
 800792c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800792e:	e012      	b.n	8007956 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007930:	f7fd fbe2 	bl	80050f8 <HAL_RCC_GetSysClockFreq>
 8007934:	0003      	movs	r3, r0
 8007936:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007938:	e00d      	b.n	8007956 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800793a:	2380      	movs	r3, #128	; 0x80
 800793c:	021b      	lsls	r3, r3, #8
 800793e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007940:	e009      	b.n	8007956 <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 8007942:	2300      	movs	r3, #0
 8007944:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007946:	231a      	movs	r3, #26
 8007948:	2220      	movs	r2, #32
 800794a:	4694      	mov	ip, r2
 800794c:	44bc      	add	ip, r7
 800794e:	4463      	add	r3, ip
 8007950:	2201      	movs	r2, #1
 8007952:	701a      	strb	r2, [r3, #0]
        break;
 8007954:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007958:	2b00      	cmp	r3, #0
 800795a:	d100      	bne.n	800795e <UART_SetConfig+0x442>
 800795c:	e09f      	b.n	8007a9e <UART_SetConfig+0x582>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007962:	4b5b      	ldr	r3, [pc, #364]	; (8007ad0 <UART_SetConfig+0x5b4>)
 8007964:	0052      	lsls	r2, r2, #1
 8007966:	5ad3      	ldrh	r3, [r2, r3]
 8007968:	0019      	movs	r1, r3
 800796a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800796c:	f7f8 fbd4 	bl	8000118 <__udivsi3>
 8007970:	0003      	movs	r3, r0
 8007972:	005a      	lsls	r2, r3, #1
 8007974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	085b      	lsrs	r3, r3, #1
 800797a:	18d2      	adds	r2, r2, r3
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	0019      	movs	r1, r3
 8007982:	0010      	movs	r0, r2
 8007984:	f7f8 fbc8 	bl	8000118 <__udivsi3>
 8007988:	0003      	movs	r3, r0
 800798a:	b29b      	uxth	r3, r3
 800798c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800798e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007990:	2b0f      	cmp	r3, #15
 8007992:	d921      	bls.n	80079d8 <UART_SetConfig+0x4bc>
 8007994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007996:	2380      	movs	r3, #128	; 0x80
 8007998:	025b      	lsls	r3, r3, #9
 800799a:	429a      	cmp	r2, r3
 800799c:	d21c      	bcs.n	80079d8 <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800799e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	200e      	movs	r0, #14
 80079a4:	2420      	movs	r4, #32
 80079a6:	193b      	adds	r3, r7, r4
 80079a8:	181b      	adds	r3, r3, r0
 80079aa:	210f      	movs	r1, #15
 80079ac:	438a      	bics	r2, r1
 80079ae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b2:	085b      	lsrs	r3, r3, #1
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	2207      	movs	r2, #7
 80079b8:	4013      	ands	r3, r2
 80079ba:	b299      	uxth	r1, r3
 80079bc:	193b      	adds	r3, r7, r4
 80079be:	181b      	adds	r3, r3, r0
 80079c0:	193a      	adds	r2, r7, r4
 80079c2:	1812      	adds	r2, r2, r0
 80079c4:	8812      	ldrh	r2, [r2, #0]
 80079c6:	430a      	orrs	r2, r1
 80079c8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	193a      	adds	r2, r7, r4
 80079d0:	1812      	adds	r2, r2, r0
 80079d2:	8812      	ldrh	r2, [r2, #0]
 80079d4:	60da      	str	r2, [r3, #12]
 80079d6:	e062      	b.n	8007a9e <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 80079d8:	231a      	movs	r3, #26
 80079da:	2220      	movs	r2, #32
 80079dc:	4694      	mov	ip, r2
 80079de:	44bc      	add	ip, r7
 80079e0:	4463      	add	r3, ip
 80079e2:	2201      	movs	r2, #1
 80079e4:	701a      	strb	r2, [r3, #0]
 80079e6:	e05a      	b.n	8007a9e <UART_SetConfig+0x582>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079e8:	231b      	movs	r3, #27
 80079ea:	2220      	movs	r2, #32
 80079ec:	4694      	mov	ip, r2
 80079ee:	44bc      	add	ip, r7
 80079f0:	4463      	add	r3, ip
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	2b08      	cmp	r3, #8
 80079f6:	d015      	beq.n	8007a24 <UART_SetConfig+0x508>
 80079f8:	dc18      	bgt.n	8007a2c <UART_SetConfig+0x510>
 80079fa:	2b04      	cmp	r3, #4
 80079fc:	d00d      	beq.n	8007a1a <UART_SetConfig+0x4fe>
 80079fe:	dc15      	bgt.n	8007a2c <UART_SetConfig+0x510>
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d002      	beq.n	8007a0a <UART_SetConfig+0x4ee>
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d005      	beq.n	8007a14 <UART_SetConfig+0x4f8>
 8007a08:	e010      	b.n	8007a2c <UART_SetConfig+0x510>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a0a:	f7fd fc01 	bl	8005210 <HAL_RCC_GetPCLK1Freq>
 8007a0e:	0003      	movs	r3, r0
 8007a10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a12:	e015      	b.n	8007a40 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a14:	4b2f      	ldr	r3, [pc, #188]	; (8007ad4 <UART_SetConfig+0x5b8>)
 8007a16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a18:	e012      	b.n	8007a40 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a1a:	f7fd fb6d 	bl	80050f8 <HAL_RCC_GetSysClockFreq>
 8007a1e:	0003      	movs	r3, r0
 8007a20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a22:	e00d      	b.n	8007a40 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a24:	2380      	movs	r3, #128	; 0x80
 8007a26:	021b      	lsls	r3, r3, #8
 8007a28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a2a:	e009      	b.n	8007a40 <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007a30:	231a      	movs	r3, #26
 8007a32:	2220      	movs	r2, #32
 8007a34:	4694      	mov	ip, r2
 8007a36:	44bc      	add	ip, r7
 8007a38:	4463      	add	r3, ip
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	701a      	strb	r2, [r3, #0]
        break;
 8007a3e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d02b      	beq.n	8007a9e <UART_SetConfig+0x582>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a4a:	4b21      	ldr	r3, [pc, #132]	; (8007ad0 <UART_SetConfig+0x5b4>)
 8007a4c:	0052      	lsls	r2, r2, #1
 8007a4e:	5ad3      	ldrh	r3, [r2, r3]
 8007a50:	0019      	movs	r1, r3
 8007a52:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007a54:	f7f8 fb60 	bl	8000118 <__udivsi3>
 8007a58:	0003      	movs	r3, r0
 8007a5a:	001a      	movs	r2, r3
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	085b      	lsrs	r3, r3, #1
 8007a62:	18d2      	adds	r2, r2, r3
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	0019      	movs	r1, r3
 8007a6a:	0010      	movs	r0, r2
 8007a6c:	f7f8 fb54 	bl	8000118 <__udivsi3>
 8007a70:	0003      	movs	r3, r0
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a78:	2b0f      	cmp	r3, #15
 8007a7a:	d909      	bls.n	8007a90 <UART_SetConfig+0x574>
 8007a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a7e:	2380      	movs	r3, #128	; 0x80
 8007a80:	025b      	lsls	r3, r3, #9
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d204      	bcs.n	8007a90 <UART_SetConfig+0x574>
      {
        huart->Instance->BRR = usartdiv;
 8007a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a8c:	60da      	str	r2, [r3, #12]
 8007a8e:	e006      	b.n	8007a9e <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 8007a90:	231a      	movs	r3, #26
 8007a92:	2220      	movs	r2, #32
 8007a94:	4694      	mov	ip, r2
 8007a96:	44bc      	add	ip, r7
 8007a98:	4463      	add	r3, ip
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa0:	226a      	movs	r2, #106	; 0x6a
 8007aa2:	2101      	movs	r1, #1
 8007aa4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa8:	2268      	movs	r2, #104	; 0x68
 8007aaa:	2101      	movs	r1, #1
 8007aac:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007aba:	231a      	movs	r3, #26
 8007abc:	2220      	movs	r2, #32
 8007abe:	4694      	mov	ip, r2
 8007ac0:	44bc      	add	ip, r7
 8007ac2:	4463      	add	r3, ip
 8007ac4:	781b      	ldrb	r3, [r3, #0]
}
 8007ac6:	0018      	movs	r0, r3
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	b010      	add	sp, #64	; 0x40
 8007acc:	bdb0      	pop	{r4, r5, r7, pc}
 8007ace:	46c0      	nop			; (mov r8, r8)
 8007ad0:	08009c20 	.word	0x08009c20
 8007ad4:	00f42400 	.word	0x00f42400

08007ad8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	d00b      	beq.n	8007b02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	4a4a      	ldr	r2, [pc, #296]	; (8007c1c <UART_AdvFeatureConfig+0x144>)
 8007af2:	4013      	ands	r3, r2
 8007af4:	0019      	movs	r1, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	430a      	orrs	r2, r1
 8007b00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b06:	2202      	movs	r2, #2
 8007b08:	4013      	ands	r3, r2
 8007b0a:	d00b      	beq.n	8007b24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	4a43      	ldr	r2, [pc, #268]	; (8007c20 <UART_AdvFeatureConfig+0x148>)
 8007b14:	4013      	ands	r3, r2
 8007b16:	0019      	movs	r1, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	430a      	orrs	r2, r1
 8007b22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b28:	2204      	movs	r2, #4
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	d00b      	beq.n	8007b46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	4a3b      	ldr	r2, [pc, #236]	; (8007c24 <UART_AdvFeatureConfig+0x14c>)
 8007b36:	4013      	ands	r3, r2
 8007b38:	0019      	movs	r1, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4a:	2208      	movs	r2, #8
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	d00b      	beq.n	8007b68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	4a34      	ldr	r2, [pc, #208]	; (8007c28 <UART_AdvFeatureConfig+0x150>)
 8007b58:	4013      	ands	r3, r2
 8007b5a:	0019      	movs	r1, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	430a      	orrs	r2, r1
 8007b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6c:	2210      	movs	r2, #16
 8007b6e:	4013      	ands	r3, r2
 8007b70:	d00b      	beq.n	8007b8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	4a2c      	ldr	r2, [pc, #176]	; (8007c2c <UART_AdvFeatureConfig+0x154>)
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	0019      	movs	r1, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	430a      	orrs	r2, r1
 8007b88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b8e:	2220      	movs	r2, #32
 8007b90:	4013      	ands	r3, r2
 8007b92:	d00b      	beq.n	8007bac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	4a25      	ldr	r2, [pc, #148]	; (8007c30 <UART_AdvFeatureConfig+0x158>)
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	0019      	movs	r1, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	430a      	orrs	r2, r1
 8007baa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb0:	2240      	movs	r2, #64	; 0x40
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	d01d      	beq.n	8007bf2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	4a1d      	ldr	r2, [pc, #116]	; (8007c34 <UART_AdvFeatureConfig+0x15c>)
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	0019      	movs	r1, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bd2:	2380      	movs	r3, #128	; 0x80
 8007bd4:	035b      	lsls	r3, r3, #13
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d10b      	bne.n	8007bf2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	4a15      	ldr	r2, [pc, #84]	; (8007c38 <UART_AdvFeatureConfig+0x160>)
 8007be2:	4013      	ands	r3, r2
 8007be4:	0019      	movs	r1, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf6:	2280      	movs	r2, #128	; 0x80
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	d00b      	beq.n	8007c14 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	4a0e      	ldr	r2, [pc, #56]	; (8007c3c <UART_AdvFeatureConfig+0x164>)
 8007c04:	4013      	ands	r3, r2
 8007c06:	0019      	movs	r1, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	430a      	orrs	r2, r1
 8007c12:	605a      	str	r2, [r3, #4]
  }
}
 8007c14:	46c0      	nop			; (mov r8, r8)
 8007c16:	46bd      	mov	sp, r7
 8007c18:	b002      	add	sp, #8
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	fffdffff 	.word	0xfffdffff
 8007c20:	fffeffff 	.word	0xfffeffff
 8007c24:	fffbffff 	.word	0xfffbffff
 8007c28:	ffff7fff 	.word	0xffff7fff
 8007c2c:	ffffefff 	.word	0xffffefff
 8007c30:	ffffdfff 	.word	0xffffdfff
 8007c34:	ffefffff 	.word	0xffefffff
 8007c38:	ff9fffff 	.word	0xff9fffff
 8007c3c:	fff7ffff 	.word	0xfff7ffff

08007c40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b086      	sub	sp, #24
 8007c44:	af02      	add	r7, sp, #8
 8007c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	228c      	movs	r2, #140	; 0x8c
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c50:	f7fb fd64 	bl	800371c <HAL_GetTick>
 8007c54:	0003      	movs	r3, r0
 8007c56:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2208      	movs	r2, #8
 8007c60:	4013      	ands	r3, r2
 8007c62:	2b08      	cmp	r3, #8
 8007c64:	d10c      	bne.n	8007c80 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2280      	movs	r2, #128	; 0x80
 8007c6a:	0391      	lsls	r1, r2, #14
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	4a18      	ldr	r2, [pc, #96]	; (8007cd0 <UART_CheckIdleState+0x90>)
 8007c70:	9200      	str	r2, [sp, #0]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f000 f82e 	bl	8007cd4 <UART_WaitOnFlagUntilTimeout>
 8007c78:	1e03      	subs	r3, r0, #0
 8007c7a:	d001      	beq.n	8007c80 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	e023      	b.n	8007cc8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2204      	movs	r2, #4
 8007c88:	4013      	ands	r3, r2
 8007c8a:	2b04      	cmp	r3, #4
 8007c8c:	d10c      	bne.n	8007ca8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2280      	movs	r2, #128	; 0x80
 8007c92:	03d1      	lsls	r1, r2, #15
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	4a0e      	ldr	r2, [pc, #56]	; (8007cd0 <UART_CheckIdleState+0x90>)
 8007c98:	9200      	str	r2, [sp, #0]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f000 f81a 	bl	8007cd4 <UART_WaitOnFlagUntilTimeout>
 8007ca0:	1e03      	subs	r3, r0, #0
 8007ca2:	d001      	beq.n	8007ca8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e00f      	b.n	8007cc8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2284      	movs	r2, #132	; 0x84
 8007cac:	2120      	movs	r1, #32
 8007cae:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2288      	movs	r2, #136	; 0x88
 8007cb4:	2120      	movs	r1, #32
 8007cb6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2280      	movs	r2, #128	; 0x80
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	0018      	movs	r0, r3
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	b004      	add	sp, #16
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	01ffffff 	.word	0x01ffffff

08007cd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b094      	sub	sp, #80	; 0x50
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	603b      	str	r3, [r7, #0]
 8007ce0:	1dfb      	adds	r3, r7, #7
 8007ce2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ce4:	e0a7      	b.n	8007e36 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ce6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ce8:	3301      	adds	r3, #1
 8007cea:	d100      	bne.n	8007cee <UART_WaitOnFlagUntilTimeout+0x1a>
 8007cec:	e0a3      	b.n	8007e36 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cee:	f7fb fd15 	bl	800371c <HAL_GetTick>
 8007cf2:	0002      	movs	r2, r0
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d302      	bcc.n	8007d04 <UART_WaitOnFlagUntilTimeout+0x30>
 8007cfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d13f      	bne.n	8007d84 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d04:	f3ef 8310 	mrs	r3, PRIMASK
 8007d08:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007d0c:	647b      	str	r3, [r7, #68]	; 0x44
 8007d0e:	2301      	movs	r3, #1
 8007d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d14:	f383 8810 	msr	PRIMASK, r3
}
 8007d18:	46c0      	nop			; (mov r8, r8)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	494e      	ldr	r1, [pc, #312]	; (8007e60 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007d26:	400a      	ands	r2, r1
 8007d28:	601a      	str	r2, [r3, #0]
 8007d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d2c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d30:	f383 8810 	msr	PRIMASK, r3
}
 8007d34:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d36:	f3ef 8310 	mrs	r3, PRIMASK
 8007d3a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d3e:	643b      	str	r3, [r7, #64]	; 0x40
 8007d40:	2301      	movs	r3, #1
 8007d42:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d46:	f383 8810 	msr	PRIMASK, r3
}
 8007d4a:	46c0      	nop			; (mov r8, r8)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	689a      	ldr	r2, [r3, #8]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2101      	movs	r1, #1
 8007d58:	438a      	bics	r2, r1
 8007d5a:	609a      	str	r2, [r3, #8]
 8007d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d62:	f383 8810 	msr	PRIMASK, r3
}
 8007d66:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2284      	movs	r2, #132	; 0x84
 8007d6c:	2120      	movs	r1, #32
 8007d6e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2288      	movs	r2, #136	; 0x88
 8007d74:	2120      	movs	r1, #32
 8007d76:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2280      	movs	r2, #128	; 0x80
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e069      	b.n	8007e58 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2204      	movs	r2, #4
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	d052      	beq.n	8007e36 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	69da      	ldr	r2, [r3, #28]
 8007d96:	2380      	movs	r3, #128	; 0x80
 8007d98:	011b      	lsls	r3, r3, #4
 8007d9a:	401a      	ands	r2, r3
 8007d9c:	2380      	movs	r3, #128	; 0x80
 8007d9e:	011b      	lsls	r3, r3, #4
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d148      	bne.n	8007e36 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2280      	movs	r2, #128	; 0x80
 8007daa:	0112      	lsls	r2, r2, #4
 8007dac:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dae:	f3ef 8310 	mrs	r3, PRIMASK
 8007db2:	613b      	str	r3, [r7, #16]
  return(result);
 8007db4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007db6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007db8:	2301      	movs	r3, #1
 8007dba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	f383 8810 	msr	PRIMASK, r3
}
 8007dc2:	46c0      	nop			; (mov r8, r8)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4924      	ldr	r1, [pc, #144]	; (8007e60 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007dd0:	400a      	ands	r2, r1
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dd6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	f383 8810 	msr	PRIMASK, r3
}
 8007dde:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007de0:	f3ef 8310 	mrs	r3, PRIMASK
 8007de4:	61fb      	str	r3, [r7, #28]
  return(result);
 8007de6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007de8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dea:	2301      	movs	r3, #1
 8007dec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dee:	6a3b      	ldr	r3, [r7, #32]
 8007df0:	f383 8810 	msr	PRIMASK, r3
}
 8007df4:	46c0      	nop			; (mov r8, r8)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	689a      	ldr	r2, [r3, #8]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2101      	movs	r1, #1
 8007e02:	438a      	bics	r2, r1
 8007e04:	609a      	str	r2, [r3, #8]
 8007e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e08:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0c:	f383 8810 	msr	PRIMASK, r3
}
 8007e10:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2284      	movs	r2, #132	; 0x84
 8007e16:	2120      	movs	r1, #32
 8007e18:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2288      	movs	r2, #136	; 0x88
 8007e1e:	2120      	movs	r1, #32
 8007e20:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	228c      	movs	r2, #140	; 0x8c
 8007e26:	2120      	movs	r1, #32
 8007e28:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2280      	movs	r2, #128	; 0x80
 8007e2e:	2100      	movs	r1, #0
 8007e30:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e010      	b.n	8007e58 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	69db      	ldr	r3, [r3, #28]
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	4013      	ands	r3, r2
 8007e40:	68ba      	ldr	r2, [r7, #8]
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	425a      	negs	r2, r3
 8007e46:	4153      	adcs	r3, r2
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	001a      	movs	r2, r3
 8007e4c:	1dfb      	adds	r3, r7, #7
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d100      	bne.n	8007e56 <UART_WaitOnFlagUntilTimeout+0x182>
 8007e54:	e747      	b.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	0018      	movs	r0, r3
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	b014      	add	sp, #80	; 0x50
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	fffffe5f 	.word	0xfffffe5f

08007e64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b094      	sub	sp, #80	; 0x50
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	1dbb      	adds	r3, r7, #6
 8007e70:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	1dba      	adds	r2, r7, #6
 8007e7c:	215c      	movs	r1, #92	; 0x5c
 8007e7e:	8812      	ldrh	r2, [r2, #0]
 8007e80:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	1dba      	adds	r2, r7, #6
 8007e86:	215e      	movs	r1, #94	; 0x5e
 8007e88:	8812      	ldrh	r2, [r2, #0]
 8007e8a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	689a      	ldr	r2, [r3, #8]
 8007e96:	2380      	movs	r3, #128	; 0x80
 8007e98:	015b      	lsls	r3, r3, #5
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d10d      	bne.n	8007eba <UART_Start_Receive_IT+0x56>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d104      	bne.n	8007eb0 <UART_Start_Receive_IT+0x4c>
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2260      	movs	r2, #96	; 0x60
 8007eaa:	496f      	ldr	r1, [pc, #444]	; (8008068 <UART_Start_Receive_IT+0x204>)
 8007eac:	5299      	strh	r1, [r3, r2]
 8007eae:	e02e      	b.n	8007f0e <UART_Start_Receive_IT+0xaa>
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2260      	movs	r2, #96	; 0x60
 8007eb4:	21ff      	movs	r1, #255	; 0xff
 8007eb6:	5299      	strh	r1, [r3, r2]
 8007eb8:	e029      	b.n	8007f0e <UART_Start_Receive_IT+0xaa>
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10d      	bne.n	8007ede <UART_Start_Receive_IT+0x7a>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d104      	bne.n	8007ed4 <UART_Start_Receive_IT+0x70>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2260      	movs	r2, #96	; 0x60
 8007ece:	21ff      	movs	r1, #255	; 0xff
 8007ed0:	5299      	strh	r1, [r3, r2]
 8007ed2:	e01c      	b.n	8007f0e <UART_Start_Receive_IT+0xaa>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2260      	movs	r2, #96	; 0x60
 8007ed8:	217f      	movs	r1, #127	; 0x7f
 8007eda:	5299      	strh	r1, [r3, r2]
 8007edc:	e017      	b.n	8007f0e <UART_Start_Receive_IT+0xaa>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	689a      	ldr	r2, [r3, #8]
 8007ee2:	2380      	movs	r3, #128	; 0x80
 8007ee4:	055b      	lsls	r3, r3, #21
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d10d      	bne.n	8007f06 <UART_Start_Receive_IT+0xa2>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d104      	bne.n	8007efc <UART_Start_Receive_IT+0x98>
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2260      	movs	r2, #96	; 0x60
 8007ef6:	217f      	movs	r1, #127	; 0x7f
 8007ef8:	5299      	strh	r1, [r3, r2]
 8007efa:	e008      	b.n	8007f0e <UART_Start_Receive_IT+0xaa>
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2260      	movs	r2, #96	; 0x60
 8007f00:	213f      	movs	r1, #63	; 0x3f
 8007f02:	5299      	strh	r1, [r3, r2]
 8007f04:	e003      	b.n	8007f0e <UART_Start_Receive_IT+0xaa>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2260      	movs	r2, #96	; 0x60
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	228c      	movs	r2, #140	; 0x8c
 8007f12:	2100      	movs	r1, #0
 8007f14:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2288      	movs	r2, #136	; 0x88
 8007f1a:	2122      	movs	r1, #34	; 0x22
 8007f1c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8007f22:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f28:	2301      	movs	r3, #1
 8007f2a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2e:	f383 8810 	msr	PRIMASK, r3
}
 8007f32:	46c0      	nop			; (mov r8, r8)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	689a      	ldr	r2, [r3, #8]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2101      	movs	r1, #1
 8007f40:	430a      	orrs	r2, r1
 8007f42:	609a      	str	r2, [r3, #8]
 8007f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f4a:	f383 8810 	msr	PRIMASK, r3
}
 8007f4e:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007f54:	2380      	movs	r3, #128	; 0x80
 8007f56:	059b      	lsls	r3, r3, #22
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d150      	bne.n	8007ffe <UART_Start_Receive_IT+0x19a>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2268      	movs	r2, #104	; 0x68
 8007f60:	5a9b      	ldrh	r3, [r3, r2]
 8007f62:	1dba      	adds	r2, r7, #6
 8007f64:	8812      	ldrh	r2, [r2, #0]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d349      	bcc.n	8007ffe <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	689a      	ldr	r2, [r3, #8]
 8007f6e:	2380      	movs	r3, #128	; 0x80
 8007f70:	015b      	lsls	r3, r3, #5
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d107      	bne.n	8007f86 <UART_Start_Receive_IT+0x122>
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d103      	bne.n	8007f86 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	4a3a      	ldr	r2, [pc, #232]	; (800806c <UART_Start_Receive_IT+0x208>)
 8007f82:	671a      	str	r2, [r3, #112]	; 0x70
 8007f84:	e002      	b.n	8007f8c <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	4a39      	ldr	r2, [pc, #228]	; (8008070 <UART_Start_Receive_IT+0x20c>)
 8007f8a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2280      	movs	r2, #128	; 0x80
 8007f90:	2100      	movs	r1, #0
 8007f92:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f94:	f3ef 8310 	mrs	r3, PRIMASK
 8007f98:	61fb      	str	r3, [r7, #28]
  return(result);
 8007f9a:	69fb      	ldr	r3, [r7, #28]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fa2:	6a3b      	ldr	r3, [r7, #32]
 8007fa4:	f383 8810 	msr	PRIMASK, r3
}
 8007fa8:	46c0      	nop			; (mov r8, r8)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2180      	movs	r1, #128	; 0x80
 8007fb6:	0049      	lsls	r1, r1, #1
 8007fb8:	430a      	orrs	r2, r1
 8007fba:	601a      	str	r2, [r3, #0]
 8007fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fbe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	f383 8810 	msr	PRIMASK, r3
}
 8007fc6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8007fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd8:	f383 8810 	msr	PRIMASK, r3
}
 8007fdc:	46c0      	nop			; (mov r8, r8)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	689a      	ldr	r2, [r3, #8]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2180      	movs	r1, #128	; 0x80
 8007fea:	0549      	lsls	r1, r1, #21
 8007fec:	430a      	orrs	r2, r1
 8007fee:	609a      	str	r2, [r3, #8]
 8007ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ff2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff6:	f383 8810 	msr	PRIMASK, r3
}
 8007ffa:	46c0      	nop			; (mov r8, r8)
 8007ffc:	e02e      	b.n	800805c <UART_Start_Receive_IT+0x1f8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	689a      	ldr	r2, [r3, #8]
 8008002:	2380      	movs	r3, #128	; 0x80
 8008004:	015b      	lsls	r3, r3, #5
 8008006:	429a      	cmp	r2, r3
 8008008:	d107      	bne.n	800801a <UART_Start_Receive_IT+0x1b6>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d103      	bne.n	800801a <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	4a17      	ldr	r2, [pc, #92]	; (8008074 <UART_Start_Receive_IT+0x210>)
 8008016:	671a      	str	r2, [r3, #112]	; 0x70
 8008018:	e002      	b.n	8008020 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	4a16      	ldr	r2, [pc, #88]	; (8008078 <UART_Start_Receive_IT+0x214>)
 800801e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2280      	movs	r2, #128	; 0x80
 8008024:	2100      	movs	r1, #0
 8008026:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008028:	f3ef 8310 	mrs	r3, PRIMASK
 800802c:	613b      	str	r3, [r7, #16]
  return(result);
 800802e:	693b      	ldr	r3, [r7, #16]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008030:	643b      	str	r3, [r7, #64]	; 0x40
 8008032:	2301      	movs	r3, #1
 8008034:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	f383 8810 	msr	PRIMASK, r3
}
 800803c:	46c0      	nop			; (mov r8, r8)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2190      	movs	r1, #144	; 0x90
 800804a:	0049      	lsls	r1, r1, #1
 800804c:	430a      	orrs	r2, r1
 800804e:	601a      	str	r2, [r3, #0]
 8008050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008052:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	f383 8810 	msr	PRIMASK, r3
}
 800805a:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	0018      	movs	r0, r3
 8008060:	46bd      	mov	sp, r7
 8008062:	b014      	add	sp, #80	; 0x50
 8008064:	bd80      	pop	{r7, pc}
 8008066:	46c0      	nop			; (mov r8, r8)
 8008068:	000001ff 	.word	0x000001ff
 800806c:	0800878d 	.word	0x0800878d
 8008070:	080084a9 	.word	0x080084a9
 8008074:	0800833d 	.word	0x0800833d
 8008078:	080081d1 	.word	0x080081d1

0800807c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b08e      	sub	sp, #56	; 0x38
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008084:	f3ef 8310 	mrs	r3, PRIMASK
 8008088:	617b      	str	r3, [r7, #20]
  return(result);
 800808a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800808c:	637b      	str	r3, [r7, #52]	; 0x34
 800808e:	2301      	movs	r3, #1
 8008090:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	f383 8810 	msr	PRIMASK, r3
}
 8008098:	46c0      	nop			; (mov r8, r8)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4926      	ldr	r1, [pc, #152]	; (8008140 <UART_EndRxTransfer+0xc4>)
 80080a6:	400a      	ands	r2, r1
 80080a8:	601a      	str	r2, [r3, #0]
 80080aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	f383 8810 	msr	PRIMASK, r3
}
 80080b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080b6:	f3ef 8310 	mrs	r3, PRIMASK
 80080ba:	623b      	str	r3, [r7, #32]
  return(result);
 80080bc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080be:	633b      	str	r3, [r7, #48]	; 0x30
 80080c0:	2301      	movs	r3, #1
 80080c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c6:	f383 8810 	msr	PRIMASK, r3
}
 80080ca:	46c0      	nop			; (mov r8, r8)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	689a      	ldr	r2, [r3, #8]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	491b      	ldr	r1, [pc, #108]	; (8008144 <UART_EndRxTransfer+0xc8>)
 80080d8:	400a      	ands	r2, r1
 80080da:	609a      	str	r2, [r3, #8]
 80080dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080de:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e2:	f383 8810 	msr	PRIMASK, r3
}
 80080e6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d118      	bne.n	8008122 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080f0:	f3ef 8310 	mrs	r3, PRIMASK
 80080f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80080f6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080fa:	2301      	movs	r3, #1
 80080fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f383 8810 	msr	PRIMASK, r3
}
 8008104:	46c0      	nop			; (mov r8, r8)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2110      	movs	r1, #16
 8008112:	438a      	bics	r2, r1
 8008114:	601a      	str	r2, [r3, #0]
 8008116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008118:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	f383 8810 	msr	PRIMASK, r3
}
 8008120:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2288      	movs	r2, #136	; 0x88
 8008126:	2120      	movs	r1, #32
 8008128:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008136:	46c0      	nop			; (mov r8, r8)
 8008138:	46bd      	mov	sp, r7
 800813a:	b00e      	add	sp, #56	; 0x38
 800813c:	bd80      	pop	{r7, pc}
 800813e:	46c0      	nop			; (mov r8, r8)
 8008140:	fffffedf 	.word	0xfffffedf
 8008144:	effffffe 	.word	0xeffffffe

08008148 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008154:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	225e      	movs	r2, #94	; 0x5e
 800815a:	2100      	movs	r1, #0
 800815c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2256      	movs	r2, #86	; 0x56
 8008162:	2100      	movs	r1, #0
 8008164:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	0018      	movs	r0, r3
 800816a:	f7ff f9c3 	bl	80074f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800816e:	46c0      	nop			; (mov r8, r8)
 8008170:	46bd      	mov	sp, r7
 8008172:	b004      	add	sp, #16
 8008174:	bd80      	pop	{r7, pc}

08008176 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b086      	sub	sp, #24
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800817e:	f3ef 8310 	mrs	r3, PRIMASK
 8008182:	60bb      	str	r3, [r7, #8]
  return(result);
 8008184:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008186:	617b      	str	r3, [r7, #20]
 8008188:	2301      	movs	r3, #1
 800818a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f383 8810 	msr	PRIMASK, r3
}
 8008192:	46c0      	nop			; (mov r8, r8)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2140      	movs	r1, #64	; 0x40
 80081a0:	438a      	bics	r2, r1
 80081a2:	601a      	str	r2, [r3, #0]
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f383 8810 	msr	PRIMASK, r3
}
 80081ae:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2284      	movs	r2, #132	; 0x84
 80081b4:	2120      	movs	r1, #32
 80081b6:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	0018      	movs	r0, r3
 80081c2:	f7ff f98f 	bl	80074e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081c6:	46c0      	nop			; (mov r8, r8)
 80081c8:	46bd      	mov	sp, r7
 80081ca:	b006      	add	sp, #24
 80081cc:	bd80      	pop	{r7, pc}
	...

080081d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b090      	sub	sp, #64	; 0x40
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80081d8:	203e      	movs	r0, #62	; 0x3e
 80081da:	183b      	adds	r3, r7, r0
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	2160      	movs	r1, #96	; 0x60
 80081e0:	5a52      	ldrh	r2, [r2, r1]
 80081e2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2288      	movs	r2, #136	; 0x88
 80081e8:	589b      	ldr	r3, [r3, r2]
 80081ea:	2b22      	cmp	r3, #34	; 0x22
 80081ec:	d000      	beq.n	80081f0 <UART_RxISR_8BIT+0x20>
 80081ee:	e097      	b.n	8008320 <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081f6:	213c      	movs	r1, #60	; 0x3c
 80081f8:	187b      	adds	r3, r7, r1
 80081fa:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80081fc:	187b      	adds	r3, r7, r1
 80081fe:	881b      	ldrh	r3, [r3, #0]
 8008200:	b2da      	uxtb	r2, r3
 8008202:	183b      	adds	r3, r7, r0
 8008204:	881b      	ldrh	r3, [r3, #0]
 8008206:	b2d9      	uxtb	r1, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800820c:	400a      	ands	r2, r1
 800820e:	b2d2      	uxtb	r2, r2
 8008210:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008216:	1c5a      	adds	r2, r3, #1
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	225e      	movs	r2, #94	; 0x5e
 8008220:	5a9b      	ldrh	r3, [r3, r2]
 8008222:	b29b      	uxth	r3, r3
 8008224:	3b01      	subs	r3, #1
 8008226:	b299      	uxth	r1, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	225e      	movs	r2, #94	; 0x5e
 800822c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	225e      	movs	r2, #94	; 0x5e
 8008232:	5a9b      	ldrh	r3, [r3, r2]
 8008234:	b29b      	uxth	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d000      	beq.n	800823c <UART_RxISR_8BIT+0x6c>
 800823a:	e079      	b.n	8008330 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800823c:	f3ef 8310 	mrs	r3, PRIMASK
 8008240:	61bb      	str	r3, [r7, #24]
  return(result);
 8008242:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008244:	63bb      	str	r3, [r7, #56]	; 0x38
 8008246:	2301      	movs	r3, #1
 8008248:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	f383 8810 	msr	PRIMASK, r3
}
 8008250:	46c0      	nop			; (mov r8, r8)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4936      	ldr	r1, [pc, #216]	; (8008338 <UART_RxISR_8BIT+0x168>)
 800825e:	400a      	ands	r2, r1
 8008260:	601a      	str	r2, [r3, #0]
 8008262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008264:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008266:	6a3b      	ldr	r3, [r7, #32]
 8008268:	f383 8810 	msr	PRIMASK, r3
}
 800826c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800826e:	f3ef 8310 	mrs	r3, PRIMASK
 8008272:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008274:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008276:	637b      	str	r3, [r7, #52]	; 0x34
 8008278:	2301      	movs	r3, #1
 800827a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800827c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827e:	f383 8810 	msr	PRIMASK, r3
}
 8008282:	46c0      	nop			; (mov r8, r8)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	689a      	ldr	r2, [r3, #8]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2101      	movs	r1, #1
 8008290:	438a      	bics	r2, r1
 8008292:	609a      	str	r2, [r3, #8]
 8008294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008296:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829a:	f383 8810 	msr	PRIMASK, r3
}
 800829e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2288      	movs	r2, #136	; 0x88
 80082a4:	2120      	movs	r1, #32
 80082a6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d12f      	bne.n	8008316 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082bc:	f3ef 8310 	mrs	r3, PRIMASK
 80082c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80082c2:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082c4:	633b      	str	r3, [r7, #48]	; 0x30
 80082c6:	2301      	movs	r3, #1
 80082c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	f383 8810 	msr	PRIMASK, r3
}
 80082d0:	46c0      	nop			; (mov r8, r8)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2110      	movs	r1, #16
 80082de:	438a      	bics	r2, r1
 80082e0:	601a      	str	r2, [r3, #0]
 80082e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f383 8810 	msr	PRIMASK, r3
}
 80082ec:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	69db      	ldr	r3, [r3, #28]
 80082f4:	2210      	movs	r2, #16
 80082f6:	4013      	ands	r3, r2
 80082f8:	2b10      	cmp	r3, #16
 80082fa:	d103      	bne.n	8008304 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2210      	movs	r2, #16
 8008302:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	225c      	movs	r2, #92	; 0x5c
 8008308:	5a9a      	ldrh	r2, [r3, r2]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	0011      	movs	r1, r2
 800830e:	0018      	movs	r0, r3
 8008310:	f7ff f8f8 	bl	8007504 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008314:	e00c      	b.n	8008330 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	0018      	movs	r0, r3
 800831a:	f7f9 fc95 	bl	8001c48 <HAL_UART_RxCpltCallback>
}
 800831e:	e007      	b.n	8008330 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	699a      	ldr	r2, [r3, #24]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2108      	movs	r1, #8
 800832c:	430a      	orrs	r2, r1
 800832e:	619a      	str	r2, [r3, #24]
}
 8008330:	46c0      	nop			; (mov r8, r8)
 8008332:	46bd      	mov	sp, r7
 8008334:	b010      	add	sp, #64	; 0x40
 8008336:	bd80      	pop	{r7, pc}
 8008338:	fffffedf 	.word	0xfffffedf

0800833c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b090      	sub	sp, #64	; 0x40
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008344:	203e      	movs	r0, #62	; 0x3e
 8008346:	183b      	adds	r3, r7, r0
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	2160      	movs	r1, #96	; 0x60
 800834c:	5a52      	ldrh	r2, [r2, r1]
 800834e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2288      	movs	r2, #136	; 0x88
 8008354:	589b      	ldr	r3, [r3, r2]
 8008356:	2b22      	cmp	r3, #34	; 0x22
 8008358:	d000      	beq.n	800835c <UART_RxISR_16BIT+0x20>
 800835a:	e097      	b.n	800848c <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008362:	213c      	movs	r1, #60	; 0x3c
 8008364:	187b      	adds	r3, r7, r1
 8008366:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800836c:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800836e:	187b      	adds	r3, r7, r1
 8008370:	183a      	adds	r2, r7, r0
 8008372:	881b      	ldrh	r3, [r3, #0]
 8008374:	8812      	ldrh	r2, [r2, #0]
 8008376:	4013      	ands	r3, r2
 8008378:	b29a      	uxth	r2, r3
 800837a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008382:	1c9a      	adds	r2, r3, #2
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	225e      	movs	r2, #94	; 0x5e
 800838c:	5a9b      	ldrh	r3, [r3, r2]
 800838e:	b29b      	uxth	r3, r3
 8008390:	3b01      	subs	r3, #1
 8008392:	b299      	uxth	r1, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	225e      	movs	r2, #94	; 0x5e
 8008398:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	225e      	movs	r2, #94	; 0x5e
 800839e:	5a9b      	ldrh	r3, [r3, r2]
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d000      	beq.n	80083a8 <UART_RxISR_16BIT+0x6c>
 80083a6:	e079      	b.n	800849c <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083a8:	f3ef 8310 	mrs	r3, PRIMASK
 80083ac:	617b      	str	r3, [r7, #20]
  return(result);
 80083ae:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083b0:	637b      	str	r3, [r7, #52]	; 0x34
 80083b2:	2301      	movs	r3, #1
 80083b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	f383 8810 	msr	PRIMASK, r3
}
 80083bc:	46c0      	nop			; (mov r8, r8)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4936      	ldr	r1, [pc, #216]	; (80084a4 <UART_RxISR_16BIT+0x168>)
 80083ca:	400a      	ands	r2, r1
 80083cc:	601a      	str	r2, [r3, #0]
 80083ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	f383 8810 	msr	PRIMASK, r3
}
 80083d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083da:	f3ef 8310 	mrs	r3, PRIMASK
 80083de:	623b      	str	r3, [r7, #32]
  return(result);
 80083e0:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083e2:	633b      	str	r3, [r7, #48]	; 0x30
 80083e4:	2301      	movs	r3, #1
 80083e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ea:	f383 8810 	msr	PRIMASK, r3
}
 80083ee:	46c0      	nop			; (mov r8, r8)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	689a      	ldr	r2, [r3, #8]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2101      	movs	r1, #1
 80083fc:	438a      	bics	r2, r1
 80083fe:	609a      	str	r2, [r3, #8]
 8008400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008402:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008406:	f383 8810 	msr	PRIMASK, r3
}
 800840a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2288      	movs	r2, #136	; 0x88
 8008410:	2120      	movs	r1, #32
 8008412:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800841e:	2b01      	cmp	r3, #1
 8008420:	d12f      	bne.n	8008482 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008428:	f3ef 8310 	mrs	r3, PRIMASK
 800842c:	60bb      	str	r3, [r7, #8]
  return(result);
 800842e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008430:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008432:	2301      	movs	r3, #1
 8008434:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f383 8810 	msr	PRIMASK, r3
}
 800843c:	46c0      	nop			; (mov r8, r8)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2110      	movs	r1, #16
 800844a:	438a      	bics	r2, r1
 800844c:	601a      	str	r2, [r3, #0]
 800844e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008450:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	f383 8810 	msr	PRIMASK, r3
}
 8008458:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	69db      	ldr	r3, [r3, #28]
 8008460:	2210      	movs	r2, #16
 8008462:	4013      	ands	r3, r2
 8008464:	2b10      	cmp	r3, #16
 8008466:	d103      	bne.n	8008470 <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2210      	movs	r2, #16
 800846e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	225c      	movs	r2, #92	; 0x5c
 8008474:	5a9a      	ldrh	r2, [r3, r2]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	0011      	movs	r1, r2
 800847a:	0018      	movs	r0, r3
 800847c:	f7ff f842 	bl	8007504 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008480:	e00c      	b.n	800849c <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	0018      	movs	r0, r3
 8008486:	f7f9 fbdf 	bl	8001c48 <HAL_UART_RxCpltCallback>
}
 800848a:	e007      	b.n	800849c <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	699a      	ldr	r2, [r3, #24]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2108      	movs	r1, #8
 8008498:	430a      	orrs	r2, r1
 800849a:	619a      	str	r2, [r3, #24]
}
 800849c:	46c0      	nop			; (mov r8, r8)
 800849e:	46bd      	mov	sp, r7
 80084a0:	b010      	add	sp, #64	; 0x40
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	fffffedf 	.word	0xfffffedf

080084a8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b09c      	sub	sp, #112	; 0x70
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80084b0:	236a      	movs	r3, #106	; 0x6a
 80084b2:	18fb      	adds	r3, r7, r3
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	2160      	movs	r1, #96	; 0x60
 80084b8:	5a52      	ldrh	r2, [r2, r1]
 80084ba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	69db      	ldr	r3, [r3, #28]
 80084c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2288      	movs	r2, #136	; 0x88
 80084d8:	589b      	ldr	r3, [r3, r2]
 80084da:	2b22      	cmp	r3, #34	; 0x22
 80084dc:	d000      	beq.n	80084e0 <UART_RxISR_8BIT_FIFOEN+0x38>
 80084de:	e141      	b.n	8008764 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80084e0:	235e      	movs	r3, #94	; 0x5e
 80084e2:	18fb      	adds	r3, r7, r3
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	2168      	movs	r1, #104	; 0x68
 80084e8:	5a52      	ldrh	r2, [r2, r1]
 80084ea:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80084ec:	e0e8      	b.n	80086c0 <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084f4:	215c      	movs	r1, #92	; 0x5c
 80084f6:	187b      	adds	r3, r7, r1
 80084f8:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80084fa:	187b      	adds	r3, r7, r1
 80084fc:	881b      	ldrh	r3, [r3, #0]
 80084fe:	b2da      	uxtb	r2, r3
 8008500:	236a      	movs	r3, #106	; 0x6a
 8008502:	18fb      	adds	r3, r7, r3
 8008504:	881b      	ldrh	r3, [r3, #0]
 8008506:	b2d9      	uxtb	r1, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800850c:	400a      	ands	r2, r1
 800850e:	b2d2      	uxtb	r2, r2
 8008510:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008516:	1c5a      	adds	r2, r3, #1
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	225e      	movs	r2, #94	; 0x5e
 8008520:	5a9b      	ldrh	r3, [r3, r2]
 8008522:	b29b      	uxth	r3, r3
 8008524:	3b01      	subs	r3, #1
 8008526:	b299      	uxth	r1, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	225e      	movs	r2, #94	; 0x5e
 800852c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	69db      	ldr	r3, [r3, #28]
 8008534:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008538:	2207      	movs	r2, #7
 800853a:	4013      	ands	r3, r2
 800853c:	d049      	beq.n	80085d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800853e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008540:	2201      	movs	r2, #1
 8008542:	4013      	ands	r3, r2
 8008544:	d010      	beq.n	8008568 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8008546:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008548:	2380      	movs	r3, #128	; 0x80
 800854a:	005b      	lsls	r3, r3, #1
 800854c:	4013      	ands	r3, r2
 800854e:	d00b      	beq.n	8008568 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2201      	movs	r2, #1
 8008556:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	228c      	movs	r2, #140	; 0x8c
 800855c:	589b      	ldr	r3, [r3, r2]
 800855e:	2201      	movs	r2, #1
 8008560:	431a      	orrs	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	218c      	movs	r1, #140	; 0x8c
 8008566:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800856a:	2202      	movs	r2, #2
 800856c:	4013      	ands	r3, r2
 800856e:	d00f      	beq.n	8008590 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8008570:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008572:	2201      	movs	r2, #1
 8008574:	4013      	ands	r3, r2
 8008576:	d00b      	beq.n	8008590 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2202      	movs	r2, #2
 800857e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	228c      	movs	r2, #140	; 0x8c
 8008584:	589b      	ldr	r3, [r3, r2]
 8008586:	2204      	movs	r2, #4
 8008588:	431a      	orrs	r2, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	218c      	movs	r1, #140	; 0x8c
 800858e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008592:	2204      	movs	r2, #4
 8008594:	4013      	ands	r3, r2
 8008596:	d00f      	beq.n	80085b8 <UART_RxISR_8BIT_FIFOEN+0x110>
 8008598:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800859a:	2201      	movs	r2, #1
 800859c:	4013      	ands	r3, r2
 800859e:	d00b      	beq.n	80085b8 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2204      	movs	r2, #4
 80085a6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	228c      	movs	r2, #140	; 0x8c
 80085ac:	589b      	ldr	r3, [r3, r2]
 80085ae:	2202      	movs	r2, #2
 80085b0:	431a      	orrs	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	218c      	movs	r1, #140	; 0x8c
 80085b6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	228c      	movs	r2, #140	; 0x8c
 80085bc:	589b      	ldr	r3, [r3, r2]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d007      	beq.n	80085d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	0018      	movs	r0, r3
 80085c6:	f7fe ff95 	bl	80074f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	228c      	movs	r2, #140	; 0x8c
 80085ce:	2100      	movs	r1, #0
 80085d0:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	225e      	movs	r2, #94	; 0x5e
 80085d6:	5a9b      	ldrh	r3, [r3, r2]
 80085d8:	b29b      	uxth	r3, r3
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d170      	bne.n	80086c0 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085de:	f3ef 8310 	mrs	r3, PRIMASK
 80085e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80085e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80085e8:	2301      	movs	r3, #1
 80085ea:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ee:	f383 8810 	msr	PRIMASK, r3
}
 80085f2:	46c0      	nop			; (mov r8, r8)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	495f      	ldr	r1, [pc, #380]	; (800877c <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 8008600:	400a      	ands	r2, r1
 8008602:	601a      	str	r2, [r3, #0]
 8008604:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008606:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800860a:	f383 8810 	msr	PRIMASK, r3
}
 800860e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008610:	f3ef 8310 	mrs	r3, PRIMASK
 8008614:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8008616:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008618:	657b      	str	r3, [r7, #84]	; 0x54
 800861a:	2301      	movs	r3, #1
 800861c:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800861e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008620:	f383 8810 	msr	PRIMASK, r3
}
 8008624:	46c0      	nop			; (mov r8, r8)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	689a      	ldr	r2, [r3, #8]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4953      	ldr	r1, [pc, #332]	; (8008780 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 8008632:	400a      	ands	r2, r1
 8008634:	609a      	str	r2, [r3, #8]
 8008636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008638:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800863a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800863c:	f383 8810 	msr	PRIMASK, r3
}
 8008640:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2288      	movs	r2, #136	; 0x88
 8008646:	2120      	movs	r1, #32
 8008648:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008654:	2b01      	cmp	r3, #1
 8008656:	d12f      	bne.n	80086b8 <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800865e:	f3ef 8310 	mrs	r3, PRIMASK
 8008662:	623b      	str	r3, [r7, #32]
  return(result);
 8008664:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008666:	653b      	str	r3, [r7, #80]	; 0x50
 8008668:	2301      	movs	r3, #1
 800866a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	f383 8810 	msr	PRIMASK, r3
}
 8008672:	46c0      	nop			; (mov r8, r8)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2110      	movs	r1, #16
 8008680:	438a      	bics	r2, r1
 8008682:	601a      	str	r2, [r3, #0]
 8008684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008686:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868a:	f383 8810 	msr	PRIMASK, r3
}
 800868e:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	69db      	ldr	r3, [r3, #28]
 8008696:	2210      	movs	r2, #16
 8008698:	4013      	ands	r3, r2
 800869a:	2b10      	cmp	r3, #16
 800869c:	d103      	bne.n	80086a6 <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2210      	movs	r2, #16
 80086a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	225c      	movs	r2, #92	; 0x5c
 80086aa:	5a9a      	ldrh	r2, [r3, r2]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	0011      	movs	r1, r2
 80086b0:	0018      	movs	r0, r3
 80086b2:	f7fe ff27 	bl	8007504 <HAL_UARTEx_RxEventCallback>
 80086b6:	e003      	b.n	80086c0 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	0018      	movs	r0, r3
 80086bc:	f7f9 fac4 	bl	8001c48 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80086c0:	235e      	movs	r3, #94	; 0x5e
 80086c2:	18fb      	adds	r3, r7, r3
 80086c4:	881b      	ldrh	r3, [r3, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d004      	beq.n	80086d4 <UART_RxISR_8BIT_FIFOEN+0x22c>
 80086ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086cc:	2220      	movs	r2, #32
 80086ce:	4013      	ands	r3, r2
 80086d0:	d000      	beq.n	80086d4 <UART_RxISR_8BIT_FIFOEN+0x22c>
 80086d2:	e70c      	b.n	80084ee <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80086d4:	204e      	movs	r0, #78	; 0x4e
 80086d6:	183b      	adds	r3, r7, r0
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	215e      	movs	r1, #94	; 0x5e
 80086dc:	5a52      	ldrh	r2, [r2, r1]
 80086de:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80086e0:	0001      	movs	r1, r0
 80086e2:	187b      	adds	r3, r7, r1
 80086e4:	881b      	ldrh	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d044      	beq.n	8008774 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2268      	movs	r2, #104	; 0x68
 80086ee:	5a9b      	ldrh	r3, [r3, r2]
 80086f0:	187a      	adds	r2, r7, r1
 80086f2:	8812      	ldrh	r2, [r2, #0]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d23d      	bcs.n	8008774 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086f8:	f3ef 8310 	mrs	r3, PRIMASK
 80086fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80086fe:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008700:	64bb      	str	r3, [r7, #72]	; 0x48
 8008702:	2301      	movs	r3, #1
 8008704:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f383 8810 	msr	PRIMASK, r3
}
 800870c:	46c0      	nop			; (mov r8, r8)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	689a      	ldr	r2, [r3, #8]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	491a      	ldr	r1, [pc, #104]	; (8008784 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 800871a:	400a      	ands	r2, r1
 800871c:	609a      	str	r2, [r3, #8]
 800871e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008720:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	f383 8810 	msr	PRIMASK, r3
}
 8008728:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a16      	ldr	r2, [pc, #88]	; (8008788 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800872e:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008730:	f3ef 8310 	mrs	r3, PRIMASK
 8008734:	617b      	str	r3, [r7, #20]
  return(result);
 8008736:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008738:	647b      	str	r3, [r7, #68]	; 0x44
 800873a:	2301      	movs	r3, #1
 800873c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	f383 8810 	msr	PRIMASK, r3
}
 8008744:	46c0      	nop			; (mov r8, r8)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2120      	movs	r1, #32
 8008752:	430a      	orrs	r2, r1
 8008754:	601a      	str	r2, [r3, #0]
 8008756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008758:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	f383 8810 	msr	PRIMASK, r3
}
 8008760:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008762:	e007      	b.n	8008774 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	699a      	ldr	r2, [r3, #24]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2108      	movs	r1, #8
 8008770:	430a      	orrs	r2, r1
 8008772:	619a      	str	r2, [r3, #24]
}
 8008774:	46c0      	nop			; (mov r8, r8)
 8008776:	46bd      	mov	sp, r7
 8008778:	b01c      	add	sp, #112	; 0x70
 800877a:	bd80      	pop	{r7, pc}
 800877c:	fffffeff 	.word	0xfffffeff
 8008780:	effffffe 	.word	0xeffffffe
 8008784:	efffffff 	.word	0xefffffff
 8008788:	080081d1 	.word	0x080081d1

0800878c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b09e      	sub	sp, #120	; 0x78
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008794:	2372      	movs	r3, #114	; 0x72
 8008796:	18fb      	adds	r3, r7, r3
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	2160      	movs	r1, #96	; 0x60
 800879c:	5a52      	ldrh	r2, [r2, r1]
 800879e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	69db      	ldr	r3, [r3, #28]
 80087a6:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2288      	movs	r2, #136	; 0x88
 80087bc:	589b      	ldr	r3, [r3, r2]
 80087be:	2b22      	cmp	r3, #34	; 0x22
 80087c0:	d000      	beq.n	80087c4 <UART_RxISR_16BIT_FIFOEN+0x38>
 80087c2:	e141      	b.n	8008a48 <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80087c4:	2366      	movs	r3, #102	; 0x66
 80087c6:	18fb      	adds	r3, r7, r3
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	2168      	movs	r1, #104	; 0x68
 80087cc:	5a52      	ldrh	r2, [r2, r1]
 80087ce:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80087d0:	e0e8      	b.n	80089a4 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087d8:	2164      	movs	r1, #100	; 0x64
 80087da:	187b      	adds	r3, r7, r1
 80087dc:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087e2:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 80087e4:	187b      	adds	r3, r7, r1
 80087e6:	2272      	movs	r2, #114	; 0x72
 80087e8:	18ba      	adds	r2, r7, r2
 80087ea:	881b      	ldrh	r3, [r3, #0]
 80087ec:	8812      	ldrh	r2, [r2, #0]
 80087ee:	4013      	ands	r3, r2
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087fa:	1c9a      	adds	r2, r3, #2
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	225e      	movs	r2, #94	; 0x5e
 8008804:	5a9b      	ldrh	r3, [r3, r2]
 8008806:	b29b      	uxth	r3, r3
 8008808:	3b01      	subs	r3, #1
 800880a:	b299      	uxth	r1, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	225e      	movs	r2, #94	; 0x5e
 8008810:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	69db      	ldr	r3, [r3, #28]
 8008818:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800881a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800881c:	2207      	movs	r2, #7
 800881e:	4013      	ands	r3, r2
 8008820:	d049      	beq.n	80088b6 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008824:	2201      	movs	r2, #1
 8008826:	4013      	ands	r3, r2
 8008828:	d010      	beq.n	800884c <UART_RxISR_16BIT_FIFOEN+0xc0>
 800882a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800882c:	2380      	movs	r3, #128	; 0x80
 800882e:	005b      	lsls	r3, r3, #1
 8008830:	4013      	ands	r3, r2
 8008832:	d00b      	beq.n	800884c <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2201      	movs	r2, #1
 800883a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	228c      	movs	r2, #140	; 0x8c
 8008840:	589b      	ldr	r3, [r3, r2]
 8008842:	2201      	movs	r2, #1
 8008844:	431a      	orrs	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	218c      	movs	r1, #140	; 0x8c
 800884a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800884c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800884e:	2202      	movs	r2, #2
 8008850:	4013      	ands	r3, r2
 8008852:	d00f      	beq.n	8008874 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8008854:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008856:	2201      	movs	r2, #1
 8008858:	4013      	ands	r3, r2
 800885a:	d00b      	beq.n	8008874 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2202      	movs	r2, #2
 8008862:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	228c      	movs	r2, #140	; 0x8c
 8008868:	589b      	ldr	r3, [r3, r2]
 800886a:	2204      	movs	r2, #4
 800886c:	431a      	orrs	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	218c      	movs	r1, #140	; 0x8c
 8008872:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008874:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008876:	2204      	movs	r2, #4
 8008878:	4013      	ands	r3, r2
 800887a:	d00f      	beq.n	800889c <UART_RxISR_16BIT_FIFOEN+0x110>
 800887c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800887e:	2201      	movs	r2, #1
 8008880:	4013      	ands	r3, r2
 8008882:	d00b      	beq.n	800889c <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2204      	movs	r2, #4
 800888a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	228c      	movs	r2, #140	; 0x8c
 8008890:	589b      	ldr	r3, [r3, r2]
 8008892:	2202      	movs	r2, #2
 8008894:	431a      	orrs	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	218c      	movs	r1, #140	; 0x8c
 800889a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	228c      	movs	r2, #140	; 0x8c
 80088a0:	589b      	ldr	r3, [r3, r2]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d007      	beq.n	80088b6 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	0018      	movs	r0, r3
 80088aa:	f7fe fe23 	bl	80074f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	228c      	movs	r2, #140	; 0x8c
 80088b2:	2100      	movs	r1, #0
 80088b4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	225e      	movs	r2, #94	; 0x5e
 80088ba:	5a9b      	ldrh	r3, [r3, r2]
 80088bc:	b29b      	uxth	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d170      	bne.n	80089a4 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088c2:	f3ef 8310 	mrs	r3, PRIMASK
 80088c6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80088c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088cc:	2301      	movs	r3, #1
 80088ce:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d2:	f383 8810 	msr	PRIMASK, r3
}
 80088d6:	46c0      	nop			; (mov r8, r8)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	495f      	ldr	r1, [pc, #380]	; (8008a60 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 80088e4:	400a      	ands	r2, r1
 80088e6:	601a      	str	r2, [r3, #0]
 80088e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088ea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ee:	f383 8810 	msr	PRIMASK, r3
}
 80088f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088f4:	f3ef 8310 	mrs	r3, PRIMASK
 80088f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80088fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80088fe:	2301      	movs	r3, #1
 8008900:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008904:	f383 8810 	msr	PRIMASK, r3
}
 8008908:	46c0      	nop			; (mov r8, r8)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	689a      	ldr	r2, [r3, #8]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4953      	ldr	r1, [pc, #332]	; (8008a64 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 8008916:	400a      	ands	r2, r1
 8008918:	609a      	str	r2, [r3, #8]
 800891a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800891c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800891e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008920:	f383 8810 	msr	PRIMASK, r3
}
 8008924:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2288      	movs	r2, #136	; 0x88
 800892a:	2120      	movs	r1, #32
 800892c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008938:	2b01      	cmp	r3, #1
 800893a:	d12f      	bne.n	800899c <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008942:	f3ef 8310 	mrs	r3, PRIMASK
 8008946:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008948:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800894a:	657b      	str	r3, [r7, #84]	; 0x54
 800894c:	2301      	movs	r3, #1
 800894e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008952:	f383 8810 	msr	PRIMASK, r3
}
 8008956:	46c0      	nop			; (mov r8, r8)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2110      	movs	r1, #16
 8008964:	438a      	bics	r2, r1
 8008966:	601a      	str	r2, [r3, #0]
 8008968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800896a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800896c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896e:	f383 8810 	msr	PRIMASK, r3
}
 8008972:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	69db      	ldr	r3, [r3, #28]
 800897a:	2210      	movs	r2, #16
 800897c:	4013      	ands	r3, r2
 800897e:	2b10      	cmp	r3, #16
 8008980:	d103      	bne.n	800898a <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2210      	movs	r2, #16
 8008988:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	225c      	movs	r2, #92	; 0x5c
 800898e:	5a9a      	ldrh	r2, [r3, r2]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	0011      	movs	r1, r2
 8008994:	0018      	movs	r0, r3
 8008996:	f7fe fdb5 	bl	8007504 <HAL_UARTEx_RxEventCallback>
 800899a:	e003      	b.n	80089a4 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	0018      	movs	r0, r3
 80089a0:	f7f9 f952 	bl	8001c48 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80089a4:	2366      	movs	r3, #102	; 0x66
 80089a6:	18fb      	adds	r3, r7, r3
 80089a8:	881b      	ldrh	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d004      	beq.n	80089b8 <UART_RxISR_16BIT_FIFOEN+0x22c>
 80089ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089b0:	2220      	movs	r2, #32
 80089b2:	4013      	ands	r3, r2
 80089b4:	d000      	beq.n	80089b8 <UART_RxISR_16BIT_FIFOEN+0x22c>
 80089b6:	e70c      	b.n	80087d2 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80089b8:	2052      	movs	r0, #82	; 0x52
 80089ba:	183b      	adds	r3, r7, r0
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	215e      	movs	r1, #94	; 0x5e
 80089c0:	5a52      	ldrh	r2, [r2, r1]
 80089c2:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80089c4:	0001      	movs	r1, r0
 80089c6:	187b      	adds	r3, r7, r1
 80089c8:	881b      	ldrh	r3, [r3, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d044      	beq.n	8008a58 <UART_RxISR_16BIT_FIFOEN+0x2cc>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2268      	movs	r2, #104	; 0x68
 80089d2:	5a9b      	ldrh	r3, [r3, r2]
 80089d4:	187a      	adds	r2, r7, r1
 80089d6:	8812      	ldrh	r2, [r2, #0]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d23d      	bcs.n	8008a58 <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089dc:	f3ef 8310 	mrs	r3, PRIMASK
 80089e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80089e2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80089e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089e6:	2301      	movs	r3, #1
 80089e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	f383 8810 	msr	PRIMASK, r3
}
 80089f0:	46c0      	nop			; (mov r8, r8)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	689a      	ldr	r2, [r3, #8]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	491a      	ldr	r1, [pc, #104]	; (8008a68 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 80089fe:	400a      	ands	r2, r1
 8008a00:	609a      	str	r2, [r3, #8]
 8008a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	f383 8810 	msr	PRIMASK, r3
}
 8008a0c:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a16      	ldr	r2, [pc, #88]	; (8008a6c <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8008a12:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a14:	f3ef 8310 	mrs	r3, PRIMASK
 8008a18:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a1a:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a1e:	2301      	movs	r3, #1
 8008a20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	f383 8810 	msr	PRIMASK, r3
}
 8008a28:	46c0      	nop			; (mov r8, r8)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2120      	movs	r1, #32
 8008a36:	430a      	orrs	r2, r1
 8008a38:	601a      	str	r2, [r3, #0]
 8008a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a3c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a3e:	6a3b      	ldr	r3, [r7, #32]
 8008a40:	f383 8810 	msr	PRIMASK, r3
}
 8008a44:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a46:	e007      	b.n	8008a58 <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	699a      	ldr	r2, [r3, #24]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2108      	movs	r1, #8
 8008a54:	430a      	orrs	r2, r1
 8008a56:	619a      	str	r2, [r3, #24]
}
 8008a58:	46c0      	nop			; (mov r8, r8)
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	b01e      	add	sp, #120	; 0x78
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	fffffeff 	.word	0xfffffeff
 8008a64:	effffffe 	.word	0xeffffffe
 8008a68:	efffffff 	.word	0xefffffff
 8008a6c:	0800833d 	.word	0x0800833d

08008a70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008a78:	46c0      	nop			; (mov r8, r8)
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	b002      	add	sp, #8
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008a88:	46c0      	nop			; (mov r8, r8)
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	b002      	add	sp, #8
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008a98:	46c0      	nop			; (mov r8, r8)
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	b002      	add	sp, #8
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2280      	movs	r2, #128	; 0x80
 8008aac:	5c9b      	ldrb	r3, [r3, r2]
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d101      	bne.n	8008ab6 <HAL_UARTEx_DisableFifoMode+0x16>
 8008ab2:	2302      	movs	r3, #2
 8008ab4:	e027      	b.n	8008b06 <HAL_UARTEx_DisableFifoMode+0x66>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2280      	movs	r2, #128	; 0x80
 8008aba:	2101      	movs	r1, #1
 8008abc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2284      	movs	r2, #132	; 0x84
 8008ac2:	2124      	movs	r1, #36	; 0x24
 8008ac4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2101      	movs	r1, #1
 8008ada:	438a      	bics	r2, r1
 8008adc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	4a0b      	ldr	r2, [pc, #44]	; (8008b10 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2284      	movs	r2, #132	; 0x84
 8008af8:	2120      	movs	r1, #32
 8008afa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2280      	movs	r2, #128	; 0x80
 8008b00:	2100      	movs	r1, #0
 8008b02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	0018      	movs	r0, r3
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	b004      	add	sp, #16
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	46c0      	nop			; (mov r8, r8)
 8008b10:	dfffffff 	.word	0xdfffffff

08008b14 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2280      	movs	r2, #128	; 0x80
 8008b22:	5c9b      	ldrb	r3, [r3, r2]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d101      	bne.n	8008b2c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008b28:	2302      	movs	r3, #2
 8008b2a:	e02e      	b.n	8008b8a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2280      	movs	r2, #128	; 0x80
 8008b30:	2101      	movs	r1, #1
 8008b32:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2284      	movs	r2, #132	; 0x84
 8008b38:	2124      	movs	r1, #36	; 0x24
 8008b3a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2101      	movs	r1, #1
 8008b50:	438a      	bics	r2, r1
 8008b52:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	00db      	lsls	r3, r3, #3
 8008b5c:	08d9      	lsrs	r1, r3, #3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	683a      	ldr	r2, [r7, #0]
 8008b64:	430a      	orrs	r2, r1
 8008b66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	0018      	movs	r0, r3
 8008b6c:	f000 f854 	bl	8008c18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2284      	movs	r2, #132	; 0x84
 8008b7c:	2120      	movs	r1, #32
 8008b7e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2280      	movs	r2, #128	; 0x80
 8008b84:	2100      	movs	r1, #0
 8008b86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	0018      	movs	r0, r3
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	b004      	add	sp, #16
 8008b90:	bd80      	pop	{r7, pc}
	...

08008b94 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2280      	movs	r2, #128	; 0x80
 8008ba2:	5c9b      	ldrb	r3, [r3, r2]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d101      	bne.n	8008bac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ba8:	2302      	movs	r3, #2
 8008baa:	e02f      	b.n	8008c0c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2280      	movs	r2, #128	; 0x80
 8008bb0:	2101      	movs	r1, #1
 8008bb2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2284      	movs	r2, #132	; 0x84
 8008bb8:	2124      	movs	r1, #36	; 0x24
 8008bba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2101      	movs	r1, #1
 8008bd0:	438a      	bics	r2, r1
 8008bd2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	4a0e      	ldr	r2, [pc, #56]	; (8008c14 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008bdc:	4013      	ands	r3, r2
 8008bde:	0019      	movs	r1, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	683a      	ldr	r2, [r7, #0]
 8008be6:	430a      	orrs	r2, r1
 8008be8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	0018      	movs	r0, r3
 8008bee:	f000 f813 	bl	8008c18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2284      	movs	r2, #132	; 0x84
 8008bfe:	2120      	movs	r1, #32
 8008c00:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2280      	movs	r2, #128	; 0x80
 8008c06:	2100      	movs	r1, #0
 8008c08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	0018      	movs	r0, r3
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	b004      	add	sp, #16
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	f1ffffff 	.word	0xf1ffffff

08008c18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d108      	bne.n	8008c3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	226a      	movs	r2, #106	; 0x6a
 8008c2c:	2101      	movs	r1, #1
 8008c2e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2268      	movs	r2, #104	; 0x68
 8008c34:	2101      	movs	r1, #1
 8008c36:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008c38:	e043      	b.n	8008cc2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008c3a:	260f      	movs	r6, #15
 8008c3c:	19bb      	adds	r3, r7, r6
 8008c3e:	2208      	movs	r2, #8
 8008c40:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008c42:	200e      	movs	r0, #14
 8008c44:	183b      	adds	r3, r7, r0
 8008c46:	2208      	movs	r2, #8
 8008c48:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	0e5b      	lsrs	r3, r3, #25
 8008c52:	b2da      	uxtb	r2, r3
 8008c54:	240d      	movs	r4, #13
 8008c56:	193b      	adds	r3, r7, r4
 8008c58:	2107      	movs	r1, #7
 8008c5a:	400a      	ands	r2, r1
 8008c5c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	0f5b      	lsrs	r3, r3, #29
 8008c66:	b2da      	uxtb	r2, r3
 8008c68:	250c      	movs	r5, #12
 8008c6a:	197b      	adds	r3, r7, r5
 8008c6c:	2107      	movs	r1, #7
 8008c6e:	400a      	ands	r2, r1
 8008c70:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c72:	183b      	adds	r3, r7, r0
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	197a      	adds	r2, r7, r5
 8008c78:	7812      	ldrb	r2, [r2, #0]
 8008c7a:	4914      	ldr	r1, [pc, #80]	; (8008ccc <UARTEx_SetNbDataToProcess+0xb4>)
 8008c7c:	5c8a      	ldrb	r2, [r1, r2]
 8008c7e:	435a      	muls	r2, r3
 8008c80:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008c82:	197b      	adds	r3, r7, r5
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	4a12      	ldr	r2, [pc, #72]	; (8008cd0 <UARTEx_SetNbDataToProcess+0xb8>)
 8008c88:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c8a:	0019      	movs	r1, r3
 8008c8c:	f7f7 face 	bl	800022c <__divsi3>
 8008c90:	0003      	movs	r3, r0
 8008c92:	b299      	uxth	r1, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	226a      	movs	r2, #106	; 0x6a
 8008c98:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c9a:	19bb      	adds	r3, r7, r6
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	193a      	adds	r2, r7, r4
 8008ca0:	7812      	ldrb	r2, [r2, #0]
 8008ca2:	490a      	ldr	r1, [pc, #40]	; (8008ccc <UARTEx_SetNbDataToProcess+0xb4>)
 8008ca4:	5c8a      	ldrb	r2, [r1, r2]
 8008ca6:	435a      	muls	r2, r3
 8008ca8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008caa:	193b      	adds	r3, r7, r4
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	4a08      	ldr	r2, [pc, #32]	; (8008cd0 <UARTEx_SetNbDataToProcess+0xb8>)
 8008cb0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008cb2:	0019      	movs	r1, r3
 8008cb4:	f7f7 faba 	bl	800022c <__divsi3>
 8008cb8:	0003      	movs	r3, r0
 8008cba:	b299      	uxth	r1, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2268      	movs	r2, #104	; 0x68
 8008cc0:	5299      	strh	r1, [r3, r2]
}
 8008cc2:	46c0      	nop			; (mov r8, r8)
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	b005      	add	sp, #20
 8008cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cca:	46c0      	nop			; (mov r8, r8)
 8008ccc:	08009c38 	.word	0x08009c38
 8008cd0:	08009c40 	.word	0x08009c40

08008cd4 <__errno>:
 8008cd4:	4b01      	ldr	r3, [pc, #4]	; (8008cdc <__errno+0x8>)
 8008cd6:	6818      	ldr	r0, [r3, #0]
 8008cd8:	4770      	bx	lr
 8008cda:	46c0      	nop			; (mov r8, r8)
 8008cdc:	2000000c 	.word	0x2000000c

08008ce0 <__libc_init_array>:
 8008ce0:	b570      	push	{r4, r5, r6, lr}
 8008ce2:	2600      	movs	r6, #0
 8008ce4:	4d0c      	ldr	r5, [pc, #48]	; (8008d18 <__libc_init_array+0x38>)
 8008ce6:	4c0d      	ldr	r4, [pc, #52]	; (8008d1c <__libc_init_array+0x3c>)
 8008ce8:	1b64      	subs	r4, r4, r5
 8008cea:	10a4      	asrs	r4, r4, #2
 8008cec:	42a6      	cmp	r6, r4
 8008cee:	d109      	bne.n	8008d04 <__libc_init_array+0x24>
 8008cf0:	2600      	movs	r6, #0
 8008cf2:	f000 fc47 	bl	8009584 <_init>
 8008cf6:	4d0a      	ldr	r5, [pc, #40]	; (8008d20 <__libc_init_array+0x40>)
 8008cf8:	4c0a      	ldr	r4, [pc, #40]	; (8008d24 <__libc_init_array+0x44>)
 8008cfa:	1b64      	subs	r4, r4, r5
 8008cfc:	10a4      	asrs	r4, r4, #2
 8008cfe:	42a6      	cmp	r6, r4
 8008d00:	d105      	bne.n	8008d0e <__libc_init_array+0x2e>
 8008d02:	bd70      	pop	{r4, r5, r6, pc}
 8008d04:	00b3      	lsls	r3, r6, #2
 8008d06:	58eb      	ldr	r3, [r5, r3]
 8008d08:	4798      	blx	r3
 8008d0a:	3601      	adds	r6, #1
 8008d0c:	e7ee      	b.n	8008cec <__libc_init_array+0xc>
 8008d0e:	00b3      	lsls	r3, r6, #2
 8008d10:	58eb      	ldr	r3, [r5, r3]
 8008d12:	4798      	blx	r3
 8008d14:	3601      	adds	r6, #1
 8008d16:	e7f2      	b.n	8008cfe <__libc_init_array+0x1e>
 8008d18:	08009c84 	.word	0x08009c84
 8008d1c:	08009c84 	.word	0x08009c84
 8008d20:	08009c84 	.word	0x08009c84
 8008d24:	08009c98 	.word	0x08009c98

08008d28 <memcpy>:
 8008d28:	2300      	movs	r3, #0
 8008d2a:	b510      	push	{r4, lr}
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d100      	bne.n	8008d32 <memcpy+0xa>
 8008d30:	bd10      	pop	{r4, pc}
 8008d32:	5ccc      	ldrb	r4, [r1, r3]
 8008d34:	54c4      	strb	r4, [r0, r3]
 8008d36:	3301      	adds	r3, #1
 8008d38:	e7f8      	b.n	8008d2c <memcpy+0x4>

08008d3a <memset>:
 8008d3a:	0003      	movs	r3, r0
 8008d3c:	1882      	adds	r2, r0, r2
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d100      	bne.n	8008d44 <memset+0xa>
 8008d42:	4770      	bx	lr
 8008d44:	7019      	strb	r1, [r3, #0]
 8008d46:	3301      	adds	r3, #1
 8008d48:	e7f9      	b.n	8008d3e <memset+0x4>
	...

08008d4c <siprintf>:
 8008d4c:	b40e      	push	{r1, r2, r3}
 8008d4e:	b500      	push	{lr}
 8008d50:	490b      	ldr	r1, [pc, #44]	; (8008d80 <siprintf+0x34>)
 8008d52:	b09c      	sub	sp, #112	; 0x70
 8008d54:	ab1d      	add	r3, sp, #116	; 0x74
 8008d56:	9002      	str	r0, [sp, #8]
 8008d58:	9006      	str	r0, [sp, #24]
 8008d5a:	9107      	str	r1, [sp, #28]
 8008d5c:	9104      	str	r1, [sp, #16]
 8008d5e:	4809      	ldr	r0, [pc, #36]	; (8008d84 <siprintf+0x38>)
 8008d60:	4909      	ldr	r1, [pc, #36]	; (8008d88 <siprintf+0x3c>)
 8008d62:	cb04      	ldmia	r3!, {r2}
 8008d64:	9105      	str	r1, [sp, #20]
 8008d66:	6800      	ldr	r0, [r0, #0]
 8008d68:	a902      	add	r1, sp, #8
 8008d6a:	9301      	str	r3, [sp, #4]
 8008d6c:	f000 f870 	bl	8008e50 <_svfiprintf_r>
 8008d70:	2300      	movs	r3, #0
 8008d72:	9a02      	ldr	r2, [sp, #8]
 8008d74:	7013      	strb	r3, [r2, #0]
 8008d76:	b01c      	add	sp, #112	; 0x70
 8008d78:	bc08      	pop	{r3}
 8008d7a:	b003      	add	sp, #12
 8008d7c:	4718      	bx	r3
 8008d7e:	46c0      	nop			; (mov r8, r8)
 8008d80:	7fffffff 	.word	0x7fffffff
 8008d84:	2000000c 	.word	0x2000000c
 8008d88:	ffff0208 	.word	0xffff0208

08008d8c <__ssputs_r>:
 8008d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d8e:	688e      	ldr	r6, [r1, #8]
 8008d90:	b085      	sub	sp, #20
 8008d92:	0007      	movs	r7, r0
 8008d94:	000c      	movs	r4, r1
 8008d96:	9203      	str	r2, [sp, #12]
 8008d98:	9301      	str	r3, [sp, #4]
 8008d9a:	429e      	cmp	r6, r3
 8008d9c:	d83c      	bhi.n	8008e18 <__ssputs_r+0x8c>
 8008d9e:	2390      	movs	r3, #144	; 0x90
 8008da0:	898a      	ldrh	r2, [r1, #12]
 8008da2:	00db      	lsls	r3, r3, #3
 8008da4:	421a      	tst	r2, r3
 8008da6:	d034      	beq.n	8008e12 <__ssputs_r+0x86>
 8008da8:	2503      	movs	r5, #3
 8008daa:	6909      	ldr	r1, [r1, #16]
 8008dac:	6823      	ldr	r3, [r4, #0]
 8008dae:	1a5b      	subs	r3, r3, r1
 8008db0:	9302      	str	r3, [sp, #8]
 8008db2:	6963      	ldr	r3, [r4, #20]
 8008db4:	9802      	ldr	r0, [sp, #8]
 8008db6:	435d      	muls	r5, r3
 8008db8:	0feb      	lsrs	r3, r5, #31
 8008dba:	195d      	adds	r5, r3, r5
 8008dbc:	9b01      	ldr	r3, [sp, #4]
 8008dbe:	106d      	asrs	r5, r5, #1
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	181b      	adds	r3, r3, r0
 8008dc4:	42ab      	cmp	r3, r5
 8008dc6:	d900      	bls.n	8008dca <__ssputs_r+0x3e>
 8008dc8:	001d      	movs	r5, r3
 8008dca:	0553      	lsls	r3, r2, #21
 8008dcc:	d532      	bpl.n	8008e34 <__ssputs_r+0xa8>
 8008dce:	0029      	movs	r1, r5
 8008dd0:	0038      	movs	r0, r7
 8008dd2:	f000 fb27 	bl	8009424 <_malloc_r>
 8008dd6:	1e06      	subs	r6, r0, #0
 8008dd8:	d109      	bne.n	8008dee <__ssputs_r+0x62>
 8008dda:	230c      	movs	r3, #12
 8008ddc:	603b      	str	r3, [r7, #0]
 8008dde:	2340      	movs	r3, #64	; 0x40
 8008de0:	2001      	movs	r0, #1
 8008de2:	89a2      	ldrh	r2, [r4, #12]
 8008de4:	4240      	negs	r0, r0
 8008de6:	4313      	orrs	r3, r2
 8008de8:	81a3      	strh	r3, [r4, #12]
 8008dea:	b005      	add	sp, #20
 8008dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dee:	9a02      	ldr	r2, [sp, #8]
 8008df0:	6921      	ldr	r1, [r4, #16]
 8008df2:	f7ff ff99 	bl	8008d28 <memcpy>
 8008df6:	89a3      	ldrh	r3, [r4, #12]
 8008df8:	4a14      	ldr	r2, [pc, #80]	; (8008e4c <__ssputs_r+0xc0>)
 8008dfa:	401a      	ands	r2, r3
 8008dfc:	2380      	movs	r3, #128	; 0x80
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	81a3      	strh	r3, [r4, #12]
 8008e02:	9b02      	ldr	r3, [sp, #8]
 8008e04:	6126      	str	r6, [r4, #16]
 8008e06:	18f6      	adds	r6, r6, r3
 8008e08:	6026      	str	r6, [r4, #0]
 8008e0a:	6165      	str	r5, [r4, #20]
 8008e0c:	9e01      	ldr	r6, [sp, #4]
 8008e0e:	1aed      	subs	r5, r5, r3
 8008e10:	60a5      	str	r5, [r4, #8]
 8008e12:	9b01      	ldr	r3, [sp, #4]
 8008e14:	429e      	cmp	r6, r3
 8008e16:	d900      	bls.n	8008e1a <__ssputs_r+0x8e>
 8008e18:	9e01      	ldr	r6, [sp, #4]
 8008e1a:	0032      	movs	r2, r6
 8008e1c:	9903      	ldr	r1, [sp, #12]
 8008e1e:	6820      	ldr	r0, [r4, #0]
 8008e20:	f000 faa3 	bl	800936a <memmove>
 8008e24:	68a3      	ldr	r3, [r4, #8]
 8008e26:	2000      	movs	r0, #0
 8008e28:	1b9b      	subs	r3, r3, r6
 8008e2a:	60a3      	str	r3, [r4, #8]
 8008e2c:	6823      	ldr	r3, [r4, #0]
 8008e2e:	199e      	adds	r6, r3, r6
 8008e30:	6026      	str	r6, [r4, #0]
 8008e32:	e7da      	b.n	8008dea <__ssputs_r+0x5e>
 8008e34:	002a      	movs	r2, r5
 8008e36:	0038      	movs	r0, r7
 8008e38:	f000 fb52 	bl	80094e0 <_realloc_r>
 8008e3c:	1e06      	subs	r6, r0, #0
 8008e3e:	d1e0      	bne.n	8008e02 <__ssputs_r+0x76>
 8008e40:	0038      	movs	r0, r7
 8008e42:	6921      	ldr	r1, [r4, #16]
 8008e44:	f000 faa4 	bl	8009390 <_free_r>
 8008e48:	e7c7      	b.n	8008dda <__ssputs_r+0x4e>
 8008e4a:	46c0      	nop			; (mov r8, r8)
 8008e4c:	fffffb7f 	.word	0xfffffb7f

08008e50 <_svfiprintf_r>:
 8008e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e52:	b0a1      	sub	sp, #132	; 0x84
 8008e54:	9003      	str	r0, [sp, #12]
 8008e56:	001d      	movs	r5, r3
 8008e58:	898b      	ldrh	r3, [r1, #12]
 8008e5a:	000f      	movs	r7, r1
 8008e5c:	0016      	movs	r6, r2
 8008e5e:	061b      	lsls	r3, r3, #24
 8008e60:	d511      	bpl.n	8008e86 <_svfiprintf_r+0x36>
 8008e62:	690b      	ldr	r3, [r1, #16]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d10e      	bne.n	8008e86 <_svfiprintf_r+0x36>
 8008e68:	2140      	movs	r1, #64	; 0x40
 8008e6a:	f000 fadb 	bl	8009424 <_malloc_r>
 8008e6e:	6038      	str	r0, [r7, #0]
 8008e70:	6138      	str	r0, [r7, #16]
 8008e72:	2800      	cmp	r0, #0
 8008e74:	d105      	bne.n	8008e82 <_svfiprintf_r+0x32>
 8008e76:	230c      	movs	r3, #12
 8008e78:	9a03      	ldr	r2, [sp, #12]
 8008e7a:	3801      	subs	r0, #1
 8008e7c:	6013      	str	r3, [r2, #0]
 8008e7e:	b021      	add	sp, #132	; 0x84
 8008e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e82:	2340      	movs	r3, #64	; 0x40
 8008e84:	617b      	str	r3, [r7, #20]
 8008e86:	2300      	movs	r3, #0
 8008e88:	ac08      	add	r4, sp, #32
 8008e8a:	6163      	str	r3, [r4, #20]
 8008e8c:	3320      	adds	r3, #32
 8008e8e:	7663      	strb	r3, [r4, #25]
 8008e90:	3310      	adds	r3, #16
 8008e92:	76a3      	strb	r3, [r4, #26]
 8008e94:	9507      	str	r5, [sp, #28]
 8008e96:	0035      	movs	r5, r6
 8008e98:	782b      	ldrb	r3, [r5, #0]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <_svfiprintf_r+0x52>
 8008e9e:	2b25      	cmp	r3, #37	; 0x25
 8008ea0:	d147      	bne.n	8008f32 <_svfiprintf_r+0xe2>
 8008ea2:	1bab      	subs	r3, r5, r6
 8008ea4:	9305      	str	r3, [sp, #20]
 8008ea6:	42b5      	cmp	r5, r6
 8008ea8:	d00c      	beq.n	8008ec4 <_svfiprintf_r+0x74>
 8008eaa:	0032      	movs	r2, r6
 8008eac:	0039      	movs	r1, r7
 8008eae:	9803      	ldr	r0, [sp, #12]
 8008eb0:	f7ff ff6c 	bl	8008d8c <__ssputs_r>
 8008eb4:	1c43      	adds	r3, r0, #1
 8008eb6:	d100      	bne.n	8008eba <_svfiprintf_r+0x6a>
 8008eb8:	e0ae      	b.n	8009018 <_svfiprintf_r+0x1c8>
 8008eba:	6962      	ldr	r2, [r4, #20]
 8008ebc:	9b05      	ldr	r3, [sp, #20]
 8008ebe:	4694      	mov	ip, r2
 8008ec0:	4463      	add	r3, ip
 8008ec2:	6163      	str	r3, [r4, #20]
 8008ec4:	782b      	ldrb	r3, [r5, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d100      	bne.n	8008ecc <_svfiprintf_r+0x7c>
 8008eca:	e0a5      	b.n	8009018 <_svfiprintf_r+0x1c8>
 8008ecc:	2201      	movs	r2, #1
 8008ece:	2300      	movs	r3, #0
 8008ed0:	4252      	negs	r2, r2
 8008ed2:	6062      	str	r2, [r4, #4]
 8008ed4:	a904      	add	r1, sp, #16
 8008ed6:	3254      	adds	r2, #84	; 0x54
 8008ed8:	1852      	adds	r2, r2, r1
 8008eda:	1c6e      	adds	r6, r5, #1
 8008edc:	6023      	str	r3, [r4, #0]
 8008ede:	60e3      	str	r3, [r4, #12]
 8008ee0:	60a3      	str	r3, [r4, #8]
 8008ee2:	7013      	strb	r3, [r2, #0]
 8008ee4:	65a3      	str	r3, [r4, #88]	; 0x58
 8008ee6:	2205      	movs	r2, #5
 8008ee8:	7831      	ldrb	r1, [r6, #0]
 8008eea:	4854      	ldr	r0, [pc, #336]	; (800903c <_svfiprintf_r+0x1ec>)
 8008eec:	f000 fa32 	bl	8009354 <memchr>
 8008ef0:	1c75      	adds	r5, r6, #1
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	d11f      	bne.n	8008f36 <_svfiprintf_r+0xe6>
 8008ef6:	6822      	ldr	r2, [r4, #0]
 8008ef8:	06d3      	lsls	r3, r2, #27
 8008efa:	d504      	bpl.n	8008f06 <_svfiprintf_r+0xb6>
 8008efc:	2353      	movs	r3, #83	; 0x53
 8008efe:	a904      	add	r1, sp, #16
 8008f00:	185b      	adds	r3, r3, r1
 8008f02:	2120      	movs	r1, #32
 8008f04:	7019      	strb	r1, [r3, #0]
 8008f06:	0713      	lsls	r3, r2, #28
 8008f08:	d504      	bpl.n	8008f14 <_svfiprintf_r+0xc4>
 8008f0a:	2353      	movs	r3, #83	; 0x53
 8008f0c:	a904      	add	r1, sp, #16
 8008f0e:	185b      	adds	r3, r3, r1
 8008f10:	212b      	movs	r1, #43	; 0x2b
 8008f12:	7019      	strb	r1, [r3, #0]
 8008f14:	7833      	ldrb	r3, [r6, #0]
 8008f16:	2b2a      	cmp	r3, #42	; 0x2a
 8008f18:	d016      	beq.n	8008f48 <_svfiprintf_r+0xf8>
 8008f1a:	0035      	movs	r5, r6
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	200a      	movs	r0, #10
 8008f20:	68e3      	ldr	r3, [r4, #12]
 8008f22:	782a      	ldrb	r2, [r5, #0]
 8008f24:	1c6e      	adds	r6, r5, #1
 8008f26:	3a30      	subs	r2, #48	; 0x30
 8008f28:	2a09      	cmp	r2, #9
 8008f2a:	d94e      	bls.n	8008fca <_svfiprintf_r+0x17a>
 8008f2c:	2900      	cmp	r1, #0
 8008f2e:	d111      	bne.n	8008f54 <_svfiprintf_r+0x104>
 8008f30:	e017      	b.n	8008f62 <_svfiprintf_r+0x112>
 8008f32:	3501      	adds	r5, #1
 8008f34:	e7b0      	b.n	8008e98 <_svfiprintf_r+0x48>
 8008f36:	4b41      	ldr	r3, [pc, #260]	; (800903c <_svfiprintf_r+0x1ec>)
 8008f38:	6822      	ldr	r2, [r4, #0]
 8008f3a:	1ac0      	subs	r0, r0, r3
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	4083      	lsls	r3, r0
 8008f40:	4313      	orrs	r3, r2
 8008f42:	002e      	movs	r6, r5
 8008f44:	6023      	str	r3, [r4, #0]
 8008f46:	e7ce      	b.n	8008ee6 <_svfiprintf_r+0x96>
 8008f48:	9b07      	ldr	r3, [sp, #28]
 8008f4a:	1d19      	adds	r1, r3, #4
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	9107      	str	r1, [sp, #28]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	db01      	blt.n	8008f58 <_svfiprintf_r+0x108>
 8008f54:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f56:	e004      	b.n	8008f62 <_svfiprintf_r+0x112>
 8008f58:	425b      	negs	r3, r3
 8008f5a:	60e3      	str	r3, [r4, #12]
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	6023      	str	r3, [r4, #0]
 8008f62:	782b      	ldrb	r3, [r5, #0]
 8008f64:	2b2e      	cmp	r3, #46	; 0x2e
 8008f66:	d10a      	bne.n	8008f7e <_svfiprintf_r+0x12e>
 8008f68:	786b      	ldrb	r3, [r5, #1]
 8008f6a:	2b2a      	cmp	r3, #42	; 0x2a
 8008f6c:	d135      	bne.n	8008fda <_svfiprintf_r+0x18a>
 8008f6e:	9b07      	ldr	r3, [sp, #28]
 8008f70:	3502      	adds	r5, #2
 8008f72:	1d1a      	adds	r2, r3, #4
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	9207      	str	r2, [sp, #28]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	db2b      	blt.n	8008fd4 <_svfiprintf_r+0x184>
 8008f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f7e:	4e30      	ldr	r6, [pc, #192]	; (8009040 <_svfiprintf_r+0x1f0>)
 8008f80:	2203      	movs	r2, #3
 8008f82:	0030      	movs	r0, r6
 8008f84:	7829      	ldrb	r1, [r5, #0]
 8008f86:	f000 f9e5 	bl	8009354 <memchr>
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	d006      	beq.n	8008f9c <_svfiprintf_r+0x14c>
 8008f8e:	2340      	movs	r3, #64	; 0x40
 8008f90:	1b80      	subs	r0, r0, r6
 8008f92:	4083      	lsls	r3, r0
 8008f94:	6822      	ldr	r2, [r4, #0]
 8008f96:	3501      	adds	r5, #1
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	6023      	str	r3, [r4, #0]
 8008f9c:	7829      	ldrb	r1, [r5, #0]
 8008f9e:	2206      	movs	r2, #6
 8008fa0:	4828      	ldr	r0, [pc, #160]	; (8009044 <_svfiprintf_r+0x1f4>)
 8008fa2:	1c6e      	adds	r6, r5, #1
 8008fa4:	7621      	strb	r1, [r4, #24]
 8008fa6:	f000 f9d5 	bl	8009354 <memchr>
 8008faa:	2800      	cmp	r0, #0
 8008fac:	d03c      	beq.n	8009028 <_svfiprintf_r+0x1d8>
 8008fae:	4b26      	ldr	r3, [pc, #152]	; (8009048 <_svfiprintf_r+0x1f8>)
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d125      	bne.n	8009000 <_svfiprintf_r+0x1b0>
 8008fb4:	2207      	movs	r2, #7
 8008fb6:	9b07      	ldr	r3, [sp, #28]
 8008fb8:	3307      	adds	r3, #7
 8008fba:	4393      	bics	r3, r2
 8008fbc:	3308      	adds	r3, #8
 8008fbe:	9307      	str	r3, [sp, #28]
 8008fc0:	6963      	ldr	r3, [r4, #20]
 8008fc2:	9a04      	ldr	r2, [sp, #16]
 8008fc4:	189b      	adds	r3, r3, r2
 8008fc6:	6163      	str	r3, [r4, #20]
 8008fc8:	e765      	b.n	8008e96 <_svfiprintf_r+0x46>
 8008fca:	4343      	muls	r3, r0
 8008fcc:	0035      	movs	r5, r6
 8008fce:	2101      	movs	r1, #1
 8008fd0:	189b      	adds	r3, r3, r2
 8008fd2:	e7a6      	b.n	8008f22 <_svfiprintf_r+0xd2>
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	425b      	negs	r3, r3
 8008fd8:	e7d0      	b.n	8008f7c <_svfiprintf_r+0x12c>
 8008fda:	2300      	movs	r3, #0
 8008fdc:	200a      	movs	r0, #10
 8008fde:	001a      	movs	r2, r3
 8008fe0:	3501      	adds	r5, #1
 8008fe2:	6063      	str	r3, [r4, #4]
 8008fe4:	7829      	ldrb	r1, [r5, #0]
 8008fe6:	1c6e      	adds	r6, r5, #1
 8008fe8:	3930      	subs	r1, #48	; 0x30
 8008fea:	2909      	cmp	r1, #9
 8008fec:	d903      	bls.n	8008ff6 <_svfiprintf_r+0x1a6>
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d0c5      	beq.n	8008f7e <_svfiprintf_r+0x12e>
 8008ff2:	9209      	str	r2, [sp, #36]	; 0x24
 8008ff4:	e7c3      	b.n	8008f7e <_svfiprintf_r+0x12e>
 8008ff6:	4342      	muls	r2, r0
 8008ff8:	0035      	movs	r5, r6
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	1852      	adds	r2, r2, r1
 8008ffe:	e7f1      	b.n	8008fe4 <_svfiprintf_r+0x194>
 8009000:	ab07      	add	r3, sp, #28
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	003a      	movs	r2, r7
 8009006:	0021      	movs	r1, r4
 8009008:	4b10      	ldr	r3, [pc, #64]	; (800904c <_svfiprintf_r+0x1fc>)
 800900a:	9803      	ldr	r0, [sp, #12]
 800900c:	e000      	b.n	8009010 <_svfiprintf_r+0x1c0>
 800900e:	bf00      	nop
 8009010:	9004      	str	r0, [sp, #16]
 8009012:	9b04      	ldr	r3, [sp, #16]
 8009014:	3301      	adds	r3, #1
 8009016:	d1d3      	bne.n	8008fc0 <_svfiprintf_r+0x170>
 8009018:	89bb      	ldrh	r3, [r7, #12]
 800901a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800901c:	065b      	lsls	r3, r3, #25
 800901e:	d400      	bmi.n	8009022 <_svfiprintf_r+0x1d2>
 8009020:	e72d      	b.n	8008e7e <_svfiprintf_r+0x2e>
 8009022:	2001      	movs	r0, #1
 8009024:	4240      	negs	r0, r0
 8009026:	e72a      	b.n	8008e7e <_svfiprintf_r+0x2e>
 8009028:	ab07      	add	r3, sp, #28
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	003a      	movs	r2, r7
 800902e:	0021      	movs	r1, r4
 8009030:	4b06      	ldr	r3, [pc, #24]	; (800904c <_svfiprintf_r+0x1fc>)
 8009032:	9803      	ldr	r0, [sp, #12]
 8009034:	f000 f87c 	bl	8009130 <_printf_i>
 8009038:	e7ea      	b.n	8009010 <_svfiprintf_r+0x1c0>
 800903a:	46c0      	nop			; (mov r8, r8)
 800903c:	08009c48 	.word	0x08009c48
 8009040:	08009c4e 	.word	0x08009c4e
 8009044:	08009c52 	.word	0x08009c52
 8009048:	00000000 	.word	0x00000000
 800904c:	08008d8d 	.word	0x08008d8d

08009050 <_printf_common>:
 8009050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009052:	0015      	movs	r5, r2
 8009054:	9301      	str	r3, [sp, #4]
 8009056:	688a      	ldr	r2, [r1, #8]
 8009058:	690b      	ldr	r3, [r1, #16]
 800905a:	000c      	movs	r4, r1
 800905c:	9000      	str	r0, [sp, #0]
 800905e:	4293      	cmp	r3, r2
 8009060:	da00      	bge.n	8009064 <_printf_common+0x14>
 8009062:	0013      	movs	r3, r2
 8009064:	0022      	movs	r2, r4
 8009066:	602b      	str	r3, [r5, #0]
 8009068:	3243      	adds	r2, #67	; 0x43
 800906a:	7812      	ldrb	r2, [r2, #0]
 800906c:	2a00      	cmp	r2, #0
 800906e:	d001      	beq.n	8009074 <_printf_common+0x24>
 8009070:	3301      	adds	r3, #1
 8009072:	602b      	str	r3, [r5, #0]
 8009074:	6823      	ldr	r3, [r4, #0]
 8009076:	069b      	lsls	r3, r3, #26
 8009078:	d502      	bpl.n	8009080 <_printf_common+0x30>
 800907a:	682b      	ldr	r3, [r5, #0]
 800907c:	3302      	adds	r3, #2
 800907e:	602b      	str	r3, [r5, #0]
 8009080:	6822      	ldr	r2, [r4, #0]
 8009082:	2306      	movs	r3, #6
 8009084:	0017      	movs	r7, r2
 8009086:	401f      	ands	r7, r3
 8009088:	421a      	tst	r2, r3
 800908a:	d027      	beq.n	80090dc <_printf_common+0x8c>
 800908c:	0023      	movs	r3, r4
 800908e:	3343      	adds	r3, #67	; 0x43
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	1e5a      	subs	r2, r3, #1
 8009094:	4193      	sbcs	r3, r2
 8009096:	6822      	ldr	r2, [r4, #0]
 8009098:	0692      	lsls	r2, r2, #26
 800909a:	d430      	bmi.n	80090fe <_printf_common+0xae>
 800909c:	0022      	movs	r2, r4
 800909e:	9901      	ldr	r1, [sp, #4]
 80090a0:	9800      	ldr	r0, [sp, #0]
 80090a2:	9e08      	ldr	r6, [sp, #32]
 80090a4:	3243      	adds	r2, #67	; 0x43
 80090a6:	47b0      	blx	r6
 80090a8:	1c43      	adds	r3, r0, #1
 80090aa:	d025      	beq.n	80090f8 <_printf_common+0xa8>
 80090ac:	2306      	movs	r3, #6
 80090ae:	6820      	ldr	r0, [r4, #0]
 80090b0:	682a      	ldr	r2, [r5, #0]
 80090b2:	68e1      	ldr	r1, [r4, #12]
 80090b4:	2500      	movs	r5, #0
 80090b6:	4003      	ands	r3, r0
 80090b8:	2b04      	cmp	r3, #4
 80090ba:	d103      	bne.n	80090c4 <_printf_common+0x74>
 80090bc:	1a8d      	subs	r5, r1, r2
 80090be:	43eb      	mvns	r3, r5
 80090c0:	17db      	asrs	r3, r3, #31
 80090c2:	401d      	ands	r5, r3
 80090c4:	68a3      	ldr	r3, [r4, #8]
 80090c6:	6922      	ldr	r2, [r4, #16]
 80090c8:	4293      	cmp	r3, r2
 80090ca:	dd01      	ble.n	80090d0 <_printf_common+0x80>
 80090cc:	1a9b      	subs	r3, r3, r2
 80090ce:	18ed      	adds	r5, r5, r3
 80090d0:	2700      	movs	r7, #0
 80090d2:	42bd      	cmp	r5, r7
 80090d4:	d120      	bne.n	8009118 <_printf_common+0xc8>
 80090d6:	2000      	movs	r0, #0
 80090d8:	e010      	b.n	80090fc <_printf_common+0xac>
 80090da:	3701      	adds	r7, #1
 80090dc:	68e3      	ldr	r3, [r4, #12]
 80090de:	682a      	ldr	r2, [r5, #0]
 80090e0:	1a9b      	subs	r3, r3, r2
 80090e2:	42bb      	cmp	r3, r7
 80090e4:	ddd2      	ble.n	800908c <_printf_common+0x3c>
 80090e6:	0022      	movs	r2, r4
 80090e8:	2301      	movs	r3, #1
 80090ea:	9901      	ldr	r1, [sp, #4]
 80090ec:	9800      	ldr	r0, [sp, #0]
 80090ee:	9e08      	ldr	r6, [sp, #32]
 80090f0:	3219      	adds	r2, #25
 80090f2:	47b0      	blx	r6
 80090f4:	1c43      	adds	r3, r0, #1
 80090f6:	d1f0      	bne.n	80090da <_printf_common+0x8a>
 80090f8:	2001      	movs	r0, #1
 80090fa:	4240      	negs	r0, r0
 80090fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80090fe:	2030      	movs	r0, #48	; 0x30
 8009100:	18e1      	adds	r1, r4, r3
 8009102:	3143      	adds	r1, #67	; 0x43
 8009104:	7008      	strb	r0, [r1, #0]
 8009106:	0021      	movs	r1, r4
 8009108:	1c5a      	adds	r2, r3, #1
 800910a:	3145      	adds	r1, #69	; 0x45
 800910c:	7809      	ldrb	r1, [r1, #0]
 800910e:	18a2      	adds	r2, r4, r2
 8009110:	3243      	adds	r2, #67	; 0x43
 8009112:	3302      	adds	r3, #2
 8009114:	7011      	strb	r1, [r2, #0]
 8009116:	e7c1      	b.n	800909c <_printf_common+0x4c>
 8009118:	0022      	movs	r2, r4
 800911a:	2301      	movs	r3, #1
 800911c:	9901      	ldr	r1, [sp, #4]
 800911e:	9800      	ldr	r0, [sp, #0]
 8009120:	9e08      	ldr	r6, [sp, #32]
 8009122:	321a      	adds	r2, #26
 8009124:	47b0      	blx	r6
 8009126:	1c43      	adds	r3, r0, #1
 8009128:	d0e6      	beq.n	80090f8 <_printf_common+0xa8>
 800912a:	3701      	adds	r7, #1
 800912c:	e7d1      	b.n	80090d2 <_printf_common+0x82>
	...

08009130 <_printf_i>:
 8009130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009132:	b08b      	sub	sp, #44	; 0x2c
 8009134:	9206      	str	r2, [sp, #24]
 8009136:	000a      	movs	r2, r1
 8009138:	3243      	adds	r2, #67	; 0x43
 800913a:	9307      	str	r3, [sp, #28]
 800913c:	9005      	str	r0, [sp, #20]
 800913e:	9204      	str	r2, [sp, #16]
 8009140:	7e0a      	ldrb	r2, [r1, #24]
 8009142:	000c      	movs	r4, r1
 8009144:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009146:	2a78      	cmp	r2, #120	; 0x78
 8009148:	d806      	bhi.n	8009158 <_printf_i+0x28>
 800914a:	2a62      	cmp	r2, #98	; 0x62
 800914c:	d808      	bhi.n	8009160 <_printf_i+0x30>
 800914e:	2a00      	cmp	r2, #0
 8009150:	d100      	bne.n	8009154 <_printf_i+0x24>
 8009152:	e0c0      	b.n	80092d6 <_printf_i+0x1a6>
 8009154:	2a58      	cmp	r2, #88	; 0x58
 8009156:	d052      	beq.n	80091fe <_printf_i+0xce>
 8009158:	0026      	movs	r6, r4
 800915a:	3642      	adds	r6, #66	; 0x42
 800915c:	7032      	strb	r2, [r6, #0]
 800915e:	e022      	b.n	80091a6 <_printf_i+0x76>
 8009160:	0010      	movs	r0, r2
 8009162:	3863      	subs	r0, #99	; 0x63
 8009164:	2815      	cmp	r0, #21
 8009166:	d8f7      	bhi.n	8009158 <_printf_i+0x28>
 8009168:	f7f6 ffcc 	bl	8000104 <__gnu_thumb1_case_shi>
 800916c:	001f0016 	.word	0x001f0016
 8009170:	fff6fff6 	.word	0xfff6fff6
 8009174:	fff6fff6 	.word	0xfff6fff6
 8009178:	fff6001f 	.word	0xfff6001f
 800917c:	fff6fff6 	.word	0xfff6fff6
 8009180:	00a8fff6 	.word	0x00a8fff6
 8009184:	009a0036 	.word	0x009a0036
 8009188:	fff6fff6 	.word	0xfff6fff6
 800918c:	fff600b9 	.word	0xfff600b9
 8009190:	fff60036 	.word	0xfff60036
 8009194:	009efff6 	.word	0x009efff6
 8009198:	0026      	movs	r6, r4
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	3642      	adds	r6, #66	; 0x42
 800919e:	1d11      	adds	r1, r2, #4
 80091a0:	6019      	str	r1, [r3, #0]
 80091a2:	6813      	ldr	r3, [r2, #0]
 80091a4:	7033      	strb	r3, [r6, #0]
 80091a6:	2301      	movs	r3, #1
 80091a8:	e0a7      	b.n	80092fa <_printf_i+0x1ca>
 80091aa:	6808      	ldr	r0, [r1, #0]
 80091ac:	6819      	ldr	r1, [r3, #0]
 80091ae:	1d0a      	adds	r2, r1, #4
 80091b0:	0605      	lsls	r5, r0, #24
 80091b2:	d50b      	bpl.n	80091cc <_printf_i+0x9c>
 80091b4:	680d      	ldr	r5, [r1, #0]
 80091b6:	601a      	str	r2, [r3, #0]
 80091b8:	2d00      	cmp	r5, #0
 80091ba:	da03      	bge.n	80091c4 <_printf_i+0x94>
 80091bc:	232d      	movs	r3, #45	; 0x2d
 80091be:	9a04      	ldr	r2, [sp, #16]
 80091c0:	426d      	negs	r5, r5
 80091c2:	7013      	strb	r3, [r2, #0]
 80091c4:	4b61      	ldr	r3, [pc, #388]	; (800934c <_printf_i+0x21c>)
 80091c6:	270a      	movs	r7, #10
 80091c8:	9303      	str	r3, [sp, #12]
 80091ca:	e032      	b.n	8009232 <_printf_i+0x102>
 80091cc:	680d      	ldr	r5, [r1, #0]
 80091ce:	601a      	str	r2, [r3, #0]
 80091d0:	0641      	lsls	r1, r0, #25
 80091d2:	d5f1      	bpl.n	80091b8 <_printf_i+0x88>
 80091d4:	b22d      	sxth	r5, r5
 80091d6:	e7ef      	b.n	80091b8 <_printf_i+0x88>
 80091d8:	680d      	ldr	r5, [r1, #0]
 80091da:	6819      	ldr	r1, [r3, #0]
 80091dc:	1d08      	adds	r0, r1, #4
 80091de:	6018      	str	r0, [r3, #0]
 80091e0:	062e      	lsls	r6, r5, #24
 80091e2:	d501      	bpl.n	80091e8 <_printf_i+0xb8>
 80091e4:	680d      	ldr	r5, [r1, #0]
 80091e6:	e003      	b.n	80091f0 <_printf_i+0xc0>
 80091e8:	066d      	lsls	r5, r5, #25
 80091ea:	d5fb      	bpl.n	80091e4 <_printf_i+0xb4>
 80091ec:	680d      	ldr	r5, [r1, #0]
 80091ee:	b2ad      	uxth	r5, r5
 80091f0:	4b56      	ldr	r3, [pc, #344]	; (800934c <_printf_i+0x21c>)
 80091f2:	270a      	movs	r7, #10
 80091f4:	9303      	str	r3, [sp, #12]
 80091f6:	2a6f      	cmp	r2, #111	; 0x6f
 80091f8:	d117      	bne.n	800922a <_printf_i+0xfa>
 80091fa:	2708      	movs	r7, #8
 80091fc:	e015      	b.n	800922a <_printf_i+0xfa>
 80091fe:	3145      	adds	r1, #69	; 0x45
 8009200:	700a      	strb	r2, [r1, #0]
 8009202:	4a52      	ldr	r2, [pc, #328]	; (800934c <_printf_i+0x21c>)
 8009204:	9203      	str	r2, [sp, #12]
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	6821      	ldr	r1, [r4, #0]
 800920a:	ca20      	ldmia	r2!, {r5}
 800920c:	601a      	str	r2, [r3, #0]
 800920e:	0608      	lsls	r0, r1, #24
 8009210:	d550      	bpl.n	80092b4 <_printf_i+0x184>
 8009212:	07cb      	lsls	r3, r1, #31
 8009214:	d502      	bpl.n	800921c <_printf_i+0xec>
 8009216:	2320      	movs	r3, #32
 8009218:	4319      	orrs	r1, r3
 800921a:	6021      	str	r1, [r4, #0]
 800921c:	2710      	movs	r7, #16
 800921e:	2d00      	cmp	r5, #0
 8009220:	d103      	bne.n	800922a <_printf_i+0xfa>
 8009222:	2320      	movs	r3, #32
 8009224:	6822      	ldr	r2, [r4, #0]
 8009226:	439a      	bics	r2, r3
 8009228:	6022      	str	r2, [r4, #0]
 800922a:	0023      	movs	r3, r4
 800922c:	2200      	movs	r2, #0
 800922e:	3343      	adds	r3, #67	; 0x43
 8009230:	701a      	strb	r2, [r3, #0]
 8009232:	6863      	ldr	r3, [r4, #4]
 8009234:	60a3      	str	r3, [r4, #8]
 8009236:	2b00      	cmp	r3, #0
 8009238:	db03      	blt.n	8009242 <_printf_i+0x112>
 800923a:	2204      	movs	r2, #4
 800923c:	6821      	ldr	r1, [r4, #0]
 800923e:	4391      	bics	r1, r2
 8009240:	6021      	str	r1, [r4, #0]
 8009242:	2d00      	cmp	r5, #0
 8009244:	d102      	bne.n	800924c <_printf_i+0x11c>
 8009246:	9e04      	ldr	r6, [sp, #16]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00c      	beq.n	8009266 <_printf_i+0x136>
 800924c:	9e04      	ldr	r6, [sp, #16]
 800924e:	0028      	movs	r0, r5
 8009250:	0039      	movs	r1, r7
 8009252:	f7f6 ffe7 	bl	8000224 <__aeabi_uidivmod>
 8009256:	9b03      	ldr	r3, [sp, #12]
 8009258:	3e01      	subs	r6, #1
 800925a:	5c5b      	ldrb	r3, [r3, r1]
 800925c:	7033      	strb	r3, [r6, #0]
 800925e:	002b      	movs	r3, r5
 8009260:	0005      	movs	r5, r0
 8009262:	429f      	cmp	r7, r3
 8009264:	d9f3      	bls.n	800924e <_printf_i+0x11e>
 8009266:	2f08      	cmp	r7, #8
 8009268:	d109      	bne.n	800927e <_printf_i+0x14e>
 800926a:	6823      	ldr	r3, [r4, #0]
 800926c:	07db      	lsls	r3, r3, #31
 800926e:	d506      	bpl.n	800927e <_printf_i+0x14e>
 8009270:	6863      	ldr	r3, [r4, #4]
 8009272:	6922      	ldr	r2, [r4, #16]
 8009274:	4293      	cmp	r3, r2
 8009276:	dc02      	bgt.n	800927e <_printf_i+0x14e>
 8009278:	2330      	movs	r3, #48	; 0x30
 800927a:	3e01      	subs	r6, #1
 800927c:	7033      	strb	r3, [r6, #0]
 800927e:	9b04      	ldr	r3, [sp, #16]
 8009280:	1b9b      	subs	r3, r3, r6
 8009282:	6123      	str	r3, [r4, #16]
 8009284:	9b07      	ldr	r3, [sp, #28]
 8009286:	0021      	movs	r1, r4
 8009288:	9300      	str	r3, [sp, #0]
 800928a:	9805      	ldr	r0, [sp, #20]
 800928c:	9b06      	ldr	r3, [sp, #24]
 800928e:	aa09      	add	r2, sp, #36	; 0x24
 8009290:	f7ff fede 	bl	8009050 <_printf_common>
 8009294:	1c43      	adds	r3, r0, #1
 8009296:	d135      	bne.n	8009304 <_printf_i+0x1d4>
 8009298:	2001      	movs	r0, #1
 800929a:	4240      	negs	r0, r0
 800929c:	b00b      	add	sp, #44	; 0x2c
 800929e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092a0:	2220      	movs	r2, #32
 80092a2:	6809      	ldr	r1, [r1, #0]
 80092a4:	430a      	orrs	r2, r1
 80092a6:	6022      	str	r2, [r4, #0]
 80092a8:	0022      	movs	r2, r4
 80092aa:	2178      	movs	r1, #120	; 0x78
 80092ac:	3245      	adds	r2, #69	; 0x45
 80092ae:	7011      	strb	r1, [r2, #0]
 80092b0:	4a27      	ldr	r2, [pc, #156]	; (8009350 <_printf_i+0x220>)
 80092b2:	e7a7      	b.n	8009204 <_printf_i+0xd4>
 80092b4:	0648      	lsls	r0, r1, #25
 80092b6:	d5ac      	bpl.n	8009212 <_printf_i+0xe2>
 80092b8:	b2ad      	uxth	r5, r5
 80092ba:	e7aa      	b.n	8009212 <_printf_i+0xe2>
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	680d      	ldr	r5, [r1, #0]
 80092c0:	1d10      	adds	r0, r2, #4
 80092c2:	6949      	ldr	r1, [r1, #20]
 80092c4:	6018      	str	r0, [r3, #0]
 80092c6:	6813      	ldr	r3, [r2, #0]
 80092c8:	062e      	lsls	r6, r5, #24
 80092ca:	d501      	bpl.n	80092d0 <_printf_i+0x1a0>
 80092cc:	6019      	str	r1, [r3, #0]
 80092ce:	e002      	b.n	80092d6 <_printf_i+0x1a6>
 80092d0:	066d      	lsls	r5, r5, #25
 80092d2:	d5fb      	bpl.n	80092cc <_printf_i+0x19c>
 80092d4:	8019      	strh	r1, [r3, #0]
 80092d6:	2300      	movs	r3, #0
 80092d8:	9e04      	ldr	r6, [sp, #16]
 80092da:	6123      	str	r3, [r4, #16]
 80092dc:	e7d2      	b.n	8009284 <_printf_i+0x154>
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	1d11      	adds	r1, r2, #4
 80092e2:	6019      	str	r1, [r3, #0]
 80092e4:	6816      	ldr	r6, [r2, #0]
 80092e6:	2100      	movs	r1, #0
 80092e8:	0030      	movs	r0, r6
 80092ea:	6862      	ldr	r2, [r4, #4]
 80092ec:	f000 f832 	bl	8009354 <memchr>
 80092f0:	2800      	cmp	r0, #0
 80092f2:	d001      	beq.n	80092f8 <_printf_i+0x1c8>
 80092f4:	1b80      	subs	r0, r0, r6
 80092f6:	6060      	str	r0, [r4, #4]
 80092f8:	6863      	ldr	r3, [r4, #4]
 80092fa:	6123      	str	r3, [r4, #16]
 80092fc:	2300      	movs	r3, #0
 80092fe:	9a04      	ldr	r2, [sp, #16]
 8009300:	7013      	strb	r3, [r2, #0]
 8009302:	e7bf      	b.n	8009284 <_printf_i+0x154>
 8009304:	6923      	ldr	r3, [r4, #16]
 8009306:	0032      	movs	r2, r6
 8009308:	9906      	ldr	r1, [sp, #24]
 800930a:	9805      	ldr	r0, [sp, #20]
 800930c:	9d07      	ldr	r5, [sp, #28]
 800930e:	47a8      	blx	r5
 8009310:	1c43      	adds	r3, r0, #1
 8009312:	d0c1      	beq.n	8009298 <_printf_i+0x168>
 8009314:	6823      	ldr	r3, [r4, #0]
 8009316:	079b      	lsls	r3, r3, #30
 8009318:	d415      	bmi.n	8009346 <_printf_i+0x216>
 800931a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800931c:	68e0      	ldr	r0, [r4, #12]
 800931e:	4298      	cmp	r0, r3
 8009320:	dabc      	bge.n	800929c <_printf_i+0x16c>
 8009322:	0018      	movs	r0, r3
 8009324:	e7ba      	b.n	800929c <_printf_i+0x16c>
 8009326:	0022      	movs	r2, r4
 8009328:	2301      	movs	r3, #1
 800932a:	9906      	ldr	r1, [sp, #24]
 800932c:	9805      	ldr	r0, [sp, #20]
 800932e:	9e07      	ldr	r6, [sp, #28]
 8009330:	3219      	adds	r2, #25
 8009332:	47b0      	blx	r6
 8009334:	1c43      	adds	r3, r0, #1
 8009336:	d0af      	beq.n	8009298 <_printf_i+0x168>
 8009338:	3501      	adds	r5, #1
 800933a:	68e3      	ldr	r3, [r4, #12]
 800933c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800933e:	1a9b      	subs	r3, r3, r2
 8009340:	42ab      	cmp	r3, r5
 8009342:	dcf0      	bgt.n	8009326 <_printf_i+0x1f6>
 8009344:	e7e9      	b.n	800931a <_printf_i+0x1ea>
 8009346:	2500      	movs	r5, #0
 8009348:	e7f7      	b.n	800933a <_printf_i+0x20a>
 800934a:	46c0      	nop			; (mov r8, r8)
 800934c:	08009c59 	.word	0x08009c59
 8009350:	08009c6a 	.word	0x08009c6a

08009354 <memchr>:
 8009354:	b2c9      	uxtb	r1, r1
 8009356:	1882      	adds	r2, r0, r2
 8009358:	4290      	cmp	r0, r2
 800935a:	d101      	bne.n	8009360 <memchr+0xc>
 800935c:	2000      	movs	r0, #0
 800935e:	4770      	bx	lr
 8009360:	7803      	ldrb	r3, [r0, #0]
 8009362:	428b      	cmp	r3, r1
 8009364:	d0fb      	beq.n	800935e <memchr+0xa>
 8009366:	3001      	adds	r0, #1
 8009368:	e7f6      	b.n	8009358 <memchr+0x4>

0800936a <memmove>:
 800936a:	b510      	push	{r4, lr}
 800936c:	4288      	cmp	r0, r1
 800936e:	d902      	bls.n	8009376 <memmove+0xc>
 8009370:	188b      	adds	r3, r1, r2
 8009372:	4298      	cmp	r0, r3
 8009374:	d303      	bcc.n	800937e <memmove+0x14>
 8009376:	2300      	movs	r3, #0
 8009378:	e007      	b.n	800938a <memmove+0x20>
 800937a:	5c8b      	ldrb	r3, [r1, r2]
 800937c:	5483      	strb	r3, [r0, r2]
 800937e:	3a01      	subs	r2, #1
 8009380:	d2fb      	bcs.n	800937a <memmove+0x10>
 8009382:	bd10      	pop	{r4, pc}
 8009384:	5ccc      	ldrb	r4, [r1, r3]
 8009386:	54c4      	strb	r4, [r0, r3]
 8009388:	3301      	adds	r3, #1
 800938a:	429a      	cmp	r2, r3
 800938c:	d1fa      	bne.n	8009384 <memmove+0x1a>
 800938e:	e7f8      	b.n	8009382 <memmove+0x18>

08009390 <_free_r>:
 8009390:	b570      	push	{r4, r5, r6, lr}
 8009392:	0005      	movs	r5, r0
 8009394:	2900      	cmp	r1, #0
 8009396:	d010      	beq.n	80093ba <_free_r+0x2a>
 8009398:	1f0c      	subs	r4, r1, #4
 800939a:	6823      	ldr	r3, [r4, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	da00      	bge.n	80093a2 <_free_r+0x12>
 80093a0:	18e4      	adds	r4, r4, r3
 80093a2:	0028      	movs	r0, r5
 80093a4:	f000 f8d4 	bl	8009550 <__malloc_lock>
 80093a8:	4a1d      	ldr	r2, [pc, #116]	; (8009420 <_free_r+0x90>)
 80093aa:	6813      	ldr	r3, [r2, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d105      	bne.n	80093bc <_free_r+0x2c>
 80093b0:	6063      	str	r3, [r4, #4]
 80093b2:	6014      	str	r4, [r2, #0]
 80093b4:	0028      	movs	r0, r5
 80093b6:	f000 f8d3 	bl	8009560 <__malloc_unlock>
 80093ba:	bd70      	pop	{r4, r5, r6, pc}
 80093bc:	42a3      	cmp	r3, r4
 80093be:	d908      	bls.n	80093d2 <_free_r+0x42>
 80093c0:	6821      	ldr	r1, [r4, #0]
 80093c2:	1860      	adds	r0, r4, r1
 80093c4:	4283      	cmp	r3, r0
 80093c6:	d1f3      	bne.n	80093b0 <_free_r+0x20>
 80093c8:	6818      	ldr	r0, [r3, #0]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	1841      	adds	r1, r0, r1
 80093ce:	6021      	str	r1, [r4, #0]
 80093d0:	e7ee      	b.n	80093b0 <_free_r+0x20>
 80093d2:	001a      	movs	r2, r3
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d001      	beq.n	80093de <_free_r+0x4e>
 80093da:	42a3      	cmp	r3, r4
 80093dc:	d9f9      	bls.n	80093d2 <_free_r+0x42>
 80093de:	6811      	ldr	r1, [r2, #0]
 80093e0:	1850      	adds	r0, r2, r1
 80093e2:	42a0      	cmp	r0, r4
 80093e4:	d10b      	bne.n	80093fe <_free_r+0x6e>
 80093e6:	6820      	ldr	r0, [r4, #0]
 80093e8:	1809      	adds	r1, r1, r0
 80093ea:	1850      	adds	r0, r2, r1
 80093ec:	6011      	str	r1, [r2, #0]
 80093ee:	4283      	cmp	r3, r0
 80093f0:	d1e0      	bne.n	80093b4 <_free_r+0x24>
 80093f2:	6818      	ldr	r0, [r3, #0]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	1841      	adds	r1, r0, r1
 80093f8:	6011      	str	r1, [r2, #0]
 80093fa:	6053      	str	r3, [r2, #4]
 80093fc:	e7da      	b.n	80093b4 <_free_r+0x24>
 80093fe:	42a0      	cmp	r0, r4
 8009400:	d902      	bls.n	8009408 <_free_r+0x78>
 8009402:	230c      	movs	r3, #12
 8009404:	602b      	str	r3, [r5, #0]
 8009406:	e7d5      	b.n	80093b4 <_free_r+0x24>
 8009408:	6821      	ldr	r1, [r4, #0]
 800940a:	1860      	adds	r0, r4, r1
 800940c:	4283      	cmp	r3, r0
 800940e:	d103      	bne.n	8009418 <_free_r+0x88>
 8009410:	6818      	ldr	r0, [r3, #0]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	1841      	adds	r1, r0, r1
 8009416:	6021      	str	r1, [r4, #0]
 8009418:	6063      	str	r3, [r4, #4]
 800941a:	6054      	str	r4, [r2, #4]
 800941c:	e7ca      	b.n	80093b4 <_free_r+0x24>
 800941e:	46c0      	nop			; (mov r8, r8)
 8009420:	20000560 	.word	0x20000560

08009424 <_malloc_r>:
 8009424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009426:	2303      	movs	r3, #3
 8009428:	1ccd      	adds	r5, r1, #3
 800942a:	439d      	bics	r5, r3
 800942c:	3508      	adds	r5, #8
 800942e:	0006      	movs	r6, r0
 8009430:	2d0c      	cmp	r5, #12
 8009432:	d21f      	bcs.n	8009474 <_malloc_r+0x50>
 8009434:	250c      	movs	r5, #12
 8009436:	42a9      	cmp	r1, r5
 8009438:	d81e      	bhi.n	8009478 <_malloc_r+0x54>
 800943a:	0030      	movs	r0, r6
 800943c:	f000 f888 	bl	8009550 <__malloc_lock>
 8009440:	4925      	ldr	r1, [pc, #148]	; (80094d8 <_malloc_r+0xb4>)
 8009442:	680a      	ldr	r2, [r1, #0]
 8009444:	0014      	movs	r4, r2
 8009446:	2c00      	cmp	r4, #0
 8009448:	d11a      	bne.n	8009480 <_malloc_r+0x5c>
 800944a:	4f24      	ldr	r7, [pc, #144]	; (80094dc <_malloc_r+0xb8>)
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d104      	bne.n	800945c <_malloc_r+0x38>
 8009452:	0021      	movs	r1, r4
 8009454:	0030      	movs	r0, r6
 8009456:	f000 f869 	bl	800952c <_sbrk_r>
 800945a:	6038      	str	r0, [r7, #0]
 800945c:	0029      	movs	r1, r5
 800945e:	0030      	movs	r0, r6
 8009460:	f000 f864 	bl	800952c <_sbrk_r>
 8009464:	1c43      	adds	r3, r0, #1
 8009466:	d12b      	bne.n	80094c0 <_malloc_r+0x9c>
 8009468:	230c      	movs	r3, #12
 800946a:	0030      	movs	r0, r6
 800946c:	6033      	str	r3, [r6, #0]
 800946e:	f000 f877 	bl	8009560 <__malloc_unlock>
 8009472:	e003      	b.n	800947c <_malloc_r+0x58>
 8009474:	2d00      	cmp	r5, #0
 8009476:	dade      	bge.n	8009436 <_malloc_r+0x12>
 8009478:	230c      	movs	r3, #12
 800947a:	6033      	str	r3, [r6, #0]
 800947c:	2000      	movs	r0, #0
 800947e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009480:	6823      	ldr	r3, [r4, #0]
 8009482:	1b5b      	subs	r3, r3, r5
 8009484:	d419      	bmi.n	80094ba <_malloc_r+0x96>
 8009486:	2b0b      	cmp	r3, #11
 8009488:	d903      	bls.n	8009492 <_malloc_r+0x6e>
 800948a:	6023      	str	r3, [r4, #0]
 800948c:	18e4      	adds	r4, r4, r3
 800948e:	6025      	str	r5, [r4, #0]
 8009490:	e003      	b.n	800949a <_malloc_r+0x76>
 8009492:	6863      	ldr	r3, [r4, #4]
 8009494:	42a2      	cmp	r2, r4
 8009496:	d10e      	bne.n	80094b6 <_malloc_r+0x92>
 8009498:	600b      	str	r3, [r1, #0]
 800949a:	0030      	movs	r0, r6
 800949c:	f000 f860 	bl	8009560 <__malloc_unlock>
 80094a0:	0020      	movs	r0, r4
 80094a2:	2207      	movs	r2, #7
 80094a4:	300b      	adds	r0, #11
 80094a6:	1d23      	adds	r3, r4, #4
 80094a8:	4390      	bics	r0, r2
 80094aa:	1ac2      	subs	r2, r0, r3
 80094ac:	4298      	cmp	r0, r3
 80094ae:	d0e6      	beq.n	800947e <_malloc_r+0x5a>
 80094b0:	1a1b      	subs	r3, r3, r0
 80094b2:	50a3      	str	r3, [r4, r2]
 80094b4:	e7e3      	b.n	800947e <_malloc_r+0x5a>
 80094b6:	6053      	str	r3, [r2, #4]
 80094b8:	e7ef      	b.n	800949a <_malloc_r+0x76>
 80094ba:	0022      	movs	r2, r4
 80094bc:	6864      	ldr	r4, [r4, #4]
 80094be:	e7c2      	b.n	8009446 <_malloc_r+0x22>
 80094c0:	2303      	movs	r3, #3
 80094c2:	1cc4      	adds	r4, r0, #3
 80094c4:	439c      	bics	r4, r3
 80094c6:	42a0      	cmp	r0, r4
 80094c8:	d0e1      	beq.n	800948e <_malloc_r+0x6a>
 80094ca:	1a21      	subs	r1, r4, r0
 80094cc:	0030      	movs	r0, r6
 80094ce:	f000 f82d 	bl	800952c <_sbrk_r>
 80094d2:	1c43      	adds	r3, r0, #1
 80094d4:	d1db      	bne.n	800948e <_malloc_r+0x6a>
 80094d6:	e7c7      	b.n	8009468 <_malloc_r+0x44>
 80094d8:	20000560 	.word	0x20000560
 80094dc:	20000564 	.word	0x20000564

080094e0 <_realloc_r>:
 80094e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e2:	0007      	movs	r7, r0
 80094e4:	000d      	movs	r5, r1
 80094e6:	0016      	movs	r6, r2
 80094e8:	2900      	cmp	r1, #0
 80094ea:	d105      	bne.n	80094f8 <_realloc_r+0x18>
 80094ec:	0011      	movs	r1, r2
 80094ee:	f7ff ff99 	bl	8009424 <_malloc_r>
 80094f2:	0004      	movs	r4, r0
 80094f4:	0020      	movs	r0, r4
 80094f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094f8:	2a00      	cmp	r2, #0
 80094fa:	d103      	bne.n	8009504 <_realloc_r+0x24>
 80094fc:	f7ff ff48 	bl	8009390 <_free_r>
 8009500:	0034      	movs	r4, r6
 8009502:	e7f7      	b.n	80094f4 <_realloc_r+0x14>
 8009504:	f000 f834 	bl	8009570 <_malloc_usable_size_r>
 8009508:	002c      	movs	r4, r5
 800950a:	42b0      	cmp	r0, r6
 800950c:	d2f2      	bcs.n	80094f4 <_realloc_r+0x14>
 800950e:	0031      	movs	r1, r6
 8009510:	0038      	movs	r0, r7
 8009512:	f7ff ff87 	bl	8009424 <_malloc_r>
 8009516:	1e04      	subs	r4, r0, #0
 8009518:	d0ec      	beq.n	80094f4 <_realloc_r+0x14>
 800951a:	0029      	movs	r1, r5
 800951c:	0032      	movs	r2, r6
 800951e:	f7ff fc03 	bl	8008d28 <memcpy>
 8009522:	0029      	movs	r1, r5
 8009524:	0038      	movs	r0, r7
 8009526:	f7ff ff33 	bl	8009390 <_free_r>
 800952a:	e7e3      	b.n	80094f4 <_realloc_r+0x14>

0800952c <_sbrk_r>:
 800952c:	2300      	movs	r3, #0
 800952e:	b570      	push	{r4, r5, r6, lr}
 8009530:	4d06      	ldr	r5, [pc, #24]	; (800954c <_sbrk_r+0x20>)
 8009532:	0004      	movs	r4, r0
 8009534:	0008      	movs	r0, r1
 8009536:	602b      	str	r3, [r5, #0]
 8009538:	f7fa f808 	bl	800354c <_sbrk>
 800953c:	1c43      	adds	r3, r0, #1
 800953e:	d103      	bne.n	8009548 <_sbrk_r+0x1c>
 8009540:	682b      	ldr	r3, [r5, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d000      	beq.n	8009548 <_sbrk_r+0x1c>
 8009546:	6023      	str	r3, [r4, #0]
 8009548:	bd70      	pop	{r4, r5, r6, pc}
 800954a:	46c0      	nop			; (mov r8, r8)
 800954c:	2000056c 	.word	0x2000056c

08009550 <__malloc_lock>:
 8009550:	b510      	push	{r4, lr}
 8009552:	4802      	ldr	r0, [pc, #8]	; (800955c <__malloc_lock+0xc>)
 8009554:	f000 f814 	bl	8009580 <__retarget_lock_acquire_recursive>
 8009558:	bd10      	pop	{r4, pc}
 800955a:	46c0      	nop			; (mov r8, r8)
 800955c:	20000574 	.word	0x20000574

08009560 <__malloc_unlock>:
 8009560:	b510      	push	{r4, lr}
 8009562:	4802      	ldr	r0, [pc, #8]	; (800956c <__malloc_unlock+0xc>)
 8009564:	f000 f80d 	bl	8009582 <__retarget_lock_release_recursive>
 8009568:	bd10      	pop	{r4, pc}
 800956a:	46c0      	nop			; (mov r8, r8)
 800956c:	20000574 	.word	0x20000574

08009570 <_malloc_usable_size_r>:
 8009570:	1f0b      	subs	r3, r1, #4
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	1f18      	subs	r0, r3, #4
 8009576:	2b00      	cmp	r3, #0
 8009578:	da01      	bge.n	800957e <_malloc_usable_size_r+0xe>
 800957a:	580b      	ldr	r3, [r1, r0]
 800957c:	18c0      	adds	r0, r0, r3
 800957e:	4770      	bx	lr

08009580 <__retarget_lock_acquire_recursive>:
 8009580:	4770      	bx	lr

08009582 <__retarget_lock_release_recursive>:
 8009582:	4770      	bx	lr

08009584 <_init>:
 8009584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009586:	46c0      	nop			; (mov r8, r8)
 8009588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800958a:	bc08      	pop	{r3}
 800958c:	469e      	mov	lr, r3
 800958e:	4770      	bx	lr

08009590 <_fini>:
 8009590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009592:	46c0      	nop			; (mov r8, r8)
 8009594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009596:	bc08      	pop	{r3}
 8009598:	469e      	mov	lr, r3
 800959a:	4770      	bx	lr
